<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Daily Trending</title>
    <description>Daily Trending of C in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:31:19 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>libsdl-org/SDL</title>
      <link>https://github.com/libsdl-org/SDL</link>
      <description>&lt;p&gt;Simple Directmedia Layer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Simple DirectMedia Layer (SDL for short) is a cross-platform library designed to make it easy to write multi-media software, such as games and emulators.&lt;/p&gt; 
&lt;p&gt;You can find the latest release and additional information at: &lt;a href=&quot;https://www.libsdl.org/&quot;&gt;https://www.libsdl.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Installation instructions and a quick introduction is available in &lt;a href=&quot;https://raw.githubusercontent.com/libsdl-org/SDL/main/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library is distributed under the terms of the zlib license, available in &lt;a href=&quot;https://raw.githubusercontent.com/libsdl-org/SDL/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Enjoy!&lt;/p&gt; 
&lt;p&gt;Sam Lantinga (&lt;a href=&quot;mailto:slouken@libsdl.org&quot;&gt;slouken@libsdl.org&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>freebsd/freebsd-src</title>
      <link>https://github.com/freebsd/freebsd-src</link>
      <description>&lt;p&gt;The FreeBSD src tree publish-only repository. Experimenting with &#39;simple&#39; pull requests....&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;FreeBSD Source:&lt;/h2&gt; 
&lt;p&gt;This is the top level of the FreeBSD source directory.&lt;/p&gt; 
&lt;p&gt;FreeBSD is an operating system used to power modern servers, desktops, and embedded platforms. A large community has continually developed it for more than thirty years. Its advanced networking, security, and storage features have made FreeBSD the platform of choice for many of the busiest web sites and most pervasive embedded networking and storage devices.&lt;/p&gt; 
&lt;p&gt;For copyright information, please see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/COPYRIGHT&quot;&gt;the file COPYRIGHT&lt;/a&gt; in this directory. Additional copyright information also exists for some sources in this tree - please see the specific source directories for more information.&lt;/p&gt; 
&lt;p&gt;The Makefile in this directory supports a number of targets for building components (or all) of the FreeBSD source tree. See build(7), config(8), &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/cutting-edge/#makeworld&quot;&gt;FreeBSD handbook on building userland&lt;/a&gt;, and &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/kernelconfig/&quot;&gt;Handbook for kernels&lt;/a&gt; for more information, including setting make(1) variables.&lt;/p&gt; 
&lt;p&gt;For information on the CPU architectures and platforms supported by FreeBSD, see the &lt;a href=&quot;https://www.freebsd.org/platforms/&quot;&gt;FreeBSD website&#39;s Platforms page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For official FreeBSD bootable images, see the &lt;a href=&quot;https://download.freebsd.org/ftp/releases/ISO-IMAGES/&quot;&gt;release page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Source Roadmap:&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Directory&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bin&lt;/td&gt; 
   &lt;td&gt;System/user commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cddl&lt;/td&gt; 
   &lt;td&gt;Various commands and libraries under the Common Development and Distribution License.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;contrib&lt;/td&gt; 
   &lt;td&gt;Packages contributed by 3rd parties.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;crypto&lt;/td&gt; 
   &lt;td&gt;Cryptography stuff (see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/crypto/README&quot;&gt;crypto/README&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;etc&lt;/td&gt; 
   &lt;td&gt;Template files for /etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gnu&lt;/td&gt; 
   &lt;td&gt;Commands and libraries under the GNU General Public License (GPL) or Lesser General Public License (LGPL). Please see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING&quot;&gt;gnu/COPYING&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING.LIB&quot;&gt;gnu/COPYING.LIB&lt;/a&gt; for more information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;include&lt;/td&gt; 
   &lt;td&gt;System include files.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;kerberos5&lt;/td&gt; 
   &lt;td&gt;Kerberos5 (Heimdal) package.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;lib&lt;/td&gt; 
   &lt;td&gt;System libraries.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;libexec&lt;/td&gt; 
   &lt;td&gt;System daemons.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;release&lt;/td&gt; 
   &lt;td&gt;Release building Makefile &amp;amp; associated tools.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;rescue&lt;/td&gt; 
   &lt;td&gt;Build system for statically linked /rescue utilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sbin&lt;/td&gt; 
   &lt;td&gt;System commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;secure&lt;/td&gt; 
   &lt;td&gt;Cryptographic libraries and commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;share&lt;/td&gt; 
   &lt;td&gt;Shared resources.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;stand&lt;/td&gt; 
   &lt;td&gt;Boot loader sources.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sys&lt;/td&gt; 
   &lt;td&gt;Kernel sources (see &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/sys/README.md&quot;&gt;sys/README.md&lt;/a&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;targets&lt;/td&gt; 
   &lt;td&gt;Support for experimental &lt;code&gt;DIRDEPS_BUILD&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tests&lt;/td&gt; 
   &lt;td&gt;Regression tests which can be run by Kyua. See &lt;a href=&quot;https://raw.githubusercontent.com/freebsd/freebsd-src/main/tests/README&quot;&gt;tests/README&lt;/a&gt; for additional information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tools&lt;/td&gt; 
   &lt;td&gt;Utilities for regression testing and miscellaneous tasks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;usr.bin&lt;/td&gt; 
   &lt;td&gt;User commands.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;usr.sbin&lt;/td&gt; 
   &lt;td&gt;System administration commands.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For information on synchronizing your source tree with one or more of the FreeBSD Project&#39;s development branches, please see &lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/cutting-edge/#current-stable&quot;&gt;FreeBSD Handbook&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>armink/FlashDB</title>
      <link>https://github.com/armink/FlashDB</link>
      <description>&lt;p&gt;An ultra-lightweight database that supports key-value and time series data | 一款支持 KV 数据和时序数据的超轻量级数据库&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/armink/FlashDB/master/docs/_media/flashdb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/armink/FlashDB/workflows/AutoTestCI/badge.svg?sanitize=true&quot; alt=&quot;GitHub Action&quot; /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/armink/FlashDB/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/armink/FlashDB&quot; alt=&quot;license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://armink.github.io/FlashDB/#/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-perfect-blue&quot; alt=&quot;docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;EN | &lt;a href=&quot;https://raw.githubusercontent.com/armink/FlashDB/master/README_zh.md&quot;&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/armink/FlashDB&quot;&gt;FlashDB&lt;/a&gt; is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, &lt;a href=&quot;https://github.com/armink/FlashDB&quot;&gt;FlashDB&lt;/a&gt; combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/armink/FlashDB&quot;&gt;FlashDB&lt;/a&gt; provides two database modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Key-value database&lt;/strong&gt;: It is a non-relational database that stores data as a collection of key-value pairs, where the key is used as a unique identifier. KVDB has simple operation and strong scalability.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Time Series Database&lt;/strong&gt;: Time Series Database (TSDB), which stores data in &lt;strong&gt;time sequence&lt;/strong&gt;. TSDB data has a timestamp, a large amount of data storage, and high insertion and query performance.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage scenario&lt;/h2&gt; 
&lt;p&gt;Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Key-value database&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Product parameter storage&lt;/li&gt; 
   &lt;li&gt;User configuration information storage&lt;/li&gt; 
   &lt;li&gt;Small file management&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Time Series Database&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Store dynamically generated structured data: such as environmental monitoring information collected by temperature and humidity sensors, human health information recorded in real time by smart bracelets, etc.&lt;/li&gt; 
   &lt;li&gt;Record operation log: store operation log of product history, record of abnormal alarm, etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Very small footprint, ram usage is almost &lt;strong&gt;0&lt;/strong&gt;;&lt;/li&gt; 
 &lt;li&gt;Support multiple partitions, &lt;strong&gt;multiple instances&lt;/strong&gt;. When the amount of data is large, the partition can be refined to reduce the retrieval time;&lt;/li&gt; 
 &lt;li&gt;Support &lt;strong&gt;wear balance&lt;/strong&gt; to extend Flash life;&lt;/li&gt; 
 &lt;li&gt;Support &lt;strong&gt;Power-off protection&lt;/strong&gt; function, high reliability;&lt;/li&gt; 
 &lt;li&gt;Supports two KV types, string and blob, which is convenient for users to operate;&lt;/li&gt; 
 &lt;li&gt;Support KV &lt;strong&gt;incremental upgrade&lt;/strong&gt;, after product firmware upgrade, KVDB content also supports automatic upgrade;&lt;/li&gt; 
 &lt;li&gt;Support to modify the status of each TSDB record to facilitate user management;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance and footprint&lt;/h2&gt; 
&lt;h3&gt;TSDB performance test 1 (nor flash W25Q64)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;msh /&amp;gt;tsl bench
Append 1250 TSL in 5 seconds, average: 250.00 tsl/S, 4.00 ms/per
Query total spent 2218 (ms) for 1251 TSL, min 1, max 2, average: 1.77 ms/per
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert average: 4 ms, query average: 1.8 ms&lt;/p&gt; 
&lt;h3&gt;TSDB performance test 2 (stm32f2 onchip flash)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;msh /&amp;gt;tsl bench
Append 13421 TSL in 5 seconds, average: 2684.20 tsl/S, 0.37 ms/per
Query total spent 1475 (ms) for 13422 TSL, min 0, max 1, average: 0.11 ms/per
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Insert average: 0.37 ms, query average: 0.12 ms&lt;/p&gt; 
&lt;h3&gt;Footprint (stm32f4 IAR8.20)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;    Module                  ro code  ro data  rw data
    ------                  -------  -------  -------
    fdb.o                     276      232        1
    fdb_kvdb.o              4 584      356        1
    fdb_tsdb.o              1 160      236
    fdb_utils.o               418    1 024
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above is the map file information of IAR. It can be seen that the footprint of FlashDB is very small.&lt;/p&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;FlashDB provides comprehensive documentation, see: &lt;a href=&quot;https://armink.github.io/FlashDB/#/&quot;&gt;https://armink.github.io/FlashDB/#/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Quick access:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://armink.github.io/FlashDB/#/quick-started&quot;&gt;Quick Start Document&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://armink.github.io/FlashDB/#/porting&quot;&gt;Porting Document&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://armink.github.io/FlashDB/#/configuration&quot;&gt;Configuration Document&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://armink.github.io/FlashDB/#/api&quot;&gt;API Document&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project uses the Apache-2.0 open source protocol. For details, please read the contents of the LICENSE file in the project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>espeak-ng/espeak-ng</title>
      <link>https://github.com/espeak-ng/espeak-ng</link>
      <description>&lt;p&gt;eSpeak NG is an open source speech synthesizer that supports more than hundred languages and accents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eSpeak NG Text-to-Speech&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/languages.md&quot;&gt;Supported languages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/#espeak-compatibility&quot;&gt;eSpeak Compatibility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/#history&quot;&gt;History&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/#license-information&quot;&gt;License Information&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;The eSpeak NG is a compact open source software text-to-speech synthesizer for Linux, Windows, Android and other operating systems. It supports &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/languages.md&quot;&gt;more than 100 languages and accents&lt;/a&gt;. It is based on the eSpeak engine created by Jonathan Duddington.&lt;/p&gt; 
&lt;p&gt;eSpeak NG uses a &quot;formant synthesis&quot; method. This allows many languages to be provided in a small size. The speech is clear, and can be used at high speeds, but is not as natural or smooth as larger synthesizers which are based on human speech recordings. It also supports Klatt formant synthesis, and the ability to use MBROLA as backend speech synthesizer.&lt;/p&gt; 
&lt;p&gt;eSpeak NG is available as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/src/espeak-ng.1.ronn&quot;&gt;command line&lt;/a&gt; program (Linux and Windows) to speak text from a file or from stdin.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/integration.md&quot;&gt;shared library&lt;/a&gt; version for use by other programs. (On Windows this is a DLL).&lt;/li&gt; 
 &lt;li&gt;A SAPI5 version for Windows, so it can be used with screen-readers and other programs that support the Windows SAPI5 interface.&lt;/li&gt; 
 &lt;li&gt;eSpeak NG has been ported to other platforms, including Solaris and Mac OSX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes different Voices, whose characteristics can be altered.&lt;/li&gt; 
 &lt;li&gt;Can produce speech output as a WAV file.&lt;/li&gt; 
 &lt;li&gt;SSML (Speech Synthesis Markup Language) is supported (not complete), and also HTML.&lt;/li&gt; 
 &lt;li&gt;Compact size. The program and its data, including many languages, totals about few Mbytes.&lt;/li&gt; 
 &lt;li&gt;Can be used as a front-end to &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/mbrola.md&quot;&gt;MBROLA diphone voices&lt;/a&gt;. eSpeak NG converts text to phonemes with pitch and length information.&lt;/li&gt; 
 &lt;li&gt;Can translate text into phoneme codes, so it could be adapted as a front end for another speech synthesis engine.&lt;/li&gt; 
 &lt;li&gt;Potential for other languages. Several are included in varying stages of progress. Help from native speakers for these or other languages is welcome.&lt;/li&gt; 
 &lt;li&gt;Written in C.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/ChangeLog.md&quot;&gt;ChangeLog&lt;/a&gt; for a description of the changes in the various releases and with the eSpeak NG project.&lt;/p&gt; 
&lt;p&gt;The following platforms are supported:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum Version&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/espeak-ng/espeak-ng/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BSD&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;4.0&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;Windows 8&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mac&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/guide.md&quot;&gt;User guide&lt;/a&gt; explains how to set up and use eSpeak NG from command line or as a library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/building.md&quot;&gt;Building guide&lt;/a&gt; provides info how to compile and build eSpeak NG from the source.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/index.md&quot;&gt;Index&lt;/a&gt; provides full list of more detailed information for contributors and developers.&lt;/li&gt; 
 &lt;li&gt;Look at &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/docs/contributing.md&quot;&gt;contribution guide&lt;/a&gt; to start your contribution.&lt;/li&gt; 
 &lt;li&gt;Look at &lt;a href=&quot;https://github.com/espeak-ng/espeak-ng/wiki/eSpeak-NG-roadmap&quot;&gt;eSpeak NG roadmap&lt;/a&gt; to participate in development of eSpeak NG.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;eSpeak Compatibility&lt;/h2&gt; 
&lt;p&gt;The &lt;em&gt;espeak-ng&lt;/em&gt; binaries use the same command-line options as &lt;em&gt;espeak&lt;/em&gt;, with several additions to provide new functionality from &lt;em&gt;espeak-ng&lt;/em&gt; such as specifying the output audio device name to use. The build creates symlinks of &lt;code&gt;espeak&lt;/code&gt; to &lt;code&gt;espeak-ng&lt;/code&gt;, and &lt;code&gt;speak&lt;/code&gt; to &lt;code&gt;speak-ng&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The espeak &lt;code&gt;speak_lib.h&lt;/code&gt; include file is located in &lt;code&gt;espeak-ng/speak_lib.h&lt;/code&gt; with an optional symlink in &lt;code&gt;espeak/speak_lib.h&lt;/code&gt;. This file contains the espeak 1.48.15 API, with a change to the &lt;code&gt;ESPEAK_API&lt;/code&gt; macro to fix building on Windows and some minor changes to the documentation comments. This C API is API and ABI compatible with espeak.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;espeak-data&lt;/code&gt; data has been moved to &lt;code&gt;espeak-ng-data&lt;/code&gt; to avoid conflicts with espeak. There have been various changes to the voice, dictionary and phoneme files that make them incompatible with espeak.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;espeak-ng&lt;/em&gt; project does not include the &lt;em&gt;espeakedit&lt;/em&gt; program. It has moved the logic to build the dictionary, phoneme and intonation binary files into the &lt;code&gt;libespeak-ng.so&lt;/code&gt; file that is accessible from the &lt;code&gt;espeak-ng&lt;/code&gt; command line and C API.&lt;/p&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;The program was originally known as &lt;strong&gt;speak&lt;/strong&gt; and originally written for Acorn/RISC_OS computers starting in 1995 by Jonathan Duddington. This was enhanced and re-written in 2007 as &lt;strong&gt;eSpeak&lt;/strong&gt;, including a relaxation of the original memory and processing power constraints, and with support for additional languages.&lt;/p&gt; 
&lt;p&gt;In 2010, Reece H. Dunn started maintaining a version of eSpeak on GitHub that was designed to make it easier to build eSpeak on POSIX systems, porting the build system to autotools in 2012. In late 2015, this project was officially forked to a new &lt;strong&gt;eSpeak NG&lt;/strong&gt; project. The new eSpeak NG project is a significant departure from the eSpeak project, with the intention of cleaning up the existing codebase, adding new features, and adding to and improving the supported languages.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;historical&lt;/em&gt; branch contains the available older releases of the original eSpeak that are not contained in the subversion repository.&lt;/p&gt; 
&lt;p&gt;1.24.02 is the first version of eSpeak to appear in the subversion repository, but releases from 1.05 to 1.24 are available at &lt;a href=&quot;http://sourceforge.net/projects/espeak/files/espeak/&quot;&gt;http://sourceforge.net/projects/espeak/files/espeak/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;These early releases have been checked into the historical branch, with the 1.24.02 release as the last entry. This makes it possible to use the replace functionality of git to see the earlier history:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git replace 8d59235f 63c1c019
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The source releases contain the &lt;code&gt;big_endian&lt;/code&gt;, &lt;code&gt;espeak-edit&lt;/code&gt;, &lt;code&gt;praat-mod&lt;/code&gt;, &lt;code&gt;riskos&lt;/code&gt;, &lt;code&gt;windows_dll&lt;/code&gt; and &lt;code&gt;windows_sapi&lt;/code&gt; folders. These do not appear in the source repository until later releases, so have been excluded from the historical commits to align them better with the 1.24.02 source commit.&lt;/p&gt; 
&lt;h2&gt;License Information&lt;/h2&gt; 
&lt;p&gt;eSpeak NG Text-to-Speech is released under the &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/COPYING&quot;&gt;GPL version 3&lt;/a&gt; or later license.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;getopt.c&lt;/code&gt; compatibility implementation for getopt support on Windows is taken from the NetBSD &lt;code&gt;getopt_long&lt;/code&gt; implementation, which is licensed under a &lt;a href=&quot;https://raw.githubusercontent.com/espeak-ng/espeak-ng/master/COPYING.BSD2&quot;&gt;2-clause BSD&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;Android is a trademark of Google LLC.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;The catalan extension was funded by [Departament de la Vicepresidència i de Polítiques Digitals i Territori de la Generalitat de Catalunya](&lt;a href=&quot;https://politiquesdigitals.gencat.cat/ca/inici/index.html#googtrans(ca%7Cen)&quot;&gt;https://politiquesdigitals.gencat.cat/ca/inici/index.html#googtrans(ca|en)&lt;/a&gt; within the framework of &lt;a href=&quot;https://politiquesdigitals.gencat.cat/ca/economia/catalonia-ai/aina&quot;&gt;Projecte AINA&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>portapack-mayhem/mayhem-firmware</title>
      <link>https://github.com/portapack-mayhem/mayhem-firmware</link>
      <description>&lt;p&gt;Custom firmware for the HackRF+PortaPack H1/H2/H4&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PortaPack Mayhem&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/actions/workflows/create_nightly_release.yml&quot;&gt;&lt;img src=&quot;https://github.com/portapack-mayhem/mayhem-firmware/actions/workflows/create_nightly_release.yml/badge.svg?branch=next&quot; alt=&quot;Nightly Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codescene.io/projects/8381&quot;&gt;&lt;img src=&quot;https://codescene.io/projects/8381/status-badges/code-health&quot; alt=&quot;CodeScene Code Health&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/portapack-mayhem/mayhem-firmware/total&quot; alt=&quot;GitHub All Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/portapack-mayhem/mayhem-firmware/latest/total&quot; alt=&quot;GitHub Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/eried/portapack&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/eried/portapack.svg?sanitize=true&quot; alt=&quot;Docker Hub Pulls&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/tuwVMv3&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/719669764804444213?label=Discord&quot; alt=&quot;Discord Chat&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is a fork of the &lt;a href=&quot;https://github.com/furrtek/portapack-havoc/&quot;&gt;Havoc&lt;/a&gt; firmware, which itself was a fork of the &lt;a href=&quot;https://github.com/sharebrained/portapack-hackrf&quot;&gt;PortaPack&lt;/a&gt; firmware, an add-on for the &lt;a href=&quot;http://greatscottgadgets.com/hackrf/&quot;&gt;HackRF&lt;/a&gt;. A fork is a derivate, in this case one that has extra features and fixes when compared to the older versions.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/PortaPack-Versions#new-h4m-mayhem-edition&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/dea337ab-fb64-4a2a-b419-69afd272e815&quot; height=&quot;310&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/PortaPack-Versions#h2m-mayhem-edition&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5c1f1da0688240ac7b2ccca0c8dbfd1d73f2540741ad8b1828ba4d5ea68af248/68747470733a2f2f6769746875622d70726f64756374696f6e2d757365722d61737365742d3632313064662e73332e616d617a6f6e6177732e636f6d2f343339333937392f3239353533323731382d38653562363631632d663934362d346365652d386232642d3061363135663737313566342e706e67&quot; height=&quot;310&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;%5Bhttps://github.com/portapack-mayhem/mayhem-firmware/wiki/PortaPack-Versions#h2m-mayhem-edition%5D(https://github.com/portapack-mayhem/mayhem-firmware/wiki/PortaPack-Versions#h1r1r2)&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c1f7dd1e7672324f60a513f0de23de76da6a669e63896a9de535d8c8093fc3c7/68747470733a2f2f7261772e6769746875622e636f6d2f7368617265627261696e65642f706f7274617061636b2d6861636b72662f6d61737465722f646f632f696d616765732f68617264776172652f706f7274617061636b5f68315f6f7065726174696e672e6a7067&quot; height=&quot;310&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What is this?&lt;/h1&gt; 
&lt;p&gt;If you are new to &lt;em&gt;HackRF+PortaPack+Mayhem&lt;/em&gt;, check these:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://share.hackrf.app/6HKX9A&quot;&gt;&lt;img alt=&quot;The Latest HackRF &amp;amp; Portapak Combo - H4M The Flipper Zero Killer?&quot; src=&quot;https://img.youtube.com/vi/Ew2qDgm2hf0/maxresdefault.jpg&quot; width=&quot;701&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://share.hackrf.app/X4D5TF&quot;&gt;&lt;img alt=&quot;It’s TOO Easy to Accidentally Do Illegal Stuff with This&quot; src=&quot;https://img.youtube.com/vi/OPckpjBSAOw/maxresdefault.jpg&quot; width=&quot;172&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://share.hackrf.app/F9MPOO&quot;&gt;&lt;img alt=&quot;HackRF Portapack H4M - Getting Started Guide&quot; src=&quot;https://img.youtube.com/vi/wzP0zWi85SI/maxresdefault.jpg&quot; width=&quot;172&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://share.hackrf.app/0JUHZ6&quot;&gt;&lt;img alt=&quot;The new HackRF Portapack H4M&quot; src=&quot;https://img.youtube.com/vi/onQRdCITmuk/maxresdefault.jpg&quot; width=&quot;172&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://share.hackrf.app/C0J6ZR&quot;&gt;&lt;img alt=&quot;HackRF 101 : Everything You Need to Know to Get Started!&quot; src=&quot;https://img.youtube.com/vi/xGR_PMD9LeU/maxresdefault.jpg&quot; width=&quot;172&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Frequently Asked Questions&lt;/h1&gt; 
&lt;p&gt;This repository expands upon the previous work by many people and aims to constantly add new features, bugfixes and generate documentation to make further development easier. &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/How-to-collaborate&quot;&gt;Collaboration&lt;/a&gt; is always welcomed and appreciated.&lt;/p&gt; 
&lt;h2&gt;What to buy?&lt;/h2&gt; 
&lt;!--not direct to h4m but to opensourcesdrlab https://share.hackrf.app/TUOLYI---&gt; 
&lt;p&gt;&lt;span&gt;✔&lt;/span&gt; &lt;img src=&quot;https://img.shields.io/badge/NEW-yellow&quot; alt=&quot;Static Badge&quot; /&gt; The fabulous H4M &lt;a href=&quot;https://share.hackrf.app/9UMBN5&quot;&gt;complete&lt;/a&gt; or &lt;a href=&quot;https://share.hackrf.app/30CQ55&quot;&gt;upgrade&lt;/a&gt;, featuring numerous improvements and accessories. Sold by our friends at &lt;a href=&quot;https://share.hackrf.app/99SAMT&quot;&gt;OpenSourceSDRLab&lt;/a&gt;. Join their giveaways on discord (check the badge on top). &lt;em&gt;EU customers&lt;/em&gt; can purchase via &lt;a href=&quot;https://share.hackrf.app/0CI2CR&quot;&gt;Lab401&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;✔&lt;/span&gt; A recommended one is this &lt;a href=&quot;https://www.ebay.com/itm/116382397447&quot;&gt;PortaPack H2&lt;/a&gt;, that includes everything you need with the plastic case &quot;inspired&quot; on &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/3d-printed-enclosure&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;✔&lt;/span&gt; Some individuals lean towards the &lt;a href=&quot;https://share.hackrf.app/24T3TO&quot;&gt;H2 with a metal enclosure&lt;/a&gt;, but its advantages remain debated. Share your insights on our &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/Hardware-overview&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Be cautious , &lt;em&gt;ask&lt;/em&gt; the seller about compatibility with the latest releases. Look out for the description of the item, if they provide the firmware files for an older version or they have custom setup instructions, this means it might be &lt;strong&gt;NOT compatible&lt;/strong&gt;, for example:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1091420/214579017-9ad970b9-0917-48f6-a550-588226d3f89b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If it looks &lt;strong&gt;too different&lt;/strong&gt;, this might mean that they are using their own recipe, check the &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/PortaPack-Versions&quot;&gt;different models&lt;/a&gt; in our wiki. For example all the H3 and clones of that version use their own version of the firmware. They do not contribute the changes back and eventually you will be left with a device that nobody maintains:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1091420/214581333-424900ee-26f8-4e96-be2f-69d8dc995ba9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Where is the latest version?&lt;/h2&gt; 
&lt;p&gt;The current &lt;strong&gt;stable release&lt;/strong&gt; is on the &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/portapack-mayhem/mayhem-firmware?label=Releases&amp;amp;style=social&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt;&lt;/a&gt; page. Follow the instructions you can find in the release description. The &lt;strong&gt;latest (nightly) release&lt;/strong&gt; can be found &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/releases/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;How can I collaborate&lt;/h2&gt; 
&lt;p&gt;You can write &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki&quot;&gt;documentation&lt;/a&gt;, fix bugs and &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/issues&quot;&gt;answer issues&lt;/a&gt; or add new functionality. Please check the following &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki/How-to-collaborate&quot;&gt;guide&lt;/a&gt; with details.&lt;/p&gt; 
&lt;p&gt;Consider that the hardware and firmware has been created and maintain by a &lt;a href=&quot;https://github.com/mossmann/hackrf/graphs/contributors&quot;&gt;lot&lt;/a&gt; of &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/graphs/contributors&quot;&gt;people&lt;/a&gt;, so always try collaborating your time and effort first. For coding related questions, if something does not fit as an issue, please join our Discord by clicking the chat badge on &lt;a href=&quot;https://raw.githubusercontent.com/portapack-mayhem/mayhem-firmware/next/#portapack-mayhem&quot;&gt;top&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/graphs/contributors&quot;&gt;&lt;img src=&quot;https://contrib.rocks/image?repo=portapack-mayhem/mayhem-firmware&quot; alt=&quot;Contributors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To support the people behind the hardware, please buy a genuine &lt;a href=&quot;https://greatscottgadgets.com/hackrf/&quot;&gt;HackRF&lt;/a&gt; and &lt;a href=&quot;https://store.sharebrained.com/products/portapack-for-hackrf-one-kit&quot;&gt;PortaPack&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What if I really want something specific?&lt;/h2&gt; 
&lt;p&gt;If what you need can be relevant in general, you can &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;template=02_feature_request.yml&quot;&gt;request a feature&lt;/a&gt;. Alternatively, go to our Discord by clicking the chat badge on &lt;a href=&quot;https://raw.githubusercontent.com/portapack-mayhem/mayhem-firmware/next/#portapack-mayhem&quot;&gt;top&lt;/a&gt; and discuss there.&lt;/p&gt; 
&lt;h2&gt;What if I need help?&lt;/h2&gt; 
&lt;p&gt;First, check the &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/wiki&quot;&gt;documentation&lt;/a&gt;. If you find a bug or you think the problem is related to the current repository, please open an &lt;a href=&quot;https://github.com/portapack-mayhem/mayhem-firmware/issues/new/choose&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can reach the &lt;a href=&quot;https://www.facebook.com/groups/177623356165819&quot;&gt;official community&lt;/a&gt; in Facebook, and our Discord by clicking the chat badge on &lt;a href=&quot;https://raw.githubusercontent.com/portapack-mayhem/mayhem-firmware/next/#portapack-mayhem&quot;&gt;top&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThrowTheSwitch/Unity</title>
      <link>https://github.com/ThrowTheSwitch/Unity</link>
      <description>&lt;p&gt;Simple unit testing for C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity Test &lt;img src=&quot;https://github.com/ThrowTheSwitch/Unity/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Copyright (c) 2007 - 2024 Unity Project by Mike Karlesky, Mark VanderVoord, and Greg Williams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to the Unity Test Project, one of the main projects of ThrowTheSwitch.org. Unity Test is a unit testing framework built for C, with a focus on working with embedded toolchains.&lt;/p&gt; 
&lt;p&gt;This project is made to test code targetting microcontrollers big and small. The core project is a single C file and a pair of headers, allowing it to be added to your existing build setup without too much headache. You may use any compiler you wish, and may use most existing build systems including Make, CMake, etc. If you&#39;d like to leave the hard work to us, you might be interested in Ceedling, a build tool also by ThrowTheSwitch.org.&lt;/p&gt; 
&lt;p&gt;If you&#39;re new to Unity, we encourage you to tour the &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also find the &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityChangeLog.md&quot;&gt;change log&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityKnownIssues.md&quot;&gt;known issues&lt;/a&gt; in our documentation.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/&quot;&gt;docs&lt;/a&gt; folder contains a &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&quot;&gt;getting started guide&lt;/a&gt; and much more tips about using Unity.&lt;/p&gt; 
&lt;h2&gt;Unity Assertion Summary&lt;/h2&gt; 
&lt;p&gt;For the full list, see &lt;a href=&quot;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityAssertionsReference.md&quot;&gt;UnityAssertionsReference.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Basic Validity Tests&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_TRUE(condition)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to false&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FALSE(condition)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to true&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT(condition)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_TRUE&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_UNLESS(condition)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_FALSE&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_FAIL()
TEST_FAIL_MESSAGE(message)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This test is automatically marked as a failure. The message is output stating why.&lt;/p&gt; 
&lt;h3&gt;Numerical Assertions: Integers&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_INT(expected, actual)
TEST_ASSERT_EQUAL_INT8(expected, actual)
TEST_ASSERT_EQUAL_INT16(expected, actual)
TEST_ASSERT_EQUAL_INT32(expected, actual)
TEST_ASSERT_EQUAL_INT64(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two integers for equality and display errors as signed integers. A cast will be performed to your natural integer size so often this can just be used. When you need to specify the exact size, you can use a specific version.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_UINT(expected, actual)
TEST_ASSERT_EQUAL_UINT8(expected, actual)
TEST_ASSERT_EQUAL_UINT16(expected, actual)
TEST_ASSERT_EQUAL_UINT32(expected, actual)
TEST_ASSERT_EQUAL_UINT64(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two integers for equality and display errors as unsigned integers. Like INT, there are variants for different sizes also.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX(expected, actual)
TEST_ASSERT_EQUAL_HEX8(expected, actual)
TEST_ASSERT_EQUAL_HEX16(expected, actual)
TEST_ASSERT_EQUAL_HEX32(expected, actual)
TEST_ASSERT_EQUAL_HEX64(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compares two integers for equality and display errors as hexadecimal. Like the other integer comparisons, you can specify the size... here the size will also affect how many nibbles are shown (for example, &lt;code&gt;HEX16&lt;/code&gt; will show 4 nibbles).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another way of calling TEST_ASSERT_EQUAL_INT&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_INT_WITHIN(delta, expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value. This also comes in size specific variants.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_GREATER_THAN(threshold, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is greater than the threshold. This also comes in size specific variants.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN(threshold, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is less than the threshold. This also comes in size specific variants.&lt;/p&gt; 
&lt;h3&gt;Arrays&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;_ARRAY
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can append &lt;code&gt;_ARRAY&lt;/code&gt; to any of these macros to make an array comparison of that type. Here you will need to care a bit more about the actual size of the value being checked. You will also specify an additional argument which is the number of elements to compare. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, elements)

_EACH_EQUAL
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another array comparison option is to check that EVERY element of an array is equal to a single expected value. You do this by specifying the EACH_EQUAL macro. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, elements)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Numerical Assertions: Bitwise&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS(mask, expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use an integer mask to specify which bits should be compared between two other integers. High bits in the mask are compared, low bits ignored.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_HIGH(mask, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set high. High bits in the mask are compared, low bits ignored.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_LOW(mask, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set low. High bits in the mask are compared, low bits ignored.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_HIGH(bit, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Test a single bit and verify that it is high. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_LOW(bit, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Test a single bit and verify that it is low. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; 
&lt;h3&gt;Numerical Assertions: Floats&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)
TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_NOT_WITHIN(delta, expected, actual)
TEST_ASSERT_DOUBLE_NOT_WITHIN(delta, expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is NOT within plus or minus delta of the expected value.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_FLOAT(expected, actual)
TEST_ASSERT_EQUAL_DOUBLE(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that two floating point values are &quot;equal&quot; within a small % delta of the expected value.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_EQUAL_FLOAT(expected, actual)
TEST_ASSERT_NOT_EQUAL_DOUBLE(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that two floating point values are NOT &quot;equal&quot; within a small % delta of the expected value.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN_FLOAT(threshold, actual)
TEST_ASSERT_LESS_THAN_DOUBLE(threshold, actual)
TEST_ASSERT_GREATER_THAN_FLOAT(threshold, actual)
TEST_ASSERT_GREATER_THAN_DOUBLE(threshold, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Asserts that the actual value is less than or greater than the threshold.&lt;/p&gt; 
&lt;p&gt;There are also &lt;code&gt;LESS_OR_EQUAL&lt;/code&gt; and &lt;code&gt;GREATER_OR_EQUAL&lt;/code&gt; variations. These obey the same rules for equality as do &lt;code&gt;TEST_ASSERT_EQUAL_FLOAT&lt;/code&gt; and &lt;code&gt;TEST_ASSERT_EQUAL_DOUBLE&lt;/code&gt;: If the two values are within a small % delta of the expected value, the assertion will pass.&lt;/p&gt; 
&lt;h3&gt;String Assertions&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING(expected, actual)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different. Output a custom message on failure.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters. Output a custom message on failure.&lt;/p&gt; 
&lt;h3&gt;Pointer Assertions&lt;/h3&gt; 
&lt;p&gt;Most pointer operations can be performed by simply using the integer comparisons above. However, a couple of special cases are added for clarity.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NULL(pointer)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Fails if the pointer is not equal to NULL&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_NULL(pointer)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Fails if the pointer is equal to NULL&lt;/p&gt; 
&lt;h3&gt;Memory Assertions&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compare two blocks of memory. This is a good generic assertion for types that can&#39;t be coerced into acting like standard types... but since it&#39;s a memory compare, you have to be careful that your data types are packed.&lt;/p&gt; 
&lt;h3&gt;_MESSAGE&lt;/h3&gt; 
&lt;p&gt;You can append &lt;code&gt;\_MESSAGE&lt;/code&gt; to any of the macros to make them take an additional argument. This argument is a string that will be printed at the end of the failure strings. This is useful for specifying more information about the problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>confluentinc/librdkafka</title>
      <link>https://github.com/confluentinc/librdkafka</link>
      <description>&lt;p&gt;The Apache Kafka C/C++ library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;librdkafka - the Apache Kafka C/C++ client library&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2012-2022, &lt;a href=&quot;http://www.edenhill.se/&quot;&gt;Magnus Edenhill&lt;/a&gt;. 2023 &lt;a href=&quot;https://www.confluent.io/&quot;&gt;Confluent Inc.&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka&quot;&gt;https://github.com/confluentinc/librdkafka&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is a C library implementation of the &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt; protocol, providing Producer, Consumer and Admin clients. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is licensed under the 2-clause BSD license.&lt;/p&gt; 
&lt;p&gt;KAFKA is a registered trademark of The Apache Software Foundation and has been licensed for use by librdkafka. librdkafka has no affiliation with and is not endorsed by The Apache Software Foundation.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full Exactly-Once-Semantics (EOS) support&lt;/li&gt; 
 &lt;li&gt;High-level producer, including Idempotent and Transactional producers&lt;/li&gt; 
 &lt;li&gt;High-level balanced KafkaConsumer (requires broker &amp;gt;= 0.9)&lt;/li&gt; 
 &lt;li&gt;Simple (legacy) consumer&lt;/li&gt; 
 &lt;li&gt;Admin client&lt;/li&gt; 
 &lt;li&gt;Compression: snappy, gzip, lz4, zstd&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Using-SSL-with-librdkafka&quot;&gt;SSL&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Using-SASL-with-librdkafka&quot;&gt;SASL&lt;/a&gt; (GSSAPI/Kerberos/SSPI, PLAIN, SCRAM, OAUTHBEARER) support&lt;/li&gt; 
 &lt;li&gt;Full list of &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#supported-kips&quot;&gt;supported KIPs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Broker version support: &amp;gt;=0.8 (see &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#broker-version-compatibility&quot;&gt;Broker version compatibility&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Guaranteed API stability for C &amp;amp; C++ APIs (ABI safety guaranteed for C)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/STATISTICS.md&quot;&gt;Statistics&lt;/a&gt; metrics&lt;/li&gt; 
 &lt;li&gt;Debian package: librdkafka1 and librdkafka-dev in Debian and Ubuntu&lt;/li&gt; 
 &lt;li&gt;RPM package: librdkafka and librdkafka-devel&lt;/li&gt; 
 &lt;li&gt;Gentoo package: dev-libs/librdkafka&lt;/li&gt; 
 &lt;li&gt;Portable: runs on Linux, MacOS X, Windows, Solaris, FreeBSD, AIX, ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Public API in &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src/rdkafka.h&quot;&gt;C header&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src-cpp/rdkafkacpp.h&quot;&gt;C++ header&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Introduction and manual in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/INTRODUCTION.md&quot;&gt;INTRODUCTION.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Configuration properties in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/CONFIGURATION.md&quot;&gt;CONFIGURATION.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Statistics metrics in &lt;a href=&quot;https://github.com/confluentinc/librdkafka/raw/master/STATISTICS.md&quot;&gt;STATISTICS.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki&quot;&gt;Frequently asked questions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Step-by-step tutorial &lt;a href=&quot;https://developer.confluent.io/get-started/c/&quot;&gt;Getting Started with Apache Kafka and C/C++&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;code&gt;master&lt;/code&gt; branch is actively developed, use latest &lt;a href=&quot;https://github.com/confluentinc/librdkafka/releases&quot;&gt;release&lt;/a&gt; for production use.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Installing prebuilt packages&lt;/h2&gt; 
&lt;p&gt;On Mac OSX, install librdkafka with homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install librdkafka
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Debian and Ubuntu, install librdkafka from the Confluent APT repositories, see instructions &lt;a href=&quot;https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software&quot;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ apt install librdkafka-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On RedHat, CentOS, Fedora, install librdkafka from the Confluent YUM repositories, instructions &lt;a href=&quot;https://docs.confluent.io/current/installation/installing_cp/rhel-centos.html#get-the-software&quot;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yum install librdkafka-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows, reference &lt;a href=&quot;https://www.nuget.org/packages/librdkafka.redist/&quot;&gt;librdkafka.redist&lt;/a&gt; NuGet package in your Visual Studio project.&lt;/p&gt; 
&lt;p&gt;For other platforms, follow the source building instructions below.&lt;/p&gt; 
&lt;h2&gt;Installing librdkafka using vcpkg&lt;/h2&gt; 
&lt;p&gt;You can download and install librdkafka using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install vcpkg if not already installed
$ git clone https://github.com/Microsoft/vcpkg.git
$ cd vcpkg
$ ./bootstrap-vcpkg.sh
$ ./vcpkg integrate install

# Install librdkafka
$ vcpkg install librdkafka
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The librdkafka package in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h2&gt;Build from source&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;The GNU toolchain
GNU make
pthreads
zlib-dev (optional, for gzip compression support)
libssl-dev (optional, for SSL and SASL SCRAM support)
libsasl2-dev (optional, for SASL GSSAPI support)
libzstd-dev (optional, for ZStd compression support)
libcurl-dev (optional, for SASL OAUTHBEARER OIDC support)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Static linking of ZStd (requires zstd &amp;gt;= 1.2.1) in the producer enables encoding the original size in the compression frame header, which will speed up the consumer. Use &lt;code&gt;STATIC_LIB_libzstd=/path/to/libzstd.a ./configure --enable-static&lt;/code&gt; to enable static ZStd linking. MacOSX example: &lt;code&gt;STATIC_LIB_libzstd=$(brew ls -v zstd | grep libzstd.a$) ./configure --enable-static&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;  ./configure
  # Or, to automatically install dependencies using the system&#39;s package manager:
  # ./configure --install-deps
  # Or, build dependencies from source:
  # ./configure --install-deps --source-deps-only

  make
  sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/README.win32&quot;&gt;README.win32&lt;/a&gt; for instructions how to build on Windows with Microsoft Visual Studio.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/packaging/cmake/README.md&quot;&gt;CMake instructions&lt;/a&gt; for experimental CMake build (unsupported).&lt;/p&gt; 
&lt;h2&gt;Usage in code&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://developer.confluent.io/get-started/c/&quot;&gt;getting Started with Apache Kafka and C/C++&lt;/a&gt; for a basic tutorial.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/confluentinc/librdkafka/master/examples/&quot;&gt;examples directory&lt;/a&gt; for code using:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Producers: basic producers, idempotent producers, transactional producers.&lt;/li&gt; 
   &lt;li&gt;Consumers: basic consumers, reading batches of messages.&lt;/li&gt; 
   &lt;li&gt;Performance and latency testing tools.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/confluentinc/examples/tree/master/clients/cloud/c&quot;&gt;examples GitHub repo&lt;/a&gt; for code connecting to a cloud streaming data service based on Apache Kafka&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Link your program with &lt;code&gt;-lrdkafka&lt;/code&gt; (C) or &lt;code&gt;-lrdkafka++&lt;/code&gt; (C++).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Commercial support&lt;/h2&gt; 
&lt;p&gt;Commercial support is available from &lt;a href=&quot;https://www.confluent.io/&quot;&gt;Confluent Inc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Only the &lt;a href=&quot;https://github.com/confluentinc/librdkafka/releases&quot;&gt;latest official release&lt;/a&gt; is supported for community members.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;File bug reports and feature requests using &lt;a href=&quot;https://github.com/confluentinc/librdkafka/issues&quot;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Questions and discussions are welcome on the &lt;a href=&quot;https://github.com/confluentinc/librdkafka/discussions&quot;&gt;Discussions&lt;/a&gt; forum, and on the &lt;a href=&quot;https://launchpass.com/confluentcommunity&quot;&gt;Confluent Community slack&lt;/a&gt; #clients channel.&lt;/p&gt; 
&lt;h1&gt;Language bindings&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;C#/.NET: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-dotnet&quot;&gt;confluent-kafka-dotnet&lt;/a&gt; (based on &lt;a href=&quot;https://github.com/ah-/rdkafka-dotnet&quot;&gt;rdkafka-dotnet&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;C++: &lt;a href=&quot;https://github.com/mfontanini/cppkafka&quot;&gt;cppkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;C++: &lt;a href=&quot;https://github.com/Morgan-Stanley/modern-cpp-kafka&quot;&gt;modern-cpp-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Common Lisp: &lt;a href=&quot;https://github.com/SahilKang/cl-rdkafka&quot;&gt;cl-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;D (C-like): &lt;a href=&quot;https://github.com/DlangApache/librdkafka/&quot;&gt;librdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;D (C++-like): &lt;a href=&quot;https://github.com/tamediadigital/librdkafka-d&quot;&gt;librdkafkad&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Erlang: &lt;a href=&quot;https://github.com/silviucpp/erlkaf&quot;&gt;erlkaf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Go: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-go&quot;&gt;confluent-kafka-go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Haskell (kafka, conduit, avro, schema registry): &lt;a href=&quot;https://github.com/haskell-works/hw-kafka&quot;&gt;hw-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kotlin Native: &lt;a href=&quot;https://github.com/icemachined/kafka-kotlin-native&quot;&gt;Kafka-Kotlin-Native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lua: &lt;a href=&quot;https://github.com/mistsv/luardkafka&quot;&gt;luardkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Node.js: &lt;a href=&quot;https://github.com/Blizzard/node-rdkafka&quot;&gt;node-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OCaml: &lt;a href=&quot;https://github.com/didier-wenzek/ocaml-kafka&quot;&gt;ocaml-kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Perl: &lt;a href=&quot;https://github.com/bookingcom/perl-Net-Kafka&quot;&gt;Net::Kafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/arnaud-lb/php-rdkafka&quot;&gt;php-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/php-kafka/php-simple-kafka-client&quot;&gt;php-simple-kafka-client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python: &lt;a href=&quot;https://github.com/confluentinc/confluent-kafka-python&quot;&gt;confluent-kafka-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python: &lt;a href=&quot;https://github.com/Parsely/pykafka&quot;&gt;PyKafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;Hermann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/appsignal/rdkafka-ruby&quot;&gt;rdkafka-ruby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/fede1024/rust-rdkafka&quot;&gt;rust-rdkafka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tcl: &lt;a href=&quot;https://github.com/flightaware/kafkatcl&quot;&gt;KafkaTcl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Shell: &lt;a href=&quot;https://github.com/edenhill/kafkacat&quot;&gt;kafkacat&lt;/a&gt; - Apache Kafka command line tool&lt;/li&gt; 
 &lt;li&gt;Swift: &lt;a href=&quot;https://github.com/PerfectlySoft/Perfect-Kafka&quot;&gt;Perfect-Kafka&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/confluentinc/librdkafka/wiki/Powered-by-librdkafka&quot;&gt;Powered by librdkafka&lt;/a&gt; for an incomplete list of librdkafka users.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DarkFlippers/unleashed-firmware</title>
      <link>https://github.com/DarkFlippers/unleashed-firmware</link>
      <description>&lt;p&gt;Flipper Zero Unleashed Firmware&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/466c40d5-f6a1-444d-a235-d9026f7cd0ff&quot; align=&quot;center&quot; alt=&quot;Unleashed Firmware Logo&quot; border=&quot;0&quot; /&gt; &lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://t.me/flipperzero_unofficial&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?color=neon&amp;amp;style=flat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fflipperzero_unofficial&quot; alt=&quot;English Telegram Chat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://t.me/flipperzero_unofficial_ru&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?color=neon&amp;amp;style=flat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fflipperzero_unofficial_ru&quot; alt=&quot;Russian Telegram Chat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://t.me/flipperzero_unofficial_ua&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?color=neon&amp;amp;style=flat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fflipperzero_unofficial_ua&quot; alt=&quot;Ukraine Telegram Chat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.unleashedflip.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/937479784148115456?style=flat&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;color=%237289DA&amp;amp;link=https%3A%2F%2Fdiscord.unleashedflip.com%2F&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Flipper Zero Unleashed Firmware&lt;/h1&gt; 
&lt;p&gt;This firmware is a fork of the original (OFW) version of &lt;a href=&quot;https://github.com/flipperdevices/flipperzero-firmware&quot;&gt;flipperdevices/flipperzero-firmware&lt;/a&gt; and represents the &lt;strong&gt;most stable&lt;/strong&gt; custom build, incorporating &lt;strong&gt;new features&lt;/strong&gt; and &lt;strong&gt;improvements&lt;/strong&gt; to the original components while remaining &lt;strong&gt;fully compatible&lt;/strong&gt; with the API and applications of the original firmware.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This software is intended solely for experimental purposes and is not meant for any illegal activities. We do not condone unlawful behavior and strongly encourage you to use it only within the bounds of the law.&lt;/p&gt; 
 &lt;p&gt;This project is developed independently and is not affiliated with Flipper Devices.&lt;/p&gt; 
 &lt;p&gt;Also be aware, DarkFlippers/unleashed-firmware is the only official page of the project, there is no paid, premium or closed source versions and if someone contacts you and say they are from our team and try to offer something like that - they are scammers, block that users ASAP&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;Before getting started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Review the Official Documentation:&lt;/strong&gt; &lt;a href=&quot;https://docs.flipper.net&quot;&gt;docs.flipper.net&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installation Guide &amp;amp; Version Info:&lt;/strong&gt;&lt;br /&gt; How to install the firmware by following the &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/HowToInstall.md&quot;&gt;Installation Guide&lt;/a&gt; and check the &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/CHANGELOG.md#recommended-update-option---web-updater&quot;&gt;version information&lt;/a&gt; (&lt;code&gt;e&lt;/code&gt;, &lt;code&gt; &lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;FAQ:&lt;/strong&gt;&lt;br /&gt; Find answers to common questions in the &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/FAQ.md&quot;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Releases&lt;/h2&gt; 
&lt;h3&gt;Release builds (stable)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://github.com/badges/shields/assets/10694593/c5c5acc3-f434-4a8d-a834-6d94a7ffb45a&quot; alt=&quot;Telegram&quot; title=&quot;Telegram&quot; width=&quot;14&quot; height=&quot;14&quot; /&gt; Telegram: &lt;a href=&quot;https://t.me/unleashed_fw&quot;&gt;t.me/unleashed_fw&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/releases&quot;&gt; &lt;img src=&quot;https://cdn.simpleicons.org/github/black/white&quot; alt=&quot;GitHub&quot; title=&quot;&quot; width=&quot;14&quot; height=&quot;14&quot; /&gt; GitHub Releases&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dev builds (unstable)&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Built automatically from dev branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Web site: &lt;a href=&quot;https://dev.unleashedflip.com&quot;&gt;dev.unleashedflip.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://github.com/badges/shields/assets/10694593/c5c5acc3-f434-4a8d-a834-6d94a7ffb45a&quot; alt=&quot;Telegram&quot; title=&quot;Telegram&quot; width=&quot;14&quot; height=&quot;14&quot; /&gt; Telegram: &lt;a href=&quot;https://t.me/kotnehleb&quot;&gt;t.me/kotnehleb&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🆕 What&#39;s New&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Sub‑GHz Library &amp;amp; HAL&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Regional TX restrictions removed&lt;/li&gt; 
   &lt;li&gt;Extra Sub-GHz frequencies added&lt;/li&gt; 
   &lt;li&gt;Frequency range can be extended in settings file &lt;em&gt;(warning: It can damage Flipper&#39;s hardware)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;Many rolling code &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/#current-modified-and-new-sub-ghz-protocols-list&quot;&gt;protocols&lt;/a&gt; now have the ability to save &amp;amp; send captured signals&lt;/li&gt; 
   &lt;li&gt;FAAC SLH (Spa) &amp;amp; BFT Mitto (keeloq secure with seed) manual creation&lt;/li&gt; 
   &lt;li&gt;External CC1101 module support &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/307&quot;&gt;(by quen0n)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Sub‑GHz Main App&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Save last used settings &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/77&quot;&gt;(by derskythe)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;New frequency analyzer &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/43&quot;&gt;(by ClusterM)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Press OK in frequency analyzer to use detected frequency in Read modes &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/77&quot;&gt;(by derskythe)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Long press OK button in Sub-GHz Frequency analyzer to switch to Read menu &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/79&quot;&gt;(by derskythe)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;New option to use timestamps + protocol name when you saving file, instead of random name or timestamp only - Enable in &lt;code&gt;Radio Settings -&amp;gt; Protocol Names = ON&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Read mode UI improvements (shows time when signal was received) (by @wosk)&lt;/li&gt; 
   &lt;li&gt;External CC1101 module support (Hardware SPI used)&lt;/li&gt; 
   &lt;li&gt;External CC1101 module amplifier control (or LED control) support (enabled by default)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Hold right in received signal list to delete selected signal&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Custom buttons for Keeloq / Alutech AT4N / Nice Flor S / Somfy Telis / Security+ 2.0 / CAME Atomo&lt;/strong&gt; - now you can use arrow buttons to send signal with different button code&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Add manually&lt;/code&gt; menu extended with new protocols&lt;/li&gt; 
   &lt;li&gt;FAAC SLH, BFT Mitto / Somfy Telis / Nice Flor S / CAME Atomo, etc. manual creation with programming new remote into receiver (use button 0xF for BFT Mitto, 0x8 (Prog) on Somfy Telis, (right arrow button for other protocols))&lt;/li&gt; 
   &lt;li&gt;Debug mode counter increase settings (+1 → +5, +10, default: +1)&lt;/li&gt; 
   &lt;li&gt;Debug PIN output settings for protocol development&lt;/li&gt; 
   &lt;li&gt;Ignore options - Alarms: Hollarm, GangQi | Cars: Kia, Starline, ScherKhan | Sensors: Magellan, Honeywell, Honeywell WDB (doorbells), Legrand (doorbells), Feron (RGB lights)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Sub‑GHz Apps (by Unleashed Team)&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Sub-GHz Bruteforce - static code brute-force plugin&lt;/li&gt; 
   &lt;li&gt;Time delay (between signals) setting (hold Up in main screen (says Up to Save)) + configure repeats in protocols list by pressing right button on selected protocol&lt;/li&gt; 
   &lt;li&gt;Load your own file and select bytes you want to bruteforce or use preconfigured options in protocols list&lt;/li&gt; 
   &lt;li&gt;Sub-GHz Remote - remote control for 5 sub-ghz files | bind one file for each button&lt;/li&gt; 
   &lt;li&gt;use the built-in constructor or make config file by following this &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemotePlugin.md&quot;&gt;instruction&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Infrared (IR)&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Recompiled IR TV Universal Remote for ALL buttons&lt;/li&gt; 
   &lt;li&gt;Universal remotes for Projectors, Fans, A/Cs and Audio(soundbars, etc.) → Also always updated and verified by our team&lt;/li&gt; 
   &lt;li&gt;Infrared → &lt;code&gt;RCA&lt;/code&gt; Protocol&lt;/li&gt; 
   &lt;li&gt;Infrared → External IR modules support (with autodetect by OFW)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;NFC/RFID/iButton&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;LFRFID and iButton Fuzzer plugins&lt;/li&gt; 
   &lt;li&gt;Add DEZ 8 display form for EM4100 (by @korden32)&lt;/li&gt; 
   &lt;li&gt;Extra Mifare Classic keys in system dict&lt;/li&gt; 
   &lt;li&gt;EMV Protocol + Public data parser (by @Leptopt1los and @wosk)&lt;/li&gt; 
   &lt;li&gt;NFC &lt;code&gt;Add manually&lt;/code&gt; → Mifare Classic with custom UID&lt;/li&gt; 
   &lt;li&gt;NFC parsers: Umarsh, Zolotaya Korona, Kazan, Metromoney, Moscow Social Card, Troika (reworked) and &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/tree/dev/applications/main/nfc/plugins/supported_cards&quot;&gt;many others&lt;/a&gt; (by @Leptopt1los and @assasinfil)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Quality of Life &amp;amp; Other Features&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Customizable Flipper name &lt;strong&gt;Update! Now can be changed in Settings → Desktop&lt;/strong&gt; (by @xMasterX and @Willy-JL)&lt;/li&gt; 
   &lt;li&gt;Text Input UI element → Cursor feature (by @Willy-JL)&lt;/li&gt; 
   &lt;li&gt;Byte Input Mini editor → &lt;strong&gt;Press UP&lt;/strong&gt; multiple times until the nibble editor appears (by @gid9798)&lt;/li&gt; 
   &lt;li&gt;Clock on Desktop &lt;code&gt;Settings -&amp;gt; Desktop -&amp;gt; Show Clock&lt;/code&gt; (by @gid9798)&lt;/li&gt; 
   &lt;li&gt;Battery percentage display with different styles &lt;code&gt;Settings -&amp;gt; Desktop -&amp;gt; Battery View&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;More games in Dummy Mode → click or hold any of arrow buttons&lt;/li&gt; 
   &lt;li&gt;Lock device with pin (or regular lock if pin not set) by holding UP button on main screen &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/pull/107&quot;&gt;(by an4tur0r)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;BadKB&lt;/strong&gt; (BadUSB) &lt;a href=&quot;https://github.com/Flipper-XFW/Xtreme-Firmware/tree/dev/applications/main/bad_kb&quot;&gt;(by Willy-JL, ClaraCrazy, XFW contributors)&lt;/a&gt; - (Integrated into BadUSB app now!) - (aka BadUSB via Bluetooth)&lt;/li&gt; 
   &lt;li&gt;BadUSB → Keyboard layouts &lt;a href=&quot;https://github.com/dummy-decoy/flipperzero-firmware/tree/dummy_decoy/bad_usb_keyboard_layout&quot;&gt;(by rien &amp;gt; dummy-decoy)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom community plugins and games added + all known working apps can be downloaded in extra pack in every release&lt;/li&gt; 
   &lt;li&gt;Other small fixes and changes throughout&lt;/li&gt; 
   &lt;li&gt;See other changes in readme below&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Also check the &lt;a href=&quot;https://github.com/DarkFlippers/unleashed-firmware/releases&quot;&gt;changelog in releases&lt;/a&gt; for latest updates!&lt;/p&gt; 
&lt;h3&gt;Current modified and new Sub-GHz protocols list:&lt;/h3&gt; 
&lt;p&gt;Thanks to Official team (to their SubGHz Developer, Skorp) for implementing support (decoder + encoder / or decode only) for these protocols in OFW.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Not all Keeloq systems are supported for decoding or emulation!&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Supported Keeloq manufacturers include&lt;/strong&gt;&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Column 1&lt;/th&gt; 
     &lt;th&gt;Column 2&lt;/th&gt; 
     &lt;th&gt;Column 3&lt;/th&gt; 
     &lt;th&gt;Column 4&lt;/th&gt; 
     &lt;th&gt;Column 5&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Alligator&lt;/td&gt; 
     &lt;td&gt;Comunello&lt;/td&gt; 
     &lt;td&gt;GSN&lt;/td&gt; 
     &lt;td&gt;Magic_4&lt;/td&gt; 
     &lt;td&gt;SL_A2-A4&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Alligator_S-275&lt;/td&gt; 
     &lt;td&gt;Dea_Mio&lt;/td&gt; 
     &lt;td&gt;Guard_RF-311A&lt;/td&gt; 
     &lt;td&gt;Mongoose&lt;/td&gt; 
     &lt;td&gt;SL_A6-A9/Tomahawk_9010&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;APS-1100_APS-2550&lt;/td&gt; 
     &lt;td&gt;DTM_Neo&lt;/td&gt; 
     &lt;td&gt;Harpoon&lt;/td&gt; 
     &lt;td&gt;Mutanco_Mutancode&lt;/td&gt; 
     &lt;td&gt;SL_B6,B9_dop&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Aprimatic&lt;/td&gt; 
     &lt;td&gt;DoorHan&lt;/td&gt; 
     &lt;td&gt;IronLogic&lt;/td&gt; 
     &lt;td&gt;NICE_MHOUSE&lt;/td&gt; 
     &lt;td&gt;Sommer(fsk476)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Beninca&lt;/td&gt; 
     &lt;td&gt;EcoStar&lt;/td&gt; 
     &lt;td&gt;JCM_Tech&lt;/td&gt; 
     &lt;td&gt;NICE_Smilo&lt;/td&gt; 
     &lt;td&gt;Stilmatic&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;BFT&lt;/td&gt; 
     &lt;td&gt;Elmes_Poland&lt;/td&gt; 
     &lt;td&gt;KEY&lt;/td&gt; 
     &lt;td&gt;Normstahl&lt;/td&gt; 
     &lt;td&gt;Teco&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Came_Space&lt;/td&gt; 
     &lt;td&gt;FAAC_RC,XT&lt;/td&gt; 
     &lt;td&gt;Kingates_Stylo4k&lt;/td&gt; 
     &lt;td&gt;Pantera&lt;/td&gt; 
     &lt;td&gt;Tomahawk_TZ-9030&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Cenmax&lt;/td&gt; 
     &lt;td&gt;FAAC_SLH&lt;/td&gt; 
     &lt;td&gt;KGB/Subaru&lt;/td&gt; 
     &lt;td&gt;Pantera_CLK&lt;/td&gt; 
     &lt;td&gt;Tomahawk_Z,X_3-5&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Cenmax_St-5&lt;/td&gt; 
     &lt;td&gt;Faraon&lt;/td&gt; 
     &lt;td&gt;Leopard&lt;/td&gt; 
     &lt;td&gt;Pantera_XS/Jaguar&lt;/td&gt; 
     &lt;td&gt;ZX-730-750-1055&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Cenmax_St-7&lt;/td&gt; 
     &lt;td&gt;Genius_Bravo&lt;/td&gt; 
     &lt;td&gt;Magic_1&lt;/td&gt; 
     &lt;td&gt;Partisan_RX&lt;/td&gt; 
     &lt;td&gt;IL-100(Smart)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Centurion&lt;/td&gt; 
     &lt;td&gt;Gibidi&lt;/td&gt; 
     &lt;td&gt;Magic_2&lt;/td&gt; 
     &lt;td&gt;Reff&lt;/td&gt; 
     &lt;td&gt;Merlin&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Monarch&lt;/td&gt; 
     &lt;td&gt;Jolly Motors&lt;/td&gt; 
     &lt;td&gt;Magic_3&lt;/td&gt; 
     &lt;td&gt;Sheriff&lt;/td&gt; 
     &lt;td&gt;Steelmate&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Motorline&lt;/td&gt; 
     &lt;td&gt;Rosh&lt;/td&gt; 
     &lt;td&gt;Pecinin&lt;/td&gt; 
     &lt;td&gt;Rossi&lt;/td&gt; 
     &lt;td&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/details&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;Decoders/Encoders or emulation (+ programming mode) support made by @xMasterX&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Roger (static 28 bit) with add manually support (by @xMasterX &amp;amp; @mishamyte)&lt;/li&gt; 
  &lt;li&gt;V2 Phoenix (Phox) (dynamic 52 bit) (by @xMasterX &amp;amp; @RocketGod-git)&lt;/li&gt; 
  &lt;li&gt;Marantec (static 49 bit) (add manually support and CRC verify) (by @xMasterX &amp;amp; @li0ard)&lt;/li&gt; 
  &lt;li&gt;Feron (static 32 bit)&lt;/li&gt; 
  &lt;li&gt;ReversRB2 / RB2M (static 64 bit) with add manually support&lt;/li&gt; 
  &lt;li&gt;Marantec24 (static 24 bit) with add manually support&lt;/li&gt; 
  &lt;li&gt;GangQi (static 34 bit) with button parsing and add manually support (thanks to @mishamyte for captures and testing, thanks @Skorpionm for help)&lt;/li&gt; 
  &lt;li&gt;Hollarm (static 42 bit) with button parsing and add manually support (thanks to @mishamyte for captures, thanks @Skorpionm for help)&lt;/li&gt; 
  &lt;li&gt;Hay21 (dynamic 21 bit) with button parsing&lt;/li&gt; 
  &lt;li&gt;Nero Radio 57bit (+ 56bit support)&lt;/li&gt; 
  &lt;li&gt;CAME 12bit/24bit encoder fixes (Fixes are now merged in OFW)&lt;/li&gt; 
  &lt;li&gt;Keeloq: Dea Mio, Genius Bravo, GSN, HCS101, AN-Motors, JCM Tech, MHouse, Nice Smilo, DTM Neo, FAAC RC,XT, Mutancode, Normstahl, Beninca + Allmatic, Stilmatic, CAME Space, Aprimatic (model TR and similar), Centurion Nova (thanks Carlos !), Hormann EcoStar, Novoferm, Sommer, Monarch (thanks @ashphx !), Jolly Motors (thanks @pkooiman !), IL-100(Smart) (thx Vitaly for RAWs), Motorline (with add manually support), Rosh, Pecinin, Rossi, Merlin, Steelmate (thanks @RocketGod-git)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;Protocols support made by Skorp (original implementation) and @xMasterX (current version)&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;CAME Atomo → Update! check out new &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Nice Flor S → How to create new remote - &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;FAAC SLH (Spa) → Update!!! (Programming mode!) Check out new &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Keeloq: BFT Mitto → Update! Check out new &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Star Line&lt;/li&gt; 
  &lt;li&gt;Security+ v1 &amp;amp; v2&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;Encoders made by @assasinfil and @xMasterX&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Somfy Telis → How to create new remote - &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Somfy Keytis&lt;/li&gt; 
  &lt;li&gt;KingGates Stylo 4k&lt;/li&gt; 
  &lt;li&gt;Alutech AT-4N → How to create new remote - &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Nice ON2E (Nice One) → How to create new remote - &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;instructions&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;❤️ Please support development of the project&lt;/h2&gt; 
&lt;p&gt;The majority of this project is developed and maintained by me, @xMasterX. Our team is small and the guys are working on this project as much as they can solely based on the enthusiasm they have for this project and the community.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;@Leptopt1los&lt;/code&gt; - NFC, RFID, Plugins, and many other things&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@gid9798&lt;/code&gt; - SubGHz, Plugins, many other things - currently offline :(&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@assasinfil&lt;/code&gt; - SubGHz protocols, NFC parsers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@Svaarich&lt;/code&gt; - UI design and animations&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@amec0e&lt;/code&gt; - Infrared assets&lt;/li&gt; 
 &lt;li&gt;Community moderators in Telegram, Discord, and Reddit&lt;/li&gt; 
 &lt;li&gt;And of course our GitHub community. Your PRs are a very important part of this firmware and open-source development.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The amount of work done on this project is huge and we need your support, no matter how large or small. Even if you just say, &quot;Thank you Unleashed firmware developers!&quot; somewhere. Doing so will help us continue our work and will help drive us to make the firmware better every time. Also, regarding our releases, every build has and always will be free and open-source. There will be no paywall releases or closed-source apps within the firmware. As long as I am working on this project it will never happen.&lt;br /&gt; You can support us by using links or addresses below:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Service&lt;/th&gt; 
   &lt;th&gt;Remark&lt;/th&gt; 
   &lt;th&gt;QR Code&lt;/th&gt; 
   &lt;th&gt;Link/Wallet&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/patreon/dark/white&quot; alt=&quot;Patreon&quot; width=&quot;14&quot; /&gt; &lt;strong&gt;Patreon&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/a88a90a5-28c3-40b4-864a-0c0b79494a42&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://patreon.com/mmxdev&quot;&gt;patreon.com/mmxdev&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/boosty&quot; alt=&quot;Boosty&quot; width=&quot;14&quot; /&gt; &lt;strong&gt;Boosty&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;patreon alternative&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/893c0760-f738-42c1-acaa-916019a7bdf8&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://boosty.to/mmxdev&quot;&gt;boosty.to/mmxdev&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://gist.githubusercontent.com/m-xim/255a3ef36c886dec144a58864608084c/raw/71da807b4abbd1582e511c9ea30fad27f78d642a/cloudtips_icon.svg?sanitize=true&quot; alt=&quot;Cloudtips&quot; width=&quot;14&quot; /&gt; CloudTips&lt;/td&gt; 
   &lt;td&gt;only RU payments accepted&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/5de31d6a-ef24-4d30-bd8e-c06af815332a&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pay.cloudtips.ru/p/7b3e9d65&quot;&gt;pay.cloudtips.ru/p/7b3e9d65&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gist/PonomareVlad/55c8708f11702b4df629ae61129a9895/raw/1657350724dab66f2ad68ea034c480a2df2a1dfd/YooMoney.svg?sanitize=true&quot; alt=&quot;YooMoney&quot; width=&quot;14&quot; /&gt; YooMoney&lt;/td&gt; 
   &lt;td&gt;only RU payments accepted&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/33454f79-074b-4349-b453-f94fdadc3c68&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://yoomoney.ru/fundraise/XA49mgQLPA0.221209&quot;&gt;yoomoney.ru/fundraise/XA49mgQLPA0.221209&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/tether&quot; alt=&quot;USDT&quot; width=&quot;14&quot; /&gt; USDT&lt;/td&gt; 
   &lt;td&gt;TRC20&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/0500498d-18ed-412d-a1a4-8a66d0b6f057&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;TSXcitMSnWXUFqiUfEXrTVpVewXy2cYhrs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/ethereum&quot; alt=&quot;ETH&quot; width=&quot;14&quot; /&gt; ETH&lt;/td&gt; 
   &lt;td&gt;BSC/ERC20-Tokens&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/0f323e98-c524-4f41-abb2-f4f1cec83ab6&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;0xFebF1bBc8229418FF2408C07AF6Afa49152fEc6a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/bitcoin&quot; alt=&quot;BTC&quot; width=&quot;14&quot; /&gt; BTC&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/5a904d45-947e-4b92-9f0f-7fbaaa7b37f8&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;bc1q0np836jk9jwr4dd7p6qv66d04vamtqkxrecck9&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/solana&quot; alt=&quot;SOL&quot; width=&quot;13&quot; /&gt; SOL&lt;/td&gt; 
   &lt;td&gt;Solana/Tokens&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/ab33c5e0-dd59-497b-9c91-ceb89c36b34d&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;DSgwouAEgu8iP5yr7EHHDqMNYWZxAqXWsTEeqCAXGLj8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/dogecoin&quot; alt=&quot;DOGE&quot; width=&quot;14&quot; /&gt; DOGE&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/2937edd0-5c85-4465-a444-14d4edb481c0&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;D6R6gYgBn5LwTNmPyvAQR6bZ9EtGgFCpvv&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/litecoin&quot; alt=&quot;LTC&quot; width=&quot;14&quot; /&gt; LTC&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/441985fe-f028-4400-83c1-c215760c1e74&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ltc1q3ex4ejkl0xpx3znwrmth4lyuadr5qgv8tmq8z9&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://bitcoincash.org/img/green/bitcoin-cash-circle.svg?sanitize=true&quot; alt=&quot;BCH&quot; width=&quot;14&quot; /&gt; BCH&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/7f365976-19a3-4777-b17e-4bfba5f69eff&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;qquxfyzntuqufy2dx0hrfr4sndp0tucvky4sw8qyu3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/monero&quot; alt=&quot;XMR&quot; width=&quot;14&quot; /&gt; XMR&lt;/td&gt; 
   &lt;td&gt;Monero&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/96186c06-61e7-4b4d-b716-6eaf1779bfd8&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;41xUz92suUu1u5Mu4qkrcs52gtfpu9rnZRdBpCJ244KRHf6xXSvVFevdf2cnjS7RAeYr5hn9MsEfxKoFDRSctFjG5fv1Mhn&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://cdn.simpleicons.org/ton&quot; alt=&quot;TON&quot; width=&quot;14&quot; /&gt; TON&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;div align=&quot;center&quot;&gt;
     &lt;a href=&quot;https://github.com/user-attachments/assets/92a57e57-7462-42b7-a342-6f22c6e600c1&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/da3a864d-d1c7-42cc-8a86-6fcaf26663ec&quot; alt=&quot;QR image&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;UQCOqcnYkvzOZUV_9bPE_8oTbOrOF03MnF-VcJyjisTZmsxa&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;📱 Community Apps&lt;/h2&gt; 
&lt;p&gt;Enhance your Flipper Zero with apps and plugins created by the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extra Plugins &amp;amp; Packs:&lt;/strong&gt;&lt;br /&gt; Check out the latest extra plugins and plugin packs (Extra Pack and Base Pack) on &lt;a href=&quot;https://github.com/xMasterX/all-the-plugins/releases/latest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Source Code &amp;amp; Full List:&lt;/strong&gt;&lt;br /&gt; Find the complete list and source code at &lt;a href=&quot;https://github.com/xMasterX/all-the-plugins/tree/dev&quot;&gt;xMasterX/all-the-plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Official Apps Catalog:&lt;/strong&gt;&lt;br /&gt; Browse the official Flipper Zero Apps Catalog on the &lt;a href=&quot;https://lab.flipper.net/apps&quot;&gt;web&lt;/a&gt; or via the &lt;a href=&quot;https://flipperzero.one/downloads&quot;&gt;mobile app&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📁 Where I can find IR, Sub-GHz, ... files, DBs, and other stuff?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UberGuidoZ/Flipper&quot;&gt;UberGuidoZ Playground - Large collection of files - Github&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/djsime1/awesome-flipperzero&quot;&gt;Awesome Flipper Zero - Github&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📘 Instructions&lt;/h2&gt; 
&lt;h3&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/-rgb(223,241,89)?style=flat&amp;amp;logo=fz-tools&amp;amp;logoColor=black&quot; alt=&quot;Tools Icon Badge&quot; /&gt; Firmware &amp;amp; main Apps feature&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;System: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/CustomFlipperName.md&quot;&gt;How to change Flipper name&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;BadUSB: &lt;a href=&quot;https://github.com/dummy-decoy/flipperzero_badusb_kl&quot;&gt;How to add new keyboard layouts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Infrared: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/InfraredCaptures.md&quot;&gt;How to make captures to add them into Universal IR remotes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/-rgb(165,244,190)?style=flat&amp;amp;logo=fz-subghz&amp;amp;logoColor=black&quot; alt=&quot;SubGhz Icon Badge&quot; /&gt; Sub-GHz&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemoteProg.md&quot;&gt;How to use Flipper as new remote (Nice FlorS, BFT Mitto, Somfy Telis, Aprimatic, AN-Motors, etc..)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;External Radio: &lt;a href=&quot;https://github.com/quen0n/flipperzero-ext-cc1101&quot;&gt;How to connect CC1101 module&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Transmission is blocked? &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/DangerousSettings.md&quot;&gt;How to extend Sub-GHz frequency range&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzSettings.md&quot;&gt;How to add extra Sub-GHz frequencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SubGHzRemotePlugin.md&quot;&gt;&lt;del&gt;Configure Sub-GHz Remote App&lt;/del&gt;&lt;/a&gt; ⚠️ Not recommended, please use embedded configurator&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/-rgb(226,78,178)?style=flat&amp;amp;logo=fz-plugins&amp;amp;logoColor=black&quot; alt=&quot;Plugins Icon Badge&quot; /&gt; Plugins&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;TOTP (Authenticator): &lt;a href=&quot;https://github.com/akopachov/flipper-zero_authenticator/raw/master/docs/conf-file_description.md&quot;&gt;config description&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Barcode Generator: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/BarcodeGenerator.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Multi Converter: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/MultiConverter.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WAV Player: &lt;a href=&quot;https://github.com/UberGuidoZ/Flipper/tree/main/Wav_Player#readme&quot;&gt;sample files &amp;amp; how to convert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sub-GHz playlist: &lt;a href=&quot;https://github.com/darmiel/flipper-scripts/raw/main/playlist/playlist_creator_by_chunk.py&quot;&gt;generator script&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/-rgb(167,242,234)?style=flat&amp;amp;logo=fz-gpio&amp;amp;logoColor=black&quot; alt=&quot;GPIO Icon Badge&quot; /&gt; GPIO - Plugins that works with external hardware&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unitemp - Temperature sensors reader: &lt;a href=&quot;https://github.com/quen0n/unitemp-flipperzero#readme&quot;&gt;How to use &amp;amp; supported sensors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[NMEA] GPS: &lt;a href=&quot;https://github.com/xMasterX/all-the-plugins/raw/dev/base_pack/gps_nmea_uart/README.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;i2c Tools &lt;a href=&quot;https://github.com/xMasterX/all-the-plugins/raw/dev/base_pack/flipper_i2ctools/README.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[NRF24] plugins: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/NRF24.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[WiFi] Scanner: &lt;a href=&quot;https://github.com/SequoiaSan/FlipperZero-WiFi-Scanner_Module#readme&quot;&gt;How to use&lt;/a&gt; | &lt;a href=&quot;https://sequoiasan.github.io/FlipperZero-WiFi-Scanner_Module/&quot;&gt;Web Flasher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[ESP8266] Deauther: &lt;a href=&quot;https://github.com/SequoiaSan/FlipperZero-Wifi-ESP8266-Deauther-Module#readme&quot;&gt;How to use&lt;/a&gt; | &lt;a href=&quot;https://sequoiasan.github.io/FlipperZero-Wifi-ESP8266-Deauther-Module/&quot;&gt;Web Flasher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[ESP32] WiFi Marauder: &lt;a href=&quot;https://github.com/UberGuidoZ/Flipper/tree/main/Wifi_DevBoard&quot;&gt;How to use&lt;/a&gt;&lt;sub&gt; docs by UberGuidoZ&lt;/sub&gt; | &lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder&quot;&gt;Marauder repo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[ESP32-CAM] Camera Suite: &lt;a href=&quot;https://github.com/CodyTolene/Flipper-Zero-Camera-Suite&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;How to Upload &lt;code&gt;.bin&lt;/code&gt; to ESP32/ESP8266: &lt;a href=&quot;https://github.com/SequoiaSan/Guide-How-To-Upload-bin-to-ESP8266-ESP32&quot;&gt;Windows&lt;/a&gt; | &lt;a href=&quot;https://github.com/0xchocolate/flipperzero-esp-flasher&quot;&gt;FAP &quot;ESP flasher&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[GPIO] SentrySafe plugin: &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/SentrySafe.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;👨‍💻 Firmware &amp;amp; Development&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Documentation&lt;/strong&gt; - &lt;a href=&quot;https://developer.flipper.net/flipperzero/doxygen&quot;&gt;developer.flipper.net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/documentation/HowToBuild.md#how-to-build-by-yourself&quot;&gt;How to build&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/DarkFlippers/unleashed-firmware/dev/#project-structure&quot;&gt;Project-structure&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CLion IDE&lt;/strong&gt; - How to setup workspace for flipper firmware development &lt;a href=&quot;https://krasovs.ky/2022/11/01/flipper-zero-clion.html&quot;&gt;by Savely Krasovsky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&quot;Hello world!&quot;&lt;/strong&gt; - plugin tutorial &lt;a href=&quot;https://github.com/DroomOne/Flipper-Plugin-Tutorial&quot;&gt;English&lt;sub&gt; by DroomOne&lt;/sub&gt; &lt;/a&gt; | &lt;a href=&quot;https://yakovlev.me/hello-flipper-zero&quot;&gt;Russian&lt;sub&gt; by Pavel Yakovlev&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flipper.atmanos.com/docs/overview/intro&quot;&gt;How to write your own app&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;furi&lt;/code&gt; - Furi Core: OS-level primitives and helpers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - Debug tool: GDB-plugins, SVD-file and etc&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;firmware&lt;/code&gt; - Firmware source code&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers and etc...&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;site_scons&lt;/code&gt; - Build helpers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and python libraries home&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Also, pay attention to the &lt;code&gt;ReadMe.md&lt;/code&gt; files inside those directories.&lt;/p&gt; 
&lt;h2&gt;🔗 Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unleashed web page:&lt;/strong&gt; &lt;a href=&quot;https://flipperunleashed.com&quot;&gt;flipperunleashed.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unleashed update server, direct .tgz update links for web updater or direct download:&lt;/strong&gt; &lt;a href=&quot;https://unleashedflip.com&quot;&gt;unleashedflip.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Official Docs: &lt;a href=&quot;https://docs.flipper.net&quot;&gt;docs.flipper.net&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Official Forum: &lt;a href=&quot;https://forum.flipperzero.one&quot;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Update! Developer Documentation &lt;a href=&quot;https://developer.flipper.net/flipperzero/doxygen&quot;&gt;developer.flipper.net&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>torvalds/linux</title>
      <link>https://github.com/torvalds/linux</link>
      <description>&lt;p&gt;Linux kernel source tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux kernel&lt;/h1&gt; 
&lt;p&gt;There are several guides for kernel developers and users. These guides can be rendered in a number of formats, like HTML and PDF. Please read Documentation/admin-guide/README.rst first.&lt;/p&gt; 
&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or &lt;code&gt;make pdfdocs&lt;/code&gt;. The formatted documentation can also be read online at:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are various text files in the Documentation/ subdirectory, several of them using the reStructuredText markup notation.&lt;/p&gt; 
&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the requirements for building and running the kernel, and information about the problems which may result by upgrading your kernel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TEN-framework/ten-vad</title>
      <link>https://github.com/TEN-framework/ten-vad</link>
      <description>&lt;p&gt;Voice Activity Detector(VAD) from TEN: low-latency, high-performance and lightweight&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d45870e4-9453-4047-8163-08737f82863f&quot; alt=&quot;TEN VAD banner&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-vad/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/ten-framework/ten-vad?color=369eff&amp;amp;labelColor=gray&amp;amp;logo=github&amp;amp;style=flat-square&quot; alt=&quot;TEN Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release-date/ten-framework/ten-vad?labelColor=gray&amp;amp;style=flat-square&quot; alt=&quot;Release Date&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/discussions/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/TEN-framework/ten-vad?labelColor=gray&amp;amp;color=%20%23f79009&quot; alt=&quot;Discussion posts&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/TEN-framework/ten-vad?labelColor=gray&amp;amp;color=pink&quot; alt=&quot;Commits&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-search?query=repo%3ATEN-framework%2Ften-vad%20is%3Aclosed&amp;amp;label=issues%20closed&amp;amp;labelColor=gray&amp;amp;color=green&quot; alt=&quot;Issues closed&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/ten-framework/ten-vad?color=c4f042&amp;amp;labelColor=gray&amp;amp;style=flat-square&quot; alt=&quot;&quot; /&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome!-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://huggingface.co/TEN-framework/ten-vad&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Hugging%20Face-TEN%20VAD-yellow?style=flat&amp;amp;logo=huggingface&quot; alt=&quot;HuggingFace TEN VAD&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-vad/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache_2.0_with_certain_conditions-blue.svg?labelColor=%20%23155EEF&amp;amp;color=%20%23528bff&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://deepwiki.com/TEN-framework/TEN-vad&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;!-- [![ReadmeX](https://raw.githubusercontent.com/CodePhiliaX/resource-trusteeship/main/readmex.svg)](https://readmex.com/TEN-framework/ten-vad) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://trendshift.io/repositories/14548&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/14548&quot; alt=&quot;TEN-framework%2Ften-vad | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://GitHub.com/TEN-framework/ten-vad/watchers/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/watchers/TEN-framework/ten-vad?style=social&amp;amp;label=Watch&quot; alt=&quot;GitHub watchers&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://GitHub.com/TEN-framework/ten-vad/network/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/TEN-framework/ten-vad?style=social&amp;amp;label=Fork&quot; alt=&quot;GitHub forks&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://GitHub.com/TEN-framework/ten-vad/stargazers/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/TEN-framework/ten-vad?style=social&amp;amp;label=Star&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Latest News 🔥&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[2025/07] 🎉 Exciting news! &lt;strong&gt;TEN VAD&lt;/strong&gt; is now &lt;strong&gt;integrated&lt;/strong&gt; into &lt;a href=&quot;https://github.com/k2-fsa/sherpa-onnx&quot;&gt;&lt;strong&gt;k2-fsa/sherpa-onnx&lt;/strong&gt;&lt;/a&gt;, thanks to the fantastic work by &lt;a href=&quot;https://github.com/csukuangfj&quot;&gt;Fangjun Kuang&lt;/a&gt;! You can now achieve more precise speech segment extraction and enjoy an enhanced ASR experience! Refer to the &lt;a href=&quot;https://k2-fsa.github.io/sherpa/onnx/vad/ten-vad.html#&quot;&gt;documentation&lt;/a&gt; and give it a try!&lt;/li&gt; 
 &lt;li&gt;[2025/07] We supported &lt;strong&gt;Python inference&lt;/strong&gt; on &lt;strong&gt;macOS&lt;/strong&gt; and &lt;strong&gt;Windows&lt;/strong&gt; with usage of the prebuilt-lib!&lt;/li&gt; 
 &lt;li&gt;[2025/06] We &lt;strong&gt;finally&lt;/strong&gt; released and &lt;strong&gt;open-sourced&lt;/strong&gt; the &lt;strong&gt;ONNX&lt;/strong&gt; model and the corresponding &lt;strong&gt;preprocessing code&lt;/strong&gt;! Now you can deploy &lt;strong&gt;TEN VAD&lt;/strong&gt; on &lt;strong&gt;any platform&lt;/strong&gt; and &lt;strong&gt;any hardware architecture&lt;/strong&gt;!&lt;/li&gt; 
 &lt;li&gt;[2025/06] We are excited to announce the release of &lt;strong&gt;WASM+JS&lt;/strong&gt; for Web WASM Support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#welcome-to-ten&quot;&gt;Welcome to TEN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#ten-hugging-face-space&quot;&gt;TEN Hugging Face Space&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#key-features&quot;&gt;Key Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#1-high-performance&quot;&gt;High-Performance&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#2-agent-friendly&quot;&gt;Agent-Friendly&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#3-lightweight&quot;&gt;Lightweight&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#4-multiple-programming-languages-and-platforms&quot;&gt;Multiple Programming Languages and Platforms&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#5-supproted-sampling-rate-and-hop-size&quot;&gt;Supported Sampling Rate and Hop Size&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#quick-start&quot;&gt;Quick Start&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#python-usage&quot;&gt;Python Usage&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#1-linux&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#js-usage&quot;&gt;JS Usage&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#1-web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#c-usage&quot;&gt;C Usage&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#1-linux-1&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#2-windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#3-macos&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#4-android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#5-ios&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#ten-ecosystem&quot;&gt;TEN Ecosystem&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#ask-questions&quot;&gt;Ask Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#citations&quot;&gt;Citations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Welcome to TEN&lt;/h2&gt; 
&lt;p&gt;TEN is a comprehensive open-source ecosystem for creating, customizing, and deploying real-time conversational AI agents with multimodal capabilities including voice, vision, and avatar interactions.&lt;/p&gt; 
&lt;p&gt;TEN includes &lt;a href=&quot;https://github.com/ten-framework/ten-framework&quot;&gt;TEN Framework&lt;/a&gt;, &lt;a href=&quot;https://github.com/ten-framework/ten-turn-detection&quot;&gt;TEN Turn Detection&lt;/a&gt;, &lt;a href=&quot;https://github.com/ten-framework/ten-vad&quot;&gt;TEN VAD&lt;/a&gt;, &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/ai_agents/demo&quot;&gt;TEN Agent&lt;/a&gt;, &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/core/src/ten_manager/designer_frontend&quot;&gt;TMAN Designer&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ten-framework/portal&quot;&gt;TEN Portal&lt;/a&gt;. Check out &lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/#ten-ecosystem&quot;&gt;TEN Ecosystem&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;br /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Community Channel&lt;/th&gt; 
   &lt;th&gt;Purpose&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=TenFramework&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/TenFramework?logo=X&amp;amp;color=%20%23f5f5f5&quot; alt=&quot;Follow on X&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow TEN Framework on X for updates and announcements&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.linkedin.com/company/ten-framework&quot;&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/LinkedIn-TEN_Framework-0A66C2?logo=linkedin-white&amp;amp;logoColor=fff&quot; alt=&quot;Follow on LinkedIn&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow TEN Framework on LinkedIn for updates and announcements&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://discord.gg/VnPftUzAMJ&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/VnPftUzAMJ?&amp;amp;style=flat&amp;amp;theme=light&amp;amp;color=lightgray&quot; alt=&quot;Discord TEN Community&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our Discord community to connect with developers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/TEN-framework&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Hugging%20Face-TEN%20Framework-yellow?style=flat&amp;amp;logo=huggingface&quot; alt=&quot;Hugging Face Space&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our Hugging Face community to explore our spaces and models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-agent/discussions/170&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/TEN_Framework-WeChat_Group-%2307C160?logo=wechat&amp;amp;labelColor=darkgreen&amp;amp;color=gray&quot; alt=&quot;WeChat&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our WeChat group for Chinese community discussions&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Star TEN Repositories&lt;/strong&gt; ⭐️&lt;/p&gt; 
 &lt;p&gt;Get instant notifications for new releases and updates. Your support helps us grow and improve TEN!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/eeebe996-8c14-4bf7-82ae-f1a1f7e30705&quot; alt=&quot;TEN star us gif&quot; /&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;TEN Hugging Face Space&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/725a8318-d679-4b17-b9e4-e3dce999b298&quot;&gt;https://github.com/user-attachments/assets/725a8318-d679-4b17-b9e4-e3dce999b298&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You are more than welcome to &lt;a href=&quot;https://huggingface.co/spaces/TEN-framework/ten-agent-demo&quot;&gt;Visit TEN Hugging Face Space&lt;/a&gt; to try VAD and Turn Detection together.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TEN VAD&lt;/strong&gt; is a real-time voice activity detection system designed for enterprise use, providing accurate frame-level speech activity detection. It shows superior precision compared to both WebRTC VAD and Silero VAD, which are commonly used in the industry. Additionally, TEN VAD offers lower computational complexity and reduced memory usage compared to Silero VAD. Meanwhile, the architecture&#39;s temporal efficiency enables rapid voice activity detection, significantly reducing end-to-end response and turn detection latency in conversational AI systems.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;1. High-Performance:&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;The precision-recall curves comparing the performance of WebRTC VAD (pitch-based), Silero VAD, and TEN VAD are shown below. The evaluation is conducted on the precisely manually annotated testset. The audio files are from librispeech, gigaspeech, DNS Challenge etc. As demonstrated, TEN VAD achieves the best performance. Additionally, cross-validation experiments conducted on large internal real-world datasets demonstrate the reproducibility of these findings. The &lt;strong&gt;testset with annotated labels&lt;/strong&gt; is released in directory &quot;testset&quot; of this repository.&lt;/p&gt; 
&lt;br /&gt; 
&lt;div style=&quot;text-align:&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/examples/images/PR_Curves_testset.png&quot; width=&quot;800&quot; /&gt; 
&lt;/div&gt; 
&lt;p&gt;Note that the default threshold of 0.5 is used to generate binary speech indicators (0 for non-speech signal, 1 for speech signal). This threshold needs to be tuned according to your domain-specific task. The precision-recall curve can be obtained by executing the following script on Linux x64. The output figure will be saved in the same directory as the script.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd ./examples
python plot_pr_curves.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;2. Agent-Friendly:&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;As illustrated in the figure below, TEN VAD rapidly detects speech-to-non-speech transitions, whereas Silero VAD suffers from a delay of several hundred milliseconds, resulting in increased end-to-end latency in human-agent interaction systems. In addition, as demonstrated in the 6.5s-7.0s audio segment, Silero VAD fails to identify short silent durations between adjacent speech segments.&lt;/p&gt; 
&lt;div style=&quot;text-align:&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/examples/images/Agent-Friendly-image.png&quot; width=&quot;800&quot; /&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;3. Lightweight:&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;We evaluated the RTF (Real-Time Factor) across five distinct platforms, each equipped with varying CPUs. TEN VAD demonstrates much lower computational complexity and smaller library size than Silero VAD.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; rowspan=&quot;2&quot; valign=&quot;middle&quot;&gt; Platform &lt;/th&gt; 
   &lt;th align=&quot;center&quot; rowspan=&quot;2&quot; valign=&quot;middle&quot;&gt; CPU &lt;/th&gt; 
   &lt;th align=&quot;center&quot; colspan=&quot;2&quot;&gt; RTF &lt;/th&gt; 
   &lt;th align=&quot;center&quot; colspan=&quot;2&quot;&gt; Lib Size &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; style=&quot;white-space: nowrap;&quot;&gt; TEN VAD &lt;/th&gt; 
   &lt;th align=&quot;center&quot; style=&quot;white-space: nowrap;&quot;&gt; Silero VAD &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; TEN VAD &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Silero VAD &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; rowspan=&quot;3&quot;&gt; Linux &lt;/th&gt; 
   &lt;td style=&quot;white-space: nowrap;&quot;&gt; AMD Ryzen 9 5900X 12-Core &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0150 &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;2&quot; valign=&quot;middle&quot;&gt; / &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;3&quot; valign=&quot;middle&quot;&gt; 306KB &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;10&quot; style=&quot;white-space: nowrap;&quot; valign=&quot;middle&quot;&gt; 2.16MB(JIT) / 2.22MB(ONNX) &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;white-space: nowrap;&quot;&gt; Intel(R) Xeon(R) Platinum 8253 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0136 &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;white-space: nowrap;&quot;&gt; Intel(R) Xeon(R) Gold 6348 CPU @ 2.60GHz &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0086 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0127 &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Windows &lt;/th&gt; 
   &lt;td&gt; Intel i7-10710U &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0150 &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;7&quot; valign=&quot;middle&quot;&gt; / &lt;/td&gt; 
   &lt;td align=&quot;center&quot; style=&quot;white-space: nowrap;&quot;&gt; 464KB(x86) / 508KB(x64) &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; macOS &lt;/th&gt; 
   &lt;td&gt; M1 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0160 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 731KB &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Web &lt;/th&gt; 
   &lt;td&gt; macOS(M1) &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.010 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 277KB &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; rowspan=&quot;2&quot;&gt; Android &lt;/th&gt; 
   &lt;td&gt; Galaxy J6+ (32bit, 425) &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0570 &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;2&quot; style=&quot;white-space: nowrap;&quot;&gt; 373KB(v7a) / 532KB(v8a)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; Oppo A3s (450) &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0490 &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot; rowspan=&quot;2&quot;&gt; iOS &lt;/th&gt; 
   &lt;td&gt; iPhone6 (A8) &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0210 &lt;/td&gt; 
   &lt;td align=&quot;center&quot; rowspan=&quot;2&quot;&gt; 320KB&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; iPhone8 (A11) &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 0.0050 &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;4. Multiple programming languages and platforms:&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;TEN VAD provides cross-platform C compatibility across five operating systems (Linux x64, Windows, macOS, Android, iOS), with Python bindings optimized for Linux x64, with wasm for Web. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;5. Supproted sampling rate and hop size:&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;TEN VAD operates on 16kHz audio input with configurable hop sizes (optimized frame configurations: 160/256 samples=10/16ms). Other sampling rates must be resampled to 16kHz. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/TEN-framework/ten-vad.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;The project supports five major platforms with dynamic library linking.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Platform &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Dynamic Lib &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Supported Arch &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Interface Language &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Header &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt; Comment  &lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Linux &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; libten_vad.so &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; x64 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; Python, C &lt;/td&gt; 
   &lt;td rowspan=&quot;6&quot;&gt;ten_vad.h &lt;br /&gt; ten_vad.py &lt;br /&gt; ten_vad.js&lt;/td&gt; 
   &lt;td&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Windows &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; ten_vad.dll &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; x64, x86 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; C &lt;/td&gt; 
   &lt;td&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; macOS &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; ten_vad.framework &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; arm64, x86_64 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; C &lt;/td&gt; 
   &lt;td&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Web &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; ten_vad.wasm &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; / &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; JS &lt;/td&gt; 
   &lt;td&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; Android &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; libten_vad.so &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; arm64-v8a, armeabi-v7a &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; C &lt;/td&gt; 
   &lt;td&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt; iOS &lt;/th&gt; 
   &lt;td align=&quot;center&quot;&gt; ten_vad.framework &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; arm64 &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; C &lt;/td&gt; 
   &lt;td&gt; 1. not simulator &lt;br /&gt; 2. not iPad &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;Python Usage&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;1. Linux / macOS / Windows&lt;/strong&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;numpy (Version 1.17.4/1.26.4 verified)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;scipy (Version &amp;gt;= 1.5.0)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;scikit-learn (Version 1.2.2/1.5.0 verified, for plotting PR curves)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;matplotlib (Version 3.1.3/3.10.0 verified, for plotting PR curves)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;torchaudio (Version 2.2.2 verified, for plotting PR curves)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Python version 3.8.19/3.10.14 verified&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: You could use other versions of above packages, but we didn&#39;t test other versions.&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;The &lt;strong&gt;lib&lt;/strong&gt; only depend on numpy, you have to install the dependency via requirements.txt:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;running demo or plotting PR curves&lt;/strong&gt;, you have to install the dependencies:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install -r ./examples/requirements.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Note that if you did not install &lt;strong&gt;libc++1&lt;/strong&gt; (Linux), you have to run the code below to install it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install libc++1
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h4&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Note: For usage in python, you can either use it by &lt;strong&gt;git clone&lt;/strong&gt; or &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt; 
&lt;h5&gt;&lt;strong&gt;By using git clone:&lt;/strong&gt;&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/TEN-framework/ten-vad.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Enter examples directory&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;cd ./examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Test&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;python test.py s0724-s0730.wav out.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h5&gt;&lt;strong&gt;By using pip:&lt;/strong&gt;&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install via pip&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;pip install -U --force-reinstall -v git+https://github.com/TEN-framework/ten-vad.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Write your own use cases and import the class, the attributes of class TenVAD you can refer to ten_vad.py&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;from ten_vad import TenVad
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;JS Usage&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;1. Web&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js (macOS v14.18.2, Linux v16.20.2 verified)&lt;/li&gt; 
 &lt;li&gt;Terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;1) cd ./examples
2) node test_node.js s0724-s0730.wav out.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h3&gt;&lt;strong&gt;C Usage&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;Build Scripts&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Located in examples/ directory or examples_onnx/ (for &lt;strong&gt;ONNX&lt;/strong&gt; usage on Linux):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux: build-and-deploy-linux.sh&lt;/li&gt; 
 &lt;li&gt;Windows: build-and-deploy-windows.bat&lt;/li&gt; 
 &lt;li&gt;macOS: build-and-deploy-mac.sh&lt;/li&gt; 
 &lt;li&gt;Android: build-and-deploy-android.sh&lt;/li&gt; 
 &lt;li&gt;iOS: build-and-deploy-ios.sh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Dynamic Library Configuration&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Runtime library path configuration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux/Android: LD_LIBRARY_PATH&lt;/li&gt; 
 &lt;li&gt;macOS: DYLD_FRAMEWORK_PATH&lt;/li&gt; 
 &lt;li&gt;Windows: DLL in executable directory or system PATH&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Customization&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modify platform-specific build scripts&lt;/li&gt; 
 &lt;li&gt;Adjust CMakeLists.txt&lt;/li&gt; 
 &lt;li&gt;Configure toolchain and architecture settings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Overview of Usage&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to examples/ or examples_onnx/ (for &lt;strong&gt;ONNX&lt;/strong&gt; usage on Linux)&lt;/li&gt; 
 &lt;li&gt;Execute platform-specific build script&lt;/li&gt; 
 &lt;li&gt;Configure dynamic library path&lt;/li&gt; 
 &lt;li&gt;Run demo with sample audio s0724-s0730.wav&lt;/li&gt; 
 &lt;li&gt;Processed results saved to out.txt&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;p&gt;The detailed usage methods of each platform are as follows &lt;br /&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;1. Linux&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clang (e.g. 6.0.0-1ubuntu2 verified)&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Terminal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that if you did not install &lt;strong&gt;libc++1&lt;/strong&gt;, you have to run the code below to install it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install libc++1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;strong&gt;Usage (prebuilt-lib)&lt;/strong&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;1) cd ./examples
2) ./build-and-deploy-linux.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;strong&gt;Usage (ONNX)&lt;/strong&gt;&lt;/h5&gt; 
&lt;p&gt;You have to download the &lt;strong&gt;onnxruntime&lt;/strong&gt; packages from the &lt;a href=&quot;https://github.com/microsoft/onnxruntime&quot;&gt;microsoft official onnxruntime github website&lt;/a&gt;. Note that the version of onnxruntime must be higher than or equal to 1.17.1 (e.g. onnxruntime-linux-x64-1.17.1.tgz). &lt;br /&gt; &lt;br /&gt; You can check the official &lt;strong&gt;ONNX Runtime releases&lt;/strong&gt; from &lt;a href=&quot;https://github.com/microsoft/onnxruntime/tags&quot;&gt;this website&lt;/a&gt;. And for example, to download version 1.17.1 (Linux x64), use &lt;a href=&quot;https://github.com/microsoft/onnxruntime/releases/download/v1.17.1/onnxruntime-linux-x64-1.17.1.tgz&quot;&gt;this link&lt;/a&gt;. After extracting the compressed file, you&#39;ll find two important directories:&lt;code&gt;include/&lt;/code&gt; - header files, &lt;code&gt;lib/&lt;/code&gt; - library files&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1) cd examples_onnx/
2) ./build-and-deploy-linux.sh --ort-path /absolute/path/to/your/onnxruntime/root/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt;: If executing the onnx demo from a different directory than the one used when running build-and-deploy-linux.sh, ensure to create a symbolic link to src/onnx_model/ to prevent ONNX model file loading failures. &lt;br /&gt; &lt;strong&gt;Note 2&lt;/strong&gt;: The &lt;strong&gt;ONNX model&lt;/strong&gt; locates in &lt;code&gt;src/onnx_model&lt;/code&gt; directory.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h4&gt;&lt;strong&gt;2. Windows&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visual Studio (2017, 2019, 2022 verified)&lt;/li&gt; 
 &lt;li&gt;CMake (3.26.0-rc6 verified)&lt;/li&gt; 
 &lt;li&gt;Terminal (MINGW64 or powershell)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;1) cd ./examples
2) Configure &quot;build-and-deploy-windows.bat&quot; with your preferred:
    - Architecture (default: x64)
    - Visual Studio version (default: 2019)
3) ./build-and-deploy-windows.bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h4&gt;&lt;strong&gt;3. macOS&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode (15.2 verified)&lt;/li&gt; 
 &lt;li&gt;CMake (3.19.2 verified)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;1) cd ./examples
2) Configure &quot;build-and-deploy-mac.sh&quot; with your target architecture:
  - Default: arm64 (Apple Silicon)
  - Alternative: x86_64 (Intel)
3) ./build-and-deploy-mac.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h4&gt;&lt;strong&gt;4. Android&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;NDK (r25b, macOS verified)&lt;/li&gt; 
 &lt;li&gt;CMake (3.19.2, macOS verified)&lt;/li&gt; 
 &lt;li&gt;adb (1.0.41, macOS verified)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;1) cd ./examples
2) export ANDROID_NDK=/path/to/android-ndk  # Replace it with your NDK installation path
3) Configure &quot;build-and-deploy-android.sh&quot; with your build settings:
  - Architecture: arm64-v8a (default) or armeabi-v7a
  - Toolchain: aarch64-linux-android-clang (default) or custom NDK toolchain
4) ./build-and-deploy-android.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h4&gt;&lt;strong&gt;5. iOS&lt;/strong&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h5&gt; 
&lt;p&gt;Xcode (15.2, macOS verified) CMake (3.19.2, macOS verified)&lt;/p&gt; 
&lt;h5&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enter examples directory&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;cd ./examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Creates Xcode project files for iOS build&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;./build-and-deploy-ios.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Follow the steps below to build and test on iOS device:&lt;/p&gt; &lt;p&gt;3.1. Use Xcode to open .xcodeproj files: a) cd ./build-ios, b) open ./ten_vad_demo.xcodeproj&lt;/p&gt; &lt;p&gt;3.2. In Xcode IDE, select ten_vad_demo target (should check: Edit Scheme → Run → Release), then select your iOS Device (not simulator).&lt;/p&gt; 
  &lt;div style=&quot;text-align:&quot;&gt; 
   &lt;img src=&quot;https://raw.githubusercontent.com/TEN-framework/ten-vad/main/examples/images/ios_image_1.jpg&quot; width=&quot;800&quot; /&gt; 
  &lt;/div&gt; &lt;p&gt;3.3. Drag ten_vad/lib/iOS/ten_vad.framework to &quot;Frameworks, Libraries, and Embedded Content&quot;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;(in TARGETS → ten_vad_demo → ten_vad_demo → General, should set Embed to &quot;Embed &amp;amp; Sign&quot;).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;or add it directly in this way: &quot;Frameworks, Libraries, and Embedded Content&quot; → &quot;+&quot; → Add Other... → Add Files →...&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Note: If this step is not completed, you may encounter the following runtime error: &quot;dyld: Library not loaded: @rpath/ten_vad.framework/ten_vad&quot;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;div style=&quot;text-align:&quot;&amp;gt;
  &amp;lt;img src=&quot;./examples/images/ios_image_2.png&quot; width=&quot;800&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;3.4. Configure iOS device Signature&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;in TARGETS → ten_vad_demo → Signing &amp;amp; Capabilities → Signing&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Modify Bundle Identifier: modify &quot;com.yourcompany&quot; to yours;&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Specify Provisioning Profile&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In TARGETS → ten_vad_demo → Build Settings → Signing → Code Signing Identity:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Specify your Certification&lt;/p&gt; &lt;p&gt;3.5. Build in Xcode and run demo on your device.&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;br /&gt; 
&lt;h2&gt;TEN Ecosystem&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Preview&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten_framework&quot;&gt;&lt;strong&gt;🏚️ TEN Framework&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN is an open-source framework for real-time, multimodal conversational AI.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten_framework?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7c8f72d7-3993-4d01-8504-b71578a22944&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten-turn-detection&quot;&gt;&lt;strong>️🔂 TEN Turn Detection&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN is for full-duplex dialogue communication.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten-turn-detection?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/8d0ec716-5d0e-43e4-ad9a-d97b17305658&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten-vad&quot;&gt;&lt;strong&gt;🔉 TEN VAD&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN VAD is a low-latency, lightweight and high-performance streaming voice activity detector (VAD).&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten-vad?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d45870e4-9453-4047-8163-08737f82863f&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/ai_agents&quot;&gt;&lt;strong&gt;🎙️ TEN Agent&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN Agent is a showcase of TEN Framewrok.&lt;br /&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/38de2207-939b-4702-a0aa-04491f5b5275&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/core/src/ten_manager/designer_frontend&quot;&gt;&lt;strong&gt;🎨 TMAN Designer&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TMAN Designer is low/no code option to make a voice agent with easy to use workflow UI.&lt;br /&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/804c3543-0a47-42b7-b40b-ef32b742fb8f&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/portal&quot;&gt;&lt;strong&gt;📒 TEN Portal&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;The official site of TEN framework, it has documentation and blog.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/portal?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e17d8aaa-5928-45dd-ac71-814928e26a89&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;h2&gt;Ask Questions&lt;/h2&gt; 
&lt;p&gt;TEN VAD is available on these AI-powered Q&amp;amp;A platforms. They can help you find answers quickly and accurately in multiple languages, covering everything from basic setup to advanced implementation details.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Service&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepWiki&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://deepwiki.com/TEN-framework/TEN-vad&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ReadmeX&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://readmex.com/TEN-framework/ten-vad&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CodePhiliaX/resource-trusteeship/main/readmex.svg?sanitize=true&quot; alt=&quot;ReadmeX&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;strong&gt;Citations&lt;/strong&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;@misc{TEN VAD,
  author = {TEN Team},
  title = {TEN VAD: A Low-Latency, Lightweight and High-Performance Streaming Voice Activity Detector (VAD)},
  year = {2025},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {https://github.com/TEN-framework/ten-vad.git},
  email = {developer@ten.ai}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under Apache 2.0 with certain conditions. Refer to the &quot;LICENSE&quot; file in the root directory for detailed information. Note that &lt;code&gt;pitch_est.cc&lt;/code&gt; contains modified code derived from &lt;a href=&quot;https://github.com/xiph/LPCNet&quot;&gt;LPCNet&lt;/a&gt;, which is &lt;a href=&quot;https://spdx.org/licenses/BSD-2-Clause.html&quot;&gt;BSD-2-Clause&lt;/a&gt; and &lt;a href=&quot;https://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; licensed, refer to the NOTICES file in the root directory for detailed information.&lt;/p&gt; 
&lt;br /&gt;</description>
    </item>
    
    <item>
      <title>Mbed-TLS/mbedtls</title>
      <link>https://github.com/Mbed-TLS/mbedtls</link>
      <description>&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; 
&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&quot;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; 
&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; 
&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&quot;https://mbed-tls.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure that &lt;a href=&quot;http://www.doxygen.nl/&quot;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For other sources of documentation, see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; 
&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tool versions&lt;/h3&gt; 
&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; 
 &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; 
 &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; 
 &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2017 or later (if using Visual Studio).&lt;/li&gt; 
 &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git usage&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&quot;&gt;Git submodule&lt;/a&gt; (&lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-framework&quot;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; 
&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; 
&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; 
&lt;p&gt;The following tools are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt
&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; 
&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; 
 &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;framework/scripts/make_generated_files.py&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
 &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Make&lt;/h3&gt; 
&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; 
&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; 
&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make no_test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; 
&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; 
&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; 
&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; 
&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/&quot;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CMake&lt;/h3&gt; 
&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir
cmake /path/to/mbedtls_source
cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ctest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -LH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; 
&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now make the desired change:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; 
&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; 
&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;add_executable(xyz)

target_link_libraries(xyz
    PUBLIC MbedTLS::mbedtls
           MbedTLS::tfpsacrypto
           MbedTLS::mbedx509)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; 
&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; 
&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; 
&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; 
&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; 
&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; 
&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&quot;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example programs&lt;/h2&gt; 
&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&quot;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; 
&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&quot;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; 
&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&quot;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&quot;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&quot;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; 
 &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; 
 &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; 
 &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; 
 &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; 
 &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PSA cryptography API&lt;/h2&gt; 
&lt;h3&gt;PSA API&lt;/h3&gt; 
&lt;p&gt;Arm&#39;s &lt;a href=&quot;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&quot;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; 
&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; 
 &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; 
 &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; 
 &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; 
 &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&quot;mailto:mbed-crypto@arm.com&quot;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; 
&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; 
&lt;h3&gt;PSA drivers&lt;/h3&gt; 
&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&quot;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&quot;https://spdx.org/licenses/Apache-2.0.html&quot;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&quot;https://spdx.org/licenses/GPL-2.0-or-later.html&quot;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&quot;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&quot;https://project-everest.github.io/&quot;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&quot;https://github.com/mpg/p256-m&quot;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&quot;mailto:mbed-tls-security@lists.trustedfirmware.org&quot;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>dev-Ali2008/xanite</title>
      <link>https://github.com/dev-Ali2008/xanite</link>
      <description>&lt;p&gt;Xanite&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/dev-Ali2008/xanite-android/raw/a94647d4a56a7abc37f302a7fcec753c3ef8c1db/Xanite.png&quot;&gt; &lt;img height=&quot;150px&quot; src=&quot;https://github.com/dev-Ali2008/xanite-android/raw/a94647d4a56a7abc37f302a7fcec753c3ef8c1db/Xanite.png&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt; Xanite - Xbox OG/360 emulator &lt;/h1&gt; 
&lt;p&gt;Xanite is a &quot;proof of concept&quot; emulator.&lt;/p&gt; 
&lt;p&gt;This project emulates both the original Xbox and Xbox 360 consoles on Android, supporting game ROMs in various formats.&lt;/p&gt; 
&lt;h2&gt;Game Compatibility&lt;/h2&gt; 
&lt;h3&gt;Xbox Original&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported formats: xiso, xbe&lt;/li&gt; 
 &lt;li&gt;BIOS required (must be obtained from your own Xbox)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Xbox 360&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported formats: iso, xex, god&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;the games you can play depends on your device&#39;s performance and storage capacity.&lt;/p&gt; 
&lt;h2&gt;Platform Support&lt;/h2&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;p&gt;&lt;a&gt;&lt;img src=&quot;https://img.shields.io/badge/Android A64 build-none-aaaaaa.svg&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img height=&quot;200px&quot; src=&quot;https://github.com/dev-Ali2008/xanite/raw/e718259484b8afd71a774a7cae3a15f5caacf5e5/test.png&quot; /&gt;  -- Key Features 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hardware Detection:&lt;br /&gt; Automatically identifies your device&#39;s hardware (GPU, RAM) and optimizes settings for peak performance&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Dual Console Support:&lt;br /&gt; Play both Xbox and Xbox 360 games in one emulator&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Performance Scaling:&lt;br /&gt; you can manually adjust the resolution and performance in settings for experiment or low end devices&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;System Requirements&lt;/h2&gt; 
&lt;h3&gt;For Xbox Original&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Processors:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Snapdragon 855 or better&lt;/li&gt; 
   &lt;li&gt;Exynos 990 or better&lt;/li&gt; 
   &lt;li&gt;Dimensity 1000 or better&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RAM:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;4 GB minimum&lt;/li&gt; 
   &lt;li&gt;8+ GB recommended&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;For Xbox 360 (higher requirements)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Processors:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Snapdragon 888 or better&lt;/li&gt; 
   &lt;li&gt;Exynos 2200 or better&lt;/li&gt; 
   &lt;li&gt;Dimensity 8300 or better&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RAM:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;8 GB minimum&lt;/li&gt; 
   &lt;li&gt;12+ GB recommended&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;3.2 opengl&lt;/li&gt; 
 &lt;li&gt;(vulkan coming soon)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OS Requirements:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Android 10+ (no root)&lt;/li&gt; 
 &lt;li&gt;Android 9 and below not supported&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Use&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;For Xbox Original:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Install BIOS from your own Xbox&lt;/li&gt; 
   &lt;li&gt;Obtain games in iso/xiso format from your personal game copies&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Xbox 360:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Requires Xbox 360 system files from your console&lt;/li&gt; 
   &lt;li&gt;Games in iso/xex/god format from your personal collection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you want to contribute as a developer, please contact us in discord&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Developed by @FreePalestine1970,@Yebot32 and 4 other developers on Telegram and discord.&lt;br /&gt; Special thanks to all Xanite supporters.&lt;/p&gt; 
&lt;h2&gt;DISCLAIMER !&lt;/h2&gt; 
&lt;p&gt;Xanite is an open-source project not affiliated with Microsoft, Xemu, or Xenia. It is intended for educational&lt;/p&gt; 
&lt;p&gt;We do not condone piracy. BIOS files and game ROMs should be legally owned. While the emulator itself is legal, possessing illegal copies of games or BIOS files is not. Be cautious online.&lt;/p&gt; 
&lt;p&gt;Performance is not guaranteed in the current early version.&lt;/p&gt; 
&lt;p&gt;Xanite is not currently available.&lt;/p&gt; 
&lt;h2&gt;xanite socials&lt;/h2&gt; 
&lt;p&gt;❤️👇 website&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev-ali2008.github.io/Xanite.io/#social&quot;&gt;https://dev-ali2008.github.io/Xanite.io/#social&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Immediate-Mode-UI/Nuklear</title>
      <link>https://github.com/Immediate-Mode-UI/Nuklear</link>
      <description>&lt;p&gt;A single-header ANSI C immediate mode cross-platform GUI library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nuklear&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Immediate-Mode-UI/Nuklear/actions&quot;&gt;&lt;img src=&quot;https://github.com/Immediate-Mode-UI/Nuklear/workflows/C%2FC++%20CI/badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is a minimal-state, immediate-mode graphical user interface toolkit written in ANSI C and licensed under public domain. It was designed as a simple embeddable user interface for application and does not have any dependencies, a default render backend or OS window/input handling but instead provides a highly modular, library-based approach, with simple input state for input and draw commands describing primitive shapes as output. So instead of providing a layered library that tries to abstract over a number of platform and render backends, it focuses only on the actual UI.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Immediate-mode graphical user interface toolkit&lt;/li&gt; 
 &lt;li&gt;Single-header library&lt;/li&gt; 
 &lt;li&gt;Written in C89 (ANSI C)&lt;/li&gt; 
 &lt;li&gt;Small codebase (~18kLOC)&lt;/li&gt; 
 &lt;li&gt;Focus on portability, efficiency and simplicity&lt;/li&gt; 
 &lt;li&gt;No dependencies (not even the standard library if not wanted)&lt;/li&gt; 
 &lt;li&gt;Fully skinnable and customizable&lt;/li&gt; 
 &lt;li&gt;Low memory footprint with total control of memory usage if needed / wanted&lt;/li&gt; 
 &lt;li&gt;UTF-8 support&lt;/li&gt; 
 &lt;li&gt;No global or hidden state&lt;/li&gt; 
 &lt;li&gt;Customizable library modules (you can compile and use only what you need)&lt;/li&gt; 
 &lt;li&gt;Optional font baker and vertex buffer output&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://Immediate-Mode-UI.github.io/Nuklear/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;This library is self-contained in one single header file and can be used either in header-only mode or in implementation mode. The header-only mode is used by default when included and allows including this header in other headers and does not contain the actual implementation.&lt;/p&gt; 
&lt;p&gt;The implementation mode requires defining the preprocessor macro &lt;code&gt;NK_IMPLEMENTATION&lt;/code&gt; in &lt;em&gt;one&lt;/em&gt; .c/.cpp file before &lt;code&gt;#include&lt;/code&gt;ing this file, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#define NK_IMPLEMENTATION
#include &quot;nuklear.h&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;IMPORTANT: Every time you include &quot;nuklear.h&quot; you have to define the same optional flags. This is very important; not doing it either leads to compiler errors, or even worse, stack corruptions.&lt;/p&gt; 
&lt;h2&gt;Gallery&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&quot; alt=&quot;screenshot&quot; /&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&quot; alt=&quot;screen&quot; /&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&quot; alt=&quot;screen2&quot; /&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&quot; alt=&quot;node&quot; /&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&quot; alt=&quot;skinning&quot; /&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&quot; alt=&quot;gamepad&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* init gui state */
struct nk_context ctx;
nk_init_fixed(&amp;amp;ctx, calloc(1, MAX_MEMORY), MAX_MEMORY, &amp;amp;font);

enum {EASY, HARD};
static int op = EASY;
static float value = 0.6f;
static int i =  20;

if (nk_begin(&amp;amp;ctx, &quot;Show&quot;, nk_rect(50, 50, 220, 220),
    NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {
    /* fixed widget pixel width */
    nk_layout_row_static(&amp;amp;ctx, 30, 80, 1);
    if (nk_button_label(&amp;amp;ctx, &quot;button&quot;)) {
        /* event handling */
    }

    /* fixed widget window ratio width */
    nk_layout_row_dynamic(&amp;amp;ctx, 30, 2);
    if (nk_option_label(&amp;amp;ctx, &quot;easy&quot;, op == EASY)) op = EASY;
    if (nk_option_label(&amp;amp;ctx, &quot;hard&quot;, op == HARD)) op = HARD;

    /* custom widget pixel width */
    nk_layout_row_begin(&amp;amp;ctx, NK_STATIC, 30, 2);
    {
        nk_layout_row_push(&amp;amp;ctx, 50);
        nk_label(&amp;amp;ctx, &quot;Volume:&quot;, NK_TEXT_LEFT);
        nk_layout_row_push(&amp;amp;ctx, 110);
        nk_slider_float(&amp;amp;ctx, 0, &amp;amp;value, 1.0f, 0.1f);
    }
    nk_layout_row_end(&amp;amp;ctx);
}
nk_end(&amp;amp;ctx);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&quot; alt=&quot;example&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Bindings&lt;/h2&gt; 
&lt;p&gt;There are a number of nuklear bindings for different languages created by other authors. I cannot attest for their quality since I am not necessarily proficient in any of these languages. Furthermore there are no guarantee that all bindings will always be kept up to date:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/glegris/nuklear4j&quot;&gt;Java&lt;/a&gt; by Guillaume Legris&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Timu5/bindbc-nuklear&quot;&gt;D&lt;/a&gt; by Mateusz Muszyński&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/golang-ui/nuklear&quot;&gt;Golang&lt;/a&gt; by &lt;a href=&quot;mailto:golang-ui@github.com&quot;&gt;golang-ui@github.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/snuk182/nuklear-rust&quot;&gt;Rust&lt;/a&gt; by &lt;a href=&quot;mailto:snuk182@github.com&quot;&gt;snuk182@github.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wasamasa/nuklear&quot;&gt;Chicken&lt;/a&gt; by &lt;a href=&quot;mailto:wasamasa@github.com&quot;&gt;wasamasa@github.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zacharycarter/nuklear-nim&quot;&gt;Nim&lt;/a&gt; by &lt;a href=&quot;mailto:zacharycarter@github.com&quot;&gt;zacharycarter@github.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lua 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/keharriso/love-nuklear&quot;&gt;LÖVE-Nuklear&lt;/a&gt; by Kevin Harrison&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/stetre/moonnuklear&quot;&gt;MoonNuklear&lt;/a&gt; by Stefano Trettel&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Python 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/billsix/pyNuklear&quot;&gt;pyNuklear&lt;/a&gt; by William Emerison Six (ctypes-based wrapper)&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nathanrw/nuklear-cffi&quot;&gt;pynk&lt;/a&gt; by &lt;a href=&quot;mailto:nathanrw@github.com&quot;&gt;nathanrw@github.com&lt;/a&gt; (cffi binding)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cartman300/NuklearDotNet&quot;&gt;CSharp/.NET&lt;/a&gt; by &lt;a href=&quot;mailto:cartman300@github.com&quot;&gt;cartman300@github.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nsauzede/vnk&quot;&gt;V&lt;/a&gt; by Nicolas Sauzede&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Developed by Micha Mettke and every direct or indirect contributor to the GitHub.&lt;/p&gt; 
&lt;p&gt;Embeds &lt;code&gt;stb_texedit&lt;/code&gt;, &lt;code&gt;stb_truetype&lt;/code&gt; and &lt;code&gt;stb_rectpack&lt;/code&gt; by Sean Barrett (public domain) Embeds &lt;code&gt;ProggyClean.ttf&lt;/code&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt; 
&lt;p&gt;Big thank you to Omar Cornut (ocornut@github) for his &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;imgui&lt;/a&gt; library and giving me the inspiration for this library, Casey Muratori for handmade hero and his original immediate-mode graphical user interface idea and Sean Barrett for his amazing single-header &lt;a href=&quot;https://github.com/nothings/stb&quot;&gt;libraries&lt;/a&gt; which restored my faith in libraries and brought me to create some of my own. Finally Apoorva Joshi for his single-header &lt;a href=&quot;http://apoorvaj.io/single-header-packer.html&quot;&gt;file packer&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Nuklear is avaliable under either the MIT License or public domain. See &lt;a href=&quot;https://raw.githubusercontent.com/Immediate-Mode-UI/Nuklear/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;h2&gt;Reviewers guide&lt;/h2&gt; 
&lt;p&gt;When reviewing pull request there are common things a reviewer should keep in mind.&lt;/p&gt; 
&lt;p&gt;Reviewing changes to &lt;code&gt;src/*&lt;/code&gt; and &lt;code&gt;nuklear.h&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure C89 compatibility.&lt;/li&gt; 
 &lt;li&gt;The code should work for several backends to an acceptable degree.&lt;/li&gt; 
 &lt;li&gt;Check no other parts of &lt;code&gt;nuklear.h&lt;/code&gt; are related to the PR and thus nothing is missing.&lt;/li&gt; 
 &lt;li&gt;Recommend simple optimizations. 
  &lt;ul&gt; 
   &lt;li&gt;Pass small structs by value instead of by pointer.&lt;/li&gt; 
   &lt;li&gt;Use local buffers over heap allocation when possible.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Check that the coding style is consistent with code around it. 
  &lt;ul&gt; 
   &lt;li&gt;Variable/function name casing.&lt;/li&gt; 
   &lt;li&gt;Indentation.&lt;/li&gt; 
   &lt;li&gt;Curly bracket (&lt;code&gt;{}&lt;/code&gt;) placement.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure that the contributor has bumped the appropriate version in &lt;a href=&quot;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/clib.json&quot;&gt;clib.json&lt;/a&gt; and added their changes to the &lt;a href=&quot;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/src/CHANGELOG&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Have at least one other person review the changes before merging.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Reviewing changes to &lt;code&gt;demo/*&lt;/code&gt;, &lt;code&gt;example/*&lt;/code&gt; and other files in the repo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Focus on getting working code merged. 
  &lt;ul&gt; 
   &lt;li&gt;We want to make it easy for people to get started with Nuklear, and any &lt;code&gt;demo&lt;/code&gt; and &lt;code&gt;example&lt;/code&gt; improvements helps in this regard.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Use of newer C features, or even other languages is not discouraged. 
  &lt;ul&gt; 
   &lt;li&gt;If another language is used, ensure that the build process is easy to figure out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Messy or less efficient code can be merged so long as these outliers are pointed out and easy to find.&lt;/li&gt; 
 &lt;li&gt;Version shouldn&#39;t be bumped for these changes.&lt;/li&gt; 
 &lt;li&gt;Changes that improves code to be more inline with &lt;code&gt;nuklear.h&lt;/code&gt; are ofc always welcome.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>bol-van/zapret</title>
      <link>https://github.com/bol-van/zapret</link>
      <description>&lt;p&gt;DPI bypass multi platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zapret v71.3&lt;/h1&gt; 
&lt;h1&gt;ВНИМАНИЕ, остерегайтесь мошенников&lt;/h1&gt; 
&lt;p&gt;zapret является свободным и open source. Всякий, кто понуждает вас скачивать zapret только с его ресурса, требует удалить ссылки, видео, файлы, обосновывая эти требования авторскими правами, сам нарушает &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/LICENSE.txt&quot;&gt;лицензию&lt;/a&gt;. Однако, это не исключает &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0&quot;&gt;добровольные пожертвования&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Multilanguage README&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/readme.en.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lang-en-red.svg?sanitize=true&quot; alt=&quot;en&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/readme.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lang-ru-green.svg?sanitize=true&quot; alt=&quot;ru&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B7%D0%B0%D1%87%D0%B5%D0%BC-%D1%8D%D1%82%D0%BE-%D0%BD%D1%83%D0%B6%D0%BD%D0%BE&quot;&gt;Зачем это нужно&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B1%D1%8B%D1%81%D1%82%D1%80%D1%8B%D0%B9-%D1%81%D1%82%D0%B0%D1%80%D1%82&quot;&gt;Быстрый старт&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82&quot;&gt;Как это работает&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%87%D1%82%D0%BE-%D1%81%D0%B5%D0%B9%D1%87%D0%B0%D1%81-%D0%BF%D1%80%D0%BE%D0%B8%D1%81%D1%85%D0%BE%D0%B4%D0%B8%D1%82-%D0%B2-%D1%80%D0%BE%D1%81%D1%81%D0%B8%D0%B8&quot;&gt;Что сейчас происходит в России&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BD%D0%B0-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B5-%D0%B2-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-linux&quot;&gt;Как это реализовать на практике в системе linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D1%8D%D1%82%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%82%D1%8C-%D0%BD%D0%B5-%D0%B1%D1%83%D0%B4%D0%B5%D1%82&quot;&gt;Когда это работать не будет&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nfqws&quot;&gt;nfqws&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%B4%D0%B5%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-dpi&quot;&gt;АТАКА ДЕСИНХРОНИЗАЦИИ DPI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%84%D0%B5%D0%B9%D0%BA%D0%B8&quot;&gt;ФЕЙКИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F-%D1%84%D0%B5%D0%B9%D0%BA%D0%BE%D0%B2&quot;&gt;МОДИФИКАЦИЯ ФЕЙКОВ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;TCP СЕГМЕНТАЦИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%B5%D1%80%D0%B5%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5-sequence-numbers&quot;&gt;ПЕРЕКРЫТИЕ SEQUENCE NUMBERS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D1%8B-ipv6&quot;&gt;СПЕЦИФИЧЕСКИЕ РЕЖИМЫ IPV6&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F-%D0%BE%D1%80%D0%B8%D0%B3%D0%B8%D0%BD%D0%B0%D0%BB%D0%B0&quot;&gt;МОДИФИКАЦИЯ ОРИГИНАЛА&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%82%D1%8B&quot;&gt;ДУБЛИКАТЫ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D0%BE%D0%BC%D0%B1%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%B2-%D0%B4%D0%B5%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8&quot;&gt;КОМБИНИРОВАНИЕ МЕТОДОВ ДЕСИНХРОНИЗАЦИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D1%8D%D1%88-ip&quot;&gt;КЭШ IP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B0%D0%BA%D1%86%D0%B8%D1%8F-dpi-%D0%BD%D0%B0-%D0%BE%D1%82%D0%B2%D0%B5%D1%82-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0&quot;&gt;РЕАКЦИЯ DPI НА ОТВЕТ СЕРВЕРА&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-synack&quot;&gt;РЕЖИМ SYNACK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-syndata&quot;&gt;РЕЖИМ SYNDATA&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D1%8B&quot;&gt;ВИРТУАЛЬНЫЕ МАШИНЫ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#conntrack&quot;&gt;CONNTRACK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B0%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B8%D0%BD%D0%B3&quot;&gt;РЕАССЕМБЛИНГ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0-udp&quot;&gt;ПОДДЕРЖКА UDP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#ip-%D1%84%D1%80%D0%B0%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;IP ФРАГМЕНТАЦИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8&quot;&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-wifi&quot;&gt;ФИЛЬТРАЦИЯ ПО WIFI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#iptables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;IPTABLES ДЛЯ NFQWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;NFTABLES ДЛЯ NFQWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#flow-offloading&quot;&gt;FLOW OFFLOADING&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%83%D1%80%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%BE-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D1%8B-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0&quot;&gt;ДУРЕНИЕ СО СТОРОНЫ СЕРВЕРА&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tpws&quot;&gt;tpws&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2-tpws&quot;&gt;TCP СЕГМЕНТАЦИЯ В TPWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tlsrec&quot;&gt;TLSREC&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#mss&quot;&gt;MSS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B-%D0%B4%D1%83%D1%80%D0%B5%D0%BD%D0%B8%D1%8F&quot;&gt;ДРУГИЕ ПАРАМЕТРЫ ДУРЕНИЯ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8-1&quot;&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D1%8B%D0%B5-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B&quot;&gt;СЛУЖЕБНЫЕ ПАРАМЕТРЫ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#iptables-%D0%B4%D0%BB%D1%8F-tpws&quot;&gt;IPTABLES ДЛЯ TPWS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-tpws&quot;&gt;NFTABLES ДЛЯ TPWS&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#ip2net&quot;&gt;ip2net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#mdig&quot;&gt;mdig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D1%8B-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0-%D0%B7%D0%B0%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-ip&quot;&gt;Способы получения списка заблокированных IP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D0%B8%D0%BC%D0%B5%D0%BD%D0%B0%D0%BC-%D0%B4%D0%BE%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2&quot;&gt;Фильтрация по именам доменов&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%80%D0%B5%D0%B6%D0%B8%D0%BC-%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D0%B0%D1%86%D0%B8%D0%B8-autohostlist&quot;&gt;Режим фильтрации autohostlist&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%BF%D1%80%D0%BE%D0%B2%D0%B0%D0%B9%D0%B4%D0%B5%D1%80%D0%B0&quot;&gt;Проверка провайдера&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D1%8B%D0%B1%D0%BE%D1%80-%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%BE%D0%B2&quot;&gt;Выбор параметров&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%B8%D0%BA%D1%80%D1%83%D1%87%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D1%84%D0%B0%D0%B5%D1%80%D0%B2%D0%BE%D0%BB%D0%BE%D0%BC-%D0%B8%D0%BB%D0%B8-%D1%81%D0%B2%D0%BE%D0%B5%D0%B9-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA%D0%B0&quot;&gt;Прикручивание к системе управления фаерволом или своей системе запуска&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B2%D0%B0%D1%80%D0%B8%D0%B0%D0%BD%D1%82-custom&quot;&gt;Вариант custom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%8F-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0&quot;&gt;Простая установка&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BF%D0%BE%D0%B4-systemd&quot;&gt;Установка под systemd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%8F-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%B0-openwrt&quot;&gt;Простая установка на openwrt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%B0-openwrt-%D0%B2-%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B5-%D0%BE%D1%81%D1%82%D1%80%D0%BE%D0%B9-%D0%BD%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D0%BA%D0%B8-%D0%BC%D0%B5%D1%81%D1%82%D0%B0-%D0%BD%D0%B0-%D0%B4%D0%B8%D1%81%D0%BA%D0%B5&quot;&gt;Установка на openwrt в режиме острой нехватки места на диске&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BC%D1%8B-%D0%B8-%D1%80%D0%BE%D1%83%D1%82%D0%B5%D1%80%D1%8B-huawei&quot;&gt;Мобильные модемы и роутеры huawei&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#freebsd-openbsd-macos&quot;&gt;FreeBSD, OpenBSD, MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%88%D0%B8%D0%B2%D0%BA%D0%B8&quot;&gt;Другие прошивки&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BE%D0%B1%D1%85%D0%BE%D0%B4-%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%BD%D0%B8%D0%B9-%D1%85%D0%BE%D1%81%D1%82&quot;&gt;Обход блокировки через сторонний хост&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%81%D1%82%D0%BE%D0%B8%D1%82-%D0%B2%D0%BB%D0%BE%D0%B6%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%B2-%D0%BF%D0%BE%D0%BA%D1%83%D0%BF%D0%BA%D1%83-vps&quot;&gt;Почему стоит вложиться в покупку VPS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0&quot;&gt;Поддержать разработчика&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Зачем это нужно&lt;/h2&gt; 
&lt;p&gt;Автономное средство противодействия DPI, которое не требует подключения каких-либо сторонних серверов. Может помочь обойти блокировки или замедление сайтов HTTP(S), сигнатурный анализ TCP и UDP протоколов, например, с целью блокировки VPN.&lt;/p&gt; 
&lt;p&gt;Проект нацелен прежде всего на маломощные embedded устройства - роутеры, работающие под OpenWrt. Поддерживаются традиционные Linux-системы, FreeBSD, OpenBSD, частично macOS. В некоторых случаях возможна самостоятельная прикрутка решения к различным прошивкам.&lt;/p&gt; 
&lt;p&gt;Большая часть функционала работает на Windows.&lt;/p&gt; 
&lt;h2&gt;Быстрый старт&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/quick_start.md&quot;&gt;Linux/openWrt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/quick_start_windows.md&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Как это работает&lt;/h2&gt; 
&lt;p&gt;В самом простейшем случае вы имеете дело с пассивным DPI. Пассивный DPI может читать трафик из потока, может инжектить свои пакеты, но не может блокировать проходящие пакеты. Если запрос &quot;плохой&quot;, пассивный DPI инжектит пакет RST, опционально дополняя его пакетом HTTP redirect. Если фейк пакет инжектится только для клиента, в этом случае можно обойтись командами iptables для дропа RST и/или редиректа на заглушку по определённым условиям, которые нужно подбирать для каждого провайдера индивидуально. Так мы обходим последствия срабатывания триггера запрета. Если пассивный DPI направляет пакет RST в том числе и серверу, то вы ничего с этим не сможете сделать. Ваша задача — не допустить срабатывания триггера запрета. Одними iptables уже не обойтись. Этот проект нацелен именно на предотвращение срабатывания запрета, а не ликвидацию его последствий.&lt;/p&gt; 
&lt;p&gt;Активный DPI ставится в разрез провода и может дропать пакеты по любым критериям, в том числе распознавать TCP-потоки и блокировать любые пакеты, принадлежащие потоку.&lt;/p&gt; 
&lt;p&gt;Как не допустить срабатывания триггера запрета? Послать то, на что DPI не рассчитывает и что ломает ему алгоритм распознавания запросов и их блокировки.&lt;/p&gt; 
&lt;p&gt;Некоторые DPI не могут распознать HTTP-запрос, если он разделен на TCP-сегменты. Например, запрос вида &lt;code&gt;GET / HTTP/1.1\r\nHost: kinozal.tv......&lt;/code&gt; мы посылаем двумя частями: сначала идет &lt;code&gt;GET&lt;/code&gt;, затем &lt;code&gt;/ HTTP/1.1\r\nHost: kinozal.tv.....&lt;/code&gt;. Другие DPI спотыкаются, когда заголовок &lt;code&gt;Host:&lt;/code&gt; пишется в другом регистре: например, &lt;code&gt;host:&lt;/code&gt;. Кое-где работает добавление дополнительного пробела после метода: &lt;code&gt;GET /&lt;/code&gt; → &lt;code&gt;GET /&lt;/code&gt; или добавление точки в конце имени хоста: &lt;code&gt;Host: kinozal.tv.&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Существует и более продвинутая магия, направленная на преодоление DPI на пакетном уровне.&lt;/p&gt; 
&lt;p&gt;Подробнее про DPI:&lt;br /&gt; &lt;a href=&quot;https://habr.com/ru/post/335436&quot;&gt;https://habr.com/ru/post/335436&lt;/a&gt; или &lt;a href=&quot;https://web.archive.org/web/20230331233644/https://habr.com/ru/post/335436/&quot;&gt;https://web.archive.org/web/20230331233644/https://habr.com/ru/post/335436/&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&quot;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Что сейчас происходит в России&lt;/h2&gt; 
&lt;p&gt;Раньше, до внедрения повсеместных систем ТСПУ, использовался зоопарк различных DPI у провайдеров. Какие-то были активными, какие-то пассивными. Сейчас время простых iptables окончательно ушло. Везде активный DPI ТСПУ, но кое-где могут оставаться невыключенными дополнительные старые DPI из зоопарка. В этом случае приходится обходить сразу несколько DPI. Все больше становится внереестровых блокировок, о которых вы узнаете только по факту недоступности чего-либо, в списках этого нет. Применяются блокировки некоторых диапазонов ip адресов (автономный обход невозможен) и протоколов (VPN). На некоторых диапазонах IP используется более строгий фильтр, распознающий попытки обмана через сегментацию. Должно быть это связано с некоторыми сервисами, которые пытаются таким образом обмануть DPI.&lt;/p&gt; 
&lt;h2&gt;Как это реализовать на практике в системе linux&lt;/h2&gt; 
&lt;p&gt;Если кратко, то варианты можно классифицировать по следующей схеме :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Пассивный DPI, не отправляющий RST серверу. Помогут индивидуально настраиваемые под провайдера команды iptables. На rutracker в разделе &quot;обход блокировок - другие способы&quot; по этому вопросу существует отдельная тема. В данном проекте не рассматривается. Если вы не допустите срабатывание триггера запрета, то и не придется бороться с его последствиями.&lt;/li&gt; 
 &lt;li&gt;Модификация TCP соединения на уровне потока. Реализуется через proxy или transparent proxy.&lt;/li&gt; 
 &lt;li&gt;Модификация TCP соединения на уровне пакетов. Реализуется через обработчик очереди NFQUEUE и raw сокеты.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Для вариантов 2 и 3 реализованы программы tpws и nfqws соответственно. Чтобы они работали, необходимо их запустить с нужными параметрами и перенаправить на них определенный трафик средствами iptables или nftables.&lt;/p&gt; 
&lt;h2&gt;Когда это работать не будет&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если подменяется DNS. С этой проблемой легко справиться.&lt;/li&gt; 
 &lt;li&gt;Если блокировка осуществляется по IP.&lt;/li&gt; 
 &lt;li&gt;Если соединение проходит через фильтр, способный реконструировать TCP соединение, и который следует всем стандартам. Например, нас заворачивают на squid. Соединение идет через полноценный стек tcpip операционной системы. Проект нацелен на обман DPI, который всилу ограниченности ресурсов и большого трафика вынужден интерпретировать его лишь ограниченно. Обмануть полноценный стек ОС и полноценные серверные приложения не получится.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;nfqws&lt;/h2&gt; 
&lt;p&gt;Эта программа - модификатор пакетов и обработчик очереди NFQUEUE. Для BSD систем существует адаптированный вариант - dvtws, собираемый из тех же исходников (см. &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/bsd.md&quot;&gt;документация BSD&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@&amp;lt;config_file&amp;gt;|$&amp;lt;config_file&amp;gt;                      ; читать конфигурацию из файла. опция должна быть первой. остальные опции игнорируются.

--debug=0|1                                        ; 1=выводить отладочные сообщения
--dry-run                                          ; проверить опции командной строки и выйти. код 0 - успешная проверка.
--version                                          ; вывести версию и выйти
--comment                                          ; любой текст (игнорируется)
--daemon                                           ; демонизировать прогу
--pidfile=&amp;lt;file&amp;gt;                                   ; сохранить PID в файл
--user=&amp;lt;username&amp;gt;                                  ; менять uid процесса
--uid=uid[:gid]                                    ; менять uid процесса
--qnum=N                                           ; номер очереди N
--bind-fix4                                        ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv4 пакетов
--bind-fix6                                        ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv6 пакетов
--ctrack-timeouts=S:E:F[:U]                        ; таймауты внутреннего conntrack в состояниях SYN, ESTABLISHED, FIN, таймаут udp. по умолчанию 60:300:60:60
--ctrack-disable=[0|1]                             ; 1 или остутствие аргумента отключает conntrack
--ipcache-lifetime=&amp;lt;int&amp;gt;                           ; время жизни записей кэша IP в секундах. 0 - без ограничений.
--ipcache-hostname=[0|1]                           ; 1 или отсутствие аргумента включают кэширование имен хостов для применения в стратегиях нулевой фазы
--wsize=&amp;lt;winsize&amp;gt;[:&amp;lt;scale_factor&amp;gt;]                 ; менять tcp window size на указанный размер в SYN,ACK. если не задан scale_factor, то он не меняется (устарело !)
--wssize=&amp;lt;winsize&amp;gt;[:&amp;lt;scale_factor&amp;gt;]                ; менять tcp window size на указанный размер в исходящих пакетах. scale_factor по умолчанию 0. (см. conntrack !)
--wssize-cutoff=[n|d|s]N                           ; изменять server window size в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--synack-split=[syn|synack|acksyn]                 ; выполнить tcp split handshake. вместо SYN,ACK отсылать только SYN, SYN+ACK или ACK+SYN
--orig-ttl=&amp;lt;int&amp;gt;                                   ; модифицировать TTL оригинального пакета
--orig-ttl6=&amp;lt;int&amp;gt;                                  ; модифицировать ipv6 hop limit оригинальных пакетов.  если не указано, используется значение --orig-ttl
--orig-autottl=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]         ; режим auto ttl для ipv4 и ipv6. по умолчанию: +5:3-64. &quot;0:0-0&quot; или &quot;-&quot; отключает функцию
--orig-autottl6=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]        ; переопределение предыдущего параметра для ipv6
--orig-mod-start=[n|d|s]N                          ; применять orig-mod только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру больше или равно N
--orig-mod-cutoff=[n|d|s]N                         ; применять orig-mod только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--dup=&amp;lt;int&amp;gt;                                        ; высылать N дубликатов до оригинала
--dup-replace=[0|1]                                ; 1 или отсутствие аргумента блокирует отправку оригинала. отправляются только дубликаты.
--dup-ttl=&amp;lt;int&amp;gt;                                    ; модифицировать TTL дубликатов
--dup-ttl6=&amp;lt;int&amp;gt;                                   ; модифицировать ipv6 hop limit дубликатов. если не указано, используется значение --dup-ttl
--dup-autottl=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]          ; режим auto ttl для ipv4 и ipv6. по умолчанию: +1:3-64. &quot;0:0-0&quot; или &quot;-&quot; отключает функцию
--dup-autottl6=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]         ; переопределение предыдущего параметра для ipv6
--dup-fooling=&amp;lt;fooling&amp;gt;                            ; дополнительные методики как сделать, чтобы дубликат не дошел до сервера. none md5sig badseq badsum datanoack ts hopbyhop hopbyhop2
--dup-ts-increment=&amp;lt;int|0xHEX&amp;gt;                     ; инкремент TSval для ts. по умолчанию -600000
--dup-badseq-increment=&amp;lt;int|0xHEX&amp;gt;                 ; инкремент sequence number для badseq. по умолчанию -10000
--dup-badack-increment=&amp;lt;int|0xHEX&amp;gt;                 ; инкремент ack sequence number для badseq. по умолчанию -66000
--dup-start=[n|d|s]N                               ; применять dup только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру больше или равно N
--dup-cutoff=[n|d|s]N                              ; применять dup только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--hostcase                                         ; менять регистр заголовка &quot;Host:&quot; по умолчанию на &quot;host:&quot;.
--hostnospace                                      ; убрать пробел после &quot;Host:&quot; и переместить его в конец значения &quot;User-Agent:&quot; для сохранения длины пакета
--methodeol                                        ; добавить перевод строки в unix стиле (&#39;\n&#39;) перед методом и убрать пробел из Host: : &quot;GET / ... Host: domain.com&quot; =&amp;gt; &quot;\nGET  / ... Host:domain.com&quot;
--hostspell=HoST                                   ; точное написание заголовка Host (можно &quot;HOST&quot; или &quot;HoSt&quot;). автоматом включает --hostcase
--domcase                                          ; домен после Host: сделать таким : TeSt.cOm
--dpi-desync=[&amp;lt;mode0&amp;gt;,]&amp;lt;mode&amp;gt;[,&amp;lt;mode2]             ; атака по десинхронизации DPI. mode : synack syndata fake fakeknown rst rstack hopbyhop destopt ipfrag1 multisplit multidisorder fakedsplit fakeddisorder ipfrag2 udplen tamper
--dpi-desync-fwmark=&amp;lt;int|0xHEX&amp;gt;                    ; бит fwmark для пометки десинхронизирующих пакетов, чтобы они повторно не падали в очередь. default = 0x40000000
--dpi-desync-ttl=&amp;lt;int&amp;gt;                             ; установить ttl для десинхронизирующих пакетов
--dpi-desync-ttl6=&amp;lt;int&amp;gt;                            ; установить ipv6 hop limit для десинхронизирующих пакетов. если не указано, используется значение --dpi-desync-ttl
--dpi-desync-autottl=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]   ; режим auto ttl для ipv4 и ipv6. по умолчанию: 1:3-20. &quot;0:0-0&quot; или &quot;-&quot; отключает функцию
--dpi-desync-autottl6=[&amp;lt;delta&amp;gt;[:&amp;lt;min&amp;gt;[-&amp;lt;max&amp;gt;]]|-]  ; переопределение предыдущего параметра для ipv6
--dpi-desync-fooling=&amp;lt;fooling&amp;gt;                     ; дополнительные методики как сделать, чтобы фейковый пакет не дошел до сервера. none md5sig badseq badsum datanoack ts hopbyhop hopbyhop2
--dpi-desync-repeats=&amp;lt;N&amp;gt;                           ; посылать каждый генерируемый в nfqws пакет N раз (не влияет на остальные пакеты)
--dpi-desync-skip-nosni=0|1                        ; 1(default)=не применять dpi desync для запросов без hostname в SNI, в частности для ESNI
--dpi-desync-split-pos=N|-N|marker+N|marker-N      ; список через запятую маркеров для tcp сегментации в режимах split и disorder
--dpi-desync-split-seqovl=N|-N|marker+N|marker-N   ; единичный маркер, определяющий величину перекрытия sequence в режимах split и disorder. для split поддерживается только положительное число.
--dpi-desync-split-seqovl-pattern=&amp;lt;filename&amp;gt;|0xHEX ; чем заполнять фейковую часть overlap
--dpi-desync-fakedsplit-pattern=&amp;lt;filename&amp;gt;|0xHEX   ; чем заполнять фейки в fakedsplit/fakeddisorder
--dpi-desync-ts-increment=&amp;lt;int|0xHEX&amp;gt;              ; инкремент TSval для ts. по умолчанию -600000
--dpi-desync-badseq-increment=&amp;lt;int|0xHEX&amp;gt;          ; инкремент sequence number для badseq. по умолчанию -10000
--dpi-desync-badack-increment=&amp;lt;int|0xHEX&amp;gt;          ; инкремент ack sequence number для badseq. по умолчанию -66000
--dpi-desync-any-protocol=0|1                      ; 0(default)=работать только по http request и tls clienthello  1=по всем непустым пакетам данных
--dpi-desync-fake-http=&amp;lt;filename&amp;gt;|0xHEX	           ; файл, содержащий фейковый http запрос для dpi-desync=fake, на замену стандартному www.iana.org
--dpi-desync-fake-tls=&amp;lt;filename&amp;gt;|0xHEX|!           ; файл, содержащий фейковый tls clienthello для dpi-desync=fake, на замену стандартному. &#39;!&#39; = стандартный фейк
--dpi-desync-fake-tls-mod=mod[,mod]                ; список через запятую режимов runtime модификации фейков : none,rnd,rndsni,sni=&amp;lt;sni&amp;gt;,dupsid,padencap
--dpi-desync-fake-unknown=&amp;lt;filename&amp;gt;|0xHEX         ; файл, содержащий фейковый пейлоад неизвестного протокола для dpi-desync=fake, на замену стандартным нулям 256 байт
--dpi-desync-fake-syndata=&amp;lt;filename&amp;gt;|0xHEX         ; файл, содержащий фейковый пейлоад пакета SYN для режима десинхронизации syndata
--dpi-desync-fake-quic=&amp;lt;filename&amp;gt;|0xHEX            ; файл, содержащий фейковый QUIC Initial
--dpi-desync-fake-wireguard=&amp;lt;filename&amp;gt;|0xHEX       ; файл, содержащий фейковый wireguard handshake initiation
--dpi-desync-fake-dht=&amp;lt;filename&amp;gt;|0xHEX             ; файл, содержащий фейковый пейлоад DHT протокола для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-fake-discord=&amp;lt;filename&amp;gt;|0xHEX         ; файл, содержащий фейковый пейлоад Discord протокола нахождения IP адреса для голосовых чатов для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-fake-stun=&amp;lt;filename&amp;gt;|0xHEX            ; файл, содержащий фейковый пейлоад STUN протокола для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-fake-unknown-udp=&amp;lt;filename&amp;gt;|0xHEX     ; файл, содержащий фейковый пейлоад неизвестного udp протокола для dpi-desync=fake, на замену стандартным нулям 64 байт
--dpi-desync-udplen-increment=&amp;lt;int&amp;gt;                ; насколько увеличивать длину udp пейлоада в режиме udplen
--dpi-desync-udplen-pattern=&amp;lt;filename&amp;gt;|0xHEX       ; чем добивать udp пакет в режиме udplen. по умолчанию - нули
--dpi-desync-start=[n|d|s]N                        ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру больше или равно N
--dpi-desync-cutoff=[n|d|s]N                       ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N
--hostlist=&amp;lt;filename&amp;gt;                              ; действовать только над доменами, входящими в список из filename. поддомены автоматически учитываются, если хост не начинается с &#39;^&#39;.
                                                   ; в файле должен быть хост на каждой строке.
                                                   ; список читается при старте и хранится в памяти в виде иерархической структуры для быстрого поиска.
                                                   ; при изменении времени модификации файла он перечитывается автоматически по необходимости
                                                   ; список может быть запакован в gzip. формат автоматически распознается и разжимается
                                                   ; списков может быть множество. пустой общий лист = его отсутствие
                                                   ; хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello.
--hostlist-domains=&amp;lt;domain_list&amp;gt;                   ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-exclude=&amp;lt;filename&amp;gt;                      ; не применять дурение к доменам из листа. может быть множество листов. схема аналогична include листам.
--hostlist-exclude-domains=&amp;lt;domain_list&amp;gt;           ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-auto=&amp;lt;filename&amp;gt;                         ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика)
--hostlist-auto-fail-threshold=&amp;lt;int&amp;gt;               ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3)
--hostlist-auto-fail-time=&amp;lt;int&amp;gt;                    ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60)
--hostlist-auto-retrans-threshold=&amp;lt;int&amp;gt;            ; сколько ретрансмиссий запроса считать блокировкой (по умолчанию: 3)
--hostlist-auto-debug=&amp;lt;logfile&amp;gt;                    ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.
--new                                              ; начало новой стратегии (новый профиль)
--skip                                             ; не использовать этот профиль . полезно для временной деактивации профиля без удаления параметров.
--filter-l3=ipv4|ipv6                              ; фильтр версии ip для текущей стратегии
--filter-tcp=[~]port1[-port2]|*                    ; фильтр портов tcp для текущей стратегии. ~ означает инверсию. установка фильтра tcp и неустановка фильтра udp запрещает udp. поддерживается список через запятую.
--filter-udp=[~]port1[-port2]|*                    ; фильтр портов udp для текущей стратегии. ~ означает инверсию. установка фильтра udp и неустановка фильтра tcp запрещает tcp. поддерживается список через запятую.
--filter-l7=&amp;lt;proto&amp;gt;                                ; фильтр протокола L6-L7. поддерживается несколько значений через запятую. proto : http tls quic wireguard dht discord stun unknown
--filter-ssid=ssid1[,ssid2,ssid3,...]              ; фильтр по имени wifi сети (только для linux)
--ipset=&amp;lt;filename&amp;gt;                                 ; включающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-ip=&amp;lt;ip_list&amp;gt;                               ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
--ipset-exclude=&amp;lt;filename&amp;gt;                         ; исключающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-exclude-ip=&amp;lt;ip_list&amp;gt;                       ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--debug&lt;/code&gt; позволяет выводить подробный лог действий на консоль, в syslog или в файл. Может быть важен порядок следования опций. &lt;code&gt;--debug&lt;/code&gt; лучше всего указывать в самом начале. Опции анализируются последовательно. Если ошибка будет при проверке опции, а до анализа &lt;code&gt;--debug&lt;/code&gt; еще дело не дошло, то сообщения не будут выведены в файл или syslog. При логировании в файл процесс не держит файл открытым. Ради каждой записи файл открывается и потом закрывается. Так что файл можно удалить в любой момент, и он будет создан заново при первом же сообщении в лог. Но имейте в виду, что если вы запускаете процесс под root, то будет сменен UID на не-root. В начале на лог файл меняется owner, иначе запись будет невозможна. Если вы потом удалите файл, и у процесса не будет прав на создание файла в его директории, лог больше не будет вестись. Вместо удаления лучше использовать truncate. В шелле это можно сделать через команду &quot;: &amp;gt;filename&quot;&lt;/p&gt; 
&lt;h3&gt;АТАКА ДЕСИНХРОНИЗАЦИИ DPI&lt;/h3&gt; 
&lt;p&gt;Суть ее в следующем. Берется оригинальный запрос, модифицируется, добавляется поддельная информация (фейки) таким образом, чтобы ОС сервера передала серверному процессу оригинальный запрос в неизменном виде, а DPI увидел другое. То, что он блокировать не станет. Сервер видит одно, DPI - другое. DPI не понимает, что передается запрещенный запрос и не блокирует его.&lt;/p&gt; 
&lt;p&gt;Есть арсенал возможностей, чтобы достичь такого результата. Это может быть передача фейк пакетов, чтобы они дошли до DPI, но не дошли до сервера. Может использоваться фрагментация на уровне TCP (сегментация) или на уровне IP. Есть атаки, основанные на игре с tcp sequence numbers или с перепутыванием порядка следования tcp сегментов. Методы могут сочетаться в различных вариантах.&lt;/p&gt; 
&lt;h3&gt;ФЕЙКИ&lt;/h3&gt; 
&lt;p&gt;Фейки - это отдельные сгенерированные nfqws пакеты, несущие ложную информацию для DPI. Они либо не должны дойти до сервера, либо могут дойти, но должны быть им отброшены. Иначе получается слом tcp соединения или нарушение целостности передаваемого потока, что гарантированно приводит к поломке ресурса. Есть ряд методов для решения этой задачи.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;md5sig&lt;/code&gt; добавляет TCP опцию &lt;strong&gt;MD5 signature&lt;/strong&gt;. Работает не на всех серверах. Пакеты с md5 обычно отбрасывают только linux. Требуется значительное увеличение длины tcp пакета, чтобы вместить tcp option. При обработке многосегментных запросов (TLS Kyber) первый пакет идет полный под MTU. При fakedsplit/fakeddisorder на небольших позициях отдельные tcp сегменты достаточно велики, чтобы внедрение md5 tcp option вызвало переполнение MTU и ошибку отправки &quot;message too long&quot;. &lt;code&gt;nfqws&lt;/code&gt; не умеет перераспределять данные между tcp сегментами, поэтому надо или отказываться от kyber, или увеличивать сплит-позицию, или отказываться от fakedsplit/fakeddisorder.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;badsum&lt;/code&gt; портит контрольную сумму TCP. Не сработает, если ваше устройство за NAT, который не пропускает пакеты с инвалидной суммой. Наиболее распространенная настройка NAT роутера в Linux их не пропускает. На Linux построено большинство домашних роутеров. Непропускание обеспечивается так : настройка ядра sysctl по умолчанию &lt;code&gt;net.netfilter.nf_conntrack_checksum=1&lt;/code&gt; заставляет conntrack проверять tcp и udp чексуммы входящих пакетов и выставлять state INVALID для пакетов с инвалидной суммой. Обычно в правилах iptables вставляется правило для дропа пакетов с состоянием INVALID в цепочке FORWARD. Совместное сочетание этих факторов приводит к непрохождению badsum через такой роутер. В OpenWrt из коробки &lt;code&gt;net.netfilter.nf_conntrack_checksum=0&lt;/code&gt;, в других роутерах часто нет, и не всегда это можно изменить. Чтобы nfqws мог работать через роутер, нужно на нем выставить указанное значение sysctl в 0. nfqws на самом роутере будет работать и без этой настройки, потому что чексумма локально созданных пакетов не проверяется никогда. Если роутер за другим NAT, например провайдерским, и он не пропускает invalid packets вы ничего не сможете с этим сделать. Но обычно провайдеры все же пропускают badsum. На некоторых адаптерах/свитчах/драйверах принудительно включен rx-checksum offload, badsum пакеты отсекаются еще до получения в ОС. В этом случае если что-то и можно сделать, то только модифицировать драйвер, что представляется задачей крайне нетривиальной. Установлено, что так себя ведут некоторые роутеры на базе mediatek. badsum пакеты уходят с клиентской ОС, но роутером не видятся в br-lan через tcpdump. При этом если nfqws выполняется на самом роутере, обход может работать. badsum нормально уходят с внешнего интерфейса.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;badseq&lt;/code&gt; увеличивает TCP sequence number на определенное значение, выводя его тем самым из TCP window. Такие пакеты будут наверняка отброшены принимающим узлом, но так же и DPI, если он ориентируется на sequence numbers. По умолчанию смещение seq выбирается -10000. Практика показала, что некоторые DPI не пропускают seq вне определенного окна. Однако, такое небольшое смещение может вызвать проблемы при существенной потоковой передаче и потере пакетов. Если вы используете &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;, может понадобиться установить badseq increment 0x80000000. Это обеспечит надежную гарантию, что поддельный пакет не вклинится в tcp window на сервере. Так же было замечено, что badseq ломает логику некоторых DPI при анализе http, вызывая зависание соединения. Причем на тех же DPI TLS с badseq работает нормально.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TTL&lt;/code&gt; казалось бы - лучший вариант, но он требует индивидуальной настройки под каждого провайдера. Если DPI находится дальше локальных сайтов провайдера, то вы можете отрезать себе доступ к ним. Ситуация усугубляется наличием ТСПУ на магистралах, что вынуждает делать TTL достаточно высоким, увеличивая риск пробоя фейка до сервера. Необходим ip exclude list, заполняемый вручную. Вместе с ttl можно применять md5sig. Это ничего не испортит, зато дает неплохой шанс работы сайтов, до которых &quot;плохой&quot; пакет дойдет по TTL. Если не удается найти автоматическое решение, воспользуйтесь файлом &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt;. Некоторые стоковые прошивки роутеров фиксируют исходящий TTL, без отключения этой опции через них работать не будет. КАКИМ СТОИТ ВЫБИРАТЬ TTL : найдите минимальное значение, при котором обход еще работает. Это и будет номер хопа вашего DPI.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hopbyhop&lt;/code&gt; относится только к ipv6. Добавляется ipv6 extenstion header &lt;code&gt;hop-by-hop options&lt;/code&gt;. В варианте &lt;code&gt;hopbyhop2&lt;/code&gt; добавляются 2 хедера, что является нарушением стандарта и гарантированно отбрасывается стеком протоколов во всех ОС. Один хедер hop-by-hop принимается всеми ОС, однако на некоторых каналах/провайдерах такие пакеты могут фильтроваться и не доходить. Расчет идет на то, что DPI проанализирует пакет с hop-by-hop, но он либо не дойдет до адресата в силу фильтров провайдера, либо будет отброшен сервером, потому что хедера два.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datanoack&lt;/code&gt; высылает фейки со снятым tcp флагом ACK. Сервера такое не принимают, а DPI может принять. Эта техника может ломать NAT и не всегда работает с iptables, если используется masquerade, даже с локальной системы (почти всегда на роутерах ipv4). На системах c iptables без masquerade и на nftables работает без ограничений. Экспериментально выяснено, что многие провайдерские NAT не отбрасывают эти пакеты, потому работает даже с внутренним провайдерским IP. Но linux NAT оно не пройдет, так что за домашним роутером эта техника скорее всего не сработает, но может сработать с него. Может сработать и через роутер, если подключение по проводу, и на роутере включено аппаратное ускорение.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ts&lt;/code&gt; прибавляет к значению TSval таймштампа tcp значение ts increment (по умолчанию -600000). Сервера отбрасывают пакеты с TSval в определенных пределах. По практическим тестам инкремент должен быть где-то от -100 до -0x80000000. timestamps генерирует клиентская ОС. В linux таймштампы включены по умолчанию, в windows выключены по умолчанию. Можно включить через команду &lt;code&gt;netsh interface tcp set global timestamps=enabled&lt;/code&gt;. ts fooling требует, чтобы таймштампы были включены, иначе работать не будет. Включать надо на каждом клиентском устройстве. TSecr оставляется без изменений. Так же требуется, чтобы сервер понимал timestamps, но это в большинстве случаев так.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;autottl&lt;/code&gt;. Суть режима в автоматическом определении TTL, чтобы пакет почти наверняка прошел DPI и немного не дошел до сервера (&lt;code&gt;--dpi-desync-autottl&lt;/code&gt;). Или наоборот - TTL едва хватило, чтобы он все-таки дошел до сервера (см &lt;code&gt;--dup-autottl&lt;/code&gt;, &lt;code&gt;--orig-autottl&lt;/code&gt;). Берутся базовые значения TTL 64,128,255, смотрится входящий пакет (да, требуется направить первый входящий пакет на nfqws !). Вычисляется длина пути, прибавляется &lt;code&gt;delta&lt;/code&gt;. delta может быть положительной или отрицательной. Чтобы задать положительную дельту, нужно указать унарный знак &lt;strong&gt;+&lt;/strong&gt; перед числом. В случае его отсутствия или при наличии унарного знака &lt;strong&gt;-&lt;/strong&gt; дельта считается отрицательной. Если TTL вне диапазона min,max, то берутся значения min,max, чтобы вписаться в диапазон. Если при этом дельта отрицательная и полученный TTL больше длины пути или дельта положительная и полученный TTL меньше длины пути, то автоматизм не сработал и берутся фиксированные значения : &lt;code&gt;--dpi-desync-ttl&lt;/code&gt;, &lt;code&gt;--orig-ttl&lt;/code&gt;, &lt;code&gt;--dup-ttl&lt;/code&gt;. Техника позволяет решить вопрос, когда вся сеть перегорожена шлагбаумами (DPI, ТСПУ) везде где только можно, включая магистралов. Но потенциально может давать сбои. Например, при асимметрии входящего и исходящего канала до конкретного сервера. Некоторые сервера выдают нестандартный TTL (google), потому на них получается полная ерунда. Если не учитывать подобные исключения, то на каких-то провайдерах эта техника будет работать неплохо, на других доставит больше проблем, чем пользы. Где-то может потребоваться тюнинг параметров. Лучше использовать с дополнительным ограничителем.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Режимы дурения могут сочетаться в любых комбинациях. &lt;code&gt;--dpi-desync-fooling&lt;/code&gt; берет множество значений через запятую.&lt;/p&gt; 
&lt;p&gt;Возможно задание множества фейков через повторение парамеров &lt;code&gt;--dpi-desync-fake-???&lt;/code&gt;, кроме &lt;code&gt;--dpi-desync-fake-syndata&lt;/code&gt;. Фейки будут отосланы в указанном порядке. &lt;code&gt;--dpi-desync-repeats&lt;/code&gt; повторяет каждый отосланный фейк. Итоговый порядок будет такой : &lt;code&gt;fake1 fake1 fake1 fake2 fake2 fake2 fake3 fake3 fake3 .....&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;МОДИФИКАЦИЯ ФЕЙКОВ&lt;/h3&gt; 
&lt;p&gt;В nfqws зашит базовый вариант фейка для TLS. Его можно переопределить опцией &lt;code&gt;--dpi-desync-fake-tls&lt;/code&gt;. Переопределение фейков дает возможность использовать любые данные в качестве фейка для TLS. Можно использовать фейковый Client Hello с любым фингерпринтом и с любым SNI.&lt;/p&gt; 
&lt;p&gt;Некоторые модификации можно делать в процессе выполнения с помощью &lt;code&gt;--dpi-desync-fake-tls-mod&lt;/code&gt;. Часть из них работает при обработке каждого TLS Client Hello и может подстраиваться под отправляемые данные. Модификации требуют наличия полного валидного TLS Client Hello в качестве фейка, они не работают с произвольными данными.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;none&lt;/code&gt;. Не применять никакие модификации.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rnd&lt;/code&gt;. Рандомизировать поля &lt;code&gt;random&lt;/code&gt; и &lt;code&gt;session id&lt;/code&gt;. Выполняется на каждый запрос.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dupsid&lt;/code&gt;. Копировать &lt;code&gt;session ID&lt;/code&gt; из передаваемого TLS Client Hello. Имеет приоритет над &lt;code&gt;rnd&lt;/code&gt;. Выполняется на каждый запрос.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rndsni&lt;/code&gt;. Рандомизировать SNI. Если SNI &amp;gt;=7 символов, применяется случайный домен 2 уровня с известным TLD, иначе заполняется случайными символами без точки. Выполняется один раз при старте.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sni=&amp;lt;sni&amp;gt;&lt;/code&gt;. Заменить sni на указанное значение. Макс длина SNI - 63 байта. Общая длина TLS фейка и длины в структуре TLS Client Hello меняются. Выполняется один раз при старте. Если сочетается с &lt;code&gt;rndsni&lt;/code&gt;, выполняется до него.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;padencap&lt;/code&gt;. Расширяется padding extension на размер передаваемого TLS Client Hello (включая многопакетный вариант с kyber). Если padding отсутствует, он добавляется в конец. Если присутствует - требуется, чтобы padding шел последним extension. Правятся все длины, чтобы создать видимость включения передаваемого TLS Client Hello в padding extension. Размер фейка не изменяется. Расчет идет на DPI, который не анализирует sequence numbers должным образом. Выполняется на каждый запрос.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;По умолчанию если не задан собственный фейк для TLS используются модификации &lt;code&gt;rnd,rndsni,dupsid&lt;/code&gt;. Если фейк задан, используется &lt;code&gt;none&lt;/code&gt;. Это соответствует поведению программы более старых версий с добавлением функции &lt;code&gt;dupsid&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Если задан режим модификации и имеется множество TLS фейков, к каждому из них применяется последний режим модификации. Если режим модификации задан после фейка, то он замещает предыдущий режим. Таким образом можно использовать разные режимы модификации для разных фейков. При невозможности модифицировать фейк на этапе запуска программа завершается с ошибкой.&lt;/p&gt; 
&lt;p&gt;Если сначала идет TLS фейк, для него задан режим однократной модификации, затем идет не TLS фейк, то будет ошибка. Нужно использовать `--dpi-desync-fake-tls-mod=none&#39;.&lt;/p&gt; 
&lt;p&gt;Пример : `--dpi-desync-fake-tls=iana_org.bin --dpi-desync-fake-tls-mod=rndsni --dpi-desync-fake-tls=0xaabbccdd --dpi-desync-fake-tls-mod=none&#39;&lt;/p&gt; 
&lt;h3&gt;TCP СЕГМЕНТАЦИЯ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;multisplit&lt;/code&gt;. нарезаем запрос на указанных в &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; позициях.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;multidisorder&lt;/code&gt;. нарезаем запрос на указанных в &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; позициях и отправляем в обратном порядке.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fakedsplit&lt;/code&gt;. нарезаем запрос на 2 части, обрамляя каждую часть фейками : фейк 1-й части, 1 часть, фейк 1-й части, фейк 2-й части, 2 часть, фейк 2-й части&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fakeddisorder&lt;/code&gt;. аналогично &lt;code&gt;fakedsplit&lt;/code&gt;, только в обратном порядке : фейк 2-й части, 2 часть, фейк 2-й части, фейк 1-й части, 1 часть, фейк 1 части.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Содержимое фейков в &lt;code&gt;fakedsplit&lt;/code&gt;/&lt;code&gt;fakeddisorder&lt;/code&gt; определяется параметром &lt;code&gt;--dpi-desync-fakedsplit-pattern&lt;/code&gt; (по умолчанию 0x00). Данные фейков берутся из паттерна со смещением, соответствующим смещению отсылаемых частей. Размеры фейков соответствуют длинам отсылаемых частей. Цель этих режимов - максимально усложнить выявление оригинальных данных среди фейков.&lt;/p&gt; 
&lt;p&gt;Использование &lt;code&gt;fakedsplit&lt;/code&gt; или &lt;code&gt;fakeddisorder&lt;/code&gt; на TLS kyber с md5sig fooling может привести к ошибкам &quot;message too long&quot;, если позиция сплита мала, поскольку будет превышение MTU из-за md5 tcp option.&lt;/p&gt; 
&lt;p&gt;Для определения позиций нарезки используются маркеры.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Абсолютный положительный маркер&lt;/strong&gt; - числовое смещение внутри пакета или группы пакетов от начала.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Абсолютный отрицательный маркер&lt;/strong&gt; - числовое смещение внутри пакета или группы пакетов от следующего за концом байта. -1 указывает на последний байт.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Относительный маркер&lt;/strong&gt; - положительное или отрицательное смещение относительно логической позиции внутри пакета или группы пакетов.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Относительные позиции :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; - начало метода HTTP (&#39;GET&#39;, &#39;POST&#39;, &#39;HEAD&#39;, ...). Метод обычно всегда находится на позиции 0, но может сместиться из-за &lt;code&gt;--methodeol&lt;/code&gt;. Тогда позиция может стать 1 или 2.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;host&lt;/strong&gt; - начало имени хоста в известном протоколе (http, TLS)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;endhost&lt;/strong&gt; - байт, следующий за последним байтом имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sld&lt;/strong&gt; - начало домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;endsld&lt;/strong&gt; - байт, следующий за последним байтом домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;midsld&lt;/strong&gt; - середина домена 2 уровня в имени хоста&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sniext&lt;/strong&gt; - начало поля данных SNI extension в TLS. Любой extension состоит из 2-байтовых полей type и length, за ними идет поле данных.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Пример списка маркеров : &lt;code&gt;100,midsld,sniext+1,endhost-2,-10&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;При разбиении пакета первым делом происходит ресолвинг маркеров - нахождение всех указанных относительных позиций и применение смещений. Если относительная позиция отсутствует в текущем протоколе, такие позиции не применяются и отбрасываются. Дальше происходит нормализация позиций относительно смещения текущего пакета в группе пакетов (многопакетные запросы TLS с kyber, например). Выкидываются все позиции, выходящие за пределы текущего пакета. Оставшиеся сортируются в порядке возрастания и удаляются дубли. В вариантах &lt;code&gt;multisplit&lt;/code&gt; и &lt;code&gt;multidisorder&lt;/code&gt; если не осталось ни одной позиции, разбиение не происходит.&lt;/p&gt; 
&lt;p&gt;Варианты &lt;code&gt;fakedsplit&lt;/code&gt; и &lt;code&gt;fakeddisorder&lt;/code&gt; применяют только одну позицию сплита. Ее поиск среди списка &lt;code&gt;--dpi-desync-split-pos&lt;/code&gt; осуществляется особым образом. Сначала сверяются все относительные маркеры. Если среди них найден подходящий, применяется он. В противном случае сверяются все абсолютные маркеры. Если и среди них ничего не найдено, применяется позиция 1.&lt;/p&gt; 
&lt;p&gt;Например, можно написать &lt;code&gt;--dpi-desync-split-pos=method+2,midsld,5&lt;/code&gt;. Если протокол http, разбиение будет на позиции &lt;code&gt;method+2&lt;/code&gt;. Если протокол TLS - на позиции &lt;code&gt;midsld&lt;/code&gt;. Если протокол неизвестен и включено &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;, разбиение будет на позиции 5. Чтобы все было однозначнее, можно использовать разные профили для разных протоколов и указывать только одну позицию, которая точно есть в этом протоколе.&lt;/p&gt; 
&lt;h3&gt;ПЕРЕКРЫТИЕ SEQUENCE NUMBERS&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;seqovl&lt;/code&gt; добавляет в начало одного из TCP сегментов &lt;code&gt;seqovl&lt;/code&gt; байт со смещенным в минус sequence number на величину &lt;code&gt;seqovl&lt;/code&gt;. Для &lt;code&gt;split&lt;/code&gt; - в начало первого сегмента, для &lt;code&gt;disorder&lt;/code&gt; - в начало предпоследнего отсылаемого сегмента (второго в оригинальном порядке следования).&lt;/p&gt; 
&lt;p&gt;В случае &lt;code&gt;split&lt;/code&gt; расчет идет на то, что предыдущий отсыл, если он был, уже попал в сокет серверного приложения, поэтому новая пришедшая часть лишь частично находится в пределах текущего окна (in-window). Спереди фейковая часть отбрасывается, а оставшаяся часть содержит оригинал и начинается с начала window, поэтому попадает в сокет. Серверное приложение получает все, что реально отсылает клиент, отбрасывая фейковую out-of-window часть. Но DPI не может этого понять, поэтому у него происходит sequence десинхронизация. Обязательно, чтобы первый сегмент вместе с &lt;code&gt;seqovl&lt;/code&gt; не превысили длину MTU. Эта ситуация распознается автоматически в Linux, и &lt;code&gt;seqovl&lt;/code&gt; отменяется. В остальных системах ситуация не распознается, и это приведет к поломке соединения. Поэтому выбирайте первую позицию сплита и &lt;code&gt;seqovl&lt;/code&gt; таким образом, чтобы MTU не был превышен в любом случае. Иначе дурение может не работать или работать хаотично.&lt;/p&gt; 
&lt;p&gt;Для &lt;code&gt;disorder&lt;/code&gt; overlap идет на предпоследнюю отсылаемую часть пакета. Для простоты будем считать, что разбиение идет на 2 части, шлются они в порядке &quot;2 1&quot; при оригинальном порядке &quot;1 2&quot;. Обязательно, чтобы &lt;code&gt;seqovl&lt;/code&gt; был меньше позиции первого сплита, иначе все отосланное будет передано в сокет сразу же, включая фейк, ломая протокол прикладного уровня. Такая ситуация легко обнаруживается программой, и &lt;code&gt;seqovl&lt;/code&gt; отменяется. Увеличение размера пакета невозможно в принципе. При соблюдении условия 2-я часть пакета является полностью in-window, поэтому серверная ОС принимает ее целиком, включая фейк. Но поскольку начальная часть данных из 1 пакета еще не принята, то фейк и реальные данные остаются в памяти ядра, не отправляясь в серверное приложение. Как только приходит 1-я часть пакета, она переписывает фейковую часть в памяти ядра. Ядро получает данные из 1 и 2 части, поэтому далее идет отправка в сокет приложения. Таково поведение всех unix ОС, кроме solaris - оставлять последние принятые данные. Windows оставляет старые данные, поэтому disorder с seqovl будет приводить к зависаниям соединения при работе с Windows серверами. Solaris практически мертв, windows серверов очень немного. Можно использовать листы при необходимости. Метод позволяет обойтись без fooling и TTL. Фейки перемешаны с реальным данными. &lt;code&gt;fakedsplit/fakeddisorder&lt;/code&gt; по-прежнему добавляют дополнительные отдельные фейки.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;seqovl&lt;/code&gt; в варианте &lt;code&gt;split&lt;/code&gt; может быть только абсолютным положительным значением, поскольку применяется только в первому пакету. В варианте &lt;code&gt;disorder&lt;/code&gt; допустимо применение всех вариантов маркеров. Они автоматически нормализуются к текущему пакету в серии. Можно сплитать на &lt;code&gt;midsld&lt;/code&gt; и делать seqovl на &lt;code&gt;midsld-1&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;СПЕЦИФИЧЕСКИЕ РЕЖИМЫ IPV6&lt;/h3&gt; 
&lt;p&gt;Режимы десинхронизации &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt; и &lt;code&gt;ipfrag1&lt;/code&gt; (не путать с fooling !) относятся только к ipv6 и заключается в добавлении хедера &lt;code&gt;hop-by-hop options&lt;/code&gt;, &lt;code&gt;destination options&lt;/code&gt; или &lt;code&gt;fragment&lt;/code&gt; во все пакеты, попадающие под десинхронизацию. Здесь надо обязательно понимать, что добавление хедера увеличивает размер пакета, потому не может быть применено к пакетам максимального размера. Это имеет место при передаче больших сообщений. В случае невозможности отослать пакет дурение будет отменено, пакет будет выслан в оригинале. Расчет идет на то, что DPI увидит 0 в поле next header основного заголовка &lt;code&gt;ipv6&lt;/code&gt; и не будет скакать по extension хедерам в поисках транспортного хедера. Таким образом не поймет, что это tcp или udp, и пропустит пакет без анализа. Возможно, какие-то DPI на это купятся. Может сочетаться с любыми режимами 2-й фазы, кроме варианта &lt;code&gt;ipfrag1+ipfrag2&lt;/code&gt;. Например, &lt;code&gt;hopbyhop,multisplit&lt;/code&gt; означает разбить tcp пакет на несколько сегментов, в каждый из них добавить hop-by-hop. При &lt;code&gt;hopbyhop,ipfrag2&lt;/code&gt; последовательность хедеров будет : &lt;code&gt;ipv6,hop-by-hop&lt;/code&gt;,&lt;code&gt;fragment&lt;/code&gt;,&lt;code&gt;tcp/udp&lt;/code&gt;. Режим &lt;code&gt;ipfrag1&lt;/code&gt; может срабатывать не всегда без специальной подготовки. См. раздел &lt;code&gt;IP фрагментация&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;МОДИФИКАЦИЯ ОРИГИНАЛА&lt;/h3&gt; 
&lt;p&gt;Параметры &lt;code&gt;--orig-ttl&lt;/code&gt; и &lt;code&gt;--orig-ttl6&lt;/code&gt; позволяют изменить TTL оригинальных пакетов. Если дальнейшие манипуляции связаны с оригиналом, например, идет TCP сегментация, то исходными данными являются измененные оригинальные пакеты. То есть в данном примере TCP сегменты пойдут с измененным TTL.&lt;/p&gt; 
&lt;p&gt;Вариант &lt;code&gt;--orig-autottl&lt;/code&gt; и &lt;code&gt;--orig-autottl6&lt;/code&gt; работает аналогично &lt;code&gt;dpi-desync-autottl&lt;/code&gt;, но по оригинальным пакетам. Дельту стоит указывать положительную с унарным знаком &lt;code&gt;+&lt;/code&gt;, иначе оригинал не дойдет до сервера, и вы вообще ничего не получите. Пример : &lt;code&gt;--orig-autottl=+5:3-64&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--orig-mod-start&lt;/code&gt; и &lt;code&gt;--orig-mod-cutoff&lt;/code&gt; задают ограничитель по началу и концу модификации оригинала. Схема аналогична &lt;code&gt;--dpi-desync-start&lt;/code&gt; и &lt;code&gt;--dpi-desync-cutoff&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Функция может быть полезна, когда DPI охотится за фейками и блокирует соединение при наличии подозрительных признаков, в частности, измененный TTL у фейка относительно оригинала.&lt;/p&gt; 
&lt;h3&gt;ДУБЛИКАТЫ&lt;/h3&gt; 
&lt;p&gt;Дубликаты - это копии оригинальных пакетов, высылаемые перед ними. Включаются параметром &lt;code&gt;--dup=N&lt;/code&gt;, где N - количество дублей, не включающее оригинал. &lt;code&gt;--dup-replace&lt;/code&gt; отключает отсылку оригинала.&lt;/p&gt; 
&lt;p&gt;Отсылка дублей имеет место только в тех случаях, когда высылается и оригинал без реконструкции. Например, если случилась TCP сегментация, то оригинал фактически дропается и заменяется искусственно сконструированными сегментами. Дубли высланы не будут. Это же касается изменения состава хедеров ipv6, режима tamper для DHT и других.&lt;/p&gt; 
&lt;p&gt;Возможно применение всех вариантов дурения, как и для desync : &lt;code&gt;--dup-ttl&lt;/code&gt;. &lt;code&gt;--dup-ttl6&lt;/code&gt;, &lt;code&gt;--dup-fooling&lt;/code&gt;. Нужно ли, чтобы эти пакеты доходили до сервера и в каком виде, решаете вы согласно задуманной стратегии.&lt;/p&gt; 
&lt;p&gt;Вариант &lt;code&gt;--dup-autottl&lt;/code&gt; и &lt;code&gt;--dup-autottl6&lt;/code&gt; работает аналогично &lt;code&gt;dpi-desync-autottl&lt;/code&gt;, но по дублям. Дельту можно указывать положительную с унарным знаком &lt;code&gt;+&lt;/code&gt;, а можно и отрицательную. Зависит от вашей задумки. Пример : &lt;code&gt;--dup-autottl=-2:3-64&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--dup-start&lt;/code&gt; и &lt;code&gt;--dup-cutoff&lt;/code&gt; задают ограничитель по началу и концу применения стратегии дубликатов. Схема аналогична &lt;code&gt;--dpi-desync-start&lt;/code&gt; и &lt;code&gt;--dpi-desync-cutoff&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Функция может помочь, когда DPI сечет разницу в характеристиках фейков и оригинала. Дубликатами можно попытаться заставить DPI принять , что весь сеанс идет аномальным. Например, у нас имеется TCP сеанс с MD5 сразу с первого SYN пакета. Значит последующие MD5 будут восприниматься нормально.&lt;/p&gt; 
&lt;h3&gt;КОМБИНИРОВАНИЕ МЕТОДОВ ДЕСИНХРОНИЗАЦИИ&lt;/h3&gt; 
&lt;p&gt;В параметре dpi-desync можно указать до 3 режимов через запятую.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0 фаза - предполагает работу на этапе установления соединения : &lt;code&gt;synack&lt;/code&gt;, &lt;code&gt;syndata&lt;/code&gt;, &lt;code&gt;--wsize&lt;/code&gt;, &lt;code&gt;--wssize&lt;/code&gt;. На эту фазу не действуют фильтры по &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8&quot;&gt;hostlist&lt;/a&gt;, кроме случая, описанного &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D1%8D%D1%88-ip&quot;&gt;далее&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;1 фаза - отсылка чего-либо до оригинального пакета данных : &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;rst&lt;/code&gt;, &lt;code&gt;rstack&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;2 фаза - отсылка в модифицированном виде оригинального пакета данных (например, &lt;code&gt;fakedsplit&lt;/code&gt; или &lt;code&gt;ipfrag2&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Режимы требуют указания в порядке возрастания номеров фаз.&lt;/p&gt; 
&lt;h3&gt;КЭШ IP&lt;/h3&gt; 
&lt;p&gt;ipcache представляет собой структуру в памяти процесса, позволяющую по ключу IP адреса и имени интерфейса запоминать некоторую информацию, которую впоследствии можно извлечь и использовать как недостающие данные. На текущий момент это применяются в следующих ситуациях :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;IP,interface =&amp;gt; hop count . Кэшируется количество хопов до сервера для последующего применения в autottl прямо с первого пакета, когда еще ответа не было. Пока записи в кэше нет, autottl не будет применен сразу. При повторном запросе до истечения времени жизни записи autottl будет применение сразу.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;IP =&amp;gt; hostname . Кэшируется имя хоста, вне привязки к интерфейсу, для последующего применения в стратегиях нулевой фазы. Режим отключен по умолчанию и включается через параметры &lt;code&gt;ipcache-hostname&lt;/code&gt;. Данная техника является экспериментальной. Ее проблема в том, что как такового нет однозначного соответствия между доменом и IP. Множество доменов могут ссылаться на тот же IP адрес. При коллизии происходит замещение имени хоста на последний вариант. Домен может скакать по разным IP на CDN. Сейчас один адрес, через час - другой. Эта проблема решается через время жизни записей кэша : &lt;code&gt;--ipcache-lifetime&lt;/code&gt;. По умолчанию 2 часа. Однако, может случиться и так, что в вашем случае применение техники несет больше пользы, чем проблем. Будьте готовы к непонятному на первый взгляд поведению, которое может быть исследовано только через &lt;code&gt;--debug&lt;/code&gt; лог.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;При подаче сигнала SIGUSR2 процесс выводит содержимое ipcache на консоль.&lt;/p&gt; 
&lt;h3&gt;РЕАКЦИЯ DPI НА ОТВЕТ СЕРВЕРА&lt;/h3&gt; 
&lt;p&gt;Есть DPI, которые анализируют ответы от сервера, в частности сертификат из ServerHello, где прописаны домены. Подтверждением доставки ClientHello является ACK пакет от сервера с номером ACK sequence, соответствующим длине ClientHello+1. В варианте disorder обычно приходит сперва частичное подтверждение (SACK), потом полный ACK. Если вместо ACK или SACK идет RST пакет с минимальной задержкой, то DPI вас отсекает еще на этапе вашего запроса. Если RST идет после полного ACK спустя задержку, равную примерно пингу до сервера, тогда вероятно DPI реагирует на ответ сервера. DPI может отстать от потока, если ClientHello его удовлетворил и не проверять ServerHello. Тогда вам повезло. Вариант fake может сработать. Если же он не отстает и упорно проверяет ServerHello, то можно попробовать заставить сервер высылать ServerHello частями через параметр --wssize (см. conntrack). Если и это не помогает, то сделать с этим что-либо вряд ли возможно без помощи со стороны сервера. Лучшее решение - включить на сервере поддержку TLS 1.3. В нем сертификат сервера передается в зашифрованном виде. Это рекомендация ко всем админам блокируемых сайтов. Включайте TLS 1.3. Так вы дадите больше возможностей преодолеть DPI.&lt;/p&gt; 
&lt;h3&gt;РЕЖИМ SYNACK&lt;/h3&gt; 
&lt;p&gt;В документации по geneva это называется &quot;TCB turnaround&quot;. Попытка ввести DPI в заблуждение относительно ролей клиента и сервера.&lt;/p&gt; 
&lt;p&gt;Поскольку режим нарушает работу NAT, техника может сработать только если между атакующим устройством и DPI нет NAT. Атака не сработает через NAT роутер, но может сработать с него. Для реализации атаки на проходящий трафик требуются nftables и схема &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#nftables-%D0%B4%D0%BB%D1%8F-nfqws&quot;&gt;POSTNAT&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;РЕЖИМ SYNDATA&lt;/h3&gt; 
&lt;p&gt;Тут все просто. Добавляются данные в пакет SYN. Все ОС их игнорируют, если не используется TCP fast open (TFO), а DPI может воспринять, не разобравшись есть там TFO или нет. Оригинальные соединения с TFO не трогаются, поскольку это их точно сломает. Без уточняющего параметра добавляются 16 нулевых байтов.&lt;/p&gt; 
&lt;h3&gt;ВИРТУАЛЬНЫЕ МАШИНЫ&lt;/h3&gt; 
&lt;p&gt;Изнутри VM от virtualbox и vmware в режиме NAT не работают многие техники пакетной магии nfqws. Принудительно заменяется ttl, не проходят фейк пакеты. Необходимо настроить сеть в режиме bridge.&lt;/p&gt; 
&lt;h3&gt;CONNTRACK&lt;/h3&gt; 
&lt;p&gt;nfqws оснащен ограниченной реализацией слежения за состоянием tcp соединений (conntrack). Он включается для реализации некоторых методов противодействия DPI. conntrack способен следить за фазой соединения : SYN,ESTABLISHED,FIN, количеством пакетов в каждую сторону, sequence numbers. conntrack способен &quot;кормиться&quot; пакетами в обе или только в одну сторону. Соединение попадает в таблицу при обнаружении пакетов с выставленными флагами SYN или SYN,ACK. Поэтому если необходим conntrack, в правилах перенаправления iptables соединение должно идти на nfqws с самого первого пакета, хотя затем может обрываться по фильтру connbytes. Для UDP инициатором попадания в таблицу является первый UDP пакет. Он же и определяет направление потока. Считается, что первый UDP пакет исходит от клиента к серверу. Далее все пакеты с совпадающими &lt;code&gt;src_ip,src_port,dst_ip,dst_port&lt;/code&gt; считаются принадлежащими этому потоку до истечения времени неактивности. conntrack - простенький, он не писался с учетом всевозможных атак на соединение, он не проверяет пакеты на валидность sequence numbers или чексумму. Его задача - лишь обслуживание нужд nfqws, он обычно кормится только исходящим трафиком, потому нечувствителен к подменам со стороны внешней сети. Соединение удаляется из таблицы, как только отпадает нужда в слежении за ним или по таймауту неактивности. Существуют отдельные таймауты на каждую фазу соединения. Они могут быть изменены параметром &lt;code&gt;--ctrack-timeouts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--wssize&lt;/code&gt; позволяет изменить с клиента размер tcp window для сервера, чтобы он послал следующие ответы разбитыми на части. Чтобы это подействовало на все серверные ОС, необходимо менять window size в каждом исходящем с клиента пакете до отсылки сообщения, ответ на которое должен быть разбит (например, TLS ClientHello). Именно поэтому и необходим conntrack, чтобы знать когда надо остановиться. Если не остановиться и все время устанавливать низкий wssize, скорость упадет катастрофически. В linux это может быть купировано через connbytes, но в BSD системах такой возможности нет. В случае http(s) останавливаемся сразу после отсылки первого http запроса или TLS ClientHello. Если вы имеете дело с не http(s), то вам потребуется параметр &lt;code&gt;--wssize-cutoff&lt;/code&gt;. Он устанавливает предел, с которого действие wssize прекращается. Префикс d перед номером означает учитывать только пакеты с data payload, префикс s - relative sequence number, проще говоря количество переданных клиентом байтов + 1. Если проскочит пакет с http request или TLS ClientHello, действие wssize прекращается сразу же, не дожидаясь wssize-cutoff. Если ваш протокол склонен к долгому бездействию, следует увеличить таймаут фазы ESTABLISHED через параметр &lt;code&gt;--ctrack-timeouts&lt;/code&gt;. Таймаут по умолчанию низкий - всего 5 минут. Не забывайте, что nfqws кормится приходящими на него пакетами. Если вы ограничили поступление пакетов через connbytes, то в таблице могут остаться повисшие соединения в фазе ESTABLISHED, которые отвалятся только по таймауту. Для диагностики состояния conntrack пошлите сигнал SIGUSR1 процессу nfqws : &lt;code&gt;killall -SIGUSR1 nfqws&lt;/code&gt;. Текущая таблица будет выведена nfqws в stdout.&lt;/p&gt; 
&lt;p&gt;Обычно в SYN пакете клиент отсылает кроме window size еще и TCP extension &lt;code&gt;scaling factor&lt;/code&gt;. &lt;strong&gt;scaling factor&lt;/strong&gt; представляет из себя степень двойки, на которую умножается window size : 0=&amp;gt;1, 1=&amp;gt;2, 2=&amp;gt;4, ..., 8=&amp;gt;256, ... В параметре wssize scaling factor указывается через двоеточие. Scaling factor может только снижаться, увеличение заблокировано, чтобы не допустить превышение размера окна со стороны сервера. Для принуждения сервера к фрагментации ServerHello, чтобы избежать просекание имени сервера из сертификата сервера на DPI, лучше всего использовать &lt;code&gt;--wssize=1:6&lt;/code&gt;. Основное правило - делать &lt;code&gt;scale_factor&lt;/code&gt; как можно больше, чтобы после восстановления window size итоговый размер окна стал максимально возможным. Если вы сделаете 64:0, будет очень медленно. С другой стороны нельзя допустить, чтобы ответ сервера стал достаточно большим, чтобы DPI нашел там искомое.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--wssize&lt;/code&gt; не работает в профилях с хостлистами, поскольку он действует с самого начала соединения, когда еще нельзя принять решение о попадании в лист. Однако, профиль с auto hostlist может содержать --wssize. &lt;code&gt;--wssize&lt;/code&gt; может замедлять скорость и/или увеличивать время ответа сайтов, поэтому если есть другие работающие способы обхода DPI, лучше применять их.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--dpi-desync-cutoff&lt;/code&gt; позволяет задать предел, при достижении которого прекращается применение dpi-desync. Доступны префиксы n,d,s по аналогии с &lt;code&gt;--wssize-cutoff&lt;/code&gt;. Полезно совместно с &lt;code&gt;--dpi-desync-any-protocol=1&lt;/code&gt;. На склонных к бездействию соединениях следует изменить таймауты conntrack. Если соединение выпало из conntrack и задана опция &lt;code&gt;--dpi-desync-cutoff&lt;/code&gt;, &lt;code&gt;dpi desync&lt;/code&gt; применяться не будет.&lt;/p&gt; 
&lt;h3&gt;РЕАССЕМБЛИНГ&lt;/h3&gt; 
&lt;p&gt;nfqws поддерживает реассемблинг некоторых видов запросов. На текущий момент это TLS и QUIC ClientHello. Они бывают длинными, если в chrome включить пост-квантовую криптографию tls-kyber, и занимают, как правило, 2 или 3 пакета. kyber включен по умолчанию, начиная с chromium 124. chrome рандомизирует фингерпринт TLS. SNI может оказаться как в начале, так и в конце, то есть попасть в любой пакет. stateful DPI обычно реассемблирует запрос целиком, и только потом принимает решение о блокировке. В случае получения TLS или QUIC пакета с частичным ClientHello начинается процесс сборки, а пакеты задерживаются и не отсылаются до ее окончания. По окончании сборки пакеты проходит через десинхронизацию на основании полностью собранного ClientHello. При любой ошибке в процессе сборки задержанные пакеты немедленно отсылаются в сеть, а десинхронизация отменяется.&lt;/p&gt; 
&lt;p&gt;Есть специальная поддержка всех вариантов tcp сплита для многосегментного TLS. Если указать позицию сплита больше длины первого пакета, то разбивка происходит не обязательно первого пакета, а того, на который пришлась итоговая позиция. Если, допустим, клиент послал TLS ClientHello длиной 2000, SNI начинается с 1700, и заданы опции &lt;code&gt;fake,multisplit&lt;/code&gt;, то перед первым пакетом идет fake, затем первый пакет в оригинале, а последний пакет разбивается на 2 сегмента. В итоге имеем фейк в начале и 3 реальных сегмента.&lt;/p&gt; 
&lt;h3&gt;ПОДДЕРЖКА UDP&lt;/h3&gt; 
&lt;p&gt;Атаки на udp более ограничены в возможностях. udp нельзя фрагментировать иначе, чем на уровне ip.&lt;/p&gt; 
&lt;p&gt;Для UDP действуют только режимы десинхронизации &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;fakeknown&lt;/code&gt;, &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt;, &lt;code&gt;ipfrag1&lt;/code&gt;, &lt;code&gt;ipfrag2&lt;/code&gt;, &lt;code&gt;udplen&lt;/code&gt;, &lt;code&gt;tamper&lt;/code&gt;. Режимами первой фазы являются &lt;code&gt;fake&lt;/code&gt;, &lt;code&gt;fakeknown&lt;/code&gt;, &lt;code&gt;hopbyhop&lt;/code&gt;, &lt;code&gt;destopt&lt;/code&gt;, &lt;code&gt;ipfrag1&lt;/code&gt;. Второй фазы - &lt;code&gt;ipfrag2&lt;/code&gt;, &lt;code&gt;udplen&lt;/code&gt;, &lt;code&gt;tamper&lt;/code&gt;. Как обычно, возможно сочетание режимов первой и второй фазы, но не двух режимов одной фазы.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;udplen&lt;/code&gt; увеличивает размер udp пакета на указанное в &lt;code&gt;--dpi-desync-udplen-increment&lt;/code&gt; количество байтов. Паддинг заполняется нулями по умолчанию, но можно задать свой паттерн. Предназначено для обмана DPI, ориентирующегося на размеры пакетов. Может сработать, если пользовательский протокол не привязан жестко к размеру udp пейлоада. Режим tamper означает модификацию пакетов известных протоколов особенным для протокола образом. На текущий момент работает только с DHT. Поддерживается определение пакетов QUIC Initial с расшифровкой содержимого и имени хоста, то есть параметр &lt;code&gt;--hostlist&lt;/code&gt; будет работать. Определяются пакеты wireguard handshake initiation, DHT (начинается с &#39;d1&#39;, кончается &#39;e&#39;), STUN и &lt;a href=&quot;https://discord.com/developers/docs/topics/voice-connections#ip-discovery&quot;&gt;Discord Voice IP Discovery&lt;/a&gt;. Для десинхронизации других протоколов обязательно указывать &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt;. Реализован conntrack для udp. Можно пользоваться --dpi-desync-cutoff. Таймаут conntrack для udp можно изменить 4-м параметром в &lt;code&gt;--ctrack-timeouts&lt;/code&gt;. Атака fake полезна только для stateful DPI, она бесполезна для анализа на уровне отдельных пакетов. По умолчанию fake наполнение - 64 нуля. Можно указать файл в &lt;code&gt;--dpi-desync-fake-unknown-udp&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;IP ФРАГМЕНТАЦИЯ&lt;/h3&gt; 
&lt;p&gt;Современная сеть практически не пропускает фрагментированные tcp на уровне ip. На udp с этим дело получше, поскольку некоторые udp протоколы могут опираться на этот механизм (IKE старых версий). Однако, кое-где бывает, что режут и фрагментированный udp. Роутеры на базе linux могут самопроизвольно собирать или перефрагментировать пакеты. Позиция фрагментации задается отдельно для tcp и udp. По умолчанию 24 и 8 соответственно, должна быть кратна 8. Смещение считается с транспортного заголовка.&lt;/p&gt; 
&lt;p&gt;Существует ряд моментов вокруг работы с фрагментами на Linux, без понимания которых может ничего не получиться.&lt;/p&gt; 
&lt;p&gt;ipv4 : Linux дает отсылать ipv4 фрагменты, но стандартные настройки iptables в цепочке OUTPUT могут вызывать ошибки отправки.&lt;/p&gt; 
&lt;p&gt;ipv6 : Нет способа для приложения гарантированно отослать фрагменты без дефрагментации в conntrack. На разных системах получается по-разному. Где-то нормально уходят, где-то пакеты дефрагментируются. Для ядер &amp;lt;4.16 похоже, что нет иного способа решить эту проблему, кроме как выгрузить модуль &lt;code&gt;nf_conntrack&lt;/code&gt;, который подтягивает зависимость &lt;code&gt;nf_defrag_ipv6&lt;/code&gt;. Он то как раз и выполняет дефрагментацию. Для ядер 4.16+ ситуация чуть лучше. Из дефрагментации исключаются пакеты в состоянии NOTRACK. Чтобы не загромождать описание, смотрите пример решения этой проблемы в &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Иногда требуется подгружать модуль &lt;code&gt;ip6table_raw&lt;/code&gt; с параметром &lt;code&gt;raw_before_defrag=1&lt;/code&gt;. В OpenWrt параметры модулей указываются через пробел после их названий в файлах &lt;code&gt;/etc/modules.d&lt;/code&gt;. В традиционных системах посмотрите используется ли &lt;code&gt;iptables-legacy&lt;/code&gt; или &lt;code&gt;iptables-nft&lt;/code&gt;. Если legacy, то нужно создать файл &lt;code&gt;/etc/modprobe.d/ip6table_raw.conf&lt;/code&gt; с содержимым :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;options ip6table_raw raw_before_defrag=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В некоторых традиционных дистрибутивах можно изменить текущий ip6tables через : update-alternatives --config ip6tables Если вы хотите оставаться на iptables-nft, вам придется пересобрать патченную версию. Патч совсем небольшой. В &lt;code&gt;nft.c&lt;/code&gt; найдите фрагмент:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;        {
            .name	= &quot;PREROUTING&quot;,
            .type	= &quot;filter&quot;,
            .prio	= -300,	/* NF_IP_PRI_RAW */
            .hook	= NF_INET_PRE_ROUTING,
        },
        {
            .name	= &quot;OUTPUT&quot;,
            .type	= &quot;filter&quot;,
            .prio	= -300,	/* NF_IP_PRI_RAW */
            .hook	= NF_INET_LOCAL_OUT,
        },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;и замените везде -300 на -450.&lt;/p&gt; 
&lt;p&gt;Это нужно сделать вручную, никакой автоматики в &lt;code&gt;blockcheck.sh&lt;/code&gt; нет.&lt;/p&gt; 
&lt;p&gt;Либо можно раз и навсегда избавиться от этой проблемы, используя &lt;code&gt;nftables&lt;/code&gt;. Там можно создать &lt;code&gt;netfilter hook&lt;/code&gt; с любым приоритетом. Используйте приоритет -401 и ниже.&lt;/p&gt; 
&lt;p&gt;При использовании iptables и NAT, похоже, что нет способа прицепить обработчик очереди после NAT. Пакет попадает в nfqws с source адресом внутренней сети, затем фрагментируется и уже не обрабатывается NAT. Так и уходит во внешнюю сеть с src ip 192.168.x.x. Следовательно, метод не срабатывает. Видимо единственный рабочий метод - отказаться от iptables и использовать nftables. Хук должен быть с приоритетом 101 или выше.&lt;/p&gt; 
&lt;h3&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; способен по-разному реагировать на различные запросы и применять разные стратегии дурения. Это реализовано посредством поддержки множества профилей дурения. Профили разделяются в командной строке параметром &lt;code&gt;--new&lt;/code&gt;. Первый профиль создается автоматически. Для него не нужно &lt;code&gt;--new&lt;/code&gt;. Каждый профиль имеет фильтр. По умолчанию он пуст, то есть профиль удовлетворяет любым условиям. Фильтр может содержать жесткие параметры: версия ip протокола, ipset и порты tcp/udp. Они всегда однозначно идентифицируются даже на нулевой фазе десинхронизации, когда еще хост и L7 неизвестны. В качестве мягкого фильтра могут выступать хост-листы и протокол прикладного уровня (l7). L7 протокол становится известен обычно после первого пакета с данными. При поступлении запроса идет проверка профилей в порядке от первого до последнего до достижения первого совпадения с фильтром. Жесткие параметры фильтра сверяются первыми. При несовпадении идет сразу же переход к следующему профилю. Если какой-то профиль удовлетворяет жесткому фильтру и L7 фильтру и содержит авто-хостлист, он выбирается сразу. Если профиль удовлетворяет жесткому фильтру и L7 фильтру, для него задан хостлист, и у нас еще нет имени хоста, идет переход к следующему профилю. В противном случае идет проверка по хостлистам этого профиля. Если имя хоста удовлетворяет листам, выбирается этот профиль. Иначе идет переход к следующему. Может так случиться, что до получения имени хоста или узнавания L7 протокола соединение идет по одному профилю, а при выяснении этих параметров профиль меняется на лету. Это может произойти даже дважды - при выяснении L7 и имени хоста. Чаще всего это выяснение совмещается в одно действие, поскольку по одному пакету, как правило, узнается и L7, и хост. Поэтому если у вас есть параметры дурения нулевой фазы, тщательно продумывайте что может произойти при переключении стратегии. Смотрите debug log, чтобы лучше понять что делает nfqws. Нумерация профилей идет с 1 до N. Последним в цепочке создается пустой профиль с номером 0. Он используется, когда никакие условия фильтров не совпали.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Множественные стратегии создавались только для случаев, когда невозможно обьединить имеющиеся стратегии для разных ресурсов. Копирование стратегий из blockcheck для разных сайтов во множество профилей без понимания как они работают приведет к нагромождению параметров, которые все равно не покроют все возможные заблокированные ресурсы. Вы только увязните в этой каше.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] user-mode реализация ipset создавалась не как удобная замена *nix версии, реализованной в ядре. Вариант в ядре работает гораздо эффективнее. Это создавалось для систем без подд3ержки ipset в ядре. Конкретно - Windows и ядра Linux, собранные без nftables и ipset модулей ядра. Например, в android нет ipset.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;ФИЛЬТРАЦИЯ ПО WIFI&lt;/h3&gt; 
&lt;p&gt;Имя wifi сети никак не связано с сетевым интерфейсом адаптера wifi. Интерфейс один, подключиться можно к любой сети. Для разных сетей разные стратегии. Стратегия от сети A не работает или ломает сеть B. Что делать ?&lt;/p&gt; 
&lt;p&gt;Можно вручную запускать и снимать инстансы nfqws. Но можно поступить иначе. В windows версии winws есть глобальный фильтр &lt;code&gt;--ssid-filter&lt;/code&gt;. Он включает или отключает инстанс winws в зависимости от подключенности любого адаптера к конкретной wifi сети. При этом не учитывается маршрутизация. Такой подход возможен потому, что к windivert можно прицепить несколько инстансов winws на пересекающихся фильтрах. При смене wifi сети одни будут включаться, другие выключаться.&lt;/p&gt; 
&lt;p&gt;Для linux применяется иное решение. Фильтр &lt;code&gt;--filter-ssid&lt;/code&gt; относится к конкретному профилю. Невозможно повесить несколько инстансов nfqws на одну и ту же очередь или направить один и тот же трафик на несколько очередей. Подключение и отключение от очереди разных инстансов сопряжено со сложностями синхронизации между ними. Поэтому обрабатывать трафик должен один инстанс, и он должен уметь работать с разными wifi сетями. Это и реализовано в параметре &lt;code&gt;--filter-ssid&lt;/code&gt;. Он берет список имен wifi сетей (SSID) через запятую аналогично &lt;code&gt;--ssid-filter&lt;/code&gt; для winws. При выборе профиля имеет значение куда идет конкретный обрабатываемый пакет. На какой интерфейс. Или с какого интерфейса пакет пришел, если он считается входящим. Поэтому даже если у вас часть трафика идет на одну сеть, часть на другую, а часть вообще не идет по wifi, то все это можно настроить.&lt;/p&gt; 
&lt;p&gt;Информация о подключенных сетях берется способом, используемым командой &lt;code&gt;iw dev &amp;lt;ifname&amp;gt; info&lt;/code&gt; (nl80211). К сожалению, на ядрах с 5.19 до самых последних (6.14 не работает) этот способ сломан. В этом случае используется способ iwgetid (wireless extensions). wireless extensions считаются deprecated и на новых ядрах реализованы как прослойка совместимости. Некоторые ядра могут быть собраны без wireless extensions. Перед использованием &lt;code&gt;--filter-ssid&lt;/code&gt; удостоверьтесь, что любая из этих команд возвращает SSID.&lt;/p&gt; 
&lt;p&gt;Сканируются все wifi интерфейсы, составляется список interface-&amp;gt;SSID. Он обновляется по мере поступления пакетов, но не чаще 1 раза в секунду.&lt;/p&gt; 
&lt;h3&gt;IPTABLES ДЛЯ NFQWS&lt;/h3&gt; 
&lt;p&gt;iptables для задействования атаки на первые пакеты данных в tcp соединении :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp -m multiport --dports 80,443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Этот вариант применяем, когда DPI не следит за всеми запросами http внутри keep-alive сессии. Если следит, направляем только первый пакет от https и все пакеты от http :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;mark нужен, чтобы сгенерированный поддельный пакет не попал опять к нам на обработку. nfqws выставляет fwmark при его отсылке. Хотя nfqws способен самостоятельно различать помеченные пакеты, фильтр в iptables по mark нужен при использовании connbytes, чтобы не допустить изменения порядка следования пакетов. Процессинг очереди - процесс отложенный. Если ядро имеет пакеты на отсылку вне очереди - оно их отправляет незамедлительно. Изменение правильного порядка следования пакетов при десинхронизации ломает всю идею. Так же были замечены дедлоки при достаточно большой отсылке пакетов из nfqws и отсутствии mark фильтра. Процесс может зависнуть. Поэтому наличие фильтра по mark в ip/nf tables можно считать обязательным.&lt;/p&gt; 
&lt;p&gt;Почему &lt;code&gt;--connbytes 1:6&lt;/code&gt; :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1 - для работы методов десинхронизации 0-й фазы и корректной работы conntrack&lt;/li&gt; 
 &lt;li&gt;2 - иногда данные идут в 3-м пакете 3-way handshake&lt;/li&gt; 
 &lt;li&gt;3 - стандартная ситуация приема одного пакета запроса&lt;/li&gt; 
 &lt;li&gt;4-6 - на случай ретрансмиссии или запроса длиной в несколько пакетов (TLSClientHello с kyber, например)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Для режима autottl необходимо перенаправление входящего &lt;code&gt;SYN,ACK&lt;/code&gt; пакета или первого пакета соединения (что обычно есть то же самое). Для режима autohostlist необходимы входящие RST и http redirect. Можно построить фильтр на tcp flags для выделения &lt;code&gt;SYN,ACK&lt;/code&gt; и модуле u32 для поиска характерных паттернов http redirect, но проще использовать connbytes для выделения нескольких начальных входящих пакетов.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;iptables -t mangle -I PREROUTING -i &amp;lt;внешний интерфейс&amp;gt; -p tcp -m multiport --sports 80,443 -m connbytes --connbytes-dir=reply --connbytes-mode=packets --connbytes 1:3 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Для quic :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p udp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;6 пакетов берется, чтобы покрыть случаи возможных ретрансмиссий quic initial в случае плохой связи или если сервер плохо себя чувствует, а приложение настаивает именно на quic, не переходя на tcp. А так же для работы autohostlist по quic. Однако, autohostlist для quic не рекомендуется.&lt;/p&gt; 
&lt;h3&gt;NFTABLES ДЛЯ NFQWS&lt;/h3&gt; 
&lt;p&gt;Можно начать с базовой конфигурации.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan

nft create table inet ztest

nft add chain inet ztest post &quot;{type filter hook postrouting priority mangle;}&quot;
nft add rule inet ztest post oifname $IFACE_WAN meta mark and 0x40000000 == 0 tcp dport &quot;{80,443}&quot; ct original packets 1-6 queue num 200 bypass
nft add rule inet ztest post oifname $IFACE_WAN meta mark and 0x40000000 == 0 udp dport 443 ct original packets 1-6 queue num 200 bypass

# auto hostlist with avoiding wrong ACK numbers in RST,ACK packets sent by russian DPI
sysctl net.netfilter.nf_conntrack_tcp_be_liberal=1 
nft add chain inet ztest pre &quot;{type filter hook prerouting priority filter;}&quot;
nft add rule inet ztest pre iifname $IFACE_WAN tcp sport &quot;{80,443}&quot; ct reply packets 1-3 queue num 200 bypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Для задействования IP фрагментации и &lt;code&gt;datanoack&lt;/code&gt; на проходящие пакеты требуется особая конфигурация цепочек, перенаправляющая пакеты после NAT. В скриптах zapret эта схема называется &lt;code&gt;POSTNAT&lt;/code&gt;, и она возможна только на nftables. Сгенерированные nfqws пакеты требуется на раннем этапе помечать как &lt;strong&gt;notrack&lt;/strong&gt;, чтобы они не были испорчены NAT.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan

nft create table inet ztest

nft add chain inet ztest postnat &quot;{type filter hook postrouting priority srcnat+1;}&quot;
nft add rule inet ztest postnat oifname $IFACE_WAN meta mark and 0x40000000 == 0 tcp dport &quot;{80,443}&quot; ct original packets 1-6 queue num 200 bypass
nft add rule inet ztest postnat oifname $IFACE_WAN meta mark and 0x40000000 == 0 udp dport 443 ct original packets 1-6 queue num 200 bypass

nft add chain inet ztest predefrag &quot;{type filter hook output priority -401;}&quot;
nft add rule inet ztest predefrag &quot;mark &amp;amp; 0x40000000 != 0x00000000 notrack&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Удаление тестовой таблицы :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nft delete table inet ztest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FLOW OFFLOADING&lt;/h3&gt; 
&lt;p&gt;Если ваше устройство поддерживает аппаратное ускорение (flow offloading, hardware nat, hardware acceleration), то iptables могут не работать. При включенном offloading пакет не проходит по обычному пути netfilter. Необходимо или его отключить, или выборочно им управлять.&lt;/p&gt; 
&lt;p&gt;В новых ядрах присутствует software flow offloading (SFO). Пакеты, проходящие через SFO, так же проходят мимо большей части механизмов iptables. При включенном SFO работает DNAT/REDIRECT (tpws). Эти соединения исключаются из offloading. Однако, остальные соединения идут через SFO, потому NFQUEUE будет срабатывать только до помещения соединения в flowtable. Практически это означает, что почти весь функционал nfqws работать не будет. Offload включается через специальный target в iptables &lt;code&gt;FLOWOFFLOAD&lt;/code&gt; или через flowtable в nftables.&lt;/p&gt; 
&lt;p&gt;Не обязательно пропускать весь трафик через offload. tpws и так обходит offload &quot;by design&quot;, а для отработки nfqws достаточно первых нескольких пакетов в tcp соединении или udp сеансе. Пока сеанс не направлен на offload, он процессится обычным образом через полноценный netfilter. Как только срабатывает правило offload по любому входящему или исходящему пакету, весь сеанс окончательно уходит из netfilter в offload. Поэтому скрипты zapret берут правила для NFQUEUE, что они создали, и из них создают exemption правила, которые не дают раньше времени попасть сеансу в offload, а потом его &quot;отпускают&quot;. При этом входящим пакетам не дают начать offload, триггером выступают только исходящие пакеты. Эта схема обеспечивает практически нулевой негативный эффект на скорость, одновременно покрывая нужды nfqws и упрощая правила таблиц.&lt;/p&gt; 
&lt;p&gt;OpenWrt не предусматривает выборочного управления offload, поэтому скрипты zapret поддерживают свою систему выборочного управления.&lt;/p&gt; 
&lt;p&gt;iptables target &lt;code&gt;FLOWOFFLOAD&lt;/code&gt; - это проприетарное изобретение OpenWrt. Управление offload в nftables реализовано в базовом ядре linux без патчей. nftables - единственный способ включения offload на классическом Linux.&lt;/p&gt; 
&lt;h3&gt;ДУРЕНИЕ СО СТОРОНЫ СЕРВЕРА&lt;/h3&gt; 
&lt;p&gt;Это тоже возможно. nfqws рассчитан на атаку со стороны клиента, поэтому он распознает прямой и обратный трафик на основании роли в установлении tcp соединения. Если проходит SYN, то source IP - это клиент. Если проходит SYN,ACK , то source IP - это сервер. Для UDP клиентом считается source IP первого прошедшего пакета по двум связкам ip-port. На сервере трафиком клиента будет считаться принятый трафик, а трафиком сервера - исходящий.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--wsize&lt;/code&gt; работает в любом случае, он может использоваться как на клиенте, так и на сервере. Остальные техники работают только если nfqws считает трафик трафиком клиента. Поэтому для их применения по исходящему с сервера трафику conntrack нужно выключить параметром &lt;code&gt;--ctrack-disable&lt;/code&gt;. Если пакет не найден в conntrack, по нему идет работа как по пакету клиента.&lt;/p&gt; 
&lt;p&gt;Большинство протоколов опознаваться не будет, потому что система их опознавания рассчитана на содержание пакетов от клиента. Чтобы задействовать техники типа &lt;code&gt;fake&lt;/code&gt; или &lt;code&gt;multisplit&lt;/code&gt; нужно использовать &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt; с ограничителем connbytes или с ограничителем на основании содержания пакета или его заголовков. start/cutoff недоступны, поскольку завязаны на conntrack.&lt;/p&gt; 
&lt;p&gt;Техника &lt;code&gt;synack-split&lt;/code&gt; позволяет разбить tcp сегмент SYN,ACK на отдельные части с SYN и с ACK. В ответ на это клиент шлет SYN,ACK , что обычно характеризует сервер. У некоторых DPI от этого может ломаться алгоритм, и они перестают блокировать запрещенный контент. Здесь &lt;a href=&quot;https://nmap.org/misc/split-handshake.pdf&quot;&gt;подробное описание&lt;/a&gt; что есть split handshake.&lt;/p&gt; 
&lt;p&gt;Перенаправление трафика обычно идет по номеру source портов и направлению original. original - это исходящий с системы трафик, reply - входящий.&lt;/p&gt; 
&lt;h2&gt;tpws&lt;/h2&gt; 
&lt;p&gt;tpws - это transparent proxy.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@&amp;lt;config_file&amp;gt;|$&amp;lt;config_file&amp;gt;                     ; читать конфигурацию из файла. опция должна быть первой. остальные опции игнорируются.

--debug=0|1|2|syslog|@&amp;lt;filename&amp;gt;                  ; 0,1,2 = логирование на косоль : 0=тихо, 1(default)=подробно, 2=отладка.
--debug-level=0|1|2                               ; указать уровень логирования для syslog и @&amp;lt;filename&amp;gt;
--dry-run                                         ; проверить опции командной строки и выйти. код 0 - успешная проверка.
--version                                         ; вывести версию и выйти

--daemon                                          ; демонизировать прогу
--pidfile=&amp;lt;file&amp;gt;                                  ; сохранить PID в файл
--user=&amp;lt;username&amp;gt;                                 ; менять uid процесса
--uid=uid[:gid]                                   ; менять uid процесса
--bind-addr                                       ; на каком адресе слушать. может быть ipv4 или ipv6 адрес
                                                  ; если указан ipv6 link local, то требуется указать с какого он интерфейса : fe80::1%br-lan
--bind-linklocal=no|unwanted|prefer|force         ; no : биндаться только на global ipv6
                                                  ; unwanted (default) : предпочтительно global, если нет - LL
                                                  ; prefer : предпочтительно LL, если нет - global
                                                  ; force : биндаться только на LL
--bind-iface4=&amp;lt;iface&amp;gt;                             ; слушать на первом ipv4 интерфейса iface
--bind-iface6=&amp;lt;iface&amp;gt;                             ; слушать на первом ipv6 интерфейса iface
--bind-wait-ifup=&amp;lt;sec&amp;gt;                            ; ждать до N секунд появления и поднятия интерфейса
--bind-wait-ip=&amp;lt;sec&amp;gt;                              ; ждать до N секунд получения IP адреса (если задан --bind-wait-ifup - время идет после поднятия интерфейса)
--bind-wait-ip-linklocal=&amp;lt;sec&amp;gt;
                                                  ; имеет смысл только при задании --bind-wait-ip
                                                  ; --bind-linklocal=unwanted	: согласиться на LL после N секунд
                                                  ; --bind-linklocal=prefer	: согласиться на global address после N секунд
--bind-wait-only                                  ; подождать все бинды и выйти. результат 0 в случае успеха, иначе не 0.
--connect-bind-addr                               ; с какого адреса подключаться во внешнюю сеть. может быть ipv4 или ipv6 адрес
                                                  ; если указан ipv6 link local, то требуется указать с какого он интерфейса : fe80::1%br-lan
                                                  ; опция может повторяться для v4 и v6 адресов
                                                  ; опция не отменяет правил маршрутизации ! выбор интерфейса определяется лишь правилами маршрутизации, кроме случая v6 link local.
--socks                                           ; вместо прозрачного прокси реализовать socks4/5 proxy
--no-resolve                                      ; запретить ресолвинг имен через socks5
--resolve-threads                                 ; количество потоков ресолвера
--port=&amp;lt;port&amp;gt;                                     ; на каком порту слушать
--maxconn=&amp;lt;max_connections&amp;gt;                       ; максимальное количество соединений от клиентов к прокси
--maxfiles=&amp;lt;max_open_files&amp;gt;                       ; макс количество файловых дескрипторов (setrlimit). мин требование (X*connections+16), где X=6 в tcp proxy mode, X=4 в режиме тамперинга.
                                                  ; стоит сделать запас с коэффициентом как минимум 1.5. по умолчанию maxfiles (X*connections)*1.5+16
--max-orphan-time=&amp;lt;sec&amp;gt;                           ; если вы запускаете через tpws торрент-клиент с множеством раздач, он пытается установить очень много исходящих соединений,
                                                  ; большая часть из которых отваливается по таймауту (юзера сидят за NAT, firewall, ...)
                                                  ; установление соединения в linux может длиться очень долго. локальный конец отвалился, перед этим послав блок данных,
                                                  ; tpws ждет подключения удаленного конца, чтобы отослать ему этот блок, и зависает надолго.
                                                  ; настройка позволяет сбрасывать такие подключения через N секунд, теряя блок данных. по умолчанию 5 сек. 0 означает отключить функцию
                                                  ; эта функция не действует на успешно подключенные ранее соединения

--local-rcvbuf=&amp;lt;bytes&amp;gt;                            ; SO_RCVBUF для соединений client-proxy
--local-sndbuf=&amp;lt;bytes&amp;gt;                            ; SO_SNDBUF для соединений client-proxy
--remote-rcvbuf=&amp;lt;bytes&amp;gt;                           ; SO_RCVBUF для соединений proxy-target
--remote-sndbuf=&amp;lt;bytes&amp;gt;                           ; SO_SNDBUF для соединений proxy-target
--nosplice                                        ; не использовать splice на linux системах
--skip-nodelay                                    ; не устанавливать в исходящих соединения TCP_NODELAY. несовместимо со split.
--local-tcp-user-timeout=&amp;lt;seconds&amp;gt;                ; таймаут соединений client-proxy (по умолчанию : 10 сек, 0 = оставить системное значение)
--remote-tcp-user-timeout=&amp;lt;seconds&amp;gt;               ; таймаут соединений proxy-target (по умолчанию : 20 сек, 0 = оставить системное значение)
--fix-seg=&amp;lt;int&amp;gt;                                   ; исправлять неудачи tcp сегментации ценой задержек для всех клиентов и замедления. ждать до N мс. по умолчанию 30 мс.
--ipcache-lifetime=&amp;lt;int&amp;gt;                          ; время жизни записей кэша IP в секундах. 0 - без ограничений.
--ipcache-hostname=[0|1]                          ; 1 или отсутствие аргумента включают кэширование имен хостов для применения в стратегиях нулевой фазы

--split-pos=N|-N|marker+N|marker-N                ; список через запятую маркеров для tcp сегментации
--split-any-protocol                              ; применять сегментацию к любым пакетам. по умолчанию - только к известным протоколам (http, TLS)
--disorder[=http|tls]                             ; путем манипуляций с сокетом вынуждает отправлять первым второй сегмент разделенного запроса
--oob[=http|tls]                                  ; отправить байт out-of-band data (OOB) в конце первой части сплита
--oob-data=&amp;lt;char&amp;gt;|0xHEX                           ; переопределить байт OOB. по умолчанию 0x00.
--hostcase                                        ; менять регистр заголовка &quot;Host:&quot;. по умолчанию на &quot;host:&quot;.
--hostspell=HoST                                  ; точное написание заголовка Host (можно &quot;HOST&quot; или &quot;HoSt&quot;). автоматом включает --hostcase
--hostdot                                         ; добавление точки после имени хоста : &quot;Host: kinozal.tv.&quot;
--hosttab                                         ; добавление табуляции после имени хоста : &quot;Host: kinozal.tv\t&quot;
--hostnospace                                     ; убрать пробел после &quot;Host:&quot;
--hostpad=&amp;lt;bytes&amp;gt;                                 ; добавить паддинг-хедеров общей длиной &amp;lt;bytes&amp;gt; перед Host:
--domcase                                         ; домен после Host: сделать таким : TeSt.cOm
--methodspace                                     ; добавить пробел после метода : &quot;GET /&quot; =&amp;gt; &quot;GET  /&quot;
--methodeol                                       ; добавить перевод строки перед методом  : &quot;GET /&quot; =&amp;gt; &quot;\r\nGET  /&quot;
--unixeol                                         ; конвертировать 0D0A в 0A и использовать везде 0A
--tlsrec=N|-N|marker+N|marker-N                   ; разбивка TLS ClientHello на 2 TLS records на указанной позиции. Минимальное смещение - 6.
--mss=&amp;lt;int&amp;gt;                                       ; установить MSS для клиента. может заставить сервер разбивать ответы, но существенно снижает скорость
--tamper-start=[n]&amp;lt;pos&amp;gt;                           ; начинать дурение только с указанной байтовой позиции или номера блока исходяшего потока (считается позиция начала принятого блока)
--tamper-cutoff=[n]&amp;lt;pos&amp;gt;                          ; закончить дурение на указанной байтовой позиции или номере блока исходящего потока (считается позиция начала принятого блока)
--hostlist=&amp;lt;filename&amp;gt;                             ; действовать только над доменами, входящими в список из filename. поддомены автоматически учитываются, если хост не начинается с &#39;^&#39;.
                                                  ; в файле должен быть хост на каждой строке.
                                                  ; список читается при старте и хранится в памяти в виде иерархической структуры для быстрого поиска.
                                                  ; при изменении времени модификации файла он перечитывается автоматически по необходимости
                                                  ; список может быть запакован в gzip. формат автоматически распознается и разжимается
                                                  ; списков может быть множество. пустой общий лист = его отсутствие
                                                  ; хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello.
--hostlist-domains=&amp;lt;domain_list&amp;gt;                  ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-exclude=&amp;lt;filename&amp;gt;                     ; не применять дурение к доменам из листа. может быть множество листов. схема аналогична include листам.
--hostlist-exclude-domains=&amp;lt;domain_list&amp;gt;          ; фиксированный список доменов через зяпятую. можно использовать # в начале для комментирования отдельных доменов.
--hostlist-auto=&amp;lt;filename&amp;gt;                        ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика)
--hostlist-auto-fail-threshold=&amp;lt;int&amp;gt;              ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3)
--hostlist-auto-fail-time=&amp;lt;int&amp;gt;                   ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60)
--hostlist-auto-debug=&amp;lt;logfile&amp;gt;                   ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.
--new                                             ; начало новой стратегии (новый профиль)
--skip                                            ; не использовать этот профиль . полезно для временной деактивации профиля без удаления параметров.
--filter-l3=ipv4|ipv6                             ; фильтр версии ip для текущей стратегии
--filter-tcp=[~]port1[-port2]|*                   ; фильтр портов tcp для текущей стратегии. ~ означает инверсию. поддерживается список через запятую.
--filter-l7=[http|tls|quic|wireguard|dht|unknown] ; фильтр протокола L6-L7. поддерживается несколько значений через запятую.
--ipset=&amp;lt;filename&amp;gt;                                ; включающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-ip=&amp;lt;ip_list&amp;gt;                              ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
--ipset-exclude=&amp;lt;filename&amp;gt;                        ; исключающий ip list. на каждой строчке ip или cidr ipv4 или ipv6. поддерживается множество листов и gzip. перечитка автоматическая.
--ipset-exclude-ip=&amp;lt;ip_list&amp;gt;                      ; фиксированный список подсетей через запятую. можно использовать # в начале для комментирования отдельных подсетей.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;TCP СЕГМЕНТАЦИЯ В TPWS&lt;/h3&gt; 
&lt;p&gt;tpws, как и nfqws, поддерживает множественную сегментацию запросов. Сплит позиции задаются в &lt;code&gt;--split-pos&lt;/code&gt;. Указываются маркеры через запятую. Описание маркеров см в разделе &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#tcp-%D1%81%D0%B5%D0%B3%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;nfqws&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;На прикладном уровне в общем случае нет гарантированного средства заставить ядро выплюнуть блок данных, порезанным в определенном месте. ОС держит буфер отсылки (SNDBUF) у каждого сокета. Если у сокета включена опция TCP_NODELAY и буфер пуст, то каждый send приводит к отсылке отдельного ip пакета или группы пакетов, если блок не вмещается в один ip пакет. Однако, если в момент send уже имеется неотосланный буфер, то ОС присоединит данные к нему, никакой отсылки отдельным пакетом не будет. Но в этом случае и так нет никакой гарантии, что какой-то блок сообщения пойдет в начале пакета, на что собственно и заточены DPI. Разбиение будет производиться согласно MSS, который зависит от MTU исходящего интерфейса. Таким образом DPI, смотрящие в начало поля данных TCP пакета, будут поломаны в любом случае. Протокол http относится к запрос-ответным протоколам. Новое сообщение посылается только тогда, когда сервер получил запрос и полностью вернул ответ. Значит запрос фактически был не только отослан, но и принят другой стороной, а следовательно буфер отсылки пуст, и следующие 2 send приведут к отсылке сегментов данных разными ip пакетами.&lt;/p&gt; 
&lt;p&gt;Таким образом tpws обеспечивает сплит только за счет раздельных вызовов send, и это обычно работает надежно, если разбивать не на слишком много частей и не на слишком мелкие подряд следующие части. В последнем случае Linux все же может обьединить некоторые части, что приведет к несоответствию реальной сегментации указанным сплит позициям. Другие ОС в этом вопросе ведут себя более предсказуемо. Спонтанного обьединения замечено не было. Поэтому не стоит злоупотреблять сплитами и в особенности мелкими соседними пакетами.&lt;/p&gt; 
&lt;p&gt;Как показывается практика, проблемы могут начаться , если количество сплитов более одного. На каких-то системах наблюдался стабильный результат до 8 сплитов, на других проблемы уже начинались после 2 сплитов. Один сплит работает стабильно, если не является частью массивной потоковой передачи. При неудаче сегментации будет выводиться сообщение &lt;code&gt;WARNING ! segmentation failed&lt;/code&gt;. Если вы его видите, это повод снизить количество сплит позиций. Если это не вариант, для ядер Linux &amp;gt;=4.6 есть параметр &lt;code&gt;--fix-seg&lt;/code&gt;. Он позволяет подождать завершение отсылки перед отправкой следующей части. Но этот вариант ломает модель асинхронной обработки событий. Пока идет ожидание, все остальные соединения не обрабатываются и кратковременно подвисают. На практике это может быть совсем небольшое ожидание - менее 10 мс. Выполняется оно только , если происходит split, и в ожидании есть реальная необходимость. В высоконагруженных системах данный вариант не рекомендуется. Но для домашнего использования может подойти, и вы эти задержки даже не заметите.&lt;/p&gt; 
&lt;p&gt;Если вы пытаетесь сплитнуть массивную передачу с &lt;code&gt;--split-any-protocol&lt;/code&gt;, когда информация поступает быстрее отсылки, то без &lt;code&gt;--fix-seg&lt;/code&gt; ошибки сегментации будут сыпаться сплошным потоком. Работа по массивному потоку без ограничителей &lt;code&gt;--tamper-start&lt;/code&gt; и &lt;code&gt;--tamper-cutoff&lt;/code&gt; обычно лишена смысла.&lt;/p&gt; 
&lt;p&gt;tpws работает на уровне сокетов, поэтому длинный запрос, не вмещающийся в 1 пакет (TLS с kyber), он получает целым блоком. На каждую сплит часть он делает отдельный вызов &lt;code&gt;send()&lt;/code&gt;. Но ОС не сможет отослать данные в одном пакете, если размер превысит MTU. В случае слишком большого сегмента ОС дополнительно его порежет на более мелкие. Результат должен быть аналогичен nfqws.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--disorder&lt;/code&gt; заставляет слать каждый 2-й пакет с TTL=1, начиная с первого. К серверу приходят все четные пакеты сразу. На остальные ОС делает ретрансмиссию, и они приходят потом. Это само по себе создает дополнительную задержку (200 мс в linux для первой ретрансмиссии). Иным способом сделать disorder в сокет варианте не представляется возможным. Итоговый порядок для 6 сегментов получается &lt;code&gt;2 4 6 1 3 5&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--oob&lt;/code&gt; высылает 1 байт out-of-band data после первого сплит сегмента. &lt;code&gt;oob&lt;/code&gt; в каждом сегменте сплита показал себя ненадежным. Сервер получает oob в сокет.&lt;/p&gt; 
&lt;p&gt;Сочетание &lt;code&gt;oob&lt;/code&gt; и &lt;code&gt;disorder&lt;/code&gt; возможно только в Linux. Остальные ОС не умеют с таким справляться. Флаг URG теряется при ретрансмиссиях. Сервер получает oob в сокет. Сочетание этих параметров в ос, кроме Linux, вызывает ошибку на этапе запуска.&lt;/p&gt; 
&lt;h3&gt;TLSREC&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--tlsrec&lt;/code&gt; позволяют внутри одного tcp сегмента разрезать TLS ClientHello на 2 TLS records. Можно использовать стандартный механизм маркеров для задания относительных позиций.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--tlsrec&lt;/code&gt; ломает значительное количество сайтов. Криптобиблиотеки (openssl, ...) на оконечных http серверах без проблем принимают разделенные tls сегменты, но мидлбоксы - не всегда. К мидлбоксам можно отнести CDN или системы ddos-защиты. Поэтому применение &lt;code&gt;--tlsrec&lt;/code&gt; без ограничителей вряд ли целесообразно. В РФ &lt;code&gt;--tlsrec&lt;/code&gt; обычно не работает с TLS 1.2, потому что цензор парсит сертификат сервера из ServerHello. Работает только с TLS 1.3, поскольку там эта информация шифруется. Впрочем, сейчас сайтов, не поддерживающих TLS 1.3, осталось немного.&lt;/p&gt; 
&lt;h3&gt;MSS&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--mss&lt;/code&gt; устанавливает опцию сокета TCP_MAXSEG. Клиент выдает это значение в tcp опциях SYN пакета. Сервер в ответ в SYN,ACK выдает свой MSS. На практике сервера обычно снижают размеры отсылаемых ими пакетов, но они все равно не вписываются в низкий MSS, указанный клиентом. Обычно чем больше указал клиент, тем больше шлет сервер. На TLS 1.2 если сервер разбил заброс так, чтобы домен из сертификата не попал в первый пакет, это может обмануть DPI, секущий ответ сервера. Схема может значительно снизить скорость и сработать не на всех сайтах.&lt;/p&gt; 
&lt;p&gt;С фильтром по hostlist совместимо только в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8-1&quot;&gt;некоторых случаях&lt;/a&gt;, когда возможно узнать имя хоста на момент применения дурения.&lt;/p&gt; 
&lt;p&gt;Применяя данную опцию к сайтам TLS1.3, если броузер тоже поддерживает TLS1.3, то вы делаете только хуже. Но нет способа автоматически узнать когда надо применять, когда нет, поскольку MSS идет только в 3-way handshake еще до обмена данными, а версию TLS можно узнать только по ответу сервера, который может привести к реакции DPI. Использовать только когда нет ничего лучше или для отдельных ресурсов. Для http использовать смысла нет, поэтому заводите отдельный desync profile с фильтром по порту 443. Работает только на Linux, не работает на BSD и MacOS.&lt;/p&gt; 
&lt;h3&gt;ДРУГИЕ ПАРАМЕТРЫ ДУРЕНИЯ&lt;/h3&gt; 
&lt;p&gt;Параметр &lt;code&gt;--hostpad=&amp;lt;bytes&amp;gt;&lt;/code&gt; добавляет паддинг-хедеров перед &lt;code&gt;Host:&lt;/code&gt; на указанное количество байтов. Если размер &lt;code&gt;&amp;lt;bytes&amp;gt;&lt;/code&gt; слишком большой, то идет разбивка на разные хедеры по 2K. Общий буфер приема http запроса - 64K, больший паддинг не поддерживается, да и http сервера такое уже не принимают. Полезно против DPI, выполняющих реассемблинг TCP с ограниченным буфером. Если техника работает, то после некоторого количества bytes http запрос начнет проходить до сайта. Если при этом критический размер padding около MTU, значит скорее всего DPI не выполняет реассемблинг пакетов, и лучше будет использовать обычные опции TCP сегментации. Если все же реассемблинг выполняется, то критический размер будет около размера буфера DPI. Он может быть 4K или 8K, возможны и другие значения.&lt;/p&gt; 
&lt;h3&gt;МНОЖЕСТВЕННЫЕ СТРАТЕГИИ&lt;/h3&gt; 
&lt;p&gt;Работают аналогично &lt;strong&gt;nfqws&lt;/strong&gt;, кроме некоторых моментов. Нет параметра &lt;code&gt;--filter-udp&lt;/code&gt;, поскольку &lt;strong&gt;tpws&lt;/strong&gt; udp не поддерживает. Методы нулевой фазы (&lt;code&gt;--mss&lt;/code&gt;) могут работать по хостлисту только в двух случаях: если используется режим socks и удаленный ресолвинг хостов через прокси, либо используется система &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/#%D0%BA%D1%8D%D1%88-ip&quot;&gt;кэша IP&lt;/a&gt; для запоминания соответствия IP-&amp;gt;hostname. Работоспособность вашей настройки в одном и том же режиме может зависеть от того, применяет ли клиент удаленный ресолвинг. Это может быть неочевидно. В одной программе работает, в другой - нет.&lt;/p&gt; 
&lt;p&gt;Если вы используете профиль с хостлистом , и вам нужен mss всегда, укажите mss в профиле с хостлистом, создайте еще один профиль без хостлиста, если его еще нет, и в нем еще раз укажите mss. Тогда при любом раскладе будет выполняться mss.&lt;/p&gt; 
&lt;p&gt;Если вам нужен mss по хостлисту, указывайте &lt;code&gt;--mss&lt;/code&gt; только в профиле с хостлистом и убедитесь в наличии любого из необходимых условий работы в таком режиме.&lt;/p&gt; 
&lt;p&gt;Используйте &lt;code&gt;curl --socks5&lt;/code&gt; и &lt;code&gt;curl --socks5-hostname&lt;/code&gt; для проверки вашей стратегии. Смотрите вывод &lt;code&gt;--debug&lt;/code&gt;, чтобы убедиться в правильности настроек.&lt;/p&gt; 
&lt;h3&gt;СЛУЖЕБНЫЕ ПАРАМЕТРЫ&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;--debug&lt;/code&gt; позволяет выводить подробный лог действий на консоль, в syslog или в файл. Может быть важен порядок следования опций. &lt;code&gt;--debug&lt;/code&gt; лучше всего указывать в самом начале. Опции анализируются последовательно. Если ошибка будет при проверке опции, а до анализа &lt;code&gt;--debug&lt;/code&gt; еще дело не дошло, то сообщения не будут выведены в файл или syslog. &lt;code&gt;--debug=0|1|2&lt;/code&gt; позволяют сразу в одном параметре включить логирование на консоль и указать уровень. Сохранено для совместимости с более старыми версиями. Для выбора уровня в режиме syslog или file используйте отдельный параметр &lt;code&gt;--debug-level&lt;/code&gt;. Если в этих режимах &lt;code&gt;--debug&lt;/code&gt; не указывать уровень через &lt;code&gt;--debug-level&lt;/code&gt;, то автоматически назначается уровень 1. При логировании в файл процесс не держит файл открытым. Ради каждой записи файл открывается и потом закрывается. Так что файл можно удалить в любой момент, и он будет создан заново при первом же сообщении в лог. Но имейте в виду, что если вы запускаете процесс под root, то будет сменен UID на не-root. В начале на лог файл меняется owner, иначе запись будет невозможна. Если вы потом удалите файл, и у процесса не будет прав на создание файла в его директории, лог больше не будет вестись. Вместо удаления лучше использовать truncate. В шелле это можно сделать через команду &quot;: &amp;gt;filename&quot;&lt;/p&gt; 
&lt;p&gt;tpws может биндаться на множество интерфейсов и IP адресов (до 32 шт). Порт всегда только один. Параметры &lt;code&gt;--bind-iface*&lt;/code&gt; и &lt;code&gt;--bind-addr&lt;/code&gt; создают новый бинд. Остальные параметры &lt;code&gt;--bind-*&lt;/code&gt; относятся к последнему бинду. Для бинда на все ipv4 укажите &lt;code&gt;--bind-addr &quot;0.0.0.0&quot;&lt;/code&gt;, на все ipv6 - &lt;code&gt;&quot;::&quot;&lt;/code&gt;. &lt;code&gt;--bind-addr=&quot;&quot;&lt;/code&gt; - биндаемся на все ipv4 и ipv6. Выбор режима использования link local ipv6 адресов (&lt;code&gt;fe80::/8&lt;/code&gt;) :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--bind-iface6 --bind-linklocal=no : сначала приватный адрес fc00::/7, затем глобальный адрес
--bind-iface6 --bind-linklocal=unwanted : сначала приватный адрес fc00::/7, затем глобальный адрес, затем link local.
--bind-iface6 --bind-linklocal=prefer : сначала link local, затем приватный адрес fc00::/7, затем глобальный адрес.
--bind-iface6 --bind-linklocal=force : только link local
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Если не указано ни одного бинда, то создается бинд по умолчанию на все адреса всех интерфейсов. Для бинда на конкретный link-local address делаем так : &lt;code&gt;--bind-iface6=fe80::aaaa:bbbb:cccc:dddd%iface-name&lt;/code&gt; Параметры &lt;code&gt;--bind-wait*&lt;/code&gt; могут помочь в ситуациях, когда нужно взять IP с интерфейса, но его еще нет, он не поднят или не сконфигурирован. В разных системах события ifup ловятся по-разному и не гарантируют, что интерфейс уже получил IP адрес определенного типа. В общем случае не существует единого механизма повеситься на событие типа &quot;на интерфейсе X появился link local address&quot;. Для бинда на известный ip, когда еще интерфейс не сконфигурирован, нужно делать так: &lt;code&gt;--bind-addr=192.168.5.3 --bind-wait-ip=20&lt;/code&gt; В режиме transparent бинд возможен на любой несуществующий адрес, в режиме socks - только на существующий.&lt;/p&gt; 
&lt;p&gt;Параметры rcvbuf и sndbuf позволяют установить setsockopt SO_RCVBUF SO_SNDBUF для локального и удаленного соединения.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--skip-nodelay&lt;/code&gt; может быть полезен, когда tpws используется без дурения, чтобы привести MTU к MTU системы, на которой работает tpws. Это может быть полезно для скрытия факта использования VPN. Пониженный MTU - 1 из способов обнаружения подозрительного подключения. С tcp proxy ваши соединения неотличимы от тех, что сделал бы сам шлюз.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--local-tcp-user-timeout&lt;/code&gt; и &lt;code&gt;--remote-tcp-user-timeout&lt;/code&gt; устанавливают значение таймаута в секундах для соединений клиент-прокси и прокси-сервер. Этот таймаут соответствует опции сокета linux TCP_USER_TIMEOUT. Под таймаутом подразумевается время, в течение которого буферизированные данные не переданы или на переданные данные не получено подтверждение (ACK) от другой стороны. Этот таймаут никак не касается времени отсутствия какой-либо передачи через сокет лишь потому, что данных для передачи нет. Полезно для сокращения время закрытия подвисших соединений. Поддерживается только на Linux и MacOS.&lt;/p&gt; 
&lt;p&gt;Режим &lt;code&gt;--socks&lt;/code&gt; не требует повышенных привилегий (кроме бинда на привилегированные порты 1..1023). Поддерживаются версии socks 4 и 5 без авторизации. Версия протокола распознается автоматически. Подключения к IP того же устройства, на котором работает tpws, включая localhost, запрещены. socks5 позволяет удаленно ресолвить хосты (curl : --socks5-hostname firefox : socks_remote_dns=true). tpws поддерживает эту возможность асинхронно, не блокируя процессинг других соединений, используя многопоточный пул ресолверов. Количество потоков определяется автоматически в зависимости от &lt;code&gt;--maxconn&lt;/code&gt;, но можно задать и вручную через параметр &lt;code&gt;--resolver-threads&lt;/code&gt;. Запрос к socks выставляется на паузу, пока домен не будет преобразован в ip адрес в одном из потоков ресолвера. Ожидание может быть более длинным, если все потоки заняты. Если задан параметр &lt;code&gt;--no-resolve&lt;/code&gt;, то подключения по именам хостов запрещаются, а пул ресолверов не создается. Тем самым экономятся ресурсы.&lt;/p&gt; 
&lt;h3&gt;IPTABLES ДЛЯ TPWS&lt;/h3&gt; 
&lt;p&gt;Для перенаправления tcp соединения на transparent proxy используются команды следующего вида :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to 127.0.0.127:988
iptables -t nat -I PREROUTING -i &amp;lt;внутренний_интерфейс&amp;gt; -p tcp --dport 80 -j DNAT --to 127.0.0.127:988
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Первая команда для соединений с самой системы, вторая - для проходящих через роутер соединений.&lt;/p&gt; 
&lt;p&gt;DNAT на localhost работает в цепочке OUTPUT, но не работает в цепочке PREROUTING без включения параметра route_localnet :&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sysctl -w net.ipv4.conf.&amp;lt;внутренний_интерфейс&amp;gt;.route_localnet=1&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Можно использовать &lt;code&gt;-j REDIRECT --to-port 988&lt;/code&gt; вместо DNAT, однако в этом случае процесс transparent proxy должен слушать на ip адресе входящего интерфейса или на всех адресах. Слушать на всех - не есть хорошо с точки зрения безопасности. Слушать на одном (локальном) можно, но в случае автоматизированного скрипта придется его узнавать, потом динамически вписывать в команду. В любом случае требуются дополнительные усилия. Использование route_localnet тоже имеет потенциальные проблемы с безопасностью. Вы делаете доступным все, что висит на &lt;code&gt;127.0.0.0/8&lt;/code&gt; для локальной подсети &amp;lt; внутренний_интерфейс&amp;gt;. Службы обычно привязываются к &lt;code&gt;127.0.0.1&lt;/code&gt;, поэтому можно средствами iptables запретить входящие на &lt;code&gt;127.0.0.1&lt;/code&gt; не с интерфейса lo, либо повесить tpws на любой другой IP из &lt;code&gt;127.0.0.0/8&lt;/code&gt;, например на &lt;code&gt;127.0.0.127&lt;/code&gt;, и разрешить входящие не с lo только на этот IP.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iptables -A INPUT ! -i lo -d 127.0.0.127 -j ACCEPT
iptables -A INPUT ! -i lo -d 127.0.0.0/8 -j DROP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Фильтр по owner необходим для исключения рекурсивного перенаправления соединений от самого tpws. tpws запускается под пользователем &lt;strong&gt;tpws&lt;/strong&gt;, для него задается исключающее правило.&lt;/p&gt; 
&lt;p&gt;ip6tables работают почти точно так же, как и ipv4, но есть ряд важных нюансов. В DNAT следует брать адрес --to в квадратные скобки. Например :&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;ip6tables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to [::1]:988&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Параметра route_localnet не существует для ipv6. DNAT на localhost (::1) возможен только в цепочке OUTPUT. В цепочке PREROUTING DNAT возможен на любой global address или на link local address того же интерфейса, откуда пришел пакет. NFQUEUE работает без изменений.&lt;/p&gt; 
&lt;h3&gt;NFTABLES ДЛЯ TPWS&lt;/h3&gt; 
&lt;p&gt;Базовая конфигурация :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_WAN=wan
IFACE_LAN=br-lan

sysctl -w net.ipv4.conf.$IFACE_LAN.route_localnet=1

nft create table inet ztest

nft create chain inet ztest localnet_protect
nft add rule inet ztest localnet_protect ip daddr 127.0.0.127 return
nft add rule inet ztest localnet_protect ip daddr 127.0.0.0/8 drop
nft create chain inet ztest input &quot;{type filter hook input priority filter - 1;}&quot;
nft add rule inet ztest input iif != &quot;lo&quot; jump localnet_protect

nft create chain inet ztest dnat_output &quot;{type nat hook output priority dstnat;}&quot;
nft add rule inet ztest dnat_output meta skuid != tpws oifname $IFACE_WAN tcp dport { 80, 443 } dnat ip to 127.0.0.127:988
nft create chain inet ztest dnat_pre &quot;{type nat hook prerouting priority dstnat;}&quot;
nft add rule inet ztest dnat_pre meta iifname $IFACE_LAN tcp dport { 80, 443 } dnat ip to 127.0.0.127:988
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Удаление таблицы :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nft delete table inet ztest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ip2net&lt;/h2&gt; 
&lt;p&gt;Утилита ip2net предназначена для преобразования ipv4 или ipv6 списка ip в список подсетей с целью сокращения размера списка. Входные данные берутся из stdin, выходные выдаются в &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-4                             ; лист - ipv4 (по умолчанию)
-6                             ; лист - ipv6
--prefix-length=min[-max]      ; диапазон рассматриваемых длин префиксов. например : 22-30 (ipv4), 56-64 (ipv6)
--v4-threshold=mul/div         ; ipv4 : включать подсети, в которых заполнено по крайней мере mul/div адресов. например : 3/4
--v6-threshold=N               ; ipv6 : минимальное количество ip для создания подсети
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В списке могут присутствовать записи вида ip/prefix и ip1-ip2. Такие записи выкидываются в stdout без изменений. Они принимаются командой ipset. ipset умеет для листов hash:net из ip1-ip2 делать оптимальное покрытие ip/prefix. ipfw из FreeBSD понимает ip/prefix, но не понимает ip1-ip2. ip2net фильтрует входные данные, выкидывая неправильные IP адреса.&lt;/p&gt; 
&lt;p&gt;Выбирается подсеть, в которой присутствует указанный минимум адресов. Для ipv4 минимум задается как процент от размера подсети (mul/div. например, 3/4), для ipv6 минимум задается напрямую.&lt;/p&gt; 
&lt;p&gt;Размер подсети выбирается следующим алгоритмом: Сначала в указанном диапазоне длин префиксов ищутся подсети, в которых количество адресов - максимально. Если таких сетей найдено несколько, берется наименьшая сеть (префикс больше). Например, заданы параметры v6_threshold=2 prefix_length=32-64, имеются следующие ipv6 :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::5
1234:5678:aaaa::6
1234:5678:aaac::5
Результат будет :
1234:5678:aaa8::/45
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Эти адреса так же входят в подсеть /32. Однако, нет смысла проходиться ковровой бомбардировкой, когда те же самые адреса вполне влезают в /45 и их ровно столько же. Если изменить v6_threshold=4, то результат будет:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::5
1234:5678:aaaa::6
1234:5678:aaac::5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;То есть ip не объединятся в подсеть, потому что их слишком мало. Если изменить &lt;code&gt;prefix_length=56-64&lt;/code&gt;, результат будет:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1234:5678:aaaa::/64
1234:5678:aaac::5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Требуемое процессорное время для вычислений сильно зависит от ширины диапазона длин префиксов, размера искомых подсетей и длины листа. Если ip2net думает слишком долго, не используйте слишком большие подсети и уменьшите диапазон длин префиксов. Учтите, что арифметика mul/div - целочисленная. При превышении разрядной сетки 32 bit результат непредсказуем. Не надо делать такое: 5000000/10000000. 1/2 - гораздо лучше.&lt;/p&gt; 
&lt;h2&gt;mdig&lt;/h2&gt; 
&lt;p&gt;Программа предназначена для многопоточного ресолвинга больших листов через системный DNS. Она берет из stdin список доменов и выводит в stdout результат ресолвинга. Ошибки выводятся в stderr.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--threads=&amp;lt;threads_number&amp;gt;	; количество потоков. по умолчанию 1.
--family=&amp;lt;4|6|46&amp;gt;              ; выбор семейства IP адресов : ipv4, ipv6, ipv4+ipv6
--verbose                      ; дебаг-лог на консоль
--stats=N                      ; выводить статистику каждые N доменов
--log-resolved=&amp;lt;file&amp;gt;          ; сохранять успешно отресолвленные домены в файл
--log-failed=&amp;lt;file&amp;gt;            ; сохранять неудачно отресолвленные домены в файл
--dns-make-query=&amp;lt;domain&amp;gt;      ; вывести в stdout бинарный DNS запрос по домену. если --family=6, запрос будет AAAA, иначе A.
--dns-parse-query              ; распарсить бинарный DNS ответ и выдать все ivp4 и ipv6 адреса из него в stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Параметры &lt;code&gt;--dns-make-query&lt;/code&gt; и &lt;code&gt;--dns-parse-query&lt;/code&gt; позволяют провести ресолвинг одного домена через произвольный канал. Например, следующим образом можно выполнить DoH запрос, используя лишь mdig и curl :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mdig --family=6 --dns-make-query=rutracker.org | curl --data-binary @- -H &quot;Content-Type: application/dns-message&quot; https://cloudflare-dns.com/dns-query | mdig --dns-parse-query
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Способы получения списка заблокированных IP&lt;/h2&gt; 
&lt;p&gt;!!! nftables не могут работать с ipset-ами. Собственный аналогичный механизм требует огромного количество RAM !!! для загрузки больших листов. Например, для загона 100K записей в nfset не хватает даже 256 Mb. !!! Если вам нужны большие листы на домашних роутерах, откатывайтесь на iptables+ipset.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Внесите заблокированные домены в &lt;code&gt;ipset/zapret-hosts-user.txt&lt;/code&gt; и запустите &lt;code&gt;ipset/get_user.sh&lt;/code&gt; На выходе получите &lt;code&gt;ipset/zapret-ip-user.txt&lt;/code&gt; с IP адресами.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cкрипты с названием get_reestr_* оперируют дампом реестра заблокированных сайтов :&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_resolve.sh&lt;/code&gt; получает список доменов от rublacklist и дальше их ресолвит в ip адреса в файл ipset/zapret-ip.txt.gz. В этом списке есть готовые IP адреса, но судя во всему они там в точности в том виде, что вносит в реестр РосКомПозор. Адреса могут меняться, позор не успевает их обновлять, а провайдеры редко банят по IP : вместо этого они банят http запросы с &quot;нехорошим&quot; заголовком &quot;Host:&quot; вне зависимости от IP адреса. Поэтому скрипт ресолвит все сам, хотя это и занимает много времени. Используется мультипоточный ресолвер mdig (собственная разработка).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_preresolved.sh&lt;/code&gt;. то же самое, что и 2), только берется уже заресолвленый список со стороннего ресурса.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_reestr_preresolved_smart.sh&lt;/code&gt;. то же самое, что и 3), с добавлением всего диапазона некоторых автономных систем (прыгающие IP адреса из cloudflare, facebook, ...) и некоторых поддоменов блокируемых сайтов&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cкрипты с названием &lt;code&gt;get_antifilter_*&lt;/code&gt; оперируют списками адресов и масок подсетей с сайтов antifilter.network и antifilter.download :&lt;/p&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ip.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ip.lst&quot;&gt;https://antifilter.download/list/ip.lst&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipsmart.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.network/download/ipsmart.lst&quot;&gt;https://antifilter.network/download/ipsmart.lst&lt;/a&gt;. умная суммаризация отдельных адресов из ip.lst по маскам от /32 до /22&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipsum.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ipsum.lst&quot;&gt;https://antifilter.download/list/ipsum.lst&lt;/a&gt;. суммаризация отдельных адресов из ip.lst по маске /24&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_ipresolve.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/ipresolve.lst&quot;&gt;https://antifilter.download/list/ipresolve.lst&lt;/a&gt;. пре-ресолвленный список, аналогичный получаемый при помощи get_reestr_resolve. только ipv4.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_antifilter_allyouneed.sh&lt;/code&gt;. получает лист &lt;a href=&quot;https://antifilter.download/list/allyouneed.lst&quot;&gt;https://antifilter.download/list/allyouneed.lst&lt;/a&gt;. Суммарный список префиксов, созданный из ipsum.lst и subnet.lst.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ipset/get_refilter_ipsum.sh&lt;/code&gt;. Список берется отсюда : &lt;a href=&quot;https://github.com/1andrevich/Re-filter-lists&quot;&gt;https://github.com/1andrevich/Re-filter-lists&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Все варианты рассмотренных скриптов автоматически создают и заполняют ipset. Варианты 2-10 дополнительно вызывают вариант 1.&lt;/p&gt; 
&lt;ol start=&quot;11&quot;&gt; 
 &lt;li&gt;&lt;code&gt;ipset/get_config.sh&lt;/code&gt;. этот скрипт вызывает то, что прописано в переменной GETLIST из файла config Если переменная не определена, то ресолвятся лишь листы для ipset nozapret/nozapret6.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Листы РКН все время изменяются. Возникают новые тенденции. Требования к RAM могут меняться. Поэтому необходима нечастая, но все же регулярная ревизия что же вообще у вас происходит на роутере. Или вы можете узнать о проблеме лишь когда у вас начнет постоянно пропадать wifi, и вам придется его перезагружать каждые 2 часа (метод кувалды).&lt;/p&gt; 
&lt;p&gt;Самые щадящие варианты по RAM - &lt;code&gt;get_antifilter_allyouneed.sh&lt;/code&gt;, &lt;code&gt;get_antifilter_ipsum.sh&lt;/code&gt;, &lt;code&gt;get_refilter_*.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Листы &lt;code&gt;zapret-ip.txt&lt;/code&gt; и &lt;code&gt;zapret-ipban.txt&lt;/code&gt; сохраняются в сжатом виде в файлы .gz. Это позволяет снизить их размер во много раз и сэкономить место на роутере. Отключить сжатие листов можно параметром конфига GZIP_LISTS=0.&lt;/p&gt; 
&lt;p&gt;На роутерах не рекомендуется вызывать эти скрипты чаще раза за 2 суток, поскольку сохранение идет либо во внутреннюю флэш память роутера, либо в случае extroot - на флэшку. В обоих случаях слишком частая запись может убить флэшку, но если это произойдет с внутренней флэш памятью, то вы просто убьете роутер.&lt;/p&gt; 
&lt;p&gt;Принудительное обновление &lt;code&gt;ipset&lt;/code&gt; выполняет скрипт &lt;code&gt;ipset/create_ipset.sh&lt;/code&gt;. Если передан параметр &lt;code&gt;no-update&lt;/code&gt;, скрипт не обновляет &lt;code&gt;ipset&lt;/code&gt;, а только создает его при его отсутствии и заполняет. Это полезно, когда могут случиться несколько последовательных вызовов скрипта. Нет смысла несколько раз перезаполнять &lt;code&gt;ipset&lt;/code&gt;, это длительная операция на больших листах. Листы можно обновлять раз в несколько суток, и только тогда вызывать &lt;code&gt;create_ipset&lt;/code&gt; без параметра &lt;code&gt;no-update&lt;/code&gt;. Во всех остальных случаях стоит применять &lt;code&gt;no-update&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Список РКН уже достиг внушительных размеров в сотни тысяч IP адресов. Поэтому для оптимизации &lt;code&gt;ipset&lt;/code&gt; применяется утилита &lt;code&gt;ip2net&lt;/code&gt;. Она берет список отдельных IP адресов и пытается интеллектуально создать из него подсети для сокращения количества адресов. &lt;code&gt;ip2net&lt;/code&gt; отсекает неправильные записи в листах, гарантируя отсутствие ошибок при их загрузке. &lt;code&gt;ip2net&lt;/code&gt; написан на языке C, поскольку операция ресурсоемкая. Иные способы роутер может не потянуть.&lt;/p&gt; 
&lt;p&gt;Можно внести список доменов в &lt;code&gt;ipset/zapret-hosts-user-ipban.txt&lt;/code&gt;. Их ip адреса будут помещены в отдельный ipset &lt;code&gt;ipban&lt;/code&gt;. Он может использоваться для принудительного завертывания всех соединений на прозрачный proxy &lt;code&gt;redsocks&lt;/code&gt; или на VPN.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IPV6&lt;/strong&gt; : если включен ipv6, то дополнительно создаются листы с таким же именем, но с &quot;6&quot; на конце перед расширением. &lt;code&gt;zapret-ip.txt&lt;/code&gt; =&amp;gt; &lt;code&gt;zapret-ip6.txt&lt;/code&gt; Создаются ipset-ы zapret6 и ipban6. Листы с antifilter не содержат список ipv6 адресов.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;СИСТЕМА ИСКЛЮЧЕНИЯ IP&lt;/strong&gt;. Все скрипты ресолвят файл &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt;, создавая &lt;code&gt;zapret-ip-exclude.txt&lt;/code&gt; и &lt;code&gt;zapret-ip-exclude6.txt&lt;/code&gt;. Они загоняются в ipset-ы nozapret и nozapret6. Все правила, создаваемые init скриптами, создаются с учетом этих ipset. Помещенные в них IP не участвуют в процессе. &lt;code&gt;zapret-hosts-user-exclude.txt&lt;/code&gt; может содержать домены, ipv4 и ipv6 адреса или подсети.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;. Скрипты ipset/*.sh работают так же на FreeBSD. Вместо ipset они создают lookup таблицы ipfw с аналогичными именами. ipfw таблицы в отличие от ipset могут содержать как ipv4, так и ipv6 адреса и подсети в одной таблице, поэтому разделения нет.&lt;/p&gt; 
&lt;p&gt;Параметр конфига LISTS_RELOAD задает произвольную команду для перезагрузки листов. Это особенно полезно на BSD системах с PF. LISTS_RELOAD=- отключает перезагрузку листов.&lt;/p&gt; 
&lt;h2&gt;Фильтрация по именам доменов&lt;/h2&gt; 
&lt;p&gt;Альтернативой ipset является использование tpws или nfqws со списком доменов. Оба демона принимают неограниченное количество листов include (&lt;code&gt;--hostlist&lt;/code&gt;) и exclude (&lt;code&gt;--hostlist-exclude&lt;/code&gt;). Прежде всего проверяются exclude листы. При вхождении в них происходит отказ от дурения. Далее при наличии include листов проверяется домен на вхождение в них. При невхождении в список отказ от дурения. Если все include листы пустые, это приравнивается к отсутствию include листов. Ограничение перестает работать. В иных случаях происходит дурение. Нет ни одного списка - дурение всегда. Есть только exclude список - дурение всех, кроме. Есть только include список - дурение только их. Есть оба - дурение только include, кроме exclude.&lt;/p&gt; 
&lt;p&gt;В системе запуска это обыграно следующим образом. Присутствуют 2 include списка : &lt;code&gt;ipset/zapret-hosts-users.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts-users.txt&lt;/code&gt;, &lt;code&gt;ipset/zapret-hosts.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts.txt&lt;/code&gt; и 1 exclude список &lt;code&gt;ipset/zapret-hosts-user-exclude.txt.gz&lt;/code&gt; или &lt;code&gt;ipset/zapret-hosts-user-exclude.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;При режимах фильтрации &lt;code&gt;MODE_FILTER=hostlist&lt;/code&gt; или &lt;code&gt;MODE_FILTER=autohostlist&lt;/code&gt; система запуска передает &lt;strong&gt;nfqws&lt;/strong&gt; или &lt;strong&gt;tpws&lt;/strong&gt; все листы, файлы которых присутствуют. Передача происходит через замену маркеров &lt;code&gt;&amp;lt;HOSTLIST&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;HOSTLIST_NOAUTO&amp;gt;&lt;/code&gt; на реальные параметры &lt;code&gt;--hostlist&lt;/code&gt;, &lt;code&gt;--hostlist-exclude&lt;/code&gt;, &lt;code&gt;--hostlist-auto&lt;/code&gt;. Если вдруг листы include присутствуют, но все они пустые, то работа аналогична отсутствию include листа. Файл есть, но несмотря на это дурится все, кроме exclude. Если вам нужен именно такой режим - не обязательно удалять &lt;code&gt;zapret-hosts-users.txt&lt;/code&gt;. Достаточно сделать его пустым.&lt;/p&gt; 
&lt;p&gt;Поддомены учитываются автоматически. Например, строчка &quot;ru&quot; вносит в список &quot;&lt;em&gt;.ru&quot;. Строчка &quot;&lt;/em&gt;.ru&quot; в списке не сработает. Можно использовать символ &lt;code&gt;^&lt;/code&gt; в начале хоста, чтобы отказаться от автоматического учета поддоменов.&lt;/p&gt; 
&lt;p&gt;Список доменов РКН может быть получен скриптами&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ipset/get_reestr_hostlist.sh
ipset/get_antizapret_domains.sh
ipset/get_reestr_resolvable_domains.sh
ipset/get_refilter_domains.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Он кладется в &lt;code&gt;ipset/zapret-hosts.txt.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;При изменении времени модификации или размера файлов списки перечитываются автоматически. После неатомарных операций изменения можно послать tpws/nfqws сигнал HUP для принудительной перечитки всех листов.&lt;/p&gt; 
&lt;p&gt;При фильтрации по именам доменов демон должен запускаться без фильтрации по ipset. tpws и nfqws решают нужно ли применять дурение в зависимости от хоста, полученного из протокола прикладного уровня (http, tls, quic). При использовании больших списков, в том числе списка РКН, оцените объем RAM на роутере ! Если после запуска демона RAM под завязку или случаются oom, значит нужно отказаться от таких больших списков.&lt;/p&gt; 
&lt;h2&gt;Режим фильтрации autohostlist&lt;/h2&gt; 
&lt;p&gt;Этот режим позволяет проанализировать как запросы со стороны клиента, так и ответы от сервера. Если хост еще не находится ни в каких листах и обнаруживается ситуация, похожая на блокировку, происходит автоматическое добавление хоста в список &lt;code&gt;autohostlist&lt;/code&gt; как в памяти, так и в файле. &lt;strong&gt;nfqws&lt;/strong&gt; или &lt;strong&gt;tpws&lt;/strong&gt; сами ведут этот файл. Чтобы какой-то хост не смог попась в &lt;code&gt;autohostlist&lt;/code&gt; используйте &lt;code&gt;hostlist-exclude&lt;/code&gt;. Если он все-же туда попал - удалите запись из файла вручную. Процессы автоматически перечитают файл. &lt;strong&gt;tpws&lt;/strong&gt;/&lt;strong&gt;nfqws&lt;/strong&gt; сами назначают владельцем файла юзера, под которым они работают после сброса привилегий, чтобы иметь возможность обновлять лист.&lt;/p&gt; 
&lt;p&gt;В случае &lt;strong&gt;nfqws&lt;/strong&gt; данный режим требует перенаправления в том числе и входящего трафика. Крайне рекомендовано использовать ограничитель &lt;code&gt;connbytes&lt;/code&gt;, чтобы &lt;strong&gt;nfqws&lt;/strong&gt; не обрабатывал гигабайты. По этой же причине не рекомендуется использование режима на BSD системах. Там нет фильтра &lt;code&gt;connbytes&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;На linux системах при использовании nfqws и фильтра connbytes может понадобиться : &lt;code&gt;sysctl net.netfilter.nf_conntrack_tcp_be_liberal=1&lt;/code&gt; Было замечено, что некоторые DPI в России возвращают RST с неверным ACK. Это принимается tcp/ip стеком linux, но через раз приобретает статус INVALID в conntrack. Поэтому правила с &lt;code&gt;connbytes&lt;/code&gt; срабатывают через раз, не пересылая RST пакет &lt;strong&gt;nfqws&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Как вообще могут вести себя DPI, получив &quot;плохой запрос&quot; и приняв решение о блокировке:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Зависание: просто отмораживается, блокируя прохождение пакетов по TCP каналу.&lt;/li&gt; 
 &lt;li&gt;RST: отправляет RST клиенту и/или серверу&lt;/li&gt; 
 &lt;li&gt;Редирект: (только для http) отправляет редирект на сайт-заглушку&lt;/li&gt; 
 &lt;li&gt;Подмена сертификата: (только для https) полный перехват TLS сеанса с попыткой всунуть что-то свое клиенту. Применяется нечасто, поскольку броузеры на такое ругаются.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; и &lt;strong&gt;tpws&lt;/strong&gt; могут сечь варианты 1-3, 4 они не распознают. В силу специфики работы с отдельными пакетами или с TCP каналом tpws и nfqws распознают эти ситуации по-разному. Что считается ситуацией, похожей на блокировку :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws&lt;/strong&gt; Несколько ретрансмиссий первого запроса в TCP сеансе, в котором имеется host.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws,tpws&lt;/strong&gt; RST, пришедший в ответ на первый запрос с хостом.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;nfqws,tpws&lt;/strong&gt; HTTP редирект, пришедший в ответ на первый запрос с хостом, на глобальный адрес с доменом 2 уровня, не совпадающим с доменом 2 уровня оригинального запроса.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;tpws&lt;/strong&gt; закрытие соединения клиентом после отправки первого запроса с хостом, если не было на него ответа со стороны сервера. Это обычно случается по таймауту, когда нет ответа (случай &quot;зависание&quot;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Чтобы снизить вероятность ложных срабатываний, имеется счетчик ситуаций, похожих на блокировку. Если за определенное время произойдет более определенного их количества, хост считается заблокированным и заносится в &lt;code&gt;autohostlist&lt;/code&gt;. По нему сразу же начинает работать стратегия по обходу блокировки. Если в процессе счета вебсайт отвечает без признаков блокировки, счетчик сбрасывается. Вероятно, это был временный сбой сайта.&lt;/p&gt; 
&lt;p&gt;На практике работа с данным режимом выглядит так. Первый раз пользователь заходит на сайт и получает заглушку, сброс соединения или броузер подвисает, вываливаясь по таймауту с сообщением о невозможности загрузить страницу. Надо долбить F5, принуждая броузер повторять попытки. После некоторой попытки сайт начинает работать, и дальше он будет работать всегда.&lt;/p&gt; 
&lt;p&gt;С этим режимом можно использовать техники обхода, ломающие значительное количество сайтов. Если сайт не ведет себя как заблокированный, значит обход применен не будет. В противном случае терять все равно нечего. Однако, могут быть временные сбои сервера, приводящие к ситуации, аналогичной блокировке. Могут происходить ложные срабатывания. Если такое произошло, стратегия может начать ломать незаблокированный сайт. Эту ситуацию, увы, придется вам контролировать вручную. Заносите такие домены в &lt;code&gt;ipset/zapret-hosts-user-exclude.txt&lt;/code&gt;, чтобы избежать повторения. Чтобы впоследствии разобраться почему домен был занесен в лист, можно включить &lt;code&gt;autohostlist debug log&lt;/code&gt;. Он полезен тем, что работает без постоянного просмотра вывода &lt;strong&gt;nfqws&lt;/strong&gt; в режиме debug. В лог заносятся только основные события, ведущие к занесению хоста в лист. По логу можно понять как избежать ложных срабатываний и подходит ли вообще вам этот режим.&lt;/p&gt; 
&lt;p&gt;Можно использовать один &lt;code&gt;autohostlist&lt;/code&gt; с множеством процессов. Все процессы проверяют время модификации файла. Если файл был изменен в другом процессе, происходит его перечитывание. Все процессы должны работать под одним uid, чтобы были права доступа на файл.&lt;/p&gt; 
&lt;p&gt;Скрипты &lt;code&gt;zapret&lt;/code&gt; ведут &lt;code&gt;autohostlist&lt;/code&gt; в &lt;code&gt;ipset/zapret-hosts-auto.txt&lt;/code&gt;. &lt;code&gt;install_easy.sh&lt;/code&gt; при апгрейде &lt;code&gt;zapret&lt;/code&gt; сохраняет этот файл. Режим &lt;code&gt;autohostlist&lt;/code&gt; включает в себя режим &lt;code&gt;hostlist&lt;/code&gt;. Можно вести &lt;code&gt;ipset/zapret-hosts-user.txt&lt;/code&gt;, &lt;code&gt;ipset/zapret-hosts-user-exclude.txt&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Проверка провайдера&lt;/h2&gt; 
&lt;p&gt;Перед настройкой нужно провести исследование какую бяку устроил вам ваш провайдер.&lt;/p&gt; 
&lt;p&gt;Нужно выяснить не подменяет ли он DNS и какой метод обхода DPI работает. В этом вам поможет скрипт &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Если DNS подменяется, но провайдер не перехватывает обращения к сторонним DNS, поменяйте DNS на публичный. Например: 8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1, 9.9.9.9 Если DNS подменяется и провайдер перехватывает обращения к сторонним DNS, настройте &lt;code&gt;dnscrypt&lt;/code&gt;. Еще один эффективный вариант - использовать ресолвер от yandex 77.88.8.88 на нестандартном порту 1253. Многие провайдеры не анализируют обращения к DNS на нестандартных портах. &lt;code&gt;blockcheck&lt;/code&gt; если видит подмену DNS автоматически переключается на DoH сервера.&lt;/p&gt; 
&lt;p&gt;Следует прогнать &lt;code&gt;blockcheck&lt;/code&gt; по нескольким заблокированным сайтам и выявить общий характер блокировок. Разные сайты могут быть заблокированы по-разному, нужно искать такую технику, которая работает на большинстве. Чтобы записать вывод &lt;code&gt;blockcheck.sh&lt;/code&gt; в файл, выполните: &lt;code&gt;./blockcheck.sh | tee /tmp/blockcheck.txt&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Проанализируйте какие методы дурения DPI работают, в соответствии с ними настройте &lt;code&gt;/opt/zapret/config&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Имейте в виду, что у провайдеров может быть несколько DPI или запросы могут идти через разные каналы по методу балансировки нагрузки. Балансировка может означать, что на разных ветках разные DPI или они находятся на разных хопах. Такая ситуация может выражаться в нестабильности работы обхода. Дернули несколько раз curl. То работает, то connection reset или редирект. &lt;code&gt;blockcheck.sh&lt;/code&gt; выдает странноватые результаты. То split работает на 2-м. хопе, то на 4-м. Достоверность результата вызывает сомнения. В этом случае задайте несколько повторов одного и того же теста. Тест будет считаться успешным только, если все попытки пройдут успешно.&lt;/p&gt; 
&lt;p&gt;При использовании &lt;code&gt;autottl&lt;/code&gt; следует протестировать как можно больше разных доменов. Эта техника может на одних провайдерах работать стабильно, на других потребуется выяснить при каких параметрах она стабильна, на третьих полный хаос, и проще отказаться.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Blockcheck&lt;/code&gt; имеет 3 уровня сканирования.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;quick&lt;/code&gt; - максимально быстро найти хоть что-то работающее.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;standard&lt;/code&gt; дает возможность провести исследование как и на что реагирует DPI в плане методов обхода.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;force&lt;/code&gt; дает максимум проверок даже в случаях, когда ресурс работает без обхода или с более простыми стратегиями.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Есть ряд других параметров, которые не будут спрашиваться в диалоге, но которые можно переопределить через переменные.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CURL - замена программы curl
CURL_MAX_TIME - время таймаута curl в секундах
CURL_MAX_TIME_QUIC - время таймаута curl для quic. если не задано, используется значение CURL_MAX_TIME
CURL_MAX_TIME_DOH - время таймаута curl для DoH серверов
CURL_CMD=1 - показывать команды curl
CURL_OPT - дополнительные параметры curl. `-k` - игнор сертификатов. `-v` - подробный вывод протокола
DOMAINS - список тестируемых доменов через пробел
IPVS=4|6|46 - тестируемые версии ip протокола
ENABLE_HTTP=0|1 - включить тест plain http
ENABLE_HTTPS_TLS12=0|1 - включить тест https TLS 1.2
ENABLE_HTTPS_TLS13=0|1 - включить тест https TLS 1.3
ENABLE_HTTP3=0|1 - включить тест QUIC
REPEATS - количество попыток тестирования
PARALLEL=0|1 - включить параллельные попытки. может обидеть сайт из-за долбежки и привести к неверному результату
SCANLEVEL=quick|standard|force - уровень сканирования
BATCH=1 - пакетный режим без вопросов и ожидания ввода в консоли
HTTP_PORT, HTTPS_PORT, QUIC_PORT - номера портов для соответствующих протоколов
SKIP_DNSCHECK=1 - отказ от проверки DNS
SKIP_IPBLOCK=1 - отказ от тестов блокировки по порту или IP
SKIP_TPWS=1 - отказ от тестов tpws
SKIP_PKTWS=1 - отказ от тестов nfqws/dvtws/winws
PKTWS_EXTRA, TPWS_EXTRA - дополнительные параметры nfqws/dvtws/winws и tpws, указываемые после основной стратегии
PKTWS_EXTRA_1 .. PKTWS_EXTRA_9, TPWS_EXTRA_1 .. TPWS_EXTRA_9 - отдельно дополнительные параметры, содержащие пробелы
PKTWS_EXTRA_PRE - дополнительные параметры для nfqws/dvtws/winws, указываемые перед основной стратегией
PKTWS_EXTRA_PRE_1 .. PKTWS_EXTRA_PRE_9 - отдельно дополнительные параметры, содержащие пробелы
SECURE_DNS=0|1 - принудительно выключить или включить DoH
DOH_SERVERS - список URL DoH через пробел для автоматического выбора работающего сервера
DOH_SERVER - конкретный DoH URL, отказ от поиска
UNBLOCKED_DOM - незаблокированный домен, который используется для тестов IP block
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Пример запуска с переменными:&lt;br /&gt; &lt;code&gt;SECURE_DNS=1 SKIP_TPWS=1 CURL_MAX_TIME=1 CURL=/tmp/curl ./blockcheck.sh&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;СКАН ПОРТОВ&lt;/strong&gt;&lt;br /&gt; Если в системе присутствует совместимый &lt;code&gt;netcat&lt;/code&gt; (ncat от nmap или openbsd ncat. в OpenWrt по умолчанию нет), то выполняется сканирование портов http или https всех IP адресов домена. Если ни один IP не отвечает, то результат очевиден. Можно останавливать сканирование. Автоматически оно не остановится, потому что netcat-ы недостаточно подробно информируют о причинах ошибки. Если доступна только часть IP, то можно ожидать хаотичных сбоев, т.к. подключение идет к случайному адресу из списка.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ПРОВЕРКА НА ЧАСТИЧНЫЙ IP block&lt;/strong&gt;&lt;br /&gt; Под частичным блоком подразумевается ситуация, когда коннект на порты есть, но по определенному транспортному или прикладному протоколу всегда идет реакция DPI вне зависимости от запрашиваемого домена. Эта проверка так же не выдаст автоматического вердикта/решения, потому что может быть очень много вариаций. Вместо этого анализ происходящего возложен на самого пользователя или тех, кто будет читать лог. Суть этой проверки в попытке дернуть неблокированный IP с блокированным доменом и наоборот, анализируя при этом реакцию DPI. Реакция DPI обычно проявляется в виде таймаута (зависание запроса), connection reset или http redirect на заглушку. Любой другой вариант скорее всего говорит об отсутствии реакции DPI. В частности, любые http коды, кроме редиректа, ведущего именно на заглушку, а не куда-то еще. На TLS - ошибки handshake без задержек. Ошибка сертификата может говорить как о реакции DPI с MiTM атакой (подмена сертификата), так и о том, что принимающий сервер неблокированного домена все равно принимает ваш TLS &lt;code&gt;handshake&lt;/code&gt; с чужим доменом, пытаясь при этом выдать сертификат без запрошенного домена. Требуется дополнительный анализ. Если на заблокированный домен есть реакция на всех IP адресах, значит есть блокировка по домену. Если на неблокированный домен есть реакция на IP адресах блокированного домена, значит имеет место блок по IP. Соответственно, если есть и то, и другое, значит есть и блок по IP, и блок по домену. Неблокированный домен первым делом проверяется на доступность на оригинальном адресе. При недоступности тест отменяется, поскольку он будет неинформативен.&lt;/p&gt; 
&lt;p&gt;Если выяснено, что есть частичный блок по IP на DPI, то скорее всего все остальные тесты будут провалены вне зависимости от стратегий обхода. Но бывают и некоторые исключения. Например, пробитие через &lt;code&gt;ipv6 option headers&lt;/code&gt;. Или сделать так, чтобы он не мог распознать протокол прикладного уровня. Дальнейшие тесты могут быть не лишены смысла.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ПРИМЕРЫ БЛОКИРОВКИ ТОЛЬКО ПО ДОМЕНУ БЕЗ БЛОКА ПО IP&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; testing iana.org on it&#39;s original
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (28) Operation timed out after 1002 milliseconds with 0 bytes received
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
HTTP/1.1 409 Conflict
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
HTTP/1.1 409 Conflict

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (28) Connection timed out after 1001 milliseconds
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
HTTP/1.1 307 Temporary Redirect
Location: https://www.gblnet.net/blocked.php
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
HTTP/1.1 409 Conflict
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
HTTP/1.1 409 Conflict

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing rutracker.org on 192.0.43.8 (iana.org)
curl: (35) Recv failure: Connection reset by peer
&amp;gt; testing iana.org on 172.67.182.196 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&amp;gt; testing iana.org on 104.21.32.39 (rutracker.org)
curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;ПРИМЕР ПОЛНОГО IP БЛОКА ИЛИ БЛОКА TCP ПОРТА ПРИ ОТСУТСТВИИ БЛОКА ПО ДОМЕНУ&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;* port block tests ipv4 startmail.com:80
  ncat -z -w 1 145.131.90.136 80
  145.131.90.136 does not connect. netcat code 1
  ncat -z -w 1 145.131.90.152 80
  145.131.90.152 does not connect. netcat code 1

* curl_test_http ipv4 startmail.com
- checking without DPI bypass
  curl: (28) Connection timed out after 2002 milliseconds
  UNAVAILABLE code=28

- IP block tests (requires manual interpretation)

&amp;gt; testing iana.org on it&#39;s original ip
!!!!! AVAILABLE !!!!!
&amp;gt; testing startmail.com on 192.0.43.8 (iana.org)
HTTP/1.1 302 Found
Location: https://www.iana.org/
&amp;gt; testing iana.org on 145.131.90.136 (startmail.com)
curl: (28) Connection timed out after 2002 milliseconds
&amp;gt; testing iana.org on 145.131.90.152 (startmail.com)
curl: (28) Connection timed out after 2002 milliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Выбор параметров&lt;/h2&gt; 
&lt;p&gt;Файл &lt;code&gt;/opt/zapret/config&lt;/code&gt; используется различными компонентами системы и содержит основные настройки. Его нужно просмотреть и при необходимости отредактировать.&lt;/p&gt; 
&lt;p&gt;На linux системах можно выбрать использовать &lt;code&gt;iptables&lt;/code&gt; или &lt;code&gt;nftables&lt;/code&gt;. По умолчанию на традиционных linux выбирается &lt;code&gt;nftables&lt;/code&gt;, если установлен nft. На OpenWrt по умолчанию выбирается &lt;code&gt;nftables&lt;/code&gt; на новых версиях с firewall4.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;FWTYPE=iptables&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;На &lt;code&gt;nftables&lt;/code&gt; можно отключить стандартную схему перехвата трафика после NAT и перейти на перехват до NAT. Это сделает невозможным применение некоторых методов дурения на проходящем трафике как в случае с &lt;code&gt;iptables&lt;/code&gt;. nfqws начнет получать адреса пакетов из локальной сети и отображать их в логах.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;POSTNAT=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Существует 3 стандартных опции запуска, настраиваемых раздельно и независимо: &lt;code&gt;tpws-socks&lt;/code&gt;, &lt;strong&gt;tpws&lt;/strong&gt;, &lt;strong&gt;nfqws&lt;/strong&gt;. Их можно использовать как по отдельности, так и вместе. Например, вам надо сделать комбинацию из методов, доступных только в &lt;strong&gt;tpws&lt;/strong&gt; и только в &lt;strong&gt;nfqws&lt;/strong&gt;. Их можно задействовать вместе. &lt;strong&gt;tpws&lt;/strong&gt; будет прозрачно локализовывать трафик на системе и применять свое дурение, &lt;strong&gt;nfqws&lt;/strong&gt; будет дурить трафик, исходящий с самой системы после обработки на &lt;strong&gt;tpws&lt;/strong&gt;. А можно на эту же систему повесить без параметров socks proxy, чтобы получать доступ к обходу блокировок через прокси. Таким образом, все 3 режима вполне могут задействоваться вместе. Так же безусловно и независимо, в добавок к стандартным опциям, применяются все custom скрипты в &lt;code&gt;init.d/{sysv,openwrt,macos}/custom.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Однако, при комбинировании tpws и nfqws с пересечением по L3/L4 протоколам не все так просто , как может показаться на первый взгляд. Первым всегда работает tpws, за ним - nfqws. На nfqws попадает уже &quot;задуренный&quot; трафик от tpws. Получается, что дурилка дурит дурилку, и дурилка не срабатывает, потому что ее задурили. Вот такой веселый момент. nfqws перестает распознавать протоколы и применять методы. Некоторые методы дурения от tpws nfqws в состоянии распознать и отработать корректно, но большинство - нет. Решение - использование &lt;code&gt;--dpi-desync-any-protocol&lt;/code&gt; в nfqws и работа как с неизвестным протоколом. Комбинирование tpws и nfqws является продвинутым вариантом, требующим глубокого понимания происходящего. Очень желательно проанализировать действия nfqws по &lt;code&gt;--debug&lt;/code&gt; логу. Все ли так, как вы задумали.&lt;/p&gt; 
&lt;p&gt;Одновременное использование tpws и nfqws без пересечения по L3/L4 (то есть nfqws - udp, tpws - tcp или nfqws - port 443, tpws - port 80 или nfqws - ipv4, tpws - ipv6) проблем не представляет.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;tpws-socks&lt;/code&gt; требует настройки параметров &lt;strong&gt;tpws&lt;/strong&gt;, но не требует перехвата трафика. Остальные опции требуют раздельно настройки перехвата трафика и опции самих демонов. Каждая опция предполагает запуск одного инстанса соответствующего демона. Все различия методов дурения для &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;quic&lt;/code&gt; и т.д. должны быть отражены через схему мультистратегий. В этом смысле настройка похожа на вариант &lt;code&gt;winws&lt;/code&gt; на Windows, а перенос конфигов не должен представлять больших сложностей.&lt;/p&gt; 
&lt;p&gt;Основное правило настройки перехвата - перехватывайте только необходимый минимум. Любой перехват лишнего - это бессмысленная нагрузка на вашу систему. Опции демонов &lt;code&gt;--ipset&lt;/code&gt; использовать нужно с умом. Не стоит перехватывать весь трафик, чтобы потом по параметру --ipset выделить лишь горстку IP. Это будет работать, но очень неэффективно с точки зрения нагрузки на систему. Используйте &lt;code&gt;ipset&lt;/code&gt;-ы режима ядра. При необходимости пишите и задействуйте &lt;code&gt;custom scripts&lt;/code&gt;. Но если у вас и так идет работа по всем IP, и нужно написать небольшую специализацию по IP, то --ipset вполне уместен.&lt;/p&gt; 
&lt;p&gt;Настройки демонов можно для удобства писать на нескольких строках, используя двойные или одинарные кавычки. Чтобы задействовать стандартные обновляемые хост-листы из каталога &lt;code&gt;ipset&lt;/code&gt;, используйте маркер 
 &lt;hostlist&gt;
  . Он будет заменен на параметры, соответствующие режиму MODE_FILTER, и будут подставлены реально существующие файлы. Если MODE_FILTER не предполагает стандартного хостлиста, 
  &lt;hostlist&gt;
    будет заменен на пустую строку. Стандартные хостлисты следует вставлять в финальных стратегиях (стратегиях по умолчанию), закрывающих цепочки по группе параметров фильтра. Таких мест может быть несколько. Не нужно использовать 
   &lt;hostlist&gt;
     в узких специализациях и в тех профилях, по которым точно не будет проходить трафик с известными протоколами, откуда поддерживается извлечение имени хоста (
    &lt;code&gt;http&lt;/code&gt;, 
    &lt;code&gt;tls&lt;/code&gt;, 
    &lt;code&gt;quic&lt;/code&gt;). &amp;lt;HOSTLIST_NOAUTO&amp;gt; - это вариация, при которой стандартный автолист используется как обычный. То есть на этом профиле не происходит автоматическое добавление заблокированных доменов. Но если на другом профиле что-то будет добавлено, то этот профиль примет изменения автоматически.
   &lt;/hostlist&gt;
  &lt;/hostlist&gt;
 &lt;/hostlist&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Изменение бита mark для предотвращения зацикливания&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;DESYNC_MARK=0x40000000&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Изменение бита mark для пометки пакетов, проходящих по POSTNAT схеме (только nftables)&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;DESYNC_MARK_POSTNAT=0x20000000&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Если раскоментировано, пометка пакетов, которые должны быть обработаны zapret.&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;#FILTER_MARK_POSTNAT=0x10000000&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Бит должен быть установлен вашими собственными правилами.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Для iptables - в цепочках mangle PREROUTING и mangle OUTPUT перед правилами zapret (iptables -I &lt;em&gt;после&lt;/em&gt; применения правил zapret).&lt;/li&gt; 
 &lt;li&gt;Для nftables - в хуках output и prerouting с приоритетом -102 или ниже.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Критерии пометки любые. Например, IP адрес или интерфейс источника. Это ответ на вопрос &quot;как мне сделать, чтобы телик не ходил через zapret или чтобы через него ходил только мой комп&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции tpws в режиме socks&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;TPWS_SOCKS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;На каком порту будет слушать tpws socks. прослушивается только localhost и LAN&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;TPPORT_SOCKS=987&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры tpws для режима socks&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TPWS_SOCKS_OPT=&quot;
--filter-tcp=80 --methodeol &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --split-pos=1,midsld --disorder &amp;lt;HOSTLIST&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции tpws в прозрачном режиме&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;TPWS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Какие tcp порты следует перенаправлять на tpws&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;TPWS_PORTS=80,443&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры tpws для прозрачного режима&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;TPWS_OPT=&quot;
--filter-tcp=80 --methodeol &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --split-pos=1,midsld --disorder &amp;lt;HOSTLIST&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включение стандартной опции nfqws&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; &lt;code&gt;NFQWS_ENABLE=0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Какие tcp и udp порты следует перенаправлять на nfqws с использованием connbytes ограничителя&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;connbytes позволяет из каждого соединения перенаправить только заданное количество начальных пакетов по каждому направлению - на вход и на выход. Это более эффективная kernel-mode замена параметра nfqws &lt;code&gt;--dpi-desync-cutoff=nX&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_PORTS_TCP=80,443
NFQWS_PORTS_UDP=443
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Сколько начальных входящих и исходящих пакетов нужно перенаправлять на nfqws по каждому направлению&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_TCP_PKT_OUT=$((6+$AUTOHOSTLIST_RETRANS_THRESHOLD))
NFQWS_TCP_PKT_IN=3
NFQWS_UDP_PKT_OUT=$((6+$AUTOHOSTLIST_RETRANS_THRESHOLD))
NFQWS_UDP_PKT_IN=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Задать порты для перенаправления на nfqws без connbytes ограничителя&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt; Есть трафик, исходящий сеанс для которого необходимо перенаправлять весь без ограничителей. Типичное применение - поддержка http keepalives на stateless DPI. Это существенно нагружает процессор. Использовать только если понимаете зачем. Чаще всего это не нужно. Входящий трафик ограничивается по connbytes через параметры PKT_IN. Если указываете здесь какие-то порты, желательно их убрать из версии с connbytes ограничителем&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_PORTS_TCP_KEEPALIVE=80
NFQWS_PORTS_UDP_KEEPALIVE=
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Параметры nfqws&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NFQWS_OPT=&quot;
--filter-tcp=80 --dpi-desync=fake,multisplit --dpi-desync-split-pos=method+2 --dpi-desync-fooling=md5sig &amp;lt;HOSTLIST&amp;gt; --new
--filter-tcp=443 --dpi-desync=fake,multidisorder --dpi-desync-split-pos=1,midsld --dpi-desync-fooling=badseq,md5sig &amp;lt;HOSTLIST&amp;gt; --new
--filter-udp=443 --dpi-desync=fake --dpi-desync-repeats=6 &amp;lt;HOSTLIST_NOAUTO&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Режим фильтрации хостов:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;none - применять дурение ко всем хостам
ipset - ограничить дурение ipset-ом zapret/zapret6
hostlist - ограничить дурение списком хостов из файла
autohostlist - режим hostlist + распознавание блокировок и ведение автоматического листа
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;MODE_FILTER=none&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Настройка системы управления выборочным traffic offload (только если поддерживается)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;donttouch: выборочное управление отключено, используется системная настройка, простой инсталлятор выключает системную настройку, если она не совместима с выбранным режимом
none: выборочное управление отключено, простой инсталлятор выключает системную настройку
software: выборочное управление включено в режиме software, простой инсталлятор выключает системную настройку
hardware: выборочное управление включено в режиме hardware, простой инсталлятор выключает системную настройку
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FLOWOFFLOAD=donttouch&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Параметр &lt;code&gt;GETLIST&lt;/code&gt; указывает инсталлятору &lt;code&gt;install_easy.sh&lt;/code&gt; какой скрипт дергать для обновления списка заблокированных ip или хостов. Он же вызывается через &lt;code&gt;get_config.sh&lt;/code&gt; из запланированных заданий (crontab или systemd timer). Поместите сюда название скрипта, который будете использовать для обновления листов. Если не нужно, то параметр следует закомментировать.&lt;/p&gt; 
&lt;p&gt;Можно индивидуально отключить ipv4 или ipv6. Если параметр закомментирован или не равен &quot;1&quot;, использование протокола разрешено.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DISABLE_IPV4=1
DISABLE_IPV6=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Количество потоков для многопоточного DNS ресолвера mdig (1..100). Чем их больше, тем быстрее, но не обидится ли на долбежку ваш DNS сервер?&lt;br /&gt; &lt;code&gt;MDIG_THREADS=30&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Место для хранения временных файлов. При скачивании огромных реестров в &lt;code&gt;/tmp&lt;/code&gt; места может не хватить. Если файловая система на нормальном носителе (не встроенная память роутера), то можно указать место на флэшке или диске. &lt;code&gt;TMPDIR=/opt/zapret/tmp&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Опции для создания ipset-ов и nfset-ов&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SET_MAXELEM=262144
IPSET_OPT=&quot;hashsize 262144 maxelem 2097152&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Хук, позволяющий внести ip адреса динамически. $1 = имя таблицы&lt;br /&gt; Адреса выводятся в stdout. В случае nfset автоматически решается проблема возможного пересечения интервалов.&lt;br /&gt; &lt;code&gt;IPSET_HOOK=&quot;/etc/zapret.ipset.hook&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ПРО РУГАНЬ в dmesg по поводу нехватки памяти.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Может так случиться, что памяти в системе достаточно, но при попытке заполнить огромный &lt;code&gt;ipset&lt;/code&gt; ядро начинает громко ругаться, &lt;code&gt;ipset&lt;/code&gt; заполняется не полностью.&lt;br /&gt; Вероятная причина в том, что превышается &lt;code&gt;hashsize&lt;/code&gt;, заданный при создании &lt;code&gt;ipset&lt;/code&gt; (create_ipset.sh). Происходит переаллокация списка, не находится непрерывных фрагментов памяти нужной длины. Это лечится увеличением &lt;code&gt;hashsize&lt;/code&gt;. Но чем больше &lt;code&gt;hashsize&lt;/code&gt;, тем больше занимает &lt;code&gt;ipset&lt;/code&gt; в памяти. Задавать слишком большой &lt;code&gt;hashsize&lt;/code&gt; для недостаточно больших списков нецелесообразно.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Опции для вызова ip2net. Отдельно для листов ipv4 и ipv6.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IP2NET_OPT4=&quot;--prefix-length=22-30 --v4-threshold=3/4&quot;
IP2NET_OPT6=&quot;--prefix-length=56-64 --v6-threshold=5&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Настройка режима autohostlist.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;При увеличении AUTOHOSTLIST_RETRANS_THRESHOLD и использовании nfqws следует пересмотреть значения параметров NFQWS_TCP_PKT_OUT и NFQWS_UDP_PKT_OUT. Все ретрансмиссии должны быть получены nfqws, иначе триггер &quot;зависание запроса&quot; не сработает.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;AUTOHOSTLIST_RETRANS_THRESHOLD=3
AUTOHOSTLIST_FAIL_THRESHOLD=3
AUTOHOSTLIST_FAIL_TIME=60
AUTOHOSTLIST_DEBUG=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Включить или выключить сжатие больших листов в скриптах ipset/*.sh.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;GZIP_LISTS=1&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Команда для перезагрузки ip таблиц фаервола.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Если не указано или пустое, выбирается автоматически ipset или ipfw при их наличии. На BSD системах с PF нет автоматической загрузки. Там нужно указать команду явно: &lt;code&gt;pfctl -f /etc/pf.conf&lt;/code&gt; На более новых pfctl (есть в новых FreeBSD, нет в OpenBSD 6.8) можно дать команду загрузки только таблиц: &lt;code&gt;pfctl -Tl -f /etc/pf.conf&lt;/code&gt; &quot;-&quot; означает отключение загрузки листов даже при наличии поддерживаемого backend.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LISTS_RELOAD=&quot;pfctl -f /etc/pf.conf&quot;
LISTS_RELOAD=-
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;В OpenWrt существует сеть по умолчанию &#39;lan&#39;. Только трафик с этой сети будет перенаправлен на tpws. Но возможно задать другие сети или список сетей:&lt;br /&gt; &lt;code&gt;OPENWRT_LAN=&quot;lan lan2 lan3&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;В OpenWrt в качестве wan берутся интерфейсы, имеющие default route. Отдельно для ipv4 и ipv6. Это можно переопределить:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;OPENWRT_WAN4=&quot;wan4 vpn&quot;
OPENWRT_WAN6=&quot;wan6 vpn6&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Параметр &lt;code&gt;INIT_APPLY_FW=1&lt;/code&gt; разрешает init скрипту самостоятельно применять правила iptables.&lt;br /&gt; При иных значениях или если параметр закомментирован, правила применены не будут.&lt;br /&gt; Это полезно, если у вас есть система управления фаерволом, в настройки которой и следует прикрутить правила.&lt;br /&gt; На OpenWrt неприменимо при использовании firewall3+iptables.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;FILTER_TTL_EXPIRED_ICMP=1&lt;/code&gt; включает механизмы блокировки пакетов icmp time exceeded, высылаемые роутерами по пути следования пакета в ответ на исчерпание TTL/HL. В linux соединение обрывается системой, если в ответ на первый пакет (для tcp - SYN) пришел такой icmp. Аналогичная схема имеется и в datagram сокетах. Блокировка icmp идет исключительно за счет средств iptables/nftables. Чтобы не трогать весь трафик, в режиме PRENAT используется connmark для пометки сеансов, над которыми поработал nfqws. В режиме POSTNAT так сделать нельзя, поэтому помечаются все сеансы, заворачиваемые на nfqws. Настройку лучше отключить, если вы не ожидаете проблем от icmp, тк в этом случае будет меньше ненужных вмешательств в трафик.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Следующие настройки не актуальны для openwrt:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Если ваша система работает как роутер, то нужно вписать названия внутренних и внешних интерфейсов:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IFACE_LAN=eth0
IFACE_WAN=eth1
IFACE_WAN6=&quot;henet ipsec0&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Несколько интерфейсов могут быть вписаны через пробел. Если IFACE_WAN6 не задан, то берется значение IFACE_WAN.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Настройка маршрутизации, маскарада и т.д. не входит в задачу zapret. Включаются только режимы, обеспечивающие перехват транзитного трафика. Возможно определить несколько интерфейсов следующим образом:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;IFACE_LAN=&quot;eth0 eth1 eth2&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Прикручивание к системе управления фаерволом или своей системе запуска&lt;/h2&gt; 
&lt;p&gt;Если вы используете какую-то систему управления фаерволом, то она может вступать в конфликт с имеющимся скриптом запуска. При повторном применении правил она могла бы поломать настройки iptables от zapret. В этом случае правила для iptables должны быть прикручены к вашему фаерволу отдельно от запуска tpws или nfqws.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Следующие вызовы позволяют применить или убрать правила iptables отдельно:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/zapret start_fw
/opt/zapret/init.d/sysv/zapret stop_fw
/opt/zapret/init.d/sysv/zapret restart_fw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;А так можно запустить или остановить демоны отдельно от фаервола:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/zapret start_daemons
/opt/zapret/init.d/sysv/zapret stop_daemons
/opt/zapret/init.d/sysv/zapret restart_daemons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;nftables&lt;/code&gt; сводят практически на нет конфликты между разными системами управления, поскольку позволяют использовать независимые таблицы и хуки. Используется отдельная nf-таблица &quot;zapret&quot;. Если ваша система ее не будет трогать, скорее всего все будет нормально.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Для &lt;code&gt;nftables&lt;/code&gt; предусмотрено несколько дополнительных вызовов:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Посмотреть set-ы интерфейсов, относящихся к lan, wan и wan6. По ним идет завертывание трафика. А так же таблицу flow table с именами интерфейсов ingress hook.&lt;br /&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret list_ifsets&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Обновить set-ы интерфейсов, относящихся к lan, wan и wan6. Для традиционных linux список интерфейсов берется из переменных конфига IFACE_LAN, IFACE_WAN. Для OpenWrt определяется автоматически. Множество lanif может быть расширено параметром OPENWRT_LAN. Все интерфейсы lan и wan так же добавляются в ingress hook от flow table.&lt;br /&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret reload_ifsets&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Просмотр таблицы без содержимого set-ов. Вызывает &lt;code&gt;nft -t list table inet zapret&lt;/code&gt;&lt;br /&gt; &lt;code&gt;/opt/zapret/init.d/sysv/zapret list_table&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Так же возможно прицепиться своим скриптом к любой стадии применения и снятия фаервола со стороны zapret скриптов:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;INIT_FW_PRE_UP_HOOK=&quot;/etc/firewall.zapret.hook.pre_up&quot;
INIT_FW_POST_UP_HOOK=&quot;/etc/firewall.zapret.hook.post_up&quot;
INIT_FW_PRE_DOWN_HOOK=&quot;/etc/firewall.zapret.hook.pre_down&quot;
INIT_FW_POST_DOWN_HOOK=&quot;/etc/firewall.zapret.hook.post_down&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Эти настройки доступны в config. Может быть полезно, если вам нужно использовать nftables set-ы, например &lt;code&gt;ipban&lt;/code&gt;/&lt;code&gt;ipban6&lt;/code&gt;. nfset-ы принадлежат только одной таблице, следовательно вам придется писать правила для таблицы zapret, а значит нужно синхронизироваться с применением/снятием правил со стороны zapret скриптов.&lt;/p&gt; 
&lt;h2&gt;Вариант custom&lt;/h2&gt; 
&lt;p&gt;custom скрипты - это маленькие shell программы, управляющие нестандартными режимами применения zapret или частными случаями, которые не могут быть интегрированы в основную часть без загромождения и замусоривания кода. Для применения custom следует помещать файлы в следующие директории в зависимости от вашей системы:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/opt/zapret/init.d/sysv/custom.d
/opt/zapret/init.d/openwrt/custom.d
/opt/zapret/init.d/macos/custom.d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Директория будет просканирована в алфавитном порядке, и каждый скрипт будет применен.&lt;/p&gt; 
&lt;p&gt;В &lt;code&gt;init.d&lt;/code&gt; имеется &lt;code&gt;custom.d.examples.linux&lt;/code&gt;, в &lt;code&gt;init.d/macos&lt;/code&gt; - &lt;code&gt;custom.d.examples&lt;/code&gt;. Это готовые скрипты, которые можно копировать в &lt;code&gt;custom.d&lt;/code&gt;. Их можно взять за основу для написания собственных.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Для linux пишется код в функции&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zapret_custom_daemons
zapret_custom_firewall
zapret_custom_firewall_nft
zapret_custom_firewall_nft_flush
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Для macos&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;zapret_custom_daemons
zapret_custom_firewall_v4
zapret_custom_firewall_v6
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;zapret_custom_daemons поднимает демоны &lt;strong&gt;nfqws&lt;/strong&gt;/&lt;strong&gt;tpws&lt;/strong&gt; в нужном вам количестве и с нужными вам параметрами. В первом параметре передается код операции: 1 = запуск, 0 = останов. Схема запуска демонов в OpenWrt отличается - используется procd. Поэтому логика останова отсутствует за ненадобностью, останов никогда не вызывается.&lt;/p&gt; 
&lt;p&gt;zapret_custom_firewall поднимает и убирает правила &lt;code&gt;iptables&lt;/code&gt;. В первом параметре передается код операции: 1 = запуск, 0 = останов.&lt;/p&gt; 
&lt;p&gt;zapret_custom_firewall_nft поднимает правила nftables. Логика останова отсутствует за ненадобностью. Стандартные цепочки zapret удаляются автоматически. Однако, sets и правила из ваших собственных цепочек не удаляются. Их нужно подчистить в zapret_custom_firewall_nft_flush. Если set-ов и собственных цепочек у вас нет, функцию можно не определять или оставить пустой.&lt;/p&gt; 
&lt;p&gt;Если вам не нужны iptables или nftables - можете не писать соответствующую функцию.&lt;/p&gt; 
&lt;p&gt;В linux можно использовать локальные переменные &lt;code&gt;FW_EXTRA_PRE&lt;/code&gt; и &lt;code&gt;FW_EXTRA_POST&lt;/code&gt;.&lt;br /&gt; &lt;code&gt;FW_EXTRA_PRE&lt;/code&gt; добавляет код к правилам ip/nf tables до кода, генерируемого функциями-хелперами.&lt;br /&gt; &lt;code&gt;FW_EXTRA_POST&lt;/code&gt; добавляет код после.&lt;/p&gt; 
&lt;p&gt;В linux функции-хелперы добавляют правило в начало цепочек, то есть перед уже имеющимися. Поэтому специализации должны идти после более общих вариантов. Для macos правило обратное. Там правила добавляются в конец. По этой же причине фаервол в Linux сначала применяется в стандартном режиме, потом custom, а в MacOS сначала custom, потом стандартный режим.&lt;/p&gt; 
&lt;p&gt;В macos firewall-функции ничего сами никуда не заносят. Их задача - лишь выдать текст в stdout, содержащий правила для pf-якоря. Остальное сделает обертка.&lt;/p&gt; 
&lt;p&gt;Особо обратите внимание на номер демона в функциях &lt;code&gt;run_daemon&lt;/code&gt; , &lt;code&gt;do_daemon&lt;/code&gt;, &lt;code&gt;do_tpws&lt;/code&gt;, &lt;code&gt;do_tpws_socks&lt;/code&gt;, &lt;code&gt;do_nfqws&lt;/code&gt; , номера портов &lt;strong&gt;tpws&lt;/strong&gt; и очередей &lt;strong&gt;nfqueue&lt;/strong&gt;. Они должны быть уникальными во всех скриптах. При накладке будет ошибка. Поэтому используйте функции динамического получения этих значений из пула.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;custom&lt;/code&gt; скрипты могут использовать переменные из &lt;code&gt;config&lt;/code&gt;. Можно помещать в &lt;code&gt;config&lt;/code&gt; свои переменные и задействовать их в скриптах. Можно использовать функции-хелперы. Они являются частью общего пространства функций shell. Полезные функции можно взять из примеров скриптов. Так же смотрите &lt;code&gt;common/*.sh&lt;/code&gt;. Используя хелпер функции, вы избавитесь от необходимости учитывать все возможные случаи типа наличия/отсутствия ipv6, является ли система роутером, имена интерфейсов, ...Хелперы это учитывают. Вам нужно сосредоточиться лишь на фильтрах &lt;code&gt;{ip,nf}tables&lt;/code&gt; и параметрах демонов.&lt;/p&gt; 
&lt;h2&gt;Простая установка&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;install_easy.sh&lt;/code&gt; автоматизирует ручные варианты процедур установки. Он поддерживает OpenWrt, linux системы на базе systemd или openrc и MacOS.&lt;/p&gt; 
&lt;p&gt;Для более гибкой настройки перед запуском инсталлятора следует выполнить раздел &quot;Выбор параметров&quot;.&lt;/p&gt; 
&lt;p&gt;Если система запуска поддерживается, но используется не поддерживаемый инсталлятором менеджер пакетов или названия пакетов не соответствуют прописанным в инсталлятор, пакеты нужно установить вручную. Всегда требуется curl. &lt;code&gt;ipset&lt;/code&gt; - только для режима &lt;code&gt;iptables&lt;/code&gt;, для &lt;code&gt;nftables&lt;/code&gt; - не нужен.&lt;/p&gt; 
&lt;p&gt;Для совсем обрезанных дистрибутивов (alpine) требуется отдельно установить &lt;code&gt;iptables&lt;/code&gt; и &lt;code&gt;ip6tables&lt;/code&gt;, либо &lt;code&gt;nftables&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;В комплекте идут статические бинарники для большинства архитектур. Какой-то из них подойдет с вероятностью 99%. Но если у вас экзотическая система, инсталлятор попробует собрать бинарники сам через make. Для этого нужны gcc, make и необходимые &lt;strong&gt;-dev&lt;/strong&gt; пакеты. Можно форсировать режим компиляции следующим вызовом:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;install_easy.sh make&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Под OpenWrt все уже сразу готово для использования системы в качестве роутера. Имена интерфейсов WAN и LAN известны из настроек системы. Под другими системами роутер вы настраиваете самостоятельно. Инсталлятор в это не вмешивается. Инсталлятор в зависимости от выбранного режима может спросить LAN и WAN интерфейсы. Нужно понимать, что заворот проходящего трафика на &lt;strong&gt;tpws&lt;/strong&gt; в прозрачном режиме происходит до выполнения маршрутизации, следовательно возможна фильтрация по LAN и невозможна по WAN. Решение о завороте на &lt;strong&gt;tpws&lt;/strong&gt; локального исходящего трафика принимается после выполнения маршрутизации, следовательно ситуация обратная: LAN не имеет смысла, фильтрация по WAN возможна. Заворот на &lt;strong&gt;nfqws&lt;/strong&gt; происходит всегда после маршрутизации, поэтому к нему применима только фильтрация по WAN. Возможность прохождения трафика в том или ином направлении настраивается вами в процессе конфигурации роутера.&lt;/p&gt; 
&lt;p&gt;Деинсталляция выполняется через &lt;code&gt;uninstall_easy.sh&lt;/code&gt;. После выполнения деинсталляции можно удалить каталог &lt;code&gt;/opt/zapret&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Установка под systemd&lt;/h2&gt; 
&lt;p&gt;Если вам нравится systemd и хочется максимально под него заточиться, можно отказаться от скриптов запуска zapret и поднимать инстансы &lt;code&gt;tpws&lt;/code&gt; и &lt;code&gt;nfqws&lt;/code&gt; как отдельные юниты systemd. При этом вам придется вручную написать правила iptables/nftables и каким-то образом их поднимать. Например, написать дополнительный systemd unit для этого. Так же требуется собрать бинарники особым образом через &lt;code&gt;make systemd&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;В комплекте zapret есть шаблоны &lt;code&gt;init.d/systemd/{nfqws@.service,tpws@.service}&lt;/code&gt;. Краткий перечень команд для их использования приведен в комментариях в этих файлах.&lt;/p&gt; 
&lt;h2&gt;Простая установка на openwrt&lt;/h2&gt; 
&lt;p&gt;Работает только если у вас на роутере достаточно места.&lt;/p&gt; 
&lt;p&gt;Копируем zapret на роутер в &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Запускаем установщик:&lt;br /&gt; &lt;code&gt;sh /tmp/zapret/install_easy.sh&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Он скопирует в &lt;code&gt;/opt/zapret&lt;/code&gt; только необходимый минимум файлов.&lt;/p&gt; 
&lt;p&gt;После успешной установки можно удалить zapret из tmp для освобождения RAM:&lt;br /&gt; &lt;code&gt;rm -r /tmp/zapret&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Для более гибкой настройки перед запуском инсталлятора следует выполнить раздел &quot;Выбор параметров&quot;.&lt;/p&gt; 
&lt;p&gt;Система простой инсталяции заточена на любое умышленное или неумышленное изменение прав доступа на файлы. Устойчива к репаку под windows. После копирования в &lt;code&gt;/opt&lt;/code&gt; права будут принудительно восстановлены.&lt;/p&gt; 
&lt;h2&gt;Установка на openwrt в режиме острой нехватки места на диске&lt;/h2&gt; 
&lt;p&gt;Требуется около 120-200 кб на диске. Придется отказаться от всего, кроме &lt;strong&gt;tpws&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Инструкция для openwrt 22 и выше с nftables&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Никаких зависимостей устанавливать не нужно.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установка:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Скопируйте все из &lt;code&gt;init.d/openwrt-minimal/tpws/*&lt;/code&gt; в корень openwrt.&lt;/li&gt; 
 &lt;li&gt;Скопируйте бинарник &lt;strong&gt;tpws&lt;/strong&gt; подходящей архитектуры в &lt;code&gt;/usr/bin/tpws&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Установите права на файлы: &lt;code&gt;chmod 755 /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Отредактируйте &lt;code&gt;/etc/config/tpws&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если не нужен ipv6, отредактируйте &lt;code&gt;/etc/nftables.d/90-tpws.nft&lt;/code&gt; и закомментируйте строки с редиректом ipv6.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws enable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw4 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Полное удаление:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws disable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws stop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rm -f /etc/nftables.d/90-tpws.nft /etc/firewall.user /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw4 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Инструкция для openwrt 21 и ниже с iptables&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установите зависимости:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;opkg update&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;opkg install iptables-mod-extra&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;только для IPV6: &lt;code&gt;opkg install ip6tables-mod-nat&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Убедитесь, что в &lt;code&gt;/etc/firewall.user&lt;/code&gt; нет ничего значимого. Если есть - не следуйте слепо инструкции. Объедините код или создайте свой &lt;code&gt;firewall include&lt;/code&gt; в &lt;code&gt;/etc/config/firewall&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Установка:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Скопируйте все из &lt;code&gt;init.d/openwrt-minimal/tpws/*&lt;/code&gt; в корень openwrt.&lt;/li&gt; 
 &lt;li&gt;Скопируйте бинарник &lt;strong&gt;tpws&lt;/strong&gt; подходящей архитектуры в &lt;code&gt;/usr/bin/tpws&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Установите права на файлы: &lt;code&gt;chmod 755 /etc/init.d/tpws /usr/bin/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Отредактируйте &lt;code&gt;/etc/config/tpws&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Если не нужен ipv6, отредактируйте /etc/firewall.user и установите там DISABLE_IPV6=1.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws enable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw3 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Полное удаление:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws disable&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/etc/init.d/tpws stop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rm -f /etc/nftables.d/90-tpws.nft /etc/firewall.user /etc/init.d/tpws&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;touch /etc/firewall.user&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fw3 restart&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Android&lt;/h2&gt; 
&lt;p&gt;Без рута забудьте про nfqws и tpws в режиме transparent proxy. tpws будет работать только в режиме &lt;code&gt;--socks&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Ядра Android имеют поддержку NFQUEUE. nfqws работает.&lt;/p&gt; 
&lt;p&gt;В стоковых ядрах нет поддержки ipset. В общем случае сложность задачи по поднятию ipset варьируется от &quot;не просто&quot; до &quot;почти невозможно&quot;. Если только вы не найдете готовое собранное ядро под ваш девайс.&lt;/p&gt; 
&lt;p&gt;tpws будет работать в любом случае, он не требует чего-либо особенного.&lt;/p&gt; 
&lt;p&gt;Хотя linux варианты под Android работают, рекомендуется использовать специально собранные под bionic бинарники. У них не будет проблем с DNS, с локальным временем и именами юзеров и групп.&lt;br /&gt; Рекомендуется использовать gid 3003 (AID_INET). Иначе можете получить permission denied на создание сокета. Например: &lt;code&gt;--uid 1:3003&lt;/code&gt;&lt;br /&gt; В iptables укажите: &lt;code&gt;! --uid-owner 1&lt;/code&gt; вместо &lt;code&gt;! --uid-owner tpws&lt;/code&gt;.&lt;br /&gt; Напишите шелл скрипт с iptables и tpws, запускайте его средствами вашего рут менеджера. Скрипты автозапуска лежат тут:&lt;br /&gt; magisk : /data/adb/service.d&lt;br /&gt; supersu: /system/su.d&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;nfqws&lt;/strong&gt; может иметь такой глюк. При запуске с uid по умолчанию (0x7FFFFFFF) при условии работы на сотовом интерфейсе и отключенном кабеле внешнего питания система может частично виснуть. Перестает работать тач и кнопки, но анимация на экране может продолжаться. Если экран был погашен, то включить его кнопкой power невозможно. Изменение UID на низкий (--uid 1 подойдет) позволяет решить эту проблему. Глюк был замечен на android 8.1 на девайсе, основанном на платформе mediatek.&lt;/p&gt; 
&lt;p&gt;Ответ на вопрос куда поместить tpws на android без рута, чтобы потом его запускать из приложений. Файл заливаем через adb shell в /data/local/tmp/, лучше всего в субфолдер.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /data/local/tmp/zapret
adb push tpws /data/local/tmp/zapret
chmod 755 /data/local/tmp/zapret /data/local/tmp/zapret/tpws
chcon u:object_r:system_file:s0 /data/local/tmp/zapret/tpws
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Как найти стратегию обхода сотового оператора: проще всего раздать инет на комп. Для этого подойдет любая поддерживаемая ОС. Подключите android через USB кабель к компу и включите режим модема. Прогоните стандартную процедуру blockcheck. При переносе правил на телефон уменьшить TTL на 1, если правила с TTL присутствуют в стратегии. Если проверялось на windows, убрать параметры &lt;code&gt;--wf-*&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Работа blockcheck в android shell не поддерживается, но имея рута можно развернуть rootfs какого-нибудь дистрибутива linux. Это лучше всего делать с компа через adb shell. Если компа нет, то развертка chroot - единственный вариант, хотя и неудобный. Подойдет что-то легковесное, например, alpine или даже OpenWrt. Если это не эмулятор android, то универсальная архитектура - arm (любой вариант). Если вы точно знаете, что ОС у вас 64-разрядная, то лучше вместо arm - arm64. Выяснить архитектуру можно командой &lt;code&gt;uname -a&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mount --bind /dev /data/linux/dev
mount --bind /proc /data/linux/proc
mount --bind /sys /data/linux/sys
chroot /data/linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Первым делом вам нужно будет один раз настроить DNS. Сам он не заведется.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;echo nameserver 1.1.1.1 &amp;gt;/etc/resolv.conf&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Далее нужно средствами пакетного менеджера установить iptables-legacy. Обязательно &lt;strong&gt;НЕ&lt;/strong&gt; iptables-nft, который, как правило, присутствует по умолчанию. В ядре android нет nftables.&lt;br /&gt; &lt;code&gt;ls -la $(which iptables)&lt;/code&gt;&lt;br /&gt; Линк должен указывать на legacy вариант. Если нет, значит устанавливайте нужные пакеты вашего дистрибутива, и убеждайтесь в правильности ссылок.&lt;br /&gt; &lt;code&gt;iptables -S&lt;/code&gt;&lt;br /&gt; Так можно проверить, что ваш &lt;code&gt;iptables&lt;/code&gt; увидел то, что туда насовал android. &lt;code&gt;iptables-nft&lt;/code&gt; выдаст ошибку. Далее качаем zapret в &lt;code&gt;/opt/zapret&lt;/code&gt;. Обычные действия с &lt;code&gt;install_prereq.sh&lt;/code&gt;, &lt;code&gt;install_bin.sh&lt;/code&gt;, &lt;code&gt;blockcheck.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Учтите, что стратегии обхода сотового оператора и домашнего wifi вероятно будут разные. Выделить сотового оператора легко через параметр iptables &lt;code&gt;-o &amp;lt;имя интерфейса&amp;gt;&lt;/code&gt;. Имя может быть, например, &lt;code&gt;ccmni0&lt;/code&gt;. Его легко увидеть через &lt;code&gt;ifconfig&lt;/code&gt;. Wifi сеть - обычно &lt;code&gt;wlan0&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Переключать blockcheck между оператором и wifi можно вместе со всем инетом - включив или выключив wifi. Если найдете стратегию для wifi и впишите ее в автостарт, то при подключении к другому wifi она может не сработать или вовсе что-то поломать, потому подумайте стоит ли. Может быть лучше сделать скрипты типа &quot;запустить обход домашнего wifi&quot;, &quot;снять обход домашнего wifi&quot;, и пользоваться ими по необходимости из терминала. Но домашний wifi лучше все-же обходить на роутере.&lt;/p&gt; 
&lt;h2&gt;Мобильные модемы и роутеры huawei&lt;/h2&gt; 
&lt;p&gt;Устройства типа E3372, E8372, E5770 разделяют общую идеологию построения системы. Имеются 2 вычислительных ядра. Одно ядро выполняет vxworks, другое - linux. На 4pda имеются модифицированные прошивки с telnet и adb. Их и нужно использовать.&lt;/p&gt; 
&lt;p&gt;Дальнейшие утверждения проверены на E8372. На других может быть аналогично или похоже. Присутствуют дополнительные аппаратные блоки для offload-а сетевых функций. Не весь трафик идет через linux. Исходящий трафик с самого модема проходит цепочку OUTPUT нормально, на FORWARD =&amp;gt;wan часть пакетов выпадает из tcpdump.&lt;/p&gt; 
&lt;p&gt;tpws работает обычным образом.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;nfqueue&lt;/code&gt; поломан, можно собрать фиксящий модуль &lt;a href=&quot;https://github.com/im-0/unfuck-nfqueue-on-e3372h&quot;&gt;https://github.com/im-0/unfuck-nfqueue-on-e3372h&lt;/a&gt;, используя исходники с huawei open source. Исходники содержат тулчейн и полусобирающееся, неактуальное ядро. Конфиг можно взять с рабочего модема из &lt;code&gt;/proc/config.gz&lt;/code&gt;. С помощью этих исходников умельцы могут собрать модуль &lt;code&gt;unfuck_nfqueue.ko&lt;/code&gt;. После его применения NFQUEUE и nfqws для arm работают нормально.&lt;/p&gt; 
&lt;p&gt;Чтобы избежать проблемы с offload-ом при использовании nfqws, следует комбинировать tpws в режиме tcp proxy и nfqws. Правила NFQUEUE пишутся для цепочки OUTPUT. connbytes придется опускать, поскольку модуля в ядре нет. Но это не смертельно.&lt;/p&gt; 
&lt;p&gt;Скрипт автозапуска - &lt;code&gt;/system/etc/autorun.sh&lt;/code&gt;. Создайте свой скрипт настройки zapret, запускайте из конца autorun.sh через &quot;&amp;amp;&quot;. Скрипт должен в начале делать sleep 5, чтобы дождаться поднятия сети и iptables от huawei.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] На этом модеме происходят хаотические сбросы соединений tcp по непонятным причинам. Выглядит это так, если запускать curl с самого модема:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;curl www.ru
curl: (7) Failed to connect to www.ru port 80: Host is unreachable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Возникает ошибка сокета EHOSTUNREACH (errno -113). То же самое видно в tpws. В броузере не подгружаются части веб страниц, картинки, стили. В tcpdump на внешнем интерфейсе eth_x виден только единственный и безответный SYN пакет, без сообщений ICMP. ОС каким-то образом узнает о невозможности установить TCP соединение и выдает ошибку. Если выполнять подключение с клиента, то SYN пропадают, соединение не устанавливается. ОС клиента проводит ретрансмиссию, и с какого-то раза подключение удается. Поэтому без tcp проксирования в этой ситуации сайты тупят, но загружаются, а с проксированием подключение выполняется, но вскоре сбрасывается без каких-либо данных, и броузеры не пытаются установить его заново. Поэтому качество броузинга с tpws может быть хуже, но дело не в tpws. Частота сбросов заметно возрастает, если запущен торент клиент, имеется много tcp соединений. Однако, причина не в переполнении таблицы conntrack. Увеличение лимитов и очистка conntrack не помогают. Предположительно эта особенность связана с обработкой пакетов сброса соединения в hardware offload. Точного ответа на вопрос у меня нет. Если вы знаете - поделитесь, пожалуйста. Чтобы не ухудшать качество броузинга, можно фильтровать заворот на tpws по ip фильтру. Поддержка ipset отсутствует. Значит, все, что можно сделать - создать индивидуальные правила на небольшое количество хостов.&lt;/p&gt; 
&lt;p&gt;Некоторые наброски скриптов присутствуют в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/files/huawei/&quot;&gt;files/huawei&lt;/a&gt;. &lt;em&gt;Не готовое решение!&lt;/em&gt; Смотрите, изучайте, приспосабливайте.&lt;br /&gt; Здесь можно скачать готовые полезные статические бинарники для arm, включая curl : &lt;a href=&quot;https://github.com/bol-van/bins&quot;&gt;https://github.com/bol-van/bins&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FreeBSD, OpenBSD, MacOS&lt;/h2&gt; 
&lt;p&gt;Описано в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/bsd.md&quot;&gt;документации BSD&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Windows&lt;/h2&gt; 
&lt;p&gt;Описано в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/windows.md&quot;&gt;документации Windows&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Другие прошивки&lt;/h2&gt; 
&lt;p&gt;Для статических бинарников не имеет значения на чем они запущены: PC, android, приставка, роутер, любой другой девайс. Подойдет любая прошивка, дистрибутив linux. Статические бинарники запустятся на всем. Им нужно только ядро с необходимыми опциями сборки или модулями. Но кроме бинарников в проекте используются еще и скрипты, в которых задействуются некоторые стандартные программы.&lt;/p&gt; 
&lt;p&gt;Основные причины почему нельзя просто так взять и установить эту систему на что угодно:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;отсутствие доступа к девайсу через shell&lt;/li&gt; 
 &lt;li&gt;отсутствие рута&lt;/li&gt; 
 &lt;li&gt;отсутствие раздела r/w для записи и энергонезависимого хранения файлов&lt;/li&gt; 
 &lt;li&gt;отсутствие возможности поставить что-то в автозапуск&lt;/li&gt; 
 &lt;li&gt;отсутствие cron&lt;/li&gt; 
 &lt;li&gt;неотключаемый flow offload или другая проприетарщина в netfilter&lt;/li&gt; 
 &lt;li&gt;недостаток модулей ядра или опций его сборки&lt;/li&gt; 
 &lt;li&gt;недостаток модулей iptables (/usr/lib/iptables/lib*.so)&lt;/li&gt; 
 &lt;li&gt;недостаток стандартных программ (типа ipset, curl) или их кастрированность (облегченная замена)&lt;/li&gt; 
 &lt;li&gt;кастрированный или нестандартный шелл sh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Если в вашей прошивке есть все необходимое, то вы можете адаптировать zapret под ваш девайс в той или иной степени. Может быть у вас не получится поднять все части системы, однако вы можете хотя бы попытаться поднять tpws и завернуть на него через -j REDIRECT весь трафик на порт 80. Если вам есть куда записать tpws, есть возможность выполнять команды при старте, то как минимум это вы сделать сможете. Скорее всего поддержка REDIRECT в ядре есть. Она точно есть на любом роутере, на других устройствах под вопросом. NFQUEUE, ipset на большинстве прошивок отсутствуют из-за ненужности.&lt;/p&gt; 
&lt;p&gt;Пересобрать ядро или модули для него будет скорее всего достаточно трудно. Для этого вам необходимо будет по крайней мере получить исходники вашей прошивки. User mode компоненты могут быть привнесены относительно безболезненно, если есть место куда их записать. Специально для девайсов, имеющих область r/w, существует проект entware. Некоторые прошивки даже имеют возможность его облегченной установки через веб интерфейс. entware содержит репозиторий user-mode компонент, которые устанавливаются в /opt. С их помощью можно компенсировать недостаток ПО основной прошивки, за исключением ядра.&lt;/p&gt; 
&lt;p&gt;Можно попытаться использовать sysv init script таким образом, как это описано в разделе &quot;Прикручивание к системе управления фаерволом или своей системе запуска&quot;. В случае ругани на отсутствие каких-то базовых программ, их следует восполнить посредством entware. Перед запуском скрипта путь к дополнительным программам должен быть помещен в PATH.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Подробное описание настроек для других прошивок выходит за рамки данного проекта.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;OpenWrt является одной из немногих относительно полноценных linux систем для embedded devices. Она характеризуется следующими вещами, которые и послужили основой выбора именно этой прошивки:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;полный root доступ к девайсу через shell. на заводских прошивках чаще всего отсутствует, на многих альтернативных есть&lt;/li&gt; 
 &lt;li&gt;корень r/w. это практически уникальная особенность OpenWrt. заводские и большинство альтернативных прошивок построены на базе squashfs root (r/o), а конфигурация хранится в специально отформатированной области встроенной памяти, называемой nvram. не имеющие r/w корня системы сильно кастрированы. они не имеют возможности доустановки ПО из репозитория без специальных вывертов и заточены в основном на чуть более продвинутого, чем обычно, пользователя и управление имеющимся функционалом через веб интерфейс, но функционал фиксированно ограничен. альтернативные прошивки, как правило, могут монтировать r/w раздел в какую-то область файловой системы, заводские обычно могут монтировать лишь флэшки, подключенные к USB, и не факт, что есть поддержка unix файловых системы. может быть поддержка только fat и ntfs.&lt;/li&gt; 
 &lt;li&gt;возможность выноса корневой файловой системы на внешний носитель (extroot) или создания на нем оверлея (overlay)&lt;/li&gt; 
 &lt;li&gt;наличие менеджера пакетов opkg и репозитория софта&lt;/li&gt; 
 &lt;li&gt;flow offload предсказуемо, стандартно и выборочно управляем, а так же отключаем&lt;/li&gt; 
 &lt;li&gt;в репозитории есть все модули ядра, их можно доустановить через opkg. ядро пересобирать не нужно.&lt;/li&gt; 
 &lt;li&gt;в репозитории есть все модули iptables, их можно доустановить через opkg&lt;/li&gt; 
 &lt;li&gt;в репозитории есть огромное количество стандартных программ и дополнительного софта&lt;/li&gt; 
 &lt;li&gt;наличие SDK, позволяющего собрать недостающее&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Обход блокировки через сторонний хост&lt;/h2&gt; 
&lt;p&gt;Если не работает автономный обход, приходится перенаправлять трафик через сторонний хост. Предлагается использовать прозрачный редирект через socks5 посредством &lt;code&gt;iptables+redsocks&lt;/code&gt;, либо &lt;code&gt;iptables+iproute+vpn&lt;/code&gt;. Настройка варианта с redsocks на OpenWrt описана в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/redsocks.txt&quot;&gt;redsocks.txt&lt;/a&gt;. Настройка варианта с &lt;code&gt;iproute+wireguard&lt;/code&gt; - в &lt;a href=&quot;https://raw.githubusercontent.com/bol-van/zapret/master/wireguard_iproute_openwrt.txt&quot;&gt;wireguard_iproute_openwrt.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Почему стоит вложиться в покупку VPS&lt;/h2&gt; 
&lt;p&gt;VPS — это виртуальный сервер. Существует огромное множество датацентров, предлагающих данную услугу. На VPS могут выполняться какие угодно задачи. От простого веб-сайта до навороченной системы собственной разработки. Можно использовать VPS и для поднятия собственного VPN или прокси. Сама широта возможных способов применения и распространенность услуги сводят к минимуму возможности регуляторов по бану сервисов такого типа. Да, если введут белые списки, то решение загнется, но это будет уже другая реальность, в которой придется изобретать иные решения. Пока этого не сделали, никто не будет банить хостинги просто потому, что они предоставляют хостинг услуги. Вы, как индивидуум, скорее всего, никому не нужны. Подумайте чем вы отличаетесь от известного VPN провайдера. VPN-провайдер предоставляет &lt;em&gt;простую&lt;/em&gt; и &lt;em&gt;доступную&lt;/em&gt; услугу по обходу блокировок для масс. Этот факт делает его первоочередной целью блокировки. РКН направит уведомление, после отказа сотрудничать заблокирует VPN. Предоплаченная сумма пропадет. У регуляторов нет и никогда не будет ресурсов для тотальной проверки каждого сервера в сети. Возможен китайский расклад, при котором DPI выявляет VPN-протоколы и динамически банит IP серверов, предоставляющих нелицензированный VPN. Но имея знания, голову, вы всегда можете обфусцировать VPN трафик или применить другие типы VPN, более устойчивые к анализу на DPI, или просто менее широкоизвестные, а следовательно с меньшей вероятностью обнаруживаемые регулятором. У вас есть свобода делать на вашем VPS все что вы захотите, адаптируясь к новым условиям. Да, это потребует знаний. Вам выбирать учиться и держать ситуацию под контролем, когда вам ничего запретить не могут, или покориться системе.&lt;/p&gt; 
&lt;p&gt;VPS можно приобрести в множестве мест. Существуют специализированные на поиске предложений VPS порталы.&lt;br /&gt; Например, &lt;a href=&quot;https://vps.today&quot;&gt;вот этот&lt;/a&gt;. Для персонального VPN сервера обычно достаточно самой минимальной конфигурации, но с безлимитным трафиком или с большим лимитом по трафику (терабайты). Важен и тип VPS. OpenVZ подойдёт для OpenVPN, но вы не поднимете на нем WireGuard, IPsec, то есть все, что требует kernel mode. Для kernel mode требуется тип виртуализации, предполагающий запуск полноценного экземпляра ОС linux вместе с ядром. Подойдут KVM, Xen, Hyper-V, VMware.&lt;/p&gt; 
&lt;p&gt;По цене можно найти предложения, которые будут дешевле готовой VPN услуги, но при этом вы сам хозяин в своей лавке и не рискуете попасть под бан регулятора, разве что «заодно» — под ковровую бомбардировку с баном миллионов IP. Кроме того, если вам совсем все кажется сложным, прочитанное вызывает ступор и вы точно знаете, что ничего из описанного сделать не сможете, то вы сможете хотя бы использовать динамическое перенаправление портов SSH для получения шифрованного SOCKS-прокси и прописать его в браузер. Знания linux не нужны совсем. Это вариант наименее напряжный для чайников, хотя и не самый удобный в использовании.&lt;/p&gt; 
&lt;h2&gt;Поддержать разработчика&lt;/h2&gt; 
&lt;p&gt;USDT &lt;code&gt;0x3d52Ce15B7Be734c53fc9526ECbAB8267b63d66E&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;BTC &lt;code&gt;bc1qhqew3mrvp47uk2vevt5sctp7p2x9m7m5kkchve&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;ETH &lt;code&gt;0x3d52Ce15B7Be734c53fc9526ECbAB8267b63d66E&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-quantum-safe/liboqs</title>
      <link>https://github.com/open-quantum-safe/liboqs</link>
      <description>&lt;p&gt;C library for prototyping and experimenting with quantum-resistant cryptography&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;liboqs&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/actions/workflows/commit-to-main.yml&quot;&gt;&lt;img src=&quot;https://github.com/open-quantum-safe/liboqs/actions/workflows/commit-to-main.yml/badge.svg?sanitize=true&quot; alt=&quot;Main Branch Tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/actions/workflows/weekly.yml&quot;&gt;&lt;img src=&quot;https://github.com/open-quantum-safe/liboqs/actions/workflows/weekly.yml/badge.svg?sanitize=true&quot; alt=&quot;Weekly Tests&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/travis/com/open-quantum-safe/liboqs?logo=travis&amp;amp;label=Travis%20CI&amp;amp;labelColor=%23343B42&amp;amp;color=%232EBB4E&quot; alt=&quot;Travis Build Status&quot; /&gt; &lt;a href=&quot;https://coveralls.io/github/open-quantum-safe/liboqs?branch=main&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/open-quantum-safe/liboqs/badge.svg?branch=main&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;liboqs is an open source C library for quantum-safe cryptographic algorithms.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#liboqs&quot;&gt;liboqs&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#status&quot;&gt;Status&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#supported-algorithms&quot;&gt;Supported Algorithms&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#key-encapsulation-mechanisms&quot;&gt;Key encapsulation mechanisms&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#signature-schemes&quot;&gt;Signature schemes&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#limitations-and-security&quot;&gt;Limitations and Security&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#platform-limitations&quot;&gt;Platform limitations&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#linux-and-mac&quot;&gt;Linux and Mac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#cross-compilation&quot;&gt;Cross compilation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;liboqs provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a collection of open source implementations of quantum-safe key encapsulation mechanism (KEM) and digital signature algorithms; the full list can be found &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/#supported-algorithms&quot;&gt;below&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;a common API for these algorithms&lt;/li&gt; 
 &lt;li&gt;a test harness and benchmarking routines&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;liboqs is part of the &lt;strong&gt;Open Quantum Safe (OQS)&lt;/strong&gt; project, which aims to develop and integrate into applications quantum-safe cryptography to facilitate deployment and testing in real world contexts. In particular, OQS provides prototype integrations of liboqs into protocols like TLS, X.509, and S/MIME, through our &lt;a href=&quot;https://github.com/open-quantum-safe/oqs-provider&quot;&gt;OpenSSL 3 Provider&lt;/a&gt; and we provide a variety of other &lt;a href=&quot;https://github.com/open-quantum-safe/oqs-demos&quot;&gt;post-quantum-enabled demos&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The OQS project is supported by the &lt;a href=&quot;https://pqca.org/&quot;&gt;Post-Quantum Cryptography Alliance&lt;/a&gt; as part of the &lt;a href=&quot;https://linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;. More information about the Open Quantum Safe project can be found at &lt;a href=&quot;https://openquantumsafe.org/&quot;&gt;openquantumsafe.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;OQS is running a survey to better understand our community. We would like to hear from organizations and individuals about their interest in and use of the Open Quantum Safe project. Please take a few minutes to fill out the survey: &lt;a href=&quot;https://linuxfoundation.surveymonkey.com/r/oqssurvey&quot;&gt;https://linuxfoundation.surveymonkey.com/r/oqssurvey&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;h3&gt;Supported Algorithms&lt;/h3&gt; 
&lt;p&gt;Details on each supported algorithm can be found in the &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms&quot;&gt;docs/algorithms&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;The list below indicates all algorithms currently supported by liboqs, including experimental algorithms and already excluding algorithm variants pruned during the NIST competition, such as Kyber-90s or Dilithium-AES.&lt;/p&gt; 
&lt;p&gt;The only algorithms in &lt;code&gt;liboqs&lt;/code&gt; that implement NIST standards are the &lt;a href=&quot;https://csrc.nist.gov/pubs/fips/203/final&quot;&gt;&lt;code&gt;ML-KEM&lt;/code&gt;&lt;/a&gt; (final standard) and &lt;a href=&quot;https://csrc.nist.gov/pubs/fips/204/final&quot;&gt;&lt;code&gt;ML-DSA&lt;/code&gt;&lt;/a&gt; (final standard) variants with their respective different bit strengths. &lt;code&gt;liboqs&lt;/code&gt; will retain these algorithm names selected by NIST throughout the finishing stages of the standardization process, so users can rely on their presence going forward. If NIST changes the implementation details of these algorithms, &lt;code&gt;liboqs&lt;/code&gt; will adjust the implementation so that users are protected from such potential changes.&lt;/p&gt; 
&lt;p&gt;Falcon and SPHINCS+ have also been &lt;a href=&quot;https://csrc.nist.gov/Projects/post-quantum-cryptography/selected-algorithms-2022&quot;&gt;selected for standardization&lt;/a&gt;, but the &lt;code&gt;liboqs&lt;/code&gt; implementations of these algorithms are currently tracking Round 3 submissions and not NIST standards drafts.&lt;/p&gt; 
&lt;p&gt;All names other than &lt;code&gt;ML-KEM&lt;/code&gt; and &lt;code&gt;ML-DSA&lt;/code&gt; are subject to change. &lt;code&gt;liboqs&lt;/code&gt; makes available a &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/CONFIGURE.md#oQS_ALGS_ENABLED&quot;&gt;selection mechanism for algorithms on the NIST standards track, continued NIST competition, or purely experimental nature by way of the configuration variable OQS_ALGS_ENABLED&lt;/a&gt;. By default &lt;code&gt;liboqs&lt;/code&gt; is built supporting all, incl. experimental, PQ algorithms listed below.&lt;/p&gt; 
&lt;h4&gt;Key encapsulation mechanisms&lt;/h4&gt; 
&lt;!-- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_START --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;BIKE&lt;/strong&gt;: BIKE-L1, BIKE-L3, BIKE-L5&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Classic McEliece&lt;/strong&gt;: Classic-McEliece-348864†, Classic-McEliece-348864f†, Classic-McEliece-460896†, Classic-McEliece-460896f†, Classic-McEliece-6688128†, Classic-McEliece-6688128f†, Classic-McEliece-6960119†, Classic-McEliece-6960119f†, Classic-McEliece-8192128†, Classic-McEliece-8192128f†&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;FrodoKEM&lt;/strong&gt;: FrodoKEM-640-AES, FrodoKEM-640-SHAKE, FrodoKEM-976-AES, FrodoKEM-976-SHAKE, FrodoKEM-1344-AES, FrodoKEM-1344-SHAKE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HQC&lt;/strong&gt;: HQC-128, HQC-192, HQC-256&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kyber&lt;/strong&gt;: Kyber512, Kyber768, Kyber1024&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ML-KEM&lt;/strong&gt;: ML-KEM-512, ML-KEM-768, ML-KEM-1024&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NTRU-Prime&lt;/strong&gt;: sntrup761&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_END --&gt; 
&lt;h4&gt;Signature schemes&lt;/h4&gt; 
&lt;!-- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_START --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CROSS&lt;/strong&gt;: cross-rsdp-128-balanced, cross-rsdp-128-fast, cross-rsdp-128-small†, cross-rsdp-192-balanced, cross-rsdp-192-fast, cross-rsdp-192-small†, cross-rsdp-256-balanced†, cross-rsdp-256-fast, cross-rsdp-256-small†, cross-rsdpg-128-balanced, cross-rsdpg-128-fast, cross-rsdpg-128-small, cross-rsdpg-192-balanced, cross-rsdpg-192-fast, cross-rsdpg-192-small†, cross-rsdpg-256-balanced, cross-rsdpg-256-fast, cross-rsdpg-256-small†&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CRYSTALS-Dilithium&lt;/strong&gt;: Dilithium2, Dilithium3, Dilithium5&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Falcon&lt;/strong&gt;: Falcon-512, Falcon-1024, Falcon-padded-512, Falcon-padded-1024&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MAYO&lt;/strong&gt;: MAYO-1, MAYO-2, MAYO-3, MAYO-5†&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ML-DSA&lt;/strong&gt;: ML-DSA-44, ML-DSA-65, ML-DSA-87&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SNOVA&lt;/strong&gt;: SNOVA_24_5_4, SNOVA_24_5_4_SHAKE, SNOVA_24_5_4_esk, SNOVA_24_5_4_SHAKE_esk, SNOVA_37_17_2†, SNOVA_25_8_3, SNOVA_56_25_2†, SNOVA_49_11_3†, SNOVA_37_8_4†, SNOVA_24_5_5†, SNOVA_60_10_4†, SNOVA_29_6_5†&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SPHINCS+-SHA2&lt;/strong&gt;: SPHINCS+-SHA2-128f-simple, SPHINCS+-SHA2-128s-simple, SPHINCS+-SHA2-192f-simple, SPHINCS+-SHA2-192s-simple, SPHINCS+-SHA2-256f-simple, SPHINCS+-SHA2-256s-simple&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SPHINCS+-SHAKE&lt;/strong&gt;: SPHINCS+-SHAKE-128f-simple, SPHINCS+-SHAKE-128s-simple, SPHINCS+-SHAKE-192f-simple, SPHINCS+-SHAKE-192s-simple, SPHINCS+-SHAKE-256f-simple, SPHINCS+-SHAKE-256s-simple&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UOV&lt;/strong&gt;: OV-Is, OV-Ip, OV-III, OV-V, OV-Is-pkc, OV-Ip-pkc, OV-III-pkc, OV-V-pkc, OV-Is-pkc-skc, OV-Ip-pkc-skc, OV-III-pkc-skc, OV-V-pkc-skc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_END --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;XMSS&lt;/strong&gt;: XMSS-SHA2_10_256, XMSS-SHA2_16_256, XMSS-SHA2_20_256, XMSS-SHAKE_10_256, XMSS-SHAKE_16_256, XMSS-SHAKE_20_256, XMSS-SHA2_10_512, XMSS-SHA2_16_512, XMSS-SHA2_20_512, XMSS-SHAKE_10_512, XMSS-SHAKE_16_512, XMSS-SHAKE_20_512, XMSS-SHA2_10_192, XMSS-SHA2_16_192, XMSS-SHA2_20_192, XMSS-SHAKE256_10_192, XMSS-SHAKE256_16_192, XMSS-SHAKE256_20_192, SHAKE256_10_256, SHAKE256_16_256, SHAKE256_20_256, XMSSMT-SHA2_20/2_256, XMSSMT-SHA2_20/4_256, XMSSMT-SHA2_40/2_256, XMSSMT-SHA2_40/4_256, XMSSMT-SHA2_40/8_256, XMSSMT-SHA2_60/3_256, XMSSMT-SHA2_60/6_256, XMSSMT-SHA2_60/12_256, XMSSMT-SHAKE_20/2_256, XMSSMT-SHAKE_20/4_256, XMSSMT-SHAKE_40/2_256, XMSSMT-SHAKE_40/4_256, XMSSMT-SHAKE_40/8_256, XMSSMT-SHAKE_60/3_256, XMSSMT-SHAKE_60/6_256, XMSSMT-SHAKE_60/12_256&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LMS&lt;/strong&gt;: LMS_SHA256_H5_W1, LMS_SHA256_H5_W2, LMS_SHA256_H5_W4, LMS_SHA256_H5_W8, LMS_SHA256_H10_W1, LMS_SHA256_H10_W2, LMS_SHA256_H10_W4, LMS_SHA256_H10_W8, LMS_SHA256_H15_W1, LMS_SHA256_H15_W2, LMS_SHA256_H15_W4, LMS_SHA256_H15_W8, LMS_SHA256_H20_W1, LMS_SHA256_H20_W2, LMS_SHA256_H20_W4, LMS_SHA256_H20_W8, LMS_SHA256_H25_W1, LMS_SHA256_H25_W2, LMS_SHA256_H25_W4, LMS_SHA256_H25_W8, LMS_SHA256_H5_W8_H5_W8, LMS_SHA256_H10_W4_H5_W8, LMS_SHA256_H10_W8_H5_W8, LMS_SHA256_H10_W2_H10_W2, LMS_SHA256_H10_W4_H10_W4, LMS_SHA256_H10_W8_H10_W8, LMS_SHA256_H15_W8_H5_W8, LMS_SHA256_H15_W8_H10_W8, LMS_SHA256_H15_W8_H15_W8, LMS_SHA256_H20_W8_H5_W8, LMS_SHA256_H20_W8_H10_W8, LMS_SHA256_H20_W8_H15_W8, LMS_SHA256_H20_W8_H20_W8&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that for algorithms marked with a dagger (†), liboqs contains at least one implementation that uses a large amount of stack space; this may cause failures when run in threads or in constrained environments. For more information, consult the algorithm information sheets in the &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms&quot;&gt;docs/algorithms&lt;/a&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Limitations and Security&lt;/h3&gt; 
&lt;p&gt;While at the time of this writing there are no vulnerabilities known in any of the quantum-safe algorithms used in this library, caution is advised when deploying quantum-safe algorithms as most of the algorithms and software have not been subject to the same degree of scrutiny as for currently deployed algorithms. Particular attention should be paid to guidance provided by the standards community, especially from the NIST &lt;a href=&quot;https://csrc.nist.gov/Projects/Post-Quantum-Cryptography/Post-Quantum-Cryptography-Standardization&quot;&gt;Post-Quantum Cryptography Standardization&lt;/a&gt; project. As research advances, the supported algorithms may see rapid changes in their security, and may even prove insecure against both classical and quantum computers. Moreover, note that the &lt;code&gt;sntrup761&lt;/code&gt; is only included for interop testing.&lt;/p&gt; 
&lt;p&gt;liboqs does not intend to &quot;pick winners&quot;: algorithm support is informed by the NIST PQC standardization project. We strongly recommend that applications and protocols rely on the outcomes of this effort when deploying post-quantum cryptography.&lt;/p&gt; 
&lt;p&gt;We realize some parties may want to deploy quantum-safe cryptography prior to the conclusion of the NIST PQC standardization project. We strongly recommend such attempts make use of so-called &lt;strong&gt;hybrid cryptography&lt;/strong&gt;, in which quantum-safe public-key algorithms are used alongside traditional public key algorithms (like RSA or elliptic curves) so that the solution is at least no less secure than existing traditional cryptography.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WE DO NOT CURRENTLY RECOMMEND RELYING ON THIS LIBRARY IN A PRODUCTION ENVIRONMENT OR TO PROTECT ANY SENSITIVE DATA.&lt;/strong&gt; This library is meant to help with research and prototyping. While we make a best-effort approach to avoid security bugs, this library has not received the level of auditing and analysis that would be necessary to rely on it for high security use.&lt;/p&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/SECURITY.md#security-policy&quot;&gt;SECURITY.md&lt;/a&gt; for details on how to report a vulnerability and the OQS vulnerability response process.&lt;/p&gt; 
&lt;h4&gt;Platform limitations&lt;/h4&gt; 
&lt;p&gt;In order to optimize support effort,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;not all algorithms are equally well supported on all platforms. In case of questions, it is first advised to review the &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/docs/algorithms&quot;&gt;documentation files for each algorithm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;not all compilers are equally well supported. For example, at least v7.1.0 of the GNU compiler is required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Support limitations&lt;/h4&gt; 
&lt;p&gt;This project is not commercially supported. All guidelines and goals for liboqs are reflections of current practices, executed by a community of academic, part-time, and/or voluntary contributors on a best-effort basis and may change at any time. Any entity seeking more reliable commitments is strongly encouraged to join the OQS community and thus enhance the code and support that the community can provide.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Linux and Mac&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;p&gt;On Ubuntu:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  sudo apt install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On macOS, using a package manager of your choice (we&#39;ve picked Homebrew):&lt;/p&gt; &lt;pre&gt;&lt;code&gt; brew install cmake ninja openssl@3 wget doxygen graphviz astyle valgrind
 pip3 install pytest pytest-xdist pyyaml
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using Nix:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; nix develop
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that, if you want liboqs to use OpenSSL for various symmetric crypto algorithms (AES, SHA-2, etc.) then you must have OpenSSL installed (version 3.x recommended; EOL version 1.1.1 also still possible).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Get the source:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone -b main https://github.com/open-quantum-safe/liboqs.git
 cd liboqs
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and build:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; mkdir build &amp;amp;&amp;amp; cd build
 cmake -GNinja ..
 ninja
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Various &lt;code&gt;cmake&lt;/code&gt; build options to customize the resultant artifacts are available and are &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/CONFIGURE.md#options-for-configuring-liboqs-builds&quot;&gt;documented in CONFIGURE.md&lt;/a&gt;. All supported options are also listed in the &lt;code&gt;.CMake/alg-support.cmake&lt;/code&gt; file, and can be viewed by running &lt;code&gt;cmake -LAH -N ..&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;The following instructions assume we are in &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt; &lt;p&gt;By default the main build result is &lt;code&gt;lib/liboqs.a&lt;/code&gt;, a static library. If you want to build a shared/dynamic library, append &lt;a href=&quot;https://raw.githubusercontent.com/open-quantum-safe/liboqs/main/CONFIGURE.md#bUILD_SHARED_LIBS&quot;&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=ON&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;cmake -GNinja ..&lt;/code&gt; command above and the result will be &lt;code&gt;lib/liboqs.so|dylib|dll&lt;/code&gt;. The public headers are located in the &lt;code&gt;include&lt;/code&gt; directory. There are also a variety of programs built under the &lt;code&gt;tests&lt;/code&gt; directory:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;test_kem&lt;/code&gt;: Simple test harness for key encapsulation mechanisms&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_sig&lt;/code&gt;: Simple test harness for signature schemes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_sig_stfl&lt;/code&gt;: Simple test harness for stateful signature schemes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_kem_mem&lt;/code&gt;: Simple test harness for checking memory consumption of key encapsulation mechanisms&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_sig_mem&lt;/code&gt;: Simple test harness for checking memory consumption of signature schemes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;kat_kem&lt;/code&gt;: Program that generates known answer test (KAT) values for key encapsulation mechanisms using the same procedure as the NIST submission requirements, for checking against submitted KAT values using &lt;code&gt;tests/test_kat.py&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;kat_sig&lt;/code&gt;: Program that generates known answer test (KAT) values for signature schemes using the same procedure as the NIST submission requirements, for checking against submitted KAT values using &lt;code&gt;tests/test_kat.py&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;kat_sig_stfl&lt;/code&gt;: Program for checking results against submitted KAT values using &lt;code&gt;tests/test_kat.py&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;speed_kem&lt;/code&gt;: Benchmarking program for key encapsulation mechanisms; see &lt;code&gt;./speed_kem --help&lt;/code&gt; for usage instructions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;speed_sig&lt;/code&gt;: Benchmarking program for signature mechanisms; see &lt;code&gt;./speed_sig --help&lt;/code&gt; for usage instructions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;speed_sig_stfl&lt;/code&gt;: Benchmarking program for stateful signature mechanisms; see &lt;code&gt;./speed_sig_stfl --help&lt;/code&gt; for usage instructions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;example_kem&lt;/code&gt;: Minimal runnable example showing the usage of the KEM API&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;example_sig&lt;/code&gt;: Minimal runnable example showing the usage of the signature API&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;example_sig_stfl&lt;/code&gt;: Minimal runnable example showing the usage of the stateful signature API&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_aes&lt;/code&gt;, &lt;code&gt;test_sha3&lt;/code&gt;: Simple test harnesses for crypto sub-components&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;test_portability&lt;/code&gt;: Simple test harnesses for checking cross-CPU code portability; requires presence of &lt;code&gt;qemu&lt;/code&gt;; proper operation validated only on Ubuntu&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The complete test suite can be run using&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ninja run_tests
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To generate HTML documentation of the API, run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ninja gen_docs
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then open &lt;code&gt;docs/html/index.html&lt;/code&gt; in your web browser.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ninja install&lt;/code&gt; can be run to install the built library and &lt;code&gt;include&lt;/code&gt; files to a location of choice, which can be specified by passing the &lt;code&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;dir&amp;gt;&lt;/code&gt; option to &lt;code&gt;cmake&lt;/code&gt; at configure time. Alternatively, &lt;code&gt;ninja package&lt;/code&gt; can be run to create an install package.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ninja uninstall&lt;/code&gt; can be run to remove all installation files.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Binaries can be generated using Visual Studio 2019 with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools&quot;&gt;CMake Tools&lt;/a&gt; extension installed. The same options as explained above for Linux/macOS can be used and build artifacts are generated in the specified &lt;code&gt;build&lt;/code&gt; folders.&lt;/p&gt; 
&lt;p&gt;If you want to create Visual Studio build files, e.g., if not using &lt;code&gt;ninja&lt;/code&gt;, be sure to &lt;em&gt;not&lt;/em&gt; pass the parameter &lt;code&gt;-GNinja&lt;/code&gt; to the &lt;code&gt;cmake&lt;/code&gt; command as exemplified above. You can then build all components using &lt;code&gt;msbuild&lt;/code&gt;, e.g. as follows: &lt;code&gt;msbuild ALL_BUILD.vcxproj&lt;/code&gt; and install all artifacts e.g. using this command &lt;code&gt;msbuild INSTALL.vcxproj&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Cross compilation&lt;/h3&gt; 
&lt;p&gt;You can cross compile liboqs for various platforms. Detailed information is available &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/wiki/Platform-specific-notes-for-building-liboqs#cross-compiling&quot;&gt;in the Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;More detailed information on building, optional build parameters, example applications, coding conventions and more can be found in the &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions that meet the acceptance criteria are gratefully welcomed. See our &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/wiki/Contributing-Guide&quot;&gt;Contributing Guide&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;liboqs is licensed under the MIT License; see &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/raw/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;liboqs includes some third party libraries or modules that are licensed differently; the corresponding subfolder contains the license that applies in that case. In particular:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;.CMake/CMakeDependentOption.cmake&lt;/code&gt;: BSD 3-Clause License&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/common.c&lt;/code&gt;: includes portions which are Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/aes/aes_c.c&lt;/code&gt;: public domain or any OSI-approved license&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/aes/aes*_ni.c&lt;/code&gt;: public domain&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/sha2/sha2_c.c&lt;/code&gt;: public domain&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/sha3/xkcp_low&lt;/code&gt; : CC0 (public domain), except &lt;code&gt;brg_endian.h&lt;/code&gt; and &lt;code&gt;KeccakP-1600-AVX2.s&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/sha3/xkcp_low/.../brg_endian.h&lt;/code&gt; : BSD 3-Clause License&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/crypto/sha3/xkcp_low/.../KeccakP-1600-AVX2.s&lt;/code&gt; : BSD-like &lt;a href=&quot;http://www.openssl.org/~appro/cryptogams/&quot;&gt;CRYPTOGAMS license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/common/rand/rand_nist.c&lt;/code&gt;: See file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/bike/additional&lt;/code&gt;: Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/classic_mceliece/pqclean_*&lt;/code&gt;: public domain&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/kyber/pqcrystals-*&lt;/code&gt;: public domain (CC0) or Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/kyber/pqclean_*&lt;/code&gt;: public domain (CC0), and public domain (CC0) or Apache License v2.0, and public domain (CC0) or MIT, and MIT&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/kyber/libjade_*&lt;/code&gt; public domain (CC0) or Apache License v2.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/kem/ml_kem/mlkem-native_*&lt;/code&gt;: Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/sig/dilithium/pqcrystals-*&lt;/code&gt;: public domain (CC0) or Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/sig/dilithium/pqclean_*&lt;/code&gt;: public domain (CC0), and public domain (CC0) or Apache License v2.0, and public domain (CC0) or MIT, and MIT&lt;/li&gt; 
 &lt;li&gt;src/sig/falcon/pqclean_*_aarch64 : Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/sig/mayo/*&lt;/code&gt;: Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/sig/ml_dsa/pqcrystals-*&lt;/code&gt;: public domain (CC0) or Apache License v2.0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;src/sig/sphincs/pqclean_*&lt;/code&gt;: CC0 (public domain)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;The OQS project is supported by the &lt;a href=&quot;https://pqca.org/&quot;&gt;Post-Quantum Cryptography Alliance&lt;/a&gt; as part of the &lt;a href=&quot;https://linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The OQS project was founded by Douglas Stebila and Michele Mosca at the University of Waterloo. &lt;a href=&quot;https://github.com/open-quantum-safe/liboqs/raw/main/CONTRIBUTORS&quot;&gt;Contributors to liboqs&lt;/a&gt; include individual contributors, academics and researchers, and various companies, including Amazon Web Services, Cisco Systems, evolutionQ, IBM Research, Microsoft Research, SandboxAQ, and softwareQ.&lt;/p&gt; 
&lt;p&gt;Financial support for the development of Open Quantum Safe has been provided by Amazon Web Services, the Canadian Centre for Cyber Security, Cisco, the Unitary Fund, the NGI Assure Fund, and VeriSign Inc.&lt;/p&gt; 
&lt;p&gt;Research projects which developed specific components of OQS have been supported by various research grants, including funding from the Natural Sciences and Engineering Research Council of Canada (NSERC); see the source papers for funding acknowledgments.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mit-pdos/xv6-public</title>
      <link>https://github.com/mit-pdos/xv6-public</link>
      <description>&lt;p&gt;xv6 OS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NOTE: we have stopped maintaining the x86 version of xv6, and switched our efforts to the RISC-V version (&lt;a href=&quot;https://github.com/mit-pdos/xv6-riscv.git&quot;&gt;https://github.com/mit-pdos/xv6-riscv.git&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern x86-based multiprocessor using ANSI C.&lt;/p&gt; 
&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; 
&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&quot;https://pdos.csail.mit.edu/6.828/&quot;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; 
&lt;p&gt;xv6 borrows code from the following sources: JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others) Plan 9 (entryother.S, mp.h, mp.c, lapic.c) FreeBSD (ioapic.c) NetBSD (console.c)&lt;/p&gt; 
&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; 
&lt;p&gt;We are also grateful for the bug reports and patches contributed by Silas Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.&lt;/p&gt; 
&lt;p&gt;The code in the files that constitute xv6 is Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.&lt;/p&gt; 
&lt;p&gt;ERROR REPORTS&lt;/p&gt; 
&lt;p&gt;We don&#39;t process error reports (see note on top of this file).&lt;/p&gt; 
&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; 
&lt;p&gt;To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run &quot;make&quot;. On non-x86 or non-ELF machines (like OS X, even on x86), you will need to install a cross-compiler gcc suite capable of producing x86 ELF binaries (see &lt;a href=&quot;https://pdos.csail.mit.edu/6.828/&quot;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;). Then run &quot;make TOOLPREFIX=i386-jos-elf-&quot;. Now install the QEMU PC simulator and run &quot;make qemu&quot;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mit-pdos/xv6-riscv</title>
      <link>https://github.com/mit-pdos/xv6-riscv</link>
      <description>&lt;p&gt;Xv6 for RISC-V&lt;/p&gt;&lt;hr&gt;&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern RISC-V multiprocessor using ANSI C.&lt;/p&gt; 
&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; 
&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&quot;https://pdos.csail.mit.edu/6.1810/&quot;&gt;https://pdos.csail.mit.edu/6.1810/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; 
&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; 
&lt;p&gt;We are also grateful for the bug reports and patches contributed by Abhinavpatel00, Takahiro Aoyagi, Marcelo Arroyo, Hirbod Behnam, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian Chen, clivezeng, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,Wenyang Duan, echtwerner, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, mes900903, Mark Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide, papparapa, phosphagos, Harry Porter, Greg Price, Zheng qhuo, Quancheng, RayAndrew, Jude Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire, Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung, Rafael Ubal, unicornx, Amane Uehara, Pablo Ventura, Luc Videau, Xi Wang, WaheedHafez, Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653, Andy Zhang, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.&lt;/p&gt; 
&lt;p&gt;ERROR REPORTS&lt;/p&gt; 
&lt;p&gt;Please send errors and suggestions to Frans Kaashoek and Robert Morris (kaashoek,&lt;a href=&quot;mailto:rtm@mit.edu&quot;&gt;rtm@mit.edu&lt;/a&gt;). The main purpose of xv6 is as a teaching operating system for MIT&#39;s 6.1810, so we are more interested in simplifications and clarifications than new features.&lt;/p&gt; 
&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; 
&lt;p&gt;You will need a RISC-V &quot;newlib&quot; tool chain from &lt;a href=&quot;https://github.com/riscv/riscv-gnu-toolchain&quot;&gt;https://github.com/riscv/riscv-gnu-toolchain&lt;/a&gt;, and qemu compiled for riscv64-softmmu. Once they are installed, and in your shell search path, you can run &quot;make qemu&quot;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HandBrake/HandBrake</title>
      <link>https://github.com/HandBrake/HandBrake</link>
      <description>&lt;p&gt;HandBrake&#39;s main development repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HandBrake &lt;a href=&quot;https://github.com/HandBrake/HandBrake/actions?query=workflow%3A%22macOS+build%22&quot;&gt;&lt;img src=&quot;https://github.com/HandBrake/HandBrake/workflows/macOS%20build/badge.svg?sanitize=true&quot; alt=&quot;macOS Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/HandBrake/HandBrake/actions?query=workflow%3A%22Windows+Build%22&quot;&gt;&lt;img src=&quot;https://github.com/HandBrake/HandBrake/workflows/Windows%20Build/badge.svg?sanitize=true&quot; alt=&quot;Windows Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/HandBrake/HandBrake/actions?query=workflow%3A%22Linux+Build%22&quot;&gt;&lt;img src=&quot;https://github.com/HandBrake/HandBrake/workflows/Linux%20Build/badge.svg?sanitize=true&quot; alt=&quot;Linux Build&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;HandBrake is an open-source video transcoder available for Linux, Mac, and Windows, licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/HandBrake/HandBrake/master/LICENSE&quot;&gt;GNU General Public License (GPL) Version 2&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;HandBrake takes videos you already have and makes new ones that work on your mobile phone, tablet, TV media player, game console, computer, or web browser—nearly anything that supports modern video formats.&lt;/p&gt; 
&lt;p&gt;HandBrake works with most common video files and formats, including ones created by consumer and professional video cameras, mobile devices such as phones and tablets, game and computer screen recordings, and DVD and Blu-ray discs. HandBrake leverages tools such as FFmpeg, x264, and x265, SVT-AV1 to create new MP4, MKV or WebM video files from these &lt;em&gt;Sources&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For information on downloading, building/installing, and using HandBrake, see the official &lt;a href=&quot;https://handbrake.fr/docs&quot;&gt;HandBrake Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community Support&lt;/h2&gt; 
&lt;p&gt;For information on HandBrake&#39;s community support channels, please see &lt;a href=&quot;https://handbrake.fr/docs/en/latest/help/community-support.html&quot;&gt;Community Support&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please familiarise yourself with our &lt;a href=&quot;https://github.com/HandBrake/HandBrake/raw/master/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome most contributions. While it is our goal to allow everyone to contribute, contributions not meeting the project&#39;s goals or standards may be rejected.&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://handbrake.fr/docs/en/latest/contributing/contribute.html&quot;&gt;guide to contributing&lt;/a&gt;. This will provide you with all the information you need to start contributing to the project.&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;We are now accepting translations via &lt;a href=&quot;https://www.transifex.com/HandBrakeProject/public&quot;&gt;Transifex&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://github.com/HandBrake/HandBrake/raw/master/TRANSLATION.markdown&quot;&gt;Translations Guide&lt;/a&gt; and follow the instructions if you are interested in joining the translation effort.&lt;/p&gt; 
&lt;h2&gt;Additional Information&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/HandBrake/HandBrake/wiki/Application-Information&quot;&gt;Application / Project Information&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/HandBrake/HandBrake/master/AUTHORS.markdown&quot;&gt;Authors&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/HandBrake/HandBrake/master/LICENSE&quot;&gt;License&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/HandBrake/HandBrake/master/NEWS.markdown&quot;&gt;News&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.macstadium.com/&quot;&gt;&lt;img width=&quot;200&quot; alt=&quot;MacStadium&quot; src=&quot;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;and to many others who have contributed! &lt;a href=&quot;https://raw.githubusercontent.com/HandBrake/HandBrake/master/THANKS.markdown&quot;&gt;Thanks&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TEN-framework/ten-framework</title>
      <link>https://github.com/TEN-framework/ten-framework</link>
      <description>&lt;p&gt;Open-source framework for conversational voice AI agents.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a name=&quot;readme-top&quot;&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7c8f72d7-3993-4d01-8504-b71578a22944&quot; alt=&quot;TEN banner&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/ten-framework/ten-framework?color=369eff&amp;amp;labelColor=gray&amp;amp;logo=github&amp;amp;style=flat-square&quot; alt=&quot;TEN Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release-date/ten-framework/ten-framework?labelColor=gray&amp;amp;style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/discussions/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/TEN-framework/ten_framework?labelColor=gray&amp;amp;color=%20%23f79009&quot; alt=&quot;Discussion posts&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/TEN-framework/ten_framework?labelColor=gray&amp;amp;color=pink&quot; alt=&quot;Commits&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-search?query=repo%3ATEN-framework%2Ften-framework%20is%3Aclosed&amp;amp;label=issues%20closed&amp;amp;labelColor=gray&amp;amp;color=green&quot; alt=&quot;Issues closed&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/ten-framework/ten-framework?color=c4f042&amp;amp;labelColor=gray&amp;amp;style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome!-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten_framework/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache_2.0_with_certain_conditions-blue.svg?labelColor=%20%23155EEF&amp;amp;color=%20%23528bff&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://deepwiki.com/TEN-framework/TEN-framework&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://readmex.com/TEN-framework/ten-framework&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CodePhiliaX/resource-trusteeship/main/readmex.svg?sanitize=true&quot; alt=&quot;ReadmeX&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://GitHub.com/TEN-framework/ten_framework/watchers/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/watchers/TEN-framework/ten_framework?style=social&amp;amp;label=Watch&quot; alt=&quot;GitHub watchers&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://GitHub.com/TEN-framework/ten_framework/network/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/TEN-framework/ten_framework?style=social&amp;amp;label=Fork&quot; alt=&quot;GitHub forks&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://GitHub.com/TEN-framework/ten_framework/stargazers/?WT.mc_id=academic-105485-koreyst&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/TEN-framework/ten_framework?style=social&amp;amp;label=Star&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/README.md&quot;&gt;&lt;img alt=&quot;README in English&quot; src=&quot;https://img.shields.io/badge/English-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-CN.md&quot;&gt;&lt;img alt=&quot;简体中文操作指南&quot; src=&quot;https://img.shields.io/badge/简体中文-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-JP.md&quot;&gt;&lt;img alt=&quot;日本語のREADME&quot; src=&quot;https://img.shields.io/badge/日本語-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-KR.md&quot;&gt;&lt;img alt=&quot;README in 한국어&quot; src=&quot;https://img.shields.io/badge/한국어-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-ES.md&quot;&gt;&lt;img alt=&quot;README en Español&quot; src=&quot;https://img.shields.io/badge/Español-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-FR.md&quot;&gt;&lt;img alt=&quot;README en Français&quot; src=&quot;https://img.shields.io/badge/Français-lightgrey&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/raw/main/docs/README-IT.md&quot;&gt;&lt;img alt=&quot;README in Italiano&quot; src=&quot;https://img.shields.io/badge/Italiano-lightgrey&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://theten.ai&quot;&gt;Official Site&lt;/a&gt; • &lt;a href=&quot;https://theten.ai/docs/ten_agent/overview&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://theten.ai/blog&quot;&gt;Blog&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://trendshift.io/repositories/11978&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/11978&quot; alt=&quot;TEN-framework%2Ften_framework | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;kbd&gt;Table of Contents&lt;/kbd&gt;&lt;/summary&gt; 
 &lt;h4&gt;Table of Contents&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-welcome-to-ten&quot;&gt;👋 Welcome to TEN&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-tman-designer&quot;&gt;🎨 TMAN Designer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-features&quot;&gt;✨ Features&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#1%EF%B8%8F%E2%83%A3-real-time-avatar&quot;&gt;1️⃣ Real-time Avatar&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#2%EF%B8%8F%E2%83%A3-real-time-voice-with-mcp-servers&quot;&gt;2️⃣ Real-time voice with MCP servers&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#3%EF%B8%8F%E2%83%A3-real-time-communication-with-hardware&quot;&gt;3️⃣ Real-time communication with hardware&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#4%EF%B8%8F%E2%83%A3-real-time-vision-and-real-time-screenshare-detection&quot;&gt;4️⃣ Real-time vision and real-time screenshare detection&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#5%EF%B8%8F%E2%83%A3-ten-with-other-llm-platforms&quot;&gt;5️⃣ TEN with other LLM platforms&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#6%EF%B8%8F%E2%83%A3-storyteller---ten-image-generation&quot;&gt;6️⃣ StoryTeller - TEN image generation&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-get-ten-agent-up-and-running&quot;&gt;👩‍💻 Get TEN Agent up and running&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#%F0%9F%85%B0%EF%B8%8F-run-ten-agent-in-localhost&quot;&gt;🅰️ Run TEN Agent in &lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#%F0%9F%85%B1%EF%B8%8F-run-ten-agent-in-codespaceno-docker&quot;&gt;🅱️ Run TEN Agent in Codespace(no docker)&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#%EF%B8%8F-ten-agent-self-hosting&quot;&gt;🛳️ TEN Agent Self Hosting&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#%F0%9F%85%B0%EF%B8%8F-deploying-with-docker&quot;&gt;🅰️ Deploying with Docker&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#%F0%9F%85%B1%EF%B8%8F-deploying-with-other-cloud-services&quot;&gt;🅱️ Deploying with other cloud services&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-ten-ecosystem&quot;&gt;🌍 TEN Ecosystem&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-ask-questions&quot;&gt;❓ Ask Questions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-contributing&quot;&gt;🥰 Contributing&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#code-contributors&quot;&gt;Code Contributors&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#contribution-guidelines&quot;&gt;Contribution Guidelines&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt; 
&lt;/details&gt; 
&lt;h2&gt;👋 Welcome to TEN&lt;/h2&gt; 
&lt;p&gt;TEN is a comprehensive open-source ecosystem for creating, customizing, and deploying real-time conversational AI agents with multimodal capabilities including voice, vision, and avatar interactions.&lt;/p&gt; 
&lt;p&gt;TEN includes &lt;a href=&quot;https://github.com/ten-framework/ten-framework&quot;&gt;TEN Framework&lt;/a&gt;, &lt;a href=&quot;https://github.com/ten-framework/ten-turn-detection&quot;&gt;TEN Turn Detection&lt;/a&gt;, &lt;a href=&quot;https://github.com/ten-framework/ten-vad&quot;&gt;TEN VAD&lt;/a&gt;, &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/ai_agents/demo&quot;&gt;TEN Agent&lt;/a&gt;, &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/core/src/ten_manager/designer_frontend&quot;&gt;TMAN Designer&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ten-framework/portal&quot;&gt;TEN Portal&lt;/a&gt;. Check out &lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#-ten-ecosystem&quot;&gt;🌍 TEN Ecosystem&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;br /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Community Channel&lt;/th&gt; 
   &lt;th&gt;Purpose&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=TenFramework&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/TenFramework?logo=X&amp;amp;color=%20%23f5f5f5&quot; alt=&quot;Follow on X&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow TEN Framework on X for updates and announcements&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.linkedin.com/company/ten-framework&quot;&gt;&lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/LinkedIn-TEN_Framework-0A66C2?logo=linkedin-white&amp;amp;logoColor=fff&quot; alt=&quot;Follow on LinkedIn&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow TEN Framework on LinkedIn for updates and announcements&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://discord.gg/VnPftUzAMJ&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/VnPftUzAMJ?&amp;amp;style=flat&amp;amp;theme=light&amp;amp;color=lightgray&quot; alt=&quot;Discord TEN Community&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our Discord community to connect with developers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://huggingface.co/TEN-framework&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Hugging%20Face-TEN%20Framework-yellow?style=flat&amp;amp;logo=huggingface&quot; alt=&quot;Hugging Face Space&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our Hugging Face community to explore our spaces and models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-agent/discussions/170&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/TEN_Framework-WeChat_Group-%2307C160?logo=wechat&amp;amp;labelColor=darkgreen&amp;amp;color=gray&quot; alt=&quot;WeChat&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Join our WeChat group for Chinese community discussions&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Star TEN Repositories&lt;/strong&gt; ⭐️&lt;/p&gt; 
 &lt;p&gt;Get instant notifications for new releases and updates. Your support helps us grow and improve TEN!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/eeebe996-8c14-4bf7-82ae-f1a1f7e30705&quot; alt=&quot;TEN star us gif&quot; /&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;kbd&gt;Star History&lt;/kbd&gt;&lt;/summary&gt; 
 &lt;picture&gt; 
  &lt;img width=&quot;100%&quot; src=&quot;https://api.star-history.com/svg?repos=ten-framework/ten-framework&amp;amp;type=Date&quot; /&gt; 
 &lt;/picture&gt; 
&lt;/details&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;🎨 TMAN Designer&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/44c6a087-ec7a-45b0-a084-dab5dac5e36b&quot;&gt;https://github.com/user-attachments/assets/44c6a087-ec7a-45b0-a084-dab5dac5e36b&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;TMAN Designer&lt;/h3&gt; 
&lt;p&gt;TMAN Designer is a low/no-code option to create voice agents with an easy-to-use workflow UI. It can load apps and graphs, and includes an online editor, log viewer, and much more.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://theten.ai/blog/tman-designer-of-ten-framework&quot;&gt;this blog&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- ## 🧩 Extensions

![Ready-to-use Extensions](https://ten-framework-assets.s3.us-east-1.amazonaws.com/extensions.jpg)

&lt;div align=&quot;right&quot;&gt;

[![][back-to-top]](#readme-top)

&lt;/div&gt; --&gt; 
&lt;br /&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c6702995-de94-4d3e-8cae-af097f087ac1&quot; alt=&quot;TEN Agent with Trulience&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;1️⃣ Real-time Avatar&lt;/h3&gt; 
&lt;p&gt;Build engaging AI avatars with TEN Agent using &lt;a href=&quot;https://trulience.com&quot;&gt;Trulience&lt;/a&gt;&#39;s diverse collection of free avatar options. To get it up and running, you only need 2 steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Follow the README to finish setting up and running the Playground&lt;/li&gt; 
 &lt;li&gt;Enter the avatar ID and &lt;a href=&quot;https://trulience.com/docs#/authentication/jwt-tokens/jwt-tokens?id=use-your-custom-userid&quot;&gt;token&lt;/a&gt; you get from &lt;a href=&quot;https://trulience.com&quot;&gt;Trulience&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/afb77ad3-9c23-452f-b870-216687779017&quot; alt=&quot;TEN with MCP servers&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;2️⃣ Real-time voice with MCP servers&lt;/h3&gt; 
&lt;p&gt;TEN Agent now integrates seamlessly with MCP servers, expanding its LLM capabilities. To get started:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the Module Picker in Playground&lt;/li&gt; 
 &lt;li&gt;Add the MCP server tool for LLM integration&lt;/li&gt; 
 &lt;li&gt;Paste a URL from your MCP server in the extension&lt;/li&gt; 
 &lt;li&gt;Start a realtime conversation with TEN Agent&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This integration allows you to leverage MCP&#39;s diverse servers offerings while maintaining TEN Agent&#39;s powerful conversational abilities.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/78647eef-2d66-44e6-99a8-1918a940fb9f&quot;&gt;https://github.com/user-attachments/assets/78647eef-2d66-44e6-99a8-1918a940fb9f&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3️⃣ Real-time communication with hardware&lt;/h3&gt; 
&lt;p&gt;TEN Agent is now running on the Espressif ESP32-S3 Korvo V3 development board, an excellent way to integrate realtime communication with LLM on hardware.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/ai_agents/esp32-client&quot;&gt;integration guide&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/a1addb02-a450-47be-8cb2-d25e3b574f53&quot; alt=&quot;Real-time Vision&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;4️⃣ Real-time vision and real-time screenshare detection&lt;/h3&gt; 
&lt;p&gt;Try Google Gemini Multimodal Live API with realtime vision and realtime screenshare detection capabilities, it is a ready-to-use extension, along with powerful tools like Weather Check and Web Search integrated perfectly into TEN Agent.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/234ff443-bef8-4cc4-9a10-09d6ec3f5bc1&quot; alt=&quot;TEN with Dify&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;5️⃣ TEN with other LLM platforms&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://theten.ai/docs/ten_agent/playground/use-cases/voice-assistant/run_dify#steps&quot;&gt;TEN Agent + Dify&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;TEN offers a great support to make the realtime interactive experience even better on other LLM platform as well, check out docs for more.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/fe28a549-ddb9-431e-9282-57539fb87371&quot; alt=&quot;TEN StoryTeller&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;6️⃣ StoryTeller - TEN image generation&lt;/h3&gt; 
&lt;p&gt;Experience the real-time image generation with StoryTeller, it is a ready-to-use extension, along with powerful tools like Weather Check and Web Search integrated perfectly into TEN.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;👩‍💻 Get TEN Agent up and running&lt;/h2&gt; 
&lt;h4&gt;🅰️ Run TEN Agent in localhost&lt;/h4&gt; 
&lt;h4&gt;Step ⓵ - Prerequisites&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Category&lt;/th&gt; 
   &lt;th&gt;Requirements&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Keys&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Agora &lt;a href=&quot;https://docs.agora.io/en/video-calling/get-started/manage-agora-account?platform=web#create-an-agora-project&quot;&gt;App ID&lt;/a&gt; and &lt;a href=&quot;https://docs.agora.io/en/video-calling/get-started/manage-agora-account?platform=web#create-an-agora-project&quot;&gt;App Certificate&lt;/a&gt; (free minutes every month) &lt;br /&gt;• &lt;a href=&quot;https://openai.com/index/openai-api/&quot;&gt;OpenAI&lt;/a&gt; API key (any LLM that is compatible with OpenAI)&lt;br /&gt;• &lt;a href=&quot;https://deepgram.com/&quot;&gt;Deepgram&lt;/a&gt; ASR (free credits available with signup)&lt;br /&gt;• &lt;a href=&quot;https://elevenlabs.io/&quot;&gt;Elevenlabs&lt;/a&gt; TTS (free credits available with signup)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; / &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt;&lt;br /&gt;• &lt;a href=&quot;https://nodejs.org/en&quot;&gt;Node.js(LTS) v18&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Minimum System Requirements&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• CPU &amp;gt;= 2 Core&lt;br /&gt;• RAM &amp;gt;= 4 GB&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;macOS: Docker setting on Apple Silicon&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Uncheck &quot;Use Rosetta for x86/amd64 emulation&quot; in Docker settings, it may result in slower build times on ARM, but performance will be normal when deployed to x64 servers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;h4&gt;Step ⓶ - Build agent in VM&lt;/h4&gt; 
&lt;h5&gt;1. Clone down the repo,&lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;ai-agents&lt;/code&gt; and create &lt;code&gt;.env&lt;/code&gt; file from &lt;code&gt;.env.example&lt;/code&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ai_agents
cp ./.env.example ./.env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;2. Setup Agora App ID and App Certificate in &lt;code&gt;.env&lt;/code&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;AGORA_APP_ID=
AGORA_APP_CERTIFICATE=
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;3. Start agent development containers&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;4. Enter container&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it ten_agent_dev bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;5. Build agent with the default &lt;code&gt;graph&lt;/code&gt; ( ~5min - ~8min)&lt;/h5&gt; 
&lt;p&gt;check the &lt;code&gt;/examples&lt;/code&gt; folder for more examples&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# use the default agent
task use

# or use the demo agent
task use AGENT=agents/examples/demo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;6. Start the web server&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;task run
&lt;/code&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;h4&gt;Step ⓷ - Customize your agent with TMAN Designer&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open &lt;a href=&quot;http://localhost:49483&quot;&gt;localhost:49483&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Right click to load the corresponding graph (e.g., Voice Assistant).&lt;/li&gt; 
 &lt;li&gt;Enter API keys and set preferences for each extension.&lt;/li&gt; 
 &lt;li&gt;Right click and Select &#39;Manage Apps&#39; to open the Apps Manager.&lt;/li&gt; 
 &lt;li&gt;Click the ▶ to run App.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h3&gt;🅱️ Run TEN Agent in Codespace(no docker)&lt;/h3&gt; 
&lt;p&gt;GitHub offers free Codespace for each repository, you can run the playground in Codespace without using Docker.Also, the speed of Codespace is much faster than localhost.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codespaces.new/ten-framework/ten-agent&quot;&gt;&lt;img src=&quot;https://github.com/codespaces/badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://theten.ai/docs/ten_agent/setup_development_env/setting_up_development_inside_codespace&quot;&gt;this guide&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;!-- ## 👀 TEN Agent Demo

Playground and Demo server different purposes, in a nut shell, think it as Playground is for you to customize you agent, and Demo is for you to deploy your agent.

Check out [this guide](https://theten.ai/docs/ten_agent/demo) for more details.
&lt;div align=&quot;right&quot;&gt;

[![][back-to-top]](#readme-top)

&lt;/div&gt;

&lt;br&gt; --&gt; 
&lt;h2&gt;🛳️ TEN Agent Self Hosting&lt;/h2&gt; 
&lt;h4&gt;🅰️ Deploying with Docker&lt;/h4&gt; 
&lt;p&gt;Once you have customized your agent (either by using the TMAN Manager, Playground, or editing &lt;code&gt;property.json&lt;/code&gt; directly), you can deploy it by creating a release Docker image for your service.&lt;/p&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://theten.ai/docs/ten_agent/deploy_ten_agent/deploy_agent_service&quot;&gt;Deployment Guide&lt;/a&gt; for detailed information about deployment.&lt;/p&gt; 
&lt;br /&gt; 
&lt;h4&gt;🅱️ Deploying with other cloud services&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;!--
## 🏗️ TEN Agent Architecture

1️⃣ **TEN Agent App**: Core application that manages extensions and data flow based on graph configuration

2️⃣ **Dev Server**: `port:49480`- local server for development purposes.

3️⃣ **Web Server**: `port:8080`- Golang server handling HTTP requests and agent process management

4️⃣ **Front-end UI**:

- `port:3000` Playground - To customize and test your agent configurations.
- `port:3002` Demo - To deploy your agent without module picker.

![Components Diagram](https://ten-framework-assets.s3.us-east-1.amazonaws.com/diagram.jpg)

&lt;div align=&quot;right&quot;&gt;

[![][back-to-top]](#readme-top)

&lt;/div&gt;

&lt;br&gt; --&gt; 
&lt;h2&gt;🌍 TEN Ecosystem&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Preview&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten_framework&quot;&gt;&lt;strong&gt;🏚️ TEN Framework&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN is an open-source framework for real-time, multimodal conversational AI.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten_framework?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7c8f72d7-3993-4d01-8504-b71578a22944&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten-turn-detection&quot;&gt;&lt;strong>️🔂 TEN Turn Detection&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN is for full-duplex dialogue communication.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten-turn-detection?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/8d0ec716-5d0e-43e4-ad9a-d97b17305658&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/ten-vad&quot;&gt;&lt;strong&gt;🔉 TEN VAD&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN VAD is a low-latency, lightweight and high-performance streaming voice activity detector (VAD).&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/ten-vad?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d45870e4-9453-4047-8163-08737f82863f&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/ai_agents&quot;&gt;&lt;strong&gt;🎙️ TEN Agent&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TEN Agent is a showcase of TEN Framewrok.&lt;br /&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/38de2207-939b-4702-a0aa-04491f5b5275&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-framework/tree/main/core/src/ten_manager/designer_frontend&quot;&gt;&lt;strong&gt;🎨 TMAN Designer&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;TMAN Designer is low/no code option to make a voice agent with easy to use workflow UI.&lt;br /&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/804c3543-0a47-42b7-b40b-ef32b742fb8f&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ten-framework/portal&quot;&gt;&lt;strong&gt;📒 TEN Portal&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;The official site of TEN framework, it has documentation and blog.&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://img.shields.io/github/stars/ten-framework/portal?color=ffcb47&amp;amp;labelColor=gray&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e17d8aaa-5928-45dd-ac71-814928e26a89&quot; alt=&quot;&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;❓ Ask Questions&lt;/h2&gt; 
&lt;p&gt;TEN Framework is available on these AI-powered Q&amp;amp;A platforms. They can help you find answers quickly and accurately in multiple languages, covering everything from basic setup to advanced implementation details.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Service&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepWiki&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://deepwiki.com/TEN-framework/TEN-framework&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ReadmeX&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://readmex.com/TEN-framework/ten-framework&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CodePhiliaX/resource-trusteeship/main/readmex.svg?sanitize=true&quot; alt=&quot;ReadmeX&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br /&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🥰 Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome all forms of open-source collaboration! Whether you&#39;re fixing bugs, adding features, improving documentation, or sharing ideas - your contributions help advance personalized AI tools. Check out our GitHub Issues and Projects to find ways to contribute and show your skills. Together, we can build something amazing!&lt;/p&gt; 
&lt;br /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Welcome all kinds of contributions&lt;/strong&gt; 🙏&lt;/p&gt; 
 &lt;p&gt;Join us in building TEN better! Every contribution makes a difference, from code to documentation. Share your TEN Agent projects on social media with to inspire others!&lt;/p&gt; 
 &lt;p&gt;Connect with one of the TEN maintainers &lt;a href=&quot;https://x.com/elliotchen100&quot;&gt;@elliotchen100&lt;/a&gt; on 𝕏 or &lt;a href=&quot;https://github.com/cyfyifanchen&quot;&gt;@cyfyifanchen&lt;/a&gt; on GitHub for project updates, discussions and collaboration opportunities.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/TEN-framework/ten-agent/graphs/contributors&quot;&gt;&lt;img src=&quot;https://contrib.rocks/image?repo=TEN-framework/ten-agent&quot; alt=&quot;TEN&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contribution Guidelines&lt;/h3&gt; 
&lt;p&gt;Contributions are welcome! Please read the &lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/docs/code-of-conduct/contributing.md&quot;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The entire TEN framework (except for the folders explicitly listed below) is released under the Apache License, Version 2.0, with additional restrictions. For details, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file located in the root directory of the TEN framework.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The components within the &lt;code&gt;packages&lt;/code&gt; directory are released under the Apache License, Version 2.0. For details, please refer to the &lt;code&gt;LICENSE&lt;/code&gt; file located in each package&#39;s root directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The third-party libraries used by the TEN framework are listed and described in detail. For more information, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/third_party/&quot;&gt;third_party&lt;/a&gt; folder.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/TEN-framework/ten-framework/main/#readme-top&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-Back_to_top-gray?style=flat-square&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>apache/age</title>
      <link>https://github.com/apache/age</link>
      <description>&lt;p&gt;Graph database optimized for fast analysis and real-time data processing. It is provided as an extension to PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;br /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://age.apache.org/age-manual/master/_static/logo.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://age.apache.org/age-manual/master/_static/logo.png&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://age.apache.org/age-manual/master/_static/logo.png&quot; height=&quot;30% alt=&quot; Apache AGE style=&quot;margin: 0 0 -3px 0&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://age.apache.org/age-manual/master/_static/logo.png&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt; is a leading multi-model graph database &lt;/h3&gt;  
&lt;h3 align=&quot;center&quot;&gt;Graph Processing &amp;amp; Analytics for Relational Databases&lt;/h3&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/apache/age/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/apache/age&quot; /&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/apache/age/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Release-v1.5.0-FFA500?labelColor=gray&amp;amp;style=flat&amp;amp;link=https://github.com/apache/age/releases&quot; /&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://www.postgresql.org/docs/17/index.html&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Version-Postgresql 17-00008B?labelColor=gray&amp;amp;style=flat&amp;amp;link=https://www.postgresql.org/docs/17/index.html&quot; /&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/apache/age/issues&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/issues/apache/age&quot; /&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/apache/age/network/members&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/forks/apache/age&quot; /&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/apache/age/stargazers&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/stars/apache/age&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/AGE.png&quot; /&gt;&amp;nbsp;&amp;nbsp;What is Apache AGE?&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://age.apache.org/#&quot;&gt;Apache AGE&lt;/a&gt; is an extension for PostgreSQL that enables users to leverage a graph database on top of the existing relational databases. AGE is an acronym for A Graph Extension and is inspired by Bitnine&#39;s AgensGraph, a multi-model database fork of PostgreSQL. The basic principle of the project is to create a single storage that handles both the relational and graph data model so that the users can use the standard ANSI SQL along with openCypher, one of the most popular graph query languages today. There is a strong need for cohesive, easy-to-implement multi-model databases. As an extension of PostgreSQL, AGE supports all the functionalities and features of PostgreSQL while also offering a graph model to boot. &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/apache/age/master/img/age-01.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/tick.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Overview&lt;/h2&gt; 
&lt;p&gt;Apache AGE is :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: adds graph database support to the already popular PostgreSQL database: PostgreSQL is used by organizations including Apple, Spotify, and NASA.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: allows you to perform openCypher queries, which makes complex queries much easier to write. It also enables querying multiple graphs at the same time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Intelligent&lt;/strong&gt;: allows you to perform graph queries that are the basis for many next-level web services such as fraud detection, master data management, product recommendations, identity and relationship management, experience personalization, knowledge management, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/features.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Features&lt;/h2&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/apache/age/master/img/age-03.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Cypher Query&lt;/strong&gt;: supports graph query language&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid Querying&lt;/strong&gt;: enables SQL and/or Cypher&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Querying&lt;/strong&gt;: enables multiple graphs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hierarchical&lt;/strong&gt;: graph label organization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Property Indexes&lt;/strong&gt;: on both vertices(nodes) and edges&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full PostgreSQL&lt;/strong&gt;: supports PG features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/documentation.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Documentation&lt;/h2&gt; 
&lt;p&gt;Refer to our latest &lt;a href=&quot;https://age.apache.org/age-manual/master/index.html&quot;&gt;Apache AGE documentation&lt;/a&gt; to learn about installation, features, built-in functions, and Cypher queries.&lt;/p&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Pre-Installation&lt;/h2&gt; 
&lt;p&gt;Install the following essential libraries according to each OS. Building AGE from the source depends on the following Linux libraries (Ubuntu package names shown below):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CentOS&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fedora&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dnf install gcc glibc bison flex readline readline-devel zlib zlib-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Installation&lt;/h2&gt; 
&lt;p&gt;Apache AGE is intended to be simple to install and run. It can be installed with Docker and other traditional ways.&lt;/p&gt; 
&lt;h4&gt;&lt;a&gt;&lt;img width=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/pg.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &amp;nbsp;Install PostgreSQL &lt;/h4&gt; 
&lt;p&gt;You will need to install an AGE compatible version of Postgres&lt;a&gt;, for now AGE supports Postgres 11, 12, 13, 14, 15, 16 &amp;amp; 17. Supporting the latest versions is on AGE roadmap.&lt;/a&gt;&lt;/p&gt;
&lt;a&gt; &lt;h4&gt; &amp;nbsp;Installation via Package Manager &lt;/h4&gt; &lt;/a&gt;
&lt;p&gt;&lt;a&gt;You can use a &lt;/a&gt;&lt;a href=&quot;https://www.postgresql.org/download/&quot;&gt;package management &lt;/a&gt; that your OS provides to download PostgreSQL.&lt;/p&gt; 
&lt;br /&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt install postgresql

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt; &amp;nbsp;Installation From Source Code &lt;/h4&gt; 
&lt;p&gt;You can &lt;a href=&quot;https://www.postgresql.org/ftp/source/&quot;&gt; download the Postgres &lt;/a&gt; source code and install your own instance of Postgres. You can read instructions on how to install from source code for different versions on the &lt;a href=&quot;https://www.postgresql.org/docs/17/installation.html&quot;&gt;official Postgres Website.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;img width=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/tux.svg?sanitize=true&quot; /&gt;&lt;img width=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/apple.svg?sanitize=true&quot; /&gt; &amp;nbsp;Install AGE on Linux and MacOS &lt;/h4&gt; 
&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/apache/age&quot;&gt;github repository&lt;/a&gt; or download the &lt;a href=&quot;https://github.com/apache/age/releases&quot;&gt;download an official release. &lt;/a&gt; Run the pg_config utility and check the version of PostgreSQL. Currently, only PostgreSQL versions 11, 12, 13, 14, 15, 16 &amp;amp; 17 are supported. If you have any other version of Postgres, you will need to install PostgreSQL version 11, 12, 13, 14, 15, 16 &amp;amp; 17. &lt;br /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pg_config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the following command in the source code directory of Apache AGE to build and install the extension.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the path to your Postgres installation is not in the PATH variable, add the path in the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make PG_CONFIG=/path/to/postgres/bin/pg_config install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;img width=&quot;30&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/docker.svg?sanitize=true&quot; /&gt; &amp;nbsp;Run using Docker &lt;/h4&gt; 
&lt;h5&gt; Get the docker image &lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull apache/age

&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt; Create AGE docker container &lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run \
    --name age  \
    -p 5455:5432 \
    -e POSTGRES_USER=postgresUser \
    -e POSTGRES_PASSWORD=postgresPW \
    -e POSTGRES_DB=postgresDB \
    -d \
    apache/age
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt; Enter PostgreSQL&#39;s psql: &lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker exec -it age psql -d postgresDB -U postgresUser
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Post Installation&lt;/h2&gt; 
&lt;p&gt;For every connection of AGE you start, you will need to load the AGE extension.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;CREATE EXTENSION age;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;LOAD &#39;age&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SET search_path = ag_catalog, &quot;$user&quot;, public;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Quick Start&lt;/h2&gt; 
&lt;p&gt;To create a graph, use the create_graph function located in the ag_catalog namespace.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SELECT create_graph(&#39;graph_name&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To create a single vertex with label and properties, use the CREATE clause.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SELECT * 
FROM cypher(&#39;graph_name&#39;, $$
    CREATE (:label {property:&quot;Node A&quot;})
$$) as (v agtype);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SELECT * 
FROM cypher(&#39;graph_name&#39;, $$
    CREATE (:label {property:&quot;Node B&quot;})
$$) as (v agtype);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To create an edge between two nodes and set its properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SELECT * 
FROM cypher(&#39;graph_name&#39;, $$
    MATCH (a:label), (b:label)
    WHERE a.property = &#39;Node A&#39; AND b.property = &#39;Node B&#39;
    CREATE (a)-[e:RELTYPE {property:a.property + &#39;&amp;lt;-&amp;gt;&#39; + b.property}]-&amp;gt;(b)
    RETURN e
$$) as (e agtype);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to query the connected nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SELECT * from cypher(&#39;graph_name&#39;, $$
        MATCH (V)-[R]-(V2)
        RETURN V,R,V2
$$) as (V agtype, R agtype, V2 agtype);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/gettingstarted.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Language Specific Drivers&lt;/h2&gt; 
&lt;p&gt;Starting with Apache AGE is very simple. You can easily select your platform and incorporate the relevant SDK into your code. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/apache/age/master/img/age-02.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt; &lt;/p&gt; 
&lt;h4&gt;Built-in&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/age/master/drivers/golang&quot;&gt;Go driver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/age/master/drivers/jdbc&quot;&gt;Java driver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/age/master/drivers/nodejs&quot;&gt;NodeJs driver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/age/master/drivers/python&quot;&gt;Python driver&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Community-driven Driver&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Dzordzu/rust-apache-age.git&quot;&gt;Apache AGE Rust Driver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Allison-E/pg-age&quot;&gt;Apache AGE .NET Driver&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/visualization.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Graph Visualization Tool for AGE&lt;/h2&gt; 
&lt;p&gt;Apache AGE Viewer is a user interface for Apache AGE that provides visualization and exploration of data. This web visualization tool allows users to enter complex graph queries and explore the results in graph and table forms. Apache AGE Viewer is enhanced to proceed with extensive graph data and discover insights through various graph algorithms. Apache AGE Viewer will become a graph data administration and development platform for Apache AGE to support multiple relational databases: &lt;a href=&quot;https://github.com/apache/age-viewer&quot;&gt;https://github.com/apache/age-viewer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This is a visualization tool.&lt;/strong&gt; After installing AGE Extension, you may use this tool to get access to the visualization features.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/age/master/img/agce.gif&quot; alt=&quot;Viewer gdb, and graph&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/videos.png&quot; /&gt;&amp;nbsp;&amp;nbsp;Video Links&lt;/h2&gt; 
&lt;p&gt;You can also get help from these videos.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install on &lt;a href=&quot;https://www.youtube.com/watch?v=ddk8VX8Hm-I&amp;amp;list=PLGp3huJbWNDjgwP7s99Q-9_w1vxpjNHXG&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install on &lt;a href=&quot;https://www.youtube.com/watch?v=0-qMwpDh0CA&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img height=&quot;20&quot; src=&quot;https://raw.githubusercontent.com/apache/age/master/img/community.svg?sanitize=true&quot; /&gt;&amp;nbsp;&amp;nbsp;Contributing&lt;/h2&gt; 
&lt;p&gt;You can improve ongoing efforts or initiate new ones by sending pull requests to &lt;a href=&quot;https://github.com/apache/age&quot;&gt;this repository&lt;/a&gt;. Also, you can learn from the code review process, how to merge pull requests, and from code style compliance to documentation by visiting the &lt;a href=&quot;https://age.apache.org/contribution/guide&quot;&gt;Apache AGE official site - Developer Guidelines&lt;/a&gt;. Send all your comments and inquiries to the user mailing list, &lt;a href=&quot;mailto:users@age.apache.org&quot;&gt;users@age.apache.org&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:36:53 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>iced-rs/iced</title>
      <link>https://github.com/iced-rs/iced</link>
      <description>&lt;p&gt;A cross-platform GUI library for Rust, inspired by Elm&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/docs/logo.svg?sanitize=true&quot; width=&quot;140px&quot; /&gt; 
 &lt;h1&gt;Iced&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://docs.rs/iced/&quot;&gt;&lt;img src=&quot;https://docs.rs/iced/badge.svg?sanitize=true&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/iced&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/iced.svg?sanitize=true&quot; alt=&quot;Crates.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iced-rs/iced/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/l/iced.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/iced&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/d/iced.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iced-rs/iced/actions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&amp;amp;event=push&amp;amp;label=test&quot; alt=&quot;Test Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discourse.iced.rs/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&amp;amp;query=%24.users_count&amp;amp;suffix=%20users&amp;amp;label=discourse&amp;amp;color=5e7ce2&quot; alt=&quot;Discourse&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/3xZJ65GAhd&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/628993209984614400?label=&amp;amp;labelColor=6A7EC2&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;A cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;.&lt;/p&gt; 
 &lt;a href=&quot;https://github.com/squidowl/halloy&quot;&gt; &lt;img src=&quot;https://iced.rs/showcase/halloy.gif&quot; width=&quot;460px&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/hecrj/icebreaker&quot;&gt; &lt;img src=&quot;https://iced.rs/showcase/icebreaker.gif&quot; width=&quot;360px&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple, easy-to-use, batteries-included API&lt;/li&gt; 
 &lt;li&gt;Type-safe, reactive programming model&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg&quot;&gt;Cross-platform support&lt;/a&gt; (Windows, macOS, Linux, and the Web)&lt;/li&gt; 
 &lt;li&gt;Responsive layout&lt;/li&gt; 
 &lt;li&gt;Built-in widgets (including &lt;a href=&quot;https://iced.rs/examples/text_input.mp4&quot;&gt;text inputs&lt;/a&gt;, &lt;a href=&quot;https://iced.rs/examples/scrollable.mp4&quot;&gt;scrollables&lt;/a&gt;, and more!)&lt;/li&gt; 
 &lt;li&gt;Custom widget support (create your own!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://iced.rs/examples/debug.mp4&quot;&gt;Debug overlay with performance metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;First-class support for async actions (use futures!)&lt;/li&gt; 
 &lt;li&gt;Modular ecosystem split into reusable parts: 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/runtime/&quot;&gt;renderer-agnostic native runtime&lt;/a&gt; enabling integration with existing systems&lt;/li&gt; 
   &lt;li&gt;Two built-in renderers leveraging &lt;a href=&quot;https://github.com/gfx-rs/wgpu&quot;&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/RazrFalcon/tiny-skia&quot;&gt;&lt;code&gt;tiny-skia&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/wgpu/&quot;&gt;&lt;code&gt;iced_wgpu&lt;/code&gt;&lt;/a&gt; supporting Vulkan, Metal and DX12&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/tiny_skia/&quot;&gt;&lt;code&gt;iced_tiny_skia&lt;/code&gt;&lt;/a&gt; offering a software alternative as a fallback&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;A &lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/winit/&quot;&gt;windowing shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Iced is currently experimental software.&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/ROADMAP.md&quot;&gt;Take a look at the roadmap&lt;/a&gt; and &lt;a href=&quot;https://github.com/iced-rs/iced/issues&quot;&gt;check out the issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Inspired by &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt;, Iced expects you to split user interfaces into four different concepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; — the state of your application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; — user interactions or meaningful events that you care about&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View logic&lt;/strong&gt; — a way to display your &lt;strong&gt;state&lt;/strong&gt; as widgets that may produce &lt;strong&gt;messages&lt;/strong&gt; on user interaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update logic&lt;/strong&gt; — a way to react to &lt;strong&gt;messages&lt;/strong&gt; and update your &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We can build something to see how this works! Let&#39;s say we want a simple counter that can be incremented and decremented using two buttons.&lt;/p&gt; 
&lt;p&gt;We start by modelling the &lt;strong&gt;state&lt;/strong&gt; of our application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;#[derive(Default)]
struct Counter {
    value: i32,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we need to define the possible user interactions of our counter: the button presses. These interactions are our &lt;strong&gt;messages&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;#[derive(Debug, Clone, Copy)]
pub enum Message {
    Increment,
    Decrement,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let&#39;s show the actual counter by putting it all together in our &lt;strong&gt;view logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&amp;amp;self) -&amp;gt; Column&amp;lt;Message&amp;gt; {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `Increment` message when pressed
            button(&quot;+&quot;).on_press(Message::Increment),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `Decrement` message when pressed
            button(&quot;-&quot;).on_press(Message::Decrement),
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, we need to be able to react to any produced &lt;strong&gt;messages&lt;/strong&gt; and change our &lt;strong&gt;state&lt;/strong&gt; accordingly in our &lt;strong&gt;update logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;impl Counter {
    // ...

    pub fn update(&amp;amp;mut self, message: Message) {
        match message {
            Message::Increment =&amp;gt; {
                self.value += 1;
            }
            Message::Decrement =&amp;gt; {
                self.value -= 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that&#39;s everything! We just wrote a whole user interface. Let&#39;s run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() -&amp;gt; iced::Result {
    iced::run(&quot;A cool counter&quot;, Counter::update, Counter::view)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Iced will automatically:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Take the result of our &lt;strong&gt;view logic&lt;/strong&gt; and layout its widgets.&lt;/li&gt; 
 &lt;li&gt;Process events from our system and produce &lt;strong&gt;messages&lt;/strong&gt; for our &lt;strong&gt;update logic&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Draw the resulting user interface.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://book.iced.rs/&quot;&gt;book&lt;/a&gt;, the &lt;a href=&quot;https://docs.rs/iced/&quot;&gt;documentation&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/iced-rs/iced/tree/master/examples#examples&quot;&gt;examples&lt;/a&gt; to learn more!&lt;/p&gt; 
&lt;h2&gt;Implementation details&lt;/h2&gt; 
&lt;p&gt;Iced was originally born as an attempt at bringing the simplicity of &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt; into &lt;a href=&quot;https://github.com/hecrj/coffee&quot;&gt;Coffee&lt;/a&gt;, a 2D game library I am working on.&lt;/p&gt; 
&lt;p&gt;The core of the library was implemented during May 2019 in &lt;a href=&quot;https://github.com/hecrj/coffee/pull/35&quot;&gt;this pull request&lt;/a&gt;. &lt;a href=&quot;https://github.com/iced-rs/iced/tree/0.1.0-alpha&quot;&gt;The first alpha version&lt;/a&gt; was eventually released as &lt;a href=&quot;https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/&quot;&gt;a renderer-agnostic GUI library&lt;/a&gt;. The library did not provide a renderer and implemented the current &lt;a href=&quot;https://raw.githubusercontent.com/iced-rs/iced/master/examples/README.md#tour&quot;&gt;tour example&lt;/a&gt; on top of &lt;a href=&quot;https://github.com/ggez/ggez&quot;&gt;&lt;code&gt;ggez&lt;/code&gt;&lt;/a&gt;, a game library.&lt;/p&gt; 
&lt;p&gt;Since then, the focus has shifted towards providing a batteries-included, end-user-oriented GUI library, while keeping the ecosystem modular.&lt;/p&gt; 
&lt;h2&gt;Contributing / Feedback&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, please read our &lt;a href=&quot;https://github.com/iced-rs/iced/raw/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Feedback is also welcome! You can create a new topic in &lt;a href=&quot;https://discourse.iced.rs/&quot;&gt;our Discourse forum&lt;/a&gt; or come chat to &lt;a href=&quot;https://discord.gg/3xZJ65GAhd&quot;&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The development of Iced is sponsored by the &lt;a href=&quot;https://cryptowat.ch/charts&quot;&gt;Cryptowatch&lt;/a&gt; team at &lt;a href=&quot;https://kraken.com/&quot;&gt;Kraken.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>denoland/deno</title>
      <link>https://github.com/denoland/deno</link>
      <description>&lt;p&gt;A modern runtime for JavaScript and TypeScript.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deno&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://crates.io/crates/deno&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/deno.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=deno_land&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/deno_land.svg?style=social&amp;amp;label=Follow&quot; alt=&quot;Twitter badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bsky.app/profile/deno.land&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Follow-whitesmoke?logo=bluesky&quot; alt=&quot;Bluesky badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/deno&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/684898665143206084?logo=discord&amp;amp;style=social&quot; alt=&quot;Discord badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/@deno_land&quot;&gt;&lt;img src=&quot;https://img.shields.io/youtube/channel/subscribers/UCqC2G2M-rg4fzg1esKFLFIw?style=social&quot; alt=&quot;YouTube badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img align=&quot;right&quot; src=&quot;https://deno.land/logo.svg?sanitize=true&quot; height=&quot;150px&quot; alt=&quot;the deno mascot dinosaur standing in the rain&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://deno.com&quot;&gt;Deno&lt;/a&gt; (&lt;a href=&quot;https://ipa-reader.com/?text=%CB%88di%CB%90no%CA%8A&quot;&gt;/ˈdiːnoʊ/&lt;/a&gt;, pronounced &lt;code&gt;dee-no&lt;/code&gt;) is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience. It&#39;s built on &lt;a href=&quot;https://v8.dev/&quot;&gt;V8&lt;/a&gt;, &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, and &lt;a href=&quot;https://tokio.rs/&quot;&gt;Tokio&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Learn more about the Deno runtime &lt;a href=&quot;https://docs.deno.com/runtime/manual&quot;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the Deno runtime on your system using one of the commands below. Note that there are a number of ways to install Deno - a comprehensive list of installation options can be found &lt;a href=&quot;https://docs.deno.com/runtime/manual/getting_started/installation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Shell (Mac, Linux):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl -fsSL https://deno.land/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;PowerShell (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;irm https://deno.land/install.ps1 | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://formulae.brew.sh/formula/deno&quot;&gt;Homebrew&lt;/a&gt; (Mac):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://chocolatey.org/packages/deno&quot;&gt;Chocolatey&lt;/a&gt; (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;choco install deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://winstall.app/apps/DenoLand.Deno&quot;&gt;WinGet&lt;/a&gt; (Windows):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;winget install --id=DenoLand.Deno
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build and install from source&lt;/h3&gt; 
&lt;p&gt;Complete instructions for building Deno from source can be found &lt;a href=&quot;https://github.com/denoland/deno/raw/main/.github/CONTRIBUTING.md#building-from-source&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Your first Deno program&lt;/h2&gt; 
&lt;p&gt;Deno can be used for many different applications, but is most commonly used to build web servers. Create a file called &lt;code&gt;server.ts&lt;/code&gt; and include the following TypeScript code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;Deno.serve((_req: Request) =&amp;gt; {
  return new Response(&quot;Hello, world!&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run your server with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;deno run --allow-net server.ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This should start a local web server on &lt;a href=&quot;http://localhost:8000&quot;&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Learn more about writing and running Deno programs &lt;a href=&quot;https://docs.deno.com/runtime/manual&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.deno.com&quot;&gt;Deno Docs&lt;/a&gt;&lt;/strong&gt;: official guides and reference docs for the Deno runtime, &lt;a href=&quot;https://deno.com/deploy&quot;&gt;Deno Deploy&lt;/a&gt;, and beyond.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://jsr.io/@std&quot;&gt;Deno Standard Library&lt;/a&gt;&lt;/strong&gt;: officially supported common utilities for Deno programs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://jsr.io/&quot;&gt;JSR&lt;/a&gt;&lt;/strong&gt;: The open-source package registry for modern JavaScript and TypeScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://deno.com/blog&quot;&gt;Developer Blog&lt;/a&gt;&lt;/strong&gt;: Product updates, tutorials, and more from the Deno team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We appreciate your help! To contribute, please read our &lt;a href=&quot;https://raw.githubusercontent.com/denoland/deno/main/.github/CONTRIBUTING.md&quot;&gt;contributing instructions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wezterm/wezterm</title>
      <link>https://github.com/wezterm/wezterm</link>
      <description>&lt;p&gt;A GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wez&#39;s Terminal&lt;/h1&gt; 
&lt;p&gt;&lt;img height=&quot;128&quot; alt=&quot;WezTerm Icon&quot; src=&quot;https://raw.githubusercontent.com/wezterm/wezterm/main/assets/icon/wezterm-icon.svg?sanitize=true&quot; align=&quot;left&quot; /&gt; &lt;em&gt;A GPU-accelerated cross-platform terminal emulator and multiplexer written by &lt;a href=&quot;https://github.com/wez&quot;&gt;@wez&lt;/a&gt; and implemented in &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;User facing docs and guide at: &lt;a href=&quot;https://wezterm.org/&quot;&gt;https://wezterm.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wezterm/wezterm/main/docs/screenshots/two.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Screenshot of wezterm on macOS, running vim&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://wezterm.org/installation&quot;&gt;https://wezterm.org/installation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;This is a spare time project, so please bear with me. There are a couple of channels for support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use the &lt;a href=&quot;https://github.com/wezterm/wezterm/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; to see if someone else has a similar issue, or to file a new one.&lt;/li&gt; 
 &lt;li&gt;Start or join a thread in our &lt;a href=&quot;https://github.com/wezterm/wezterm/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;; if you have general questions or want to chat with other wezterm users, you&#39;re welcome here!&lt;/li&gt; 
 &lt;li&gt;There is a &lt;a href=&quot;https://app.element.io/#/room/#wezterm:matrix.org&quot;&gt;Matrix room via Element.io&lt;/a&gt; for (potentially!) real time discussions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The GitHub Discussions and Element/Gitter rooms are better suited for questions than bug reports, but don&#39;t be afraid to use whichever you are most comfortable using and we&#39;ll work it out.&lt;/p&gt; 
&lt;h2&gt;Supporting the Project&lt;/h2&gt; 
&lt;p&gt;If you use and like WezTerm, please consider sponsoring it: your support helps to cover the fees required to maintain the project and to validate the time spent working on it!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://wezterm.org/sponsor.html&quot;&gt;Read more about sponsoring&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sponsors/wez&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/wez?label=Sponsor%20WezTerm&amp;amp;logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Sponsor WezTerm&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://patreon.com/WezFurlong&quot;&gt;Patreon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ko-fi.com/wezfurlong&quot;&gt;Ko-Fi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://liberapay.com/wez&quot;&gt;Liberapay&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>firecracker-microvm/firecracker</title>
      <link>https://github.com/firecracker-microvm/firecracker</link>
      <description>&lt;p&gt;Secure and fast microVMs for serverless computing.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;docs/images/fc_logo_full_transparent-bg_white-fg.png&quot; /&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;docs/images/fc_logo_full_transparent-bg.png&quot; /&gt; 
 &lt;img alt=&quot;Firecracker Logo Title&quot; width=&quot;750&quot; src=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/images/fc_logo_full_transparent-bg.png&quot; /&gt; 
&lt;/picture&gt; 
&lt;p&gt;Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.&lt;/p&gt; 
&lt;p&gt;Read more about the Firecracker Charter &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Firecracker?&lt;/h2&gt; 
&lt;p&gt;Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example &lt;a href=&quot;https://github.com/kata-containers/kata-containers&quot;&gt;Kata Containers&lt;/a&gt; and &lt;a href=&quot;https://github.com/liquidmetal-dev/flintlock&quot;&gt;Flintlock&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Firecracker was developed at Amazon Web Services to accelerate the speed and efficiency of services like &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/fargate/&quot;&gt;AWS Fargate&lt;/a&gt;. Firecracker is open sourced under &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/LICENSE&quot;&gt;Apache version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To read more about Firecracker, check out &lt;a href=&quot;https://firecracker-microvm.github.io&quot;&gt;firecracker-microvm.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with Firecracker, download the latest &lt;a href=&quot;https://github.com/firecracker-microvm/firecracker/releases&quot;&gt;release&lt;/a&gt; binaries or build it from source.&lt;/p&gt; 
&lt;p&gt;You can build Firecracker on any Unix/Linux system that has Docker running (we use a development container) and &lt;code&gt;bash&lt;/code&gt; installed, as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/firecracker-microvm/firecracker
cd firecracker
tools/devtool build
toolchain=&quot;$(uname -m)-unknown-linux-musl&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Firecracker binary will be placed at &lt;code&gt;build/cargo_target/${toolchain}/debug/firecracker&lt;/code&gt;. For more information on building, testing, and running Firecracker, go to the &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md&quot;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The overall security of Firecracker microVMs, including the ability to meet the criteria for safe multi-tenant computing, depends on a well configured Linux host operating system. A configuration that we believe meets this bar is included in &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md&quot;&gt;the production host setup document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Firecracker is already running production workloads within AWS, but it&#39;s still Day 1 on the journey guided by our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md&quot;&gt;mission&lt;/a&gt;. There&#39;s a lot more to build and we welcome all contributions.&lt;/p&gt; 
&lt;p&gt;To contribute to Firecracker, check out the development setup section in the &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md&quot;&gt;getting started guide&lt;/a&gt; and then the Firecracker &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;New Firecracker versions are released via the GitHub repository &lt;a href=&quot;https://github.com/firecracker-microvm/firecracker/releases&quot;&gt;releases&lt;/a&gt; page, typically every two or three months. A history of changes is recorded in our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Firecracker release policy is detailed &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;Firecracker&#39;s overall architecture is described in &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/design.md&quot;&gt;the design document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features &amp;amp; Capabilities&lt;/h2&gt; 
&lt;p&gt;Firecracker consists of a single micro Virtual Machine Manager process that exposes an API endpoint to the host once started. The API is &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/src/firecracker/swagger/firecracker.yaml&quot;&gt;specified in OpenAPI format&lt;/a&gt;. Read more about it in the &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests&quot;&gt;API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;API endpoint&lt;/strong&gt; can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure the microvm by: 
  &lt;ul&gt; 
   &lt;li&gt;Setting the number of vCPUs (the default is 1).&lt;/li&gt; 
   &lt;li&gt;Setting the memory size (the default is 128 MiB).&lt;/li&gt; 
   &lt;li&gt;Configuring a &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/cpu_templates/cpu-templates.md&quot;&gt;CPU template&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add one or more network interfaces to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add one or more read-write or read-only disks to the microVM, each represented by a file-backed block device.&lt;/li&gt; 
 &lt;li&gt;Trigger a block device re-scan while the guest is running. This enables the guest OS to pick up size changes to the block device&#39;s backing file.&lt;/li&gt; 
 &lt;li&gt;Change the backing file for a block device, before or after the guest boots.&lt;/li&gt; 
 &lt;li&gt;Configure rate limiters for virtio devices which can limit the bandwidth, operations per second, or both.&lt;/li&gt; 
 &lt;li&gt;Configure the logging and metric system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[BETA]&lt;/code&gt; Configure the data tree of the guest-facing metadata service. The service is only available to the guest if this resource is configured.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/vsock.md&quot;&gt;vsock socket&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/entropy.md&quot;&gt;entropy device&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Start the microVM using a given kernel image, root file system, and boot arguments.&lt;/li&gt; 
 &lt;li&gt;[x86_64 only] Stop the microVM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Built-in Capabilities&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Demand fault paging and CPU oversubscription enabled by default.&lt;/li&gt; 
 &lt;li&gt;Advanced, thread-specific seccomp filters for enhanced security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/jailer.md&quot;&gt;Jailer&lt;/a&gt; process for starting Firecracker in production scenarios; applies a cgroup/namespace isolation barrier and then drops privileges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tested platforms&lt;/h2&gt; 
&lt;p&gt;We test all combinations of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Instance&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Host OS &amp;amp; Kernel&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Guest Rootfs&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Guest Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;c5n.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;al2 linux_5.10&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;ubuntu 24.04&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;linux_5.10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m5n.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;al2023 linux_6.1&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;linux_6.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m6i.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m7i.metal-24xl&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m7i.metal-48xl&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m6a.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m7a.metal-48xl&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m6g.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m7g.metal&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m8g.metal-24xl&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;m8g.metal-48xl&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Known issues and Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;pl031&lt;/code&gt; RTC device on aarch64 does not support interrupts, so guest programs which use an RTC alarm (e.g. &lt;code&gt;hwclock&lt;/code&gt;) will not work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Firecracker&#39;s performance characteristics are listed as part of the &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SPECIFICATION.md&quot;&gt;specification documentation&lt;/a&gt;. All specifications are a part of our commitment to supporting container and function workloads in serverless operational models, and are therefore enforced via continuous integration testing.&lt;/p&gt; 
&lt;h2&gt;Policy for Security Disclosures&lt;/h2&gt; 
&lt;p&gt;The security of Firecracker is our top priority. If you suspect you have uncovered a vulnerability, contact us privately, as outlined in our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md&quot;&gt;security policy document&lt;/a&gt;; we will immediately prioritize your disclosure.&lt;/p&gt; 
&lt;h2&gt;FAQ &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;Frequently asked questions are collected in our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/FAQ.md&quot;&gt;FAQ doc&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can get in touch with the Firecracker community in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Security-related issues, see our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md&quot;&gt;security policy document&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with us on our &lt;a href=&quot;https://join.slack.com/t/firecracker-microvm/shared_invite/zt-2tc0mfxpc-tU~HYAYSzLDl5XGGJU3YIg&quot;&gt;Slack workspace&lt;/a&gt; &lt;em&gt;Note: most of the maintainers are on a European time zone.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Open a GitHub issue in this repository.&lt;/li&gt; 
 &lt;li&gt;Email the maintainers at &lt;a href=&quot;mailto:firecracker-maintainers@amazon.com&quot;&gt;firecracker-maintainers@amazon.com&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When communicating within the Firecracker community, please mind our &lt;a href=&quot;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer.&lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, see &lt;a href=&quot;https://chatgpt.com/codex&quot;&gt;chatgpt.com/codex&lt;/a&gt;.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png&quot; alt=&quot;Codex CLI splash&quot; width=&quot;50%&quot; /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;!-- Begin ToC --&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#installing-and-running-codex-cli&quot;&gt;Installing and running Codex CLI&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#using-codex-with-your-chatgpt-plan&quot;&gt;Using Codex with your ChatGPT plan&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#connecting-on-a-headless-machine&quot;&gt;Connecting on a &quot;Headless&quot; Machine&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#authenticate-locally-and-copy-your-credentials-to-the-headless-machine&quot;&gt;Authenticate locally and copy your credentials to the &quot;headless&quot; machine&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#connecting-through-vps-or-remote&quot;&gt;Connecting through VPS or remote&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#usage-based-billing-alternative-use-an-openai-api-key&quot;&gt;Usage-based billing alternative: Use an OpenAI API key&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#choosing-codexs-level-of-autonomy&quot;&gt;Choosing Codex&#39;s level of autonomy&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#1-readwrite&quot;&gt;&lt;strong&gt;1. Read/write&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#2-read-only&quot;&gt;&lt;strong&gt;2. Read-only&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#3-advanced-configuration&quot;&gt;&lt;strong&gt;3. Advanced configuration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#can-i-run-without-any-approvals&quot;&gt;Can I run without ANY approvals?&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#fine-tuning-in-configtoml&quot;&gt;Fine-tuning in &lt;code&gt;config.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#example-prompts&quot;&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#running-with-a-prompt-as-input&quot;&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#using-open-source-models&quot;&gt;Using Open Source Models&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#platform-sandboxing-details&quot;&gt;Platform sandboxing details&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#experimental-technology-disclaimer&quot;&gt;Experimental technology disclaimer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#system-requirements&quot;&gt;System requirements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#cli-reference&quot;&gt;CLI reference&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#memory--project-docs&quot;&gt;Memory &amp;amp; project docs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#non-interactive--ci-mode&quot;&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#model-context-protocol-mcp&quot;&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#tracing--verbose-logging&quot;&gt;Tracing / verbose logging&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#dotslash&quot;&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#zero-data-retention-zdr-usage&quot;&gt;Zero data retention (ZDR) usage&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#codex-open-source-fund&quot;&gt;Codex open source fund&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#contributing&quot;&gt;Contributing&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#development-workflow&quot;&gt;Development workflow&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#writing-high-impact-code-changes&quot;&gt;Writing high-impact code changes&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#opening-a-pull-request&quot;&gt;Opening a pull request&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#review-process&quot;&gt;Review process&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#community-values&quot;&gt;Community values&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#contributor-license-agreement-cla&quot;&gt;Contributor license agreement (CLA)&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#quick-fixes&quot;&gt;Quick fixes&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#releasing-codex&quot;&gt;Releasing &lt;code&gt;codex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#security--responsible-ai&quot;&gt;Security &amp;amp; responsible AI&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;!-- End ToC --&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g @openai/codex  # Alternatively: `brew install codex`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href=&quot;https://github.com/openai/codex/releases/latest&quot;&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png&quot; alt=&quot;Codex CLI login&quot; width=&quot;50%&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. You&#39;ll need a Plus, Pro, or Team ChatGPT account, and will get access to our latest models, including &lt;code&gt;gpt-5&lt;/code&gt;, at no extra cost to your plan. (Enterprise is coming soon.)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Important: If you&#39;ve used the Codex CLI before, follow these steps to migrate from usage-based billing with your API key:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Update the CLI and ensure &lt;code&gt;codex --version&lt;/code&gt; is &lt;code&gt;0.20.0&lt;/code&gt; or later&lt;/li&gt; 
  &lt;li&gt;Delete &lt;code&gt;~/.codex/auth.json&lt;/code&gt; (this should be &lt;code&gt;C:\Users\USERNAME\.codex\auth.json&lt;/code&gt; on Windows)&lt;/li&gt; 
  &lt;li&gt;Run &lt;code&gt;codex login&lt;/code&gt; again&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you encounter problems with the login flow, please comment on &lt;a href=&quot;https://github.com/openai/codex/issues/1243&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Connecting on a &quot;Headless&quot; Machine&lt;/h3&gt; 
&lt;p&gt;Today, the login process entails running a server on &lt;code&gt;localhost:1455&lt;/code&gt;. If you are on a &quot;headless&quot; server, such as a Docker container or are &lt;code&gt;ssh&lt;/code&gt;&#39;d into a remote machine, loading &lt;code&gt;localhost:1455&lt;/code&gt; in the browser on your local machine will not automatically connect to the webserver running on the &lt;em&gt;headless&lt;/em&gt; machine, so you must use one of the following workarounds:&lt;/p&gt; 
&lt;h4&gt;Authenticate locally and copy your credentials to the &quot;headless&quot; machine&lt;/h4&gt; 
&lt;p&gt;The easiest solution is likely to run through the &lt;code&gt;codex login&lt;/code&gt; process on your local machine such that &lt;code&gt;localhost:1455&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; accessible in your web browser. When you complete the authentication process, an &lt;code&gt;auth.json&lt;/code&gt; file should be available at &lt;code&gt;$CODEX_HOME/auth.json&lt;/code&gt; (on Mac/Linux, &lt;code&gt;$CODEX_HOME&lt;/code&gt; defaults to &lt;code&gt;~/.codex&lt;/code&gt; whereas on Windows, it defaults to &lt;code&gt;%USERPROFILE%\.codex&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Because the &lt;code&gt;auth.json&lt;/code&gt; file is not tied to a specific host, once you complete the authentication flow locally, you can copy the &lt;code&gt;$CODEX_HOME/auth.json&lt;/code&gt; file to the headless machine and then &lt;code&gt;codex&lt;/code&gt; should &quot;just work&quot; on that machine. Note to copy a file to a Docker container, you can do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# substitute MY_CONTAINER with the name or id of your Docker container:
CONTAINER_HOME=$(docker exec MY_CONTAINER printenv HOME)
docker exec MY_CONTAINER mkdir -p &quot;$CONTAINER_HOME/.codex&quot;
docker cp auth.json MY_CONTAINER:&quot;$CONTAINER_HOME/.codex/auth.json&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;whereas if you are &lt;code&gt;ssh&lt;/code&gt;&#39;d into a remote machine, you likely want to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_copy_protocol&quot;&gt;&lt;code&gt;scp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ssh user@remote &#39;mkdir -p ~/.codex&#39;
scp ~/.codex/auth.json user@remote:~/.codex/auth.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or try this one-liner:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ssh user@remote &#39;mkdir -p ~/.codex &amp;amp;&amp;amp; cat &amp;gt; ~/.codex/auth.json&#39; &amp;lt; ~/.codex/auth.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting through VPS or remote&lt;/h4&gt; 
&lt;p&gt;If you run Codex on a remote machine (VPS/server) without a local browser, the login helper starts a server on &lt;code&gt;localhost:1455&lt;/code&gt; on the remote host. To complete login in your local browser, forward that port to your machine before starting the login flow:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# From your local machine
ssh -L 1455:localhost:1455 &amp;lt;user&amp;gt;@&amp;lt;remote-host&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, in that SSH session, run &lt;code&gt;codex&lt;/code&gt; and select &quot;Sign in with ChatGPT&quot;. When prompted, open the printed URL (it will be &lt;code&gt;http://localhost:1455/...&lt;/code&gt;) in your local browser. The traffic will be tunneled to the remote server.&lt;/p&gt; 
&lt;h3&gt;Usage-based billing alternative: Use an OpenAI API key&lt;/h3&gt; 
&lt;p&gt;If you prefer to pay-as-you-go, you can still authenticate with your OpenAI API key by setting it as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export OPENAI_API_KEY=&quot;your-api-key-here&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;This command only sets the key for your current terminal session, which we recommend. To set it for all future sessions, you can also add the &lt;code&gt;export&lt;/code&gt; line to your shell&#39;s configuration file (e.g., &lt;code&gt;~/.zshrc&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;If you have signed in with ChatGPT, Codex will default to using your ChatGPT credits. If you wish to use your API key, use the &lt;code&gt;/logout&lt;/code&gt; command to clear your ChatGPT authentication.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Choosing Codex&#39;s level of autonomy&lt;/h3&gt; 
&lt;p&gt;We always recommend running Codex in its default sandbox that gives you strong guardrails around what the agent can do. The default sandbox prevents it from editing files outside its workspace, or from accessing the network.&lt;/p&gt; 
&lt;p&gt;When you launch Codex in a new folder, it detects whether the folder is version controlled and recommends one of two levels of autonomy:&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;1. Read/write&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Codex can run commands and write files in the workspace without approval.&lt;/li&gt; 
 &lt;li&gt;To write files in other folders, access network, update git or perform other actions protected by the sandbox, Codex will need your permission.&lt;/li&gt; 
 &lt;li&gt;By default, the workspace includes the current directory, as well as temporary directories like &lt;code&gt;/tmp&lt;/code&gt;. You can see what directories are in the workspace with the &lt;code&gt;/status&lt;/code&gt; command. See the docs for how to customize this behavior.&lt;/li&gt; 
 &lt;li&gt;Advanced: You can manually specify this configuration by running &lt;code&gt;codex --sandbox workspace-write --ask-for-approval on-request&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;This is the recommended default for version-controlled folders.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;2. Read-only&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Codex can run read-only commands without approval.&lt;/li&gt; 
 &lt;li&gt;To edit files, access network, or perform other actions protected by the sandbox, Codex will need your permission.&lt;/li&gt; 
 &lt;li&gt;Advanced: You can manually specify this configuration by running &lt;code&gt;codex --sandbox read-only --ask-for-approval on-request&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;This is the recommended default non-version-controlled folders.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;3. Advanced configuration&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Codex gives you fine-grained control over the sandbox with the &lt;code&gt;--sandbox&lt;/code&gt; option, and over when it requests approval with the &lt;code&gt;--ask-for-approval&lt;/code&gt; option. Run &lt;code&gt;codex help&lt;/code&gt; for more on these options.&lt;/p&gt; 
&lt;h4&gt;Can I run without ANY approvals?&lt;/h4&gt; 
&lt;p&gt;Yes, run codex non-interactively with &lt;code&gt;--ask-for-approval never&lt;/code&gt;. This option works with all &lt;code&gt;--sandbox&lt;/code&gt; options, so you still have full control over Codex&#39;s level of autonomy. It will make its best attempt with whatever contrainsts you provide. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox read-only&lt;/code&gt; when you are running many agents to answer questions in parallel in the same workspace.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox workspace-write&lt;/code&gt; when you want the agent to non-interactively take time to produce the best outcome, with strong guardrails around its behavior.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox danger-full-access&lt;/code&gt; to dangerously give the agent full autonomy. Because this disables important safety mechanisms, we recommend against using this unless running Codex in an isolated environment.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Fine-tuning in &lt;code&gt;config.toml&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# approval mode
approval_policy = &quot;untrusted&quot;
sandbox_mode    = &quot;read-only&quot;

# full-auto mode
approval_policy = &quot;on-request&quot;
sandbox_mode    = &quot;workspace-write&quot;

# Optional: allow network in workspace-write mode
[sandbox_workspace_write]
network_access = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also save presets as &lt;strong&gt;profiles&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[profiles.full_auto]
approval_policy = &quot;on-request&quot;
sandbox_mode    = &quot;workspace-write&quot;

[profiles.readonly_quiet]
approval_policy = &quot;never&quot;
sandbox_mode    = &quot;read-only&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example prompts&lt;/h3&gt; 
&lt;p&gt;Below are a few bite-size examples you can copy-paste. Replace the text in quotes with your own task. See the &lt;a href=&quot;https://github.com/openai/codex/raw/main/codex-cli/examples/prompting_guide.md&quot;&gt;prompting guide&lt;/a&gt; for more tips and usage patterns.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;✨&lt;/th&gt; 
   &lt;th&gt;What you type&lt;/th&gt; 
   &lt;th&gt;What happens&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Refactor the Dashboard component to React Hooks&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Codex rewrites the class component, runs &lt;code&gt;npm test&lt;/code&gt;, and shows the diff.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Generate SQL migrations for adding a users table&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Infers your ORM, creates migration files, and runs them in a sandboxed DB.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Write unit tests for utils/date.ts&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generates tests, executes them, and iterates until they pass.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Bulk-rename *.jpeg -&amp;gt; *.jpg with git mv&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Safely renames files and updates imports/usages.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Explain what this regex does: ^(?=.*[A-Z]).{8,}$&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Outputs a step-by-step human explanation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Carefully review this repo, and propose 3 high impact well-scoped PRs&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Suggests impactful PRs in the current codebase.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;Look for vulnerabilities and create a security review report&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Finds and explains security bugs.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Running with a prompt as input&lt;/h2&gt; 
&lt;p&gt;You can also run Codex CLI with a prompt as input:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;codex &quot;explain this codebase to me&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;codex --full-auto &quot;create the fanciest todo-list app&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it - Codex will scaffold a file, run it inside a sandbox, install any missing dependencies, and show you the live result. Approve the changes and they&#39;ll be committed to your working directory.&lt;/p&gt; 
&lt;h2&gt;Using Open Source Models&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Use &lt;code&gt;--profile&lt;/code&gt; to use other models&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Codex also allows you to use other providers that support the OpenAI Chat Completions (or Responses) API.&lt;/p&gt; 
 &lt;p&gt;To do so, you must first define custom &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/config.md#model_providers&quot;&gt;providers&lt;/a&gt; in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For example, the provider for a standard Ollama setup would be defined as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[model_providers.ollama]
name = &quot;Ollama&quot;
base_url = &quot;http://localhost:11434/v1&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;code&gt;base_url&lt;/code&gt; will have &lt;code&gt;/chat/completions&lt;/code&gt; appended to it to build the full URL for the request.&lt;/p&gt; 
 &lt;p&gt;For providers that also require an &lt;code&gt;Authorization&lt;/code&gt; header of the form &lt;code&gt;Bearer: SECRET&lt;/code&gt;, an &lt;code&gt;env_key&lt;/code&gt; can be specified, which indicates the environment variable to read to use as the value of &lt;code&gt;SECRET&lt;/code&gt; when making a request:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[model_providers.openrouter]
name = &quot;OpenRouter&quot;
base_url = &quot;https://openrouter.ai/api/v1&quot;
env_key = &quot;OPENROUTER_API_KEY&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Providers that speak the Responses API are also supported by adding &lt;code&gt;wire_api = &quot;responses&quot;&lt;/code&gt; as part of the definition. Accessing OpenAI models via Azure is an example of such a provider, though it also requires specifying additional &lt;code&gt;query_params&lt;/code&gt; that need to be appended to the request URL:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[model_providers.azure]
name = &quot;Azure&quot;
# Make sure you set the appropriate subdomain for this URL.
base_url = &quot;https://YOUR_PROJECT_NAME.openai.azure.com/openai&quot;
env_key = &quot;AZURE_OPENAI_API_KEY&quot;  # Or &quot;OPENAI_API_KEY&quot;, whichever you use.
# Newer versions appear to support the responses API, see https://github.com/openai/codex/pull/1321
query_params = { api-version = &quot;2025-04-01-preview&quot; }
wire_api = &quot;responses&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once you have defined a provider you wish to use, you can configure it as your default provider as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;model_provider = &quot;azure&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!TIP] If you find yourself experimenting with a variety of models and providers, then you likely want to invest in defining a &lt;em&gt;profile&lt;/em&gt; for each configuration like so:&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[profiles.o3]
model_provider = &quot;azure&quot;
model = &quot;o3&quot;

[profiles.mistral]
model_provider = &quot;ollama&quot;
model = &quot;mistral&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This way, you can specify one command-line argument (.e.g., &lt;code&gt;--profile o3&lt;/code&gt;, &lt;code&gt;--profile mistral&lt;/code&gt;) to override multiple settings together.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;Codex can run fully locally against an OpenAI-compatible OSS host (like Ollama) using the &lt;code&gt;--oss&lt;/code&gt; flag:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Interactive UI: 
  &lt;ul&gt; 
   &lt;li&gt;codex --oss&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Non-interactive (programmatic) mode: 
  &lt;ul&gt; 
   &lt;li&gt;echo &quot;Refactor utils&quot; | codex exec --oss&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Model selection when using &lt;code&gt;--oss&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you omit &lt;code&gt;-m/--model&lt;/code&gt;, Codex defaults to -m gpt-oss:20b and will verify it exists locally (downloading if needed).&lt;/li&gt; 
 &lt;li&gt;To pick a different size, pass one of: 
  &lt;ul&gt; 
   &lt;li&gt;-m &quot;gpt-oss:20b&quot;&lt;/li&gt; 
   &lt;li&gt;-m &quot;gpt-oss:120b&quot;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Point Codex at your own OSS host:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;By default, &lt;code&gt;--oss&lt;/code&gt; talks to &lt;a href=&quot;http://localhost:11434/v1&quot;&gt;http://localhost:11434/v1&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To use a different host, set one of these environment variables before running Codex: 
  &lt;ul&gt; 
   &lt;li&gt;CODEX_OSS_BASE_URL, for example: 
    &lt;ul&gt; 
     &lt;li&gt;CODEX_OSS_BASE_URL=&quot;&lt;a href=&quot;http://my-ollama.example.com:11434/v1&quot;&gt;http://my-ollama.example.com:11434/v1&lt;/a&gt;&quot; codex --oss -m gpt-oss:20b&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;or CODEX_OSS_PORT (when the host is localhost): 
    &lt;ul&gt; 
     &lt;li&gt;CODEX_OSS_PORT=11434 codex --oss&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced: you can persist this in your config instead of environment variables by overriding the built-in &lt;code&gt;oss&lt;/code&gt; provider in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[model_providers.oss]
name = &quot;Open Source&quot;
base_url = &quot;http://my-ollama.example.com:11434/v1&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Platform sandboxing details&lt;/h3&gt; 
&lt;p&gt;The mechanism Codex uses to implement the sandbox policy depends on your OS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 12+&lt;/strong&gt; uses &lt;strong&gt;Apple Seatbelt&lt;/strong&gt; and runs commands using &lt;code&gt;sandbox-exec&lt;/code&gt; with a profile (&lt;code&gt;-p&lt;/code&gt;) that corresponds to the &lt;code&gt;--sandbox&lt;/code&gt; that was specified.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; uses a combination of Landlock/seccomp APIs to enforce the &lt;code&gt;sandbox&lt;/code&gt; configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that when running Linux in a containerized environment such as Docker, sandboxing may not work if the host/container configuration does not support the necessary Landlock/seccomp APIs. In such cases, we recommend configuring your Docker container so that it provides the sandbox guarantees you are looking for and then running &lt;code&gt;codex&lt;/code&gt; with &lt;code&gt;--sandbox danger-full-access&lt;/code&gt; (or, more simply, the &lt;code&gt;--dangerously-bypass-approvals-and-sandbox&lt;/code&gt; flag) within your container.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Experimental technology disclaimer&lt;/h2&gt; 
&lt;p&gt;Codex CLI is an experimental project under active development. It is not yet stable, may contain bugs, incomplete features, or undergo breaking changes. We&#39;re building it in the open with the community and welcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports&lt;/li&gt; 
 &lt;li&gt;Feature requests&lt;/li&gt; 
 &lt;li&gt;Pull requests&lt;/li&gt; 
 &lt;li&gt;Good vibes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Help us improve by filing issues or submitting PRs (see the section below for how to contribute)!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;System requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Requirement&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operating systems&lt;/td&gt; 
   &lt;td&gt;macOS 12+, Ubuntu 20.04+/Debian 10+, or Windows 11 &lt;strong&gt;via WSL2&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Git (optional, recommended)&lt;/td&gt; 
   &lt;td&gt;2.23+ for built-in PR helpers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;RAM&lt;/td&gt; 
   &lt;td&gt;4-GB minimum (8-GB recommended)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;CLI reference&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Purpose&lt;/th&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Interactive TUI&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;...&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Initial prompt for interactive TUI&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex &quot;fix lint errors&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex exec &quot;...&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Non-interactive &quot;automation mode&quot;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex exec &quot;explain utils.ts&quot;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Key flags: &lt;code&gt;--model/-m&lt;/code&gt;, &lt;code&gt;--ask-for-approval/-a&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Memory &amp;amp; project docs&lt;/h2&gt; 
&lt;p&gt;You can give Codex extra instructions and guidance using &lt;code&gt;AGENTS.md&lt;/code&gt; files. Codex looks for &lt;code&gt;AGENTS.md&lt;/code&gt; files in the following places, and merges them top-down:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;~/.codex/AGENTS.md&lt;/code&gt; - personal global guidance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AGENTS.md&lt;/code&gt; at repo root - shared project notes&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AGENTS.md&lt;/code&gt; in the current working directory - sub-folder/feature specifics&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Non-interactive / CI mode&lt;/h2&gt; 
&lt;p&gt;Run Codex head-less in pipelines. Example GitHub Action step:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- name: Update changelog via Codex
  run: |
    npm install -g @openai/codex
    export OPENAI_API_KEY=&quot;${{ secrets.OPENAI_KEY }}&quot;
    codex exec --full-auto &quot;update CHANGELOG for next release&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Model Context Protocol (MCP)&lt;/h2&gt; 
&lt;p&gt;The Codex CLI can be configured to leverage MCP servers by defining an &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md#mcp_servers&quot;&gt;&lt;code&gt;mcp_servers&lt;/code&gt;&lt;/a&gt; section in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. It is intended to mirror how tools such as Claude and Cursor define &lt;code&gt;mcpServers&lt;/code&gt; in their respective JSON config files, though the Codex format is slightly different since it uses TOML rather than JSON, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# IMPORTANT: the top-level key is `mcp_servers` rather than `mcpServers`.
[mcp_servers.server-name]
command = &quot;npx&quot;
args = [&quot;-y&quot;, &quot;mcp-server&quot;]
env = { &quot;API_KEY&quot; = &quot;value&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] It is somewhat experimental, but the Codex CLI can also be run as an MCP &lt;em&gt;server&lt;/em&gt; via &lt;code&gt;codex mcp&lt;/code&gt;. If you launch it with an MCP client such as &lt;code&gt;npx @modelcontextprotocol/inspector codex mcp&lt;/code&gt; and send it a &lt;code&gt;tools/list&lt;/code&gt; request, you will see that there is only one tool, &lt;code&gt;codex&lt;/code&gt;, that accepts a grab-bag of inputs, including a catch-all &lt;code&gt;config&lt;/code&gt; map for anything you might want to override. Feel free to play around with it and provide feedback via GitHub issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Tracing / verbose logging&lt;/h2&gt; 
&lt;p&gt;Because Codex is written in Rust, it honors the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable to configure its logging behavior.&lt;/p&gt; 
&lt;p&gt;The TUI defaults to &lt;code&gt;RUST_LOG=codex_core=info,codex_tui=info&lt;/code&gt; and log messages are written to &lt;code&gt;~/.codex/log/codex-tui.log&lt;/code&gt;, so you can leave the following running in a separate terminal to monitor log messages as they are written:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tail -F ~/.codex/log/codex-tui.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By comparison, the non-interactive mode (&lt;code&gt;codex exec&lt;/code&gt;) defaults to &lt;code&gt;RUST_LOG=error&lt;/code&gt;, but messages are printed inline, so there is no need to monitor a separate file.&lt;/p&gt; 
&lt;p&gt;See the Rust documentation on &lt;a href=&quot;https://docs.rs/env_logger/latest/env_logger/#enabling-logging&quot;&gt;&lt;code&gt;RUST_LOG&lt;/code&gt;&lt;/a&gt; for more information on the configuration options.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;DotSlash&lt;/h3&gt; 
&lt;p&gt;The GitHub Release also contains a &lt;a href=&quot;https://dotslash-cli.com/&quot;&gt;DotSlash&lt;/a&gt; file for the Codex CLI named &lt;code&gt;codex&lt;/code&gt;. Using a DotSlash file makes it possible to make a lightweight commit to source control to ensure all contributors use the same version of an executable, regardless of what platform they use for development.&lt;/p&gt;  
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Build from source&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Clone the repository and navigate to the root of the Cargo workspace.
git clone https://github.com/openai/codex.git
cd codex/codex-rs

# Install the Rust toolchain, if necessary.
curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source &quot;$HOME/.cargo/env&quot;
rustup component add rustfmt
rustup component add clippy

# Build Codex.
cargo build

# Launch the TUI with a sample prompt.
cargo run --bin codex -- &quot;explain this codebase to me&quot;

# After making changes, ensure the code is clean.
cargo fmt -- --config imports_granularity=Item
cargo clippy --tests

# Run the tests.
cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Codex supports a rich set of configuration options documented in &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md&quot;&gt;&lt;code&gt;codex-rs/config.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;By default, Codex loads its configuration from &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Though &lt;code&gt;--config&lt;/code&gt; can be used to set/override ad-hoc config values for individual invocations of &lt;code&gt;codex&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;OpenAI released a model called Codex in 2021 - is this related?&lt;/summary&gt; 
 &lt;p&gt;In 2021, OpenAI released Codex, an AI system designed to generate code from natural language prompts. That original Codex model was deprecated as of March 2023 and is separate from the CLI tool.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Which models are supported?&lt;/summary&gt; 
 &lt;p&gt;Any model available with &lt;a href=&quot;https://platform.openai.com/docs/api-reference/responses&quot;&gt;Responses API&lt;/a&gt;. The default is &lt;code&gt;o4-mini&lt;/code&gt;, but pass &lt;code&gt;--model gpt-4.1&lt;/code&gt; or set &lt;code&gt;model: gpt-4.1&lt;/code&gt; in your config file to override.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Why does &lt;code&gt;o3&lt;/code&gt; or &lt;code&gt;o4-mini&lt;/code&gt; not work for me?&lt;/summary&gt; 
 &lt;p&gt;It&#39;s possible that your &lt;a href=&quot;https://help.openai.com/en/articles/10910291-api-organization-verification&quot;&gt;API account needs to be verified&lt;/a&gt; in order to start streaming responses and seeing chain of thought summaries from the API. If you&#39;re still running into issues, please let us know!&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;How do I stop Codex from editing my files?&lt;/summary&gt; 
 &lt;p&gt;Codex runs model-generated commands in a sandbox. If a proposed command or file change doesn&#39;t look right, you can simply type &lt;strong&gt;n&lt;/strong&gt; to deny the command or give the model feedback.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Does it work on Windows?&lt;/summary&gt; 
 &lt;p&gt;Not directly. It requires &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/wsl/install&quot;&gt;Windows Subsystem for Linux (WSL2)&lt;/a&gt; - Codex has been tested on macOS and Linux with Node 22.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Zero data retention (ZDR) usage&lt;/h2&gt; 
&lt;p&gt;Codex CLI &lt;strong&gt;does&lt;/strong&gt; support OpenAI organizations with &lt;a href=&quot;https://platform.openai.com/docs/guides/your-data#zero-data-retention&quot;&gt;Zero Data Retention (ZDR)&lt;/a&gt; enabled. If your OpenAI organization has Zero Data Retention enabled and you still encounter errors such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;OpenAI rejected the request. Error details: Status: 400, Code: unsupported_parameter, Type: invalid_request_error, Message: 400 Previous response cannot be used for this organization due to Zero Data Retention.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure you are running &lt;code&gt;codex&lt;/code&gt; with &lt;code&gt;--config disable_response_storage=true&lt;/code&gt; or add this line to &lt;code&gt;~/.codex/config.toml&lt;/code&gt; to avoid specifying the command line option each time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;disable_response_storage = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md#disable_response_storage&quot;&gt;the configuration documentation on &lt;code&gt;disable_response_storage&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Codex open source fund&lt;/h2&gt; 
&lt;p&gt;We&#39;re excited to launch a &lt;strong&gt;$1 million initiative&lt;/strong&gt; supporting open source projects that use Codex CLI and other OpenAI models.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grants are awarded up to &lt;strong&gt;$25,000&lt;/strong&gt; API credits.&lt;/li&gt; 
 &lt;li&gt;Applications are reviewed &lt;strong&gt;on a rolling basis&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Interested? &lt;a href=&quot;https://openai.com/form/codex-open-source-fund/&quot;&gt;Apply here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project is under active development and the code will likely change pretty significantly. We&#39;ll update this message once that&#39;s complete!&lt;/p&gt; 
&lt;p&gt;More broadly we welcome contributions - whether you are opening your very first pull request or you&#39;re a seasoned maintainer. At the same time we care about reliability and long-term maintainability, so the bar for merging code is intentionally &lt;strong&gt;high&lt;/strong&gt;. The guidelines below spell out what &quot;high-quality&quot; means in practice and should make the whole process transparent and friendly.&lt;/p&gt; 
&lt;h3&gt;Development workflow&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a &lt;em&gt;topic branch&lt;/em&gt; from &lt;code&gt;main&lt;/code&gt; - e.g. &lt;code&gt;feat/interactive-prompt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Keep your changes focused. Multiple unrelated fixes should be opened as separate PRs.&lt;/li&gt; 
 &lt;li&gt;Following the &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/#development-workflow&quot;&gt;development setup&lt;/a&gt; instructions above, ensure your change is free of lint warnings and test failures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Writing high-impact code changes&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Start with an issue.&lt;/strong&gt; Open a new one or comment on an existing discussion so we can agree on the solution before code is written.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add or update tests.&lt;/strong&gt; Every new feature or bug-fix should come with test coverage that fails before your change and passes afterwards. 100% coverage is not required, but aim for meaningful assertions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Document behaviour.&lt;/strong&gt; If your change affects user-facing behaviour, update the README, inline help (&lt;code&gt;codex --help&lt;/code&gt;), or relevant example projects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Keep commits atomic.&lt;/strong&gt; Each commit should compile and the tests should pass. This makes reviews and potential rollbacks easier.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Opening a pull request&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fill in the PR template (or include similar information) - &lt;strong&gt;What? Why? How?&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;strong&gt;all&lt;/strong&gt; checks locally (&lt;code&gt;cargo test &amp;amp;&amp;amp; cargo clippy --tests &amp;amp;&amp;amp; cargo fmt -- --config imports_granularity=Item&lt;/code&gt;). CI failures that could have been caught locally slow down the process.&lt;/li&gt; 
 &lt;li&gt;Make sure your branch is up-to-date with &lt;code&gt;main&lt;/code&gt; and that you have resolved merge conflicts.&lt;/li&gt; 
 &lt;li&gt;Mark the PR as &lt;strong&gt;Ready for review&lt;/strong&gt; only when you believe it is in a merge-able state.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Review process&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;One maintainer will be assigned as a primary reviewer.&lt;/li&gt; 
 &lt;li&gt;We may ask for changes - please do not take this personally. We value the work, we just also value consistency and long-term maintainability.&lt;/li&gt; 
 &lt;li&gt;When there is consensus that the PR meets the bar, a maintainer will squash-and-merge.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Community values&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Be kind and inclusive.&lt;/strong&gt; Treat others with respect; we follow the &lt;a href=&quot;https://www.contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Assume good intent.&lt;/strong&gt; Written communication is hard - err on the side of generosity.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Teach &amp;amp; learn.&lt;/strong&gt; If you spot something confusing, open an issue or PR with improvements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Getting help&lt;/h3&gt; 
&lt;p&gt;If you run into problems setting up the project, would like feedback on an idea, or just want to say &lt;em&gt;hi&lt;/em&gt; - please open a Discussion or jump into the relevant issue. We are happy to help.&lt;/p&gt; 
&lt;p&gt;Together we can make Codex CLI an incredible tool. &lt;strong&gt;Happy hacking!&lt;/strong&gt; &lt;span&gt;🚀&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;Contributor license agreement (CLA)&lt;/h3&gt; 
&lt;p&gt;All contributors &lt;strong&gt;must&lt;/strong&gt; accept the CLA. The process is lightweight:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Open your pull request.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Paste the following comment (or reply &lt;code&gt;recheck&lt;/code&gt; if you&#39;ve signed before):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;I have read the CLA Document and I hereby sign the CLA
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The CLA-Assistant bot records your signature in the repo and marks the status check as passed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;No special Git commands, email attachments, or commit footers required.&lt;/p&gt; 
&lt;h4&gt;Quick fixes&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Scenario&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Amend last commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git commit --amend -s --no-edit &amp;amp;&amp;amp; git push -f&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;strong&gt;DCO check&lt;/strong&gt; blocks merges until every commit in the PR carries the footer (with squash this is just the one).&lt;/p&gt; 
&lt;h3&gt;Releasing &lt;code&gt;codex&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;For admins only.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Make sure you are on &lt;code&gt;main&lt;/code&gt; and have no local changes. Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;VERSION=0.2.0  # Can also be 0.2.0-alpha.1 or any valid Rust version.
./codex-rs/scripts/create_github_release.sh &quot;$VERSION&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will make a local commit on top of &lt;code&gt;main&lt;/code&gt; with &lt;code&gt;version&lt;/code&gt; set to &lt;code&gt;$VERSION&lt;/code&gt; in &lt;code&gt;codex-rs/Cargo.toml&lt;/code&gt; (note that on &lt;code&gt;main&lt;/code&gt;, we leave the version as &lt;code&gt;version = &quot;0.0.0&quot;&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;This will push the commit using the tag &lt;code&gt;rust-v${VERSION}&lt;/code&gt;, which in turn kicks off &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/.github/workflows/rust-release.yml&quot;&gt;the release workflow&lt;/a&gt;. This will create a new GitHub Release named &lt;code&gt;$VERSION&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If everything looks good in the generated GitHub Release, uncheck the &lt;strong&gt;pre-release&lt;/strong&gt; box so it is the latest release.&lt;/p&gt; 
&lt;p&gt;Create a PR to update &lt;a href=&quot;https://github.com/Homebrew/homebrew-core/raw/main/Formula/c/codex.rb&quot;&gt;&lt;code&gt;Formula/c/codex.rb&lt;/code&gt;&lt;/a&gt; on Homebrew.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Security &amp;amp; responsible AI&lt;/h2&gt; 
&lt;p&gt;Have you discovered a vulnerability or have concerns about model output? Please e-mail &lt;strong&gt;&lt;a href=&quot;mailto:security@openai.com&quot;&gt;security@openai.com&lt;/a&gt;&lt;/strong&gt; and we will respond promptly.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/openai/codex/main/LICENSE&quot;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ratatui/ratatui</title>
      <link>https://github.com/ratatui/ratatui</link>
      <description>&lt;p&gt;A Rust crate for cooking up terminal user interfaces (TUIs) 👨‍🍳🐀 https://ratatui.rs&lt;/p&gt;&lt;hr&gt;&lt;details&gt; 
 &lt;summary&gt;Table of Contents&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#built-with-ratatui&quot;&gt;Built with Ratatui&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#alternatives&quot;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/ratatui/ratatui/raw/b23480adfa9430697071c906c7ba4d4f9bd37a73/assets/release-header.png?raw=true&quot; alt=&quot;Release header&quot; /&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/ratatui&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/ratatui?logo=rust&amp;amp;style=flat-square&amp;amp;color=E05D44&quot; alt=&quot;Crate Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ratatui/ratatui&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/repo-ratatui/ratatui-1370D3?style=flat-square&amp;amp;logo=github&quot; alt=&quot;Repo Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.rs/ratatui&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-ratatui-1370D3?style=flat-square&amp;amp;logo=rust&quot; alt=&quot;Docs Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/l/ratatui?style=flat-square&amp;amp;color=1370D3&quot; alt=&quot;License Badge&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/ratatui/ratatui/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/ratatui/ratatui/ci.yml?style=flat-square&amp;amp;logo=github&quot; alt=&quot;CI Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://deps.rs/repo/github/ratatui/ratatui?path=ratatui&quot;&gt;&lt;img src=&quot;https://deps.rs/repo/github/ratatui/ratatui/status.svg?path=ratatui&amp;amp;style=flat-square&quot; alt=&quot;Deps Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codecov.io/gh/ratatui/ratatui&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/ratatui/ratatui?logo=codecov&amp;amp;style=flat-square&amp;amp;token=BAQ8SOKEST&amp;amp;color=C43AC3&quot; alt=&quot;Codecov Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/ratatui&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/ratatui?logo=github&amp;amp;style=flat-square&amp;amp;color=1370D3&quot; alt=&quot;Sponsors Badge&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://ratatui.rs/&quot;&gt;Ratatui Website&lt;/a&gt; · &lt;a href=&quot;https://docs.rs/ratatui&quot;&gt;Docs&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples&quot;&gt;Widget Examples&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/tree/main/examples&quot;&gt;App Examples&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&quot;&gt;Breaking Changes&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&quot;&gt;Report a bug&lt;/a&gt; · &lt;a href=&quot;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&quot;&gt;Request a Feature&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href=&quot;https://ratatui.rs/&quot;&gt;Ratatui&lt;/a&gt; (&lt;em&gt;ˌræ.təˈtu.i&lt;/em&gt;) is a Rust crate for cooking up terminal user interfaces (TUIs). It provides a simple and flexible way to create text-based user interfaces in the terminal, which can be used for command-line applications, dashboards, and other interactive console programs.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Ratatui has &lt;a href=&quot;https://github.com/ratatui/templates/&quot;&gt;templates&lt;/a&gt; available to help you get started quickly. You can use the &lt;a href=&quot;https://crates.io/crates/cargo-generate&quot;&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt; command to create a new project with Ratatui:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo install --locked cargo-generate
cargo generate ratatui/templates
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Selecting the Hello World template produces the following application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use color_eyre::Result;
use crossterm::event::{self, Event};
use ratatui::{DefaultTerminal, Frame};

fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {
    color_eyre::install()?;
    let terminal = ratatui::init();
    let result = run(terminal);
    ratatui::restore();
    result
}

fn run(mut terminal: DefaultTerminal) -&amp;gt; Result&amp;lt;()&amp;gt; {
    loop {
        terminal.draw(render)?;
        if matches!(event::read()?, Event::Key(_)) {
            break Ok(());
        }
    }
}

fn render(frame: &amp;amp;mut Frame) {
    frame.render_widget(&quot;hello world&quot;, frame.area());
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.rs/ratatui&quot;&gt;Docs&lt;/a&gt; - the full API documentation for the library on docs.rs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ratatui.rs/&quot;&gt;Ratatui Website&lt;/a&gt; - explains the library&#39;s concepts and provides step-by-step tutorials.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.ratatui.rs&quot;&gt;Ratatui Forum&lt;/a&gt; - a place to ask questions and discuss the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples&quot;&gt;Widget Examples&lt;/a&gt; - a collection of examples that demonstrate how to use the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ratatui/ratatui/tree/main/examples&quot;&gt;App Examples&lt;/a&gt; - a collection of more complex examples that demonstrate how to build apps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/ARCHITECTURE.md&quot;&gt;ARCHITECTURE.md&lt;/a&gt; - explains the crate organization and modular workspace structure.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; - generated by &lt;a href=&quot;https://git-cliff.org&quot;&gt;git-cliff&lt;/a&gt; utilizing &lt;a href=&quot;https://www.conventionalcommits.org&quot;&gt;Conventional Commits&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&quot;&gt;Breaking Changes&lt;/a&gt; - a list of breaking changes in the library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also watch the &lt;a href=&quot;https://www.youtube.com/watch?v=hWG51Mc1DlM&quot;&gt;EuroRust 2024 talk&lt;/a&gt; to learn about common concepts in Ratatui and what&#39;s possible to build with it.&lt;/p&gt; 
&lt;h2&gt;Templates&lt;/h2&gt; 
&lt;p&gt;If you&#39;re looking to get started quickly, you can use one of the available templates from the &lt;a href=&quot;https://github.com/ratatui/templates/&quot;&gt;templates&lt;/a&gt; repository using &lt;a href=&quot;https://crates.io/crates/cargo-generate&quot;&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cargo generate ratatui/templates
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Built with Ratatui&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ratatui/awesome-ratatui&quot;&gt;&lt;img src=&quot;https://awesome.re/badge-flat2.svg?sanitize=true&quot; alt=&quot;Awesome&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://ratatui.rs/showcase/&quot;&gt;showcase&lt;/a&gt; section of the website, or the &lt;a href=&quot;https://github.com/ratatui/awesome-ratatui&quot;&gt;awesome-ratatui&lt;/a&gt; repository for a curated list of awesome apps and libraries built with Ratatui!&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://crates.io/crates/cursive&quot;&gt;Cursive&lt;/a&gt; - a ncurses-based TUI library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://crates.io/crates/iocraft&quot;&gt;iocraft&lt;/a&gt; - a declarative TUI library.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/pMCEU9hNEj&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1070692720437383208?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&amp;amp;color=1370D3&amp;amp;logoColor=1370D3&quot; alt=&quot;Discord Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://matrix.to/#/#ratatui:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/matrix/ratatui-general%3Amatrix.org?style=flat-square&amp;amp;logo=matrix&amp;amp;label=Matrix&amp;amp;color=C43AC3&quot; alt=&quot;Matrix Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://forum.ratatui.rs&quot;&gt;&lt;img src=&quot;https://img.shields.io/discourse/likes?server=https%3A%2F%2Fforum.ratatui.rs&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;label=forum&amp;amp;color=C43AC3&quot; alt=&quot;Forum Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Feel free to join our &lt;a href=&quot;https://discord.gg/pMCEU9hNEj&quot;&gt;Discord server&lt;/a&gt; for discussions and questions! There is also a &lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix&lt;/a&gt; bridge available at &lt;a href=&quot;https://matrix.to/#/#ratatui:matrix.org&quot;&gt;#ratatui:matrix.org&lt;/a&gt;. We have also recently launched the &lt;a href=&quot;https://forum.ratatui.rs&quot;&gt;Ratatui Forum&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We rely on GitHub for &lt;a href=&quot;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&quot;&gt;bugs&lt;/a&gt; and &lt;a href=&quot;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&quot;&gt;feature requests&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please make sure you read the &lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; guidelines before &lt;a href=&quot;https://github.com/ratatui/ratatui/compare&quot;&gt;creating a pull request&lt;/a&gt;. We accept AI generated code, but please read the &lt;a href=&quot;https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md#ai-generated-content&quot;&gt;AI Contributions&lt;/a&gt; guidelines to ensure compliance.&lt;/p&gt; 
&lt;p&gt;If you&#39;d like to show your support, you can add the Ratatui badge to your project&#39;s README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;[![Built With Ratatui](https://img.shields.io/badge/Built_With_Ratatui-000?logo=ratatui&amp;amp;logoColor=fff)](https://ratatui.rs/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://ratatui.rs/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Built_With_Ratatui-000?logo=ratatui&amp;amp;logoColor=fff&quot; alt=&quot;Built With Ratatui&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Ratatui was forked from the &lt;a href=&quot;https://crates.io/crates/tui&quot;&gt;tui-rs&lt;/a&gt; crate in 2023 in order to continue its development. None of this could be possible without &lt;a href=&quot;https://github.com/fdehau&quot;&gt;Florian Dehau&lt;/a&gt; who originally created &lt;a href=&quot;https://crates.io/crates/tui&quot;&gt;tui-rs&lt;/a&gt; which inspired many Rust TUIs.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href=&quot;https://github.com/nawok&quot;&gt;Pavel Fomchenkov&lt;/a&gt; for his work in designing an awesome logo for the Ratatui project and organization.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/astral-sh/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json&quot; alt=&quot;uv&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/uv.svg?sanitize=true&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/l/uv.svg?sanitize=true&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/uv&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/astral-sh/uv/actions&quot;&gt;&lt;img src=&quot;https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Actions status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/astral-sh&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;picture align=&quot;center&quot;&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot; /&gt; 
  &lt;img alt=&quot;Shows a bar chart with benchmark results.&quot; src=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot; /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;i&gt;Installing &lt;a href=&quot;https://trio.readthedocs.io/&quot;&gt;Trio&lt;/a&gt;&#39;s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;⚡️ &lt;a href=&quot;https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md&quot;&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🗂️ Provides &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#projects&quot;&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href=&quot;https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile&quot;&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;❇️ &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#scripts&quot;&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href=&quot;https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies&quot;&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions&quot;&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#tools&quot;&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;🔩 Includes a &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface&quot;&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;🏢 Supports Cargo-style &lt;a href=&quot;https://docs.astral.sh/uv/concepts/projects/workspaces&quot;&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;💾 Disk-space efficient, with a &lt;a href=&quot;https://docs.astral.sh/uv/concepts/cache&quot;&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;⏬ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🖥️ Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href=&quot;https://astral.sh&quot;&gt;Astral&lt;/a&gt;, the creators of &lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href=&quot;https://pypi.org/project/uv/&quot;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/getting-started/installation/&quot;&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv&#39;s documentation is available at &lt;a href=&quot;https://docs.astral.sh/uv&quot;&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/projects/&quot;&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they&#39;re not managed with uv. See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/publish/&quot;&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ echo &#39;import requests; print(requests.get(&quot;https://astral.sh&quot;))&#39; &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/scripts/&quot;&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uvx pycowsay &#39;hello world!&#39;
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  &quot;&quot;&quot;

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/tools/&quot;&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/guides/install-python/&quot;&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows — and experience a 10-100x speedup — with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.astral.sh/uv/pip/index/&quot;&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv&#39;s &lt;a href=&quot;https://docs.astral.sh/uv/reference/platforms/&quot;&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv&#39;s &lt;a href=&quot;https://docs.astral.sh/uv/reference/versioning/&quot;&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href=&quot;https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;How do you pronounce uv?&lt;/h4&gt; 
&lt;p&gt;It&#39;s pronounced as &quot;you - vee&quot; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Help:IPA/English#Key&quot;&gt;&lt;code&gt;/juː viː/&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;How should I stylize uv?&lt;/h4&gt; 
&lt;p&gt;Just &quot;uv&quot;, please. See the &lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/STYLE.md#styling-uv&quot;&gt;style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv&#39;s dependency resolver uses &lt;a href=&quot;https://github.com/pubgrub-rs/pubgrub&quot;&gt;PubGrub&lt;/a&gt; under the hood. We&#39;re grateful to the PubGrub maintainers, especially &lt;a href=&quot;https://github.com/Eh2406&quot;&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv&#39;s Git implementation is based on &lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv&#39;s optimizations are inspired by the great work we&#39;ve seen in &lt;a href=&quot;https://pnpm.io/&quot;&gt;pnpm&lt;/a&gt;, &lt;a href=&quot;https://github.com/orogene/orogene&quot;&gt;Orogene&lt;/a&gt;, and &lt;a href=&quot;https://github.com/oven-sh/bun&quot;&gt;Bun&lt;/a&gt;. We&#39;ve also learned a lot from Nathaniel J. Smith&#39;s &lt;a href=&quot;https://github.com/njsmith/posy&quot;&gt;Posy&lt;/a&gt; and adapted its &lt;a href=&quot;https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline&quot;&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a target=&quot;_blank&quot; href=&quot;https://astral.sh&quot; style=&quot;background:none&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true&quot; alt=&quot;Made by Astral&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>helix-editor/helix</title>
      <link>https://github.com/helix-editor/helix</link>
      <description>&lt;p&gt;A post-modern modal text editor.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;logo_dark.svg&quot; /&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;logo_light.svg&quot; /&gt; 
   &lt;img alt=&quot;Helix&quot; height=&quot;128&quot; src=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/logo_light.svg?sanitize=true&quot; /&gt; 
  &lt;/picture&gt; &lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/helix-editor/helix/actions&quot;&gt;&lt;img src=&quot;https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/helix-editor/helix/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/helix-editor/helix&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.helix-editor.com/&quot;&gt;&lt;img src=&quot;https://shields.io/badge/-documentation-452859&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/helix-editor/helix/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/helix-editor/helix&quot; alt=&quot;GitHub contributors&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://matrix.to/#/#helix-community:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/matrix/helix-community:matrix.org&quot; alt=&quot;Matrix Space&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;a href=&quot;https://github.com/mawww/kakoune&quot;&gt;Kakoune&lt;/a&gt; / &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; inspired editor, written in Rust.&lt;/p&gt; 
&lt;p&gt;The editing model is very heavily based on Kakoune; during development I found myself agreeing with most of Kakoune&#39;s design decisions.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href=&quot;https://helix-editor.com&quot;&gt;website&lt;/a&gt; or &lt;a href=&quot;https://docs.helix-editor.com/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All shortcuts/keymaps can be found &lt;a href=&quot;https://docs.helix-editor.com/keymap.html&quot;&gt;in the documentation on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/helix-editor/helix/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim-like modal editing&lt;/li&gt; 
 &lt;li&gt;Multiple selections&lt;/li&gt; 
 &lt;li&gt;Built-in language server support&lt;/li&gt; 
 &lt;li&gt;Smart, incremental syntax highlighting and code editing via tree-sitter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although it&#39;s primarily a terminal-based editor, I am interested in exploring a custom renderer (similar to Emacs) using wgpu or skulpin.&lt;/p&gt; 
&lt;p&gt;Note: Only certain languages have indentation definitions at the moment. Check &lt;code&gt;runtime/queries/&amp;lt;lang&amp;gt;/&lt;/code&gt; for &lt;code&gt;indents.scm&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.helix-editor.com/install.html&quot;&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/helix-editor/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/helix-editor.svg?exclude_unsupported=1&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Contributing guidelines can be found &lt;a href=&quot;https://raw.githubusercontent.com/helix-editor/helix/master/docs/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Your question might already be answered on the &lt;a href=&quot;https://github.com/helix-editor/helix/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Discuss the project on the community &lt;a href=&quot;https://matrix.to/#/#helix-community:matrix.org&quot;&gt;Matrix Space&lt;/a&gt; (make sure to join &lt;code&gt;#helix-editor:matrix.org&lt;/code&gt; if you&#39;re on a client that doesn&#39;t support Matrix Spaces yet).&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/jakenvac&quot;&gt;@jakenvac&lt;/a&gt; for designing the logo!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust-analyzer</title>
      <link>https://github.com/rust-lang/rust-analyzer</link>
      <description>&lt;p&gt;A Rust compiler front-end for IDEs&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/assets/logo-wide.svg?sanitize=true&quot; alt=&quot;rust-analyzer logo&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;rust-analyzer is a modular compiler frontend for the Rust language. It is a part of a larger rls-2.0 effort to create excellent IDE support for Rust.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://rust-analyzer.github.io/book/installation.html&quot;&gt;https://rust-analyzer.github.io/book/installation.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;If you want to &lt;strong&gt;contribute&lt;/strong&gt; to rust-analyzer check out the &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/rust-analyzer/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; or if you are just curious about how things work under the hood, see the &lt;a href=&quot;https://rust-analyzer.github.io/book/contributing&quot;&gt;Contributing&lt;/a&gt; section of the manual.&lt;/p&gt; 
&lt;p&gt;If you want to &lt;strong&gt;use&lt;/strong&gt; rust-analyzer&#39;s language server with your editor of choice, check &lt;a href=&quot;https://rust-analyzer.github.io/book/&quot;&gt;the manual&lt;/a&gt;. It also contains some tips &amp;amp; tricks to help you be more productive when using rust-analyzer.&lt;/p&gt; 
&lt;h2&gt;Security and Privacy&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://rust-analyzer.github.io/book/security.html&quot;&gt;security&lt;/a&gt; and &lt;a href=&quot;https://rust-analyzer.github.io/book/privacy.html&quot;&gt;privacy&lt;/a&gt; sections of the manual.&lt;/p&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;For usage and troubleshooting requests, please use &quot;IDEs and Editors&quot; category of the Rust forum:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;https://users.rust-lang.org/c/ide/14&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about development and implementation, join rust-analyzer working group on Zulip:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer&quot;&gt;https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://rust-analyzer.github.io/&quot;&gt;https://rust-analyzer.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Metrics: &lt;a href=&quot;https://rust-analyzer.github.io/metrics/&quot;&gt;https://rust-analyzer.github.io/metrics/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;API docs: &lt;a href=&quot;https://rust-lang.github.io/rust-analyzer/ide/&quot;&gt;https://rust-lang.github.io/rust-analyzer/ide/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Changelog: &lt;a href=&quot;https://rust-analyzer.github.io/thisweek&quot;&gt;https://rust-analyzer.github.io/thisweek&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;rust-analyzer is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See LICENSE-APACHE and LICENSE-MIT for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bytecodealliance/wasmtime</title>
      <link>https://github.com/bytecodealliance/wasmtime</link>
      <description>&lt;p&gt;A lightweight WebAssembly runtime that is fast, secure, and standards-compliant&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;&lt;code&gt;wasmtime&lt;/code&gt;&lt;/h1&gt; 
 &lt;p&gt; &lt;strong&gt;A standalone runtime for &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;A &lt;a href=&quot;https://bytecodealliance.org/&quot;&gt;Bytecode Alliance&lt;/a&gt; project&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/bytecodealliance/wasmtime/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&quot; alt=&quot;zulip chat&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/rustc-stable+-green.svg?sanitize=true&quot; alt=&quot;supported rustc stable&quot; /&gt; &lt;a href=&quot;https://docs.rs/wasmtime&quot;&gt;&lt;img src=&quot;https://docs.rs/wasmtime/badge.svg?sanitize=true&quot; alt=&quot;Documentation Status&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;h3&gt; &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/&quot;&gt;Guide&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/contributing.html&quot;&gt;Contributing&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://wasmtime.dev/&quot;&gt;Website&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime&quot;&gt;Chat&lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The Wasmtime CLI can be installed on Linux and macOS (locally) with a small install script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;curl https://wasmtime.dev/install.sh -sSf | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This script installs into &lt;code&gt;$WASMTIME_HOME&lt;/code&gt; (defaults to &lt;code&gt;$HOME/.wasmtime&lt;/code&gt;), and executable is placed in &lt;code&gt;$WASMTIME_HOME/bin&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;After running the install script above, follow the on-screen instructions.&lt;/p&gt; 
&lt;p&gt;Windows or otherwise interested users can download installers and binaries directly from the &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/releases&quot;&gt;GitHub Releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;For additional installation options, refer to the &lt;a href=&quot;https://docs.wasmtime.dev/cli-install.html&quot;&gt;online book CLI installation page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation on Wasmtime&#39;s currently supported versions can be found &lt;a href=&quot;https://docs.wasmtime.dev/stability-release.html#current-versions&quot;&gt;in the online book documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve got the &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Rust compiler installed&lt;/a&gt; then you can take some Rust source code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    println!(&quot;Hello, world!&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and compile it into a WebAssembly component with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rustup target add wasm32-wasip2
rustc hello.rs --target wasm32-wasip2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once compiled, you can run your component:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;wasmtime hello.wasm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should see the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Note: make sure you installed Rust using the &lt;a href=&quot;https://rustup.rs&quot;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; method in the official instructions above, and do not have a copy of the Rust toolchain installed on your system in some other way as well (e.g. the system package manager). Otherwise, the &lt;code&gt;rustup target add...&lt;/code&gt; command may not install the target for the correct copy of Rust.)&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;. Wasmtime is built on the optimizing &lt;a href=&quot;https://cranelift.dev/&quot;&gt;Cranelift&lt;/a&gt; code generator to quickly generate high-quality machine code either at runtime or ahead-of-time. Wasmtime is optimized for efficient instantiation, low-overhead calls between the embedder and wasm, and scalability of concurrent instances.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.wasmtime.dev/security.html&quot;&gt;Secure&lt;/a&gt;&lt;/strong&gt;. Wasmtime&#39;s development is strongly focused on correctness and security. Building on top of Rust&#39;s runtime safety guarantees, each Wasmtime feature goes through careful review and consideration via an &lt;a href=&quot;https://github.com/bytecodealliance/rfcs&quot;&gt;RFC process&lt;/a&gt;. Once features are designed and implemented, they undergo 24/7 fuzzing donated by &lt;a href=&quot;https://google.github.io/oss-fuzz/&quot;&gt;Google&#39;s OSS Fuzz&lt;/a&gt;. As features stabilize they become part of a &lt;a href=&quot;https://docs.wasmtime.dev/stability-release.html&quot;&gt;release&lt;/a&gt;, and when things go wrong we have a well-defined &lt;a href=&quot;https://bytecodealliance.org/security&quot;&gt;security policy&lt;/a&gt; in place to quickly mitigate and patch any issues. We follow best practices for defense-in-depth and integrate protections and mitigations for issues like Spectre. Finally, we&#39;re working to push the state-of-the-art by collaborating with academic researchers to formally verify critical parts of Wasmtime and Cranelift.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html&quot;&gt;Configurable&lt;/a&gt;&lt;/strong&gt;. Wasmtime uses sensible defaults, but can also be configured to provide more fine-grained control over things like CPU and memory consumption. Whether you want to run Wasmtime in a tiny environment or on massive servers with many concurrent instances, we&#39;ve got you covered.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/&quot;&gt;WASI&lt;/a&gt;&lt;/strong&gt;. Wasmtime supports a rich set of APIs for interacting with the host environment through the &lt;a href=&quot;https://wasi.dev&quot;&gt;WASI standard&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.wasmtime.dev/stability-tiers.html&quot;&gt;Standards Compliant&lt;/a&gt;&lt;/strong&gt;. Wasmtime passes the &lt;a href=&quot;https://github.com/WebAssembly/testsuite&quot;&gt;official WebAssembly test suite&lt;/a&gt;, implements the &lt;a href=&quot;https://github.com/WebAssembly/wasm-c-api&quot;&gt;official C API of wasm&lt;/a&gt;, and implements &lt;a href=&quot;https://github.com/WebAssembly/proposals&quot;&gt;future proposals to WebAssembly&lt;/a&gt; as well. Wasmtime developers are intimately engaged with the WebAssembly standards process all along the way too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;You can use Wasmtime from a variety of different languages through embeddings of the implementation.&lt;/p&gt; 
&lt;p&gt;Languages supported by the Bytecode Alliance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-rust.html&quot;&gt;Rust&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://crates.io/crates/wasmtime&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt; crate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-c.html&quot;&gt;C&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/c-api/&quot;&gt;&lt;code&gt;wasm.h&lt;/code&gt;, &lt;code&gt;wasi.h&lt;/code&gt;, and &lt;code&gt;wasmtime.h&lt;/code&gt; headers&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bytecodealliance/wasmtime/main/crates/c-api/CMakeLists.txt&quot;&gt;CMake&lt;/a&gt; or &lt;a href=&quot;https://conan.io/center/wasmtime&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt; Conan package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;C++&lt;/strong&gt; - the &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/c-api/&quot;&gt;&lt;code&gt;wasmtime.hh&lt;/code&gt; header&lt;/a&gt; or the &lt;a href=&quot;https://conan.io/center/wasmtime-cpp&quot;&gt;&lt;code&gt;wasmtime-cpp&lt;/code&gt; Conan package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-python.html&quot;&gt;Python&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://pypi.org/project/wasmtime/&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt; PyPI package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-dotnet.html&quot;&gt;.NET&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://www.nuget.org/packages/Wasmtime&quot;&gt;&lt;code&gt;Wasmtime&lt;/code&gt; NuGet package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-go.html&quot;&gt;Go&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://pkg.go.dev/github.com/bytecodealliance/wasmtime-go&quot;&gt;&lt;code&gt;wasmtime-go&lt;/code&gt; repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/lang-ruby.html&quot;&gt;Ruby&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://rubygems.org/gems/wasmtime&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt; gem&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Languages supported by the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.wasmtime.dev/lang-elixir.html&quot;&gt;Elixir&lt;/a&gt;&lt;/strong&gt; - the &lt;a href=&quot;https://hex.pm/packages/wasmex&quot;&gt;&lt;code&gt;wasmex&lt;/code&gt; hex package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Perl&lt;/strong&gt; - the &lt;a href=&quot;https://metacpan.org/pod/Wasm::Wasmtime&quot;&gt;&lt;code&gt;Wasm&lt;/code&gt; Perl package&#39;s &lt;code&gt;Wasm::Wasmtime&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://bytecodealliance.github.io/wasmtime&quot;&gt;📚 Read the Wasmtime guide here! 📚&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime&quot;&gt;wasmtime guide&lt;/a&gt; is the best starting point to learn about what Wasmtime can do for you or help answer your questions about Wasmtime. If you&#39;re curious in contributing to Wasmtime, &lt;a href=&quot;https://bytecodealliance.github.io/wasmtime/contributing.html&quot;&gt;it can also help you do that&lt;/a&gt;!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;It&#39;s Wasmtime.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rathole-org/rathole</title>
      <link>https://github.com/rathole-org/rathole</link>
      <description>&lt;p&gt;A lightweight and high-performance reverse proxy for NAT traversal, written in Rust. An alternative to frp and ngrok.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rathole&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/rathole-logo.png&quot; alt=&quot;rathole-logo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rapiz1/rathole/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/rapiz1/rathole&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/rapiz1/rathole/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/rapiz1/rathole&quot; alt=&quot;GitHub release (latest SemVer)&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/rapiz1/rathole/rust.yml?branch=main&quot; alt=&quot;GitHub Workflow Status (branch)&quot; /&gt; &lt;a href=&quot;https://github.com/rapiz1/rathole/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/rapiz1/rathole/total&quot; alt=&quot;GitHub all releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/rapiz1/rathole&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/rapiz1/rathole&quot; alt=&quot;Docker Pulls&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/rapiz1/rathole?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/rapiz1/rathole.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/rapiz1/rathole&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/README.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/README-zh.md&quot;&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A secure, stable and high-performance reverse proxy for NAT traversal, written in Rust&lt;/p&gt; 
&lt;p&gt;rathole, like &lt;a href=&quot;https://github.com/fatedier/frp&quot;&gt;frp&lt;/a&gt; and &lt;a href=&quot;https://github.com/inconshreveable/ngrok&quot;&gt;ngrok&lt;/a&gt;, can help to expose the service on the device behind the NAT to the Internet, via a server with a public IP.&lt;/p&gt; 
&lt;!-- TOC --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#rathole&quot;&gt;rathole&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#configuration&quot;&gt;Configuration&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#logging&quot;&gt;Logging&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#tuning&quot;&gt;Tuning&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#planning&quot;&gt;Planning&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /TOC --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt; Much higher throughput can be achieved than frp, and more stable when handling a large volume of connections. See &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Low Resource Consumption&lt;/strong&gt; Consumes much fewer memory than similar tools. See &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#benchmark&quot;&gt;Benchmark&lt;/a&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/build-guide.md&quot;&gt;The binary can be&lt;/a&gt; &lt;strong&gt;as small as ~500KiB&lt;/strong&gt; to fit the constraints of devices, like embedded devices as routers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; Tokens of services are mandatory and service-wise. The server and clients are responsible for their own configs. With the optional Noise Protocol, encryption can be configured at ease. No need to create a self-signed certificate! TLS is also supported.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hot Reload&lt;/strong&gt; Services can be added or removed dynamically by hot-reloading the configuration file. HTTP API is WIP.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;A full-powered &lt;code&gt;rathole&lt;/code&gt; can be obtained from the &lt;a href=&quot;https://github.com/rapiz1/rathole/releases&quot;&gt;release&lt;/a&gt; page. Or &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/build-guide.md&quot;&gt;build from source&lt;/a&gt; &lt;strong&gt;for other platforms and minimizing the binary&lt;/strong&gt;. A &lt;a href=&quot;https://hub.docker.com/r/rapiz1/rathole&quot;&gt;Docker image&lt;/a&gt; is also available.&lt;/p&gt; 
&lt;p&gt;The usage of &lt;code&gt;rathole&lt;/code&gt; is very similar to frp. If you have experience with the latter, then the configuration is very easy for you. The only difference is that configuration of a service is split into the client side and the server side, and a token is mandatory.&lt;/p&gt; 
&lt;p&gt;To use &lt;code&gt;rathole&lt;/code&gt;, you need a server with a public IP, and a device behind the NAT, where some services that need to be exposed to the Internet.&lt;/p&gt; 
&lt;p&gt;Assuming you have a NAS at home behind the NAT, and want to expose its ssh service to the Internet:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;On the server which has a public IP&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Create &lt;code&gt;server.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# server.toml
[server]
bind_addr = &quot;0.0.0.0:2333&quot; # `2333` specifies the port that rathole listens for clients

[server.services.my_nas_ssh]
token = &quot;use_a_secret_that_only_you_know&quot; # Token that is used to authenticate the client for the service. Change to an arbitrary value.
bind_addr = &quot;0.0.0.0:5202&quot; # `5202` specifies the port that exposes `my_nas_ssh` to the Internet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./rathole server.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;On the host which is behind the NAT (your NAS)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Create &lt;code&gt;client.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# client.toml
[client]
remote_addr = &quot;myserver.com:2333&quot; # The address of the server. The port must be the same with the port in `server.bind_addr`

[client.services.my_nas_ssh]
token = &quot;use_a_secret_that_only_you_know&quot; # Must be the same with the server to pass the validation
local_addr = &quot;127.0.0.1:22&quot; # The address of the service that needs to be forwarded
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./rathole client.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Now the client will try to connect to the server &lt;code&gt;myserver.com&lt;/code&gt; on port &lt;code&gt;2333&lt;/code&gt;, and any traffic to &lt;code&gt;myserver.com:5202&lt;/code&gt; will be forwarded to the client&#39;s port &lt;code&gt;22&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;So you can &lt;code&gt;ssh myserver.com:5202&lt;/code&gt; to ssh to your NAS.&lt;/p&gt; 
&lt;p&gt;To run &lt;code&gt;rathole&lt;/code&gt; run as a background service on Linux, checkout the &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/examples/systemd&quot;&gt;systemd examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt; can automatically determine to run in the server mode or the client mode, according to the content of the configuration file, if only one of &lt;code&gt;[server]&lt;/code&gt; and &lt;code&gt;[client]&lt;/code&gt; block is present, like the example in &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;But the &lt;code&gt;[client]&lt;/code&gt; and &lt;code&gt;[server]&lt;/code&gt; block can also be put in one file. Then on the server side, run &lt;code&gt;rathole --server config.toml&lt;/code&gt; and on the client side, run &lt;code&gt;rathole --client config.toml&lt;/code&gt; to explicitly tell &lt;code&gt;rathole&lt;/code&gt; the running mode.&lt;/p&gt; 
&lt;p&gt;Before heading to the full configuration specification, it&#39;s recommend to skim &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/examples&quot;&gt;the configuration examples&lt;/a&gt; to get a feeling of the configuration format.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/transport.md&quot;&gt;Transport&lt;/a&gt; for more details about encryption and the &lt;code&gt;transport&lt;/code&gt; block.&lt;/p&gt; 
&lt;p&gt;Here is the full configuration specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[client]
remote_addr = &quot;example.com:2333&quot; # Necessary. The address of the server
default_token = &quot;default_token_if_not_specify&quot; # Optional. The default token of services, if they don&#39;t define their own ones
heartbeat_timeout = 40 # Optional. Set to 0 to disable the application-layer heartbeat test. The value must be greater than `server.heartbeat_interval`. Default: 40 seconds
retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: 1 second

[client.transport] # The whole block is optional. Specify which transport to use
type = &quot;tcp&quot; # Optional. Possible values: [&quot;tcp&quot;, &quot;tls&quot;, &quot;noise&quot;]. Default: &quot;tcp&quot;

[client.transport.tcp] # Optional. Also affects `noise` and `tls`
proxy = &quot;socks5://user:passwd@127.0.0.1:1080&quot; # Optional. The proxy used to connect to the server. `http` and `socks5` is supported.
nodelay = true # Optional. Determine whether to enable TCP_NODELAY, if applicable, to improve the latency but decrease the bandwidth. Default: true
keepalive_secs = 20 # Optional. Specify `tcp_keepalive_time` in `tcp(7)`, if applicable. Default: 20 seconds
keepalive_interval = 8 # Optional. Specify `tcp_keepalive_intvl` in `tcp(7)`, if applicable. Default: 8 seconds

[client.transport.tls] # Necessary if `type` is &quot;tls&quot;
trusted_root = &quot;ca.pem&quot; # Necessary. The certificate of CA that signed the server&#39;s certificate
hostname = &quot;example.com&quot; # Optional. The hostname that the client uses to validate the certificate. If not set, fallback to `client.remote_addr`

[client.transport.noise] # Noise protocol. See `docs/transport.md` for further explanation
pattern = &quot;Noise_NK_25519_ChaChaPoly_BLAKE2s&quot; # Optional. Default value as shown
local_private_key = &quot;key_encoded_in_base64&quot; # Optional
remote_public_key = &quot;key_encoded_in_base64&quot; # Optional

[client.transport.websocket] # Necessary if `type` is &quot;websocket&quot;
tls = true # If `true` then it will use settings in `client.transport.tls`

[client.services.service1] # A service that needs forwarding. The name `service1` can change arbitrarily, as long as identical to the name in the server&#39;s configuration
type = &quot;tcp&quot; # Optional. The protocol that needs forwarding. Possible values: [&quot;tcp&quot;, &quot;udp&quot;]. Default: &quot;tcp&quot;
token = &quot;whatever&quot; # Necessary if `client.default_token` not set
local_addr = &quot;127.0.0.1:1081&quot; # Necessary. The address of the service that needs to be forwarded
nodelay = true # Optional. Override the `client.transport.nodelay` per service
retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: inherits the global config

[client.services.service2] # Multiple services can be defined
local_addr = &quot;127.0.0.1:1082&quot;

[server]
bind_addr = &quot;0.0.0.0:2333&quot; # Necessary. The address that the server listens for clients. Generally only the port needs to be change.
default_token = &quot;default_token_if_not_specify&quot; # Optional
heartbeat_interval = 30 # Optional. The interval between two application-layer heartbeat. Set to 0 to disable sending heartbeat. Default: 30 seconds

[server.transport] # Same as `[client.transport]`
type = &quot;tcp&quot;

[server.transport.tcp] # Same as the client
nodelay = true
keepalive_secs = 20
keepalive_interval = 8

[server.transport.tls] # Necessary if `type` is &quot;tls&quot;
pkcs12 = &quot;identify.pfx&quot; # Necessary. pkcs12 file of server&#39;s certificate and private key
pkcs12_password = &quot;password&quot; # Necessary. Password of the pkcs12 file

[server.transport.noise] # Same as `[client.transport.noise]`
pattern = &quot;Noise_NK_25519_ChaChaPoly_BLAKE2s&quot;
local_private_key = &quot;key_encoded_in_base64&quot;
remote_public_key = &quot;key_encoded_in_base64&quot;

[server.transport.websocket] # Necessary if `type` is &quot;websocket&quot;
tls = true # If `true` then it will use settings in `server.transport.tls`

[server.services.service1] # The service name must be identical to the client side
type = &quot;tcp&quot; # Optional. Same as the client `[client.services.X.type]
token = &quot;whatever&quot; # Necessary if `server.default_token` not set
bind_addr = &quot;0.0.0.0:8081&quot; # Necessary. The address of the service is exposed at. Generally only the port needs to be change.
nodelay = true # Optional. Same as the client

[server.services.service2]
bind_addr = &quot;0.0.0.1:8082&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt;, like many other Rust programs, use environment variables to control the logging level. &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt; are available.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;RUST_LOG=error ./rathole config.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will run &lt;code&gt;rathole&lt;/code&gt; with only error level logging.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;RUST_LOG&lt;/code&gt; is not present, the default logging level is &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tuning&lt;/h3&gt; 
&lt;p&gt;From v0.4.7, rathole enables TCP_NODELAY by default, which should benefit the latency and interactive applications like rdp, Minecraft servers. However, it slightly decreases the bandwidth.&lt;/p&gt; 
&lt;p&gt;If the bandwidth is more important, TCP_NODELAY can be opted out with &lt;code&gt;nodelay = false&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;rathole has similar latency to &lt;a href=&quot;https://github.com/fatedier/frp&quot;&gt;frp&lt;/a&gt;, but can handle a more connections, provide larger bandwidth, with less memory usage.&lt;/p&gt; 
&lt;p&gt;For more details, see the separate page &lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/benchmark.md&quot;&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;However, don&#39;t take it from here that &lt;code&gt;rathole&lt;/code&gt; can magically make your forwarded service faster several times than before.&lt;/strong&gt; The benchmark is done on local loopback, indicating the performance when the task is cpu-bounded. One can gain quite a improvement if the network is not the bottleneck. Unfortunately, that&#39;s not true for many users. In that case, the main benefit is lower resource consumption, while the bandwidth and the latency may not improved significantly.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/http_throughput.svg?sanitize=true&quot; alt=&quot;http_throughput&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/tcp_bitrate.svg?sanitize=true&quot; alt=&quot;tcp_bitrate&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/udp_bitrate.svg?sanitize=true&quot; alt=&quot;udp_bitrate&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/img/mem-graph.png&quot; alt=&quot;mem&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Planning&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; HTTP APIs for configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rathole-org/rathole/main/docs/out-of-scope.md&quot;&gt;Out of Scope&lt;/a&gt; lists features that are not planned to be implemented and why.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>starkware-libs/cairo</title>
      <link>https://github.com/starkware-libs/cairo</link>
      <description>&lt;p&gt;Cairo is the first Turing-complete language for creating provable programs for general computation.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Cairo 🐺 &lt;/h1&gt; 
 &lt;h2&gt; ⚡ Blazing ⚡ fast ⚡ compiler for Cairo, written in 🦀 Rust 🦀 &lt;/h2&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/resources/img/cairo-logo-square.png&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://github.com/starkware-libs/cairo/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=01_BUG_REPORT.md&amp;amp;title=bug%3A+&quot;&gt;Report a Bug&lt;/a&gt; - 
 &lt;a href=&quot;https://github.com/starkware-libs/cairo/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=02_FEATURE_REQUEST.md&amp;amp;title=feat%3A+&quot;&gt;Request a Feature&lt;/a&gt; - 
 &lt;a href=&quot;https://github.com/starkware-libs/cairo/discussions&quot;&gt;Ask a Question&lt;/a&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/starkware-libs/cairo/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/starkware-libs/cairo/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Workflow Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/starkware-libs/cairo.svg?style=flat-square&quot; alt=&quot;Project license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/starkware-libs/cairo/raw/main/docs/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square&quot; alt=&quot;Pull Requests welcome&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Table of Contents&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#getting-started&quot;&gt;Getting Started&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#compiling-and-running-cairo-files&quot;&gt;Compiling and running Cairo files&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#compiling-starknet-contracts&quot;&gt;Compiling Starknet Contracts&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#project-assistance&quot;&gt;Project assistance&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#authors--contributors&quot;&gt;Authors &amp;amp; contributors&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Cairo is the first Turing-complete language for creating provable programs for general computation.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Setup Rust:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rustup override set stable &amp;amp;&amp;amp; rustup update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure Rust was installed correctly by running the following from the root project directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Compiling and running Cairo files&lt;/h3&gt; 
&lt;p&gt;Compile Cairo to Sierra:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin cairo-compile -- --single-file /path/to/input.cairo /path/to/output.sierra --replace-ids
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile Sierra to casm (Cairo assembly):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin sierra-compile -- /path/to/input.sierra /path/to/output.casm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run Cairo code directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin cairo-run -- --single-file /path/to/file.cairo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more information &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/crates/cairo-lang-runner/README.md&quot;&gt;here&lt;/a&gt;. You can also find Cairo examples in the &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/examples&quot;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; 
&lt;p&gt;For running tests specifically, see here: &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/crates/cairo-lang-test-runner/README.md&quot;&gt;cairo-test&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Compiling Starknet Contracts&lt;/h3&gt; 
&lt;p&gt;Compile a Starknet Contract to a Sierra ContractClass:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin starknet-compile -- --single-file /path/to/input.cairo /path/to/output.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or specify the contract path if multiple contracts are defined in the same project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin starknet-compile -- /path/to/input/crate /path/to/output.json --contract-path path::to::contract
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile the ContractClass of a CompiledClass:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo run --bin starknet-sierra-compile -- /path/to/input.json /path/to/output.casm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The next milestone is to reach feature parity with the old Cairo version. You can track the exact progress &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/FEATURE_PARITY.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;We encourage developers to ask and answer questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/cairo-lang&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Contact options listed on &lt;a href=&quot;https://github.com/starkware-libs&quot;&gt;this GitHub profile&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project assistance&lt;/h2&gt; 
&lt;p&gt;If you want to say &lt;strong&gt;thank you&lt;/strong&gt; or/and support active development of Cairo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a &lt;a href=&quot;https://github.com/starkware-libs/cairo&quot;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; 
 &lt;li&gt;Tweet about your Cairo work.&lt;/li&gt; 
 &lt;li&gt;Write interesting articles about the project on &lt;a href=&quot;https://dev.to/&quot;&gt;Dev.to&lt;/a&gt;, &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt; or your personal blog.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Together, we can make Cairo &lt;strong&gt;better&lt;/strong&gt;!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;First off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/CONTRIBUTING.md&quot;&gt;our contribution guidelines&lt;/a&gt;, and thank you for being involved!&lt;/p&gt; 
&lt;h2&gt;Authors &amp;amp; contributors&lt;/h2&gt; 
&lt;p&gt;For a full list of all authors and contributors, see &lt;a href=&quot;https://github.com/starkware-libs/cairo/contributors&quot;&gt;the contributors page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Cairo follows good practices of security, but 100% security cannot be assured. Cairo is provided &lt;strong&gt;&quot;as is&quot;&lt;/strong&gt; without any &lt;strong&gt;warranty&lt;/strong&gt;. Use at your own risk.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;For more information and to report security issues, please refer to our &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/SECURITY.md&quot;&gt;security documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;strong&gt;Apache 2.0&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/starkware-libs/cairo/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/cargo</title>
      <link>https://github.com/rust-lang/cargo</link>
      <description>&lt;p&gt;The Rust package manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cargo&lt;/h1&gt; 
&lt;p&gt;Cargo downloads your Rust project’s dependencies and compiles your project.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To start using Cargo&lt;/strong&gt;, learn more at &lt;a href=&quot;https://doc.rust-lang.org/cargo/&quot;&gt;The Cargo Book&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To start developing Cargo itself&lt;/strong&gt;, read the &lt;a href=&quot;https://rust-lang.github.io/cargo/contrib/&quot;&gt;Cargo Contributor Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The Cargo binary distributed through with Rust is maintained by the Cargo team for use by the wider ecosystem. For all other uses of this crate (as a binary or library) this is maintained by the Cargo team, primarily for use by Cargo and not intended for external use (except as a transitive dependency). This crate may make major changes to its APIs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Code Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo/actions/workflows/main.yml&quot;&gt;&lt;img src=&quot;https://github.com/rust-lang/cargo/actions/workflows/main.yml/badge.svg?branch=auto-cargo&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Code documentation: &lt;a href=&quot;https://doc.rust-lang.org/nightly/nightly-rustc/cargo/&quot;&gt;https://doc.rust-lang.org/nightly/nightly-rustc/cargo/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Compiling from Source&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;Cargo requires the following tools and packages to build:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;rustc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A C compiler &lt;a href=&quot;https://github.com/rust-lang/cc-rs#compile-time-requirements&quot;&gt;for your platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;git&lt;/code&gt; (to clone this repository)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Other requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The following are optional based on your platform and needs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pkg-config&lt;/code&gt; — This is used to help locate system packages, such as &lt;code&gt;libssl&lt;/code&gt; headers/libraries. This may not be required in all cases, such as using vendored OpenSSL, or on Windows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OpenSSL — Only needed on Unix-like systems and only if the &lt;code&gt;vendored-openssl&lt;/code&gt; Cargo feature is not used.&lt;/p&gt; &lt;p&gt;This requires the development headers, which can be obtained from the &lt;code&gt;libssl-dev&lt;/code&gt; package on Ubuntu or &lt;code&gt;openssl-devel&lt;/code&gt; with apk or yum or the &lt;code&gt;openssl&lt;/code&gt; package from Homebrew on macOS.&lt;/p&gt; &lt;p&gt;If using the &lt;code&gt;vendored-openssl&lt;/code&gt; Cargo feature, then a static copy of OpenSSL will be built from source instead of using the system OpenSSL. This may require additional tools such as &lt;code&gt;perl&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On macOS, common installation directories from Homebrew, MacPorts, or pkgsrc will be checked. Otherwise it will fall back to &lt;code&gt;pkg-config&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On Windows, the system-provided Schannel will be used instead.&lt;/p&gt; &lt;p&gt;LibreSSL is also supported.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Optional system libraries:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The build will automatically use vendored versions of the following libraries. However, if they are provided by the system and can be found with &lt;code&gt;pkg-config&lt;/code&gt;, then the system libraries will be used instead:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/libcurl/&quot;&gt;&lt;code&gt;libcurl&lt;/code&gt;&lt;/a&gt; — Used for network transfers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://libgit2.org/&quot;&gt;&lt;code&gt;libgit2&lt;/code&gt;&lt;/a&gt; — Used for fetching git dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.libssh2.org/&quot;&gt;&lt;code&gt;libssh2&lt;/code&gt;&lt;/a&gt; — Used for SSH access to git repositories.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://zlib.net/&quot;&gt;&lt;code&gt;libz&lt;/code&gt;&lt;/a&gt; (AKA zlib) — Used by the above C libraries for data compression. (Rust code uses &lt;a href=&quot;https://github.com/trifectatechfoundation/zlib-rs&quot;&gt;&lt;code&gt;zlib-rs&lt;/code&gt;&lt;/a&gt; instead.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is recommended to use the vendored versions as they are the versions that are tested to work with Cargo.&lt;/p&gt; 
&lt;h3&gt;Compiling&lt;/h3&gt; 
&lt;p&gt;First, you&#39;ll want to check out this repository&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/rust-lang/cargo.git
cd cargo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;cargo&lt;/code&gt; already installed, you can simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adding new subcommands to Cargo&lt;/h2&gt; 
&lt;p&gt;Cargo is designed to be extensible with new subcommands without having to modify Cargo itself. See &lt;a href=&quot;https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands&quot;&gt;the Wiki page&lt;/a&gt; for more details and a list of known community-developed subcommands.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;Cargo releases coincide with Rust releases. High level release notes are available as part of &lt;a href=&quot;https://github.com/rust-lang/rust/raw/master/RELEASES.md&quot;&gt;Rust&#39;s release notes&lt;/a&gt;. Detailed release notes are available in the &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reporting issues&lt;/h2&gt; 
&lt;p&gt;Found a bug? We&#39;d love to know about it!&lt;/p&gt; 
&lt;p&gt;Please report all issues on the GitHub &lt;a href=&quot;https://github.com/rust-lang/cargo/issues&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;strong&gt;&lt;a href=&quot;https://rust-lang.github.io/cargo/contrib/&quot;&gt;Cargo Contributor Guide&lt;/a&gt;&lt;/strong&gt; for a complete introduction to contributing to Cargo.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cargo is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-APACHE&quot;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-MIT&quot;&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Third party software&lt;/h3&gt; 
&lt;p&gt;This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (&lt;a href=&quot;https://www.openssl.org/&quot;&gt;https://www.openssl.org/&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In binary form, this product includes software that is licensed under the terms of the GNU General Public License, version 2, with a linking exception, which can be obtained from the &lt;a href=&quot;https://github.com/libgit2/libgit2&quot;&gt;upstream repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/rust-lang/cargo/master/LICENSE-THIRD-PARTY&quot;&gt;LICENSE-THIRD-PARTY&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://boundaryml.com?utm_source=github&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;fern/assets/baml-lamb-white.png&quot; /&gt; 
   &lt;img src=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png&quot; height=&quot;64&quot; id=&quot;top&quot; /&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://pypi.org/project/baml-py/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version&quot; alt=&quot;BAML Version&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href=&quot;https://www.boundaryml.com/&quot;&gt;Homepage&lt;/a&gt; | &lt;a href=&quot;https://docs.boundaryml.com&quot;&gt;Docs&lt;/a&gt; | &lt;a href=&quot;https://www.boundaryml.com/chat&quot;&gt;BAML AI Chat&lt;/a&gt; | &lt;a href=&quot;https://discord.gg/BTNBeXGuaS&quot;&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don&#39;t need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/python&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/typescript&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/ruby&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages&quot;&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don&#39;t support native &lt;a href=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model-even-when-they-dont-support-it&quot;&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href=&quot;https://www.promptfiddle.com&quot;&gt;Prompt Fiddle&lt;/a&gt; • &lt;a href=&quot;https://baml-examples.vercel.app/&quot;&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;function ChatAgent(message: Message[], tone: &quot;happy&quot; | &quot;sad&quot;) -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;function ChatAgent(message: Message[], tone: &quot;happy&quot; | &quot;sad&quot;) -&amp;gt; StopTool | ReplyTool {
    client &quot;openai/gpt-4o-mini&quot;

    prompt #&quot;
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    &quot;#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action &quot;stop&quot; @description(#&quot;
    when it might be a good time to end the conversation
  &quot;#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML&#39;s Rust compiler generates a &quot;baml_client&quot; to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role=&quot;assistant&quot;, content=&quot;How can I help?&quot;)]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role=&quot;user&quot;, content=user_reply))
  tool = b.ChatAgent(messages, &quot;happy&quot;)
  if isinstance(tool, StopTool):
    print(&quot;Goodbye!&quot;)
    break
  else:
    messages.append(Message(role=&quot;assistant&quot;, content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;stream = b.stream.ChatAgent(messages, &quot;happy&quot;)
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7&quot; alt=&quot;raw-curl&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src=&quot;https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6&quot; alt=&quot;resume-attempt2-smaller2&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds 🚀.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don&#39;t support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href=&quot;https://www.boundaryml.com/blog/schema-aligned-parsing&quot;&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href=&quot;https://www.boundaryml.com/blog/deepseek-r1-function-calling&quot;&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href=&quot;https://www.boundaryml.com/blog/openai-o1&quot;&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #&quot;
    ....
  &quot;#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy&quot;&gt;Retry policies&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-strategies/fallback&quot;&gt;fallbacks&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-strategies/round-robin&quot;&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src=&quot;https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif&quot; alt=&quot;Fallback Retry&quot; /&gt; Want to do pick models at runtime? Check out the &lt;a href=&quot;https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry&quot;&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/open-ai&quot;&gt;OpenAI&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/anthropic&quot;&gt;Anthropic&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini&quot;&gt;Gemini&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/google-vertex&quot;&gt;Vertex&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock&quot;&gt;Bedrock&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure&quot;&gt;Azure OpenAI&lt;/a&gt; • &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic&quot;&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama&quot;&gt;Ollama&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router&quot;&gt;OpenRouter&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm&quot;&gt;VLLM&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio&quot;&gt;LMStudio&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai&quot;&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src=&quot;https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620&quot; alt=&quot;recipe-generator&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;BAML&#39;s streaming interfaces are fully type-safe. Check out the &lt;a href=&quot;https://docs.boundaryml.com/guide/baml-basics/streaming&quot;&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href=&quot;https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start&quot;&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can&#39;t even tell it&#39;s there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML&#39;s Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning — we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts — we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def home():
    return &quot;&amp;lt;button onclick=\&quot;() =&amp;gt; alert(\\\&quot;hello!\\\&quot;)\&quot;&amp;gt;Click&amp;lt;/button&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us 🤮. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href=&quot;https://www.boundaryml.com/blog/ai-agents-need-new-syntax&quot;&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we&#39;ll continue expecting even more out of them. But what will never change is that we&#39;ll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/python&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/typescript&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/ruby&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages&quot;&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language&quot;&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md&quot;&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@software{baml,
  author = {Vaibhav Gupta, Aaron Villalpando and Boundary ML team},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We&#39;re hiring for software engineers that love rust. &lt;a href=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/founders@boundaryml.com&quot;&gt;Email us&lt;/a&gt; or reach out on &lt;a href=&quot;https://discord.gg/ENtBB6kkXH&quot;&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align=&quot;left&quot; style=&quot;align-items: left;&quot;&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/BoundaryML/baml/canary/#top&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&quot; alt=&quot;Back to Top&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src=&quot;https://imgs.xkcd.com/comics/standards.png&quot; alt_text=&quot;hi&quot; /&gt;</description>
    </item>
    
    <item>
      <title>mainmatter/100-exercises-to-learn-rust</title>
      <link>https://github.com/mainmatter/100-exercises-to-learn-rust</link>
      <description>&lt;p&gt;A self-paced course to learn Rust, one exercise at a time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Rust, one exercise at a time&lt;/h1&gt; 
&lt;p&gt;You&#39;ve heard about Rust, but you never had the chance to try it out?&lt;br /&gt; This course is for you!&lt;/p&gt; 
&lt;p&gt;You&#39;ll learn Rust by solving 100 exercises.&lt;br /&gt; You&#39;ll go from knowing nothing about Rust to being able to start writing your own programs, one exercise at a time.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This course has been written by &lt;a href=&quot;https://mainmatter.com/rust-consulting/&quot;&gt;Mainmatter&lt;/a&gt;.&lt;br /&gt; It&#39;s one of the trainings in &lt;a href=&quot;https://mainmatter.com/services/workshops/rust/&quot;&gt;our portfolio of Rust workshops&lt;/a&gt;.&lt;br /&gt; Check out our &lt;a href=&quot;https://mainmatter.com/rust-consulting/&quot;&gt;landing page&lt;/a&gt; if you&#39;re looking for Rust consulting or training!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://rust-exercises.com&quot;&gt;rust-exercises.com&lt;/a&gt; and follow the instructions there to get started with the course.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; (follow instructions &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;here&lt;/a&gt;).&lt;br /&gt; If &lt;code&gt;rustup&lt;/code&gt; is already installed on your system, run &lt;code&gt;rustup update&lt;/code&gt; (or another appropriate command depending on how you installed Rust on your system) to make sure you&#39;re running on the latest stable version.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;(Optional but recommended)&lt;/em&gt; An IDE with Rust autocompletion support. We recommend one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/rust/&quot;&gt;RustRover&lt;/a&gt;;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt; extension.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Solutions&lt;/h2&gt; 
&lt;p&gt;You can find the solutions to the exercises in the &lt;a href=&quot;https://github.com/mainmatter/100-exercises-to-learn-rust/tree/solutions&quot;&gt;&lt;code&gt;solutions&lt;/code&gt; branch&lt;/a&gt; of this repository.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright © 2024- Mainmatter GmbH (&lt;a href=&quot;https://mainmatter.com&quot;&gt;https://mainmatter.com&lt;/a&gt;), released under the &lt;a href=&quot;https://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;Creative Commons Attribution-NonCommercial 4.0 International license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solana-foundation/anchor</title>
      <link>https://github.com/solana-foundation/anchor</link>
      <description>&lt;p&gt;⚓ Solana Sealevel Framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img height=&quot;170x&quot; src=&quot;https://pbs.twimg.com/media/FVUVaO9XEAAulvK?format=png&amp;amp;name=small&quot; /&gt; 
 &lt;h1&gt;Anchor&lt;/h1&gt; 
 &lt;p&gt; &lt;strong&gt;Solana Program Framework&lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://github.com/coral-xyz/anchor/actions&quot;&gt;&lt;img alt=&quot;Build Status&quot; src=&quot;https://github.com/coral-xyz/anchor/actions/workflows/tests.yaml/badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://anchor-lang.com&quot;&gt;&lt;img alt=&quot;Tutorials&quot; src=&quot;https://img.shields.io/badge/docs-tutorials-blueviolet&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/NHHGSXAnXk&quot;&gt;&lt;img alt=&quot;Discord Chat&quot; src=&quot;https://img.shields.io/discord/889577356681945098?color=blueviolet&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/Apache-2.0&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/coral-xyz/anchor?color=blueviolet&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.anchor-lang.com/&quot;&gt;Anchor&lt;/a&gt; is a framework providing several convenient developer tools for writing Solana programs (sometimes called &#39;smart contracts&#39;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust eDSL for writing Solana programs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_description_language&quot;&gt;IDL&lt;/a&gt; specification&lt;/li&gt; 
 &lt;li&gt;TypeScript package for generating clients from IDL&lt;/li&gt; 
 &lt;li&gt;CLI and workspace management for developing complete applications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Anchor is the most popular framework for Solana programs.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you&#39;re familiar with developing in Ethereum&#39;s &lt;a href=&quot;https://docs.soliditylang.org/en/&quot;&gt;Solidity&lt;/a&gt;, &lt;a href=&quot;https://www.trufflesuite.com/&quot;&gt;Truffle&lt;/a&gt;, &lt;a href=&quot;https://github.com/ethereum/web3.js&quot;&gt;web3.js&lt;/a&gt;, then using Anchor will be familiar. Although the DSL syntax and semantics are targeted at Solana, the high level flow of writing RPC request handlers, emitting an IDL, and generating clients from IDL is the same.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;For a quickstart guide and in depth tutorials, see the &lt;a href=&quot;https://book.anchor-lang.com&quot;&gt;Anchor book&lt;/a&gt; and the &lt;a href=&quot;https://anchor-lang.com&quot;&gt;Anchor documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To jump straight to examples, go &lt;a href=&quot;https://github.com/coral-xyz/anchor/tree/master/examples&quot;&gt;here&lt;/a&gt;. For the latest Rust and TypeScript API documentation, see &lt;a href=&quot;https://docs.rs/anchor-lang&quot;&gt;docs.rs&lt;/a&gt; and the &lt;a href=&quot;https://www.anchor-lang.com/docs/clients/typescript&quot;&gt;typedoc&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Package&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Version&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;anchor-lang&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Rust primitives for writing programs on Solana&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://crates.io/crates/anchor-lang&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/anchor-lang?color=blue&quot; alt=&quot;Crates.io&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://docs.rs/anchor-lang&quot;&gt;&lt;img src=&quot;https://docs.rs/anchor-lang/badge.svg?sanitize=true&quot; alt=&quot;Docs.rs&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;anchor-spl&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;CPI clients for SPL programs on Solana&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://crates.io/crates/anchor-spl&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/anchor-spl?color=blue&quot; alt=&quot;crates&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://docs.rs/anchor-spl&quot;&gt;&lt;img src=&quot;https://docs.rs/anchor-spl/badge.svg?sanitize=true&quot; alt=&quot;Docs.rs&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;anchor-client&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Rust client for Anchor programs&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://crates.io/crates/anchor-client&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/anchor-client?color=blue&quot; alt=&quot;crates&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://docs.rs/anchor-client&quot;&gt;&lt;img src=&quot;https://docs.rs/anchor-client/badge.svg?sanitize=true&quot; alt=&quot;Docs.rs&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;@coral-xyz/anchor&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;TypeScript client for Anchor programs&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/@coral-xyz/anchor&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@coral-xyz/anchor.svg?color=blue&quot; alt=&quot;npm&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://coral-xyz.github.io/anchor/ts/index.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-typedoc-blue&quot; alt=&quot;Docs&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;@coral-xyz/anchor-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;CLI to support building and managing an Anchor workspace&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/@coral-xyz/anchor-cli&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@coral-xyz/anchor-cli.svg?color=blue&quot; alt=&quot;npm&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://coral-xyz.github.io/anchor/cli/commands.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-typedoc-blue&quot; alt=&quot;Docs&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Anchor is in active development, so all APIs are subject to change.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;This code is unaudited. Use at your own risk.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a counter program, where only the designated &lt;code&gt;authority&lt;/code&gt; can increment the count.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use anchor_lang::prelude::*;

declare_id!(&quot;Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS&quot;);

#[program]
mod counter {
    use super::*;

    pub fn initialize(ctx: Context&amp;lt;Initialize&amp;gt;, start: u64) -&amp;gt; Result&amp;lt;()&amp;gt; {
        let counter = &amp;amp;mut ctx.accounts.counter;
        counter.authority = *ctx.accounts.authority.key;
        counter.count = start;
        Ok(())
    }

    pub fn increment(ctx: Context&amp;lt;Increment&amp;gt;) -&amp;gt; Result&amp;lt;()&amp;gt; {
        let counter = &amp;amp;mut ctx.accounts.counter;
        counter.count += 1;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize&amp;lt;&#39;info&amp;gt; {
    #[account(init, payer = authority, space = 48)]
    pub counter: Account&amp;lt;&#39;info, Counter&amp;gt;,
    pub authority: Signer&amp;lt;&#39;info&amp;gt;,
    pub system_program: Program&amp;lt;&#39;info, System&amp;gt;,
}

#[derive(Accounts)]
pub struct Increment&amp;lt;&#39;info&amp;gt; {
    #[account(mut, has_one = authority)]
    pub counter: Account&amp;lt;&#39;info, Counter&amp;gt;,
    pub authority: Signer&amp;lt;&#39;info&amp;gt;,
}

#[account]
pub struct Counter {
    pub authority: Pubkey,
    pub count: u64,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more, see the &lt;a href=&quot;https://github.com/coral-xyz/anchor/tree/master/examples&quot;&gt;examples&lt;/a&gt; and &lt;a href=&quot;https://github.com/coral-xyz/anchor/tree/master/tests&quot;&gt;tests&lt;/a&gt; directories.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Anchor is licensed under &lt;a href=&quot;https://raw.githubusercontent.com/solana-foundation/anchor/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Anchor by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Thank you for your interest in contributing to Anchor! Please see the &lt;a href=&quot;https://raw.githubusercontent.com/solana-foundation/anchor/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; to learn how.&lt;/p&gt; 
&lt;h3&gt;Thanks ❤️&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/coral-xyz/anchor/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=coral-xyz/anchor&quot; width=&quot;100%&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>antinomyhq/forge</title>
      <link>https://github.com/antinomyhq/forge</link>
      <description>&lt;p&gt;AI enabled pair programmer for Claude, GPT, O Series, Grok, Deepseek, Gemini and 300+ models&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;⚒️ Forge: AI-Enhanced Terminal Development Environment&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;A comprehensive coding agent that integrates AI capabilities with your development environment&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;code&gt;npx forgecode@latest&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/antinomyhq/forge/actions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/antinomyhq/forge/ci.yml?style=for-the-badge&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/antinomyhq/forge/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/antinomyhq/forge?style=for-the-badge&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/kRZBPpkgwq&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cla-assistant.io/antinomyhq/forge&quot;&gt;&lt;img src=&quot;https://cla-assistant.io/readme/badge/antinomyhq/forge?style=for-the-badge&quot; alt=&quot;CLA assistant&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://assets.antinomy.ai/images/forge_demo_2x.gif&quot; alt=&quot;Code-Forge Demo&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Table&amp;nbsp;of&amp;nbsp;Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-examples&quot;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#why-forge&quot;&gt;Why Forge?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#command-line-options&quot;&gt;Command-Line Options&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#advanced-configuration&quot;&gt;Advanced Configuration&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#provider-configuration&quot;&gt;Provider Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#environment-variables&quot;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#forgeyaml-configuration-options&quot;&gt;forge.yaml Configuration Options&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#mcp-configuration&quot;&gt;MCP Configuration&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#example-use-cases&quot;&gt;Example Use Cases&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-in-multi-agent-workflows&quot;&gt;Usage in Multi-Agent Workflows&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/antinomyhq/forge/main/#support-us&quot;&gt;Support Us&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Run Forge in interactive mode via npx&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx forgecode@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Connect through the Forge app and complete the OAuth process. This will open your browser to app.forgecode.dev where you can sign up or sign in with Google/GitHub.&lt;/p&gt; 
&lt;p&gt;That&#39;s it! Forge is now ready to assist you with your development tasks.&lt;/p&gt; 
&lt;h2&gt;Usage Examples&lt;/h2&gt; 
&lt;p&gt;Forge can be used in different ways depending on your needs. Here are some common usage patterns:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Understanding&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Can you explain how the authentication system works in this codebase?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze your project&#39;s structure, identify authentication-related files, and provide a detailed explanation of the authentication flow, including the relationships between different components.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Implementing New Features&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to add a dark mode toggle to our React application. How should I approach this?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest the best approach based on your current codebase, explain the steps needed, and even scaffold the necessary components and styles for you.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Debugging Assistance&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I&#39;m getting this error: &quot;TypeError: Cannot read property &#39;map&#39; of undefined&quot;. What might be causing it?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the error, suggest potential causes based on your code, and propose different solutions to fix the issue.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Please review the code in src/components/UserProfile.js and suggest improvements
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will analyze the code, identify potential issues, and suggest improvements for readability, performance, security, and maintainability.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Learning New Technologies&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I want to integrate GraphQL into this Express application. Can you explain how to get started?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will provide a tailored tutorial on integrating GraphQL with Express, using your specific project structure as context.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Database Schema Design&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to design a database schema for a blog with users, posts, comments, and categories
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge will suggest an appropriate schema design, including tables/collections, relationships, indexes, and constraints based on your project&#39;s existing database technology.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Refactoring Legacy Code&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; Help me refactor this class-based component to use React Hooks
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can help modernize your codebase by walking you through refactoring steps and implementing them with your approval.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Git Operations&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;gt; I need to merge branch &#39;feature/user-profile&#39; into main but there are conflicts
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Forge can guide you through resolving git conflicts, explaining the differences and suggesting the best way to reconcile them.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Why Forge?&lt;/h2&gt; 
&lt;p&gt;Forge is designed for developers who want to enhance their workflow with AI assistance while maintaining full control over their development environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Zero configuration&lt;/strong&gt; - Just add your API key and you&#39;re ready to go&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless integration&lt;/strong&gt; - Works right in your terminal, where you already work&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-provider support&lt;/strong&gt; - Use OpenAI, Anthropic, or other LLM providers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by design&lt;/strong&gt; - Your code stays on your machine&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open-source&lt;/strong&gt; - Transparent, extensible, and community-driven&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Forge helps you code faster, solve complex problems, and learn new technologies without leaving your terminal.&lt;/p&gt; 
&lt;h2&gt;Command-Line Options&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a quick reference of Forge&#39;s command-line options:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-p, --prompt &amp;lt;PROMPT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Direct prompt to process without entering interactive mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-c, --command &amp;lt;COMMAND&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing initial commands to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-w, --workflow &amp;lt;WORKFLOW&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the workflow to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-e, --event &amp;lt;EVENT&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dispatch an event to the workflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--conversation &amp;lt;CONVERSATION&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to a file containing the conversation to execute&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-r, --restricted&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable restricted shell mode for enhanced security&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable verbose output mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print help information&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Print version&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Advanced Configuration&lt;/h2&gt; 
&lt;h3&gt;Provider Configuration&lt;/h3&gt; 
&lt;p&gt;Forge supports multiple AI providers. Below are setup instructions for each supported provider:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;forgecode.dev (Recommended)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
FORGE_KEY=ForgeKey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To use Forgecode&#39;s provider with Forge:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Visit &lt;a href=&quot;https://app.forgecode.dev/&quot;&gt;https://app.forgecode.dev/&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Login with your existing credentials or create a new account&lt;/li&gt; 
  &lt;li&gt;Once logged in, your account will automatically enable the Forge Provider&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenRouter&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
OPENROUTER_API_KEY=&amp;lt;your_openrouter_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Requesty&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
REQUESTY_API_KEY=&amp;lt;your_requesty_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;x-ai&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
XAI_API_KEY=&amp;lt;your_xai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;switch the model using &lt;code&gt;/model&lt;/code&gt; command in the Forge CLI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: o3-mini-high
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Anthropic&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: claude-3.7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Google Vertex AI&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
PROJECT_ID=&amp;lt;your_project_id&amp;gt;
LOCATION=&amp;lt;your_location&amp;gt;
OPENAI_API_KEY=&amp;lt;vertex_ai_key&amp;gt;
OPENAI_URL=https://${LOCATION}-aiplatform.googleapis.com/v1beta1/projects/${PROJECT_ID}/locations/${LOCATION}/endpoints/openapi
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: publishers/anthropic/models/claude-3-7-sonnet
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;OpenAI-Compatible Providers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
OPENAI_API_KEY=&amp;lt;your_provider_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_provider_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: &amp;lt;provider-specific-model&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Groq&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
OPENAI_API_KEY=&amp;lt;your_groq_api_key&amp;gt;
OPENAI_URL=https://api.groq.com/openai/v1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: deepseek-r1-distill-llama-70b
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Amazon Bedrock&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;To use Amazon Bedrock models with Forge, you&#39;ll need to first set up the &lt;a href=&quot;https://github.com/aws-samples/bedrock-access-gateway&quot;&gt;Bedrock Access Gateway&lt;/a&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up Bedrock Access Gateway&lt;/strong&gt;:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Follow the deployment steps in the &lt;a href=&quot;https://github.com/aws-samples/bedrock-access-gateway&quot;&gt;Bedrock Access Gateway repo&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;Create your own API key in Secrets Manager&lt;/li&gt; 
    &lt;li&gt;Deploy the CloudFormation stack&lt;/li&gt; 
    &lt;li&gt;Note your API Base URL from the CloudFormation outputs&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create these files in your project directory&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
OPENAI_API_KEY=&amp;lt;your_bedrock_gateway_api_key&amp;gt;
OPENAI_URL=&amp;lt;your_bedrock_gateway_base_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: anthropic.claude-3-opus
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
 &lt;/ol&gt;
&lt;/details&gt;   
&lt;h3&gt;forge.yaml Configuration Options&lt;/h3&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;p&gt;Forge supports several environment variables for advanced configuration and fine-tuning. These can be set in your &lt;code&gt;.env&lt;/code&gt; file or system environment.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Retry Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how Forge handles retry logic for failed requests:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
FORGE_RETRY_INITIAL_BACKOFF_MS=1000    # Initial backoff time in milliseconds (default: 1000)
FORGE_RETRY_BACKOFF_FACTOR=2           # Multiplier for backoff time (default: 2)  
FORGE_RETRY_MAX_ATTEMPTS=3             # Maximum retry attempts (default: 3)
FORGE_SUPPRESS_RETRY_ERRORS=false      # Suppress retry error messages (default: false)
FORGE_RETRY_STATUS_CODES=429,500,502   # HTTP status codes to retry (default: 429,500,502,503,504)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;HTTP Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Fine-tune HTTP client behavior for API requests:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
FORGE_HTTP_CONNECT_TIMEOUT=30              # Connection timeout in seconds (default: 30)
FORGE_HTTP_READ_TIMEOUT=900                # Read timeout in seconds (default: 900)
FORGE_HTTP_POOL_IDLE_TIMEOUT=90            # Pool idle timeout in seconds (default: 90)
FORGE_HTTP_POOL_MAX_IDLE_PER_HOST=5        # Max idle connections per host (default: 5)
FORGE_HTTP_MAX_REDIRECTS=10                # Maximum redirects to follow (default: 10)
FORGE_HTTP_USE_HICKORY=false               # Use Hickory DNS resolver (default: false)
FORGE_HTTP_TLS_BACKEND=default             # TLS backend: &quot;default&quot; or &quot;rustls&quot; (default: &quot;default&quot;)
FORGE_HTTP_MIN_TLS_VERSION=1.2             # Minimum TLS version: &quot;1.0&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;
FORGE_HTTP_MAX_TLS_VERSION=1.3             # Maximum TLS version: &quot;1.0&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;
FORGE_HTTP_ADAPTIVE_WINDOW=true            # Enable HTTP/2 adaptive window (default: true)
FORGE_HTTP_KEEP_ALIVE_INTERVAL=60          # Keep-alive interval in seconds (default: 60, use &quot;none&quot;/&quot;disabled&quot; to disable)
FORGE_HTTP_KEEP_ALIVE_TIMEOUT=10           # Keep-alive timeout in seconds (default: 10)
FORGE_HTTP_KEEP_ALIVE_WHILE_IDLE=true      # Keep-alive while idle (default: true)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;API Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Override default API endpoints:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
FORGE_API_URL=https://api.forgecode.dev  # Custom Forge API URL (default: https://api.forgecode.dev)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;System Configuration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;System-level environment variables (usually set automatically):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .env
FORGE_MAX_SEARCH_RESULT_BYTES=101024   # Maximum bytes for search results (default: 101024 - 10 KB)
SHELL=/bin/zsh                         # Shell to use for command execution (Unix/Linux/macOS)
COMSPEC=cmd.exe                        # Command processor to use (Windows)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;The &lt;code&gt;forge.yaml&lt;/code&gt; file supports several advanced configuration options that let you customize Forge&#39;s behavior.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Custom Rules&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Add your own guidelines that all agents should follow when generating responses.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
custom_rules: |
  1. Always add comprehensive error handling to any code you write.
  2. Include unit tests for all new functions.
  3. Follow our team&#39;s naming convention: camelCase for variables, PascalCase for classes.
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Define custom commands as shortcuts for repetitive prompts:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
commands:
  - name: &#39;refactor&#39;
    description: &#39;Refactor selected code&#39;
    prompt: &#39;Please refactor this code to improve readability and performance&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Specify the default AI model to use for all agents in the workflow.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
model: &#39;claude-3.7-sonnet&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Walker Depth&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how deeply Forge traverses your project directory structure when gathering context.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
max_walker_depth: 3 # Limit directory traversal to 3 levels deep
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Temperature&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Adjust the creativity and randomness in AI responses. Lower values (0.0-0.3) produce more focused, deterministic outputs, while higher values (0.7-2.0) generate more diverse and creative results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
temperature: 0.7 # Balanced creativity and focus
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Tool Max Failure Limit&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Control how many times a tool can fail before Forge forces completion to prevent infinite retry loops. This helps avoid situations where an agent gets stuck repeatedly trying the same failing operation.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
max_tool_failure_per_turn: 3 # Allow up to 3 failures per tool before forcing completion
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set to a higher value if you want more retry attempts, or lower if you want faster failure detection.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Max Requests Per Turn&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Limit the maximum number of requests an agent can make in a single conversation turn. This prevents runaway conversations and helps control API usage and costs.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# forge.yaml
max_requests_per_turn: 50 # Allow up to 50 requests per turn
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;When this limit is reached, Forge will:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ask you if you wish to continue&lt;/li&gt; 
  &lt;li&gt;If you respond with &#39;Yes&#39;, it will continue the conversation&lt;/li&gt; 
  &lt;li&gt;If you respond with &#39;No&#39;, it will end the conversation&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;The MCP feature allows AI agents to communicate with external tools and services. This implementation follows Anthropic&#39;s &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/tutorials#set-up-model-context-protocol-mcp&quot;&gt;Model Context Protocol&lt;/a&gt; design.&lt;/p&gt; 
 &lt;h3&gt;MCP Configuration&lt;/h3&gt; 
 &lt;p&gt;Configure MCP servers using the CLI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# List all MCP servers
forge mcp list

# Add a new server
forge mcp add

# Add a server using JSON format
forge mcp add-json

# Get server details
forge mcp get

# Remove a server
forge mcp remove
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or manually create a &lt;code&gt;.mcp.json&lt;/code&gt; file with the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
	&quot;mcpServers&quot;: {
		&quot;server_name&quot;: {
			&quot;command&quot;: &quot;command_to_execute&quot;,
			&quot;args&quot;: [&quot;arg1&quot;, &quot;arg2&quot;],
			&quot;env&quot;: { &quot;ENV_VAR&quot;: &quot;value&quot; }
		},
		&quot;another_server&quot;: {
			&quot;url&quot;: &quot;http://localhost:3000/events&quot;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;MCP configurations are read from two locations (in order of precedence):&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Local configuration (project-specific)&lt;/li&gt; 
  &lt;li&gt;User configuration (user-specific)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h3&gt;Example Use Cases&lt;/h3&gt; 
 &lt;p&gt;MCP can be used for various integrations:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Web browser automation&lt;/li&gt; 
  &lt;li&gt;External API interactions&lt;/li&gt; 
  &lt;li&gt;Tool integration&lt;/li&gt; 
  &lt;li&gt;Custom service connections&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Usage in Multi-Agent Workflows&lt;/h3&gt; 
 &lt;p&gt;MCP tools can be used as part of multi-agent workflows, allowing specialized agents to interact with external systems as part of a collaborative problem-solving approach.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For comprehensive documentation on all features and capabilities, please visit the &lt;a href=&quot;https://github.com/antinomyhq/forge/tree/main/docs&quot;&gt;documentation site&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our vibrant Discord community to connect with other Forge users and contributors, get help with your projects, share ideas, and provide feedback!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/kRZBPpkgwq&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;Your support drives Forge&#39;s continued evolution! By starring our GitHub repository, you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Help others discover this powerful tool 🔍&lt;/li&gt; 
 &lt;li&gt;Motivate our development team 💪&lt;/li&gt; 
 &lt;li&gt;Enable us to prioritize new features 🛠️&lt;/li&gt; 
 &lt;li&gt;Strengthen our open-source community 🌱&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>idootop/open-xiaoai</title>
      <link>https://github.com/idootop/open-xiaoai</link>
      <description>&lt;p&gt;让小爱音箱「听见你的声音」，解锁无限可能。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open-XiaoAI&lt;/h1&gt; 
&lt;p&gt;让小爱音箱「听见你的声音」，解锁无限可能。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/cover.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;简介&lt;/h2&gt; 
&lt;p&gt;2017 年，当全球首款千万级销量的智能音箱诞生时，我们以为触摸到了未来。但很快发现，这些设备被困在「指令-响应」的牢笼里：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;它听得见分贝，却听不懂情感&lt;/li&gt; 
 &lt;li&gt;它能执行命令，却不会主动思考&lt;/li&gt; 
 &lt;li&gt;它有千万用户，却只有一套思维&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我们曾幻想中的&quot;贾维斯&quot;级人工智能，在现实场景中沦为&quot;天气预报+音乐播放器&quot;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;真正的智能不应被预设的代码逻辑所束缚，而应像生命体般在交互中进化。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在上一个 &lt;a href=&quot;https://github.com/idootop/mi-gpt&quot;&gt;MiGPT&lt;/a&gt; 项目中，我们已经实现将 ChatGPT 接入到小爱音箱。&lt;/p&gt; 
&lt;p&gt;这一次 &lt;a href=&quot;https://github.com/idootop/open-xiaoai&quot;&gt;Open-XiaoAI&lt;/a&gt; 再次进化，直接接管小爱音箱的“耳朵”和“嘴巴”，&lt;/p&gt; 
&lt;p&gt;通过多模态大模型和 AI Agent，将小爱音箱的潜力完全释放，解锁无限可能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;未来由你定义!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;你的声音 + 小爱音箱 = 无限可能&lt;/h2&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1TxJhzvEhz&quot;&gt;小爱音箱接入小智 AI 演示视频&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1TxJhzvEhz&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/xiaozhi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1YfVUz5EMj&quot;&gt;小爱音箱自定义唤醒词演示视频&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1YfVUz5EMj&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/kws.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://www.bilibili.com/video/BV1N1421y7qn&quot;&gt;小爱音箱接入 MiGPT 演示视频&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1N1421y7qn&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/migpt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;快速开始&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] 本教程仅适用于 &lt;strong&gt;小爱音箱 Pro（LX06）&lt;/strong&gt; 和 &lt;strong&gt;Xiaomi 智能音箱 Pro（OH2P）&lt;/strong&gt; 这两款机型，&lt;strong&gt;其他型号&lt;/strong&gt;的小爱音箱请勿直接使用！🚨&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;本项目由 Client 端 + Server 端两部分组成，你可以按照以下顺序运行该项目：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;刷机更新小爱音箱补丁固件，开启并 SSH 连接到小爱音箱 👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/flash.md&quot;&gt;教程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;在小爱音箱上安装运行 Client 端补丁程序 👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/packages/client-rust/README.md&quot;&gt;教程&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;运行以下演示程序，体验小爱音箱的全新能力 ✨ 
  &lt;ul&gt; 
   &lt;li&gt;👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/xiaozhi/README.md&quot;&gt;小爱音箱接入小智 AI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/kws/README.md&quot;&gt;小爱音箱自定义唤醒词&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/migpt/README.md&quot;&gt;小爱音箱接入 MiGPT（完美版）&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;👉 &lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/gemini/README.md&quot;&gt;小爱音箱接入 Gemini Live API&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;以上皆为抛砖引玉，你也可以亲手编写自己想要的功能，一切由你定义！&lt;/p&gt; 
&lt;h2&gt;相关项目&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] 技术的意义在于分享与共创。如果你打算或正在使用本项目做些有趣的事情， 欢迎提交 PR 或 issue 分享你的项目和创意。✨&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果你不想刷机，或者不是小爱音箱 Pro，下面的项目或许对你有用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/idootop/mi-gpt&quot;&gt;https://github.com/idootop/mi-gpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/idootop/migpt-next&quot;&gt;https://github.com/idootop/migpt-next&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yihong0618/xiaogpt&quot;&gt;https://github.com/yihong0618/xiaogpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hanxi/xiaomusic&quot;&gt;https://github.com/hanxi/xiaomusic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;参考链接&lt;/h2&gt; 
&lt;p&gt;如果你想要了解更多技术细节，下面的链接可能对你有用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yihong0618/gitblog/issues/258&quot;&gt;https://github.com/yihong0618/gitblog/issues/258&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jialeicui/open-lx01&quot;&gt;https://github.com/jialeicui/open-lx01&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/duhow/xiaoai-patch&quot;&gt;https://github.com/duhow/xiaoai-patch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://javabin.cn/2021/xiaoai_fm.html&quot;&gt;https://javabin.cn/2021/xiaoai_fm.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/&quot;&gt;https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;免责声明&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;适用范围&lt;/strong&gt; 本项目为开源非营利项目，仅供学术研究或个人测试用途。严禁用于商业服务、网络攻击、数据窃取、系统破坏等违反《网络安全法》及使用者所在地司法管辖区的法律规定的场景。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;非官方声明&lt;/strong&gt; 本项目由第三方开发者独立开发，与小米集团及其关联方（下称&quot;权利方&quot;）无任何隶属/合作关系，亦未获其官方授权/认可或技术支持。项目中涉及的商标、固件、云服务的所有权利归属小米集团。若权利方主张权益，使用者应立即主动停止使用并删除本项目。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;继续下载或运行本项目，即表示您已完整阅读并同意&lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/agreement.md&quot;&gt;用户协议&lt;/a&gt;，否则请立即终止使用并彻底删除本项目。&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/idootop/open-xiaoai/main/LICENSE&quot;&gt;MIT&lt;/a&gt; License © 2024-PRESENT Del Wang&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paradigmxyz/reth</title>
      <link>https://github.com/paradigmxyz/reth</link>
      <description>&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reth&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/paradigmxyz/reth/actions/workflows/bench.yml&quot;&gt;&lt;img src=&quot;https://github.com/paradigmxyz/reth/actions/workflows/bench.yml/badge.svg?sanitize=true&quot; alt=&quot;bench status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/paradigmxyz/reth/actions/workflows/unit.yml&quot;&gt;&lt;img src=&quot;https://github.com/paradigmxyz/reth/workflows/unit/badge.svg?sanitize=true&quot; alt=&quot;CI status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/paradigmxyz/reth/actions/workflows/lint.yml&quot;&gt;&lt;img src=&quot;https://github.com/paradigmxyz/reth/actions/workflows/lint.yml/badge.svg?sanitize=true&quot; alt=&quot;cargo-lint status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://t.me/paradigm_reth&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth&quot; alt=&quot;Telegram Chat&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://paradigmxyz.github.io/reth/installation/installation.html&quot;&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://reth.rs&quot;&gt;User Docs&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs&quot;&gt;Developer Docs&lt;/a&gt; | &lt;a href=&quot;https://reth.rs/docs&quot;&gt;Crate Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Reth?&lt;/h2&gt; 
&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href=&quot;https://twitter.com/kelvinfichter/status/1597653609411268608&quot;&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href=&quot;https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine&quot;&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href=&quot;https://paradigm.xyz/&quot;&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; 
&lt;p&gt;More concretely, our goals are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node&#39;s crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node&#39;s database, or &quot;unbundling&quot; the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project&#39;s components &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we used Rust and the &lt;a href=&quot;https://erigon.substack.com/p/erigon-stage-sync-and-control-flows&quot;&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href=&quot;https://github.com/alloy-rs/alloy/&quot;&gt;Alloy&lt;/a&gt; and &lt;a href=&quot;https://github.com/bluealloy/revm/&quot;&gt;revm&lt;/a&gt;) which we’ve battle-tested and optimized via &lt;a href=&quot;https://github.com/foundry-rs/foundry/&quot;&gt;Foundry&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there&#39;s a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum&#39;s antifragility.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you&#39;re working on any of these projects, please reach out.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via &quot;fast sync&quot;. We envision that Reth will be configurable enough and provide configurable &quot;profiles&quot; for the tradeoffs that each team faces.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.&lt;/p&gt; 
&lt;p&gt;More historical context below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We released 1.0 &quot;production-ready&quot; stable Reth in June 2024. 
  &lt;ul&gt; 
   &lt;li&gt;Reth completed an audit with &lt;a href=&quot;https://sigmaprime.io/&quot;&gt;Sigma Prime&lt;/a&gt;, the developers of &lt;a href=&quot;https://github.com/sigp/lighthouse&quot;&gt;Lighthouse&lt;/a&gt;, the Rust Consensus Layer implementation. Find it &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/audit/sigma_prime_audit_v2.pdf&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Revm (the EVM used in Reth) underwent an audit with &lt;a href=&quot;https://twitter.com/guidovranken&quot;&gt;Guido Vranken&lt;/a&gt; (#1 &lt;a href=&quot;https://ethereum.org/en/bug-bounty&quot;&gt;Ethereum Bug Bounty&lt;/a&gt;). We will publish the results soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;We released multiple iterative beta versions, up to &lt;a href=&quot;https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9&quot;&gt;beta.9&lt;/a&gt; on Monday June 3rd 2024 the last beta release.&lt;/li&gt; 
 &lt;li&gt;We released &lt;a href=&quot;https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1&quot;&gt;beta&lt;/a&gt; on Monday March 4th 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing &quot;history&quot; to be mounted on separate drives.&lt;/li&gt; 
 &lt;li&gt;We shipped iterative improvements until the last alpha release on February 28th 2024, &lt;a href=&quot;https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21&quot;&gt;0.1.0-alpha.21&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We &lt;a href=&quot;https://www.paradigm.xyz/2023/06/reth-alpha&quot;&gt;initially announced&lt;/a&gt; &lt;a href=&quot;https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1&quot;&gt;0.1.0-alpha.1&lt;/a&gt; in June 20th 2023.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database compatibility&lt;/h3&gt; 
&lt;p&gt;We do not have any breaking database changes since beta.1, and do not plan any in the near future.&lt;/p&gt; 
&lt;p&gt;Reth &lt;a href=&quot;https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1&quot;&gt;v0.2.0-beta.1&lt;/a&gt; includes a &lt;a href=&quot;https://github.com/paradigmxyz/reth/pull/5191&quot;&gt;set of breaking database changes&lt;/a&gt; that makes it impossible to use database files produced by earlier versions.&lt;/p&gt; 
&lt;p&gt;If you had a database produced by alpha versions of Reth, you need to drop it with &lt;code&gt;reth db drop&lt;/code&gt; (using the same arguments such as &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--datadir&lt;/code&gt; that you passed to &lt;code&gt;reth node&lt;/code&gt;), and resync using the same &lt;code&gt;reth node&lt;/code&gt; command you&#39;ve used before.&lt;/p&gt; 
&lt;h2&gt;For Users&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://paradigmxyz.github.io/reth&quot;&gt;Reth documentation&lt;/a&gt; for instructions on how to install and run Reth.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;h3&gt;Using reth as a library&lt;/h3&gt; 
&lt;p&gt;You can use individual crates of reth in your project.&lt;/p&gt; 
&lt;p&gt;The crate docs can be found &lt;a href=&quot;https://paradigmxyz.github.io/reth/docs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a general overview of the crates, see &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md&quot;&gt;Project Layout&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href=&quot;https://t.me/paradigm_reth&quot;&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributor guidelines can be found in &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs&quot;&gt;contributor docs&lt;/a&gt; for more information on the project. A good starting point is &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md&quot;&gt;Project Layout&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building and testing&lt;/h3&gt; 
&lt;!--
When updating this, also update:
- clippy.toml
- Cargo.toml
- .github/workflows/lint.yml
--&gt; 
&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this project is &lt;a href=&quot;https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/&quot;&gt;1.88.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the docs for detailed instructions on how to &lt;a href=&quot;https://paradigmxyz.github.io/reth/installation/source&quot;&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To fully test Reth, you will need to have &lt;a href=&quot;https://geth.ethereum.org/docs/getting-started/installing-geth&quot;&gt;Geth installed&lt;/a&gt;, but it is possible to run a subset of tests without Geth.&lt;/p&gt; 
&lt;p&gt;First, clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/paradigmxyz/reth
cd reth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cargo nextest run --workspace

# Run the Ethereum Foundation tests
make ef-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We highly recommend using &lt;a href=&quot;https://nexte.st/&quot;&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to speed up testing. Using &lt;code&gt;cargo test&lt;/code&gt; to run tests may work fine, but this is not tested and does not support more advanced features like retries for spurious failures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the &lt;code&gt;SEED&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href=&quot;https://paradigmxyz.github.io/reth/&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the answer is not there:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href=&quot;https://t.me/paradigm_reth&quot;&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href=&quot;https://github.com/paradigmxyz/reth/discussions/new&quot;&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; 
 &lt;li&gt;Open an issue with &lt;a href=&quot;https://github.com/paradigmxyz/reth/issues/new?assignees=&amp;amp;labels=C-bug%2CS-needs-triage&amp;amp;projects=&amp;amp;template=bug.yml&quot;&gt;the bug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; 
&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/go-ethereum/&quot;&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ledgerwatch/erigon&quot;&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href=&quot;https://erigon.substack.com/p/erigon-stage-sync-and-control-flows&quot;&gt;&quot;Staged Sync&quot; architecture&lt;/a&gt; that Reth is using, as well as &lt;a href=&quot;https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine&quot;&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akula-bft/akula/&quot;&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula&#39;s &lt;a href=&quot;https://github.com/paradigmxyz/reth/pull/132&quot;&gt;MDBX Bindings&lt;/a&gt;, &lt;a href=&quot;https://github.com/paradigmxyz/reth/pull/63&quot;&gt;FastRLP&lt;/a&gt; and &lt;a href=&quot;https://github.com/paradigmxyz/reth/pull/80&quot;&gt;ECIES&lt;/a&gt; . Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;NippyJar&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BurntSushi/ripgrep</title>
      <link>https://github.com/BurntSushi/ripgrep</link>
      <description>&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; 
&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href=&quot;https://github.com/BurntSushi/ripgrep/releases&quot;&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep/actions&quot;&gt;&lt;img src=&quot;https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/ripgrep&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/ripgrep.svg?sanitize=true&quot; alt=&quot;Crates.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/project/ripgrep/badges&quot;&gt;&lt;img src=&quot;https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dual-licensed under MIT or the &lt;a href=&quot;https://unlicense.org&quot;&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CHANGELOG&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; 
&lt;h3&gt;Documentation quick links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.rs/regex/1/regex/#syntax&quot;&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file&quot;&gt;Configuration files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete&quot;&gt;Shell completions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building&quot;&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Screenshot of search results&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://burntsushi.net/stuff/ripgrep1.png&quot;&gt;&lt;img src=&quot;https://burntsushi.net/stuff/ripgrep1.png&quot; alt=&quot;A screenshot of a sample search with ripgrep&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; 
&lt;p&gt;This example searches the entire &lt;a href=&quot;https://github.com/BurntSushi/linux&quot;&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i9-12900K 5.2 GHz.&lt;/p&gt; 
&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href=&quot;https://blog.burntsushi.net/ripgrep/&quot;&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.082s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/p-ranav/hypergrep&quot;&gt;hypergrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hgrep -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.167s (2.04x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&quot;&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git grep -P -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.273s (3.34x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ag -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;534&lt;/td&gt; 
   &lt;td&gt;0.443s (5.43x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.639s (7.82x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&quot;&gt;git grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;0.727s (8.91x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&quot;&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;536&lt;/td&gt; 
   &lt;td&gt;2.670s (32.70x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ack -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2677&lt;/td&gt; 
   &lt;td&gt;2.935s (35.94x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here&#39;s another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;0.063s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -r -n --include=&#39;*.c&#39; --include=&#39;*.h&#39; -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.607s (9.62x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grep -E -r -n --include=&#39;*.c&#39; --include=&#39;*.h&#39; -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;447&lt;/td&gt; 
   &lt;td&gt;0.674s (10.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Now we&#39;ll move to searching on single large file. Here is a straight-up comparison between ripgrep, ugrep and GNU grep on a file cached in memory (~13GB, &lt;a href=&quot;http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz&quot;&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;, decompressed):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.042s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;1.339s (1.28x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;7882&lt;/td&gt; 
   &lt;td&gt;6.577s (6.31x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;1.664s&lt;/code&gt; for ripgrep and &lt;code&gt;9.484s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Beware of performance cliffs though:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg -w &#39;[A-Z]\w+ Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.053s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E -w &#39;[A-Z]\w+ Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;6.234s (5.92x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -w &#39;[A-Z]\w+ Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;485&lt;/td&gt; 
   &lt;td&gt;28.973s (27.51x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;And performance can drop precipitously across the board when searching big files for patterns without any opportunities for literal optimizations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg &#39;[A-Za-z]{30}&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;15.569s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep -E &#39;[A-Za-z]{30}&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;21.857s (1.40x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep -E &#39;[A-Za-z]{30}&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6749&lt;/td&gt; 
   &lt;td&gt;32.409s (2.08x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep (Unicode)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 grep -E &#39;[A-Za-z]{30}&#39;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;6795&lt;/td&gt; 
   &lt;td&gt;8m30s (32.74x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Finally, high match counts also tend to both tank performance and smooth out the differences between tools (because performance is dominated by how quickly one can handle a match and not the algorithm used to detect the match, generally speaking):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Line count&lt;/th&gt; 
   &lt;th&gt;Time&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ripgrep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rg the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;6.948s&lt;/strong&gt; (1.00x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Genivia/ugrep&quot;&gt;ugrep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ugrep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;11.721s (1.69x)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;LC_ALL=C grep the&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;83499915&lt;/td&gt; 
   &lt;td&gt;15.217s (2.19x)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever&quot;&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; 
 &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search&quot;&gt;recursive search&lt;/a&gt; and does &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering&quot;&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won&#39;t search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won&#39;t search hidden files and it won&#39;t search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;ripgrep can &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types&quot;&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; 
 &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep&#39;s default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto)&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;ripgrep has &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements&quot;&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding&quot;&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;ripgrep supports &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor&quot;&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; 
 &lt;li&gt;ripgrep can be configured via a &lt;a href=&quot;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file&quot;&gt;configuration file&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; 
&lt;h3&gt;Why shouldn&#39;t I use ripgrep?&lt;/h3&gt; 
&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; 
&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; 
 &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that&#39;s in another tool that isn&#39;t in ripgrep.&lt;/li&gt; 
 &lt;li&gt;There is a performance edge case where ripgrep doesn&#39;t do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; 
 &lt;li&gt;ripgrep isn&#39;t possible to install on your machine or isn&#39;t available for your platform. (Please file a bug report!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; 
&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href=&quot;https://blog.burntsushi.net/ripgrep/&quot;&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is built on top of &lt;a href=&quot;https://github.com/rust-lang/regex&quot;&gt;Rust&#39;s regex engine&lt;/a&gt;. Rust&#39;s regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; 
 &lt;li&gt;Rust&#39;s regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; 
 &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; 
 &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href=&quot;https://docs.rs/regex/1/regex/struct.RegexSet.html&quot;&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; 
 &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href=&quot;https://docs.rs/crossbeam&quot;&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.rs/ignore&quot;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature comparison&lt;/h3&gt; 
&lt;p&gt;Andy Lester, author of &lt;a href=&quot;https://beyondgrep.com/&quot;&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href=&quot;https://beyondgrep.com/feature-comparison/&quot;&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy&#39;s table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;If you&#39;d like to try ripgrep before installing, there&#39;s an unofficial &lt;a href=&quot;https://codapi.org/ripgrep/&quot;&gt;playground&lt;/a&gt; and an &lt;a href=&quot;https://codapi.org/try/ripgrep/&quot;&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any questions about these, please open an issue in the &lt;a href=&quot;https://github.com/nalgeon/tryxinyminutes&quot;&gt;tutorial repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep/releases&quot;&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep&quot;&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://chocolatey.org/packages/ripgrep&quot;&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ choco install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json&quot;&gt;official bucket&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep&quot;&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href=&quot;https://packages.gentoo.org/packages/sys-apps/ripgrep&quot;&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;RHEL/CentOS 7/8&lt;/strong&gt; user, you can install ripgrep from &lt;a href=&quot;https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/&quot;&gt;copr&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install -y yum-utils
$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo
$ sudo yum install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href=&quot;https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/text/ripgrep/default.nix&quot;&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Flox&lt;/strong&gt; user, you can install ripgrep as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ guix install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href=&quot;https://github.com/BurntSushi/ripgrep/releases&quot;&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.1-1_amd64.deb
$ sudo dpkg -i ripgrep_14.1.1-1_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href=&quot;https://tracker.debian.org/pkg/rust-ripgrep&quot;&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href=&quot;https://launchpad.net/ubuntu/+source/rust-ripgrep&quot;&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don&#39;t know how to fix and don&#39;t have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; 
&lt;p&gt;If you&#39;re an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href=&quot;https://packages.altlinux.org/en/search?name=ripgrep&quot;&gt;official repo&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://www.freshports.org/textproc/ripgrep/&quot;&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://openports.se/textproc/ripgrep&quot;&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href=&quot;https://pkgsrc.se/textproc/ripgrep&quot;&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep&quot;&gt;official ports&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Void Linux&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&quot;https://voidlinux.org/packages/?arch=x86_64&amp;amp;q=ripgrep&quot;&gt;official repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo xbps-install -Syv ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.88.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; 
 &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, one can use &lt;a href=&quot;https://github.com/cargo-bins/cargo-binstall&quot;&gt;&lt;code&gt;cargo binstall&lt;/code&gt;&lt;/a&gt; to install a ripgrep binary directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo binstall ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;ripgrep is written in Rust, so you&#39;ll need to grab a &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.88.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; 
&lt;p&gt;To build ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep
$ cd ripgrep
$ cargo build --release
$ ./target/release/rg --version
0.1.3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the past, ripgrep supported a &lt;code&gt;simd-accel&lt;/code&gt; Cargo feature when using a Rust nightly compiler. This only benefited UTF-16 transcoding. Since it required unstable features, this build mode was prone to breakage. Because of that, support for it has been removed. If you want SIMD optimizations for UTF-16 transcoding, then you&#39;ll have to petition the &lt;a href=&quot;https://github.com/hsivonen/encoding_rs&quot;&gt;&lt;code&gt;encoding_rs&lt;/code&gt;&lt;/a&gt; project to use stable APIs.&lt;/p&gt; 
&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo build --release --features &#39;pcre2&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system&#39;s PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn&#39;t exist, then ripgrep will build PCRE2 from source using your system&#39;s C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl
$ cargo build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cargo test --all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;from the repository root.&lt;/p&gt; 
&lt;h3&gt;Related tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href=&quot;https://dandavison.github.io/delta/grep.html&quot;&gt;delta&#39;s manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; 
&lt;p&gt;For reporting a security vulnerability, please &lt;a href=&quot;https://blog.burntsushi.net/about/&quot;&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;The following is a list of known translations of ripgrep&#39;s documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-&quot;&gt;Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UltiRequiem/traducciones/tree/master/ripgrep&quot;&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>

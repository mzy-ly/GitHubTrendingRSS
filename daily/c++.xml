<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C++ Daily Trending</title>
    <description>Daily Trending of C++ in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:31:35 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>nomic-ai/gpt4all</title>
      <link>https://github.com/nomic-ai/gpt4all</link>
      <description>&lt;p&gt;GPT4All: Run Local LLMs on Any Device. Open-source and available for commercial use.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;GPT4All&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; Now with support for DeepSeek R1 Distillations &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.nomic.ai/gpt4all&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://docs.gpt4all.io&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://discord.gg/mGZE39AS3e&quot;&gt;Discord&lt;/a&gt; • &lt;a href=&quot;https://www.youtube.com/watch?v=gQcZDXRVJok&quot;&gt;YouTube Tutorial&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; GPT4All runs large language models (LLMs) privately on everyday desktops &amp;amp; laptops. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; No API calls or GPUs required - you can just download the application and &lt;a href=&quot;https://docs.gpt4all.io/gpt4all_desktop/quickstart.html#quickstart&quot;&gt;get started&lt;/a&gt;. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Read about what&#39;s new in &lt;a href=&quot;https://www.nomic.ai/blog/tag/gpt4all&quot;&gt;our blog&lt;/a&gt;. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://nomic.ai/gpt4all/#newsletter-form&quot;&gt;Subscribe to the newsletter&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nomic-ai/gpt4all/assets/70534565/513a0f15-4964-4109-89e4-4f9a9011f311&quot;&gt;https://github.com/nomic-ai/gpt4all/assets/70534565/513a0f15-4964-4109-89e4-4f9a9011f311&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; GPT4All is made possible by our compute partner &lt;a href=&quot;https://www.paperspace.com/&quot;&gt;Paperspace&lt;/a&gt;. &lt;/p&gt; 
&lt;h2&gt;Download Links&lt;/h2&gt; 
&lt;p&gt; — &lt;a href=&quot;https://gpt4all.io/installers/gpt4all-installer-win64.exe&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nomic-ai/gpt4all/main/gpt4all-bindings/python/docs/assets/windows.png&quot; style=&quot;height: 1em; width: auto&quot; /&gt; Windows Installer &lt;/a&gt; — &lt;/p&gt; 
&lt;p&gt; — &lt;a href=&quot;https://gpt4all.io/installers/gpt4all-installer-win64-arm.exe&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nomic-ai/gpt4all/main/gpt4all-bindings/python/docs/assets/windows.png&quot; style=&quot;height: 1em; width: auto&quot; /&gt; Windows ARM Installer &lt;/a&gt; — &lt;/p&gt; 
&lt;p&gt; — &lt;a href=&quot;https://gpt4all.io/installers/gpt4all-installer-darwin.dmg&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nomic-ai/gpt4all/main/gpt4all-bindings/python/docs/assets/mac.png&quot; style=&quot;height: 1em; width: auto&quot; /&gt; macOS Installer &lt;/a&gt; — &lt;/p&gt; 
&lt;p&gt; — &lt;a href=&quot;https://gpt4all.io/installers/gpt4all-installer-linux.run&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nomic-ai/gpt4all/main/gpt4all-bindings/python/docs/assets/ubuntu.svg?sanitize=true&quot; style=&quot;height: 1em; width: auto&quot; /&gt; Ubuntu Installer &lt;/a&gt; — &lt;/p&gt; 
&lt;p&gt; The Windows and Linux builds require Intel Core i3 2nd Gen / AMD Bulldozer, or better. &lt;/p&gt; 
&lt;p&gt; The Windows ARM build supports Qualcomm Snapdragon and Microsoft SQ1/SQ2 processors. &lt;/p&gt; 
&lt;p&gt; The Linux build is x86-64 only (no ARM). &lt;/p&gt; 
&lt;p&gt; The macOS build requires Monterey 12.6 or newer. Best results with Apple Silicon M-series processors. &lt;/p&gt; 
&lt;p&gt;See the full &lt;a href=&quot;https://raw.githubusercontent.com/nomic-ai/gpt4all/main/gpt4all-chat/system_requirements.md&quot;&gt;System Requirements&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;p&gt; &lt;a href=&quot;https://flathub.org/apps/io.gpt4all.gpt4all&quot;&gt; &lt;img style=&quot;height: 2em; width: auto&quot; alt=&quot;Get it on Flathub&quot; src=&quot;https://flathub.org/api/badge&quot; /&gt;&lt;br /&gt; Flathub (community maintained) &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Install GPT4All Python&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;gpt4all&lt;/code&gt; gives you access to LLMs with our Python client around &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;&lt;code&gt;llama.cpp&lt;/code&gt;&lt;/a&gt; implementations.&lt;/p&gt; 
&lt;p&gt;Nomic contributes to open source software like &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;&lt;code&gt;llama.cpp&lt;/code&gt;&lt;/a&gt; to make LLMs accessible and efficient &lt;strong&gt;for all&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install gpt4all
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gpt4all import GPT4All
model = GPT4All(&quot;Meta-Llama-3-8B-Instruct.Q4_0.gguf&quot;) # downloads / loads a 4.66GB LLM
with model.chat_session():
    print(model.generate(&quot;How can I run LLMs efficiently on my laptop?&quot;, max_tokens=1024))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;🦜&lt;/span&gt;&lt;span&gt;🔗&lt;/span&gt; &lt;a href=&quot;https://python.langchain.com/v0.2/docs/integrations/providers/gpt4all/&quot;&gt;Langchain&lt;/a&gt; &lt;span&gt;🗃&lt;/span&gt; &lt;a href=&quot;https://github.com/weaviate/weaviate&quot;&gt;Weaviate Vector Database&lt;/a&gt; - &lt;a href=&quot;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-gpt4all&quot;&gt;module docs&lt;/a&gt; &lt;span&gt;🔭&lt;/span&gt; &lt;a href=&quot;https://github.com/openlit/openlit&quot;&gt;OpenLIT (OTel-native Monitoring)&lt;/a&gt; - &lt;a href=&quot;https://docs.openlit.io/latest/integrations/gpt4all&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Release History&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;July 2nd, 2024&lt;/strong&gt;: V3.0.0 Release 
  &lt;ul&gt; 
   &lt;li&gt;Fresh redesign of the chat application UI&lt;/li&gt; 
   &lt;li&gt;Improved user workflow for LocalDocs&lt;/li&gt; 
   &lt;li&gt;Expanded access to more model architectures&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;October 19th, 2023&lt;/strong&gt;: GGUF Support Launches with Support for: 
  &lt;ul&gt; 
   &lt;li&gt;Mistral 7b base model, an updated model gallery on our website, several new local code models including Rift Coder v1.5&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://blog.nomic.ai/posts/gpt4all-gpu-inference-with-vulkan&quot;&gt;Nomic Vulkan&lt;/a&gt; support for Q4_0 and Q4_1 quantizations in GGUF.&lt;/li&gt; 
   &lt;li&gt;Offline build support for running old versions of the GPT4All Local LLM Chat Client.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 18th, 2023&lt;/strong&gt;: &lt;a href=&quot;https://blog.nomic.ai/posts/gpt4all-gpu-inference-with-vulkan&quot;&gt;Nomic Vulkan&lt;/a&gt; launches supporting local LLM inference on NVIDIA and AMD GPUs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;July 2023&lt;/strong&gt;: Stable support for LocalDocs, a feature that allows you to privately and locally chat with your data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;June 28th, 2023&lt;/strong&gt;: &lt;a href=&quot;https://github.com/nomic-ai/gpt4all/tree/cef74c2be20f5b697055d5b8b506861c7b997fab/gpt4all-api&quot;&gt;Docker-based API server&lt;/a&gt; launches allowing inference of local LLMs from an OpenAI-compatible HTTP endpoint.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;GPT4All welcomes contributions, involvement, and discussion from the open source community! Please see CONTRIBUTING.md and follow the issues, bug reports, and PR markdown templates.&lt;/p&gt; 
&lt;p&gt;Check project discord, with project owners, or through existing issues/PRs to avoid duplicate work. Please make sure to tag all of the above with relevant project identifiers or your contribution could potentially get lost. Example tags: &lt;code&gt;backend&lt;/code&gt;, &lt;code&gt;bindings&lt;/code&gt;, &lt;code&gt;python-bindings&lt;/code&gt;, &lt;code&gt;documentation&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;If you utilize this repository, models or data in a downstream project, please consider citing it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@misc{gpt4all,
  author = {Yuvanesh Anand and Zach Nussbaum and Brandon Duderstadt and Benjamin Schmidt and Andriy Mulyar},
  title = {GPT4All: Training an Assistant-style Chatbot with Large Scale Data Distillation from GPT-3.5-Turbo},
  year = {2023},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/nomic-ai/gpt4all}},
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pybind/pybind11</title>
      <link>https://github.com/pybind/pybind11</link>
      <description>&lt;p&gt;Seamless operability between C++11 and Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: &lt;a href=&quot;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&quot;&gt;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&lt;/a&gt; :alt: pybind11 logo&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pybind11 (v3) — Seamless interoperability between C++ and Python&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions|&lt;/p&gt; 
&lt;p&gt;|CI| |Build status| |SPEC 4 — Using and Creating Nightly Wheels|&lt;/p&gt; 
&lt;p&gt;|Repology| |PyPI package| |Conda-forge| |Python Versions|&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Setuptools example &amp;lt;https://github.com/pybind/python_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Scikit-build example &amp;lt;https://github.com/pybind/scikit_build_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;CMake example &amp;lt;https://github.com/pybind/cmake_example&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;.. start&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pybind11&lt;/strong&gt; is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent &lt;code&gt;Boost.Python &amp;lt;http://www.boost.org/doc/libs/1_58_0/libs/python/doc/&amp;gt;&lt;/code&gt;_ library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection.&lt;/p&gt; 
&lt;p&gt;The main issue with Boost.Python—and the reason for creating such a similar project—is Boost. Boost is an enormously large and complex suite of utility libraries that works with almost every C++ compiler in existence. This compatibility has its cost: arcane template tricks and workarounds are necessary to support the oldest and buggiest of compiler specimens. Now that C++11-compatible compilers are widely available, this heavy machinery has become an excessively large and unnecessary dependency.&lt;/p&gt; 
&lt;p&gt;Think of this library as a tiny self-contained version of Boost.Python with everything stripped away that isn&#39;t relevant for binding generation. Without comments, the core header files only require ~4K lines of code and depend on Python (CPython 3.8+, PyPy, or GraalPy) and the C++ standard library. This compact implementation was possible thanks to some C++11 language features (specifically: tuples, lambda functions and variadic templates). Since its creation, this library has grown beyond Boost.Python in many ways, leading to dramatically simpler binding code in many common situations.&lt;/p&gt; 
&lt;p&gt;Tutorial and reference documentation is provided at &lt;code&gt;pybind11.readthedocs.io &amp;lt;https://pybind11.readthedocs.io/en/latest&amp;gt;&lt;/code&gt;&lt;em&gt;. A PDF version of the manual is available &lt;code&gt;here &amp;lt;https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/&amp;gt;&lt;/code&gt;&lt;/em&gt;. And the source code is always available at &lt;code&gt;github.com/pybind/pybind11 &amp;lt;https://github.com/pybind/pybind11&amp;gt;&lt;/code&gt;_.&lt;/p&gt; 
&lt;h2&gt;Core features&lt;/h2&gt; 
&lt;p&gt;pybind11 can map the following core C++ features to Python:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Functions accepting and returning custom data structures per value, reference, or pointer&lt;/li&gt; 
 &lt;li&gt;Instance methods and static methods&lt;/li&gt; 
 &lt;li&gt;Overloaded functions&lt;/li&gt; 
 &lt;li&gt;Instance attributes and static attributes&lt;/li&gt; 
 &lt;li&gt;Arbitrary exception types&lt;/li&gt; 
 &lt;li&gt;Enumerations&lt;/li&gt; 
 &lt;li&gt;Callbacks&lt;/li&gt; 
 &lt;li&gt;Iterators and ranges&lt;/li&gt; 
 &lt;li&gt;Custom operators&lt;/li&gt; 
 &lt;li&gt;Single and multiple inheritance&lt;/li&gt; 
 &lt;li&gt;STL data structures&lt;/li&gt; 
 &lt;li&gt;Smart pointers with reference counting like &lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Internal references with correct reference counting&lt;/li&gt; 
 &lt;li&gt;C++ classes with virtual (and pure virtual) methods can be extended in Python&lt;/li&gt; 
 &lt;li&gt;Integrated NumPy support (NumPy 2 requires pybind11 2.12+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Goodies&lt;/h2&gt; 
&lt;p&gt;In addition to the core functionality, pybind11 provides some extra goodies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CPython 3.8+, PyPy3 7.3.17+, and GraalPy 24.1+ are supported with an implementation-agnostic interface (see older versions for older CPython and PyPy versions).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It is possible to bind C++11 lambda functions with captured variables. The lambda capture data is stored inside the resulting Python function object.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;pybind11 uses C++11 move constructors and move assignment operators whenever possible to efficiently transfer custom data types.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It&#39;s easy to expose the internal storage of custom data types through Pythons&#39; buffer protocols. This is handy e.g.&amp;nbsp;for fast conversion between C++ matrix classes like Eigen and NumPy without expensive copy operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;pybind11 can automatically vectorize functions so that they are transparently applied to all entries of one or more NumPy array arguments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Python&#39;s slice-based access and assignment operations can be supported with just a few lines of code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Everything is contained in just a few header files; there is no need to link against any additional libraries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Binaries are generally smaller by a factor of at least 2 compared to equivalent bindings generated by Boost.Python. A recent pybind11 conversion of PyRosetta, an enormous Boost.Python binding project, &lt;code&gt;reported &amp;lt;https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf&amp;gt;&lt;/code&gt;_ a binary size reduction of &lt;strong&gt;5.4x&lt;/strong&gt; and compile time reduction by &lt;strong&gt;5.8x&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Function signatures are precomputed at compile time (using &lt;code&gt;constexpr&lt;/code&gt;), leading to smaller binaries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With little extra effort, C++ types can be pickled and unpickled similar to regular Python objects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported compilers&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clang/LLVM 3.3 or newer (for Apple Xcode&#39;s clang, this is 5.0.0 or newer)&lt;/li&gt; 
 &lt;li&gt;GCC 4.8 or newer&lt;/li&gt; 
 &lt;li&gt;Microsoft Visual Studio 2022 or newer (2019 probably works, but was dropped in CI)&lt;/li&gt; 
 &lt;li&gt;Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)&lt;/li&gt; 
 &lt;li&gt;Cygwin/GCC (previously tested on 2.5.1)&lt;/li&gt; 
 &lt;li&gt;NVCC (CUDA 11.0 tested in CI)&lt;/li&gt; 
 &lt;li&gt;NVIDIA PGI (20.9 tested in CI)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows, Linux, macOS, and iOS&lt;/li&gt; 
 &lt;li&gt;CPython 3.8+, Pyodide, PyPy, and GraalPy&lt;/li&gt; 
 &lt;li&gt;C++11, C++14, C++17, C++20, and C++23&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This project was created by &lt;code&gt;Wenzel Jakob &amp;lt;http://rgl.epfl.ch/people/wjakob&amp;gt;&lt;/code&gt;_. Significant features and/or improvements to the code were contributed by Jonas Adler, Lori A. Burns, Sylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, Axel Huebl, @hulucc, Yannick Jadoul, Sergey Lyskov, Johan Mabille, Tomasz Miąsko, Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim Schellart, Henry Schreiner, Ivan Smirnov, Dustin Spicuzza, Boris Staletic, Ethan Steinberg, Patrick Stewart, Ivor Wanders, and Xiaofei Wang.&lt;/p&gt; 
&lt;p&gt;We thank Google for a generous financial contribution to the continuous integration infrastructure used by this project.&lt;/p&gt; 
&lt;p&gt;Contributing&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
See the `contributing
guide &amp;lt;https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md&amp;gt;`_
for information on building and contributing to pybind11.

License
~~~~~~~

pybind11 is provided under a BSD-style license that can be found in the
`LICENSE &amp;lt;https://github.com/pybind/pybind11/blob/master/LICENSE&amp;gt;`_
file. By using, distributing, or contributing to this project, you agree
to the terms and conditions of this license.

.. |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest
   :target: http://pybind11.readthedocs.org/en/latest
.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg
   :target: http://pybind11.readthedocs.org/en/stable
.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg
   :target: https://gitter.im/pybind/Lobby
.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg
   :target: https://github.com/pybind/pybind11/actions
.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true
   :target: https://ci.appveyor.com/project/wjakob/pybind11
.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg
   :target: https://pypi.org/project/pybind11/
.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg
   :target: https://github.com/conda-forge/pybind11-feedstock
.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg
   :target: https://repology.org/project/python:pybind11/versions
.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg
   :target: https://pypi.org/project/pybind11/
.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&amp;amp;message=Ask&amp;amp;color=blue&amp;amp;logo=github
   :target: https://github.com/pybind/pybind11/discussions
.. |SPEC 4 — Using and Creating Nightly Wheels| image:: https://img.shields.io/badge/SPEC-4-green?labelColor=%23004811&amp;amp;color=%235CA038
   :target: https://scientific-python.org/specs/spec-0004/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>google/perfetto</title>
      <link>https://github.com/google/perfetto</link>
      <description>&lt;p&gt;Production-grade client-side tracing, profiling, and analysis for complex software systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Perfetto - System profiling, app tracing and trace analysis&lt;/h1&gt; 
&lt;p&gt;Perfetto is an open-source suite of SDKs, daemons and tools which use &lt;strong&gt;tracing&lt;/strong&gt; to help developers understand the behaviour of complex systems and root-cause functional and performance issues on client and embedded systems.&lt;/p&gt; 
&lt;p&gt;It is a production-grade tool that is the default tracing system for the &lt;strong&gt;Android operating system&lt;/strong&gt; and the &lt;strong&gt;Chromium browser&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/google/perfetto/main/docs/images/perfetto-stack.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Core Components&lt;/h2&gt; 
&lt;p&gt;Perfetto is not a single tool, but a collection of components that work together:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-performance tracing daemons:&lt;/strong&gt; For capturing tracing information from many processes on a single machine into a unified trace file.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Low-overhead tracing SDK:&lt;/strong&gt; A C++17 library for direct userspace-to-userspace tracing of timings and state changes in your application.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensive OS-level probes:&lt;/strong&gt; For capturing system-wide context on Android and Linux (e.g. scheduling states, CPU frequencies, memory profiling, callstack sampling).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Browser-based UI:&lt;/strong&gt; A powerful, fully local UI for visualizing and exploring large, multi-GB traces on a timeline. It works in all major browsers, requires no installation, and can open traces from other tools.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL-based analysis library:&lt;/strong&gt; A powerful engine that allows you to programmatically query traces using SQL to automate analysis and extract custom metrics.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why Use Perfetto?&lt;/h2&gt; 
&lt;p&gt;Perfetto was designed to be a versatile and powerful tracing system for a wide range of use cases.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;For Android App &amp;amp; Platform Developers:&lt;/strong&gt; Debug and root-cause functional and performance issues like slow startups, dropped frames (jank), animation glitches, low memory kills, and ANRs. Profile both Java/Kotlin and native C++ memory usage with heap dumps and profiles.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For C/C++ Developers (Linux, macOS, Windows):&lt;/strong&gt; Use the &lt;a href=&quot;https://raw.githubusercontent.com/google/perfetto/main/docs/instrumentation/tracing-sdk.md&quot;&gt;Tracing SDK&lt;/a&gt; to instrument your application with custom trace points to understand its execution flow, find performance bottlenecks, and debug complex behavior. On Linux, you can also perform detailed CPU and native heap profiling.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For Linux Kernel &amp;amp; System Developers:&lt;/strong&gt; Get deep insights into kernel behavior. Perfetto acts as an efficient userspace daemon for &lt;code&gt;ftrace&lt;/code&gt;, allowing you to visualize scheduling, syscalls, interrupts, and custom kernel tracepoints on a timeline.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For Chromium Developers:&lt;/strong&gt; Perfetto is the tracing backend for &lt;code&gt;chrome://tracing&lt;/code&gt;. Use it to debug and root-cause issues in the browser, V8, and Blink.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For Performance Engineers &amp;amp; SREs:&lt;/strong&gt; Analyze and visualize a wide range of profiling and tracing formats, not just Perfetto&#39;s. Use the powerful SQL interface to programmatically analyze traces from tools like &lt;strong&gt;Linux perf&lt;/strong&gt;, &lt;strong&gt;macOS Instruments&lt;/strong&gt;, &lt;strong&gt;Chrome JSON traces&lt;/strong&gt;, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We&#39;ve designed our documentation to guide you to the right information as quickly as possible, whether you&#39;re a newcomer to performance analysis or an experienced developer.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;New to tracing?&lt;/strong&gt; If you&#39;re unfamiliar with concepts like tracing and profiling, start here:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://perfetto.dev/docs/tracing-101&quot;&gt;&lt;strong&gt;What is Tracing?&lt;/strong&gt;&lt;/a&gt; - A gentle introduction to the world of performance analysis.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ready to dive in?&lt;/strong&gt; Our &quot;Getting Started&quot; guide is the main entry point for all users. It will help you find the right tutorials and documentation for your specific needs:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://perfetto.dev/docs/getting-started/start-using-perfetto&quot;&gt;&lt;strong&gt;How do I start using Perfetto?&lt;/strong&gt;&lt;/a&gt; - Find your path based on your role and goals (e.g., Android App Developer, C/C++ Developer, etc.).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Want the full overview?&lt;/strong&gt; For a comprehensive look at what Perfetto is, why it&#39;s useful, and who uses it, see our main documentation page:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://perfetto.dev/docs/&quot;&gt;&lt;strong&gt;Perfetto Documentation Home&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; 
&lt;p&gt;Have questions? Need help?&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/google/perfetto/discussions/categories/q-a&quot;&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; For Q&amp;amp;A and general discussions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/google/perfetto/issues&quot;&gt;GitHub Issues&lt;/a&gt;:&lt;/strong&gt; For bug reports.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://discord.gg/35ShE3A&quot;&gt;Discord&lt;/a&gt;:&lt;/strong&gt; For live chat with the community and developers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We follow &lt;a href=&quot;https://opensource.google/conduct/&quot;&gt;Google&#39;s Open Source Community Guidelines&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/rocksdb</title>
      <link>https://github.com/facebook/rocksdb</link>
      <description>&lt;p&gt;A library that provides an embeddable, persistent key-value store for fast storage.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;RocksDB: A Persistent Key-Value Store for Flash and RAM Storage&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/facebook/rocksdb&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/facebook/rocksdb.svg?style=svg&quot; alt=&quot;CircleCI Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;RocksDB is developed and maintained by Facebook Database Engineering Team. It is built on earlier work on &lt;a href=&quot;https://github.com/google/leveldb&quot;&gt;LevelDB&lt;/a&gt; by Sanjay Ghemawat (&lt;a href=&quot;mailto:sanjay@google.com&quot;&gt;sanjay@google.com&lt;/a&gt;) and Jeff Dean (&lt;a href=&quot;mailto:jeff@google.com&quot;&gt;jeff@google.com&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;This code is a library that forms the core building block for a fast key-value server, especially suited for storing data on flash drives. It has a Log-Structured-Merge-Database (LSM) design with flexible tradeoffs between Write-Amplification-Factor (WAF), Read-Amplification-Factor (RAF) and Space-Amplification-Factor (SAF). It has multi-threaded compactions, making it especially suitable for storing multiple terabytes of data in a single database.&lt;/p&gt; 
&lt;p&gt;Start with example usage here: &lt;a href=&quot;https://github.com/facebook/rocksdb/tree/main/examples&quot;&gt;https://github.com/facebook/rocksdb/tree/main/examples&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/facebook/rocksdb/wiki&quot;&gt;github wiki&lt;/a&gt; for more explanation.&lt;/p&gt; 
&lt;p&gt;The public interface is in &lt;code&gt;include/&lt;/code&gt;. Callers should not include or rely on the details of any other header files in this package. Those internal APIs may be changed without warning.&lt;/p&gt; 
&lt;p&gt;Questions and discussions are welcome on the &lt;a href=&quot;https://www.facebook.com/groups/rocksdb.dev/&quot;&gt;RocksDB Developers Public&lt;/a&gt; Facebook group and &lt;a href=&quot;https://groups.google.com/g/rocksdb&quot;&gt;email list&lt;/a&gt; on Google Groups.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;RocksDB is dual-licensed under both the GPLv2 (found in the COPYING file in the root directory) and Apache 2.0 License (found in the LICENSE.Apache file in the root directory). You may select, at your option, one of the above-listed licenses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aseprite/aseprite</title>
      <link>https://github.com/aseprite/aseprite</link>
      <description>&lt;p&gt;Animated sprite editor &amp; pixel art tool (Windows, macOS, Linux)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aseprite&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/aseprite/aseprite/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/aseprite/aseprite/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/engage/aseprite/&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widget/aseprite/aseprite/svg-badge.svg?sanitize=true&quot; alt=&quot;Translation Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://community.aseprite.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/discourse-community-brightgreen.svg?style=flat&quot; alt=&quot;Discourse Community&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/Yb2CeX8&quot;&gt;&lt;img src=&quot;https://discordapp.com/api/guilds/324979738533822464/embed.png&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Aseprite&lt;/strong&gt; is a program to create animated sprites. Its main features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sprites are composed of &lt;a href=&quot;https://www.aseprite.org/docs/timeline/&quot;&gt;layers &amp;amp; frames&lt;/a&gt; as separated concepts.&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://www.aseprite.org/docs/color-profile/&quot;&gt;color profiles&lt;/a&gt; and different &lt;a href=&quot;https://www.aseprite.org/docs/color-mode/&quot;&gt;color modes&lt;/a&gt;: RGBA, Indexed (palettes up to 256 colors), Grayscale.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/docs/animation/&quot;&gt;Animation facilities&lt;/a&gt;, with real-time &lt;a href=&quot;https://www.aseprite.org/docs/preview-window/&quot;&gt;preview&lt;/a&gt; and &lt;a href=&quot;https://www.aseprite.org/docs/onion-skinning/&quot;&gt;onion skinning&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/docs/exporting/&quot;&gt;Export/import&lt;/a&gt; animations to/from &lt;a href=&quot;https://www.aseprite.org/docs/sprite-sheet/&quot;&gt;sprite sheets&lt;/a&gt;, GIF files, or sequence of PNG files (and FLC, FLI, JPG, BMP, PCX, TGA).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/docs/workspace/#drag-and-drop-tabs&quot;&gt;Multiple editors&lt;/a&gt; support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://imgur.com/x3OKkGj&quot;&gt;Layer groups&lt;/a&gt; for organizing your work, and &lt;a href=&quot;https://twitter.com/aseprite/status/806889204601016325&quot;&gt;reference layers&lt;/a&gt; for rotoscoping.&lt;/li&gt; 
 &lt;li&gt;Pixel-art specific tools like &lt;a href=&quot;https://imgur.com/0fdlNau&quot;&gt;Pixel Perfect freehand mode&lt;/a&gt;, &lt;a href=&quot;https://www.aseprite.org/docs/shading/&quot;&gt;Shading ink&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aseprite/status/1196883990080344067&quot;&gt;Custom Brushes&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aseprite/status/1126548469865431041&quot;&gt;Outlines&lt;/a&gt;, &lt;a href=&quot;https://imgur.com/1yZKUcs&quot;&gt;Wide Pixels&lt;/a&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Other special drawing tools like &lt;a href=&quot;https://twitter.com/aseprite/status/1253770784708886533&quot;&gt;Pressure sensitivity&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aseprite/status/659709226747625472&quot;&gt;Symmetry Tool&lt;/a&gt;, &lt;a href=&quot;https://imgur.com/7JZQ81o&quot;&gt;Stroke and Fill&lt;/a&gt; selection, &lt;a href=&quot;https://twitter.com/aseprite/status/1126549217856622597&quot;&gt;Gradients&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/G_JeWBaxQIg&quot;&gt;Tiled mode&lt;/a&gt; useful to draw patterns and textures.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/aseprite/status/1170007034651172866&quot;&gt;Transform multiple frames/layers&lt;/a&gt; at the same time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/docs/scripting/&quot;&gt;Lua scripting capabilities&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/docs/cli/&quot;&gt;CLI - Command Line Interface&lt;/a&gt; to automatize tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aseprite.org/quickref/&quot;&gt;Quick Reference / Cheat Sheet&lt;/a&gt; keyboard shortcuts (&lt;a href=&quot;https://imgur.com/rvAUxyF&quot;&gt;customizable keys&lt;/a&gt; and &lt;a href=&quot;https://imgur.com/oNqFqVb&quot;&gt;mouse wheel&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/aseprite/status/1202641475256881153&quot;&gt;Reopen closed files&lt;/a&gt; and &lt;a href=&quot;https://www.aseprite.org/docs/data-recovery/&quot;&gt;recover data&lt;/a&gt; in case of crash.&lt;/li&gt; 
 &lt;li&gt;Undo/Redo for every operation and support for &lt;a href=&quot;https://imgur.com/9I42fZK&quot;&gt;non-linear undo&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/aseprite/status/1124442198651678720&quot;&gt;More features &amp;amp; tips&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Issues&lt;/h2&gt; 
&lt;p&gt;There is a list of &lt;a href=&quot;https://github.com/aseprite/aseprite/issues&quot;&gt;Known Issues&lt;/a&gt; (things to be fixed or that aren&#39;t yet implemented).&lt;/p&gt; 
&lt;p&gt;If you found a bug or have a new idea/feature for the program, &lt;a href=&quot;https://github.com/aseprite/aseprite/issues/new&quot;&gt;you can report them&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;You can ask for help in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.aseprite.org/&quot;&gt;Aseprite Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/Yb2CeX8&quot;&gt;Aseprite Discord Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Official support: &lt;a href=&quot;mailto:support@aseprite.org&quot;&gt;support@aseprite.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social networks and community-driven places: &lt;a href=&quot;https://twitter.com/aseprite/&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://facebook.com/aseprite/&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/user/aseprite&quot;&gt;YouTube&lt;/a&gt;, &lt;a href=&quot;https://www.instagram.com/aseprite/&quot;&gt;Instagram&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Aseprite was originally created by &lt;a href=&quot;https://davidcapello.com/&quot;&gt;David Capello&lt;/a&gt; and is now being developed and maintained by &lt;a href=&quot;https://igara.com/&quot;&gt;Igara Studio&lt;/a&gt; and contributors.&lt;/p&gt; 
&lt;p&gt;Check the &lt;a href=&quot;https://raw.githubusercontent.com/aseprite/aseprite/main/AUTHORS.md&quot;&gt;AUTHORS&lt;/a&gt; file for details about the active team of developers working on Aseprite.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This program is distributed under three different licenses:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Source code and official releases/binaries are distributed under our &lt;a href=&quot;https://raw.githubusercontent.com/aseprite/aseprite/main/EULA.txt&quot;&gt;End-User License Agreement for Aseprite (EULA)&lt;/a&gt;. Please check that there are &lt;a href=&quot;https://raw.githubusercontent.com/aseprite/aseprite/main/src/README.md&quot;&gt;modules/libraries in the source code&lt;/a&gt; that are distributed under the MIT license (e.g. &lt;a href=&quot;https://github.com/aseprite/laf&quot;&gt;laf&lt;/a&gt;, &lt;a href=&quot;https://github.com/aseprite/clip&quot;&gt;clip&lt;/a&gt;, &lt;a href=&quot;https://github.com/aseprite/undo&quot;&gt;undo&lt;/a&gt;, &lt;a href=&quot;https://github.com/aseprite/observable&quot;&gt;observable&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/aseprite/aseprite/main/src/ui&quot;&gt;ui&lt;/a&gt;, etc.).&lt;/li&gt; 
 &lt;li&gt;You can request a special &lt;a href=&quot;https://www.aseprite.org/faq/#is-there-an-educational-license&quot;&gt;educational license&lt;/a&gt; in case you are a teacher in an educational institution and want to use Aseprite in your classroom (in-situ).&lt;/li&gt; 
 &lt;li&gt;Steam releases are distributed under the terms of the &lt;a href=&quot;http://store.steampowered.com/subscriber_agreement/&quot;&gt;Steam Subscriber Agreement&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can get more information about Aseprite license in the &lt;a href=&quot;https://www.aseprite.org/faq/#licensing-&amp;amp;-commercial&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ossrs/srs</title>
      <link>https://github.com/ossrs/srs</link>
      <description>&lt;p&gt;SRS is a simple, high-efficiency, real-time media server supporting RTMP, WebRTC, HLS, HTTP-FLV, HTTP-TS, SRT, MPEG-DASH, and GB28181.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SRS(Simple Realtime Server)&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;http://ossrs.net/gif/v1/sls.gif?site=github.com&amp;amp;path=/srs/develop&quot; alt=&quot;&quot; /&gt; &lt;a href=&quot;https://github.com/ossrs/srs/actions?query=workflow%3ACodeQL+branch%3Adevelop&quot;&gt;&lt;img src=&quot;https://github.com/ossrs/srs/actions/workflows/codeql-analysis.yml/badge.svg?branch=develop&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ossrs/srs/actions/workflows/release.yml?query=workflow%3ARelease&quot;&gt;&lt;img src=&quot;https://github.com/ossrs/srs/actions/workflows/release.yml/badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/srs_server&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/srs_server?style=social&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/@srs_server&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SRS-YouTube-red&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/yZ4BnPmHAd&quot;&gt;&lt;img src=&quot;https://badgen.net/discord/members/yZ4BnPmHAd&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/srs-server&quot;&gt;&lt;img src=&quot;https://opencollective.com/srs-server/tiers/badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/ossrs/srs/tags&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/ossrs/srs&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;SRS/7.0 (&lt;a href=&quot;https://ossrs.io/lts/en-us/product#release-70&quot;&gt;Kai&lt;/a&gt;) is a simple, high-efficiency, and real-time video server, supporting RTMP/WebRTC/HLS/HTTP-FLV/SRT/MPEG-DASH/GB28181, Linux/Windows/macOS, X86_64/ARMv7/AARCH64/M1/RISCV/LOONGARCH/MIPS, and essential &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Features.md#features&quot;&gt;features&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://ossrs.net/wiki/images/SRS-SingleNode-4.0-hd.png&quot;&gt;&lt;img src=&quot;https://ossrs.net/wiki/images/SRS-SingleNode-4.0-sd.png?v=114&quot; alt=&quot;SRS Overview&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: For more details on the single-node architecture for SRS, please visit the following &lt;a href=&quot;https://www.figma.com/file/333POxVznQ8Wz1Rxlppn36/SRS-4.0-Server-Arch&quot;&gt;link&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;SRS is licenced under &lt;a href=&quot;https://github.com/ossrs/srs/raw/develop/LICENSE&quot;&gt;MIT&lt;/a&gt;, and some third-party libraries are distributed under their &lt;a href=&quot;https://ossrs.io/lts/en-us/license&quot;&gt;licenses&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a name=&quot;product&quot;&gt;&lt;/a&gt; &lt;a name=&quot;usage-docker&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Please check the Getting Started guide in &lt;a href=&quot;https://ossrs.io/lts/en-us/docs/v5/doc/getting-started&quot;&gt;English&lt;/a&gt; or &lt;a href=&quot;https://ossrs.net/lts/zh-cn/docs/v5/doc/getting-started&quot;&gt;Chinese&lt;/a&gt;. We highly recommend using SRS with docker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -it -p 1935:1935 -p 1985:1985 -p 8080:8080 \
    -p 8000:8000/udp -p 10080:10080/udp ossrs/srs:5
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Tips: If you&#39;re in China, use this image &lt;code&gt;registry.cn-hangzhou.aliyuncs.com/ossrs/srs:5&lt;/code&gt; for faster speed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; to verify, and then stream using the following &lt;a href=&quot;https://ffmpeg.org/download.html&quot;&gt;FFmpeg&lt;/a&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg -re -i ./doc/source.flv -c copy -f flv -y rtmp://localhost/live/livestream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, stream by &lt;a href=&quot;https://obsproject.com/download&quot;&gt;OBS&lt;/a&gt; using the following configuration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;Custom&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;rtmp://localhost/live&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stream Key: &lt;code&gt;livestream&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Play the following streams using media players:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To play an RTMP stream with URL &lt;code&gt;rtmp://localhost/live/livestream&lt;/code&gt; on &lt;a href=&quot;https://www.videolan.org/&quot;&gt;VLC player&lt;/a&gt;, open the player, go to Media &amp;gt; Open Network Stream, enter the URL and click Play.&lt;/li&gt; 
 &lt;li&gt;You can play HTTP-FLV stream URL &lt;a href=&quot;http://localhost:8080/players/srs_player.html?autostart=true&amp;amp;stream=livestream.flv&quot;&gt;http://localhost:8080/live/livestream.flv&lt;/a&gt; on a webpage using the srs-player, an HTML5-based player.&lt;/li&gt; 
 &lt;li&gt;Use srs-player for playing HLS stream with URL &lt;a href=&quot;http://localhost:8080/players/srs_player.html?autostart=true&amp;amp;stream=livestream.m3u8&quot;&gt;http://localhost:8080/live/livestream.m3u8&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to use WebRTC, convert RTMP to WebRTC, or convert WebRTC to RTMP, please check out the wiki documentation in either &lt;a href=&quot;https://ossrs.io/lts/en-us/docs/v5/doc/getting-started#webrtc&quot;&gt;English&lt;/a&gt; or &lt;a href=&quot;https://ossrs.net/lts/zh-cn/docs/v5/doc/getting-started#webrtc&quot;&gt;Chinese&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To learn more about RTMP, HLS, HTTP-FLV, SRT, MPEG-DASH, WebRTC protocols, clustering, HTTP API, DVR, and transcoding, please check the documents in &lt;a href=&quot;https://ossrs.io&quot;&gt;English&lt;/a&gt; or &lt;a href=&quot;https://ossrs.net&quot;&gt;Chinese&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to use an IDE, VSCode is recommanded. VSCode supports macOS, Linux, and Windows platforms. The settings are ready. All you need to do is open the folder with VSCode and enjoy the efficiency brought by the IDE. See &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/.vscode/README.md&quot;&gt;VSCode README&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;Would you like additional assistance from us? By becoming a sponsor or backer of SRS, we can provide you with the support you need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Backer: $5 per month, online text chat support through Discord.&lt;/li&gt; 
 &lt;li&gt;Sponsor: $100 per month, online text chat plus online meeting support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please visit &lt;a href=&quot;https://opencollective.com/srs-server&quot;&gt;OpenCollective&lt;/a&gt; to become a backer or sponsor, and send us a direct message on &lt;a href=&quot;https://discord.gg/yZ4BnPmHAd&quot;&gt;Discord&lt;/a&gt;. We are currently providing support to the developers listed below:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/srs-server&quot;&gt;&lt;img src=&quot;https://opencollective.com/srs-server/backers.svg?width=800&amp;amp;button=false&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;At SRS, our goal is to create a free, open-source community that helps developers all over the world build high-quality streaming and RTC platforms for their businesses.&lt;/p&gt; 
&lt;p&gt;&lt;a name=&quot;authors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/AUTHORS.md#authors&quot;&gt;authors&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/AUTHORS.md#toc&quot;&gt;TOC(Technical Oversight Committee)&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/AUTHORS.md#contributors&quot;&gt;contributors&lt;/a&gt; are listed &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/AUTHORS.md&quot;&gt;here&lt;/a&gt;. The TOC members who made significant contributions and maintained parts of SRS are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/winlinvip&quot;&gt;Winlin&lt;/a&gt;: Founder of the project, focusing on ST and Issues/PR. Responsible for architecture and maintenance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wenjiegit&quot;&gt;ZhaoWenjie&lt;/a&gt;: One of the earliest contributors, focusing on HDS and Windows. Has expertise in client technology.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/runner365&quot;&gt;ShiWei&lt;/a&gt;: Specializes in SRT and H.265, maintaining SRT and FLV patches for FFmpeg. An expert in codecs and FFmpeg.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xiaozhihong&quot;&gt;XiaoZhihong&lt;/a&gt;: Concentrates on WebRTC/QUIC and SRT, with expertise in network QoS. Contributed to ARM on ST and was the original contributor for WebRTC.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bepartofyou&quot;&gt;WuPengqiang&lt;/a&gt;: Focused on H.265, initially contributed to the FFmpeg module in SRS for transcoding AAC with OPUS for WebRTC.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xialixin&quot;&gt;XiaLixin&lt;/a&gt;: Specializes in GB28181, with expertise in live streaming and WebRTC.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lipeng19811218&quot;&gt;LiPeng&lt;/a&gt;: Concentrates on WebRTC and contributes to memory management and smart pointers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chen-guanghua&quot;&gt;ChenGuanghua&lt;/a&gt;: Focused on WebRTC/QoS and introduced the Asan toolchain to SRS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/duiniuluantanqin&quot;&gt;ChenHaibo&lt;/a&gt;: Specializes in GB28181 and HTTP API, contributing to patches for FFmpeg with WHIP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chundonglinlin&quot;&gt;ZhangJunqin&lt;/a&gt;: Focused on H.265, Prometheus Exporter, and API module.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A huge &lt;code&gt;THANK YOU&lt;/code&gt; goes out to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All the &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/AUTHORS.md#contributors&quot;&gt;contributors&lt;/a&gt; of SRS.&lt;/li&gt; 
 &lt;li&gt;All the friends of SRS who gave &lt;a href=&quot;https://ossrs.net/lts/zh-cn/product&quot;&gt;big support&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/users/genes&quot;&gt;Genes&lt;/a&gt;, &lt;a href=&quot;http://sourceforge.net/users/mabbott&quot;&gt;Mabbott&lt;/a&gt;, and &lt;a href=&quot;https://github.com/michaeltalyansky&quot;&gt;Michael Talyanksy&lt;/a&gt; for making and sharing &lt;a href=&quot;https://github.com/ossrs/state-threads/tree/srs&quot;&gt;State Threads&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We&#39;re really thankful to everyone in the community for helping us find bugs and improve the project. To stay in touch and keep helping our community, please check out this &lt;a href=&quot;https://github.com/ossrs/srs/contribute&quot;&gt;guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;SRS is licenced under &lt;a href=&quot;https://github.com/ossrs/srs/raw/develop/LICENSE&quot;&gt;MIT&lt;/a&gt;, and some third-party libraries are distributed under their &lt;a href=&quot;https://ossrs.io/lts/en-us/license&quot;&gt;licenses&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;2025-08-12, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-b0&quot;&gt;Release v6.0-b0&lt;/a&gt;, v6.0-b0, 6.0 beta0, v6.0.172, 170417 lines.&lt;/li&gt; 
 &lt;li&gt;2025-05-03, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-a2&quot;&gt;Release v6.0-a2&lt;/a&gt;, v6.0-a2, 6.0 alpha2, v6.0.165, 169712 lines.&lt;/li&gt; 
 &lt;li&gt;2024-09-01, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-a1&quot;&gt;Release v6.0-a1&lt;/a&gt;, v6.0-a1, 6.0 alpha1, v6.0.155, 169636 lines.&lt;/li&gt; 
 &lt;li&gt;2024-07-27, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-a0&quot;&gt;Release v6.0-a0&lt;/a&gt;, v6.0-a0, 6.0 alpha0, v6.0.145, 169259 lines.&lt;/li&gt; 
 &lt;li&gt;2024-07-04, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d6&quot;&gt;Release v6.0-d6&lt;/a&gt;, v6.0-d6, 6.0 dev6, v6.0.134, 168904 lines.&lt;/li&gt; 
 &lt;li&gt;2024-06-15, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d5&quot;&gt;Release v6.0-d5&lt;/a&gt;, v6.0-d5, 6.0 dev5, v6.0.129, 168454 lines.&lt;/li&gt; 
 &lt;li&gt;2024-02-15, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d4&quot;&gt;Release v6.0-d4&lt;/a&gt;, v6.0-d4, 6.0 dev4, v6.0.113, 167695 lines.&lt;/li&gt; 
 &lt;li&gt;2023-11-19, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d3&quot;&gt;Release v6.0-d3&lt;/a&gt;, v6.0-d3, 6.0 dev3, v6.0.101, 167560 lines.&lt;/li&gt; 
 &lt;li&gt;2023-09-28, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d2&quot;&gt;Release v6.0-d2&lt;/a&gt;, v6.0-d2, 6.0 dev2, v6.0.85, 167509 lines.&lt;/li&gt; 
 &lt;li&gt;2023-08-31, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d1&quot;&gt;Release v6.0-d1&lt;/a&gt;, v6.0-d1, 6.0 dev1, v6.0.72, 167135 lines.&lt;/li&gt; 
 &lt;li&gt;2023-07-09, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v6.0-d0&quot;&gt;Release v6.0-d0&lt;/a&gt;, v6.0-d0, 6.0 dev0, v6.0.59, 166739 lines.&lt;/li&gt; 
 &lt;li&gt;2024-06-15, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-r3&quot;&gt;Release v5.0-r3&lt;/a&gt;, v5.0-r3, 5.0 release3, v5.0.213, 163585 lines.&lt;/li&gt; 
 &lt;li&gt;2024-04-03, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-r2&quot;&gt;Release v5.0-r2&lt;/a&gt;, v5.0-r2, 5.0 release2, v5.0.210, 163515 lines.&lt;/li&gt; 
 &lt;li&gt;2024-02-15, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-r1&quot;&gt;Release v5.0-r1&lt;/a&gt;, v5.0-r1, 5.0 release1, v5.0.208, 163441 lines.&lt;/li&gt; 
 &lt;li&gt;2023-12-30, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-r0&quot;&gt;Release v5.0-r0&lt;/a&gt;, v5.0-r0, 5.0 release0, v5.0.205, 163363 lines.&lt;/li&gt; 
 &lt;li&gt;2023-11-19, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b7&quot;&gt;Release v5.0-b7&lt;/a&gt;, v5.0-b7, 5.0 beta7, v5.0.200, 163305 lines.&lt;/li&gt; 
 &lt;li&gt;2023-10-25, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b6&quot;&gt;Release v5.0-b6&lt;/a&gt;, v5.0-b6, 5.0 beta6, v5.0.195, 163303 lines.&lt;/li&gt; 
 &lt;li&gt;2023-09-28, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b5&quot;&gt;Release v5.0-b5&lt;/a&gt;, v5.0-b5, 5.0 beta5, v5.0.185, 163254 lines.&lt;/li&gt; 
 &lt;li&gt;2023-08-31, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b4&quot;&gt;Release v5.0-b4&lt;/a&gt;, v5.0-b4, 5.0 beta4, v5.0.176, 162919 lines.&lt;/li&gt; 
 &lt;li&gt;2023-08-02, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b3&quot;&gt;Release v5.0-b3&lt;/a&gt;, v5.0-b3, 5.0 beta3, v5.0.170, 162704 lines.&lt;/li&gt; 
 &lt;li&gt;2023-07-09, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b2&quot;&gt;Release v5.0-b2&lt;/a&gt;, v5.0-b2, 5.0 beta2, v5.0.166, 162520 lines.&lt;/li&gt; 
 &lt;li&gt;2023-06-11, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b1&quot;&gt;Release v5.0-b1&lt;/a&gt;, v5.0-b1, 5.0 beta1, v5.0.157, 162494 lines.&lt;/li&gt; 
 &lt;li&gt;2023-05-14, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-b0&quot;&gt;Release v5.0-b0&lt;/a&gt;, v5.0-b0, 5.0 beta0, v5.0.155, 162600 lines.&lt;/li&gt; 
 &lt;li&gt;2023-03-23, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a5&quot;&gt;Release v5.0-a5&lt;/a&gt;, v5.0-a5, 5.0 alpha5, v5.0.148, 162066 lines.&lt;/li&gt; 
 &lt;li&gt;2023-02-12, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a4&quot;&gt;Release v5.0-a4&lt;/a&gt;, v5.0-a4, 5.0 alpha4, v5.0.141, 161897 lines.&lt;/li&gt; 
 &lt;li&gt;2023-01-02, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a3&quot;&gt;Release v5.0-a3&lt;/a&gt;, v5.0-a3, 5.0 alpha3, v5.0.128, 161327 lines.&lt;/li&gt; 
 &lt;li&gt;2022-12-18, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a2&quot;&gt;Release v5.0-a2&lt;/a&gt;, v5.0-a2, 5.0 alpha2, v5.0.112, 161233 lines.&lt;/li&gt; 
 &lt;li&gt;2022-12-01, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a1&quot;&gt;Release v5.0-a1&lt;/a&gt;, v5.0-a1, 5.0 alpha1, v5.0.100, 160817 lines.&lt;/li&gt; 
 &lt;li&gt;2022-11-25, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v5.0-a0&quot;&gt;Release v5.0-a0&lt;/a&gt;, v5.0-a0, 5.0 alpha0, v5.0.98, 159813 lines.&lt;/li&gt; 
 &lt;li&gt;2022-11-22, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v4.0-r4&quot;&gt;Release v4.0-r4&lt;/a&gt;, v4.0-r4, 4.0 release4, v4.0.268, 145482 lines.&lt;/li&gt; 
 &lt;li&gt;2022-09-16, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v4.0-r3&quot;&gt;Release v4.0-r3&lt;/a&gt;, v4.0-r3, 4.0 release3, v4.0.265, 145328 lines.&lt;/li&gt; 
 &lt;li&gt;2022-08-24, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v4.0-r2&quot;&gt;Release v4.0-r2&lt;/a&gt;, v4.0-r2, 4.0 release2, v4.0.257, 144890 lines.&lt;/li&gt; 
 &lt;li&gt;2022-06-29, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v4.0-r1&quot;&gt;Release v4.0-r1&lt;/a&gt;, v4.0-r1, 4.0 release1, v4.0.253, 144680 lines.&lt;/li&gt; 
 &lt;li&gt;2022-06-11, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v4.0-r0&quot;&gt;Release v4.0-r0&lt;/a&gt;, v4.0-r0, 4.0 release0, v4.0.252, 144680 lines.&lt;/li&gt; 
 &lt;li&gt;2020-06-27, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v3.0-r0&quot;&gt;Release v3.0-r0&lt;/a&gt;, 3.0 release0, 3.0.141, 122674 lines.&lt;/li&gt; 
 &lt;li&gt;2020-02-02, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v3.0-b0&quot;&gt;Release v3.0-b0&lt;/a&gt;, 3.0 beta0, 3.0.112, 121709 lines.&lt;/li&gt; 
 &lt;li&gt;2019-10-04, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v3.0-a0&quot;&gt;Release v3.0-a0&lt;/a&gt;, 3.0 alpha0, 3.0.56, 107946 lines.&lt;/li&gt; 
 &lt;li&gt;2017-03-03, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v2.0-r0&quot;&gt;Release v2.0-r0&lt;/a&gt;, 2.0 release0, 2.0.234, 86373 lines.&lt;/li&gt; 
 &lt;li&gt;2016-08-06, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v2.0-b0&quot;&gt;Release v2.0-b0&lt;/a&gt;, 2.0 beta0, 2.0.210, 89704 lines.&lt;/li&gt; 
 &lt;li&gt;2015-08-23, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v2.0-a0&quot;&gt;Release v2.0-a0&lt;/a&gt;, 2.0 alpha0, 2.0.185, 89022 lines.&lt;/li&gt; 
 &lt;li&gt;2014-12-05, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v1.0-r0&quot;&gt;Release v1.0-r0&lt;/a&gt;, all bug fixed, 1.0.10, 59391 lines.&lt;/li&gt; 
 &lt;li&gt;2014-10-09, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v0.9.8&quot;&gt;Release v0.9.8&lt;/a&gt;, all bug fixed, 1.0.0, 59316 lines.&lt;/li&gt; 
 &lt;li&gt;2014-04-07, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v0.9.1&quot;&gt;Release v0.9.1&lt;/a&gt;, live streaming. 30000 lines.&lt;/li&gt; 
 &lt;li&gt;2013-10-23, &lt;a href=&quot;https://github.com/ossrs/srs/releases/tag/v0.1.0&quot;&gt;Release v0.1.0&lt;/a&gt;, rtmp. 8287 lines.&lt;/li&gt; 
 &lt;li&gt;2013-10-17, Created.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Features.md#features&quot;&gt;FEATURES&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a name=&quot;history&quot;&gt;&lt;/a&gt; &lt;a name=&quot;change-logs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/CHANGELOG.md#changelog&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/PERFORMANCE.md#performance&quot;&gt;PERFORMANCE&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Architecture.md#architecture&quot;&gt;ARCHITECTURE&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Ports&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Resources.md#ports&quot;&gt;PORTS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;APIs&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Resources.md#apis&quot;&gt;APIS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Mirrors&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Resources.md#mirrors&quot;&gt;MIRRORS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dockers&lt;/h2&gt; 
&lt;p&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/ossrs/srs/develop/trunk/doc/Dockers.md&quot;&gt;DOCKERS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Beijing, 2013.10&lt;br /&gt; Winlin&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HKUST-Aerial-Robotics/VINS-Fusion</title>
      <link>https://github.com/HKUST-Aerial-Robotics/VINS-Fusion</link>
      <description>&lt;p&gt;An optimization-based multi-sensor state estimator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VINS-Fusion&lt;/h1&gt; 
&lt;h2&gt;An optimization-based multi-sensor state estimator&lt;/h2&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/vins_logo.png&quot; width=&quot;55%&quot; height=&quot;55%&quot; div align=&quot;left&quot; /&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/kitti.png&quot; width=&quot;34%&quot; height=&quot;34%&quot; div align=&quot;center&quot; /&gt; 
&lt;p&gt;VINS-Fusion is an optimization-based multi-sensor state estimator, which achieves accurate self-localization for autonomous applications (drones, cars, and AR/VR). VINS-Fusion is an extension of &lt;a href=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Mono&quot;&gt;VINS-Mono&lt;/a&gt;, which supports multiple visual-inertial sensor types (mono camera + IMU, stereo cameras + IMU, even stereo cameras only). We also show a toy example of fusing VINS with GPS. &lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;multiple sensors support (stereo cameras / mono camera+IMU / stereo cameras+IMU)&lt;/li&gt; 
 &lt;li&gt;online spatial calibration (transformation between camera and IMU)&lt;/li&gt; 
 &lt;li&gt;online temporal calibration (time offset between camera and IMU)&lt;/li&gt; 
 &lt;li&gt;visual loop closure&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/kitti_rank.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt; 
&lt;p&gt;We are the &lt;strong&gt;top&lt;/strong&gt; open-sourced stereo algorithm on &lt;a href=&quot;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&quot;&gt;KITTI Odometry Benchmark&lt;/a&gt; (12.Jan.2019).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&quot;http://www.qintonguav.com&quot;&gt;Tong Qin&lt;/a&gt;, Shaozu Cao, Jie Pan, &lt;a href=&quot;https://peiliangli.github.io/&quot;&gt;Peiliang Li&lt;/a&gt;, and &lt;a href=&quot;http://www.ece.ust.hk/ece.php/profile/facultydetail/eeshaojie&quot;&gt;Shaojie Shen&lt;/a&gt; from the &lt;a href=&quot;http://uav.ust.hk/&quot;&gt;Aerial Robotics Group&lt;/a&gt;, &lt;a href=&quot;https://www.ust.hk/&quot;&gt;HKUST&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Videos:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/embed/1qye82aW7nI&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/1qye82aW7nI/0.jpg&quot; alt=&quot;VINS&quot; width=&quot;320&quot; height=&quot;240&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Related Paper:&lt;/strong&gt; (paper is not exactly same with code)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Online Temporal Calibration for Monocular Visual-Inertial Systems&lt;/strong&gt;, Tong Qin, Shaojie Shen, IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS, 2018), &lt;strong&gt;best student paper award&lt;/strong&gt; &lt;a href=&quot;https://ieeexplore.ieee.org/abstract/document/8593603&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;VINS-Mono: A Robust and Versatile Monocular Visual-Inertial State Estimator&lt;/strong&gt;, Tong Qin, Peiliang Li, Shaojie Shen, IEEE Transactions on Robotics &lt;a href=&quot;https://ieeexplore.ieee.org/document/8421746/?arnumber=8421746&amp;amp;source=authoralert&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;If you use VINS-Fusion for your academic research, please cite our related papers. &lt;a href=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/paper_bib.txt&quot;&gt;bib&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;1. Prerequisites&lt;/h2&gt; 
&lt;h3&gt;1.1 &lt;strong&gt;Ubuntu&lt;/strong&gt; and &lt;strong&gt;ROS&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Ubuntu 64-bit 16.04 or 18.04. ROS Kinetic or Melodic. &lt;a href=&quot;http://wiki.ros.org/ROS/Installation&quot;&gt;ROS Installation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;1.2. &lt;strong&gt;Ceres Solver&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Follow &lt;a href=&quot;http://ceres-solver.org/installation.html&quot;&gt;Ceres Installation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;2. Build VINS-Fusion&lt;/h2&gt; 
&lt;p&gt;Clone the repository and catkin_make:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    cd ~/catkin_ws/src
    git clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git
    cd ../
    catkin_make
    source ~/catkin_ws/devel/setup.bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(if you fail in this step, try to find another computer with clean system or reinstall Ubuntu and ROS)&lt;/p&gt; 
&lt;h2&gt;3. EuRoC Example&lt;/h2&gt; 
&lt;p&gt;Download &lt;a href=&quot;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&quot;&gt;EuRoC MAV Dataset&lt;/a&gt; to YOUR_DATASET_FOLDER. Take MH_01 for example, you can run VINS-Fusion with three sensor types (monocular camera + IMU, stereo cameras + IMU and stereo cameras). Open four terminals, run vins odometry, visual loop closure(optional), rviz and play the bag file respectively. Green path is VIO odometry; red path is odometry under visual loop closure.&lt;/p&gt; 
&lt;h3&gt;3.1 Monocualr camera + IMU&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml 
    (optional) rosrun loop_fusion loop_fusion_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml 
    rosbag play YOUR_DATASET_FOLDER/MH_01_easy.bag
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3.2 Stereo cameras + IMU&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_stereo_imu_config.yaml 
    (optional) rosrun loop_fusion loop_fusion_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_stereo_imu_config.yaml 
    rosbag play YOUR_DATASET_FOLDER/MH_01_easy.bag
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3.3 Stereo cameras&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_stereo_config.yaml 
    (optional) rosrun loop_fusion loop_fusion_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_stereo_config.yaml 
    rosbag play YOUR_DATASET_FOLDER/MH_01_easy.bag
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/euroc.gif&quot; width=&quot;430&quot; height=&quot;240&quot; /&gt; 
&lt;h2&gt;4. KITTI Example&lt;/h2&gt; 
&lt;h3&gt;4.1 KITTI Odometry (Stereo)&lt;/h3&gt; 
&lt;p&gt;Download &lt;a href=&quot;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&quot;&gt;KITTI Odometry dataset&lt;/a&gt; to YOUR_DATASET_FOLDER. Take sequences 00 for example, Open two terminals, run vins and rviz respectively. (We evaluated odometry on KITTI benchmark without loop closure funtion)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    (optional) rosrun loop_fusion loop_fusion_node ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml
    rosrun vins kitti_odom_test ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml YOUR_DATASET_FOLDER/sequences/00/ 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4.2 KITTI GPS Fusion (Stereo + GPS)&lt;/h3&gt; 
&lt;p&gt;Download &lt;a href=&quot;http://www.cvlibs.net/datasets/kitti/raw_data.php&quot;&gt;KITTI raw dataset&lt;/a&gt; to YOUR_DATASET_FOLDER. Take &lt;a href=&quot;https://s3.eu-central-1.amazonaws.com/avg-kitti/raw_data/2011_10_03_drive_0027/2011_10_03_drive_0027_sync.zip&quot;&gt;2011_10_03_drive_0027_synced&lt;/a&gt; for example. Open three terminals, run vins, global fusion and rviz respectively. Green path is VIO odometry; blue path is odometry under GPS global fusion.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    rosrun vins kitti_gps_test ~/catkin_ws/src/VINS-Fusion/config/kitti_raw/kitti_10_03_config.yaml YOUR_DATASET_FOLDER/2011_10_03_drive_0027_sync/ 
    rosrun global_fusion global_fusion_node
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/kitti.gif&quot; width=&quot;430&quot; height=&quot;240&quot; /&gt; 
&lt;h2&gt;5. VINS-Fusion on car demonstration&lt;/h2&gt; 
&lt;p&gt;Download &lt;a href=&quot;https://drive.google.com/open?id=10t9H1u8pMGDOI6Q2w2uezEq5Ib-Z8tLz&quot;&gt;car bag&lt;/a&gt; to YOUR_DATASET_FOLDER. Open four terminals, run vins odometry, visual loop closure(optional), rviz and play the bag file respectively. Green path is VIO odometry; red path is odometry under visual loop closure.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    roslaunch vins vins_rviz.launch
    rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/vi_car/vi_car.yaml 
    (optional) rosrun loop_fusion loop_fusion_node ~/catkin_ws/src/VINS-Fusion/config/vi_car/vi_car.yaml 
    rosbag play YOUR_DATASET_FOLDER/car.bag
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion/raw/master/support_files/image/car_gif.gif&quot; width=&quot;430&quot; height=&quot;240&quot; /&gt; 
&lt;h2&gt;6. Run with your devices&lt;/h2&gt; 
&lt;p&gt;VIO is not only a software algorithm, it heavily relies on hardware quality. For beginners, we recommend you to run VIO with professional equipment, which contains global shutter cameras and hardware synchronization.&lt;/p&gt; 
&lt;h3&gt;6.1 Configuration file&lt;/h3&gt; 
&lt;p&gt;Write a config file for your device. You can take config files of EuRoC and KITTI as the example.&lt;/p&gt; 
&lt;h3&gt;6.2 Camera calibration&lt;/h3&gt; 
&lt;p&gt;VINS-Fusion support several camera models (pinhole, mei, equidistant). You can use &lt;a href=&quot;https://github.com/hengli/camodocal&quot;&gt;camera model&lt;/a&gt; to calibrate your cameras. We put some example data under /camera_models/calibrationdata to tell you how to calibrate.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd ~/catkin_ws/src/VINS-Fusion/camera_models/camera_calib_example/
rosrun camera_models Calibrations -w 12 -h 8 -s 80 -i calibrationdata --camera-model pinhole
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;7. Docker Support&lt;/h2&gt; 
&lt;p&gt;To further facilitate the building process, we add docker in our code. Docker environment is like a sandbox, thus makes our code environment-independent. To run with docker, first make sure &lt;a href=&quot;http://wiki.ros.org/ROS/Installation&quot;&gt;ros&lt;/a&gt; and &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;docker&lt;/a&gt; are installed on your machine. Then add your account to &lt;code&gt;docker&lt;/code&gt; group by &lt;code&gt;sudo usermod -aG docker $YOUR_USER_NAME&lt;/code&gt;. &lt;strong&gt;Relaunch the terminal or logout and re-login if you get &lt;code&gt;Permission denied&lt;/code&gt; error&lt;/strong&gt;, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd ~/catkin_ws/src/VINS-Fusion/docker
make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the docker building process may take a while depends on your network and machine. After VINS-Fusion successfully built, you can run vins estimator with script &lt;code&gt;run.sh&lt;/code&gt;. Script &lt;code&gt;run.sh&lt;/code&gt; can take several flags and arguments. Flag &lt;code&gt;-k&lt;/code&gt; means KITTI, &lt;code&gt;-l&lt;/code&gt; represents loop fusion, and &lt;code&gt;-g&lt;/code&gt; stands for global fusion. You can get the usage details by &lt;code&gt;./run.sh -h&lt;/code&gt;. Here are some examples with this script:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Euroc Monocualr camera + IMU
./run.sh ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml

# Euroc Stereo cameras + IMU with loop fusion
./run.sh -l ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml

# KITTI Odometry (Stereo)
./run.sh -k ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml YOUR_DATASET_FOLDER/sequences/00/

# KITTI Odometry (Stereo) with loop fusion
./run.sh -kl ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml YOUR_DATASET_FOLDER/sequences/00/

#  KITTI GPS Fusion (Stereo + GPS)
./run.sh -kg ~/catkin_ws/src/VINS-Fusion/config/kitti_raw/kitti_10_03_config.yaml YOUR_DATASET_FOLDER/2011_10_03_drive_0027_sync/

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Euroc cases, you need open another terminal and play your bag file. If you need modify the code, simply re-run &lt;code&gt;./run.sh&lt;/code&gt; with proper auguments after your changes.&lt;/p&gt; 
&lt;h2&gt;8. Acknowledgements&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href=&quot;http://ceres-solver.org/&quot;&gt;ceres solver&lt;/a&gt; for non-linear optimization and &lt;a href=&quot;https://github.com/dorian3d/DBoW2&quot;&gt;DBoW2&lt;/a&gt; for loop detection, a generic &lt;a href=&quot;https://github.com/hengli/camodocal&quot;&gt;camera model&lt;/a&gt; and &lt;a href=&quot;https://geographiclib.sourceforge.io/&quot;&gt;GeographicLib&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;9. License&lt;/h2&gt; 
&lt;p&gt;The source code is released under &lt;a href=&quot;http://www.gnu.org/licenses/&quot;&gt;GPLv3&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;We are still working on improving the code reliability. For any technical issues, please contact Tong Qin &amp;lt;qintonguavATgmail.com&amp;gt;.&lt;/p&gt; 
&lt;p&gt;For commercial inquiries, please contact Shaojie Shen &amp;lt;eeshaojieATust.hk&amp;gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ocornut/imgui</title>
      <link>https://github.com/ocornut/imgui</link>
      <description>&lt;p&gt;Dear ImGui: Bloat-free Graphical User interface for C++ with minimal dependencies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dear ImGui&lt;/h1&gt; 
&lt;center&gt;
 &lt;b&gt;&lt;i&gt;&quot;Give someone state and they&#39;ll have a bug one day, but teach them how to represent state in two separate locations that have to be kept in sync and they&#39;ll have bugs for a lifetime.&quot;&lt;/i&gt;&lt;/b&gt;
&lt;/center&gt; 
&lt;a href=&quot;https://twitter.com/rygorous/status/1507178315886444544&quot;&gt;-ryg&lt;/a&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/actions?workflow=build&quot;&gt;&lt;img src=&quot;https://github.com/ocornut/imgui/workflows/build/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ocornut/imgui/actions?workflow=static-analysis&quot;&gt;&lt;img src=&quot;https://github.com/ocornut/imgui/workflows/static-analysis/badge.svg?sanitize=true&quot; alt=&quot;Static Analysis Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ocornut/imgui_test_engine/actions?workflow=tests&quot;&gt;&lt;img src=&quot;https://github.com/ocornut/imgui_test_engine/workflows/tests/badge.svg?sanitize=true&quot; alt=&quot;Tests Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;(This library is available under a free and permissive license, but needs financial support to sustain its continued improvements. In addition to maintenance and stability there are many desirable features yet to be added. If your company is using Dear ImGui, please consider reaching out.)&lt;/sub&gt;&lt;/p&gt; 
&lt;p&gt;Businesses: support continued development and maintenance via invoiced sponsoring/support contracts: &lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;em&gt;E-mail: contact @ dearimgui dot com&lt;/em&gt; &lt;br /&gt;Individuals: support continued development and maintenance &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=WGHNC6MBFLZ2S&quot;&gt;here&lt;/a&gt;. Also see &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Funding&quot;&gt;Funding&lt;/a&gt; page.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#the-pitch&quot;&gt;The Pitch&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#usage&quot;&gt;Usage&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#how-it-works&quot;&gt;How it works&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#releases--changelogs&quot;&gt;Releases &amp;amp; Changelogs&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#demo&quot;&gt;Demo&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#getting-started--integration&quot;&gt;Getting Started &amp;amp; Integration&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#gallery&quot;&gt;Gallery&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#support-frequently-asked-questions-faq&quot;&gt;Support, FAQ&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#how-to-help&quot;&gt;How to help&lt;/a&gt; - &lt;strong&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Funding&quot;&gt;Funding &amp;amp; Sponsors&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#credits&quot;&gt;Credits&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#license&quot;&gt;License&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/wiki&quot;&gt;Wiki&lt;/a&gt; - &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Useful-Extensions&quot;&gt;Extensions&lt;/a&gt; - &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Bindings&quot;&gt;Language bindings &amp;amp; framework backends&lt;/a&gt; - &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui&quot;&gt;Software using Dear ImGui&lt;/a&gt; - &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Quotes&quot;&gt;User quotes&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;The Pitch&lt;/h3&gt; 
&lt;p&gt;Dear ImGui is a &lt;strong&gt;bloat-free graphical user interface library for C++&lt;/strong&gt;. It outputs optimized vertex buffers that you can render anytime in your 3D-pipeline-enabled application. It is fast, portable, renderer agnostic, and self-contained (no external dependencies).&lt;/p&gt; 
&lt;p&gt;Dear ImGui is designed to &lt;strong&gt;enable fast iterations&lt;/strong&gt; and to &lt;strong&gt;empower programmers&lt;/strong&gt; to create &lt;strong&gt;content creation tools and visualization / debug tools&lt;/strong&gt; (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal and lacks certain features commonly found in more high-level libraries. Among other things, full internationalization (right-to-left text, bidirectional text, text shaping etc.) and accessibility features are not supported.&lt;/p&gt; 
&lt;p&gt;Dear ImGui is particularly suited to integration in game engines (for tooling), real-time 3D applications, fullscreen applications, embedded applications, or any applications on console platforms where operating system features are non-standard.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimize state synchronization.&lt;/li&gt; 
 &lt;li&gt;Minimize UI-related state storage on user side.&lt;/li&gt; 
 &lt;li&gt;Minimize setup and maintenance.&lt;/li&gt; 
 &lt;li&gt;Easy to use to create dynamic UI which are the reflection of a dynamic data set.&lt;/li&gt; 
 &lt;li&gt;Easy to use to create code-driven and data-driven tools.&lt;/li&gt; 
 &lt;li&gt;Easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools.&lt;/li&gt; 
 &lt;li&gt;Easy to hack and improve.&lt;/li&gt; 
 &lt;li&gt;Portable, minimize dependencies, run on target (consoles, phones, etc.).&lt;/li&gt; 
 &lt;li&gt;Efficient runtime and memory consumption.&lt;/li&gt; 
 &lt;li&gt;Battle-tested, used by &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui&quot;&gt;many major actors in the game industry&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;The core of Dear ImGui is self-contained within a few platform-agnostic files&lt;/strong&gt; which you can easily compile in your application/engine. They are all the files in the root folder of the repository (imgui*.cpp, imgui*.h). &lt;strong&gt;No specific build process is required&lt;/strong&gt;. You can add the .cpp files into your existing project.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Backends for a variety of graphics API and rendering platforms&lt;/strong&gt; are provided in the &lt;a href=&quot;https://github.com/ocornut/imgui/tree/master/backends&quot;&gt;backends/&lt;/a&gt; folder, along with example applications in the &lt;a href=&quot;https://github.com/ocornut/imgui/tree/master/examples&quot;&gt;examples/&lt;/a&gt; folder. You may also create your own backend. Anywhere where you can render textured triangles, you can render Dear ImGui.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/ocornut/imgui/master/#getting-started--integration&quot;&gt;Getting Started &amp;amp; Integration&lt;/a&gt; section of this document for more details.&lt;/p&gt; 
&lt;p&gt;After Dear ImGui is set up in your application, you can use it from _anywhere_ in your program loop:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;ImGui::Text(&quot;Hello, world %d&quot;, 123);
if (ImGui::Button(&quot;Save&quot;))
    MySaveFunction();
ImGui::InputText(&quot;string&quot;, buf, IM_ARRAYSIZE(buf));
ImGui::SliderFloat(&quot;float&quot;, &amp;amp;f, 0.0f, 1.0f);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/191050833-b7ecf528-bfae-4a9f-ac1b-f3d83437a2f4.png&quot; alt=&quot;sample code output (dark, segoeui font, freetype)&quot; /&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/8225057/191050838-8742efd4-504d-4334-a9a2-e756d15bc2ab.png&quot; alt=&quot;sample code output (light, segoeui font, freetype)&quot; /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// Create a window called &quot;My First Tool&quot;, with a menu bar.
ImGui::Begin(&quot;My First Tool&quot;, &amp;amp;my_tool_active, ImGuiWindowFlags_MenuBar);
if (ImGui::BeginMenuBar())
{
    if (ImGui::BeginMenu(&quot;File&quot;))
    {
        if (ImGui::MenuItem(&quot;Open..&quot;, &quot;Ctrl+O&quot;)) { /* Do stuff */ }
        if (ImGui::MenuItem(&quot;Save&quot;, &quot;Ctrl+S&quot;))   { /* Do stuff */ }
        if (ImGui::MenuItem(&quot;Close&quot;, &quot;Ctrl+W&quot;))  { my_tool_active = false; }
        ImGui::EndMenu();
    }
    ImGui::EndMenuBar();
}

// Edit a color stored as 4 floats
ImGui::ColorEdit4(&quot;Color&quot;, my_color);

// Generate samples and plot them
float samples[100];
for (int n = 0; n &amp;lt; 100; n++)
    samples[n] = sinf(n * 0.2f + ImGui::GetTime() * 1.5f);
ImGui::PlotLines(&quot;Samples&quot;, samples, 100);

// Display contents in a scrolling region
ImGui::TextColored(ImVec4(1,1,0,1), &quot;Important Stuff&quot;);
ImGui::BeginChild(&quot;Scrolling&quot;);
for (int n = 0; n &amp;lt; 50; n++)
    ImGui::Text(&quot;%04d: Some text&quot;, n);
ImGui::EndChild();
ImGui::End();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/191055698-690a5651-458f-4856-b5a9-e8cc95c543e2.gif&quot; alt=&quot;my_first_tool_v188&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Dear ImGui allows you to &lt;strong&gt;create elaborate tools&lt;/strong&gt; as well as very short-lived ones. On the extreme side of short-livedness: using the Edit&amp;amp;Continue (hot code reload) feature of modern compilers you can add a few widgets to tweak variables while your application is running, and remove the code a minute later! Dear ImGui is not just for tweaking values. You can use it to trace a running algorithm by just emitting text commands. You can use it along with your own reflection data to browse your dataset live. You can use it to expose the internals of a subsystem in your engine, to create a logger, an inspection tool, a profiler, a debugger, an entire game-making editor/framework, etc.&lt;/p&gt; 
&lt;h3&gt;How it works&lt;/h3&gt; 
&lt;p&gt;The IMGUI paradigm through its API tries to minimize superfluous state duplication, state synchronization, and state retention from the user&#39;s point of view. It is less error-prone (less code and fewer bugs) than traditional retained-mode interfaces, and lends itself to creating dynamic user interfaces. Check out the Wiki&#39;s &lt;a href=&quot;https://github.com/ocornut/imgui/wiki#about-the-imgui-paradigm&quot;&gt;About the IMGUI paradigm&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;p&gt;Dear ImGui outputs vertex buffers and command lists that you can easily render in your application. The number of draw calls and state changes required to render them is fairly small. Because Dear ImGui doesn&#39;t know or touch graphics state directly, you can call its functions anywhere in your code (e.g. in the middle of a running algorithm, or in the middle of your own rendering process). Refer to the sample applications in the examples/ folder for instructions on how to integrate Dear ImGui with your existing codebase.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;A common misunderstanding is to mistake immediate mode GUI for immediate mode rendering, which usually implies hammering your driver/GPU with a bunch of inefficient draw calls and state changes as the GUI functions are called. This is NOT what Dear ImGui does. Dear ImGui outputs vertex buffers and a small list of draw calls batches. It never touches your GPU directly. The draw call batches are decently optimal and you can render them later, in your app or even remotely.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Releases &amp;amp; Changelogs&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/ocornut/imgui/releases&quot;&gt;Releases&lt;/a&gt; page for decorated Changelogs. Reading the changelogs is a good way to keep up to date with the things Dear ImGui has to offer, and maybe will give you ideas of some features that you&#39;ve been ignoring until now!&lt;/p&gt; 
&lt;h3&gt;Demo&lt;/h3&gt; 
&lt;p&gt;Calling the &lt;code&gt;ImGui::ShowDemoWindow()&lt;/code&gt; function will create a demo window showcasing a variety of features and examples. The code is always available for reference in &lt;code&gt;imgui_demo.cpp&lt;/code&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v167/v167-misc.png&quot;&gt;Here&#39;s how the demo looks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You should be able to build the examples from sources. If you don&#39;t, let us know! If you want to have a quick look at some Dear ImGui features, you can download Windows binaries of the demo app here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.dearimgui.com/binaries/imgui-demo-binaries-20250625.zip&quot;&gt;imgui-demo-binaries-20250625.zip&lt;/a&gt; (Windows, 1.92.0, built 2025/06/25, master) or &lt;a href=&quot;https://www.dearimgui.com/binaries&quot;&gt;older binaries&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The demo applications are not DPI aware so expect some blurriness on a 4K screen. For DPI awareness in your application, you can load/reload your font at a different scale and scale your style with &lt;code&gt;style.ScaleAllSizes()&lt;/code&gt; (see &lt;a href=&quot;https://www.dearimgui.com/faq&quot;&gt;FAQ&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Getting Started &amp;amp; Integration&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; guide for details.&lt;/p&gt; 
&lt;p&gt;On most platforms and when using C++, &lt;strong&gt;you should be able to use a combination of the &lt;a href=&quot;https://github.com/ocornut/imgui/tree/master/backends&quot;&gt;imgui_impl_xxxx&lt;/a&gt; backends without modification&lt;/strong&gt; (e.g. &lt;code&gt;imgui_impl_win32.cpp&lt;/code&gt; + &lt;code&gt;imgui_impl_dx11.cpp&lt;/code&gt;). If your engine supports multiple platforms, consider using more imgui_impl_xxxx files instead of rewriting them: this will be less work for you, and you can get Dear ImGui running immediately. You can &lt;em&gt;later&lt;/em&gt; decide to rewrite a custom backend using your custom engine functions if you wish so.&lt;/p&gt; 
&lt;p&gt;Integrating Dear ImGui within your custom engine is a matter of 1) wiring mouse/keyboard/gamepad inputs 2) uploading a texture to your GPU/render engine 3) providing a render function that can bind textures and render textured triangles, which is essentially what Backends are doing. The &lt;a href=&quot;https://github.com/ocornut/imgui/tree/master/examples&quot;&gt;examples/&lt;/a&gt; folder is populated with applications doing just that: setting up a window and using backends. If you follow the &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; guide it should in theory take you less than an hour to integrate Dear ImGui. &lt;strong&gt;Make sure to spend time reading the &lt;a href=&quot;https://www.dearimgui.com/faq&quot;&gt;FAQ&lt;/a&gt;, comments, and the examples applications!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Officially maintained backends/bindings (in repository):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Renderers: DirectX9, DirectX10, DirectX11, DirectX12, Metal, OpenGL/ES/ES2, SDL_GPU, SDL_Renderer2/3, Vulkan, WebGPU.&lt;/li&gt; 
 &lt;li&gt;Platforms: GLFW, SDL2/SDL3, Win32, Glut, OSX, Android.&lt;/li&gt; 
 &lt;li&gt;Frameworks: Allegro5, Emscripten.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Bindings&quot;&gt;Third-party backends/bindings&lt;/a&gt; wiki page:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Languages: C, C# and: Beef, ChaiScript, CovScript, Crystal, D, Go, Haskell, Haxe/hxcpp, Java, JavaScript, Julia, Kotlin, Lobster, Lua, Nim, Odin, Pascal, PureBasic, Python, ReaScript, Ruby, Rust, Swift, Zig...&lt;/li&gt; 
 &lt;li&gt;Frameworks: AGS/Adventure Game Studio, Amethyst, Blender, bsf, Cinder, Cocos2d-x, Defold, Diligent Engine, Ebiten, Flexium, GML/Game Maker Studio, GLEQ, Godot, GTK3, Irrlicht Engine, JUCE, LÖVE+LUA, Mach Engine, Magnum, Marmalade, Monogame, NanoRT, nCine, Nim Game Lib, Nintendo 3DS/Switch/WiiU (homebrew), Ogre, openFrameworks, OSG/OpenSceneGraph, Orx, Photoshop, px_render, Qt/QtDirect3D, raylib, SFML, Sokol, Unity, Unreal Engine 4/5, UWP, vtk, VulkanHpp, VulkanSceneGraph, Win32 GDI, WxWidgets.&lt;/li&gt; 
 &lt;li&gt;Many bindings are auto-generated (by good old &lt;a href=&quot;https://github.com/cimgui/cimgui&quot;&gt;cimgui&lt;/a&gt; or newer/experimental &lt;a href=&quot;https://github.com/dearimgui/dear_bindings&quot;&gt;dear_bindings&lt;/a&gt;), you can use their metadata output to generate bindings for other languages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Useful-Extensions&quot;&gt;Useful Extensions/Widgets&lt;/a&gt; wiki page:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automation/testing, Text editors, node editors, timeline editors, plotting, software renderers, remote network access, memory editors, gizmos, etc. Notable and well supported extensions include &lt;a href=&quot;https://github.com/epezent/implot&quot;&gt;ImPlot&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocornut/imgui_test_engine&quot;&gt;Dear ImGui Test Engine&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Also see &lt;a href=&quot;https://github.com/ocornut/imgui/wiki&quot;&gt;Wiki&lt;/a&gt; for more links and ideas.&lt;/p&gt; 
&lt;h3&gt;Gallery&lt;/h3&gt; 
&lt;p&gt;Examples projects using Dear ImGui: &lt;a href=&quot;https://github.com/wolfpld/tracy&quot;&gt;Tracy&lt;/a&gt; (profiler), &lt;a href=&quot;https://github.com/WerWolv/ImHex&quot;&gt;ImHex&lt;/a&gt; (hex editor/data analysis), &lt;a href=&quot;https://remedybg.itch.io/remedybg&quot;&gt;RemedyBG&lt;/a&gt; (debugger) and &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Software-using-Dear-ImGui&quot;&gt;hundreds of others&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For more user-submitted screenshots of projects using Dear ImGui, check out the &lt;a href=&quot;https://github.com/ocornut/imgui/issues?q=label%3Agallery&quot;&gt;Gallery Threads&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;For a list of third-party widgets and extensions, check out the &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Useful-Extensions&quot;&gt;Useful Extensions/Widgets&lt;/a&gt; wiki page.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Custom engine &lt;a href=&quot;https://github.com/tksuoran/erhe&quot;&gt;erhe&lt;/a&gt; (docking branch)&lt;br /&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/994606/147875067-a848991e-2ad2-4fd3-bf71-4aeb8a547bcf.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/190203358-6988b846-0686-480e-8663-1311fbd18abd.jpg&quot; alt=&quot;erhe&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Custom engine for &lt;a href=&quot;http://www.TheDragonsTrap.com&quot;&gt;Wonder Boy: The Dragon&#39;s Trap&lt;/a&gt; (2017)&lt;br /&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/8225057/20628927/33e14cac-b329-11e6-80f6-9524e93b048a.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/190203379-57fcb80e-4aec-4fec-959e-17ddd3cd71e5.jpg&quot; alt=&quot;the dragon&#39;s trap&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Custom engine (untitled)&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v160/editor_white.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/190203393-c5ac9f22-b900-4d1e-bfeb-6027c63e3d92.jpg&quot; alt=&quot;editor white&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tracy Profiler (&lt;a href=&quot;https://github.com/wolfpld/tracy&quot;&gt;github&lt;/a&gt;)&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v176/tracy_profiler.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8225057/190203401-7b595f6e-607c-44d3-97ea-4c2673244dfb.jpg&quot; alt=&quot;tracy profiler&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Support, Frequently Asked Questions (FAQ)&lt;/h3&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/ocornut/imgui/raw/master/docs/FAQ.md&quot;&gt;Frequently Asked Questions (FAQ)&lt;/a&gt; where common questions are answered.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Getting-Started&quot;&gt;Getting Started&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocornut/imgui/wiki&quot;&gt;Wiki&lt;/a&gt; for many links, references, articles.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/ocornut/imgui/wiki#about-the-imgui-paradigm&quot;&gt;Articles about the IMGUI paradigm&lt;/a&gt; to read/learn about the Immediate Mode GUI paradigm.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Upcoming-Changes&quot;&gt;Upcoming Changes&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/ocornut/imgui_test_engine&quot;&gt;Dear ImGui Test Engine + Test Suite&lt;/a&gt; for Automation &amp;amp; Testing.&lt;/p&gt; 
&lt;p&gt;For the purposes of getting search engines to crawl the wiki, here&#39;s a link to the &lt;a href=&quot;https://github-wiki-see.page/m/ocornut/imgui/wiki&quot;&gt;Crawlable Wiki&lt;/a&gt; (not for humans, &lt;a href=&quot;https://github-wiki-see.page/&quot;&gt;here&#39;s why&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Getting started? For first-time users having issues compiling/linking/running or issues loading fonts, please use &lt;a href=&quot;https://github.com/ocornut/imgui/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;. For ANY other questions, bug reports, requests, feedback, please post on &lt;a href=&quot;https://github.com/ocornut/imgui/issues&quot;&gt;GitHub Issues&lt;/a&gt;. Please read and fill the New Issue template carefully.&lt;/p&gt; 
&lt;p&gt;Private support is available for paying business customers (E-mail: &lt;em&gt;contact @ dearimgui dot com&lt;/em&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Which version should I get?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We occasionally tag &lt;a href=&quot;https://github.com/ocornut/imgui/releases&quot;&gt;Releases&lt;/a&gt; (with nice releases notes) but it is generally safe and recommended to sync to latest &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;docking&lt;/code&gt; branch. The library is fairly stable and regressions tend to be fixed fast when reported. Advanced users may want to use the &lt;code&gt;docking&lt;/code&gt; branch with &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Multi-Viewports&quot;&gt;Multi-Viewport&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Docking&quot;&gt;Docking&lt;/a&gt; features. This branch is kept in sync with master regularly.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Who uses Dear ImGui?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Quotes&quot;&gt;Quotes&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Funding&quot;&gt;Funding &amp;amp; Sponsors&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui&quot;&gt;Software using Dear ImGui&lt;/a&gt; Wiki pages for an idea of who is using Dear ImGui. Please add your game/software if you can! Also, see the &lt;a href=&quot;https://github.com/ocornut/imgui/issues?q=label%3Agallery&quot;&gt;Gallery Threads&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;How to help&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;How can I help?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://github.com/ocornut/imgui/issues&quot;&gt;GitHub Forum/Issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;You may help with development and submit pull requests! Please understand that by submitting a PR you are also submitting a request for the maintainer to review your code and then take over its maintenance forever. PR should be crafted both in the interest of the end-users and also to ease the maintainer into understanding and accepting it.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Help-Wanted&quot;&gt;Help wanted&lt;/a&gt; on the &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/&quot;&gt;Wiki&lt;/a&gt; for some more ideas.&lt;/li&gt; 
 &lt;li&gt;Be a &lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Funding&quot;&gt;Funding Supporter&lt;/a&gt;! Have your company financially support this project via invoiced sponsors/maintenance or by buying a license for &lt;a href=&quot;https://github.com/ocornut/imgui_test_engine&quot;&gt;Dear ImGui Test Engine&lt;/a&gt; (please reach out: contact AT dearimgui DOT com).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Ongoing Dear ImGui development is and has been financially supported by users and private sponsors. &lt;br /&gt;Please see the &lt;strong&gt;&lt;a href=&quot;https://github.com/ocornut/imgui/wiki/Funding&quot;&gt;detailed list of current and past Dear ImGui funding supporters and sponsors&lt;/a&gt;&lt;/strong&gt; for details. &lt;br /&gt;From November 2014 to December 2019, ongoing development has also been financially supported by its users on Patreon and through individual donations.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;THANK YOU to all past and present supporters for helping to keep this project alive and thriving!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Dear ImGui is using software and services provided free of charge for open source projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pvs-studio.com/en/pvs-studio/?utm_source=website&amp;amp;utm_medium=github&amp;amp;utm_campaign=open_source&quot;&gt;PVS-Studio&lt;/a&gt; for static analysis (supports C/C++/C#/Java).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub actions&lt;/a&gt; for continuous integration systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenCppCoverage/OpenCppCoverage&quot;&gt;OpenCppCoverage&lt;/a&gt; for code coverage analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Developed by &lt;a href=&quot;https://www.miracleworld.net&quot;&gt;Omar Cornut&lt;/a&gt; and every direct or indirect &lt;a href=&quot;https://github.com/ocornut/imgui/graphs/contributors&quot;&gt;contributors&lt;/a&gt; to the GitHub. The early version of this library was developed with the support of &lt;a href=&quot;https://www.mediamolecule.com&quot;&gt;Media Molecule&lt;/a&gt; and first used internally on the game &lt;a href=&quot;https://tearaway.mediamolecule.com&quot;&gt;Tearaway&lt;/a&gt; (PS Vita).&lt;/p&gt; 
&lt;p&gt;Recurring contributors include Rokas Kupstys &lt;a href=&quot;https://github.com/rokups&quot;&gt;@rokups&lt;/a&gt; (2020-2022): a good portion of work on automation system and regression tests now available in &lt;a href=&quot;https://github.com/ocornut/imgui_test_engine&quot;&gt;Dear ImGui Test Engine&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Maintenance/support contracts, sponsoring invoices and other B2B transactions are hosted and handled by &lt;a href=&quot;https://www.discohello.com&quot;&gt;Disco Hello&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Omar: &quot;I first discovered the IMGUI paradigm at &lt;a href=&quot;https://www.q-games.com&quot;&gt;Q-Games&lt;/a&gt; where Atman Binstock had dropped his own simple implementation in the codebase, which I spent quite some time improving and thinking about. It turned out that Atman was exposed to the concept directly by working with Casey. When I moved to Media Molecule I rewrote a new library trying to overcome the flaws and limitations of the first one I&#39;ve worked with. It became this library and since then I have spent an unreasonable amount of time iterating and improving it.&quot;&lt;/p&gt; 
&lt;p&gt;Embeds &lt;a href=&quot;https://www.proggyfonts.net&quot;&gt;ProggyClean.ttf&lt;/a&gt; font by Tristan Grimmer (MIT license). &lt;br /&gt;Embeds &lt;a href=&quot;https://github.com/nothings/stb/&quot;&gt;stb_textedit.h, stb_truetype.h, stb_rect_pack.h&lt;/a&gt; by Sean Barrett (public domain).&lt;/p&gt; 
&lt;p&gt;Inspiration, feedback, and testing for early versions: Casey Muratori, Atman Binstock, Mikko Mononen, Emmanuel Briney, Stefan Kamoda, Anton Mikhailov, Matt Willis. Special thanks to Alex Evans, Patrick Doane, Marco Koegler for kindly helping. Also thank you to everyone posting feedback, questions and patches on GitHub.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Dear ImGui is licensed under the MIT License, see &lt;a href=&quot;https://github.com/ocornut/imgui/raw/master/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>catchorg/Catch2</title>
      <link>https://github.com/catchorg/Catch2</link>
      <description>&lt;p&gt;A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a id=&quot;top&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/data/artwork/catch2-logo-full-with-background.svg?sanitize=true&quot; alt=&quot;Catch2 logo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/catchorg/catch2/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/catchorg/catch2.svg?sanitize=true&quot; alt=&quot;Github Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catchorg/Catch2/actions/workflows/linux-simple-builds.yml&quot;&gt;&lt;img src=&quot;https://github.com/catchorg/Catch2/actions/workflows/linux-simple-builds.yml/badge.svg?sanitize=true&quot; alt=&quot;Linux build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catchorg/Catch2/actions/workflows/linux-other-builds.yml&quot;&gt;&lt;img src=&quot;https://github.com/catchorg/Catch2/actions/workflows/linux-other-builds.yml/badge.svg?sanitize=true&quot; alt=&quot;Linux build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catchorg/Catch2/actions/workflows/mac-builds.yml&quot;&gt;&lt;img src=&quot;https://github.com/catchorg/Catch2/actions/workflows/mac-builds.yml/badge.svg?sanitize=true&quot; alt=&quot;MacOS build status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/catchorg/catch2&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/github/catchorg/Catch2?svg=true&amp;amp;branch=devel&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/catchorg/Catch2&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/catchorg/Catch2/branch/devel/graph/badge.svg?sanitize=true&quot; alt=&quot;Code Coverage&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://godbolt.org/z/EdoY15q9G&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/try-online-blue.svg?sanitize=true&quot; alt=&quot;Try online&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/4CWS9zD&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Chat!-brightgreen.svg?sanitize=true&quot; alt=&quot;Join the chat in Discord: https://discord.gg/4CWS9zD&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Catch2?&lt;/h2&gt; 
&lt;p&gt;Catch2 is mainly a unit testing framework for C++, but it also provides basic micro-benchmarking features, and simple BDD macros.&lt;/p&gt; 
&lt;p&gt;Catch2&#39;s main advantage is that using it is both simple and natural. Test names do not have to be valid identifiers, assertions look like normal C++ boolean expressions, and sections provide a nice and local way to share set-up and tear-down code in tests.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example unit test&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;catch2/catch_test_macros.hpp&amp;gt;

#include &amp;lt;cstdint&amp;gt;

uint32_t factorial( uint32_t number ) {
    return number &amp;lt;= 1 ? number : factorial(number-1) * number;
}

TEST_CASE( &quot;Factorials are computed&quot;, &quot;[factorial]&quot; ) {
    REQUIRE( factorial( 1) == 1 );
    REQUIRE( factorial( 2) == 2 );
    REQUIRE( factorial( 3) == 6 );
    REQUIRE( factorial(10) == 3&#39;628&#39;800 );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example microbenchmark&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;catch2/catch_test_macros.hpp&amp;gt;
#include &amp;lt;catch2/benchmark/catch_benchmark.hpp&amp;gt;

#include &amp;lt;cstdint&amp;gt;

uint64_t fibonacci(uint64_t number) {
    return number &amp;lt; 2 ? number : fibonacci(number - 1) + fibonacci(number - 2);
}

TEST_CASE(&quot;Benchmark Fibonacci&quot;, &quot;[!benchmark]&quot;) {
    REQUIRE(fibonacci(5) == 5);

    REQUIRE(fibonacci(20) == 6&#39;765);
    BENCHMARK(&quot;fibonacci 20&quot;) {
        return fibonacci(20);
    };

    REQUIRE(fibonacci(25) == 75&#39;025);
    BENCHMARK(&quot;fibonacci 25&quot;) {
        return fibonacci(25);
    };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note that benchmarks are not run by default, so you need to run it explicitly with the &lt;code&gt;[!benchmark]&lt;/code&gt; tag.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Catch2 v3 has been released!&lt;/h2&gt; 
&lt;p&gt;You are on the &lt;code&gt;devel&lt;/code&gt; branch, where the v3 version is being developed. v3 brings a bunch of significant changes, the big one being that Catch2 is no longer a single-header library. Catch2 now behaves as a normal library, with multiple headers and separately compiled implementation.&lt;/p&gt; 
&lt;p&gt;The documentation is slowly being updated to take these changes into account, but this work is currently still ongoing.&lt;/p&gt; 
&lt;p&gt;For migrating from the v2 releases to v3, you should look at &lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/migrate-v2-to-v3.md#top&quot;&gt;our documentation&lt;/a&gt;. It provides a simple guidelines on getting started, and collects most common migration problems.&lt;/p&gt; 
&lt;p&gt;For the previous major version of Catch2 &lt;a href=&quot;https://github.com/catchorg/Catch2/tree/v2.x&quot;&gt;look into the &lt;code&gt;v2.x&lt;/code&gt; branch here on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;How to use it&lt;/h2&gt; 
&lt;p&gt;This documentation comprises these three parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/why-catch.md#top&quot;&gt;Why do we need yet another C++ Test Framework?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/tutorial.md#top&quot;&gt;Tutorial&lt;/a&gt; - getting started&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/Readme.md#top&quot;&gt;Reference section&lt;/a&gt; - all the details&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;More&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Issues and bugs can be raised on the &lt;a href=&quot;https://github.com/catchorg/Catch2/issues&quot;&gt;Issue tracker on GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For discussion or questions please use &lt;a href=&quot;https://discord.gg/4CWS9zD&quot;&gt;our Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See who else is using Catch2 in &lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/opensource-users.md#top&quot;&gt;Open Source Software&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/commercial-users.md#top&quot;&gt;commercially&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>qinguoyi/TinyWebServer</title>
      <link>https://github.com/qinguoyi/TinyWebServer</link>
      <description>&lt;p&gt;🔥 Linux下C++轻量级WebServer服务器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TinyWebServer&lt;/h1&gt; 
&lt;p&gt;Linux下C++轻量级Web服务器，助力初学者快速实践网络编程，搭建属于自己的服务器.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;strong&gt;线程池 + 非阻塞socket + epoll(ET和LT均实现) + 事件处理(Reactor和模拟Proactor均实现)&lt;/strong&gt; 的并发模型&lt;/li&gt; 
 &lt;li&gt;使用&lt;strong&gt;状态机&lt;/strong&gt;解析HTTP请求报文，支持解析&lt;strong&gt;GET和POST&lt;/strong&gt;请求&lt;/li&gt; 
 &lt;li&gt;访问服务器数据库实现web端用户&lt;strong&gt;注册、登录&lt;/strong&gt;功能，可以请求服务器&lt;strong&gt;图片和视频文件&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;实现&lt;strong&gt;同步/异步日志系统&lt;/strong&gt;，记录服务器运行状态&lt;/li&gt; 
 &lt;li&gt;经Webbench压力测试可以实现&lt;strong&gt;上万的并发连接&lt;/strong&gt;数据交换&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;写在前面&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;本项目开发维护过程中，很多童鞋曾发红包支持，我都一一谢绝。我现在不会，将来也不会将本项目包装成任何课程售卖，更不会开通任何支持通道。&lt;/li&gt; 
 &lt;li&gt;目前网络上有人或对本项目，或对游双大佬的项目包装成课程售卖。请各位童鞋擦亮眼，辨识各大学习/求职网站的C++服务器项目，不要盲目付费。&lt;/li&gt; 
 &lt;li&gt;有面试官大佬通过项目信息在公司内找到我，发现很多童鞋简历上都用了这个项目。但，在面试过程中发现&lt;code&gt;很多童鞋通过本项目入门了，但是对于一些东西还是属于知其然不知其所以然的状态，需要加强下基础知识的学习&lt;/code&gt;，推荐认真阅读下 
  &lt;ul&gt; 
   &lt;li&gt;《unix环境高级编程》&lt;/li&gt; 
   &lt;li&gt;《unix网络编程》&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;感谢各位大佬，各位朋友，各位童鞋的认可和支持。如果本项目能带你入门，将是我莫大的荣幸。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;目录&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E6%A6%82%E8%BF%B0&quot;&gt;概述&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E6%A1%86%E6%9E%B6&quot;&gt;框架&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#Demo%E6%BC%94%E7%A4%BA&quot;&gt;Demo演示&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95&quot;&gt;压力测试&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97&quot;&gt;更新日志&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD&quot;&gt;源码下载&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C&quot;&gt;快速运行&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E4%B8%AA%E6%80%A7%E5%8C%96%E8%BF%90%E8%A1%8C&quot;&gt;个性化运行&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B&quot;&gt;庖丁解牛&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#CPP11%E5%AE%9E%E7%8E%B0&quot;&gt;CPP11实现&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qinguoyi/TinyWebServer/master/#%E8%87%B4%E8%B0%A2&quot;&gt;致谢&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
&lt;/table&gt; 
&lt;h2&gt;概述&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;C/C++&lt;/li&gt; 
  &lt;li&gt;B/S模型&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/lock&quot;&gt;线程同步机制包装类&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/http&quot;&gt;http连接请求处理类&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/threadpool&quot;&gt;半同步/半反应堆线程池&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/timer&quot;&gt;定时器处理非活动连接&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/log&quot;&gt;同步/异步日志系统 &lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/CGImysql&quot;&gt;数据库连接池&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/CGImysql&quot;&gt;同步线程注册和登录校验&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/master/test_presure&quot;&gt;简易服务器压力测试&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;框架&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1ge0j1atq5hj30g60lm0w4.jpg&quot; height=&quot;765&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Demo演示&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;注册演示&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1ge0iz0dkleg30m80bxjyj.gif&quot; height=&quot;429&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;登录演示&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;https://github.com/qinguoyi/TinyWebServer/raw/master/root/login.gif&quot; height=&quot;429&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;请求图片文件演示(6M)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1ge0juxrnlfg30go07x4qr.gif&quot; height=&quot;429&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;请求视频文件演示(39M)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1ge0jtxie8ng30go07xb2b.gif&quot; height=&quot;429&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;压力测试&lt;/h2&gt; 
&lt;p&gt;在关闭日志后，使用Webbench对服务器进行压力测试，对listenfd和connfd分别采用ET和LT模式，均可实现上万的并发连接，下面列出的是两者组合后的测试结果.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Proactor，LT + LT，93251 QPS&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1gfjqu2hptkj30gz07474n.jpg&quot; height=&quot;201&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Proactor，LT + ET，97459 QPS&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1gfjr1xppdgj30h206zdg6.jpg&quot; height=&quot;201&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Proactor，ET + LT，80498 QPS&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1gfjr24vmjtj30gz0720t3.jpg&quot; height=&quot;201&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Proactor，ET + ET，92167 QPS&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1gfjrflrebdj30gz06z0t3.jpg&quot; height=&quot;201&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Reactor，LT + ET，69175 QPS&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;http://ww1.sinaimg.cn/large/005TJ2c7ly1gfjr1humcbj30h207474n.jpg&quot; height=&quot;201&quot; /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;并发连接总数：10500&lt;/li&gt; 
  &lt;li&gt;访问服务器时间：5s&lt;/li&gt; 
  &lt;li&gt;所有访问均成功&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 使用本项目的webbench进行压测时，若报错显示webbench命令找不到，将可执行文件webbench删除后，重新编译即可。&lt;/p&gt; 
&lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 解决请求服务器上大文件的Bug&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 增加请求视频文件的页面&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 解决数据库同步校验内存泄漏&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 实现非阻塞模式下的ET和LT触发，并完成压力测试&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 完善&lt;code&gt;lock.h&lt;/code&gt;中的封装类，统一使用该同步机制&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 改进代码结构，更新局部变量懒汉单例模式&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 优化数据库连接池信号量与代码结构&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 使用RAII机制优化数据库连接的获取与释放&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 优化代码结构，封装工具类以减少全局变量&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 编译一次即可，命令行进行个性化测试更加友好&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; main函数封装重构&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 新增命令行日志开关，关闭日志后更新压力测试结果&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 改进编译方式，只配置一次SQL信息即可&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 新增Reactor模式，并完成压力测试&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;源码下载&lt;/h2&gt; 
&lt;p&gt;目前有两个版本，版本间的代码结构有较大改动，文档和代码运行方法也不一致。重构版本更简洁，原始版本(raw_version)更大保留游双代码的原汁原味，从原始版本更容易入手.&lt;/p&gt; 
&lt;p&gt;如果遇到github代码下载失败，或访问太慢，可以从以下链接下载，与Github最新提交同步.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;重构版本下载地址 : &lt;a href=&quot;https://pan.baidu.com/s/1PozKji8Oop-1BYcfixZR0g&quot;&gt;BaiduYun&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;提取码 : vsqq&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;原始版本(raw_version)下载地址 : &lt;a href=&quot;https://pan.baidu.com/s/1asMNDW-zog92DZY1Oa4kaQ&quot;&gt;BaiduYun&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;提取码 : 9wye&lt;/li&gt; 
   &lt;li&gt;原始版本运行请参考&lt;a href=&quot;https://github.com/qinguoyi/TinyWebServer/tree/raw_version&quot;&gt;原始文档&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;快速运行&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;服务器测试环境&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Ubuntu版本16.04&lt;/li&gt; 
   &lt;li&gt;MySQL版本5.7.29&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;浏览器测试环境&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows、Linux均可&lt;/li&gt; 
   &lt;li&gt;Chrome&lt;/li&gt; 
   &lt;li&gt;FireFox&lt;/li&gt; 
   &lt;li&gt;其他浏览器暂无测试&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;测试前确认已安装MySQL数据库&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;// 建立yourdb库
create database yourdb;

// 创建user表
USE yourdb;
CREATE TABLE user(
    username char(50) NULL,
    passwd char(50) NULL
)ENGINE=InnoDB;

// 添加数据
INSERT INTO user(username, passwd) VALUES(&#39;name&#39;, &#39;passwd&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;修改main.cpp中的数据库初始化信息&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//数据库登录名,密码,库名
string user = &quot;root&quot;;
string passwd = &quot;root&quot;;
string databasename = &quot;yourdb&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;build&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;sh ./build.sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;启动server&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;./server
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;浏览器端&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;ip:9006
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;个性化运行&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;./server [-p port] [-l LOGWrite] [-m TRIGMode] [-o OPT_LINGER] [-s sql_num] [-t thread_num] [-c close_log] [-a actor_model]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;温馨提示:以上参数不是非必须，不用全部使用，根据个人情况搭配选用即可.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-p，自定义端口号 
  &lt;ul&gt; 
   &lt;li&gt;默认9006&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-l，选择日志写入方式，默认同步写入 
  &lt;ul&gt; 
   &lt;li&gt;0，同步写入&lt;/li&gt; 
   &lt;li&gt;1，异步写入&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-m，listenfd和connfd的模式组合，默认使用LT + LT 
  &lt;ul&gt; 
   &lt;li&gt;0，表示使用LT + LT&lt;/li&gt; 
   &lt;li&gt;1，表示使用LT + ET&lt;/li&gt; 
   &lt;li&gt;2，表示使用ET + LT&lt;/li&gt; 
   &lt;li&gt;3，表示使用ET + ET&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-o，优雅关闭连接，默认不使用 
  &lt;ul&gt; 
   &lt;li&gt;0，不使用&lt;/li&gt; 
   &lt;li&gt;1，使用&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-s，数据库连接数量 
  &lt;ul&gt; 
   &lt;li&gt;默认为8&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-t，线程数量 
  &lt;ul&gt; 
   &lt;li&gt;默认为8&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-c，关闭日志，默认打开 
  &lt;ul&gt; 
   &lt;li&gt;0，打开日志&lt;/li&gt; 
   &lt;li&gt;1，关闭日志&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;-a，选择反应堆模型，默认Proactor 
  &lt;ul&gt; 
   &lt;li&gt;0，Proactor模型&lt;/li&gt; 
   &lt;li&gt;1，Reactor模型&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;测试示例命令与含义&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;./server -p 9007 -l 1 -m 0 -o 1 -s 10 -t 10 -c 1 -a 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 端口9007&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 异步写入日志&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 使用LT + LT组合&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 使用优雅关闭连接&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 数据库连接池内有10条连接&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 线程池内有10条线程&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 关闭日志&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Reactor反应堆模型&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;庖丁解牛&lt;/h2&gt; 
&lt;p&gt;近期版本迭代较快，以下内容多以旧版本(raw_version)代码为蓝本进行详解.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huixxi.github.io/2020/06/02/%E5%B0%8F%E7%99%BD%E8%A7%86%E8%A7%92%EF%BC%9A%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E7%A4%BE%E9%95%BF%E7%9A%84TinyWebServer/#more&quot;&gt;小白视角：一文读懂社长的TinyWebServer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzU2MzcwMw==&amp;amp;mid=2649274278&amp;amp;idx=3&amp;amp;sn=5840ff698e3f963c7855d702e842ec47&amp;amp;chksm=83ffbefeb48837e86fed9754986bca6db364a6fe2e2923549a378e8e5dec6e3cf732cdb198e2&amp;amp;scene=0&amp;amp;xtrack=1#rd&quot;&gt;最新版Web服务器项目详解 - 01 线程同步机制封装类&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzU2MzcwMw==&amp;amp;mid=2649274278&amp;amp;idx=4&amp;amp;sn=caa323faf0c51d882453c0e0c6a62282&amp;amp;chksm=83ffbefeb48837e841a6dbff292217475d9075e91cbe14042ad6e55b87437dcd01e6d9219e7d&amp;amp;scene=0&amp;amp;xtrack=1#rd&quot;&gt;最新版Web服务器项目详解 - 02 半同步半反应堆线程池（上）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PB8vMwi8sB4Jw3WzAKpWOQ&quot;&gt;最新版Web服务器项目详解 - 03 半同步半反应堆线程池（下）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/BfnNl-3jc_x5WPrWEJGdzQ&quot;&gt;最新版Web服务器项目详解 - 04 http连接处理（上）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wAQHU-QZiRt1VACMZZjNlw&quot;&gt;最新版Web服务器项目详解 - 05 http连接处理（中）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/451xNaSFHxcxfKlPBV3OCg&quot;&gt;最新版Web服务器项目详解 - 06 http连接处理（下）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/mmXLqh_NywhBXJvI45hchA&quot;&gt;最新版Web服务器项目详解 - 07 定时器处理非活动连接（上）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/fb_OUnlV1SGuOUdrGrzVgg&quot;&gt;最新版Web服务器项目详解 - 08 定时器处理非活动连接（下）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/IWAlPzVDkR2ZRI5iirEfCg&quot;&gt;最新版Web服务器项目详解 - 09 日志系统（上）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/f-ujwFyCe1LZa3EB561ehA&quot;&gt;最新版Web服务器项目详解 - 10 日志系统（下）&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzU2MzcwMw==&amp;amp;mid=2649274326&amp;amp;idx=1&amp;amp;sn=5af78e2bf6552c46ae9ab2aa22faf839&amp;amp;chksm=83ffbe8eb4883798c3abb82ddd124c8100a39ef41ab8d04abe42d344067d5e1ac1b0cac9d9a3&amp;amp;token=1450918099&amp;amp;lang=zh_CN#rd&quot;&gt;最新版Web服务器项目详解 - 11 数据库连接池&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzU2MzcwMw==&amp;amp;mid=2649274431&amp;amp;idx=4&amp;amp;sn=7595a70f06a79cb7abaebcd939e0cbee&amp;amp;chksm=83ffb167b4883871ce110aeb23e04acf835ef41016517247263a2c3ab6f8e615607858127ea6&amp;amp;token=1686112912&amp;amp;lang=zh_CN#rd&quot;&gt;最新版Web服务器项目详解 - 12 注册登录&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzU2MzcwMw==&amp;amp;mid=2649274431&amp;amp;idx=1&amp;amp;sn=2dd28c92f5d9704a57c001a3d2630b69&amp;amp;chksm=83ffb167b48838715810b27b8f8b9a576023ee5c08a8e5d91df5baf396732de51268d1bf2a4e&amp;amp;token=1686112912&amp;amp;lang=zh_CN#rd&quot;&gt;最新版Web服务器项目详解 - 13 踩坑与面试题&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;已更新完毕&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://star-history.com/#qinguoyi/TinyWebServer&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=qinguoyi/TinyWebServer&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;CPP11实现&lt;/h2&gt; 
&lt;p&gt;更简洁，更优雅的CPP11实现：&lt;a href=&quot;https://github.com/markparticle/WebServer&quot;&gt;Webserver&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;致谢&lt;/h2&gt; 
&lt;p&gt;Linux高性能服务器编程，游双著.&lt;/p&gt; 
&lt;p&gt;感谢以下朋友的PR和帮助: &lt;a href=&quot;https://github.com/RownH&quot;&gt;@RownH&lt;/a&gt;，&lt;a href=&quot;https://github.com/mapleFU&quot;&gt;@mapleFU&lt;/a&gt;，&lt;a href=&quot;https://github.com/ZWiley&quot;&gt;@ZWiley&lt;/a&gt;，&lt;a href=&quot;https://github.com/zjuHong&quot;&gt;@zjuHong&lt;/a&gt;，&lt;a href=&quot;https://github.com/mamil&quot;&gt;@mamil&lt;/a&gt;，&lt;a href=&quot;https://github.com/byfate&quot;&gt;@byfate&lt;/a&gt;，&lt;a href=&quot;https://github.com/MaJun827&quot;&gt;@MaJun827&lt;/a&gt;，&lt;a href=&quot;https://github.com/BBLiu-coder&quot;&gt;@BBLiu-coder&lt;/a&gt;，&lt;a href=&quot;https://github.com/smoky96&quot;&gt;@smoky96&lt;/a&gt;，&lt;a href=&quot;https://github.com/yfBong&quot;&gt;@yfBong&lt;/a&gt;，&lt;a href=&quot;https://github.com/liuwuyao&quot;&gt;@liuwuyao&lt;/a&gt;，&lt;a href=&quot;https://github.com/Huixxi&quot;&gt;@Huixxi&lt;/a&gt;，&lt;a href=&quot;https://github.com/markparticle&quot;&gt;@markparticle&lt;/a&gt;，&lt;a href=&quot;https://github.com/Blogg9ggg&quot;&gt;@blogg9ggg&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meshtastic/firmware</title>
      <link>https://github.com/meshtastic/firmware</link>
      <description>&lt;p&gt;The official firmware for Meshtastic, an open-source, off-grid mesh communication system.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/meshtastic/firmware/master/.github/meshtastic_logo.png&quot; alt=&quot;Meshtastic Logo&quot; width=&quot;80&quot; /&gt; 
 &lt;h1&gt;Meshtastic Firmware&lt;/h1&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/meshtastic/firmware/total&quot; alt=&quot;GitHub release downloads&quot; /&gt; &lt;a href=&quot;https://github.com/meshtastic/firmware/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/meshtastic/firmware/main_matrix.yml?branch=master&amp;amp;label=actions&amp;amp;logo=github&amp;amp;color=yellow&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cla-assistant.io/meshtastic/firmware&quot;&gt;&lt;img src=&quot;https://cla-assistant.io/readme/badge/meshtastic/firmware&quot; alt=&quot;CLA assistant&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/meshtastic/&quot;&gt;&lt;img src=&quot;https://opencollective.com/meshtastic/tiers/badge.svg?label=Fiscal%20Contributors&amp;amp;color=deeppink&quot; alt=&quot;Fiscal Contributors&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://vercel.com?utm_source=meshtastic&amp;amp;utm_campaign=oss&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Powered%20by&amp;amp;message=Vercel&amp;amp;style=flat&amp;amp;logo=vercel&amp;amp;color=000000&quot; alt=&quot;Vercel&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://trendshift.io/repositories/5524&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/5524&quot; alt=&quot;meshtastic%2Ffirmware | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;  
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://meshtastic.org&quot;&gt;Website&lt;/a&gt; - 
 &lt;a href=&quot;https://meshtastic.org/docs/&quot;&gt;Documentation&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains the official device firmware for Meshtastic, an open-source LoRa mesh networking project designed for long-range, low-power communication without relying on internet or cellular infrastructure. The firmware supports various hardware platforms, including ESP32, nRF52, RP2040/RP2350, and Linux-based devices.&lt;/p&gt; 
&lt;p&gt;Meshtastic enables text messaging, location sharing, and telemetry over a decentralized mesh network, making it ideal for outdoor adventures, emergency preparedness, and remote operations.&lt;/p&gt; 
&lt;h3&gt;Get Started&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;&lt;a href=&quot;https://meshtastic.org/docs/development/firmware/build&quot;&gt;Building Instructions&lt;/a&gt;&lt;/strong&gt; – Learn how to compile the firmware from source.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;&lt;a href=&quot;https://meshtastic.org/docs/getting-started/flashing-firmware/&quot;&gt;Flashing Instructions&lt;/a&gt;&lt;/strong&gt; – Install or update the firmware on your device.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Join our community and help improve Meshtastic! 🚀&lt;/p&gt; 
&lt;h2&gt;Stats&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://repobeats.axiom.co/api/embed/8025e56c482ec63541593cc5bd322c19d5c0bdcf.svg?sanitize=true&quot; alt=&quot;Alt&quot; title=&quot;Repobeats analytics image&quot; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>justcallmekoko/ESP32Marauder</title>
      <link>https://github.com/justcallmekoko/ESP32Marauder</link>
      <description>&lt;p&gt;A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 Marauder&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img alt=&quot;Marauder logo&quot; src=&quot;https://github.com/justcallmekoko/ESP32Marauder/raw/master/pictures/marauder_skull_patch_04_full_final.png?raw=true&quot; width=&quot;300&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;A suite of WiFi/Bluetooth offensive and defensive tools for the ESP32&lt;/b&gt; &lt;br /&gt;&lt;br /&gt; &lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder/raw/master/LICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/justcallmekoko/ESP32Marauder&quot;&gt;&lt;img alt=&quot;Gitter&quot; src=&quot;https://badges.gitter.im/justcallmekoko/ESP32Marauder.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/justcallmekoko/ESP32Marauder/total&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=jcmkyoutube&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/jcmkyoutube?style=social&amp;amp;logo=twitter&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/just.call.me.koko&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Follow%20Me-Instagram-orange&quot; alt=&quot;Instagram&quot; /&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml&quot;&gt;&lt;img src=&quot;https://github.com/justcallmekoko/ESP32Marauder/actions/workflows/build_push.yml/badge.svg?sanitize=true&quot; alt=&quot;Build and Push&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Download the &lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder/releases/latest&quot;&gt;latest release&lt;/a&gt; of the firmware.&lt;/p&gt; 
&lt;p&gt;Check out the project &lt;a href=&quot;https://github.com/justcallmekoko/ESP32Marauder/wiki&quot;&gt;wiki&lt;/a&gt; for a full overview of the ESP32 Marauder&lt;/p&gt; 
&lt;h1&gt;For Sale Now&lt;/h1&gt; 
&lt;p&gt;You can buy the ESP32 Marauder using &lt;a href=&quot;https://www.justcallmekokollc.com&quot;&gt;this link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cocos/cocos-engine</title>
      <link>https://github.com/cocos/cocos-engine</link>
      <description>&lt;p&gt;Cocos simplifies game creation and distribution with Cocos Creator, a free, open-source, cross-platform game engine. Empowering millions of developers to create high-performance, engaging 2D/3D games and instant web entertainment.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.cocos.com/&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/1503156/112012067-d5cdf580-8b63-11eb-819a-1c32cf253b25.png&quot; alt=&quot;Cocos Creator Logo&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/cocos/cocos-engine/stargazers&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/stars/cocos/cocos-engine.svg?style=flat-square&amp;amp;colorB=4183c4&quot; alt=&quot;stars&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/cocos-creator/engine/network&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/forks/cocos/cocos-engine.svg?style=flat-square&amp;amp;colorB=4183c4&quot; alt=&quot;forks&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/licenses/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&amp;amp;colorB=4183c4&quot; alt=&quot;license&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/CocosEngine&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/CocosEngine.svg?logo=twitter&amp;amp;label=follow&amp;amp;style=flat-square&amp;amp;colorB=4183c4&quot; alt=&quot;twitter&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Engine for Cocos Creator&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Cocos Creator is the new generation of game development tool in Cocos family, it brings a complete set of 3D and 2D features while providing an intuitive, low cost and collaboration friendly workflow to game developers.&lt;/strong&gt; Cocos Engine is the runtime framework for Cocos Creator editor.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/ui.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Cocos Creator inherited many good qualities and cool features from its previous versions, such as high performance low level C++ implementation, intuitive editor, cross-platform support. It supports native platforms, web platforms and rapidly expanding instant gaming platforms, including Windows, Mac, iOS, Android, HarmonyOS, Web, Facebook Instant Games, WeChat Mini Game and TikTok Mini Games.&lt;/p&gt; 
&lt;p&gt;Furthermore, Cocos Creator has pushed the engine technology to a whole new level for high performance with scalability on various platforms, full extensibility and easy development.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Graphics&lt;/strong&gt;: The GFX implementation is designed to adapt to the modern graphics APIs, it uses Vulkan on Windows and Android, Metal on Mac OS and iOS, and WebGL on Web platforms.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: The runtime engine is built with half C++ and half TypeScript, low-level infrastructure, native platform adaptation, renderer, and scene management are all written in C++ to ensure high runtime performance. We continue to move heavy lifting work to native as much as possible.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable Render Pipeline&lt;/strong&gt;: The render pipeline is designed to be fully customizable, it has supported the builtin forward and deferred render pipeline across all platforms. Developers can customize their render pipeline following the same approach.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible Surface Shader&lt;/strong&gt;: The material system is built on Coco&#39;s effect format which uses GLSL 300, the shader programs will be converted to a suitable runtime format automatically. The surface shader permits to fully customize the surface material while ensuring a universal lighting model.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Physically Based Rendering (PBR)&lt;/strong&gt;: The standard effect adopts physically based rendering, along with the physically based camera and the lighting based on physical metrics, developers can easily achieve realistic and seamless rendering results across different environments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy TypeScript API&lt;/strong&gt;: The user-level API set is provided in TypeScript, along with the powerful VSCode editor, development with Cocos Creator is incredibly efficient.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Besides all these highlights, Cocos Creator also provides a built-in animation system, physics system, particle system, terrain editing support, complex UI system, instant preview, etc.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1503156/111037166-f27c7600-845d-11eb-988f-4c2c8b5c7321.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This open-source repository is the runtime engine of Cocos Creator, the engine is naturally integrated within Cocos Creator, designed to only be the essential runtime library and not to be used independently.&lt;/p&gt; 
&lt;h2&gt;Development and Contribution Notice&lt;/h2&gt; 
&lt;p&gt;Cocos Creator engine is open source and welcomes community participation, for open source engine development with Cocos Creator editor, you should fork this repository and setup &lt;a href=&quot;https://docs.cocos.com/creator/manual/en/advanced-topics/engine-customization.html&quot;&gt;custom engine&lt;/a&gt; in the editor.&lt;/p&gt; 
&lt;h3&gt;Prerequisite&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/&quot;&gt;node.js v9.11.2 +&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://github.com/gulpjs/gulp/tree/master/docs/getting-started&quot;&gt;gulp-cli v2.3.0 +&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Clone&lt;/h3&gt; 
&lt;p&gt;Clone this repository into your local environment.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;In the cloned engine folder, run the following command to set the development environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# download &amp;amp; build engine dependencies
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is all you have to do to set up the engine development environment.&lt;/p&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;If running inside Cocos Creator, the engine will automatically compile and build after the editor window is opened. For more instructions on modifying the engine in Cocos Creator, please refer to &lt;a href=&quot;https://docs.cocos.com/creator/manual/en/advanced-topics/engine-customization.html&quot;&gt;Engine Customization Workflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Outside the editor, you need to run the following command to build:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/native/README.md&quot;&gt;native readme&lt;/a&gt; if you want to develop native applications.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;You can contribute to the Cocos Creator open-source engine in many ways, they are very much appreciated:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Report bugs or feature requests by &lt;a href=&quot;https://github.com/cocos/cocos-engine/issues/new/choose&quot;&gt;creating an issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Participate in discussions in the &lt;a href=&quot;https://github.com/cocos/cocos-engine/issues/&quot;&gt;issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a pull request if you have fixed or improved anything, or implemented any features.&lt;/li&gt; 
 &lt;li&gt;Improve the documentation with pull requests to the &lt;a href=&quot;https://github.com/cocos/cocos-docs&quot;&gt;usage documentation repository&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Help other developers in our &lt;a href=&quot;https://discuss.cocos2d-x.org/c/creator&quot;&gt;Forum&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Contribution notice&lt;/h3&gt; 
&lt;p&gt;If you are trying to make a pull request, some requirements must be met so that your pull request can be accepted:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Follow our &lt;a href=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/docs/CPP_CODING_STYLE.md&quot;&gt;Cpp Coding Style Guide&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/docs/TS_CODING_STYLE.md&quot;&gt;TypeScript Coding Style Reference&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Try to integrate ESLint and &lt;a href=&quot;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.7/docs/CPP_LINTER_AUTOFIX_GUIDE.md&quot;&gt;CPP auto fix tools&lt;/a&gt; in your coding environment.&lt;/li&gt; 
 &lt;li&gt;Link related issues or discussions in your pull request and clearly state the purpose of your pull request.&lt;/li&gt; 
 &lt;li&gt;Pass all automatic continuous integration tests.&lt;/li&gt; 
 &lt;li&gt;Request file owners or engine developers to review your pull request.&lt;/li&gt; 
 &lt;li&gt;Get one valid approval from the engine architects.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Example Project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cocos/cocos-tutorial-mind-your-step&quot;&gt;Mind Your Step 3D&lt;/a&gt;: Beginner&#39;s step-by-step tutorial project repo.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cocos/cocos-test-projects&quot;&gt;Test Cases&lt;/a&gt;: Unit test scenes for every engine module.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cocos/cocos-example-projects&quot;&gt;Example Cases&lt;/a&gt;: Simple yet expressive demo scenes for baseline testing and topic-specific case study.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cocos/awesome-cocos&quot;&gt;Awesome Cocos&lt;/a&gt;: You can find out other useful tools and show cases here.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cocos.com/&quot;&gt;Official site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cocos.com/en/creator/download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.cocos.com/creator/manual/en/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.cocos.com/creator/api/en/&quot;&gt;API References&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/cocos/projects?query=is%3Aopen&amp;amp;type=new&quot;&gt;Projects and road map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discuss.cocos2d-x.org/c/creator&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discord community: Search for Cocos in the Discover panel of Discord.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>esphome/esphome</title>
      <link>https://github.com/esphome/esphome</link>
      <description>&lt;p&gt;ESPHome is a system to control your ESP8266/ESP32 by simple yet powerful configuration files and control them remotely through Home Automation systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESPHome &lt;a href=&quot;https://discord.gg/KhAMKrd&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/429907082951524364.svg?sanitize=true&quot; alt=&quot;Discord Chat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://GitHub.com/esphome/esphome/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/esphome/esphome.svg?sanitize=true&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;a href=&quot;https://esphome.io/&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://esphome.io/_static/logo-text-on-dark.svg&quot; , alt=&quot;ESPHome Logo&quot; /&gt; 
  &lt;img src=&quot;https://esphome.io/_static/logo-text-on-light.svg?sanitize=true&quot; alt=&quot;ESPHome Logo&quot; /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://esphome.io&quot;&gt;Documentation&lt;/a&gt; -- &lt;a href=&quot;https://github.com/esphome/esphome/issues&quot;&gt;Issues&lt;/a&gt; -- &lt;a href=&quot;https://github.com/orgs/esphome/discussions&quot;&gt;Feature requests&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openhomefoundation.org/&quot;&gt;&lt;img src=&quot;https://www.openhomefoundation.org/badges/esphome.png&quot; alt=&quot;ESPHome - A project from the Open Home Foundation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BehaviorTree/BehaviorTree.CPP</title>
      <link>https://github.com/BehaviorTree/BehaviorTree.CPP</link>
      <description>&lt;p&gt;Behavior Trees Library in C++. Batteries included.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/license/BehaviorTree/BehaviorTree.CPP?color=blue&quot; alt=&quot;License MIT&quot; /&gt; &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/cmake_ubuntu.yml&quot;&gt;&lt;img src=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/cmake_ubuntu.yml/badge.svg?sanitize=true&quot; alt=&quot;conan Ubuntu&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/cmake_windows.yml&quot;&gt;&lt;img src=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/cmake_windows.yml/badge.svg?sanitize=true&quot; alt=&quot;conan Windows&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/ros2.yaml&quot;&gt;&lt;img src=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/ros2.yaml/badge.svg?sanitize=true&quot; alt=&quot;ros2&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/pixi.yaml&quot;&gt;&lt;img src=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/actions/workflows/pixi.yaml/badge.svg?sanitize=true&quot; alt=&quot;pixi (Conda)&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;BehaviorTree.CPP 4.7&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;350&quot; src=&quot;https://raw.githubusercontent.com/BehaviorTree/BehaviorTree.CPP/master/animated.svg?sanitize=true&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This &lt;strong&gt;C++ 17&lt;/strong&gt; library provides a framework to create BehaviorTrees. It was designed to be flexible, easy to use, reactive and fast.&lt;/p&gt; 
&lt;p&gt;Even if our main use-case is &lt;strong&gt;robotics&lt;/strong&gt;, you can use this library to build &lt;strong&gt;AI for games&lt;/strong&gt;, or to replace Finite State Machines.&lt;/p&gt; 
&lt;p&gt;There are few features which make &lt;strong&gt;BehaviorTree.CPP&lt;/strong&gt; unique, when compared to other implementations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;It makes &lt;strong&gt;asynchronous Actions&lt;/strong&gt;, i.e. non-blocking, a first-class citizen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can build &lt;strong&gt;reactive&lt;/strong&gt; behaviors that execute multiple Actions concurrently (orthogonality).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Trees are defined using a Domain Specific &lt;strong&gt;scripting language&lt;/strong&gt; (based on XML), and can be loaded at run-time; in other words, even if written in C++, the morphology of the Trees is &lt;em&gt;not&lt;/em&gt; hard-coded.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can statically link your custom TreeNodes or convert them into &lt;strong&gt;plugins&lt;/strong&gt; and load them at run-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It provides a type-safe and flexible mechanism to do &lt;strong&gt;Dataflow&lt;/strong&gt; between Nodes of the Tree.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It includes a &lt;strong&gt;logging/profiling&lt;/strong&gt; infrastructure that allows the user to visualize, record, replay and analyze state transitions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation and Community&lt;/h2&gt; 
&lt;p&gt;You can learn about the main concepts, the API and the tutorials here: &lt;a href=&quot;https://www.behaviortree.dev/&quot;&gt;https://www.behaviortree.dev/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An automatically generated API documentation can be found here: &lt;a href=&quot;https://BehaviorTree.github.io/BehaviorTree.CPP/&quot;&gt;https://BehaviorTree.github.io/BehaviorTree.CPP/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If the documentation doesn&#39;t answer your questions and/or you want to connect with the other &lt;strong&gt;BT.CPP&lt;/strong&gt; users, visit &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/discussions&quot;&gt;our forum&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;GUI Editor&lt;/h1&gt; 
&lt;p&gt;Editing a BehaviorTree is as simple as editing an XML file in your favorite text editor.&lt;/p&gt; 
&lt;p&gt;If you are looking for a more fancy graphical user interface (and I know you do) check &lt;a href=&quot;https://www.behaviortree.dev/groot&quot;&gt;Groot2&lt;/a&gt; out.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BehaviorTree/BehaviorTree.CPP/master/docs/groot-screenshot.png&quot; alt=&quot;Groot screenshot&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;How to compile&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;BT.CPP&lt;/strong&gt; requires a compile that supports c++17.&lt;/p&gt; 
&lt;p&gt;Three build systems are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;colcon (ament)&lt;/strong&gt;, if you use ROS2&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;conan&lt;/strong&gt; otherwise (Linux/Windows).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;straight cmake&lt;/strong&gt; if you want to be personally responsible for dependencies :)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compiling with &lt;a href=&quot;https://conan.io/&quot;&gt;conan&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;Assuming that you are in the &lt;strong&gt;parent&lt;/strong&gt; directory of &lt;code&gt;BehaviorTree.CPP&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build_release
conan install . -of build_release -s build_type=Release
cmake -S . -B build_release -DCMAKE_TOOLCHAIN_FILE=&quot;build_release/conan_toolchain.cmake&quot;
cmake --build build_release --parallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have dependencies such as ZeroMQ and SQlite already installed and you don&#39;t want to use conan, simply type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build_release
cmake -S . -B build_release
cmake --build build_release --parallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to build in a &lt;a href=&quot;https://pixi.sh/&quot;&gt;pixi&lt;/a&gt; project (conda virtual environment).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pixi run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use BT.CPP in your application, please refer to the example here: &lt;a href=&quot;https://github.com/BehaviorTree/btcpp_sample&quot;&gt;https://github.com/BehaviorTree/btcpp_sample&lt;/a&gt; .&lt;/p&gt; 
&lt;h1&gt;Commercial support&lt;/h1&gt; 
&lt;p&gt;Are you using BT.CPP in your commercial product and do you need technical support / consulting? You can contact the primary author, &lt;strong&gt;&lt;a href=&quot;mailto:dfaconti@aurynrobotics.com&quot;&gt;dfaconti@aurynrobotics.com&lt;/a&gt;&lt;/strong&gt;, to discuss your use case and needs.&lt;/p&gt; 
&lt;h1&gt;Star History&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://star-history.com/#BehaviorTree/BehaviorTree.CPP&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=BehaviorTree/BehaviorTree.CPP&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Previous version&lt;/h2&gt; 
&lt;p&gt;Version 3.8 of the software can be found in the branch &lt;a href=&quot;https://github.com/BehaviorTree/BehaviorTree.CPP/tree/v3.8&quot;&gt;v3.8&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;That branch might receive bug fixes, but the new features will be implemented only in the master branch.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The MIT License (MIT)&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2019-2023 Davide Faconti&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2018-2019 Davide Faconti, Eurecat&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2014-2018 Michele Colledanchise&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openvinotoolkit/openvino</title>
      <link>https://github.com/openvinotoolkit/openvino</link>
      <description>&lt;p&gt;OpenVINO™ is an open source toolkit for optimizing and deploying AI inference&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/assets/openvino-logo-purple-black.svg?sanitize=true&quot; width=&quot;400px&quot; /&gt; 
 &lt;h3 align=&quot;center&quot;&gt; Open-source software toolkit for optimizing and deploying deep learning models. &lt;/h3&gt; 
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://docs.openvino.ai/2025/index.html&quot;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://blog.openvino.ai&quot;&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/key-features.html&quot;&gt;&lt;b&gt;Key Features&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://docs.openvino.ai/2025/get-started/learn-openvino.html&quot;&gt;&lt;b&gt;Tutorials&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://docs.openvino.ai/2025/documentation/openvino-ecosystem.html&quot;&gt;&lt;b&gt;Integrations&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/performance-benchmarks.html&quot;&gt;&lt;b&gt;Benchmarks&lt;/b&gt;&lt;/a&gt; • &lt;a href=&quot;https://github.com/openvinotoolkit/openvino.genai&quot;&gt;&lt;b&gt;Generative AI&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://badge.fury.io/py/openvino&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/openvino.svg?sanitize=true&quot; alt=&quot;PyPI Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://anaconda.org/conda-forge/openvino&quot;&gt;&lt;img src=&quot;https://anaconda.org/conda-forge/openvino/badges/version.svg?sanitize=true&quot; alt=&quot;Anaconda Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/openvino&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/v/openvino&quot; alt=&quot;brew Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://pepy.tech/project/openvino&quot;&gt;&lt;img src=&quot;https://static.pepy.tech/badge/openvino&quot; alt=&quot;PyPI Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://anaconda.org/conda-forge/openvino/files&quot;&gt;&lt;img src=&quot;https://anaconda.org/conda-forge/libopenvino/badges/downloads.svg?sanitize=true&quot; alt=&quot;Anaconda Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/openvino&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/installs/dy/openvino&quot; alt=&quot;brew Downloads&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Inference Optimization&lt;/strong&gt;: Boost deep learning performance in computer vision, automatic speech recognition, generative AI, natural language processing with large and small language models, and many other common tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Model Support&lt;/strong&gt;: Use models trained with popular frameworks such as PyTorch, TensorFlow, ONNX, Keras, PaddlePaddle, and JAX/Flax. Directly integrate models built with transformers and diffusers from the Hugging Face Hub using Optimum Intel. Convert and deploy models without original frameworks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Broad Platform Compatibility&lt;/strong&gt;: Reduce resource demands and efficiently deploy on a range of platforms from edge to cloud. OpenVINO™ supports inference on CPU (x86, ARM), GPU (Intel integrated &amp;amp; discrete GPU) and AI accelerators (Intel NPU).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Community and Ecosystem&lt;/strong&gt;: Join an active community contributing to the enhancement of deep learning performance across various domains.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://docs.openvino.ai/2025/_static/download/OpenVINO_Quick_Start_Guide.pdf&quot;&gt;OpenVINO Cheat Sheet&lt;/a&gt; and &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/key-features.html&quot;&gt;Key Features&lt;/a&gt; for a quick reference.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.openvino.ai/2025/get-started/install-openvino.html&quot;&gt;Get your preferred distribution of OpenVINO&lt;/a&gt; or use this command for quick installation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pip install -U openvino
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/release-notes-openvino/system-requirements.html&quot;&gt;system requirements&lt;/a&gt; and &lt;a href=&quot;https://docs.openvino.ai/2025/documentation/compatibility-and-support/supported-devices.html&quot;&gt;supported devices&lt;/a&gt; for detailed information.&lt;/p&gt; 
&lt;h2&gt;Tutorials and Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.openvino.ai/2025/get-started.html&quot;&gt;OpenVINO Quickstart example&lt;/a&gt; will walk you through the basics of deploying your first model.&lt;/p&gt; 
&lt;p&gt;Learn how to optimize and deploy popular models with the &lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks&quot;&gt;OpenVINO Notebooks&lt;/a&gt;📚:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/llm-chatbot/llm-chatbot-generate-api.ipynb&quot;&gt;Create an LLM-powered Chatbot using OpenVINO&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/yolov11-optimization/yolov11-object-detection.ipynb&quot;&gt;YOLOv11 Optimization&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/text-to-image-genai/text-to-image-genai.ipynb&quot;&gt;Text-to-Image Generation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/llava-multimodal-chatbot/llava-multimodal-chatbot-genai.ipynb&quot;&gt;Multimodal assistant with LLaVa and OpenVINO&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/raw/latest/notebooks/whisper-asr-genai/whisper-asr-genai.ipynb&quot;&gt;Automatic speech recognition using Whisper and OpenVINO&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Discover more examples in the &lt;a href=&quot;https://docs.openvino.ai/2025/get-started/learn-openvino/openvino-samples.html&quot;&gt;OpenVINO Samples (Python &amp;amp; C++)&lt;/a&gt; and &lt;a href=&quot;https://docs.openvino.ai/2025/get-started/learn-openvino/interactive-tutorials-python.html&quot;&gt;Notebooks (Python)&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here are easy-to-follow code examples demonstrating how to run PyTorch and TensorFlow model inference using OpenVINO:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PyTorch Model&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import openvino as ov
import torch
import torchvision

# load PyTorch model into memory
model = torch.hub.load(&quot;pytorch/vision&quot;, &quot;shufflenet_v2_x1_0&quot;, weights=&quot;DEFAULT&quot;)

# convert the model into OpenVINO model
example = torch.randn(1, 3, 224, 224)
ov_model = ov.convert_model(model, example_input=(example,))

# compile the model for CPU device
core = ov.Core()
compiled_model = core.compile_model(ov_model, &#39;CPU&#39;)

# infer the model on random data
output = compiled_model({0: example.numpy()})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;TensorFlow Model&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import openvino as ov
import tensorflow as tf

# load TensorFlow model into memory
model = tf.keras.applications.MobileNetV2(weights=&#39;imagenet&#39;)

# convert the model into OpenVINO model
ov_model = ov.convert_model(model)

# compile the model for CPU device
core = ov.Core()
compiled_model = core.compile_model(ov_model, &#39;CPU&#39;)

# infer the model on random data
data = np.random.rand(1, 224, 224, 3)
output = compiled_model({0: data})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;OpenVINO supports the CPU, GPU, and NPU &lt;a href=&quot;https://docs.openvino.ai/2025/openvino-workflow/running-inference/inference-devices-and-modes.html&quot;&gt;devices&lt;/a&gt; and works with models from PyTorch, TensorFlow, ONNX, TensorFlow Lite, PaddlePaddle, and JAX/Flax &lt;a href=&quot;https://docs.openvino.ai/2025/openvino-workflow/model-preparation.html&quot;&gt;frameworks&lt;/a&gt;. It includes &lt;a href=&quot;https://docs.openvino.ai/2025/api/api_reference.html&quot;&gt;APIs&lt;/a&gt; in C++, Python, C, NodeJS, and offers the GenAI API for optimized model pipelines and performance.&lt;/p&gt; 
&lt;h2&gt;Generative AI with OpenVINO&lt;/h2&gt; 
&lt;p&gt;Get started with the OpenVINO GenAI &lt;a href=&quot;https://docs.openvino.ai/2025/get-started/install-openvino/install-openvino-genai.html&quot;&gt;installation&lt;/a&gt; and refer to the &lt;a href=&quot;https://docs.openvino.ai/2025/openvino-workflow-generative/generative-inference.html&quot;&gt;detailed guide&lt;/a&gt; to explore the capabilities of Generative AI using OpenVINO.&lt;/p&gt; 
&lt;p&gt;Learn how to run LLMs and GenAI with &lt;a href=&quot;https://github.com/openvinotoolkit/openvino.genai/tree/master/samples&quot;&gt;Samples&lt;/a&gt; in the &lt;a href=&quot;https://github.com/openvinotoolkit/openvino.genai&quot;&gt;OpenVINO™ GenAI repo&lt;/a&gt;. See GenAI in action with Jupyter notebooks: &lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/tree/latest/notebooks/llm-chatbot&quot;&gt;LLM-powered Chatbot&lt;/a&gt; and &lt;a href=&quot;https://github.com/openvinotoolkit/openvino_notebooks/tree/latest/notebooks/llm-question-answering&quot;&gt;LLM Instruction-following pipeline&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.openvino.ai/&quot;&gt;User documentation&lt;/a&gt; contains detailed information about OpenVINO and guides you from installation through optimizing and deploying models for your AI applications.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/index.md&quot;&gt;Developer documentation&lt;/a&gt; focuses on the OpenVINO architecture and describes &lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/docs/dev/build.md&quot;&gt;building&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; processes.&lt;/p&gt; 
&lt;h2&gt;OpenVINO Ecosystem&lt;/h2&gt; 
&lt;h3&gt;OpenVINO Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/nncf&quot;&gt;Neural Network Compression Framework (NNCF)&lt;/a&gt; - advanced model optimization techniques including quantization, filter pruning, binarization, and sparsity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino.genai&quot;&gt;GenAI Repository&lt;/a&gt; and &lt;a href=&quot;https://github.com/openvinotoolkit/openvino_tokenizers&quot;&gt;OpenVINO Tokenizers&lt;/a&gt; - resources and tools for developing and optimizing Generative AI applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/model_server&quot;&gt;OpenVINO™ Model Server (OVMS)&lt;/a&gt; - a scalable, high-performance solution for serving models optimized for Intel architectures.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://geti.intel.com/&quot;&gt;Intel® Geti™&lt;/a&gt; - an interactive video and image annotation tool for computer vision use cases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/optimum-intel&quot;&gt;🤗Optimum Intel&lt;/a&gt; - grab and use models leveraging OpenVINO within the Hugging Face API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openvino.ai/2025/openvino-workflow/torch-compile.html&quot;&gt;Torch.compile&lt;/a&gt; - use OpenVINO for Python-native applications by JIT-compiling code into optimized kernels.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vllm-project/vllm-openvino&quot;&gt;OpenVINO LLMs inference and serving with vLLM​&lt;/a&gt; - enhance vLLM&#39;s fast and easy model serving with the OpenVINO backend.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html&quot;&gt;OpenVINO Execution Provider for ONNX Runtime&lt;/a&gt; - use OpenVINO as a backend with your existing ONNX Runtime code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.llamaindex.ai/en/stable/examples/llm/openvino/&quot;&gt;LlamaIndex&lt;/a&gt; - build context-augmented GenAI applications with the LlamaIndex framework and enhance runtime performance with OpenVINO.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://python.langchain.com/docs/integrations/llms/openvino/&quot;&gt;LangChain&lt;/a&gt; - integrate OpenVINO with the LangChain framework to enhance runtime performance for GenAI applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/keras-team/keras&quot;&gt;Keras 3&lt;/a&gt; - Keras 3 is a multi-backend deep learning framework. Users can switch model inference to the OpenVINO backend using the Keras API.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/openvinotoolkit/awesome-openvino&quot;&gt;Awesome OpenVINO&lt;/a&gt; repository to discover a collection of community-made AI projects based on OpenVINO!&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Explore &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/performance-benchmarks.html&quot;&gt;OpenVINO Performance Benchmarks&lt;/a&gt; to discover the optimal hardware configurations and plan your AI deployment based on verified data.&lt;/p&gt; 
&lt;h2&gt;Contribution and Support&lt;/h2&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; for more details. Read the &lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/CONTRIBUTING.md#3-start-working-on-your-good-first-issue&quot;&gt;Good First Issues section&lt;/a&gt;, if you&#39;re looking for a place to start contributing. We welcome contributions of all kinds!&lt;/p&gt; 
&lt;p&gt;You can ask questions and get support on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvinotoolkit/openvino/issues&quot;&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;OpenVINO channels on the &lt;a href=&quot;https://discord.gg/7pVRxUwdWG&quot;&gt;Intel DevHub Discord server&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://stackoverflow.com/questions/tagged/openvino&quot;&gt;&lt;code&gt;openvino&lt;/code&gt;&lt;/a&gt; tag on Stack Overflow*.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/release-notes-openvino.html&quot;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.openvino.ai/&quot;&gt;OpenVINO Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@openvino&quot;&gt;OpenVINO™ toolkit on Medium&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Telemetry&lt;/h2&gt; 
&lt;p&gt;OpenVINO™ collects software performance and usage data for the purpose of improving OpenVINO™ tools. This data is collected directly by OpenVINO™ or through the use of Google Analytics 4. You can opt-out at any time by running the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;opt_in_out --opt_out
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More Information is available at &lt;a href=&quot;https://docs.openvino.ai/2025/about-openvino/additional-resources/telemetry.html&quot;&gt;OpenVINO™ Telemetry&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenVINO™ Toolkit is licensed under &lt;a href=&quot;https://raw.githubusercontent.com/openvinotoolkit/openvino/master/LICENSE&quot;&gt;Apache License Version 2.0&lt;/a&gt;. By contributing to the project, you agree to the license and copyright terms therein and release your contribution under these terms.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;* Other names and brands may be claimed as the property of others.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/libphonenumber</title>
      <link>https://github.com/google/libphonenumber</link>
      <description>&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;right&quot;&gt; &lt;img src=&quot;https://travis-ci.org/google/libphonenumber.svg?branch=master&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;What is it?&lt;/h1&gt; 
&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers. The Java version is optimized for running on smartphones, and is used by the Android framework since 4.0 (Ice Cream Sandwich).&lt;/p&gt; 
&lt;h1&gt;Quick links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Reporting an issue?&lt;/strong&gt; Want to send a pull request? See the &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md&quot;&gt;frequently asked questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fun! &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/FALSEHOODS.md&quot;&gt;Falsehoods Programmers Believe About Phone Numbers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Look for &lt;a href=&quot;https://github.com/google/libphonenumber/find/master&quot;&gt;&lt;code&gt;README&lt;/code&gt;s&lt;/a&gt; in directories relevant to the code you&#39;re interested in.&lt;/li&gt; 
 &lt;li&gt;For contributors and porters: &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/run-java-demo.md&quot;&gt;How to run the Java demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For porters: &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/making-metadata-changes.md&quot;&gt;How to make metadata changes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Highlights of functionality&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Parsing, formatting, and validating phone numbers for all countries/regions of the world.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;getNumberType&lt;/code&gt; - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP, Personal Numbers, UAN, Pager, and Voicemail (whenever feasible).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isNumberMatch&lt;/code&gt; - gets a confidence level on whether two numbers could be the same.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;getExampleNumber&lt;/code&gt; and &lt;code&gt;getExampleNumberForType&lt;/code&gt; - provide valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isPossibleNumber&lt;/code&gt; - quickly guesses whether a number is a possible phone number by using only the length information, much faster than a full validation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isValidNumber&lt;/code&gt; - full validation of a phone number for a region using length and prefix information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AsYouTypeFormatter&lt;/code&gt; - formats phone numbers on-the-fly when users enter each digit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;findNumbers&lt;/code&gt; - finds numbers in text.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PhoneNumberOfflineGeocoder&lt;/code&gt; - provides geographical information related to a phone number.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PhoneNumberToCarrierMapper&lt;/code&gt; - provides carrier information related to a phone number.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PhoneNumberToTimeZonesMapper&lt;/code&gt; - provides timezone information related to a phone number.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Demo&lt;/h1&gt; 
&lt;h2&gt;Java&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://libphonenumber.appspot.com/&quot;&gt;Java demo&lt;/a&gt; is updated with a slight delay after the GitHub release.&lt;/p&gt; 
&lt;p&gt;Last demo update: v9.0.11.&lt;/p&gt; 
&lt;p&gt;Note: Even though the library (main branch/&lt;a href=&quot;https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/8.12.56/&quot;&gt;maven release&lt;/a&gt;) is at v8.12.57, because of some deployment issues, we were unable to update the Java demo with the new binary version. We will soon fix this. Meantime, please use JS demo.&lt;/p&gt; 
&lt;p&gt;If this number is lower than the &lt;a href=&quot;https://github.com/google/libphonenumber/releases&quot;&gt;latest release&#39;s version number&lt;/a&gt;, we are between releases and the demo may be at either version.&lt;/p&gt; 
&lt;h3&gt;Demo App&lt;/h3&gt; 
&lt;p&gt;There is a demo Android App called &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/java/demoapp&quot;&gt;E.164 Formatter&lt;/a&gt; in this repository. The purpose of this App is to show an example of how the library can be used in a real-life situation, in this case specifically in an Android App using Java.&lt;/p&gt; 
&lt;h2&gt;JavaScript&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://htmlpreview.github.io/?https://github.com/google/libphonenumber/raw/master/javascript/i18n/phonenumbers/demo-compiled.html&quot;&gt;JavaScript demo&lt;/a&gt; may be run at various tags; this link will take you to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Java code&lt;/h1&gt; 
&lt;p&gt;To include the Java code in your application, either integrate with Maven (see &lt;a href=&quot;https://github.com/google/libphonenumber/wiki&quot;&gt;wiki&lt;/a&gt;) or download the latest jars from the &lt;a href=&quot;https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/&quot;&gt;Maven repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Javadoc&lt;/h1&gt; 
&lt;p&gt;Javadoc is automatically updated to reflect the latest release at &lt;a href=&quot;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&quot;&gt;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Versioning and Announcements&lt;/h1&gt; 
&lt;p&gt;We generally choose the release number following these guidelines.&lt;/p&gt; 
&lt;p&gt;If any of the changes pushed to master since the last release are incompatible with the intent / specification of an existing libphonenumber API or may cause libphonenumber (Java, C++, or JS) clients to have to change their code to keep building, we publish a major release. For example, if the last release were 7.7.3, the new one would be 8.0.0.&lt;/p&gt; 
&lt;p&gt;If any of those changes &lt;em&gt;enable&lt;/em&gt; clients to update their code to take advantage of new functionality, and if clients would have to roll-back these changes in the event that the release was marked as &quot;bad&quot;, we publish a minor release. For example, we&#39;d go from 7.7.3 to 7.8.0.&lt;/p&gt; 
&lt;p&gt;Otherwise, including when a release contains only &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#metadata_definition&quot;&gt;metadata&lt;/a&gt; changes, we publish a sub-minor release, e.g. 7.7.3 to 7.7.4.&lt;/p&gt; 
&lt;p&gt;Sometimes we make internal changes to the code or metadata that, while not affecting compatibility for clients, could affect compatibility for &lt;strong&gt;porters&lt;/strong&gt; of the library. For such changes we make announcements to &lt;a href=&quot;https://groups.google.com/forum/#!forum/libphonenumber-discuss&quot;&gt;libphonenumber-discuss&lt;/a&gt;. Such changes are not reflected in the version number, and we would publish a sub-minor release if there were no other changes.&lt;/p&gt; 
&lt;p&gt;Want to get notified of new releases? During most of the year, excepting holidays and extenuating circumstances, we release fortnightly. We update &lt;a href=&quot;https://github.com/google/libphonenumber/releases&quot;&gt;release tags&lt;/a&gt; and document detailed &lt;a href=&quot;https://github.com/google/libphonenumber/raw/master/release_notes.txt&quot;&gt;release notes&lt;/a&gt;. We also send an announcement to &lt;a href=&quot;https://groups.google.com/forum/#!forum/libphonenumber-discuss&quot;&gt;libphonenumber-discuss&lt;/a&gt; for every release.&lt;/p&gt; 
&lt;h1&gt;Quick Examples&lt;/h1&gt; 
&lt;p&gt;Let&#39;s say you have a string representing a phone number from Switzerland. This is how you parse/normalize it into a &lt;code&gt;PhoneNumber&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String swissNumberStr = &quot;044 668 18 00&quot;;
PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
try {
  PhoneNumber swissNumberProto = phoneUtil.parse(swissNumberStr, &quot;CH&quot;);
} catch (NumberParseException e) {
  System.err.println(&quot;NumberParseException was thrown: &quot; + e.toString());
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this point, &lt;code&gt;swissNumberProto&lt;/code&gt; contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;country_code&quot;: 41,
  &quot;national_number&quot;: 446681800
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;PhoneNumber&lt;/code&gt; is a class that was originally auto-generated from &lt;code&gt;phonenumber.proto&lt;/code&gt; with necessary modifications for efficiency. For details on the meaning of each field, refer to &lt;code&gt;resources/phonenumber.proto&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Now let us validate whether the number is valid:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;boolean isValid = phoneUtil.isValidNumber(swissNumberProto); // returns true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a few formats supported by the formatting method, as illustrated below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Produces &quot;+41 44 668 18 00&quot;
System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.INTERNATIONAL));
// Produces &quot;044 668 18 00&quot;
System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.NATIONAL));
// Produces &quot;+41446681800&quot;
System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.E164));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You could also choose to format the number in the way it is dialed from another country:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Produces &quot;011 41 44 668 1800&quot;, the number when it is dialed in the United States.
System.out.println(phoneUtil.formatOutOfCountryCallingNumber(swissNumberProto, &quot;US&quot;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Formatting Phone Numbers &#39;as you type&#39;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
AsYouTypeFormatter formatter = phoneUtil.getAsYouTypeFormatter(&quot;US&quot;);
System.out.println(formatter.inputDigit(&#39;6&#39;));  // Outputs &quot;6&quot;
...  // Input more digits
System.out.println(formatter.inputDigit(&#39;3&#39;));  // Now outputs &quot;650 253&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Geocoding Phone Numbers&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;PhoneNumberOfflineGeocoder geocoder = PhoneNumberOfflineGeocoder.getInstance();
// Outputs &quot;Zurich&quot;
System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ENGLISH));
// Outputs &quot;Zürich&quot;
System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.GERMAN));
// Outputs &quot;Zurigo&quot;
System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ITALIAN));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Mapping Phone Numbers to original carriers&lt;/h2&gt; 
&lt;p&gt;Caveat: We do not provide data about the current carrier of a phone number, only the original carrier who is assigned the corresponding range. Read about &lt;a href=&quot;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#what-is-mobile-number-portability&quot;&gt;number portability&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;PhoneNumber swissMobileNumber =
    new PhoneNumber().setCountryCode(41).setNationalNumber(798765432L);
PhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();
// Outputs &quot;Swisscom&quot;
System.out.println(carrierMapper.getNameForNumber(swissMobileNumber, Locale.ENGLISH));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples on how to use the library can be found in the &lt;a href=&quot;https://github.com/google/libphonenumber/tree/master/java/libphonenumber/test/com/google/i18n/phonenumbers&quot;&gt;unit tests&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Third-party Ports&lt;/h1&gt; 
&lt;p&gt;Several third-party ports of the phone number library are known to us. We share them here in case they&#39;re useful for developers.&lt;/p&gt; 
&lt;p&gt;However, we emphasize that these ports are by developers outside the libphonenumber project. We do not evaluate their quality or influence their maintenance processes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;C#: &lt;a href=&quot;https://github.com/twcclegg/libphonenumber-csharp&quot;&gt;https://github.com/twcclegg/libphonenumber-csharp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Gleam: &lt;a href=&quot;https://github.com/massivefermion/phony&quot;&gt;https://github.com/massivefermion/phony&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Go: &lt;a href=&quot;https://github.com/nyaruka/phonenumbers&quot;&gt;https://github.com/nyaruka/phonenumbers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Objective-c: &lt;a href=&quot;https://github.com/iziz/libPhoneNumber-iOS&quot;&gt;https://github.com/iziz/libPhoneNumber-iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swift: &lt;a href=&quot;https://github.com/marmelroy/PhoneNumberKit&quot;&gt;https://github.com/marmelroy/PhoneNumberKit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP: &lt;a href=&quot;https://github.com/giggsey/libphonenumber-for-php&quot;&gt;https://github.com/giggsey/libphonenumber-for-php&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PostgreSQL in-database types: &lt;a href=&quot;https://github.com/blm768/pg-libphonenumber&quot;&gt;https://github.com/blm768/pg-libphonenumber&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python: &lt;a href=&quot;https://github.com/daviddrysdale/python-phonenumbers&quot;&gt;https://github.com/daviddrysdale/python-phonenumbers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/ianks/mini_phone&quot;&gt;https://github.com/ianks/mini_phone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/daddyz/phonelib&quot;&gt;https://github.com/daddyz/phonelib&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/mobi/telephone_number&quot;&gt;https://github.com/mobi/telephone_number&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/1aim/rust-phonenumber&quot;&gt;https://github.com/1aim/rust-phonenumber&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Erlang: &lt;a href=&quot;https://github.com/marinakr/libphonenumber_erlang&quot;&gt;https://github.com/marinakr/libphonenumber_erlang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clojure: &lt;a href=&quot;https://github.com/randomseed-io/phone-number&quot;&gt;https://github.com/randomseed-io/phone-number&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;R: &lt;a href=&quot;https://github.com/socialresearchcentre/dialr/&quot;&gt;https://github.com/socialresearchcentre/dialr/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Elixir: &lt;a href=&quot;https://github.com/socialpaymentsbv/ex_phone_number&quot;&gt;https://github.com/socialpaymentsbv/ex_phone_number&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Salesforce: &lt;a href=&quot;https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000G12oJUAR&quot;&gt;https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000G12oJUAR&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dart: &lt;a href=&quot;https://github.com/superakabo/dlibphonenumber&quot;&gt;https://github.com/superakabo/dlibphonenumber&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatives to our own versions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Android-optimized: Our Java version loads the metadata from &lt;code&gt;Class#getResourcesAsStream&lt;/code&gt; and asks that Android apps follow the Android loading best practices of repackaging the metadata and loading from &lt;code&gt;AssetManager#open()&lt;/code&gt; themselves (&lt;a href=&quot;https://github.com/google/libphonenumber/raw/master/FAQ.md#optimize-loads&quot;&gt;FAQ&lt;/a&gt;). If you don&#39;t want to do this, check out the port at &lt;a href=&quot;https://github.com/MichaelRocks/libphonenumber-android&quot;&gt;https://github.com/MichaelRocks/libphonenumber-android&lt;/a&gt;, which does repackage the metadata and use &lt;code&gt;AssetManager#open()&lt;/code&gt;, and may be depended on without needing those specific loading optimizations from clients. You should also check out the port at &lt;a href=&quot;https://github.com/lionscribe/libphonenumber-android&quot;&gt;https://github.com/lionscribe/libphonenumber-android&lt;/a&gt; which also supports geocoding, and only requires a one line code change.&lt;/li&gt; 
 &lt;li&gt;Javascript: If you don&#39;t want to use our version, which depends on Closure, there are several other options, including &lt;a href=&quot;https://github.com/catamphetamine/libphonenumber-js&quot;&gt;https://github.com/catamphetamine/libphonenumber-js&lt;/a&gt; - a stripped-down rewrite, about 110 KB in size - and &lt;a href=&quot;https://github.com/seegno/google-libphonenumber&quot;&gt;https://github.com/seegno/google-libphonenumber&lt;/a&gt; - a browserify-compatible wrapper around the original unmodified library installable via npm, which packs the Google Closure library, about 420 KB in size.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Tools based on libphonenumber metadata:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scala: &lt;a href=&quot;https://github.com/mr-tolmach/raf&quot;&gt;https://github.com/mr-tolmach/raf&lt;/a&gt; - library for generating valid phone numbers in the E.164 format&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ros-navigation/navigation2</title>
      <link>https://github.com/ros-navigation/navigation2</link>
      <description>&lt;p&gt;ROS 2 Navigation Framework and System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nav2&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ros-navigation/navigation2/actions/workflows/update_ci_image.yaml&quot;&gt;&lt;img src=&quot;https://github.com/ros-navigation/navigation2/actions/workflows/update_ci_image.yaml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Workflow Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/ros-navigation/navigation2&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ros-navigation/navigation2/branch/main/graph/badge.svg?token=S3iRmypwlg&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/ros-navigation/navigation2/tree/main&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/ros-navigation/navigation2/tree/main.svg?style=svg&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/ros-navigation/navigation2/main/doc/nav2_logo.png&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;For detailed instructions on how to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/concepts/index.html&quot;&gt;Concepts&lt;/a&gt; and &lt;a href=&quot;https://docs.nav2.org/getting_started/index.html&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/setup_guides/index.html&quot;&gt;First Time Setup Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/#distributions&quot;&gt;ROS Distribution Statuses&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/development_guides/build_docs/index.html#build&quot;&gt;Build &amp;amp; Install&lt;/a&gt; and &lt;a href=&quot;https://github.com/orgs/ros-navigation/packages/container/package/navigation2&quot;&gt;Docker Containers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/tutorials/index.html&quot;&gt;General Tutorials&lt;/a&gt; and &lt;a href=&quot;https://docs.nav2.org/plugin_tutorials/index.html&quot;&gt;Algorithm Developer Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/configuration/index.html&quot;&gt;Configuration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/plugins/index.html&quot;&gt;Navigation Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.nav2.org/&quot;&gt;API Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/about/roscon.html&quot;&gt;ROSCon Talks&lt;/a&gt; and &lt;a href=&quot;https://docs.nav2.org/citations.html&quot;&gt;Citations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/migration/index.html&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nav2.org/development_guides/involvement_docs/index.html&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please visit our &lt;a href=&quot;https://docs.nav2.org/&quot;&gt;documentation site&lt;/a&gt;. &lt;a href=&quot;https://join.slack.com/t/navigation2/shared_invite/zt-uj428p0x-jKx8U7OzK1IOWp5TnDS2rA&quot;&gt;Please visit our community Slack here&lt;/a&gt; (if this link does not work, please contact maintainers to reactivate).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;⚠️ If you need professional services related to Nav2, please contact &lt;a href=&quot;https://www.opennav.org/&quot;&gt;Open Navigation&lt;/a&gt; at &lt;a href=&quot;mailto:info@opennav.org&quot;&gt;info@opennav.org&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Our Sponsors&lt;/h2&gt; 
&lt;p&gt;Please thank our amazing sponsors for their generous support of Nav2 on behalf of the community to allow the project to continue to be professionally maintained, developed, and supported for the long-haul! &lt;a href=&quot;https://www.opennav.org/&quot;&gt;Open Navigation LLC&lt;/a&gt; provides project leadership, maintenance, development, and support services to the Nav2 &amp;amp; ROS community.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/ros-navigation/navigation2/main/doc/sponsors_july_2025.png&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.dexory.com/&quot;&gt;Dexory&lt;/a&gt; develops robotics and AI logistics solutions to drive better business decisions using a digital twin of warehouses to provide inventory insights.&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/deep-learning-ai/industries/robotics/&quot;&gt;Nvidia&lt;/a&gt; develops GPU and AI technologies that power modern robotics, autonomous driving, data centers, gaming, and more.&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.polymathrobotics.com/&quot;&gt;Polymath Robotics&lt;/a&gt; creates safety-critical navigation systems for industrial vehicles that are radically simple to enable and deploy.&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.stereolabs.com/&quot;&gt;Stereolabs&lt;/a&gt; produces the high-quality ZED stereo cameras with a complete vision pipeline from neural depth to SLAM, 3D object tracking, AI and more.&lt;/h3&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;If you use the navigation framework, an algorithm from this repository, or ideas from it please cite this work in your papers!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;S. Macenski, F. Martín, R. White, J. Clavero. &lt;a href=&quot;https://arxiv.org/abs/2003.00368&quot;&gt;&lt;strong&gt;The Marathon 2: A Navigation System&lt;/strong&gt;&lt;/a&gt;. IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2020.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@inproceedings{macenski2020marathon2,
  title     = {The Marathon 2: A Navigation System},
  author    = {Macenski, Steve and Martín, Francisco and White, Ruffin and Ginés Clavero, Jonatan},
  year      = {2020},
  booktitle = {2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},
  url       = {https://github.com/ros-planning/navigation2},
  pdf       = {https://arxiv.org/abs/2003.00368}
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use &lt;strong&gt;any&lt;/strong&gt; of the algorithms in Nav2 or the analysis of the algorithms in your work, please cite this work in your papers!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;S. Macenski, T. Moore, DV Lu, A. Merzlyakov, M. Ferguson, &lt;a href=&quot;https://arxiv.org/pdf/2307.15236.pdf&quot;&gt;&lt;strong&gt;From the desks of ROS maintainers: A survey of modern &amp;amp; capable mobile robotics algorithms in the robot operating system 2&lt;/strong&gt;&lt;/a&gt;, Robotics and Autonomous Systems, 2023.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@article{macenski2023survey,
  title   = {From the desks of ROS maintainers: A survey of modern &amp;amp; capable mobile robotics algorithms in the robot operating system 2},
  author  = {S. Macenski, T. Moore, DV Lu, A. Merzlyakov, M. Ferguson},
  year    = {2023},
  journal = {Robotics and Autonomous Systems}
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use the Smac Planner (Hybrid A*, State Lattice, 2D), please cite this work in your papers!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;S. Macenski, M. Booker, J. Wallace, &lt;a href=&quot;https://arxiv.org/abs/2401.13078&quot;&gt;&lt;strong&gt;Open-Source, Cost-Aware Kinematically Feasible Planning for Mobile and Surface Robotics&lt;/strong&gt;&lt;/a&gt;. 2024.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@article{macenski2024smac,
  title   = {Open-Source, Cost-Aware Kinematically Feasible Planning for Mobile and Surface Robotics},
  author  = {Steve Macenski and Matthew Booker and Josh Wallace},
  year    = {2024},
  journal = {Arxiv}
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use the Regulated Pure Pursuit Controller algorithm or software from this repository, please cite this work in your papers!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;S. Macenski, S. Singh, F. Martin, J. Gines, &lt;a href=&quot;https://arxiv.org/abs/2305.20026&quot;&gt;&lt;strong&gt;Regulated Pure Pursuit for Robot Path Tracking&lt;/strong&gt;&lt;/a&gt;. Autonomous Robots, 2023.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@article{macenski2023regulated,
  title   = {Regulated Pure Pursuit for Robot Path Tracking},
  author  = {Steve Macenski and Shrijit Singh and Francisco Martin and Jonatan Gines},
  year    = {2023},
  journal = {Autonomous Robots}
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use our work on VSLAM and formal comparisons for service robot needs, please cite the paper:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A. Merzlyakov, S. Macenski. &lt;a href=&quot;https://arxiv.org/abs/2107.07589&quot;&gt;&lt;strong&gt;A Comparison of Modern General-Purpose Visual SLAM Approaches&lt;/strong&gt;&lt;/a&gt;. IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2021.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@inproceedings{vslamComparison2021,
  title     = {A Comparison of Modern General-Purpose Visual SLAM Approaches},
  author    = {Merzlyakov, Alexey and Macenski, Steven},
  year      = {2021},
  booktitle = {2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},
  pdf       = {https://arxiv.org/abs/2107.07589}
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Build Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Package&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;humble Source&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;humble Debian&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;jazzy Source&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;jazzy Debian&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;kilted Source&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;kilted Debian&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;navigation2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__navigation2__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__navigation2__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__navigation2__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__navigation2__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__navigation2__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__navigation2__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__navigation2__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__navigation2__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__navigation2__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__navigation2__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__navigation2__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__navigation2__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_amcl&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_amcl__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_amcl__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_amcl__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_amcl__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_amcl__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_amcl__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_amcl__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_amcl__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_amcl__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_amcl__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_amcl__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_amcl__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_behavior_tree&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_behavior_tree__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_behavior_tree__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_behavior_tree__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_behavior_tree__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_behavior_tree__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_behavior_tree__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_behavior_tree__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_behavior_tree__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_behavior_tree__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_behavior_tree__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_behavior_tree__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_behavior_tree__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_behaviors&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_behaviors__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_behaviors__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_behaviors__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_behaviors__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_behaviors__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_behaviors__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_behaviors__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_behaviors__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_behaviors__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_behaviors__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_behaviors__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_behaviors__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_bringup&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_bringup__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_bringup__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_bringup__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_bringup__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_bringup__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_bringup__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_bringup__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_bringup__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_bringup__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_bringup__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_bringup__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_bringup__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_bt_navigator&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_bt_navigator__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_bt_navigator__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_bt_navigator__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_bt_navigator__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_bt_navigator__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_bt_navigator__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_bt_navigator__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_bt_navigator__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_bt_navigator__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_bt_navigator__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_bt_navigator__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_bt_navigator__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_collision_monitor&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_collision_monitor__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_collision_monitor__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_collision_monitor__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_collision_monitor__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_collision_monitor__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_collision_monitor__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_collision_monitor__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_collision_monitor__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_collision_monitor__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_collision_monitor__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_collision_monitor__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_collision_monitor__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_common&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_common__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_common__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_common__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_common__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_common__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_common__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_common__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_common__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_common__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_common__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_common__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_common__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_constrained_smoother&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_constrained_smoother__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_constrained_smoother__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_constrained_smoother__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_constrained_smoother__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_constrained_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_constrained_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_constrained_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_constrained_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_constrained_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_constrained_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_constrained_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_constrained_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_controller&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_core&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_core__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_core__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_core__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_core__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_core__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_core__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_core__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_core__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_core__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_core__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_core__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_core__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_costmap_2d&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_costmap_2d__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_costmap_2d__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_costmap_2d__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_costmap_2d__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_costmap_2d__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_costmap_2d__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_costmap_2d__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_costmap_2d__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_costmap_2d__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_costmap_2d__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_costmap_2d__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_costmap_2d__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_docking&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__opennav_docking__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__opennav_docking__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__opennav_docking__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__opennav_docking__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__opennav_docking__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__opennav_docking__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__opennav_docking__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__opennav_docking__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__opennav_docking__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__opennav_docking__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__opennav_docking__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__opennav_docking__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_dwb_controller&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_dwb_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_dwb_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_dwb_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_dwb_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_dwb_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_dwb_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_dwb_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_dwb_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_dwb_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_dwb_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_dwb_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_dwb_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_graceful_controller&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_graceful_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_graceful_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_graceful_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_graceful_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_graceful_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_graceful_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_graceful_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_graceful_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_graceful_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_graceful_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_graceful_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_graceful_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_lifecycle_manager&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_lifecycle_manager__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_lifecycle_manager__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_lifecycle_manager__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_lifecycle_manager__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_lifecycle_manager__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_lifecycle_manager__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_lifecycle_manager__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_lifecycle_manager__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_lifecycle_manager__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_lifecycle_manager__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_lifecycle_manager__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_lifecycle_manager__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_loopback_sim&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_loopback_sim__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_loopback_sim__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_loopback_sim__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_loopback_sim__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_loopback_sim__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_loopback_sim__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_loopback_sim__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_loopback_sim__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_map_server&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_map_server__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_map_server__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_map_server__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_map_server__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_map_server__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_map_server__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_map_server__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_map_server__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_map_server__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_map_server__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_map_server__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_map_server__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_mppi_controller&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_mppi_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_mppi_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_mppi_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_mppi_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_mppi_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_mppi_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_mppi_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_mppi_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_mppi_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_mppi_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_mppi_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_mppi_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_msgs&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_msgs__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_msgs__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_msgs__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_msgs__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_msgs__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_msgs__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_msgs__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_msgs__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_msgs__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_msgs__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_msgs__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_msgs__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_navfn_planner&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_navfn_planner__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_navfn_planner__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_navfn_planner__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_navfn_planner__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_navfn_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_navfn_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_navfn_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_navfn_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_navfn_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_navfn_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_navfn_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_navfn_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_planner&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_planner__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_planner__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_planner__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_planner__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_regulated_pure_pursuit&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_regulated_pure_pursuit_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_regulated_pure_pursuit_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_regulated_pure_pursuit_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_regulated_pure_pursuit_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_regulated_pure_pursuit_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_regulated_pure_pursuit_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_regulated_pure_pursuit_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_regulated_pure_pursuit_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_regulated_pure_pursuit_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_regulated_pure_pursuit_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_regulated_pure_pursuit_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_regulated_pure_pursuit_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_rotation_shim_controller&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_rotation_shim_controller__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_rotation_shim_controller__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_rotation_shim_controller__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_rotation_shim_controller__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_rotation_shim_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_rotation_shim_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_rotation_shim_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_rotation_shim_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_rotation_shim_controller__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_rotation_shim_controller__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_rotation_shim_controller__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_rotation_shim_controller__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_route&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;N/A&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_route__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_route__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_route__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_route__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_rviz_plugins&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_rviz_plugins__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_rviz_plugins__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_rviz_plugins__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_rviz_plugins__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_rviz_plugins__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_rviz_plugins__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_rviz_plugins__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_rviz_plugins__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_rviz_plugins__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_rviz_plugins__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_rviz_plugins__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_rviz_plugins__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_simple_commander&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_simple_commander__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_simple_commander__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_simple_commander__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_simple_commander__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_simple_commander__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_simple_commander__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_simple_commander__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_simple_commander__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_simple_commander__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_simple_commander__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_simple_commander__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_simple_commander__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_smac_planner&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_smac_planner__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_smac_planner__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_smac_planner__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_smac_planner__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_smac_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_smac_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_smac_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_smac_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_smac_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_smac_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_smac_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_smac_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_smoother&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_smoother__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_smoother__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_smoother__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_smoother__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_system_tests&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_system_tests__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_system_tests__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_system_tests__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_system_tests__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_system_tests__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_system_tests__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_system_tests__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_system_tests__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_system_tests__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_system_tests__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_system_tests__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_system_tests__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_theta_star_planner&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_theta_star_planner__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_theta_star_planner__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_theta_star_planner__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_theta_star_planner__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_theta_star_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_theta_star_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_theta_star_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_theta_star_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_theta_star_planner__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_theta_star_planner__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_theta_star_planner__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_theta_star_planner__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_util&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_util__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_util__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_util__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_util__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_util__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_util__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_util__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_util__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_util__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_util__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_util__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_util__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_velocity_smoother&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_velocity_smoother__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_velocity_smoother__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_velocity_smoother__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_velocity_smoother__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_velocity_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_velocity_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_velocity_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_velocity_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_velocity_smoother__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_velocity_smoother__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_velocity_smoother__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_velocity_smoother__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_voxel_grid&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_voxel_grid__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_voxel_grid__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_voxel_grid__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_voxel_grid__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_voxel_grid__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_voxel_grid__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_voxel_grid__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_voxel_grid__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_voxel_grid__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_voxel_grid__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_voxel_grid__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_voxel_grid__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;nav2_waypoint_follower&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_waypoint_follower__ubuntu_jammy__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hsrc_uj__nav2_waypoint_follower__ubuntu_jammy__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_waypoint_follower__ubuntu_jammy_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Hbin_uj64__nav2_waypoint_follower__ubuntu_jammy_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jsrc_un__nav2_waypoint_follower__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jsrc_un__nav2_waypoint_follower__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_un64__nav2_waypoint_follower__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Jbin_un64__nav2_waypoint_follower__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Ksrc_un__nav2_waypoint_follower__ubuntu_noble__source/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Ksrc_un__nav2_waypoint_follower__ubuntu_noble__source/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Kbin_un64__nav2_waypoint_follower__ubuntu_noble_amd64__binary/&quot;&gt;&lt;img src=&quot;https://build.ros2.org/job/Kbin_un64__nav2_waypoint_follower__ubuntu_noble_amd64__binary/badge/icon&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>zeux/meshoptimizer</title>
      <link>https://github.com/zeux/meshoptimizer</link>
      <description>&lt;p&gt;Mesh optimization library that makes meshes smaller and faster to render&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐇 meshoptimizer &lt;a href=&quot;https://github.com/zeux/meshoptimizer/actions&quot;&gt;&lt;img src=&quot;https://github.com/zeux/meshoptimizer/workflows/build/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/github/zeux/meshoptimizer?branch=master&quot;&gt;&lt;img src=&quot;https://codecov.io/github/zeux/meshoptimizer/coverage.svg?branch=master&quot; alt=&quot;codecov.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/zeux/meshoptimizer/master/LICENSE.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/zeux/meshoptimizer&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/repo-github-green.svg?sanitize=true&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h2&gt;Purpose&lt;/h2&gt; 
&lt;p&gt;When a GPU renders triangle meshes, various stages of the GPU pipeline have to process vertex and index data. The efficiency of these stages depends on the data you feed to them; this library provides algorithms to help optimize meshes for these stages, as well as algorithms to reduce the mesh complexity and storage overhead.&lt;/p&gt; 
&lt;p&gt;The library provides a C and C++ interface for all algorithms; you can use it from C/C++ or from other languages via FFI (such as P/Invoke). If you want to use this library from Rust, you should use &lt;a href=&quot;https://crates.io/crates/meshopt&quot;&gt;meshopt crate&lt;/a&gt;. JavaScript interface for some algorithms is available through &lt;a href=&quot;https://www.npmjs.com/package/meshoptimizer&quot;&gt;meshoptimizer.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zeux/meshoptimizer/master/gltf/README.md&quot;&gt;gltfpack&lt;/a&gt;, which is a tool that can automatically optimize glTF files, is developed and distributed alongside the library.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;meshoptimizer is hosted on GitHub; you can download the latest release using git:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone -b v0.24 https://github.com/zeux/meshoptimizer.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively you can &lt;a href=&quot;https://github.com/zeux/meshoptimizer/archive/v0.24.zip&quot;&gt;download the .zip archive from GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The library is also available as a Linux package in several distributions (&lt;a href=&quot;https://aur.archlinux.org/packages/meshoptimizer/&quot;&gt;ArchLinux&lt;/a&gt;, &lt;a href=&quot;https://packages.debian.org/libmeshoptimizer&quot;&gt;Debian&lt;/a&gt;, &lt;a href=&quot;https://www.freshports.org/misc/meshoptimizer/&quot;&gt;FreeBSD&lt;/a&gt;, &lt;a href=&quot;https://mynixos.com/nixpkgs/package/meshoptimizer&quot;&gt;Nix&lt;/a&gt;, &lt;a href=&quot;https://packages.ubuntu.com/libmeshoptimizer&quot;&gt;Ubuntu&lt;/a&gt;), as well as a &lt;a href=&quot;https://github.com/microsoft/vcpkg/tree/master/ports/meshoptimizer&quot;&gt;Vcpkg port&lt;/a&gt; (see &lt;a href=&quot;https://learn.microsoft.com/en-us/vcpkg/get_started/get-started&quot;&gt;installation instructions&lt;/a&gt;) and a &lt;a href=&quot;https://conan.io/center/recipes/meshoptimizer&quot;&gt;Conan package&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zeux/meshoptimizer/master/gltf/README.md&quot;&gt;gltfpack&lt;/a&gt; is available as a pre-built binary on &lt;a href=&quot;https://github.com/zeux/meshoptimizer/releases&quot;&gt;Releases page&lt;/a&gt; or via &lt;a href=&quot;https://www.npmjs.com/package/gltfpack&quot;&gt;npm package&lt;/a&gt;. Native binaries are recommended since they are more efficient and support texture compression.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;meshoptimizer is distributed as a C/C++ header (&lt;code&gt;src/meshoptimizer.h&lt;/code&gt;) and a set of C++ source files (&lt;code&gt;src/*.cpp&lt;/code&gt;). To include it in your project, you can use one of two options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use CMake to build the library (either as a standalone project or as part of your project)&lt;/li&gt; 
 &lt;li&gt;Add source files to your project&#39;s build system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The source files are organized in such a way that you don&#39;t need to change your build-system settings, and you only need to add the source files for the algorithms you use. They should build without warnings or special compilation options on all major compilers. If you prefer amalgamated builds, you can also concatenate the source files into a single &lt;code&gt;.cpp&lt;/code&gt; file and build that instead.&lt;/p&gt; 
&lt;p&gt;To use meshoptimizer functions, simply &lt;code&gt;#include&lt;/code&gt; the header &lt;code&gt;meshoptimizer.h&lt;/code&gt;; the library source is C++, but the header is C-compatible.&lt;/p&gt; 
&lt;h2&gt;Core pipeline&lt;/h2&gt; 
&lt;p&gt;When optimizing a mesh, to maximize rendering efficiency you should typically feed it through a set of optimizations (the order is important!):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Indexing&lt;/li&gt; 
 &lt;li&gt;Vertex cache optimization&lt;/li&gt; 
 &lt;li&gt;(optional) Overdraw optimization&lt;/li&gt; 
 &lt;li&gt;Vertex fetch optimization&lt;/li&gt; 
 &lt;li&gt;Vertex quantization&lt;/li&gt; 
 &lt;li&gt;(optional) Shadow indexing&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Indexing&lt;/h3&gt; 
&lt;p&gt;Most algorithms in this library assume that a mesh has a vertex buffer and an index buffer. For algorithms to work well and also for GPU to render your mesh efficiently, the vertex buffer has to have no redundant vertices; you can generate an index buffer from an unindexed vertex buffer or reindex an existing (potentially redundant) index buffer as follows:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: meshoptimizer generally works with 32-bit (&lt;code&gt;unsigned int&lt;/code&gt;) indices, however when using C++ APIs you can use any integer type for index data by using the provided template overloads. By convention, remap tables always use &lt;code&gt;unsigned int&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;First, generate a remap table from your existing vertex (and, optionally, index) data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;size_t index_count = face_count * 3;
size_t unindexed_vertex_count = face_count * 3;
std::vector&amp;lt;unsigned int&amp;gt; remap(unindexed_vertex_count); // temporary remap table
size_t vertex_count = meshopt_generateVertexRemap(&amp;amp;remap[0], NULL, index_count,
    &amp;amp;unindexed_vertices[0], unindexed_vertex_count, sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that in this case we only have an unindexed vertex buffer; when input mesh has an index buffer, it will need to be passed to &lt;code&gt;meshopt_generateVertexRemap&lt;/code&gt; instead of &lt;code&gt;NULL&lt;/code&gt;, along with the correct source vertex count. In either case, the remap table is generated based on binary equivalence of the input vertices, so the resulting mesh will render the same way. Binary equivalence considers all input bytes, including padding which should be zero-initialized if the vertex structure has gaps.&lt;/p&gt; 
&lt;p&gt;After generating the remap table, you can allocate space for the target vertex buffer (&lt;code&gt;vertex_count&lt;/code&gt; elements) and index buffer (&lt;code&gt;index_count&lt;/code&gt; elements) and generate them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_remapIndexBuffer(indices, NULL, index_count, &amp;amp;remap[0]);
meshopt_remapVertexBuffer(vertices, &amp;amp;unindexed_vertices[0], unindexed_vertex_count, sizeof(Vertex), &amp;amp;remap[0]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then further optimize the resulting buffers by calling the other functions on them in-place.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;meshopt_generateVertexRemap&lt;/code&gt; uses binary equivalence of vertex data, which is generally a reasonable default; however, in some cases some attributes may have floating point drift causing extra vertices to be generated. For such cases, it may be necessary to quantize some attributes (most importantly, normals and tangents) before generating the remap, or use &lt;code&gt;meshopt_generateVertexRemapCustom&lt;/code&gt; algorithm that allows comparing individual attributes with tolerance by providing a custom comparison function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;size_t vertex_count = meshopt_generateVertexRemapCustom(&amp;amp;remap[0], NULL, index_count,
    &amp;amp;unindexed_vertices[0].px, unindexed_vertex_count, sizeof(Vertex),
    [&amp;amp;](unsigned int lhs, unsigned int rhs) -&amp;gt; bool {
        const Vertex&amp;amp; lv = unindexed_vertices[lhs];
        const Vertex&amp;amp; rv = unindexed_vertices[rhs];

        return fabsf(lv.tx - rv.tx) &amp;lt; 1e-3f &amp;amp;&amp;amp; fabsf(lv.ty - rv.ty) &amp;lt; 1e-3f;
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vertex cache optimization&lt;/h3&gt; 
&lt;p&gt;When the GPU renders the mesh, it has to run the vertex shader for each vertex; usually GPUs have a built-in fixed size cache that stores the transformed vertices (the result of running the vertex shader), and uses this cache to reduce the number of vertex shader invocations. This cache is usually small, 16-32 vertices, and can have different replacement policies; to use this cache efficiently, you have to reorder your triangles to maximize the locality of reused vertex references like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_optimizeVertexCache(indices, indices, index_count, vertex_count);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The details of vertex reuse vary between different GPU architectures, so vertex cache optimization uses an adaptive algorithm that produces a triangle sequence with good locality that works well across different GPUs. Alternatively, you can use an algorithm that optimizes specifically for fixed-size FIFO caches: &lt;code&gt;meshopt_optimizeVertexCacheFifo&lt;/code&gt; (with a recommended cache size of 16). While it generally produces less performant results on most GPUs, it runs ~2x faster, which may benefit rapid content iteration.&lt;/p&gt; 
&lt;h3&gt;Overdraw optimization&lt;/h3&gt; 
&lt;p&gt;After transforming the vertices, GPU sends the triangles for rasterization which results in generating pixels that are usually first ran through the depth test, and pixels that pass it get the pixel shader executed to generate the final color. As pixel shaders get more expensive, it becomes more and more important to reduce overdraw. While in general improving overdraw requires view-dependent operations, this library provides an algorithm to reorder triangles to minimize the overdraw from all directions, which you can run after vertex cache optimization like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_optimizeOverdraw(indices, indices, index_count, &amp;amp;vertices[0].x, vertex_count, sizeof(Vertex), 1.05f);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The overdraw optimizer needs to read vertex positions as a float3 from the vertex; the code snippet above assumes that the vertex stores position as &lt;code&gt;float x, y, z&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When performing the overdraw optimization you have to specify a floating-point threshold parameter. The algorithm tries to maintain a balance between vertex cache efficiency and overdraw; the threshold determines how much the algorithm can compromise the vertex cache hit ratio, with 1.05 meaning that the resulting ratio should be at most 5% worse than before the optimization.&lt;/p&gt; 
&lt;p&gt;Note that depending on the renderer structure and target hardware, the optimization may or may not be beneficial; for example, mobile GPUs with tiled deferred rendering (PowerVR, Apple) would not benefit from this optimization. For vertex heavy scenes it&#39;s recommended to measure the performance impact to ensure that the reduced vertex cache efficiency is outweighed by the reduced overdraw.&lt;/p&gt; 
&lt;h3&gt;Vertex fetch optimization&lt;/h3&gt; 
&lt;p&gt;After the final triangle order has been established, we still can optimize the vertex buffer for memory efficiency. Before running the vertex shader GPU has to fetch the vertex attributes from the vertex buffer; the fetch is usually backed by a memory cache, and as such optimizing the data for the locality of memory access is important. You can do this by running this code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_optimizeVertexFetch(vertices, indices, index_count, vertices, vertex_count, sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will reorder the vertices in the vertex buffer to try to improve the locality of reference, and rewrite the indices in place to match; if the vertex data is stored using multiple streams, you should use &lt;code&gt;meshopt_optimizeVertexFetchRemap&lt;/code&gt; instead. This optimization has to be performed on the final index buffer since the optimal vertex order depends on the triangle order.&lt;/p&gt; 
&lt;p&gt;Note that the algorithm does not try to model cache replacement precisely and instead just orders vertices in the order of use, which generally produces results that are close to optimal.&lt;/p&gt; 
&lt;h3&gt;Vertex quantization&lt;/h3&gt; 
&lt;p&gt;To optimize memory bandwidth when fetching the vertex data even further, and to reduce the amount of memory required to store the mesh, it is often beneficial to quantize the vertex attributes to smaller types. While this optimization can technically run at any part of the pipeline (and sometimes doing quantization as the first step can improve indexing by merging almost identical vertices), it generally is easier to run this after all other optimizations since some of them require access to float3 positions.&lt;/p&gt; 
&lt;p&gt;Quantization is usually domain specific; it&#39;s common to quantize normals using 3 8-bit integers but you can use higher-precision quantization (for example using 10 bits per component in a 10_10_10_2 format), or a different encoding to use just 2 components. For positions and texture coordinate data the two most common storage formats are half precision floats, and 16-bit normalized integers that encode the position relative to the AABB of the mesh or the UV bounding rectangle.&lt;/p&gt; 
&lt;p&gt;The number of possible combinations here is very large but this library does provide the building blocks, specifically functions to quantize floating point values to normalized integers, as well as half-precision floats. For example, here&#39;s how you can quantize a normal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;unsigned int normal =
    (meshopt_quantizeUnorm(v.nx, 10) &amp;lt;&amp;lt; 20) |
    (meshopt_quantizeUnorm(v.ny, 10) &amp;lt;&amp;lt; 10) |
     meshopt_quantizeUnorm(v.nz, 10);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and here&#39;s how you can quantize a position:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;unsigned short px = meshopt_quantizeHalf(v.x);
unsigned short py = meshopt_quantizeHalf(v.y);
unsigned short pz = meshopt_quantizeHalf(v.z);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since quantized vertex attributes often need to remain in their compact representations for efficient transfer and storage, they are usually dequantized during vertex processing by configuring the GPU vertex input correctly to expect normalized integers or half precision floats, which often needs no or minimal changes to the shader code. When CPU dequantization is required instead, &lt;code&gt;meshopt_dequantizeHalf&lt;/code&gt; can be used to convert half precision values back to single precision; for normalized integer formats, the dequantization just requires dividing by 2^N-1 for unorm and 2^(N-1)-1 for snorm variants, for example manually reversing &lt;code&gt;meshopt_quantizeUnorm(v, 10)&lt;/code&gt; can be done by dividing by 1023.&lt;/p&gt; 
&lt;h3&gt;Shadow indexing&lt;/h3&gt; 
&lt;p&gt;Many rendering pipelines require meshes to be rendered to depth-only targets, such as shadow maps or during a depth pre-pass, in addition to color/G-buffer targets. While using the same geometry data for both cases is possible, reducing the number of unique vertices for depth-only rendering can be beneficial, especially when the source geometry has many attribute seams due to faceted shading or lightmap texture seams.&lt;/p&gt; 
&lt;p&gt;To achieve this, this library provides the &lt;code&gt;meshopt_generateShadowIndexBuffer&lt;/code&gt; algorithm, which generates a second (shadow) index buffer that can be used with the original vertex data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; shadow_indices(index_count);
// note: this assumes Vertex starts with float3 positions and should be adjusted accordingly for quantized positions
meshopt_generateShadowIndexBuffer(&amp;amp;shadow_indices[0], indices, index_count, &amp;amp;vertices[0].x, vertex_count, sizeof(float) * 3, sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because the vertex data is shared, shadow indexing should be done after other optimizations of the vertex/index data. However, it&#39;s possible (and recommended) to optimize the resulting shadow index buffer for vertex cache:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_optimizeVertexCache(&amp;amp;shadow_indices[0], &amp;amp;shadow_indices[0], index_count, vertex_count);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In some cases, it may be beneficial to split the vertex positions into a separate buffer to maximize efficiency for depth-only rendering. Note that the example above assumes only positions are relevant for shadow rendering, but more complex materials may require adding texture coordinates (for alpha testing) or skinning data to the vertex portion used as a key. &lt;code&gt;meshopt_generateShadowIndexBufferMulti&lt;/code&gt; can be useful for these cases if the relevant data is not contiguous.&lt;/p&gt; 
&lt;p&gt;Note that for meshes with optimal indexing and few attribute seams, the shadow index buffer will be very similar to the original index buffer, so may not be always worth generating a separate shadow index buffer even if the rendering pipeline relies on depth-only passes.&lt;/p&gt; 
&lt;h2&gt;Clusterization&lt;/h2&gt; 
&lt;p&gt;While traditionally meshes have served as a unit of rendering, new approaches to rendering and raytracing are starting to use a smaller unit of work, such as clusters or meshlets. This allows more freedom in how the geometry is processed, and can lead to better performance and more efficient use of GPU hardware. This section describes algorithms designed to work with meshes as sets of clusters.&lt;/p&gt; 
&lt;h3&gt;Mesh shading&lt;/h3&gt; 
&lt;p&gt;Modern GPUs are beginning to deviate from the traditional rasterization model. NVidia GPUs starting from Turing and AMD GPUs starting from RDNA2 provide a new programmable geometry pipeline that, instead of being built around index buffers and vertex shaders, is built around mesh shaders - a new shader type that allows to provide a batch of work to the rasterizer.&lt;/p&gt; 
&lt;p&gt;Using mesh shaders in context of traditional mesh rendering provides an opportunity to use a variety of optimization techniques, starting from more efficient vertex reuse, using various forms of culling (e.g. cluster frustum or occlusion culling) and in-memory compression to maximize the utilization of GPU hardware. Beyond traditional rendering mesh shaders provide a richer programming model that can synthesize new geometry more efficiently than common alternatives such as geometry shaders. Mesh shading can be accessed via Vulkan or Direct3D 12 APIs; please refer to &lt;a href=&quot;https://developer.nvidia.com/blog/introduction-turing-mesh-shaders/&quot;&gt;Introduction to Turing Mesh Shaders&lt;/a&gt; and &lt;a href=&quot;https://devblogs.microsoft.com/directx/coming-to-directx-12-mesh-shaders-and-amplification-shaders-reinventing-the-geometry-pipeline/&quot;&gt;Mesh Shaders and Amplification Shaders: Reinventing the Geometry Pipeline&lt;/a&gt; for additional information.&lt;/p&gt; 
&lt;p&gt;To use mesh shaders for conventional rendering efficiently, geometry needs to be converted into a series of meshlets; each meshlet represents a small subset of the original mesh and comes with a small set of vertices and a separate micro-index buffer that references vertices in the meshlet. This information can be directly fed to the rasterizer from the mesh shader. This library provides algorithms to create meshlet data for a mesh, and - assuming geometry is static - can compute bounding information that can be used to perform cluster culling, a technique that can reject a meshlet if it&#39;s invisible on screen.&lt;/p&gt; 
&lt;p&gt;To generate meshlet data, this library provides &lt;code&gt;meshopt_buildMeshlets&lt;/code&gt; algorithm, which tries to balance topological efficiency (by maximizing vertex reuse inside meshlets) with culling efficiency (by minimizing meshlet radius and triangle direction divergence) and produces GPU-friendly data. As an alternative (that can be useful for load-time processing), &lt;code&gt;meshopt_buildMeshletsScan&lt;/code&gt; can create the meshlet data using a vertex cache-optimized index buffer as a starting point by greedily aggregating consecutive triangles until they go over the meshlet limits. &lt;code&gt;meshopt_buildMeshlets&lt;/code&gt; is recommended for offline data processing even if cone culling is not used.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const size_t max_vertices = 64;
const size_t max_triangles = 124;
const float cone_weight = 0.0f;

size_t max_meshlets = meshopt_buildMeshletsBound(indices.size(), max_vertices, max_triangles);
std::vector&amp;lt;meshopt_Meshlet&amp;gt; meshlets(max_meshlets);
std::vector&amp;lt;unsigned int&amp;gt; meshlet_vertices(max_meshlets * max_vertices);
std::vector&amp;lt;unsigned char&amp;gt; meshlet_triangles(max_meshlets * max_triangles * 3);

size_t meshlet_count = meshopt_buildMeshlets(meshlets.data(), meshlet_vertices.data(), meshlet_triangles.data(), indices.data(),
    indices.size(), &amp;amp;vertices[0].x, vertices.size(), sizeof(Vertex), max_vertices, max_triangles, cone_weight);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To generate the meshlet data, &lt;code&gt;max_vertices&lt;/code&gt; and &lt;code&gt;max_triangles&lt;/code&gt; need to be set within limits supported by the hardware; for NVidia the values of 64 and 124 are recommended (&lt;code&gt;max_triangles&lt;/code&gt; must be divisible by 4 so 124 is the value closest to official NVidia&#39;s recommended 126). &lt;code&gt;cone_weight&lt;/code&gt; should be left as 0 if cluster cone culling is not used, and set to a value between 0 and 1 to balance cone culling efficiency with other forms of culling like frustum or occlusion culling (&lt;code&gt;0.25&lt;/code&gt; is a reasonable default).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that for earlier AMD GPUs, the best configurations tend to use the same limits for &lt;code&gt;max_vertices&lt;/code&gt; and &lt;code&gt;max_triangles&lt;/code&gt;, such as 64 and 64, or 128 and 128. Additionally, while NVidia recommends 64/124 as a good configuration, consider using a different configuration like &lt;code&gt;max_vertices 64, max_triangles 96&lt;/code&gt;, to provide more realistic limits that are achievable on real-world meshes, and to reduce the overhead on other GPUs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Each resulting meshlet refers to a portion of &lt;code&gt;meshlet_vertices&lt;/code&gt; and &lt;code&gt;meshlet_triangles&lt;/code&gt; arrays; the arrays are overallocated for the worst case so it&#39;s recommended to trim them before saving them as an asset / uploading them to the GPU:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const meshopt_Meshlet&amp;amp; last = meshlets[meshlet_count - 1];

meshlet_vertices.resize(last.vertex_offset + last.vertex_count);
meshlet_triangles.resize(last.triangle_offset + ((last.triangle_count * 3 + 3) &amp;amp; ~3));
meshlets.resize(meshlet_count);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on the application, other strategies of storing the data can be useful; for example, &lt;code&gt;meshlet_vertices&lt;/code&gt; serves as indices into the original vertex buffer but it might be worthwhile to generate a mini vertex buffer for each meshlet to remove the extra indirection when accessing vertex data, or it might be desirable to compress vertex data as vertices in each meshlet are likely to be very spatially coherent.&lt;/p&gt; 
&lt;p&gt;For optimal performance, it is recommended to further optimize each meshlet in isolation for better triangle and vertex locality by calling &lt;code&gt;meshopt_optimizeMeshlet&lt;/code&gt; on vertex and index data like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_optimizeMeshlet(&amp;amp;meshlet_vertices[m.vertex_offset], &amp;amp;meshlet_triangles[m.triangle_offset], m.triangle_count, m.vertex_count);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Different applications will choose different strategies for rendering meshlets; on a GPU capable of mesh shading, meshlets can be rendered directly; for example, a basic GLSL shader for &lt;code&gt;VK_EXT_mesh_shader&lt;/code&gt; extension could look like this (parts omitted for brevity):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-glsl&quot;&gt;layout(binding = 0) readonly buffer Meshlets { Meshlet meshlets[]; };
layout(binding = 1) readonly buffer MeshletVertices { uint meshlet_vertices[]; };
layout(binding = 2) readonly buffer MeshletTriangles { uint8_t meshlet_triangles[]; };

void main() {
    Meshlet meshlet = meshlets[gl_WorkGroupID.x];
    SetMeshOutputsEXT(meshlet.vertex_count, meshlet.triangle_count);

    for (uint i = gl_LocalInvocationIndex; i &amp;lt; meshlet.vertex_count; i += gl_WorkGroupSize.x) {
        uint index = meshlet_vertices[meshlet.vertex_offset + i];
        gl_MeshVerticesEXT[i].gl_Position = world_view_projection * vec4(vertex_positions[index], 1);
    }

    for (uint i = gl_LocalInvocationIndex; i &amp;lt; meshlet.triangle_count; i += gl_WorkGroupSize.x) {
        uint offset = meshlet.triangle_offset + i * 3;
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
            meshlet_triangles[offset], meshlet_triangles[offset + 1], meshlet_triangles[offset + 2]);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After generating the meshlet data, it&#39;s possible to generate extra data for each meshlet that can be saved and used at runtime to perform cluster culling, where each meshlet can be discarded if it&#39;s guaranteed to be invisible. To generate the data, &lt;code&gt;meshopt_computeMeshletBounds&lt;/code&gt; can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_Bounds bounds = meshopt_computeMeshletBounds(&amp;amp;meshlet_vertices[m.vertex_offset], &amp;amp;meshlet_triangles[m.triangle_offset],
    m.triangle_count, &amp;amp;vertices[0].x, vertices.size(), sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting &lt;code&gt;bounds&lt;/code&gt; values can be used to perform frustum or occlusion culling using the bounding sphere, or cone culling using the cone axis/angle (which will reject the entire meshlet if all triangles are guaranteed to be back-facing from the camera point of view):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;if (dot(normalize(cone_apex - camera_position), cone_axis) &amp;gt;= cone_cutoff) reject();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cluster culling should ideally run at a lower frequency than mesh shading, either using amplification/task shaders, or using a separate compute dispatch.&lt;/p&gt; 
&lt;h3&gt;Clustered raytracing&lt;/h3&gt; 
&lt;p&gt;In addition to rasterization, meshlets can also be used for ray tracing. NVidia GPUs starting from Turing with recent drivers provide support for cluster acceleration structures (via &lt;code&gt;VK_NV_cluster_acceleration_structure&lt;/code&gt; extension / NVAPI); instead of building a traditional BLAS, a cluster acceleration structure can be built for each meshlet and combined into a single clustered BLAS. While this currently results in reduced ray tracing performance for static geometry (for which a traditional BLAS may be more suitable), it allows updating the individual clusters without having to rebuild or refit the entire BLAS, which can be useful for mesh deformation or hierarchical level of detail.&lt;/p&gt; 
&lt;p&gt;When using meshlets for raytracing, the performance characteristics that matter differ from when rendering meshes with rasterization. For raytracing, clusters with optimal spatial division that minimize ray-triangle intersection tests are preferred, while for rasterization, clusters with maximum triangle count within vertex limits are ideal.&lt;/p&gt; 
&lt;p&gt;To generate meshlets optimized for raytracing, this library provides &lt;code&gt;meshopt_buildMeshletsSpatial&lt;/code&gt; algorithm, which builds clusters using surface area heuristic (SAH) to produce raytracing-friendly cluster distributions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const size_t max_vertices = 64;
const size_t min_triangles = 16;
const size_t max_triangles = 64;
const float fill_weight = 0.5f;

size_t max_meshlets = meshopt_buildMeshletsBound(indices.size(), max_vertices, min_triangles); // note: use min_triangles to compute worst case bound
std::vector&amp;lt;meshopt_Meshlet&amp;gt; meshlets(max_meshlets);
std::vector&amp;lt;unsigned int&amp;gt; meshlet_vertices(max_meshlets * max_vertices);
std::vector&amp;lt;unsigned char&amp;gt; meshlet_triangles(max_meshlets * max_triangles * 3);

size_t meshlet_count = meshopt_buildMeshletsSpatial(meshlets.data(), meshlet_vertices.data(), meshlet_triangles.data(), indices.data(),
    indices.size(), &amp;amp;vertices[0].x, vertices.size(), sizeof(Vertex), max_vertices, min_triangles, max_triangles, fill_weight);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The algorithm recursively subdivides the triangles into a BVH-like hierarchy using SAH for optimal spatial partitioning while balancing cluster size; this results in clusters that are significantly more efficient to raytrace compared to clusters generated by &lt;code&gt;meshopt_buildMeshlets&lt;/code&gt;, but can still be used for rasterization (for example, to build visibility buffers or G-buffers).&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;min_triangles&lt;/code&gt; and &lt;code&gt;max_triangles&lt;/code&gt; parameters control the allowed range of triangles per cluster. For optimal raytracing performance, &lt;code&gt;min_triangles&lt;/code&gt; should be at most &lt;code&gt;max_triangles/2&lt;/code&gt; (or, ideally, &lt;code&gt;max_triangles/4&lt;/code&gt;) to give the algorithm enough freedom to produce high-quality spatial partitioning. For meshes with few seams due to normal or UV discontinuities, using &lt;code&gt;max_vertices&lt;/code&gt; equal to &lt;code&gt;max_triangles&lt;/code&gt; is recommended when rasterization performance is a concern; for meshes with many seams or for renderers that primarily use meshlets for ray tracing, a higher &lt;code&gt;max_vertices&lt;/code&gt; value should be used as it ensures that more clusters can fully utilize the triangle limit.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;fill_weight&lt;/code&gt; parameter (typically between 0 and 1, although values higher than 1 could be used to prioritize cluster fill even more) controls the trade-off between pure SAH optimization and triangle utilization. A value of 0 will optimize purely for SAH, resulting in best raytracing performance but potentially smaller clusters. Values between 0.5 and 0.75 typically provide a good balance of SAH quality vs triangle count.&lt;/p&gt; 
&lt;h3&gt;Point cloud clusterization&lt;/h3&gt; 
&lt;p&gt;Both of the meshlet algorithms are designed to work with triangle meshes. In some cases, splitting a point cloud into fixed size clusters can be useful; the resulting point clusters could be rendered via mesh or compute shaders, or the resulting subdivision can be used to parallelize point processing while maintaining locality of points. To that end, this library provides &lt;code&gt;meshopt_spatialClusterPoints&lt;/code&gt; algorithm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const size_t cluster_size = 256;

std::vector&amp;lt;unsigned int&amp;gt; index(mesh.vertices.size());
meshopt_spatialClusterPoints(&amp;amp;index[0], &amp;amp;mesh.vertices[0].px, mesh.vertices.size(), sizeof(Vertex), cluster_size);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting index buffer could be used to process the points directly, or reorganize the point data into flat contiguous arrays. Every consecutive chunk of &lt;code&gt;cluster_size&lt;/code&gt; points in the index buffer refers to a single cluster, with just the last cluster containing fewer points if the total number of points is not a multiple of &lt;code&gt;cluster_size&lt;/code&gt;. Note that the index buffer is not a remap table, so &lt;code&gt;meshopt_remapVertexBuffer&lt;/code&gt; can&#39;t be used to flatten the point data.&lt;/p&gt; 
&lt;h3&gt;Cluster partitioning&lt;/h3&gt; 
&lt;p&gt;When working with clustered geometry, it can be beneficial to organize clusters into larger groups (partitions) for more efficient processing or workload distribution. This library provides an algorithm to partition clusters into groups of similar size while prioritizing locality:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const size_t partition_size = 32;

std::vector&amp;lt;unsigned int&amp;gt; cluster_partitions(cluster_count);
size_t partition_count = meshopt_partitionClusters(&amp;amp;cluster_partitions[0], &amp;amp;cluster_indices[0], total_index_count,
    &amp;amp;cluster_index_counts[0], cluster_count, &amp;amp;vertices[0].x, vertex_count, sizeof(Vertex), partition_size);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The algorithm assigns each cluster to a partition, aiming for a target partition size while prioritizing topological locality (sharing vertices) and spatial locality. The resulting partitions can be used for more efficient batched processing of clusters, or for hierarchial simplification schemes similar to Nanite.&lt;/p&gt; 
&lt;p&gt;If vertex positions are specified (not NULL), spatial locality will influence priority of merging clusters; otherwise, the algorithm will rely solely on topological connections.&lt;/p&gt; 
&lt;p&gt;After partitioning, each element in the destination array contains the partition ID (ranging from 0 to the returned partition count minus 1) for the corresponding cluster. Note that the partitions may be both smaller and larger than the target size.&lt;/p&gt; 
&lt;h2&gt;Mesh compression&lt;/h2&gt; 
&lt;p&gt;In case storage size or transmission bandwidth is of importance, you might want to additionally compress vertex and index data. While several mesh compression libraries, like Google Draco, are available, they typically are designed to maximize the compression ratio at the cost of disturbing the vertex/index order (which makes the meshes inefficient to render on GPU) or decompression performance. They also frequently don&#39;t support custom game-ready quantized vertex formats and thus require to re-quantize the data after loading it, introducing extra quantization errors and making decoding slower.&lt;/p&gt; 
&lt;p&gt;Alternatively you can use general purpose compression libraries like zstd or Oodle to compress vertex/index data - however these compressors aren&#39;t designed to exploit redundancies in vertex/index data and as such compression rates can be unsatisfactory.&lt;/p&gt; 
&lt;p&gt;To that end, this library provides algorithms to &quot;encode&quot; vertex and index data. The result of the encoding is generally significantly smaller than initial data, and remains compressible with general purpose compressors - so you can either store encoded data directly (for modest compression ratios and maximum decoding performance), or further compress it with LZ4/zstd/Oodle to maximize compression ratio.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: this compression scheme is available as a glTF extension &lt;a href=&quot;https://github.com/KhronosGroup/glTF/raw/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md&quot;&gt;EXT_meshopt_compression&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Vertex compression&lt;/h3&gt; 
&lt;p&gt;This library provides a lossless algorithm to encode/decode vertex data. To encode vertices, you need to allocate a target buffer (using the worst case bound) and call the encoding function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned char&amp;gt; vbuf(meshopt_encodeVertexBufferBound(vertex_count, sizeof(Vertex)));
vbuf.resize(meshopt_encodeVertexBuffer(&amp;amp;vbuf[0], vbuf.size(), vertices, vertex_count, sizeof(Vertex)));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To decode the data at runtime, call the decoding function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;int res = meshopt_decodeVertexBuffer(vertices, vertex_count, sizeof(Vertex), &amp;amp;vbuf[0], vbuf.size());
assert(res == 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that vertex encoding assumes that vertex buffer was optimized for vertex fetch, and that vertices are quantized. Feeding unoptimized data into the encoder may produce poor compression ratios. The codec is lossless by itself - the only lossy step is quantization/reordering or filters that you may apply before encoding. Additionally, if the vertex data contains padding bytes, they should be zero-initialized to ensure that the encoder does not need to store uninitialized data.&lt;/p&gt; 
&lt;p&gt;Decoder is heavily optimized and can directly target write-combined memory; you can expect it to run at 3-6 GB/s on modern desktop CPUs. Compression ratio depends on the data; vertex data compression ratio is typically around 2-4x (compared to already quantized and optimally packed data). General purpose lossless compressors can further improve the compression ratio at some cost to decoding performance.&lt;/p&gt; 
&lt;p&gt;The vertex codec tries to take advantage of the inherent locality of sequential vertices and identify bit patterns that repeat in consecutive vertices. Typically, vertex cache + vertex fetch provides a reasonably local vertex traversal order; without an index buffer, it is recommended to sort vertices spatially (via &lt;code&gt;meshopt_spatialSortRemap&lt;/code&gt;) to improve the compression ratio.&lt;/p&gt; 
&lt;p&gt;It is crucial to correctly specify the stride when encoding vertex data; however, for compression ratio it does not matter whether the vertices are interleaved or deinterleaved, as the codecs perform full byte deinterleaving internally. The stride of each stream must be a multiple of 4 bytes.&lt;/p&gt; 
&lt;p&gt;For optimal compression results, the values should be quantized to small integers. It can be valuable to use bit counts that are not multiples of 8. For example, instead of using 16 bits to represent texture coordinates, use 12-bit integers and divide by 4095 in the shader. Alternatively, using half-precision floats can often achieve good results. For single-precision floating-point data, it&#39;s recommended to use &lt;code&gt;meshopt_quantizeFloat&lt;/code&gt; to remove entropy from the lower bits of the mantissa; for best results, consider using 15 bits or 7 bits for extreme compression. For normal or tangent vectors, using octahedral encoding is recommended over three components as it reduces redundancy; similarly, consider using 10-12 bits per component instead of 16.&lt;/p&gt; 
&lt;p&gt;When data is bit packed, using v1 vertex codec and specifying compression level 3 (&lt;code&gt;meshopt_encodeVertexBufferLevel&lt;/code&gt; with level 3 and version 1) can improve the compression further by redistributing bits between components. Note that v1 vertex codec (&lt;code&gt;meshopt_encodeVertexVersion(1)&lt;/code&gt;) is recommended regardless, as it improves compression ratios and decoding performance even absent bit packing.&lt;/p&gt; 
&lt;h3&gt;Index compression&lt;/h3&gt; 
&lt;p&gt;This library also provides algorithms to encode/decode index data. To encode triangle indices, you need to allocate a target buffer (using the worst case bound) and call the encoding function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned char&amp;gt; ibuf(meshopt_encodeIndexBufferBound(index_count, vertex_count));
ibuf.resize(meshopt_encodeIndexBuffer(&amp;amp;ibuf[0], ibuf.size(), indices, index_count));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To decode the data at runtime, call the decoding function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;int res = meshopt_decodeIndexBuffer(indices, index_count, &amp;amp;ibuf[0], ibuf.size());
assert(res == 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that index encoding assumes that the index buffer was optimized for vertex cache and vertex fetch. Feeding unoptimized data into the encoder will produce poor compression ratios. Codec preserves the order of triangles, however it can rotate each triangle to improve compression ratio (which means the provoking vertex may change).&lt;/p&gt; 
&lt;p&gt;Decoder is heavily optimized and can directly target write-combined memory; you can expect it to run at 3-6 GB/s on modern desktop CPUs.&lt;/p&gt; 
&lt;p&gt;The index codec targets 1 byte per triangle as a best case (6x smaller than raw 16-bit index data); on real-world meshes, it&#39;s typical to achieve 1-1.2 bytes per triangle. To reach this, the index data needs to be optimized for vertex cache and vertex fetch. Optimizations that do not disrupt triangle locality (such as overdraw) are safe to use in between. To reduce the data size further, it&#39;s possible to use &lt;code&gt;meshopt_optimizeVertexCacheStrip&lt;/code&gt; instead of &lt;code&gt;meshopt_optimizeVertexCache&lt;/code&gt; when optimizing for vertex cache. This trades off some efficiency in vertex transform for smaller index (and sometimes vertex) data.&lt;/p&gt; 
&lt;p&gt;When referenced vertex indices are not sequential, the index codec will use around 2 bytes per index. This can happen when the referenced vertices are a sparse subset of the vertex buffer, such as when encoding LODs. General-purpose compression can be especially helpful in this case.&lt;/p&gt; 
&lt;p&gt;Index buffer codec only supports triangle list topology; when encoding triangle strips or line lists, use &lt;code&gt;meshopt_encodeIndexSequence&lt;/code&gt;/&lt;code&gt;meshopt_decodeIndexSequence&lt;/code&gt; instead. This codec typically encodes indices into ~1 byte per index, but compressing the results further with a general purpose compressor can improve the results to 1-3 bits per index.&lt;/p&gt; 
&lt;h3&gt;Point cloud compression&lt;/h3&gt; 
&lt;p&gt;The vertex encoding algorithms can be used to compress arbitrary streams of attribute data; one other use case besides triangle meshes is point cloud data. Typically point clouds come with position, color and possibly other attributes but don&#39;t have an implied point order.&lt;/p&gt; 
&lt;p&gt;To compress point clouds efficiently, it&#39;s recommended to first preprocess the points by sorting them using the spatial sort algorithm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; remap(point_count);
meshopt_spatialSortRemap(&amp;amp;remap[0], positions, point_count, sizeof(vec3));

// for each attribute stream
meshopt_remapVertexBuffer(positions, positions, point_count, sizeof(vec3), &amp;amp;remap[0]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After this the resulting arrays should be quantized (e.g. using 16-bit fixed point numbers for positions and 8-bit color components), and the result can be compressed using &lt;code&gt;meshopt_encodeVertexBuffer&lt;/code&gt; as described in the previous section. To decompress, &lt;code&gt;meshopt_decodeVertexBuffer&lt;/code&gt; will recover the quantized data that can be used directly or converted back to original floating-point data. The compression ratio depends on the nature of source data, for colored points it&#39;s typical to get 35-40 bits per point.&lt;/p&gt; 
&lt;h3&gt;Vertex filters&lt;/h3&gt; 
&lt;p&gt;To further leverage the inherent structure of some vertex data, it&#39;s possible to use filters that encode and decode the data in a lossy manner. This is similar to quantization but can be used without having to change the shader code. After decoding, the filter transformation needs to be reversed. For native game engine pipelines, it is usually more optimal to carefully prequantize and pretransform the vertex data, but sometimes (for example when serializing data in glTF format) this is not a practical option and filters are more convenient. This library provides four filters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Octahedral filter (&lt;code&gt;meshopt_encodeFilterOct&lt;/code&gt;/&lt;code&gt;meshopt_decodeFilterOct&lt;/code&gt;) encodes quantized (snorm) normal or tangent vectors using octahedral encoding. Any number of bits &amp;lt;= 16 can be used with 4 bytes or 8 bytes per vector.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Quaternion filter (&lt;code&gt;meshopt_encodeFilterQuat&lt;/code&gt;/&lt;code&gt;meshopt_decodeFilterQuat&lt;/code&gt;) encodes quantized (snorm) quaternion vectors; this can be used to encode rotations or tangent frames. Any number of bits between 4 and 16 can be used with 8 bytes per vector.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Exponential filter (&lt;code&gt;meshopt_encodeFilterExp&lt;/code&gt;/&lt;code&gt;meshopt_decodeFilterExp&lt;/code&gt;) encodes single-precision floating-point vectors; this can be used to encode arbitrary floating-point data more efficiently. In addition to an arbitrary bit count (&amp;lt;= 24), the filter takes a &quot;mode&quot; parameter that allows specifying how the exponent sharing is performed to trade off compression ratio and quality:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;meshopt_EncodeExpSeparate&lt;/code&gt; does not share exponents and results in the largest output&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;meshopt_EncodeExpSharedVector&lt;/code&gt; shares exponents between different components of the same vector&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;meshopt_EncodeExpSharedComponent&lt;/code&gt; shares exponents between the same component in different vectors&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;meshopt_EncodeExpClamped&lt;/code&gt; does not share exponents but clamps the exponent range to reduce exponent entropy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Color filter (&lt;code&gt;meshopt_encodeFilterColor&lt;/code&gt;/&lt;code&gt;meshopt_decodeFilterColor&lt;/code&gt;) encodes quantized (unorm) RGBA colors using YCoCg encoding. Any number of bits &amp;lt;= 16 can be used with 4 bytes or 8 bytes per vector.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that all filters are lossy and require the data to be deinterleaved with one attribute per stream; this facilitates efficient SIMD implementation of filter decoders, which decodes at 5-10 GB/s on modern desktop CPUs, allowing the overall decompression speed to be closer to that of the raw vertex codec.&lt;/p&gt; 
&lt;h3&gt;Versioning and compatibility&lt;/h3&gt; 
&lt;p&gt;The following guarantees on data compatibility are provided for point releases (&lt;em&gt;no&lt;/em&gt; guarantees are given for development branch):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Data encoded with older versions of the library can always be decoded with newer versions;&lt;/li&gt; 
 &lt;li&gt;Data encoded with newer versions of the library can be decoded with older versions, provided that encoding versions are set correctly; if binary stability of encoded data is important, use &lt;code&gt;meshopt_encodeVertexVersion&lt;/code&gt; and &lt;code&gt;meshopt_encodeIndexVersion&lt;/code&gt; to &#39;pin&#39; the data versions (or &lt;code&gt;version&lt;/code&gt; argument of &lt;code&gt;meshopt_encodeVertexBufferLevel&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, vertex data is encoded for format version 0 (compatible with meshoptimizer v0.8+), and index data is encoded for format version 1 (compatible with meshoptimizer v0.14+). When decoding the data, the decoder will automatically detect the version from the data header.&lt;/p&gt; 
&lt;h2&gt;Simplification&lt;/h2&gt; 
&lt;p&gt;All algorithms presented so far don&#39;t affect visual appearance at all, with the exception of quantization that has minimal controlled impact. However, fundamentally the most effective way to reduce the rendering or transmission cost of a mesh is to reduce the number of triangles in the mesh.&lt;/p&gt; 
&lt;h3&gt;Basic simplification&lt;/h3&gt; 
&lt;p&gt;This library provides a simplification algorithm, &lt;code&gt;meshopt_simplify&lt;/code&gt;, that reduces the number of triangles in the mesh. Given a vertex and an index buffer, it generates a second index buffer that uses existing vertices in the vertex buffer. This index buffer can be used directly for rendering with the original vertex buffer (preferably after vertex cache optimization using &lt;code&gt;meshopt_optimizeVertexCache&lt;/code&gt;), or a new compact vertex/index buffer can be generated using &lt;code&gt;meshopt_optimizeVertexFetch&lt;/code&gt; that uses the optimal number and order of vertices.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;float threshold = 0.2f;
size_t target_index_count = size_t(index_count * threshold);
float target_error = 1e-2f;

std::vector&amp;lt;unsigned int&amp;gt; lod(index_count);
float lod_error = 0.f;
lod.resize(meshopt_simplify(&amp;amp;lod[0], indices, index_count, &amp;amp;vertices[0].x, vertex_count, sizeof(Vertex),
    target_index_count, target_error, /* options= */ 0, &amp;amp;lod_error));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Target error is an approximate measure of the deviation from the original mesh using distance normalized to &lt;code&gt;[0..1]&lt;/code&gt; range (e.g. &lt;code&gt;1e-2f&lt;/code&gt; means that simplifier will try to maintain the error to be below 1% of the mesh extents). Note that the simplifier attempts to produce the requested number of indices at minimal error, but because of topological restrictions and error limit it is not guaranteed to reach the target index count and can stop earlier.&lt;/p&gt; 
&lt;p&gt;To disable the error limit, &lt;code&gt;target_error&lt;/code&gt; can be set to &lt;code&gt;FLT_MAX&lt;/code&gt;. This makes it more likely that the simplifier will reach the target index count, but it may produce a mesh that looks significantly different from the original, so using the resulting error to control viewing distance would be required. Conversely, setting &lt;code&gt;target_index_count&lt;/code&gt; to 0 will simplify the input mesh as much as possible within the specified error limit; this can be useful for generating LODs that should look good at a given viewing distance.&lt;/p&gt; 
&lt;p&gt;The algorithm follows the topology of the original mesh in an attempt to preserve attribute seams, borders and overall appearance. For meshes with inconsistent topology or many seams, such as faceted meshes, it can result in simplifier getting &quot;stuck&quot; and not being able to simplify the mesh fully. Therefore it&#39;s critical that identical vertices are &quot;welded&quot; together, that is, the input vertex buffer does not contain duplicates. Additionally, it may be worthwhile to weld the vertices without taking into account vertex attributes that aren&#39;t critical and can be rebuilt later.&lt;/p&gt; 
&lt;p&gt;Alternatively, the library provides another simplification algorithm, &lt;code&gt;meshopt_simplifySloppy&lt;/code&gt;, which doesn&#39;t follow the topology of the original mesh. This means that it doesn&#39;t preserve attribute seams or borders, but it can collapse internal details that are too small to matter because it can merge mesh features that are topologically disjoint but spatially close. In general, this algorithm produces meshes with worse geometric quality and poor attribute quality compared to &lt;code&gt;meshopt_simplify&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The algorithm can also return the resulting normalized deviation that can be used to choose the correct level of detail based on screen size or solid angle; the error can be converted to object space by multiplying by the scaling factor returned by &lt;code&gt;meshopt_simplifyScale&lt;/code&gt;. For example, given a mesh with a precomputed LOD and a prescaled error, the screen-space normalized error can be computed and used for LOD selection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;// lod_factor can be 1 or can be adjusted for more or less aggressive LOD selection
float d = max(0, distance(camera_position, mesh_center) - mesh_radius);
float e = d * (tan(camera_fovy / 2) * 2 / screen_height); // 1px in mesh space
bool lod_ok = e * lod_factor &amp;gt;= lod_error;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a sequence of LOD meshes is generated that all use the original vertex buffer, care must be taken to order vertices optimally to not penalize mobile GPU architectures that are only capable of transforming a sequential vertex buffer range. It&#39;s recommended in this case to first optimize each LOD for vertex cache, then assemble all LODs in one large index buffer starting from the coarsest LOD (the one with fewest triangles), and call &lt;code&gt;meshopt_optimizeVertexFetch&lt;/code&gt; on the final large index buffer. This will make sure that coarser LODs require a smaller vertex range and are efficient wrt vertex fetch and transform.&lt;/p&gt; 
&lt;h3&gt;Attribute-aware simplification&lt;/h3&gt; 
&lt;p&gt;While &lt;code&gt;meshopt_simplify&lt;/code&gt; is aware of attribute discontinuities by default (and infers them through the supplied index buffer) and tries to preserve them, it can be useful to provide information about attribute values. This allows the simplifier to take attribute error into account which can improve shading (by using vertex normals), texture deformation (by using texture coordinates), and may be necessary to preserve vertex colors when textures are not used in the first place. This can be done by using a variant of the simplification function that takes attribute values and weight factors, &lt;code&gt;meshopt_simplifyWithAttributes&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const float nrm_weight = 0.5f;
const float attr_weights[3] = {nrm_weight, nrm_weight, nrm_weight};

std::vector&amp;lt;unsigned int&amp;gt; lod(index_count);
float lod_error = 0.f;
lod.resize(meshopt_simplifyWithAttributes(&amp;amp;lod[0], indices, index_count, &amp;amp;vertices[0].x, vertex_count, sizeof(Vertex),
    &amp;amp;vertices[0].nx, sizeof(Vertex), attr_weights, 3, /* vertex_lock= */ NULL,
    target_index_count, target_error, /* options= */ 0, &amp;amp;lod_error));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The attributes are passed as a separate buffer (in the example above it&#39;s a subset of the same vertex buffer) and should be stored as consecutive floats; attribute weights are used to control the importance of each attribute in the simplification process. For normalized attributes like normals and vertex colors, a weight around 1.0 is usually appropriate; internally, a change of &lt;code&gt;1/weight&lt;/code&gt; in attribute value over a distance &lt;code&gt;d&lt;/code&gt; is approximately equivalent to a change of &lt;code&gt;d&lt;/code&gt; in position. Using higher weights may be appropriate to preserve attribute quality at the cost of position quality. If the attribute has a different scale (e.g. unnormalized vertex colors in [0..255] range), the weight should be divided by the scaling factor (1/255 in this example).&lt;/p&gt; 
&lt;p&gt;Both the target error and the resulting error combine positional error and attribute error, so the error can be used to control the LOD while taking attribute quality into account, assuming carefully chosen weights.&lt;/p&gt; 
&lt;h3&gt;Simplification with vertex update&lt;/h3&gt; 
&lt;p&gt;All simplification functions described so far reuse the original vertex buffer and only produce a new index buffer. This means that the resulting mesh will have the same vertex positions and attributes as the original mesh; this is optimal for minimizing the memory consumption and for highly detailed meshes often provides good quality. However, for more aggressive simplification to retain visual quality, it may be necessary to update the vertex positions and attributes. This can be done by using a variant of the simplification function that updates vertex positions and attributes, &lt;code&gt;meshopt_simplifyWithUpdate&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;indices.resize(meshopt_simplifyWithUpdate(&amp;amp;indices[0], indices.size(), &amp;amp;vertices[0].px, vertices.size(), sizeof(Vertex),
    &amp;amp;vertices[0].nx, sizeof(Vertex), attr_weights, 3, /* vertex_lock= */ NULL,
    target_index_count, target_error, /* options= */ 0, &amp;amp;result_error));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike &lt;code&gt;meshopt_simplify&lt;/code&gt;/&lt;code&gt;meshopt_simplifyWithAttributes&lt;/code&gt;, this function updates the index buffer as well as vertex positions and attributes in place. The resulting indices still refer to the original vertex buffer; any attributes that are not passed to the simplifier can be left unchanged. However, since the original contents of &lt;code&gt;vertices&lt;/code&gt; is no longer valid for rendering the original mesh, a new compact vertex/index buffer should be generated using &lt;code&gt;meshopt_optimizeVertexFetch&lt;/code&gt; (after optimizing the index data with &lt;code&gt;meshopt_optimizeVertexCache&lt;/code&gt;). If the original data was important, it should be copied before calling this function.&lt;/p&gt; 
&lt;p&gt;Since the vertex positions are updated, this may require updating some attributes that could previously be left as-is when using the original vertex buffer. Notably, texture coordinates need to be updated to avoid texture distortion; thus it&#39;s highly recommended to include texture coordinates in the attribute data passed to the simplifier. For attributes to be updated, the corresponding attribute weight must not be zero; for texture coordinates, a weight of 1.0 is usually sufficient in this case (although a higher or mesh dependent weight could be used with this function or other functions to reduce UV stretching).&lt;/p&gt; 
&lt;p&gt;Using unique vertex data for each LOD in a chain can improve visual quality, but it comes at a cost of ~doubling vertex memory used (if each LOD is using half the triangles of the previous LOD). To reduce the memory footprint, it is possible to use shared vertices with &lt;code&gt;meshopt_simplifyWithAttributes&lt;/code&gt; for the first one or two LODs in the chain, and only switch to &lt;code&gt;meshopt_simplifyWithUpdate&lt;/code&gt; for the remainder. In that case, similarly to the use of &lt;code&gt;meshopt_simplify&lt;/code&gt; described earlier, care must be taken to optimally arrange the vertices in the original vertex buffer.&lt;/p&gt; 
&lt;h3&gt;Advanced simplification&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;meshopt_simplify*&lt;/code&gt; functions expose additional options and parameters that can be used to control the simplification process in more detail.&lt;/p&gt; 
&lt;p&gt;For basic customization, a number of options can be passed via &lt;code&gt;options&lt;/code&gt; bitmask that adjust the behavior of the simplifier:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifyLockBorder&lt;/code&gt; restricts the simplifier from collapsing edges that are on the border of the mesh. This can be useful for simplifying mesh subsets independently, so that the LODs can be combined without introducing cracks.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifyErrorAbsolute&lt;/code&gt; changes the error metric from relative to absolute both for the input error limit as well as for the resulting error. This can be used instead of &lt;code&gt;meshopt_simplifyScale&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifySparse&lt;/code&gt; improves simplification performance assuming input indices are a sparse subset of the mesh. This can be useful when simplifying small mesh subsets independently, and is intended to be used for meshlet simplification. For consistency, it is recommended to use absolute errors when sparse simplification is desired, as this flag changes the meaning of the relative errors.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifyPrune&lt;/code&gt; allows the simplifier to remove isolated components regardless of the topological restrictions inside the component. This is generally recommended for full-mesh simplification as it can improve quality and reduce triangle count; note that with this option, triangles connected to locked vertices may be removed as part of their component.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifyRegularize&lt;/code&gt; produces more regular triangle sizes and shapes during simplification, at some cost to geometric quality. This can improve geometric quality under deformation such as skinning.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When using &lt;code&gt;meshopt_simplifyWithAttributes&lt;/code&gt;, it is also possible to lock certain vertices by providing a &lt;code&gt;vertex_lock&lt;/code&gt; array that contains a boolean value for each vertex in the mesh. This can be useful to preserve certain vertices, such as the boundary of the mesh, with more control than &lt;code&gt;meshopt_SimplifyLockBorder&lt;/code&gt; option provides. When using &lt;code&gt;meshopt_simplifyWithUpdate&lt;/code&gt;, locking vertices (whether via &lt;code&gt;vertex_lock&lt;/code&gt; or &lt;code&gt;meshopt_SimplifyLockBorder&lt;/code&gt;) will also prevent the simplifier from updating their positions and attributes; this can be useful together with &lt;code&gt;meshopt_SimplifySparse&lt;/code&gt; for meshlet simplification, as meshlets at one level of hierarchy can be simplified together without excessive data copying.&lt;/p&gt; 
&lt;p&gt;In addition to the &lt;code&gt;meshopt_SimplifyPrune&lt;/code&gt; flag, you can explicitly prune isolated components by calling the &lt;code&gt;meshopt_simplifyPrune&lt;/code&gt; function. This can be done before regular simplification or as the only step, which is useful for scenarios like isosurface cleanup. Similar to other simplification functions, the &lt;code&gt;target_error&lt;/code&gt; argument controls the cutoff of component radius and is specified in relative units (e.g., &lt;code&gt;1e-2f&lt;/code&gt; will remove components under 1%). If an absolute cutoff is desired, divide the parameter by the factor returned by &lt;code&gt;meshopt_simplifyScale&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Simplification currently assumes that the input mesh is using the same material for all triangles. If the mesh uses multiple materials, it is possible to split the mesh into subsets based on the material and simplify each subset independently, using &lt;code&gt;meshopt_SimplifyLockBorder&lt;/code&gt; or &lt;code&gt;vertex_lock&lt;/code&gt; to preserve material boundaries; however, this limits the collapses and may reduce the resulting quality. An alternative approach is to encode information about the material into the vertex buffer, ensuring that all three vertices referencing the same triangle have the same material ID; this may require duplicating vertices on the boundary between materials. After this, simplification can be performed as usual, and after simplification per-triangle material information can be computed from the vertex material IDs. There is no need to inform the simplifier of the value of the material ID: the implicit boundaries created by duplicating vertices with conflicting material IDs will be preserved automatically.&lt;/p&gt; 
&lt;p&gt;When generating a LOD chain, you can either re-simplify each LOD from the original mesh or use the previous LOD as the starting point for the next level. The latter approach is more efficient and produces smoother visual transitions between LOD levels while preserving mesh attributes better. With this method, resulting error values from previous levels should be accumulated for LOD selection. Additionally, consider using &lt;code&gt;meshopt_SimplifySparse&lt;/code&gt; to improve performance when generating deep LOD chains.&lt;/p&gt; 
&lt;h3&gt;Point cloud simplification&lt;/h3&gt; 
&lt;p&gt;In addition to triangle mesh simplification, this library provides a function to simplify point clouds. The algorithm reduces the point cloud to a specified number of points while preserving the overall appearance, and can optionally take per-point colors into account:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;const float color_weight = 1;
std::vector&amp;lt;unsigned int&amp;gt; indices(target_count);
indices.resize(meshopt_simplifyPoints(&amp;amp;indices[0], &amp;amp;points[0].x, points.size(), sizeof(Point),
    &amp;amp;points[0].r, sizeof(Point), color_weight, target_count));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting indices can be used to render the simplified point cloud; to reduce the memory footprint, the point cloud can be reindexed to create an array of points from the indices.&lt;/p&gt; 
&lt;h2&gt;Efficiency analyzers&lt;/h2&gt; 
&lt;p&gt;While the only way to get precise performance data is to measure performance on the target GPU, it can be valuable to measure the impact of these optimization in a GPU-independent manner. To this end, the library provides analyzers for all three major optimization routines. For each optimization there is a corresponding analyze function, like &lt;code&gt;meshopt_analyzeOverdraw&lt;/code&gt;, that returns a struct with statistics.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;meshopt_analyzeVertexCache&lt;/code&gt; returns vertex cache statistics. The common metric to use is ACMR - average cache miss ratio, which is the ratio of the total number of vertex invocations to the triangle count. The worst-case ACMR is 3 (GPU has to process 3 vertices for each triangle); on regular grids the optimal ACMR approaches 0.5. On real meshes it usually is in [0.5..1.5] range depending on the amount of vertex splits. One other useful metric is ATVR - average transformed vertex ratio - which represents the ratio of vertex shader invocations to the total vertices, and has the best case of 1.0 regardless of mesh topology (each vertex is transformed once).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;meshopt_analyzeVertexFetch&lt;/code&gt; returns vertex fetch statistics. The main metric it uses is overfetch - the ratio between the number of bytes read from the vertex buffer to the total number of bytes in the vertex buffer. Assuming non-redundant vertex buffers, the best case is 1.0 - each byte is fetched once.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;meshopt_analyzeOverdraw&lt;/code&gt; returns overdraw statistics. The main metric it uses is overdraw - the ratio between the number of pixel shader invocations to the total number of covered pixels, as measured from several different orthographic cameras. The best case for overdraw is 1.0 - each pixel is shaded once.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;meshopt_analyzeCoverage&lt;/code&gt; returns coverage statistics: the ratio of covered pixels to the viewport extent from each cardinal axis. This is not an efficiency measure per se, but it can be used to measure silhouette change after simplification as well as more precise distance based culling, where the amount of view dependent coverage can be estimated by computing a dot product between the view direction and the coverage vector.&lt;/p&gt; 
&lt;p&gt;Note that all analyzers use approximate models for the relevant GPU units, so the numbers you will get as the result are only a rough approximation of the actual performance.&lt;/p&gt; 
&lt;h2&gt;Deinterleaved geometry&lt;/h2&gt; 
&lt;p&gt;All of the examples above assume that geometry is represented as a single vertex buffer and a single index buffer. This requires storing all vertex attributes - position, normal, texture coordinate, skinning weights etc. - in a single contiguous struct. However, in some cases using multiple vertex streams may be preferable. In particular, if some passes require only positional data - such as depth pre-pass or shadow map - then it may be beneficial to split it from the rest of the vertex attributes to make sure the bandwidth use during these passes is optimal. On some mobile GPUs a position-only attribute stream also improves efficiency of tiling algorithms.&lt;/p&gt; 
&lt;p&gt;Most of the functions in this library either only need the index buffer (such as vertex cache optimization) or only need positional information (such as overdraw optimization). However, several tasks require knowledge about all vertex attributes.&lt;/p&gt; 
&lt;p&gt;For indexing, &lt;code&gt;meshopt_generateVertexRemap&lt;/code&gt; assumes that there&#39;s just one vertex stream; when multiple vertex streams are used, it&#39;s necessary to use &lt;code&gt;meshopt_generateVertexRemapMulti&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_Stream streams[] = {
    {&amp;amp;unindexed_pos[0], sizeof(float) * 3, sizeof(float) * 3},
    {&amp;amp;unindexed_nrm[0], sizeof(float) * 3, sizeof(float) * 3},
    {&amp;amp;unindexed_uv[0], sizeof(float) * 2, sizeof(float) * 2},
};

std::vector&amp;lt;unsigned int&amp;gt; remap(index_count);
size_t vertex_count = meshopt_generateVertexRemapMulti(&amp;amp;remap[0], NULL, index_count, index_count, streams, sizeof(streams) / sizeof(streams[0]));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After this &lt;code&gt;meshopt_remapVertexBuffer&lt;/code&gt; needs to be called once for each vertex stream to produce the correctly reindexed stream. For shadow indexing, similarly &lt;code&gt;meshopt_generateShadowIndexBufferMulti&lt;/code&gt; is available as a replacement.&lt;/p&gt; 
&lt;p&gt;Instead of calling &lt;code&gt;meshopt_optimizeVertexFetch&lt;/code&gt; for reordering vertices in a single vertex buffer for efficiency, calling &lt;code&gt;meshopt_optimizeVertexFetchRemap&lt;/code&gt; and then calling &lt;code&gt;meshopt_remapVertexBuffer&lt;/code&gt; for each stream again is recommended.&lt;/p&gt; 
&lt;p&gt;Finally, when compressing vertex data, &lt;code&gt;meshopt_encodeVertexBuffer&lt;/code&gt; should be used on each vertex stream separately - this allows the encoder to best utilize correlation between attribute values for different vertices.&lt;/p&gt; 
&lt;h2&gt;Specialized processing&lt;/h2&gt; 
&lt;p&gt;In addition to the core optimization techniques, the library provides several specialized algorithms for specific rendering techniques and pipeline optimizations that require a particular configuration of vertex and index data.&lt;/p&gt; 
&lt;h3&gt;Triangle strip conversion&lt;/h3&gt; 
&lt;p&gt;On most hardware, indexed triangle lists are the most efficient way to drive the GPU. However, in some cases triangle strips might prove beneficial:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;On some older GPUs, triangle strips may be a bit more efficient to render&lt;/li&gt; 
 &lt;li&gt;On extremely memory constrained systems, index buffers for triangle strips could save a bit of memory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This library provides an algorithm for converting a vertex cache optimized triangle list to a triangle strip:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; strip(meshopt_stripifyBound(index_count));
unsigned int restart_index = ~0u;
size_t strip_size = meshopt_stripify(&amp;amp;strip[0], indices, index_count, vertex_count, restart_index);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Typically you should expect triangle strips to have ~50-60% of indices compared to triangle lists (~1.5-1.8 indices per triangle) and have ~5% worse ACMR. Note that triangle strips can be stitched with or without restart index support. Using restart indices can result in ~10% smaller index buffers, but on some GPUs restart indices may result in decreased performance.&lt;/p&gt; 
&lt;p&gt;To reduce the triangle strip size further, it&#39;s recommended to use &lt;code&gt;meshopt_optimizeVertexCacheStrip&lt;/code&gt; instead of &lt;code&gt;meshopt_optimizeVertexCache&lt;/code&gt; when optimizing for vertex cache. This trades off some efficiency in vertex transform for smaller index buffers.&lt;/p&gt; 
&lt;h3&gt;Geometry shader adjacency&lt;/h3&gt; 
&lt;p&gt;For algorithms that use geometry shaders and require adjacency information, this library can generate an index buffer with adjacency data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; adjacency(indices.size() * 2);
meshopt_generateAdjacencyIndexBuffer(&amp;amp;adjacency[0], &amp;amp;indices[0], indices.size(), &amp;amp;vertices[0].x, vertices.size(), sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates an index buffer suitable for rendering with triangle-with-adjacency topology, providing 3 extra vertices per triangle that represent vertices opposite to each triangle&#39;s edge. This data can be used to compute silhouettes and perform other types of local geometric processing in geometry shaders. To render the mesh with adjacency data, the index buffer should be used with &lt;code&gt;D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ&lt;/code&gt;/&lt;code&gt;VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY&lt;/code&gt;/&lt;code&gt;GL_TRIANGLES_ADJACENCY&lt;/code&gt; topology.&lt;/p&gt; 
&lt;p&gt;Note that the use of geometry shaders may have a performance impact on some GPUs; in some cases alternative implementation strategies may be more efficient.&lt;/p&gt; 
&lt;h3&gt;Tessellation with displacement mapping&lt;/h3&gt; 
&lt;p&gt;For hardware tessellation with crack-free displacement mapping, this library can generate a special index buffer that supports PN-AEN tessellation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; tess(indices.size() * 4);
meshopt_generateTessellationIndexBuffer(&amp;amp;tess[0], &amp;amp;indices[0], indices.size(), &amp;amp;vertices[0].x, vertices.size(), sizeof(Vertex));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This generates a 12-vertex patch for each input triangle with the following layout:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0, 1, 2: original triangle vertices&lt;/li&gt; 
 &lt;li&gt;3, 4: opposing edge for edge 0, 1&lt;/li&gt; 
 &lt;li&gt;5, 6: opposing edge for edge 1, 2&lt;/li&gt; 
 &lt;li&gt;7, 8: opposing edge for edge 2, 0&lt;/li&gt; 
 &lt;li&gt;9, 10, 11: dominant vertices for corners 0, 1, 2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This allows the use of hardware tessellation to implement PN-AEN and/or displacement mapping without cracks along UV seams or normal discontinuities. To render the mesh, the index buffer should be used with &lt;code&gt;D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST&lt;/code&gt;/&lt;code&gt;VK_PRIMITIVE_TOPOLOGY_PATCH_LIST&lt;/code&gt; (&lt;code&gt;patchControlPoints=12&lt;/code&gt;) topology. For more details please refer to the following papers: &lt;a href=&quot;https://developer.download.nvidia.com/whitepapers/2010/PN-AEN-Triangles-Whitepaper.pdf&quot;&gt;Crack-Free Point-Normal Triangles using Adjacent Edge Normals&lt;/a&gt;, &lt;a href=&quot;https://www.nvidia.com/content/pdf/gdc2011/john_mcdonald.pdf&quot;&gt;Tessellation on Any Budget&lt;/a&gt; and &lt;a href=&quot;https://developer.download.nvidia.com/assets/gamedev/files/gdc12/GDC12_DUDASH_MyTessellationHasCracks.pdf&quot;&gt;My Tessellation Has Cracks!&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Visibility buffers&lt;/h3&gt; 
&lt;p&gt;To render geometry into visibility buffers, access to primitive index in fragment shader is required. While it is possible to use &lt;code&gt;SV_PrimitiveID&lt;/code&gt;/&lt;code&gt;gl_PrimitiveID&lt;/code&gt; in the fragment shader, this can result in suboptimal performance on some GPUs (notably, AMD RDNA1 and all NVidia GPUs), and may not be supported on mobile or console hardware. Using mesh shaders to generate primitive IDs is efficient but requires hardware support that is not universally available. To work around these limitations, this library provides a way to generate a special index buffer that uses provoking vertex to encode primitive IDs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;std::vector&amp;lt;unsigned int&amp;gt; provoke(indices.size());
std::vector&amp;lt;unsigned int&amp;gt; reorder(vertices.size() + indices.size() / 3);
reorder.resize(meshopt_generateProvokingIndexBuffer(&amp;amp;provoke[0], &amp;amp;reorder[0], &amp;amp;indices[0], indices.size(), vertices.size()));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This generates a special index buffer along with a reorder table that satisfies two constraints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;provoke[3 * tri] == tri&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reorder[provoke[x]]&lt;/code&gt; refers to the original triangle vertices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To render the mesh with provoking vertex data, the application should use &lt;code&gt;provoke&lt;/code&gt; as an index buffer and a vertex shader that passes vertex index (&lt;code&gt;SV_VertexID&lt;/code&gt;/&lt;code&gt;gl_VertexIndex&lt;/code&gt;) via a &lt;code&gt;flat&lt;/code&gt;/&lt;code&gt;nointerpolation&lt;/code&gt; attribute to the fragment shader as a primitive index, and loads vertex data manually by computing the real vertex index based on &lt;code&gt;reorder&lt;/code&gt; table (&lt;code&gt;reorder[gl_VertexIndex]&lt;/code&gt;). For more details please refer to &lt;a href=&quot;https://advances.realtimerendering.com/s2024/content/Hable/Advances_SIGGRAPH_2024_VisibilityVRS-SIGGRAPH_Advances_2024.pptx&quot;&gt;Variable Rate Shading with Visibility Buffer Rendering&lt;/a&gt;; naturally, this technique does not require VRS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: This assumes the provoking vertex is the first vertex of a triangle, which is true for all graphics APIs except OpenGL/WebGL. For OpenGL/WebGL, you may need to rotate each triangle (abc -&amp;gt; bca) in the resulting index buffer, or use the &lt;code&gt;glProvokingVertex&lt;/code&gt; function (OpenGL 3.2+) or &lt;code&gt;WEBGL_provoking_vertex&lt;/code&gt; extension (WebGL2) to change the provoking vertex convention. For WebGL2, this is highly recommended to avoid a variety of emulation slowdowns that happen by default if &lt;code&gt;flat&lt;/code&gt; attributes are used, such as an implicit use of geometry shaders.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Because the order of indices in the resulting index buffer must be preserved exactly for the technique to work, all optimizations that reorder indices (such as vertex cache optimization) must be applied before generating the provoking index buffer. Additionally, if index compression is used, &lt;code&gt;meshopt_encodeIndexSequence&lt;/code&gt; should be used instead of &lt;code&gt;meshopt_encodeIndexBuffer&lt;/code&gt; to ensure that the triangles are not rotated during encoding.&lt;/p&gt; 
&lt;h2&gt;Memory management&lt;/h2&gt; 
&lt;p&gt;Many algorithms allocate temporary memory to store intermediate results or accelerate processing. The amount of memory allocated is a function of various input parameters such as vertex count and index count. By default memory is allocated using &lt;code&gt;operator new&lt;/code&gt; and &lt;code&gt;operator delete&lt;/code&gt;; if these operators are overloaded by the application, the overloads will be used instead. Alternatively it&#39;s possible to specify custom allocation/deallocation functions using &lt;code&gt;meshopt_setAllocator&lt;/code&gt;, e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;meshopt_setAllocator(malloc, free);
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the library expects the allocation function to either throw in case of out-of-memory (in which case the exception will propagate to the caller) or abort, so technically the use of &lt;code&gt;malloc&lt;/code&gt; above isn&#39;t safe. If you want to handle out-of-memory errors without using C++ exceptions, you can use &lt;code&gt;setjmp&lt;/code&gt;/&lt;code&gt;longjmp&lt;/code&gt; instead.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Vertex and index decoders (&lt;code&gt;meshopt_decodeVertexBuffer&lt;/code&gt;, &lt;code&gt;meshopt_decodeIndexBuffer&lt;/code&gt;, &lt;code&gt;meshopt_decodeIndexSequence&lt;/code&gt;) do not allocate memory and work completely within the buffer space provided via arguments.&lt;/p&gt; 
&lt;p&gt;All functions have bounded stack usage that does not exceed 32 KB for any algorithms.&lt;/p&gt; 
&lt;h2&gt;Experimental APIs&lt;/h2&gt; 
&lt;p&gt;Several algorithms provided by this library are marked as &quot;experimental&quot;; this status is reflected in the comments as well as the annotation &lt;code&gt;MESHOPTIMIZER_EXPERIMENTAL&lt;/code&gt; for each function.&lt;/p&gt; 
&lt;p&gt;APIs that are not experimental (annotated with &lt;code&gt;MESHOPTIMIZER_API&lt;/code&gt;) are considered stable, which means that library updates will not break compatibility: existing calls should compile (API compatibility), existing binaries should link (ABI compatibility), and existing behavior should not change significantly (for example, floating point parameters will have similar behavior). This does not mean that the output of the algorithms will be identical: future versions may improve the algorithms and produce different results.&lt;/p&gt; 
&lt;p&gt;APIs that &lt;em&gt;are&lt;/em&gt; experimental may have their interface change, both in ways that will cause existing calls to not compile, and in ways that may compile but have significantly different behavior (e.g., changes in parameter order, meaning, valid ranges). Experimental APIs may also, in rare cases, be removed from future library versions. It is recommended to carefully read release notes when updating the library if experimental APIs are in use. Some experimental APIs may also lack documentation in this README.&lt;/p&gt; 
&lt;p&gt;Applications may configure the library to change the attributes of experimental APIs, for example defining &lt;code&gt;MESHOPTIMIZER_EXPERIMENTAL&lt;/code&gt; as &lt;code&gt;__attribute__((deprecated))&lt;/code&gt; will emit compiler warnings when experimental APIs are used. When building a shared library with CMake, &lt;code&gt;MESHOPT_STABLE_EXPORTS&lt;/code&gt; option can be set to only export stable APIs; this produces an ABI-stable shared library that can be updated without recompiling the application code.&lt;/p&gt; 
&lt;p&gt;Currently, the following APIs are experimental:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_buildMeshletsFlex&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_buildMeshletsSpatial&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_decodeFilterColor&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_encodeFilterColor&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_simplifySloppy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_simplifyWithUpdate&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;meshopt_SimplifyRegularize&lt;/code&gt; flag for &lt;code&gt;meshopt_simplify*&lt;/code&gt; functions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is available to anybody free of charge, under the terms of &lt;a href=&quot;https://raw.githubusercontent.com/zeux/meshoptimizer/master/LICENSE.md&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To honor the license agreement, please include attribution into the user-facing product documentation and/or credits, for example using this or similar text:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Uses meshoptimizer. Copyright (c) 2016-2025, Arseny Kapoulkine&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>moveit/moveit2</title>
      <link>https://github.com/moveit/moveit2</link>
      <description>&lt;p&gt;🤖 MoveIt for ROS 2&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;http://moveit.ros.org/assets/logo/moveit_logo-black.png&quot; alt=&quot;MoveIt Logo&quot; width=&quot;200&quot; /&gt; 
&lt;p&gt;The &lt;a href=&quot;http://moveit.ros.org&quot;&gt;MoveIt Motion Planning Framework for ROS 2&lt;/a&gt;. For the ROS 1 repository see &lt;a href=&quot;https://github.com/moveit/moveit&quot;&gt;MoveIt 1&lt;/a&gt;. For the commercially supported version see &lt;a href=&quot;http://picknik.ai/pro&quot;&gt;MoveIt Pro&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Easy-to-use open source robotics manipulation platform for developing commercial applications, prototyping designs, and benchmarking algorithms.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Continuous Integration Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/moveit/moveit2/actions/workflows/format.yaml?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/moveit/moveit2/actions/workflows/format.yaml/badge.svg?branch=main&quot; alt=&quot;Formatting (pre-commit)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/moveit/moveit2/actions/workflows/ci.yaml?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/moveit/moveit2/actions/workflows/ci.yaml/badge.svg?branch=main&quot; alt=&quot;CI (Rolling, Jazzy, and Humble)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/moveit/moveit2&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/moveit/moveit2/branch/main/graph/badge.svg?token=QC1O0VzGpm&quot; alt=&quot;Code Coverage&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;See our extensive &lt;a href=&quot;https://moveit.picknik.ai/&quot;&gt;Tutorials and Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://moveit.ros.org/install-moveit2/binary/&quot;&gt;Binary Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://moveit.ros.org/install-moveit2/source/&quot;&gt;Source Build&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;More Info&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://moveit.ros.org/about/get_involved/&quot;&gt;How to Get Involved&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://moveit.ros.org/documentation/contributing/roadmap/&quot;&gt;Development Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://moveit.ros.org/#release-versions&quot;&gt;Future Release Dates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/moveit/moveit2/main/doc/MIGRATION_GUIDE.md&quot;&gt;MoveIt 2 Migration Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1aPb3hNP213iPHQIYgcnCYh9cGFUlZmi_06E_9iTSsOI/edit?usp=sharing&quot;&gt;MoveIt 2 Migration Progress&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supporters&lt;/h2&gt; 
&lt;p&gt;This open source project is maintained by supporters from around the world — see our &lt;a href=&quot;https://moveit.ros.org/about/&quot;&gt;MoveIt Maintainers and Core Contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;https://picknik.ai/&quot;&gt; &lt;img src=&quot;https://picknik.ai/assets/images/logo.jpg&quot; width=&quot;168&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href=&quot;https://picknik.ai/&quot;&gt;PickNik Inc&lt;/a&gt; is leading the development of MoveIt. If you would like to support this project, please contact &lt;a href=&quot;mailto:hello@picknik.ai&quot;&gt;hello@picknik.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;http://rosin-project.eu&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/rosin-project/press_kit/master/img/rosin_ack_logo_wide.png&quot; alt=&quot;rosin_logo&quot; height=&quot;60&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;The port to ROS 2 was supported by ROSIN - ROS-Industrial Quality-Assured Robot Software Components. More information: &lt;a href=&quot;http://rosin-project.eu&quot;&gt;rosin-project.eu&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rosin-project/press_kit/master/img/rosin_eu_flag.jpg&quot; alt=&quot;eu_flag&quot; height=&quot;45&quot; align=&quot;left&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement no. 732287.&lt;/p&gt; 
&lt;h2&gt;Generate API Doxygen Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://moveit.picknik.ai/main/doc/how_to_guides/how_to_generate_api_doxygen_locally.html&quot;&gt;How To Generate API Doxygen Reference Locally&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Buildfarm&lt;/h1&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Package&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Rolling Binary&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Jazzy Binary&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Humble Binary&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;geometric_shapes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__geometric_shapes__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__geometric_shapes__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__geometric_shapes__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__geometric_shapes__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__geometric_shapes__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__geometric_shapes__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_common&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_common__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_common__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_common__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_common__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_common__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_common__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_configs_utils&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_configs_utils__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_configs_utils__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_configs_utils__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_configs_utils__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_configs_utils__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_configs_utils__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_core&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_core__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_core__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_core__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_core__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_core__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_core__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_hybrid_planning&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_hybrid_planning__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_hybrid_planning__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_hybrid_planning__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_hybrid_planning__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_hybrid_planning__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_hybrid_planning__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_kinematics&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_kinematics__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_kinematics__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_kinematics__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_kinematics__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_kinematics__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_kinematics__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_msgs&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_msgs__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_msgs__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_msgs__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_msgs__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_msgs__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_msgs__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_planners&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_planners__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_planners__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_planners__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_planners__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_planners__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_planners__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_planners_chomp&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_planners_chomp__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_planners_chomp__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_planners_chomp__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_planners_chomp__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_planners_chomp__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_planners_chomp__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_planners_ompl&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_planners_ompl__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_planners_ompl__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_planners_ompl__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_planners_ompl__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_planners_ompl__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_planners_ompl__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_planners_stomp&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_planners_stomp__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_planners_stomp__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_planners_stomp__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_planners_stomp__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_planners_stomp__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_planners_stomp__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_plugins&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_plugins__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_plugins__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_py&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_py__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_py__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_py__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_py__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_py__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_py__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_resources&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_resources__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_resources__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_resources__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_resources__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_resources__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_resources__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_benchmarks&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_benchmarks__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_benchmarks__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_benchmarks__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_benchmarks__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_benchmarks__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_benchmarks__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_move_group&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_move_group__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_move_group__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_move_group__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_move_group__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_move_group__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_move_group__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_occupancy_map_monitor&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_occupancy_map_monitor__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_occupancy_map_monitor__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_occupancy_map_monitor__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_occupancy_map_monitor__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_occupancy_map_monitor__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_occupancy_map_monitor__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_perception&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_perception__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_perception__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_perception__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_perception__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_perception__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_perception__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_planning&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_planning__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_planning__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_planning__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_planning__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_planning__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_planning__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_planning_interface&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_planning_interface__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_planning_interface__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_planning_interface__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_planning_interface__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_planning_interface__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_planning_interface__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_robot_interaction&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_robot_interaction__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_robot_interaction__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_robot_interaction__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_robot_interaction__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_robot_interaction__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_robot_interaction__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_tests&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_tests__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_tests__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_tests__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_tests__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_tests__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_tests__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_trajectory_cache&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_trajectory_cache__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_trajectory_cache__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_trajectory_cache__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_trajectory_cache__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_trajectory_cache__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_trajectory_cache__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_visualization&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_visualization__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_visualization__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_visualization__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_visualization__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_visualization__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_visualization__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_ros_warehouse&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_ros_warehouse__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_ros_warehouse__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_ros_warehouse__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_ros_warehouse__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_ros_warehouse__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_ros_warehouse__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_runtime&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_runtime__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_runtime__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_runtime__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_runtime__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_runtime__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_runtime__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_servo&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_servo__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_servo__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_servo__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_servo__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_servo__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_servo__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_app_plugins&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_app_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_app_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_app_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_app_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_app_plugins__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_app_plugins__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_assistant&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_assistant__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_assistant__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_assistant__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_assistant__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_assistant__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_assistant__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_controllers&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_controllers__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_controllers__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_controllers__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_controllers__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_controllers__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_controllers__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_core_plugins&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_core_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_core_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_core_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_core_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_core_plugins__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_core_plugins__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_framework&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_framework__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_framework__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_framework__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_framework__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_framework__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_framework__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_setup_srdf_plugins&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_setup_srdf_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_setup_srdf_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_setup_srdf_plugins__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_setup_srdf_plugins__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_setup_srdf_plugins__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_setup_srdf_plugins__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;moveit_simple_controller_manager&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__moveit_simple_controller_manager__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__moveit_simple_controller_manager__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__moveit_simple_controller_manager__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__moveit_simple_controller_manager__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__moveit_simple_controller_manager__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__moveit_simple_controller_manager__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;pilz_industrial_motion_planner&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__pilz_industrial_motion_planner__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__pilz_industrial_motion_planner__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__pilz_industrial_motion_planner__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__pilz_industrial_motion_planner__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__pilz_industrial_motion_planner__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__pilz_industrial_motion_planner__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;pilz_industrial_motion_planner_testutils&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__pilz_industrial_motion_planner_testutils__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__pilz_industrial_motion_planner_testutils__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__pilz_industrial_motion_planner_testutils__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__pilz_industrial_motion_planner_testutils__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__pilz_industrial_motion_planner_testutils__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__pilz_industrial_motion_planner_testutils__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;random_numbers&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__random_numbers__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__random_numbers__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__random_numbers__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__random_numbers__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__random_numbers__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__random_numbers__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;srdfdom&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__srdfdom__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__srdfdom__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__srdfdom__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__srdfdom__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__srdfdom__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__srdfdom__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;warehouse_ros&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__warehouse_ros__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__warehouse_ros__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__warehouse_ros__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__warehouse_ros__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__warehouse_ros__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__warehouse_ros__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;warehouse_ros_sqlite&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Rbin_uN64__warehouse_ros_sqlite__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Rbin_uN64__warehouse_ros_sqlite__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Jbin_uN64__warehouse_ros_sqlite__ubuntu_noble_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Jbin_uN64__warehouse_ros_sqlite__ubuntu_noble_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://build.ros2.org/job/Hbin_uJ64__warehouse_ros_sqlite__ubuntu_jammy_amd64__binary&quot;&gt;&lt;img src=&quot;https://build.ros2.org/buildStatus/icon?job=Hbin_uJ64__warehouse_ros_sqlite__ubuntu_jammy_amd64__binary&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>ggml-org/llama.cpp</title>
      <link>https://github.com/ggml-org/llama.cpp</link>
      <description>&lt;p&gt;LLM inference in C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama.cpp&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1991296/230134379-7181e485-c521-4d23-a0d6-f7b3b61ba524.png&quot; alt=&quot;llama&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;License: MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/ggml-org/llama.cpp&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/actions/workflows/server.yml&quot;&gt;&lt;img src=&quot;https://github.com/ggml-org/llama.cpp/actions/workflows/server.yml/badge.svg?sanitize=true&quot; alt=&quot;Server&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/205&quot;&gt;Manifesto&lt;/a&gt; / &lt;a href=&quot;https://github.com/ggml-org/ggml&quot;&gt;ggml&lt;/a&gt; / &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/raw/master/docs/ops.md&quot;&gt;ops&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;LLM inference in C/C++&lt;/p&gt; 
&lt;h2&gt;Recent API changes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp/issues/9289&quot;&gt;Changelog for &lt;code&gt;libllama&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp/issues/9291&quot;&gt;Changelog for &lt;code&gt;llama-server&lt;/code&gt; REST API&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Hot topics&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for the &lt;code&gt;gpt-oss&lt;/code&gt; model with native MXFP4 format has been added | &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/15091&quot;&gt;PR&lt;/a&gt; | &lt;a href=&quot;https://blogs.nvidia.com/blog/rtx-ai-garage-openai-oss&quot;&gt;Collaboration with NVIDIA&lt;/a&gt; | &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/15095&quot;&gt;Comment&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hot PRs: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pulls?q=is%3Apr+label%3Ahot+&quot;&gt;All&lt;/a&gt; | &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pulls?q=is%3Apr+label%3Ahot+is%3Aopen&quot;&gt;Open&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Multimodal support arrived in &lt;code&gt;llama-server&lt;/code&gt;: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/12898&quot;&gt;#12898&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/multimodal.md&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;VS Code extension for FIM completions: &lt;a href=&quot;https://github.com/ggml-org/llama.vscode&quot;&gt;https://github.com/ggml-org/llama.vscode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Vim/Neovim plugin for FIM completions: &lt;a href=&quot;https://github.com/ggml-org/llama.vim&quot;&gt;https://github.com/ggml-org/llama.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Introducing GGUF-my-LoRA &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/10123&quot;&gt;https://github.com/ggml-org/llama.cpp/discussions/10123&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face Inference Endpoints now support GGUF out of the box! &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/9669&quot;&gt;https://github.com/ggml-org/llama.cpp/discussions/9669&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face GGUF editor: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/9268&quot;&gt;discussion&lt;/a&gt; | &lt;a href=&quot;https://huggingface.co/spaces/CISCai/gguf-editor&quot;&gt;tool&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Getting started with llama.cpp is straightforward. Here are several ways to install it on your machine:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;llama.cpp&lt;/code&gt; using &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/install.md&quot;&gt;brew, nix or winget&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run with Docker - see our &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/docker.md&quot;&gt;Docker documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Download pre-built binaries from the &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/releases&quot;&gt;releases page&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Build from source by cloning this repository - check out &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md&quot;&gt;our build guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once installed, you&#39;ll need a model to work with. Head to the &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/#obtaining-and-quantizing-models&quot;&gt;Obtaining and quantizing models&lt;/a&gt; section to learn more.&lt;/p&gt; 
&lt;p&gt;Example command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Use a local model file
llama-cli -m my_model.gguf

# Or download and run a model directly from Hugging Face
llama-cli -hf ggml-org/gemma-3-1b-it-GGUF

# Launch OpenAI-compatible API server
llama-server -hf ggml-org/gemma-3-1b-it-GGUF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;The main goal of &lt;code&gt;llama.cpp&lt;/code&gt; is to enable LLM inference with minimal setup and state-of-the-art performance on a wide range of hardware - locally and in the cloud.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Plain C/C++ implementation without any dependencies&lt;/li&gt; 
 &lt;li&gt;Apple silicon is a first-class citizen - optimized via ARM NEON, Accelerate and Metal frameworks&lt;/li&gt; 
 &lt;li&gt;AVX, AVX2, AVX512 and AMX support for x86 architectures&lt;/li&gt; 
 &lt;li&gt;1.5-bit, 2-bit, 3-bit, 4-bit, 5-bit, 6-bit, and 8-bit integer quantization for faster inference and reduced memory use&lt;/li&gt; 
 &lt;li&gt;Custom CUDA kernels for running LLMs on NVIDIA GPUs (support for AMD GPUs via HIP and Moore Threads GPUs via MUSA)&lt;/li&gt; 
 &lt;li&gt;Vulkan and SYCL backend support&lt;/li&gt; 
 &lt;li&gt;CPU+GPU hybrid inference to partially accelerate models larger than the total VRAM capacity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;llama.cpp&lt;/code&gt; project is the main playground for developing new features for the &lt;a href=&quot;https://github.com/ggml-org/ggml&quot;&gt;ggml&lt;/a&gt; library.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Models&lt;/summary&gt; 
 &lt;p&gt;Typically finetunes of the base models below are supported as well.&lt;/p&gt; 
 &lt;p&gt;Instructions for adding support for new models: &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/development/HOWTO-add-model.md&quot;&gt;HOWTO-add-model.md&lt;/a&gt;&lt;/p&gt; 
 &lt;h4&gt;Text-only&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LLaMA 🦙&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LLaMA 2 🦙🦙&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LLaMA 3 🦙🦙🦙&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/mistralai/Mistral-7B-v0.1&quot;&gt;Mistral 7B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=mistral-ai/Mixtral&quot;&gt;Mixtral MoE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/databricks/dbrx-instruct&quot;&gt;DBRX&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=tiiuae/falcon&quot;&gt;Falcon&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ymcui/Chinese-LLaMA-Alpaca&quot;&gt;Chinese LLaMA / Alpaca&lt;/a&gt; and &lt;a href=&quot;https://github.com/ymcui/Chinese-LLaMA-Alpaca-2&quot;&gt;Chinese LLaMA-2 / Alpaca-2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/bofenghuang/vigogne&quot;&gt;Vigogne (French)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/5423&quot;&gt;BERT&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://bair.berkeley.edu/blog/2023/04/03/koala/&quot;&gt;Koala&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=baichuan-inc/Baichuan&quot;&gt;Baichuan 1 &amp;amp; 2&lt;/a&gt; + &lt;a href=&quot;https://huggingface.co/hiyouga/baichuan-7b-sft&quot;&gt;derivations&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=BAAI/Aquila&quot;&gt;Aquila 1 &amp;amp; 2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/3187&quot;&gt;Starcoder models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/smallcloudai/Refact-1_6B-fim&quot;&gt;Refact&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/3417&quot;&gt;MPT&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/3553&quot;&gt;Bloom&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=01-ai/Yi&quot;&gt;Yi models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/stabilityai&quot;&gt;StableLM models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=deepseek-ai/deepseek&quot;&gt;Deepseek models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=Qwen/Qwen&quot;&gt;Qwen models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/3557&quot;&gt;PLaMo-13B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=microsoft/phi&quot;&gt;Phi models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/11003&quot;&gt;PhiMoE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/gpt2&quot;&gt;GPT-2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/5118&quot;&gt;Orion 14B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=internlm2&quot;&gt;InternLM2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/WisdomShell/codeshell&quot;&gt;CodeShell&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://ai.google.dev/gemma&quot;&gt;Gemma&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/state-spaces/mamba&quot;&gt;Mamba&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/keyfan/grok-1-hf&quot;&gt;Grok-1&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=xverse&quot;&gt;Xverse&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=CohereForAI/c4ai-command-r&quot;&gt;Command-R models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=sea-lion&quot;&gt;SEA-LION&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/GritLM/GritLM-7B&quot;&gt;GritLM-7B&lt;/a&gt; + &lt;a href=&quot;https://huggingface.co/GritLM/GritLM-8x7B&quot;&gt;GritLM-8x7B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://allenai.org/olmo&quot;&gt;OLMo&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://allenai.org/olmo&quot;&gt;OLMo 2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/allenai/OLMoE-1B-7B-0924&quot;&gt;OLMoE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/ibm-granite/granite-code-models-6624c5cec322e4c148c8b330&quot;&gt;Granite models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/EleutherAI/gpt-neox&quot;&gt;GPT-NeoX&lt;/a&gt; + &lt;a href=&quot;https://github.com/EleutherAI/pythia&quot;&gt;Pythia&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/Snowflake/arctic-66290090abe542894a5ac520&quot;&gt;Snowflake-Arctic MoE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=Smaug&quot;&gt;Smaug&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/LumiOpen/Poro-34B&quot;&gt;Poro 34B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/1bitLLM&quot;&gt;Bitnet b1.58 models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=flan-t5&quot;&gt;Flan T5&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/apple/openelm-instruct-models-6619ad295d7ae9f868b759ca&quot;&gt;Open Elm models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/THUDM/chatglm3-6b&quot;&gt;ChatGLM3-6b&lt;/a&gt; + &lt;a href=&quot;https://huggingface.co/THUDM/glm-4-9b&quot;&gt;ChatGLM4-9b&lt;/a&gt; + &lt;a href=&quot;https://huggingface.co/THUDM/glm-edge-1.5b-chat&quot;&gt;GLMEdge-1.5b&lt;/a&gt; + &lt;a href=&quot;https://huggingface.co/THUDM/glm-edge-4b-chat&quot;&gt;GLMEdge-4b&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/THUDM/glm-4-0414-67f3cbcb34dd9d252707cb2e&quot;&gt;GLM-4-0414&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/HuggingFaceTB/smollm-6695016cad7167254ce15966&quot;&gt;SmolLM&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/LGAI-EXAONE/EXAONE-3.0-7.8B-Instruct&quot;&gt;EXAONE-3.0-7.8B-Instruct&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/tiiuae/falconmamba-7b-66b9a580324dd1598b0f6d4a&quot;&gt;FalconMamba Models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/inceptionai/jais-13b-chat&quot;&gt;Jais&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/speakleash/bielik-11b-v23-66ee813238d9b526a072408a&quot;&gt;Bielik-11B-v2.3&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/BlinkDL/RWKV-LM&quot;&gt;RWKV-6&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/recursal/QRWKV6-32B-Instruct-Preview-v0.1&quot;&gt;QRWKV-6&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/ai-sage/GigaChat-20B-A3B-instruct&quot;&gt;GigaChat-20B-A3B&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/trillionlabs/Trillion-7B-preview&quot;&gt;Trillion-7B-preview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/inclusionAI/ling-67c51c85b34a7ea0aba94c32&quot;&gt;Ling models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/LiquidAI/lfm2-686d721927015b2ad73eaa38&quot;&gt;LFM2 models&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Multimodal&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/liuhaotian/llava-15-653aac15d994e992e2677a7e&quot;&gt;LLaVA 1.5 models&lt;/a&gt;, &lt;a href=&quot;https://huggingface.co/collections/liuhaotian/llava-16-65b9e40155f60fd046a5ccf2&quot;&gt;LLaVA 1.6 models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=SkunkworksAI/Bakllava&quot;&gt;BakLLaVA&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/NousResearch/Obsidian-3B-V0.5&quot;&gt;Obsidian&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=Lin-Chen/ShareGPT4V&quot;&gt;ShareGPT4V&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=mobileVLM&quot;&gt;MobileVLM 1.7B/3B models&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=Yi-VL&quot;&gt;Yi-VL&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=MiniCPM&quot;&gt;Mini CPM&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/vikhyatk/moondream2&quot;&gt;Moondream&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/BAAI-DCAI/Bunny&quot;&gt;Bunny&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/models?search=glm-edge&quot;&gt;GLM-EDGE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&quot;&gt;Qwen2-VL&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Bindings&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/ddh0/easy-llama&quot;&gt;ddh0/easy-llama&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Python: &lt;a href=&quot;https://github.com/abetlen/llama-cpp-python&quot;&gt;abetlen/llama-cpp-python&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Go: &lt;a href=&quot;https://github.com/go-skynet/go-llama.cpp&quot;&gt;go-skynet/go-llama.cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Node.js: &lt;a href=&quot;https://github.com/withcatai/node-llama-cpp&quot;&gt;withcatai/node-llama-cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;JS/TS (llama.cpp server client): &lt;a href=&quot;https://modelfusion.dev/integration/model-provider/llamacpp&quot;&gt;lgrammel/modelfusion&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;JS/TS (Programmable Prompt Engine CLI): &lt;a href=&quot;https://github.com/offline-ai/cli&quot;&gt;offline-ai/cli&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;JavaScript/Wasm (works in browser): &lt;a href=&quot;https://github.com/tangledgroup/llama-cpp-wasm&quot;&gt;tangledgroup/llama-cpp-wasm&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Typescript/Wasm (nicer API, available on npm): &lt;a href=&quot;https://github.com/ngxson/wllama&quot;&gt;ngxson/wllama&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Ruby: &lt;a href=&quot;https://github.com/yoshoku/llama_cpp.rb&quot;&gt;yoshoku/llama_cpp.rb&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Rust (more features): &lt;a href=&quot;https://github.com/edgenai/llama_cpp-rs&quot;&gt;edgenai/llama_cpp-rs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Rust (nicer API): &lt;a href=&quot;https://github.com/mdrokz/rust-llama.cpp&quot;&gt;mdrokz/rust-llama.cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Rust (more direct bindings): &lt;a href=&quot;https://github.com/utilityai/llama-cpp-rs&quot;&gt;utilityai/llama-cpp-rs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Rust (automated build from crates.io): &lt;a href=&quot;https://github.com/ShelbyJenkins/llm_client&quot;&gt;ShelbyJenkins/llm_client&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;C#/.NET: &lt;a href=&quot;https://github.com/SciSharp/LLamaSharp&quot;&gt;SciSharp/LLamaSharp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;C#/VB.NET (more features - community license): &lt;a href=&quot;https://docs.lm-kit.com/lm-kit-net/index.html&quot;&gt;LM-Kit.NET&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Scala 3: &lt;a href=&quot;https://github.com/donderom/llm4s&quot;&gt;donderom/llm4s&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Clojure: &lt;a href=&quot;https://github.com/phronmophobic/llama.clj&quot;&gt;phronmophobic/llama.clj&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;React Native: &lt;a href=&quot;https://github.com/mybigday/llama.rn&quot;&gt;mybigday/llama.rn&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Java: &lt;a href=&quot;https://github.com/kherud/java-llama.cpp&quot;&gt;kherud/java-llama.cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Zig: &lt;a href=&quot;https://github.com/Deins/llama.cpp.zig&quot;&gt;deins/llama.cpp.zig&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Flutter/Dart: &lt;a href=&quot;https://github.com/netdur/llama_cpp_dart&quot;&gt;netdur/llama_cpp_dart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Flutter: &lt;a href=&quot;https://github.com/xuegao-tzx/Fllama&quot;&gt;xuegao-tzx/Fllama&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;PHP (API bindings and features built on top of llama.cpp): &lt;a href=&quot;https://github.com/distantmagic/resonance&quot;&gt;distantmagic/resonance&lt;/a&gt; &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/pull/6326&quot;&gt;(more info)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Guile Scheme: &lt;a href=&quot;https://savannah.nongnu.org/projects/guile-llama-cpp&quot;&gt;guile_llama_cpp&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Swift &lt;a href=&quot;https://github.com/srgtuszy/llama-cpp-swift&quot;&gt;srgtuszy/llama-cpp-swift&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Swift &lt;a href=&quot;https://github.com/ShenghaiWang/SwiftLlama&quot;&gt;ShenghaiWang/SwiftLlama&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Delphi &lt;a href=&quot;https://github.com/Embarcadero/llama-cpp-delphi&quot;&gt;Embarcadero/llama-cpp-delphi&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;UIs&lt;/summary&gt; 
 &lt;p&gt;&lt;em&gt;(to have a project listed here, it should clearly state that it depends on &lt;code&gt;llama.cpp&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/yaroslavyaroslav/OpenAI-sublime-text&quot;&gt;AI Sublime Text plugin&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/cztomsik/ava&quot;&gt;cztomsik/ava&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexpinel/Dot&quot;&gt;Dot&lt;/a&gt; (GPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ylsdamxssjxxdd/eva&quot;&gt;eva&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/iohub/coLLaMA&quot;&gt;iohub/collama&lt;/a&gt; (Apache-2.0)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/janhq/jan&quot;&gt;janhq/jan&lt;/a&gt; (AGPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnbean393/Sidekick&quot;&gt;johnbean393/Sidekick&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/zhouwg/kantv?tab=readme-ov-file&quot;&gt;KanTV&lt;/a&gt; (Apache-2.0)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/firatkiral/kodibot&quot;&gt;KodiBot&lt;/a&gt; (GPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.vim&quot;&gt;llama.vim&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/abgulati/LARS&quot;&gt;LARS&lt;/a&gt; (AGPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/vietanhdev/llama-assistant&quot;&gt;Llama Assistant&lt;/a&gt; (GPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/guinmoon/LLMFarm?tab=readme-ov-file&quot;&gt;LLMFarm&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/undreamai/LLMUnity&quot;&gt;LLMUnity&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://lmstudio.ai/&quot;&gt;LMStudio&lt;/a&gt; (proprietary)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mudler/LocalAI&quot;&gt;LocalAI&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/LostRuins/koboldcpp&quot;&gt;LostRuins/koboldcpp&lt;/a&gt; (AGPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://mindmac.app&quot;&gt;MindMac&lt;/a&gt; (proprietary)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MindWorkAI/AI-Studio&quot;&gt;MindWorkAI/AI-Studio&lt;/a&gt; (FSL-1.1-MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mobile-Artificial-Intelligence/maid&quot;&gt;Mobile-Artificial-Intelligence/maid&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mozilla-Ocho/llamafile&quot;&gt;Mozilla-Ocho/llamafile&lt;/a&gt; (Apache-2.0)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nat/openplayground&quot;&gt;nat/openplayground&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nomic-ai/gpt4all&quot;&gt;nomic-ai/gpt4all&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ollama/ollama&quot;&gt;ollama/ollama&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/oobabooga/text-generation-webui&quot;&gt;oobabooga/text-generation-webui&lt;/a&gt; (AGPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/a-ghorbani/pocketpal-ai&quot;&gt;PocketPal AI&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/psugihara/FreeChat&quot;&gt;psugihara/FreeChat&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/ptsochantaris/emeltal&quot;&gt;ptsochantaris/emeltal&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/pythops/tenere&quot;&gt;pythops/tenere&lt;/a&gt; (AGPL)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/containers/ramalama&quot;&gt;ramalama&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/semperai/amica&quot;&gt;semperai/amica&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/withcatai/catai&quot;&gt;withcatai/catai&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/blackhole89/autopen&quot;&gt;Autopen&lt;/a&gt; (GPL)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tools&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/akx/ggify&quot;&gt;akx/ggify&lt;/a&gt; – download PyTorch models from HuggingFace Hub and convert them to GGML&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/akx/ollama-dl&quot;&gt;akx/ollama-dl&lt;/a&gt; – download models from the Ollama library to be used directly with llama.cpp&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/crashr/gppm&quot;&gt;crashr/gppm&lt;/a&gt; – launch llama.cpp instances utilizing NVIDIA Tesla P40 or P100 GPUs with reduced idle power consumption&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/gpustack/gguf-parser-go/tree/main/cmd/gguf-parser&quot;&gt;gpustack/gguf-parser&lt;/a&gt; - review/check the GGUF file and estimate the memory usage&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://marketplace.unity.com/packages/tools/generative-ai/styled-lines-llama-cpp-model-292902&quot;&gt;Styled Lines&lt;/a&gt; (proprietary licensed, async wrapper of inference part for game development in Unity3d with pre-built Mobile and Web platform wrappers and a model example)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Infrastructure&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/intentee/paddler&quot;&gt;Paddler&lt;/a&gt; - Open-source LLMOps platform for hosting and scaling AI in your own infrastructure&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/gpustack/gpustack&quot;&gt;GPUStack&lt;/a&gt; - Manage GPU clusters for running LLMs&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/onicai/llama_cpp_canister&quot;&gt;llama_cpp_canister&lt;/a&gt; - llama.cpp as a smart contract on the Internet Computer, using WebAssembly&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mostlygeek/llama-swap&quot;&gt;llama-swap&lt;/a&gt; - transparent proxy that adds automatic model switching with llama-server&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/kalavai-net/kalavai-client&quot;&gt;Kalavai&lt;/a&gt; - Crowdsource end to end LLM deployment at any scale&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/InftyAI/llmaz&quot;&gt;llmaz&lt;/a&gt; - ☸️ Easy, advanced inference platform for large language models on Kubernetes.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Games&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MorganRO8/Lucys_Labyrinth&quot;&gt;Lucy&#39;s Labyrinth&lt;/a&gt; - A simple maze game where agents controlled by an AI model will try to trick you.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Supported backends&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Backend&lt;/th&gt; 
   &lt;th&gt;Target devices&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#metal-build&quot;&gt;Metal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apple Silicon&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#blas-build&quot;&gt;BLAS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;All&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/backend/BLIS.md&quot;&gt;BLIS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;All&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/backend/SYCL.md&quot;&gt;SYCL&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Intel and Nvidia GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#musa&quot;&gt;MUSA&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Moore Threads GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#cuda&quot;&gt;CUDA&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Nvidia GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#hip&quot;&gt;HIP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AMD GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#vulkan&quot;&gt;Vulkan&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#cann&quot;&gt;CANN&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ascend NPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/backend/OPENCL.md&quot;&gt;OpenCL&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adreno GPU&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md#webgpu&quot;&gt;WebGPU [In Progress]&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;All&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp/tree/master/tools/rpc&quot;&gt;RPC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;All&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Obtaining and quantizing models&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://huggingface.co&quot;&gt;Hugging Face&lt;/a&gt; platform hosts a &lt;a href=&quot;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&quot;&gt;number of LLMs&lt;/a&gt; compatible with &lt;code&gt;llama.cpp&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/models?library=gguf&amp;amp;sort=trending&quot;&gt;Trending&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://huggingface.co/models?sort=trending&amp;amp;search=llama+gguf&quot;&gt;LLaMA&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can either manually download the GGUF file or directly use any &lt;code&gt;llama.cpp&lt;/code&gt;-compatible models from &lt;a href=&quot;https://huggingface.co/&quot;&gt;Hugging Face&lt;/a&gt; or other model hosting sites, such as &lt;a href=&quot;https://modelscope.cn/&quot;&gt;ModelScope&lt;/a&gt;, by using this CLI argument: &lt;code&gt;-hf &amp;lt;user&amp;gt;/&amp;lt;model&amp;gt;[:quant]&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;llama-cli -hf ggml-org/gemma-3-1b-it-GGUF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the CLI would download from Hugging Face, you can switch to other options with the environment variable &lt;code&gt;MODEL_ENDPOINT&lt;/code&gt;. For example, you may opt to downloading model checkpoints from ModelScope or other model sharing communities by setting the environment variable, e.g. &lt;code&gt;MODEL_ENDPOINT=https://www.modelscope.cn/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;After downloading a model, use the CLI tools to run it locally - see below.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;llama.cpp&lt;/code&gt; requires the model to be stored in the &lt;a href=&quot;https://github.com/ggml-org/ggml/raw/master/docs/gguf.md&quot;&gt;GGUF&lt;/a&gt; file format. Models in other data formats can be converted to GGUF using the &lt;code&gt;convert_*.py&lt;/code&gt; Python scripts in this repo.&lt;/p&gt; 
&lt;p&gt;The Hugging Face platform provides a variety of online tools for converting, quantizing and hosting models with &lt;code&gt;llama.cpp&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://huggingface.co/spaces/ggml-org/gguf-my-repo&quot;&gt;GGUF-my-repo space&lt;/a&gt; to convert to GGUF format and quantize model weights to smaller sizes&lt;/li&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://huggingface.co/spaces/ggml-org/gguf-my-lora&quot;&gt;GGUF-my-LoRA space&lt;/a&gt; to convert LoRA adapters to GGUF format (more info: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/10123&quot;&gt;https://github.com/ggml-org/llama.cpp/discussions/10123&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://huggingface.co/spaces/CISCai/gguf-editor&quot;&gt;GGUF-editor space&lt;/a&gt; to edit GGUF meta data in the browser (more info: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/9268&quot;&gt;https://github.com/ggml-org/llama.cpp/discussions/9268&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://ui.endpoints.huggingface.co/&quot;&gt;Inference Endpoints&lt;/a&gt; to directly host &lt;code&gt;llama.cpp&lt;/code&gt; in the cloud (more info: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/9669&quot;&gt;https://github.com/ggml-org/llama.cpp/discussions/9669&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more about model quantization, &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/quantize/README.md&quot;&gt;read this documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/main&quot;&gt;&lt;code&gt;llama-cli&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;A CLI tool for accessing and experimenting with most of &lt;code&gt;llama.cpp&lt;/code&gt;&#39;s functionality.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details open&gt; 
   &lt;summary&gt;Run in conversation mode&lt;/summary&gt; 
   &lt;p&gt;Models with a built-in chat template will automatically activate conversation mode. If this doesn&#39;t occur, you can manually enable it by adding &lt;code&gt;-cnv&lt;/code&gt; and specifying a suitable chat template with &lt;code&gt;--chat-template NAME&lt;/code&gt;&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-cli -m model.gguf

# &amp;gt; hi, who are you?
# Hi there! I&#39;m your helpful assistant! I&#39;m an AI-powered chatbot designed to assist and provide information to users like you. I&#39;m here to help answer your questions, provide guidance, and offer support on a wide range of topics. I&#39;m a friendly and knowledgeable AI, and I&#39;m always happy to help with anything you need. What&#39;s on your mind, and how can I assist you today?
#
# &amp;gt; what is 1+1?
# Easy peasy! The answer to 1+1 is... 2!
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Run in conversation mode with custom chat template&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# use the &quot;chatml&quot; template (use -h to see the list of supported templates)
llama-cli -m model.gguf -cnv --chat-template chatml

# use a custom template
llama-cli -m model.gguf -cnv --in-prefix &#39;User: &#39; --reverse-prompt &#39;User:&#39;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Run simple text completion&lt;/summary&gt; 
   &lt;p&gt;To disable conversation mode explicitly, use &lt;code&gt;-no-cnv&lt;/code&gt;&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-cli -m model.gguf -p &quot;I believe the meaning of life is&quot; -n 128 -no-cnv

# I believe the meaning of life is to find your own truth and to live in accordance with it. For me, this means being true to myself and following my passions, even if they don&#39;t align with societal expectations. I think that&#39;s what I love about yoga – it&#39;s not just a physical practice, but a spiritual one too. It&#39;s about connecting with yourself, listening to your inner voice, and honoring your own unique journey.
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Constrain the output with a custom grammar&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-cli -m model.gguf -n 256 --grammar-file grammars/json.gbnf -p &#39;Request: schedule a call at 8pm; Command:&#39;

# {&quot;appointmentTime&quot;: &quot;8pm&quot;, &quot;appointmentDetails&quot;: &quot;schedule a a call&quot;}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/grammars/&quot;&gt;grammars/&lt;/a&gt; folder contains a handful of sample grammars. To write your own, check out the &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/grammars/README.md&quot;&gt;GBNF Guide&lt;/a&gt;.&lt;/p&gt; 
   &lt;p&gt;For authoring more complex JSON grammars, check out &lt;a href=&quot;https://grammar.intrinsiclabs.ai/&quot;&gt;https://grammar.intrinsiclabs.ai/&lt;/a&gt;&lt;/p&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/server&quot;&gt;&lt;code&gt;llama-server&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;A lightweight, &lt;a href=&quot;https://github.com/openai/openai-openapi&quot;&gt;OpenAI API&lt;/a&gt; compatible, HTTP server for serving LLMs.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details open&gt; 
   &lt;summary&gt;Start a local HTTP server with default configuration on port 8080&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-server -m model.gguf --port 8080

# Basic web UI can be accessed via browser: http://localhost:8080
# Chat completion endpoint: http://localhost:8080/v1/chat/completions
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Support multiple-users and parallel decoding&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# up to 4 concurrent requests, each with 4096 max context
llama-server -m model.gguf -c 16384 -np 4
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Enable speculative decoding&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# the draft.gguf model should be a small variant of the target model.gguf
llama-server -m model.gguf -md draft.gguf
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Serve an embedding model&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# use the /embedding endpoint
llama-server -m model.gguf --embedding --pooling cls -ub 8192
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Serve a reranking model&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# use the /reranking endpoint
llama-server -m model.gguf --reranking
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Constrain all outputs with a grammar&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# custom grammar
llama-server -m model.gguf --grammar-file grammar.gbnf

# JSON
llama-server -m model.gguf --grammar-file grammars/json.gbnf
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/perplexity&quot;&gt;&lt;code&gt;llama-perplexity&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;A tool for measuring the &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/perplexity/README.md&quot;&gt;perplexity&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/%5Bhttps://huggingface.co/docs/transformers/perplexity%5D(https://huggingface.co/docs/transformers/perplexity)&quot;&gt;^1&lt;/a&gt; (and other quality metrics) of a model over a given text.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details open&gt; 
   &lt;summary&gt;Measure the perplexity over a text file&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-perplexity -m model.gguf -f file.txt

# [1]15.2701,[2]5.4007,[3]5.3073,[4]6.2965,[5]5.8940,[6]5.6096,[7]5.7942,[8]4.9297, ...
# Final estimate: PPL = 5.4007 +/- 0.67339
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Measure KL divergence&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# TODO
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/llama-bench&quot;&gt;&lt;code&gt;llama-bench&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;Benchmark the performance of the inference for various parameters.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details open&gt; 
   &lt;summary&gt;Run default benchmark&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-bench -m model.gguf

# Output:
# | model               |       size |     params | backend    | threads |          test |                  t/s |
# | ------------------- | ---------: | ---------: | ---------- | ------: | ------------: | -------------------: |
# | qwen2 1.5B Q4_0     | 885.97 MiB |     1.54 B | Metal,BLAS |      16 |         pp512 |      5765.41 ± 20.55 |
# | qwen2 1.5B Q4_0     | 885.97 MiB |     1.54 B | Metal,BLAS |      16 |         tg128 |        197.71 ± 0.81 |
#
# build: 3e0ba0e60 (4229)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/run&quot;&gt;&lt;code&gt;llama-run&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;A comprehensive example for running &lt;code&gt;llama.cpp&lt;/code&gt; models. Useful for inferencing. Used with RamaLama &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/%5BRamaLama%5D(https://github.com/containers/ramalama)&quot;&gt;^3&lt;/a&gt;.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Run a model with a specific prompt (by default it&#39;s pulled from Ollama registry)&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-run granite-code
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/examples/simple&quot;&gt;&lt;code&gt;llama-simple&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h4&gt;A minimal example for implementing apps with &lt;code&gt;llama.cpp&lt;/code&gt;. Useful for developers.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Basic text completion&lt;/summary&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;llama-simple -m model.gguf

# Hello my name is Kaitlyn and I am a 16 year old girl. I am a junior in high school and I am currently taking a class called &quot;The Art of
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributors can open PRs&lt;/li&gt; 
 &lt;li&gt;Collaborators can push to branches in the &lt;code&gt;llama.cpp&lt;/code&gt; repo and merge PRs into the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;Collaborators will be invited based on contributions&lt;/li&gt; 
 &lt;li&gt;Any help with managing issues, PRs and projects is very appreciated!&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;good first issues&lt;/a&gt; for tasks suitable for first contributions&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information&lt;/li&gt; 
 &lt;li&gt;Make sure to read this: &lt;a href=&quot;https://github.com/ggml-org/llama.cpp/discussions/205&quot;&gt;Inference at the edge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A bit of backstory for those who are interested: &lt;a href=&quot;https://changelog.com/podcast/532&quot;&gt;Changelog podcast&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/main/README.md&quot;&gt;main (cli)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/server/README.md&quot;&gt;server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/grammars/README.md&quot;&gt;GBNF grammars&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Development documentation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/build.md&quot;&gt;How to build&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/docker.md&quot;&gt;Running on Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/android.md&quot;&gt;Build on Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/docs/development/token_generation_performance_tips.md&quot;&gt;Performance troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp/wiki/GGML-Tips-&amp;amp;-Tricks&quot;&gt;GGML tips &amp;amp; tricks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Seminal papers and background on the models&lt;/h4&gt; 
&lt;p&gt;If your issue is with model generation quality, then please at least scan the following links and papers to understand the limitations of LLaMA models. This is especially important when choosing an appropriate model size and appreciating both the significant and subtle differences between LLaMA models and ChatGPT:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LLaMA: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.facebook.com/blog/large-language-model-llama-meta-ai/&quot;&gt;Introducing LLaMA: A foundational, 65-billion-parameter large language model&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2302.13971&quot;&gt;LLaMA: Open and Efficient Foundation Language Models&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GPT-3 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2005.14165&quot;&gt;Language Models are Few-Shot Learners&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GPT-3.5 / InstructGPT / ChatGPT: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://openai.com/research/instruction-following&quot;&gt;Aligning language models to follow instructions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2203.02155&quot;&gt;Training language models to follow instructions with human feedback&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;XCFramework&lt;/h2&gt; 
&lt;p&gt;The XCFramework is a precompiled version of the library for iOS, visionOS, tvOS, and macOS. It can be used in Swift projects without the need to compile the library from source. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version: 5.10
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: &quot;MyLlamaPackage&quot;,
    targets: [
        .executableTarget(
            name: &quot;MyLlamaPackage&quot;,
            dependencies: [
                &quot;LlamaFramework&quot;
            ]),
        .binaryTarget(
            name: &quot;LlamaFramework&quot;,
            url: &quot;https://github.com/ggml-org/llama.cpp/releases/download/b5046/llama-b5046-xcframework.zip&quot;,
            checksum: &quot;c19be78b5f00d8d29a25da41042cb7afa094cbf6280a225abe614b03b20029ab&quot;
        )
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above example is using an intermediate build &lt;code&gt;b5046&lt;/code&gt; of the library. This can be modified to use a different version by changing the URL and checksum.&lt;/p&gt; 
&lt;h2&gt;Completions&lt;/h2&gt; 
&lt;p&gt;Command-line completion is available for some environments.&lt;/p&gt; 
&lt;h4&gt;Bash Completion&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ build/bin/llama-cli --completion-bash &amp;gt; ~/.llama-completion.bash
$ source ~/.llama-completion.bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally this can be added to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; to load it automatically. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ echo &quot;source ~/.llama-completion.bash&quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yhirose/cpp-httplib&quot;&gt;yhirose/cpp-httplib&lt;/a&gt; - Single-header HTTP server, used by &lt;code&gt;llama-server&lt;/code&gt; - MIT license&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nothings/stb&quot;&gt;stb-image&lt;/a&gt; - Single-header image format decoder, used by multimodal subsystem - Public domain&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nlohmann/json&quot;&gt;nlohmann/json&lt;/a&gt; - Single-header JSON library, used by various tools/examples - MIT License&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/google/minja&quot;&gt;minja&lt;/a&gt; - Minimal Jinja parser in C++, used by various tools/examples - MIT License&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ggml-org/llama.cpp/master/tools/run/linenoise.cpp/linenoise.cpp&quot;&gt;linenoise.cpp&lt;/a&gt; - C++ library that provides readline-like line editing capabilities, used by &lt;code&gt;llama-run&lt;/code&gt; - BSD 2-Clause License&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl&lt;/a&gt; - Client-side URL transfer library, used by various tools/examples - &lt;a href=&quot;https://curl.se/docs/copyright.html&quot;&gt;CURL License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mackron/miniaudio&quot;&gt;miniaudio.h&lt;/a&gt; - Single-header audio format decoder, used by multimodal subsystem - Public domain&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>CLIUtils/CLI11</title>
      <link>https://github.com/CLIUtils/CLI11</link>
      <description>&lt;p&gt;CLI11 is a command line parser for C++11 and beyond that provides a rich feature set with a simple and intuitive interface.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLI11: Command line parser for C++11&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/docs/CLI11_300.png&quot; alt=&quot;CLI11 Logo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/CLIUtils/CLI11&quot;&gt;&lt;img src=&quot;https://dev.azure.com/CLIUtils/CLI11/_apis/build/status/CLIUtils.CLI11?branchName=main&quot; alt=&quot;Build Status Azure&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/actions&quot;&gt;&lt;img src=&quot;https://github.com/CLIUtils/CLI11/actions/workflows/tests.yml/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/CLIUtils/CLI11&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/CLIUtils/CLI11/branch/main/graph/badge.svg?token=2O4wfs8NJO&quot; alt=&quot;Code Coverage&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codacy.com/gh/CLIUtils/CLI11/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=CLIUtils/CLI11&amp;amp;utm_campaign=Badge_Grade&quot;&gt;&lt;img src=&quot;https://app.codacy.com/project/badge/Grade/2796b969c1b54321a02ad08affec0800&quot; alt=&quot;Codacy Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-BSD-blue.svg?sanitize=true&quot; alt=&quot;License: BSD&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://zenodo.org/badge/latestdoi/80064252&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/80064252.svg?sanitize=true&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/CLI11gitter/Lobby&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/CLI11gitter/Lobby.svg?sanitize=true&quot; alt=&quot;Gitter chat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/CLIUtils/CLI11.svg?sanitize=true&quot; alt=&quot;Latest GHA release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://repology.org/project/cli11/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/latest-versions/cli11.svg?sanitize=true&quot; alt=&quot;Latest release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://conan.io/center/cli11&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/conan-io-blue&quot; alt=&quot;Conan.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/conda-forge/cli11-feedstock&quot;&gt;&lt;img src=&quot;https://img.shields.io/conda/vn/conda-forge/cli11.svg?sanitize=true&quot; alt=&quot;Conda Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://wandbox.org/permlink/9eQyaD1DchlzukRv&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/try_2.1-online-blue.svg?sanitize=true&quot; alt=&quot;Try CLI11 2.4 online&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/CHANGELOG.md&quot;&gt;What&#39;s new&lt;/a&gt; • &lt;a href=&quot;https://cliutils.github.io/CLI11/book/&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://CLIUtils.github.io/CLI11/index.html&quot;&gt;API Reference&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CLI11 is a command line parser for C++11 and beyond that provides a rich feature set with a simple and intuitive interface.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#cli11-command-line-parser-for-c11&quot;&gt;CLI11: Command line parser for C++11&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#background&quot;&gt;Background&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#why-write-another-cli-parser&quot;&gt;Why write another CLI parser?&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#other-parsers&quot;&gt;Other parsers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#features-not-supported-by-this-library&quot;&gt;Features not supported by this library&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#usage&quot;&gt;Usage&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#adding-options&quot;&gt;Adding options&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-types&quot;&gt;Option types&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-options&quot;&gt;Option options&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&quot;&gt;Validators&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validator-operations&quot;&gt;Validator operations&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#custom-validators&quot;&gt;Custom Validators&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#querying-validators&quot;&gt;Querying Validators&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#getting-results&quot;&gt;Getting results&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommands&quot;&gt;Subcommands&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommand-options&quot;&gt;Subcommand options&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&quot;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&quot;&gt;Option groups&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#configuration-file&quot;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#inheriting-defaults&quot;&gt;Inheriting defaults&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subclassing&quot;&gt;Subclassing&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#unicode-support&quot;&gt;Unicode support&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#note-on-using-unicode-paths&quot;&gt;Note on using Unicode paths&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#utilities&quot;&gt;Utilities&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#other-libraries&quot;&gt;Other libraries&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Features that were added in the last released minor version are marked with &quot;🆕&quot;. Features only available in main are marked with &quot;🚧&quot;.&lt;/p&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;h3&gt;Introduction&lt;/h3&gt; 
&lt;p&gt;CLI11 provides all the features you expect in a powerful command line parser, with a beautiful, minimal syntax and no dependencies beyond C++11. It is header only, and comes in a single file form for easy inclusion in projects. It is easy to use for small projects, but powerful enough for complex command line projects, and can be customized for frameworks. It is tested on &lt;a href=&quot;https://dev.azure.com/CLIUtils/CLI11&quot;&gt;Azure&lt;/a&gt; and &lt;a href=&quot;https://github.com/CLIUtils/CLI11/actions&quot;&gt;GitHub Actions&lt;/a&gt;, and was originally used by the &lt;a href=&quot;https://GooFit.github.io&quot;&gt;GooFit GPU fitting framework&lt;/a&gt;. It was inspired by &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot;&gt;&lt;code&gt;plumbum.cli&lt;/code&gt;&lt;/a&gt; for Python. CLI11 has a user friendly introduction in this README, a more in-depth tutorial &lt;a href=&quot;https://cliutils.github.io/CLI11/book/&quot;&gt;GitBook&lt;/a&gt;, as well as &lt;a href=&quot;https://CLIUtils.github.io/CLI11/index.html&quot;&gt;API documentation&lt;/a&gt; generated by Travis. See the &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt; or &lt;a href=&quot;https://github.com/CLIUtils/CLI11/releases&quot;&gt;GitHub Releases&lt;/a&gt; for details for current and past releases. Also see the &lt;a href=&quot;https://iscinumpy.gitlab.io/post/announcing-cli11-10/&quot;&gt;Version 1.0 post&lt;/a&gt;, &lt;a href=&quot;https://iscinumpy.gitlab.io/post/announcing-cli11-13/&quot;&gt;Version 1.3 post&lt;/a&gt;, &lt;a href=&quot;https://iscinumpy.gitlab.io/post/announcing-cli11-16/&quot;&gt;Version 1.6 post&lt;/a&gt;, or &lt;a href=&quot;https://iscinumpy.gitlab.io/post/announcing-cli11-20/&quot;&gt;Version 2.0 post&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;You can be notified when new releases are made by subscribing to &lt;a href=&quot;https://github.com/CLIUtils/CLI11/releases.atom&quot;&gt;https://github.com/CLIUtils/CLI11/releases.atom&lt;/a&gt; on an RSS reader, like Feedly, or use the releases mode of the GitHub watching tool.&lt;/p&gt; 
&lt;h3&gt;Why write another CLI parser?&lt;/h3&gt; 
&lt;p&gt;An acceptable CLI parser library should be all of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy to include (i.e., header only, one file if possible, &lt;strong&gt;no external requirements&lt;/strong&gt;).&lt;/li&gt; 
 &lt;li&gt;Short, simple syntax: This is one of the main reasons to use a CLI parser, it should make variables from the command line nearly as easy to define as any other variables. If most of your program is hidden in CLI parsing, this is a problem for readability.&lt;/li&gt; 
 &lt;li&gt;C++11 or better: Should work with GCC 4.8+ (default on CentOS/RHEL 7), Clang 3.4+, AppleClang 7+, NVCC 7.0+, or MSVC 2015+.&lt;/li&gt; 
 &lt;li&gt;Work on Linux, macOS, and Windows.&lt;/li&gt; 
 &lt;li&gt;Well tested on all common platforms and compilers. &quot;Well&quot; is defined as having good coverage measured by &lt;a href=&quot;https://codecov.io/gh/CLIUtils/CLI11&quot;&gt;CodeCov&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Clear help printing.&lt;/li&gt; 
 &lt;li&gt;Nice error messages.&lt;/li&gt; 
 &lt;li&gt;Standard shell idioms supported naturally, like grouping flags, a positional separator, etc.&lt;/li&gt; 
 &lt;li&gt;Easy to execute, with help, parse errors, etc. providing correct exit and details.&lt;/li&gt; 
 &lt;li&gt;Easy to extend as part of a framework that provides &quot;applications&quot; to users.&lt;/li&gt; 
 &lt;li&gt;Usable subcommand syntax, with support for multiple subcommands, nested subcommands, option groups, and optional fallthrough (explained later).&lt;/li&gt; 
 &lt;li&gt;Ability to add a configuration file (&lt;code&gt;TOML&lt;/code&gt;, &lt;code&gt;INI&lt;/code&gt;, or custom format), and produce it as well.&lt;/li&gt; 
 &lt;li&gt;Produce real values that can be used directly in code, not something you have pay compute time to look up, for HPC applications.&lt;/li&gt; 
 &lt;li&gt;Work with common types, simple custom types, and extensible to exotic types.&lt;/li&gt; 
 &lt;li&gt;Permissively licensed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other parsers&lt;/h3&gt; 
&lt;details&gt;
 &lt;summary&gt;The major CLI parsers for C++ include, with my biased opinions: (click to expand)&lt;/summary&gt;
 &lt;p&gt; &lt;/p&gt;
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Library&lt;/th&gt; 
    &lt;th&gt;My biased opinion&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_63_0/doc/html/program_options.html&quot;&gt;Boost Program Options&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;A great library if you already depend on Boost, but its pre-C++11 syntax is really odd and setting up the correct call in the main function is poorly documented (and is nearly a page of code). A simple wrapper for the Boost library was originally developed, but was discarded as CLI11 became more powerful. The idea of capturing a value and setting it originated with Boost PO. &lt;a href=&quot;https://iscinumpy.gitlab.io/post/comparing-cli11-and-boostpo/&quot;&gt;See this comparison.&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;http://optionparser.sourceforge.net&quot;&gt;The Lean Mean C++ Option Parser&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;One header file is great, but the syntax is atrocious, in my opinion. It was quite impractical to wrap the syntax or to use in a complex project. It seems to handle standard parsing quite well.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;http://tclap.sourceforge.net&quot;&gt;TCLAP&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;The not-quite-standard command line parsing causes common shortcuts to fail. It also seems to be poorly supported, with only minimal bugfixes accepted. Header only, but in quite a few files. Has not managed to get enough support to move to GitHub yet. No subcommands. Produces wrapped values.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/jarro2783/cxxopts&quot;&gt;Cxxopts&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;C++11, single file, and nice CMake support, but requires regex, therefore GCC 4.8 (CentOS 7 default) does not work. Syntax closely based on Boost PO, so not ideal but familiar.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/docopt/docopt.cpp&quot;&gt;DocOpt&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Completely different approach to program options in C++11, you write the docs and the interface is generated. Too fragile and specialized.&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;After I wrote this, I also found the following libraries:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Library&lt;/th&gt; 
    &lt;th&gt;My biased opinion&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gflags.github.io/gflags&quot;&gt;GFlags&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;The Google Commandline Flags library. Uses macros heavily, and is limited in scope, missing things like subcommands. It provides a simple syntax and supports config files/env vars.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Getopt.html&quot;&gt;GetOpt&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Very limited C solution with long, convoluted syntax. Does not support much of anything, like help generation. Always available on UNIX, though (but in different flavors).&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Fytch/ProgramOptions.hxx&quot;&gt;ProgramOptions.hxx&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Interesting library, less powerful and no subcommands. Nice callback system.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Taywee/args&quot;&gt;Args&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Also interesting, and supports subcommands. I like the optional-like design, but CLI11 is cleaner and provides direct value access, and is less verbose.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/vietjtnguyen/argagg&quot;&gt;Argument Aggregator&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;I&#39;m a big fan of the &lt;a href=&quot;https://github.com/fmtlib/fmt&quot;&gt;fmt&lt;/a&gt; library, and the try-catch statement looks familiar. &lt;span&gt;👍&lt;/span&gt; Doesn&#39;t seem to support subcommands.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/philsquared/Clara&quot;&gt;Clara&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Simple library built for the excellent &lt;a href=&quot;https://github.com/philsquared/Catch&quot;&gt;Catch&lt;/a&gt; testing framework. Unique syntax, limited scope.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/adishavit/argh&quot;&gt;Argh!&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Very minimalistic C++11 parser, single header. Don&#39;t have many features. No help generation?!?! At least it&#39;s exception-free.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codesynthesis.com/projects/cli/&quot;&gt;CLI&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Custom language and parser. Huge build-system overkill for very little benefit. Last release in 2009, but still occasionally active.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/p-ranav/argparse&quot;&gt;argparse&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;C++17 single file argument parser. Design seems similar to CLI11 in some ways. The author has several other interesting projects.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/bfgroup/Lyra&quot;&gt;lyra&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;a simple header only parser with composable options. Might work well for simple standardized parsing&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://github.com/fffaraz/awesome-cpp/raw/master/README.md#cli&quot;&gt;Awesome C++&lt;/a&gt; for a less-biased list of parsers. You can also find other single file libraries at &lt;a href=&quot;https://github.com/nothings/single_file_libs/raw/master/README.md&quot;&gt;Single file libs&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt;
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;None of these libraries fulfill all the above requirements, or really even come close. As you probably have already guessed, CLI11 does. So, this library was designed to provide a great syntax, good compiler compatibility, and minimal installation fuss.&lt;/p&gt; 
&lt;h3&gt;Features not supported by this library&lt;/h3&gt; 
&lt;p&gt;There are some other possible &quot;features&quot; that are intentionally not supported by this library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Completion of partial options, such as Python&#39;s &lt;code&gt;argparse&lt;/code&gt; supplies for incomplete arguments. It&#39;s better not to guess. Most third party command line parsers for python actually reimplement command line parsing rather than using argparse because of this perceived design flaw (recent versions do have an option to disable it).&lt;/li&gt; 
 &lt;li&gt;Autocomplete: This might eventually be added to both Plumbum and CLI11, but it is not supported yet.&lt;/li&gt; 
 &lt;li&gt;While not recommended, CLI11 does now support non standard option names such as &lt;code&gt;-option&lt;/code&gt;. 🆕. This is enabled through &lt;code&gt;allow_non_standard_option_names()&lt;/code&gt; modifier on an app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;To use, the most common methods are described here additional methods and details are available at &lt;a href=&quot;https://cliutils.github.io/CLI11/book/chapters/installation.html&quot;&gt;installation&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All-in-one local header: Copy &lt;code&gt;CLI11.hpp&lt;/code&gt; from the &lt;a href=&quot;https://github.com/CLIUtils/CLI11/releases&quot;&gt;most recent release&lt;/a&gt; into your include directory, and you are set. This is combined from the source files for every release. This includes the entire command parser library, but does not include separate utilities (like &lt;code&gt;Timer&lt;/code&gt;, &lt;code&gt;AutoTimer&lt;/code&gt;). The utilities are completely self contained and can be copied separately.&lt;/li&gt; 
 &lt;li&gt;All-in-one global header: Like above, but copying the file to a shared folder location like &lt;code&gt;/opt/CLI11&lt;/code&gt;. Then, the C++ include path has to be extended to point at this folder. With CMake 3.10+, use &lt;code&gt;include_directories(/opt/CLI11)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For other methods including using CMake, conan or vcpkg and some specific instructions for GCC 8 or WASI see &lt;a href=&quot;https://cliutils.github.io/CLI11/book/chapters/installation.html&quot;&gt;installation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Adding options&lt;/h3&gt; 
&lt;p&gt;To set up, add options, and run, your main function will look something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int main(int argc, char** argv) {
    CLI::App app{&quot;App description&quot;};
    argv = app.ensure_utf8(argv);

    std::string filename = &quot;default&quot;;
    app.add_option(&quot;-f,--file&quot;, filename, &quot;A help string&quot;);

    CLI11_PARSE(app, argc, argv);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information about &lt;code&gt;ensure_utf8&lt;/code&gt; the section on &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#unicode-support&quot;&gt;Unicode support&lt;/a&gt; below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Note: If you don&#39;t like macros, this is what that macro expands to: (click to expand)&lt;/summary&gt;
 &lt;p&gt; &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;try {
    app.parse(argc, argv);
} catch (const CLI::ParseError &amp;amp;e) {
    return app.exit(e);
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The try/catch block ensures that &lt;code&gt;-h,--help&lt;/code&gt; or a parse error will exit with the correct return code (selected from &lt;code&gt;CLI::ExitCodes&lt;/code&gt;). (The return here should be inside &lt;code&gt;main&lt;/code&gt;). You should not assume that the option values have been set inside the catch block; for example, help flags intentionally short-circuit all other processing for speed and to ensure required options and the like do not interfere.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt;
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;The initialization is just one line, adding options is just two each. The parse macro is just one line (or 5 for the contents of the macro). After the app runs, the filename will be set to the correct value if it was passed, otherwise it will be set to the default. You can check to see if this was passed on the command line with &lt;code&gt;app.count(&quot;--file&quot;)&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Option types&lt;/h4&gt; 
&lt;p&gt;While all options internally are the same type, there are several ways to add an option depending on what you need. The supported values are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// Add options
app.add_option(option_name, help_str=&quot;&quot;)

app.add_option(option_name,
               variable_to_bind_to, // bool, char(see note), int, float, vector, enum, std::atomic, or string-like, or anything with a defined conversion from a string or that takes an int, double, or string in a constructor. Also allowed are tuples, std::array or std::pair. Also supported are complex numbers, wrapper types, and containers besides vectors of any other supported type.
               help_string=&quot;&quot;)

app.add_option_function&amp;lt;type&amp;gt;(option_name,
               function &amp;lt;void(const type &amp;amp;value)&amp;gt;, // type can be any type supported by add_option
               help_string=&quot;&quot;)

// char as an option type is supported before 2.0 but in 2.0 it defaulted to allowing single non numerical characters in addition to the numeric values.

// There is a template overload which takes two template parameters the first is the type of object to assign the value to, the second is the conversion type.  The conversion type should have a known way to convert from a string, such as any of the types that work in the non-template version.  If XC is a std::pair and T is some non pair type.  Then a two argument constructor for T is called to assign the value.  For tuples or other multi element types, XC must be a single type or a tuple like object of the same size as the assignment type
app.add_option&amp;lt;typename T, typename XC&amp;gt;(option_name,
               T &amp;amp;output, // output must be assignable or constructible from a value of type XC
               help_string=&quot;&quot;)

// Add flags
app.add_flag(option_name,
             help_string=&quot;&quot;)

app.add_flag(option_name,
             variable_to_bind_to, // bool, int, float, complex, containers, enum, std::atomic, or string-like, or any singular object with a defined conversion from a string like add_option
             help_string=&quot;&quot;)

app.add_flag_function(option_name,
             function &amp;lt;void(std::int64_t count)&amp;gt;,
             help_string=&quot;&quot;)

app.add_flag_callback(option_name,function&amp;lt;void(void)&amp;gt;,help_string=&quot;&quot;)

// Add subcommands
App* subcom = app.add_subcommand(name, description);

Option_group *app.add_option_group(name,description);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An option name may start with any character except (&#39;-&#39;, &#39; &#39;, &#39;\n&#39;, and &#39;!&#39;). For long options, after the first character all characters are allowed except (&#39;=&#39;,&#39;:&#39;,&#39;{&#39;,&#39; &#39;, &#39;\n&#39;). For the &lt;code&gt;add_flag*&lt;/code&gt; functions &#39;{&#39; and &#39;!&#39; have special meaning which is why they are not allowed. Names are given as a comma separated string, with the dash or dashes. An option or flag can have as many names as you want, and afterward, using &lt;code&gt;count&lt;/code&gt;, you can use any of the names, with dashes as needed, to count the options. One of the names is allowed to be given without proceeding dash(es); if present the option is a positional option, and that name will be used on the help line for its positional form. The string &lt;code&gt;++&lt;/code&gt; is also not allowed as option name due to its use as an array separator and marker on config files.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;add_option_function&amp;lt;type&amp;gt;(...&lt;/code&gt; function will typically require the template parameter be given unless a &lt;code&gt;std::function&lt;/code&gt; object with an exact match is passed. The type can be any type supported by the &lt;code&gt;add_option&lt;/code&gt; function. The function should throw an error (&lt;code&gt;CLI::ConversionError&lt;/code&gt; or &lt;code&gt;CLI::ValidationError&lt;/code&gt; possibly) if the value is not valid.&lt;/p&gt; 
&lt;p&gt;The two parameter template overload can be used in cases where you want to restrict the input such as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;double val
app.add_option&amp;lt;double,unsigned int&amp;gt;(&quot;-v&quot;,val);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which would first verify the input is convertible to an &lt;code&gt;unsigned int&lt;/code&gt; before assigning it. Or using some variant type&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;using vtype=std::variant&amp;lt;int, double, std::string&amp;gt;;
 vtype v1;
app.add_option&amp;lt;vtype,std:string&amp;gt;(&quot;--vs&quot;,v1);
app.add_option&amp;lt;vtype,int&amp;gt;(&quot;--vi&quot;,v1);
app.add_option&amp;lt;vtype,double&amp;gt;(&quot;--vf&quot;,v1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;otherwise the output would default to a string. The &lt;code&gt;add_option&lt;/code&gt; can be used with any integral or floating point types, enumerations, or strings. Or any type that takes an int, double, or std::string in an assignment operator or constructor. If an object can take multiple varieties of those, std::string takes precedence, then double then int. To better control which one is used or to use another type for the underlying conversions use the two parameter template to directly specify the conversion type.&lt;/p&gt; 
&lt;p&gt;Types such as (std or boost) &lt;code&gt;optional&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;optional&amp;lt;double&amp;gt;&lt;/code&gt;, and &lt;code&gt;optional&amp;lt;string&amp;gt;&lt;/code&gt; and any other wrapper types are supported directly. For purposes of CLI11 wrapper types are those which &lt;code&gt;value_type&lt;/code&gt; definition. See &lt;a href=&quot;https://cliutils.gitlab.io/CLI11Tutorial/chapters/advanced-topics.html#custom-converters&quot;&gt;CLI11 Advanced Topics/Custom Converters&lt;/a&gt; for information on how you can add your own converters for additional types.&lt;/p&gt; 
&lt;p&gt;Vector types can also be used in the two parameter template overload&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;std::vector&amp;lt;double&amp;gt; v1;
app.add_option&amp;lt;std::vector&amp;lt;double&amp;gt;,int&amp;gt;(&quot;--vs&quot;,v1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;would load a vector of doubles but ensure all values can be represented as integers.&lt;/p&gt; 
&lt;p&gt;Automatic direct capture of the default string is disabled when using the two parameter template. Use &lt;code&gt;set_default_str(...)&lt;/code&gt; or &lt;code&gt;-&amp;gt;default_function(std::string())&lt;/code&gt; to set the default string or capture function directly for these cases.&lt;/p&gt; 
&lt;p&gt;Flag options specified through the &lt;code&gt;add_flag*&lt;/code&gt; functions allow a syntax for the option names to default particular options to a false value or any other value if some flags are passed. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.add_flag(&quot;--flag,!--no-flag&quot;,result,&quot;help for flag&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;specifies that if &lt;code&gt;--flag&lt;/code&gt; is passed on the command line result will be true or contain a value of 1. If &lt;code&gt;--no-flag&lt;/code&gt; is passed &lt;code&gt;result&lt;/code&gt; will contain false or -1 if &lt;code&gt;result&lt;/code&gt; is a signed integer type, or 0 if it is an unsigned type. An alternative form of the syntax is more explicit: &lt;code&gt;&quot;--flag,--no-flag{false}&quot;&lt;/code&gt;; this is equivalent to the previous example. This also works for short form options &lt;code&gt;&quot;-f,!-n&quot;&lt;/code&gt; or &lt;code&gt;&quot;-f,-n{false}&quot;&lt;/code&gt;. If &lt;code&gt;variable_to_bind_to&lt;/code&gt; is anything but an integer value the default behavior is to take the last value given, while if &lt;code&gt;variable_to_bind_to&lt;/code&gt; is an integer type the behavior will be to sum all the given arguments and return the result. This can be modified if needed by changing the &lt;code&gt;multi_option_policy&lt;/code&gt; on each flag (this is not inherited). The default value can be any value. For example if you wished to define a numerical flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.add_flag(&quot;-1{1},-2{2},-3{3}&quot;,result,&quot;numerical flag&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using any of those flags on the command line will result in the specified number in the output. Similar things can be done for string values, and enumerations, as long as the default value can be converted to the given type.&lt;/p&gt; 
&lt;p&gt;On a &lt;code&gt;C++14&lt;/code&gt; compiler, you can pass a callback function directly to &lt;code&gt;.add_flag&lt;/code&gt;, while in C++11 mode you&#39;ll need to use &lt;code&gt;.add_flag_function&lt;/code&gt; if you want a callback function. The function will be given the number of times the flag was passed. You can throw a relevant &lt;code&gt;CLI::ParseError&lt;/code&gt; to signal a failure.&lt;/p&gt; 
&lt;h4&gt;Example&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&quot;one,-o,--one&quot;&lt;/code&gt;: Valid as long as not a flag, would create an option that can be specified positionally, or with &lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--one&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;this&quot;&lt;/code&gt; Can only be passed positionally&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;-a,-b,-c&quot;&lt;/code&gt; No limit to the number of non-positional option names&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The add commands return a pointer to an internally stored &lt;code&gt;Option&lt;/code&gt;. This option can be used directly to check for the count (&lt;code&gt;-&amp;gt;count()&lt;/code&gt;) after parsing to avoid a string based lookup.&lt;/p&gt; 
&lt;h4&gt;Option options&lt;/h4&gt; 
&lt;p&gt;Before parsing, you can set the following options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;required()&lt;/code&gt;: The program will quit if this option is not present. This is &lt;code&gt;mandatory&lt;/code&gt; in Plumbum, but required options seems to be a more standard term. For compatibility, &lt;code&gt;-&amp;gt;mandatory()&lt;/code&gt; also works.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;expected(N)&lt;/code&gt;: Take &lt;code&gt;N&lt;/code&gt; values instead of as many as possible, only for vector args. If negative, require at least &lt;code&gt;-N&lt;/code&gt;; end with &lt;code&gt;--&lt;/code&gt; or another recognized option or subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;expected(MIN,MAX)&lt;/code&gt;: Set a range of expected values to accompany an option. &lt;code&gt;expected(0,1)&lt;/code&gt; is the equivalent of making a flag.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;type_name(typename)&lt;/code&gt;: Set the name of an Option&#39;s type (&lt;code&gt;type_name_fn&lt;/code&gt; allows a function instead)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;type_size(N)&lt;/code&gt;: Set the intrinsic size of an option value. The parser will require multiples of this number if negative. Most of the time this is detected automatically though can be modified for specific use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;type_size(MIN,MAX)&lt;/code&gt;: Set the intrinsic size of an option to a range.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;needs(opt)&lt;/code&gt;: This option requires another option to also be present, opt is an &lt;code&gt;Option&lt;/code&gt; pointer. Options can be removed from the &lt;code&gt;needs&lt;/code&gt; with &lt;code&gt;remove_needs(opt)&lt;/code&gt;. The option can also be specified with a string containing the name of the option&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;excludes(opt)&lt;/code&gt;: This option cannot be given with &lt;code&gt;opt&lt;/code&gt; present, opt is an &lt;code&gt;Option&lt;/code&gt; pointer. Can also be given as a string containing the name of the option. Options can be removed from the excludes list with &lt;code&gt;-&amp;gt;remove_excludes(opt)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;envname(name)&lt;/code&gt;: Gets the value from the environment if present and not passed on the command line. The value must also pass any validators to be used.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;group(name)&lt;/code&gt;: The help group to put the option in. No effect for positional options. Defaults to &lt;code&gt;&quot;Options&quot;&lt;/code&gt;. Options given an empty string will not show up in the help print (hidden).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;ignore_case()&lt;/code&gt;: Ignore the case on the command line (also works on subcommands, does not affect arguments).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;ignore_underscore()&lt;/code&gt;: Ignore any underscores in the options names (also works on subcommands, does not affect arguments). For example &quot;option_one&quot; will match with &quot;optionone&quot;. This does not apply to short form options since they only have one character&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;disable_flag_override()&lt;/code&gt;: From the command line long form flag options can be assigned a value on the command line using the &lt;code&gt;=&lt;/code&gt; notation &lt;code&gt;--flag=value&lt;/code&gt;. If this behavior is not desired, the &lt;code&gt;disable_flag_override()&lt;/code&gt; disables it and will generate an exception if it is done on the command line. The &lt;code&gt;=&lt;/code&gt; does not work with short form flag options.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;allow_extra_args(true/false)&lt;/code&gt;: If set to true the option will take an unlimited number of arguments like a vector, if false it will limit the number of arguments to the size of the type used in the option. Default value depends on the nature of the type use, containers default to true, others default to false.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;delimiter(char)&lt;/code&gt;: Allows specification of a custom delimiter for separating single arguments into vector arguments, for example specifying &lt;code&gt;-&amp;gt;delimiter(&#39;,&#39;)&lt;/code&gt; on an option would result in &lt;code&gt;--opt=1,2,3&lt;/code&gt; producing 3 elements of a vector and the equivalent of --opt 1 2 3 assuming opt is a vector value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;description(str)&lt;/code&gt;: Set/change the description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;multi_option_policy(CLI::MultiOptionPolicy::Throw)&lt;/code&gt;: Set the multi-option policy. Shortcuts available: &lt;code&gt;-&amp;gt;take_last()&lt;/code&gt;, &lt;code&gt;-&amp;gt;take_first()&lt;/code&gt;,&lt;code&gt;-&amp;gt;take_all()&lt;/code&gt;, and &lt;code&gt;-&amp;gt;join()&lt;/code&gt;. This will only affect options expecting 1 argument or bool flags (which do not inherit their default but always start with a specific policy). &lt;code&gt;-&amp;gt;join(delim)&lt;/code&gt; can also be used to join with a specific delimiter. This equivalent to calling &lt;code&gt;-&amp;gt;delimiter(delim)&lt;/code&gt; and &lt;code&gt;-&amp;gt;join()&lt;/code&gt;. Valid values are &lt;code&gt;CLI::MultiOptionPolicy::Throw&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::Throw&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeLast&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeFirst&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::Join&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::TakeAll&lt;/code&gt;, &lt;code&gt;CLI::MultiOptionPolicy::Sum&lt;/code&gt;, and &lt;code&gt;CLI::MultiOptionPolicy::Reverse&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;check(std::string(const std::string &amp;amp;), validator_name=&quot;&quot;,validator_description=&quot;&quot;)&lt;/code&gt;: Define a check function. The function should return a non empty string with the error message if the check fails&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;check(Validator)&lt;/code&gt;: Use a Validator object to do the check see &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&quot;&gt;Validators&lt;/a&gt; for a description of available Validators and how to create new ones.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;transform(std::string(std::string &amp;amp;), validator_name=&quot;&quot;,validator_description=&quot;)&lt;/code&gt;: Converts the input string into the output string, in-place in the parsed options.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;transform(Validator)&lt;/code&gt;: Uses a Validator object to do the transformation see &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#validators&quot;&gt;Validators&lt;/a&gt; for a description of available Validators and how to create new ones.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;each(void(const std::string &amp;amp;)&amp;gt;&lt;/code&gt;: Run this function on each value received, as it is received. It should throw a &lt;code&gt;ValidationError&lt;/code&gt; if an error is encountered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;configurable(false)&lt;/code&gt;: Disable this option from being in a configuration file.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;capture_default_str()&lt;/code&gt;: Store the current value attached and display it in the help string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;default_function(std::string())&lt;/code&gt;: Advanced: Change the function that &lt;code&gt;capture_default_str()&lt;/code&gt; uses.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;always_capture_default()&lt;/code&gt;: Always run &lt;code&gt;capture_default_str()&lt;/code&gt; when creating new options. Only useful on an App&#39;s &lt;code&gt;option_defaults&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;default_str(string)&lt;/code&gt;: Set the default string directly (NO VALIDATION OR CALLBACKS). This string will also be used as a default value if no arguments are passed and the value is requested.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;default_val(value)&lt;/code&gt;: Generate the default string from a value and validate that the value is also valid. For options that assign directly to a value type the value in that type is also updated. Value must be convertible to a string(one of known types or have a stream operator). The callback may be triggered if the &lt;code&gt;run_callback_for_default&lt;/code&gt; is set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;run_callback_for_default()&lt;/code&gt;: This will force the option callback to be executed or the variable set when the &lt;code&gt;default_val&lt;/code&gt; is set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;option_text(string)&lt;/code&gt;: Sets the text between the option name and description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;force_callback()&lt;/code&gt;: Causes the option callback or value set to be triggered even if the option was not present in parsing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;trigger_on_parse()&lt;/code&gt;: If set, causes the callback and all associated validation checks for the option to be executed when the option value is parsed vs. at the end of all parsing. This could cause the callback to be executed multiple times. Also works with positional options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These options return the &lt;code&gt;Option&lt;/code&gt; pointer, so you can chain them together, and even skip storing the pointer entirely. The &lt;code&gt;each&lt;/code&gt; function takes any function that has the signature &lt;code&gt;void(const std::string&amp;amp;)&lt;/code&gt;; it should throw a &lt;code&gt;ValidationError&lt;/code&gt; when validation fails. The help message will have the name of the parent option prepended. Since &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; use the same underlying mechanism, you can chain as many as you want, and they will be executed in order. Operations added through &lt;code&gt;transform&lt;/code&gt; are executed first in reverse order of addition, and &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;each&lt;/code&gt; are run following the transform functions in order of addition. If you just want to see the unconverted values, use &lt;code&gt;.results()&lt;/code&gt; to get the &lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; of results.&lt;/p&gt; 
&lt;p&gt;On the command line, options can be given as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; (flag)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-abc&lt;/code&gt; (flags can be combined)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-f filename&lt;/code&gt; (option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-ffilename&lt;/code&gt; (no space required)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-abcf filename&lt;/code&gt; (flags and option can be combined)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--long&lt;/code&gt; (long flag)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--long_flag=true&lt;/code&gt; (long flag with equals -- to override default value)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--file filename&lt;/code&gt; (space)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--file=filename&lt;/code&gt; (equals)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;code&gt;allow_windows_style_options()&lt;/code&gt; is specified in the application or subcommand options can also be given as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;/a&lt;/code&gt; (flag)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/f filename&lt;/code&gt; (option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/long&lt;/code&gt; (long flag)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/file filename&lt;/code&gt; (space)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/file:filename&lt;/code&gt; (colon)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/long_flag:false&lt;/code&gt; (long flag with : to override the default value) 
  &lt;ul&gt; 
   &lt;li&gt;Windows style options do not allow combining short options or values not separated from the short option like with &lt;code&gt;-&lt;/code&gt; options&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Long flag options may be given with an &lt;code&gt;=&amp;lt;value&amp;gt;&lt;/code&gt; to allow specifying a false value, or some other value to the flag. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#configuration-file&quot;&gt;config files&lt;/a&gt; for details on the values supported. NOTE: only the &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt; for windows-style options may be used for this, using a space will result in the argument being interpreted as a positional argument. This syntax can override the default values, and can be disabled by using &lt;code&gt;disable_flag_override()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Extra positional arguments will cause the program to exit, so at least one positional option with a vector is recommended if you want to allow extraneous arguments. If you set &lt;code&gt;.allow_extras()&lt;/code&gt; on the main &lt;code&gt;App&lt;/code&gt;, you will not get an error. You can access the missing options using &lt;code&gt;remaining&lt;/code&gt; (if you have subcommands, &lt;code&gt;app.remaining(true)&lt;/code&gt; will get all remaining options, subcommands included). If the remaining arguments are to processed by another &lt;code&gt;App&lt;/code&gt; then the function &lt;code&gt;remaining_for_passthrough()&lt;/code&gt; can be used to get the remaining arguments in reverse order such that &lt;code&gt;app.parse(vector)&lt;/code&gt; works directly and could even be used inside a subcommand callback.&lt;/p&gt; 
&lt;p&gt;You can access a vector of pointers to the parsed options in the original order using &lt;code&gt;parse_order()&lt;/code&gt;. If &lt;code&gt;--&lt;/code&gt; is present in the command line that does not end an unlimited option, then everything after that is positional only.&lt;/p&gt; 
&lt;h4&gt;Validators&lt;/h4&gt; 
&lt;p&gt;Validators are structures to check or modify inputs, they can be used to verify that an input meets certain criteria or transform it into another value. They are added through the &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; functions. The differences between the two function are that checks do not modify the input whereas transforms can and are executed before any Validators added through &lt;code&gt;check&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;CLI11 has several Validators built-in that perform some common checks&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CLI::IsMember(...)&lt;/code&gt;: Require an option be a member of a given set. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Transformer(...)&lt;/code&gt;: Modify the input using a map. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::CheckedTransformer(...)&lt;/code&gt;: Modify the input using a map, and require that the input is either in the set or already one of the outputs of the set. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::AsNumberWithUnit(...)&lt;/code&gt;: Modify the &lt;code&gt;&amp;lt;NUMBER&amp;gt; &amp;lt;UNIT&amp;gt;&lt;/code&gt; pair by matching the unit and multiplying the number by the corresponding factor. It can be used as a base for transformers, that accept things like size values (&lt;code&gt;1 KB&lt;/code&gt;) or durations (&lt;code&gt;0.33 ms&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::AsSizeValue(...)&lt;/code&gt;: Convert inputs like &lt;code&gt;100b&lt;/code&gt;, &lt;code&gt;42 KB&lt;/code&gt;, &lt;code&gt;101 Mb&lt;/code&gt;, &lt;code&gt;11 Mib&lt;/code&gt; to absolute values. &lt;code&gt;KB&lt;/code&gt; can be configured to be interpreted as 10^3 or 2^10.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::ExistingFile&lt;/code&gt;: Requires that the file exists if given.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::ExistingDirectory&lt;/code&gt;: Requires that the directory exists.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::ExistingPath&lt;/code&gt;: Requires that the path (file or directory) exists.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::NonexistentPath&lt;/code&gt;: Requires that the path does not exist.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::FileOnDefaultPath&lt;/code&gt;: Best used as a transform, Will check that a file exists either directly or in a default path and update the path appropriately. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt; for more details&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Range(min,max)&lt;/code&gt;: Requires that the option be between min and max (make sure to use floating point if needed). Min defaults to 0.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Bounded(min,max)&lt;/code&gt;: Modify the input such that it is always between min and max (make sure to use floating point if needed). Min defaults to 0. Will produce an error if conversion is not possible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::PositiveNumber&lt;/code&gt;: Requires the number be greater than 0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::NonNegativeNumber&lt;/code&gt;: Requires the number be greater or equal to 0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Number&lt;/code&gt;: Requires the input be a number.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::ValidIPV4&lt;/code&gt;: Requires that the option be a valid IPv4 string e.g. &lt;code&gt;&#39;255.255.255.255&#39;&lt;/code&gt;, &lt;code&gt;&#39;10.1.1.7&#39;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::TypeValidator&amp;lt;TYPE&amp;gt;&lt;/code&gt;:Requires that the option be convertible to the specified type e.g. &lt;code&gt;CLI::TypeValidator&amp;lt;unsigned int&amp;gt;()&lt;/code&gt; would require that the input be convertible to an &lt;code&gt;unsigned int&lt;/code&gt; regardless of the end conversion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These Validators can be used by simply passing the name into the &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; methods on an option&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;-&amp;gt;check(CLI::ExistingFile);
-&amp;gt;check(CLI::Range(0,10));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Validators can be merged using &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; and inverted using &lt;code&gt;!&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;-&amp;gt;check(CLI::Range(0,10)|CLI::Range(20,30));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will produce a check to ensure a value is between 0 and 10 or 20 and 30.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;-&amp;gt;check(!CLI::PositiveNumber);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will produce a check for a number less than or equal to 0.&lt;/p&gt; 
&lt;h5&gt;Transforming Validators&lt;/h5&gt; 
&lt;p&gt;There are a few built in Validators that let you transform values if used with the &lt;code&gt;transform&lt;/code&gt; function. If they also do some checks then they can be used &lt;code&gt;check&lt;/code&gt; but some may do nothing in that case.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Bounded(min,max)&lt;/code&gt; will bound values between min and max and values outside of that range are limited to min or max, it will fail if the value cannot be converted and produce a &lt;code&gt;ValidationError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;IsMember&lt;/code&gt; Validator lets you specify a set of predefined options. You can pass any container or copyable pointer (including &lt;code&gt;std::shared_ptr&lt;/code&gt;) to a container to this Validator; the container just needs to be iterable and have a &lt;code&gt;::value_type&lt;/code&gt;. The key type should be convertible from a string, You can use an initializer list directly if you like. If you need to modify the set later, the pointer form lets you do that; the type message and check will correctly refer to the current version of the set. The container passed in can be a set, vector, or a map like structure. If used in the &lt;code&gt;transform&lt;/code&gt; method the output value will be the matching key as it could be modified by filters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;After specifying a set of options, you can also specify &quot;filter&quot; functions of the form &lt;code&gt;T(T)&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type of the values. The most common choices probably will be &lt;code&gt;CLI::ignore_case&lt;/code&gt; an &lt;code&gt;CLI::ignore_underscore&lt;/code&gt;, and &lt;code&gt;CLI::ignore_space&lt;/code&gt;. These all work on strings but it is possible to define functions that work on other types. Here are some examples of &lt;code&gt;IsMember&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CLI::IsMember({&quot;choice1&quot;, &quot;choice2&quot;})&lt;/code&gt;: Select from exact match to choices.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::IsMember({&quot;choice1&quot;, &quot;choice2&quot;}, CLI::ignore_case, CLI::ignore_underscore)&lt;/code&gt;: Match things like &lt;code&gt;Choice_1&lt;/code&gt;, too.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::IsMember(std::set&amp;lt;int&amp;gt;({2,3,4}))&lt;/code&gt;: Most containers and types work; you just need &lt;code&gt;std::begin&lt;/code&gt;, &lt;code&gt;std::end&lt;/code&gt;, and &lt;code&gt;::value_type&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::IsMember(std::map&amp;lt;std::string, TYPE&amp;gt;({{&quot;one&quot;, 1}, {&quot;two&quot;, 2}}))&lt;/code&gt;: You can use maps; in &lt;code&gt;-&amp;gt;transform()&lt;/code&gt; these replace the matched value with the matched key. The value member of the map is not used in &lt;code&gt;IsMember&lt;/code&gt;, so it can be any type.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auto p = std::make_shared&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;(std::initializer_list&amp;lt;std::string&amp;gt;(&quot;one&quot;, &quot;two&quot;)); CLI::IsMember(p)&lt;/code&gt;: You can modify &lt;code&gt;p&lt;/code&gt; later.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;Transformer&lt;/code&gt; and &lt;code&gt;CheckedTransformer&lt;/code&gt; Validators transform one value into another. Any container or copyable pointer (including &lt;code&gt;std::shared_ptr&lt;/code&gt;) to a container that generates pairs of values can be passed to these &lt;code&gt;Validator&#39;s&lt;/code&gt;; the container just needs to be iterable and have a &lt;code&gt;::value_type&lt;/code&gt; that consists of pairs. The key type should be convertible from a string, and the value type should be convertible to a string You can use an initializer list directly if you like. If you need to modify the map later, the pointer form lets you do that; the description message will correctly refer to the current version of the map. &lt;code&gt;Transformer&lt;/code&gt; does not do any checking so values not in the map are ignored. &lt;code&gt;CheckedTransformer&lt;/code&gt; takes an extra step of verifying that the value is either one of the map key values, in which case it is transformed, or one of the expected output values, and if not will generate a &lt;code&gt;ValidationError&lt;/code&gt;. A Transformer placed using &lt;code&gt;check&lt;/code&gt; will not do anything.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;After specifying a map of options, you can also specify &quot;filter&quot; just like in &lt;code&gt;CLI::IsMember&lt;/code&gt;. Here are some examples (&lt;code&gt;Transformer&lt;/code&gt; and &lt;code&gt;CheckedTransformer&lt;/code&gt; are interchangeable in the examples) of &lt;code&gt;Transformer&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Transformer({{&quot;key1&quot;, &quot;map1&quot;},{&quot;key2&quot;,&quot;map2&quot;}})&lt;/code&gt;: Select from key values and produce map values.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::Transformer(std::map&amp;lt;std::string,int&amp;gt;({&quot;two&quot;,2},{&quot;three&quot;,3},{&quot;four&quot;,4}}))&lt;/code&gt;: most maplike containers work, the &lt;code&gt;::value_type&lt;/code&gt; needs to produce a pair of some kind.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CLI::CheckedTransformer(std::map&amp;lt;std::string, int&amp;gt;({{&quot;one&quot;, 1}, {&quot;two&quot;, 2}}))&lt;/code&gt;: You can use maps; in &lt;code&gt;-&amp;gt;transform()&lt;/code&gt; these replace the matched key with the value. &lt;code&gt;CheckedTransformer&lt;/code&gt; also requires that the value either match one of the keys or match one of known outputs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auto p = std::make_shared&amp;lt;CLI::TransformPairs&amp;lt;std::string&amp;gt;&amp;gt;(std::initializer_list&amp;lt;std::pair&amp;lt;std::string,std::string&amp;gt;&amp;gt;({&quot;key1&quot;, &quot;map1&quot;},{&quot;key2&quot;,&quot;map2&quot;})); CLI::Transformer(p)&lt;/code&gt;: You can modify &lt;code&gt;p&lt;/code&gt; later. &lt;code&gt;TransformPairs&amp;lt;T&amp;gt;&lt;/code&gt; is an alias for &lt;code&gt;std::vector&amp;lt;std::pair&amp;lt;&amp;lt;std::string,T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;NOTES: If the container used in &lt;code&gt;IsMember&lt;/code&gt;, &lt;code&gt;Transformer&lt;/code&gt;, or &lt;code&gt;CheckedTransformer&lt;/code&gt; has a &lt;code&gt;find&lt;/code&gt; function like &lt;code&gt;std::unordered_map&lt;/code&gt; or &lt;code&gt;std::map&lt;/code&gt; then that function is used to do the searching. If it does not have a &lt;code&gt;find&lt;/code&gt; function a linear search is performed. If there are filters present, the fast search is performed first, and if that fails a linear search with the filters on the key values is performed.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;CLI::FileOnDefaultPath(default_path)&lt;/code&gt;: can be used to check for files in a default path. If used as a transform it will first check that a file exists, if it does nothing further is done, if it does not it tries to add a default Path to the file and search there again. If the file does not exist an error is returned normally but this can be disabled using &lt;code&gt;CLI::FileOnDefaultPath(default_path, false)&lt;/code&gt;. This allows multiple paths to be chained using multiple transform calls.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;CLI::EscapedString&lt;/code&gt;: can be used to process an escaped string. The processing is equivalent to that used for TOML config files, see &lt;a href=&quot;https://toml.io/en/v1.0.0#string&quot;&gt;TOML strings&lt;/a&gt;. With 2 notable exceptions. ` can also be used as a literal string notation, and it also allows binary string notation see &lt;a href=&quot;https://cliutils.github.io/CLI11/book/chapters/config.html&quot;&gt;binary strings&lt;/a&gt;. The escaped string processing will remove outer quotes if present, &lt;code&gt;&quot;&lt;/code&gt; will indicate a string with potential escape sequences, &lt;code&gt;&#39;&lt;/code&gt; and ` will indicate a literal string and the quotes removed but no escape sequences will be processed. This is the same escape processing as used in config files.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Validator operations&lt;/h5&gt; 
&lt;p&gt;Validators are copyable and have a few operations that can be performed on them to alter settings. Most of the built in Validators have a default description that is displayed in the help. This can be altered via &lt;code&gt;.description(validator_description)&lt;/code&gt;. The name of a Validator, which is useful for later reference from the &lt;code&gt;get_validator(name)&lt;/code&gt; method of an &lt;code&gt;Option&lt;/code&gt; can be set via &lt;code&gt;.name(validator_name)&lt;/code&gt; The operation function of a Validator can be set via &lt;code&gt;.operation(std::function&amp;lt;std::string(std::string &amp;amp;&amp;gt;)&lt;/code&gt;. The &lt;code&gt;.active()&lt;/code&gt; function can activate or deactivate a Validator from the operation. A validator can be set to apply only to a specific element of the output. For example in a pair option &lt;code&gt;std::pair&amp;lt;int, std::string&amp;gt;&lt;/code&gt; the first element may need to be a positive integer while the second may need to be a valid file. The &lt;code&gt;.application_index(int)&lt;/code&gt; function can specify this. It is zero based and negative indices apply to all values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;opt-&amp;gt;check(CLI::Validator(CLI::PositiveNumber).application_index(0));
opt-&amp;gt;check(CLI::Validator(CLI::ExistingFile).application_index(1));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the validator operation functions return a Validator reference allowing them to be chained. For example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;opt-&amp;gt;check(CLI::Range(10,20).description(&quot;range is limited to sensible values&quot;).active(false).name(&quot;range&quot;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will specify a check on an option with a name &quot;range&quot;, but deactivate it for the time being. The check can later be activated through&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;opt-&amp;gt;get_validator(&quot;range&quot;)-&amp;gt;active();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Custom Validators&lt;/h5&gt; 
&lt;p&gt;A validator object with a custom function can be created via&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;CLI::Validator(std::function&amp;lt;std::string(std::string &amp;amp;)&amp;gt;,validator_description,validator_name=&quot;&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or if the operation function is set later they can be created with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;CLI::Validator(validator_description);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also possible to create a subclass of &lt;code&gt;CLI::Validator&lt;/code&gt;, in which case it can also set a custom description function, and operation function.&lt;/p&gt; 
&lt;h5&gt;Querying Validators&lt;/h5&gt; 
&lt;p&gt;Once loaded into an Option, a pointer to a named Validator can be retrieved via&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;opt-&amp;gt;get_validator(name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will retrieve a Validator with the given name or throw a &lt;code&gt;CLI::OptionNotFound&lt;/code&gt; error. If no name is given or name is empty the first unnamed Validator will be returned or the first Validator if there is only one.&lt;/p&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;opt-&amp;gt;get_validator(index);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which will return a validator in the index it is applied which isn&#39;t necessarily the order in which was defined. The pointer can be &lt;code&gt;nullptr&lt;/code&gt; if an invalid index is given. Validators have a few functions to query the current values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;get_description()&lt;/code&gt;: Will return a description string&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get_name()&lt;/code&gt;: Will return the Validator name&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get_active()&lt;/code&gt;: Will return the current active state, true if the Validator is active.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get_application_index()&lt;/code&gt;: Will return the current application index.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;get_modifying()&lt;/code&gt;: Will return true if the Validator is allowed to modify the input, this can be controlled via the &lt;code&gt;non_modifying()&lt;/code&gt; method, though it is recommended to let &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; option methods manipulate it if needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Getting results&lt;/h4&gt; 
&lt;p&gt;In most cases, the fastest and easiest way is to return the results through a callback or variable specified in one of the &lt;code&gt;add_*&lt;/code&gt; functions. But there are situations where this is not possible or desired. For these cases the results may be obtained through one of the following functions. Please note that these functions will do any type conversions and processing during the call so should not used in performance critical code:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;results()&lt;/code&gt;: Retrieves a vector of strings with all the results in the order they were given.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&amp;gt;results(variable_to_bind_to)&lt;/code&gt;: Gets the results according to the MultiOptionPolicy and converts them just like the &lt;code&gt;add_option_function&lt;/code&gt; with a variable.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Value=opt-&amp;gt;as&amp;lt;type&amp;gt;()&lt;/code&gt;: Returns the result or default value directly as the specified type if possible, can be vector to return all results, and a non-vector to get the result according to the MultiOptionPolicy in place.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Subcommands&lt;/h3&gt; 
&lt;p&gt;Subcommands are keywords that invoke a new set of options and features. For example, the &lt;code&gt;git&lt;/code&gt; command has a long series of subcommands, like &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt;. Each can have its own options and implementations. Subcommands are supported in CLI11, and can be nested infinitely. To add a subcommand, call the &lt;code&gt;add_subcommand&lt;/code&gt; method with a name and an optional description. This gives a pointer to an &lt;code&gt;App&lt;/code&gt; that behaves just like the main app, and can take options or further subcommands. Add &lt;code&gt;-&amp;gt;ignore_case()&lt;/code&gt; to a subcommand to allow any variation of caps to also be accepted. &lt;code&gt;-&amp;gt;ignore_underscore()&lt;/code&gt; is similar, but for underscores. Children inherit the current setting from the parent. You cannot add multiple matching subcommand names at the same level (including &lt;code&gt;ignore_case&lt;/code&gt; and &lt;code&gt;ignore_underscore&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;If you want to require that at least one subcommand is given, use &lt;code&gt;.require_subcommand()&lt;/code&gt; on the parent app. You can optionally give an exact number of subcommands to require, as well. If you give two arguments, that sets the min and max number allowed. 0 for the max number allowed will allow an unlimited number of subcommands. As a handy shortcut, a single negative value N will set &quot;up to N&quot; values. Limiting the maximum number allows you to keep arguments that match a previous subcommand name from matching.&lt;/p&gt; 
&lt;p&gt;If an &lt;code&gt;App&lt;/code&gt; (main or subcommand) has been parsed on the command line, &lt;code&gt;-&amp;gt;parsed&lt;/code&gt; will be true (or convert directly to bool). All &lt;code&gt;App&lt;/code&gt;s have a &lt;code&gt;get_subcommands()&lt;/code&gt; method, which returns a list of pointers to the subcommands passed on the command line. A &lt;code&gt;got_subcommand(App_or_name)&lt;/code&gt; method is also provided that will check to see if an &lt;code&gt;App&lt;/code&gt; pointer or a string name was collected on the command line.&lt;/p&gt; 
&lt;p&gt;For many cases, however, using an app&#39;s callback capabilities may be easier. Every app has a set of callbacks that can be executed at various stages of parsing; a &lt;code&gt;C++&lt;/code&gt; lambda function (with capture to get parsed values) can be used as input to the callback definition function. If you throw &lt;code&gt;CLI::Success&lt;/code&gt; or &lt;code&gt;CLI::RuntimeError(return_value)&lt;/code&gt;, you can even exit the program through the callback.&lt;/p&gt; 
&lt;p&gt;Multiple subcommands are allowed, to allow &lt;a href=&quot;http://click.pocoo.org&quot;&gt;&lt;code&gt;Click&lt;/code&gt;&lt;/a&gt; like series of commands (order is preserved). The same subcommand can be triggered multiple times but all positional arguments will take precedence over the second and future calls of the subcommand. &lt;code&gt;-&amp;gt;count()&lt;/code&gt; on the subcommand will return the number of times the subcommand was called. The subcommand callback will only be triggered once unless the &lt;code&gt;.immediate_callback()&lt;/code&gt; flag is set or the callback is specified through the &lt;code&gt;parse_complete_callback()&lt;/code&gt; function. The &lt;code&gt;final_callback()&lt;/code&gt; is triggered only once. In which case the callback executes on completion of the subcommand arguments but after the arguments for that subcommand have been parsed, and can be triggered multiple times. Note that the &lt;code&gt;parse_complete_callback()&lt;/code&gt; is executed prior to processing any config files. The &lt;code&gt;final_callback()&lt;/code&gt; is executed after config file processing.&lt;/p&gt; 
&lt;p&gt;Subcommands may also have an empty name either by calling &lt;code&gt;add_subcommand&lt;/code&gt; with an empty string for the name or with no arguments. Nameless subcommands function a similarly to groups in the main &lt;code&gt;App&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&quot;&gt;Option groups&lt;/a&gt; to see how this might work. If an option is not defined in the main App, all nameless subcommands are checked as well. This allows for the options to be defined in a composable group. The &lt;code&gt;add_subcommand&lt;/code&gt; function has an overload for adding a &lt;code&gt;shared_ptr&amp;lt;App&amp;gt;&lt;/code&gt; so the subcommand(s) could be defined in different components and merged into a main &lt;code&gt;App&lt;/code&gt;, or possibly multiple &lt;code&gt;Apps&lt;/code&gt;. Multiple nameless subcommands are allowed. Callbacks for nameless subcommands are only triggered if any options from the subcommand were parsed. Subcommand names given through the &lt;code&gt;add_subcommand&lt;/code&gt; method have the same restrictions as option names.&lt;/p&gt; 
&lt;p&gt;Options or flags in a subcommand may be directly specified using dot notation&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand.long=val&lt;/code&gt; (long subcommand option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand.long val&lt;/code&gt; (long subcommand option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand.f=val&lt;/code&gt; (short form subcommand option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand.f val&lt;/code&gt; (short form subcommand option)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand.f&lt;/code&gt; (short form subcommand flag)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--subcommand1.subsub.f val&lt;/code&gt; (short form nested subcommand option)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The use of dot notation in this form is equivalent &lt;code&gt;--subcommand.long &amp;lt;args&amp;gt;&lt;/code&gt; =&amp;gt; &lt;code&gt;subcommand --long &amp;lt;args&amp;gt; ++&lt;/code&gt;. Nested subcommands also work &lt;code&gt;sub1.subsub&lt;/code&gt; would trigger the subsub subcommand in &lt;code&gt;sub1&lt;/code&gt;. This is equivalent to &quot;sub1 subsub&quot;. Quotes around the subcommand names are permitted following the TOML standard for such specification. This includes allowing escape sequences. For example &lt;code&gt;&quot;subcommand&quot;.&#39;f&#39;&lt;/code&gt; or &lt;code&gt;&quot;subcommand.with.dots&quot;.arg1 = value&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Subcommand options&lt;/h4&gt; 
&lt;p&gt;There are several options that are supported on the main app and subcommands and option_groups. These are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;.ignore_case()&lt;/code&gt;: Ignore the case of this subcommand. Inherited by added subcommands, so is usually used on the main &lt;code&gt;App&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.ignore_underscore()&lt;/code&gt;: Ignore any underscores in the subcommand name. Inherited by added subcommands, so is usually used on the main &lt;code&gt;App&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.allow_windows_style_options()&lt;/code&gt;: Allow command line options to be parsed in the form of &lt;code&gt;/s /long /file:file_name.ext&lt;/code&gt; This option does not change how options are specified in the &lt;code&gt;add_option&lt;/code&gt; calls or the ability to process options in the form of &lt;code&gt;-s --long --file=file_name.ext&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.allow_non_standard_option_names()&lt;/code&gt;:🆕 Allow specification of single &lt;code&gt;-&lt;/code&gt; long form option names. This is not recommended but is available to enable reworking of existing interfaces. If this modifier is enabled on an app or subcommand, options or flags can be specified like normal but instead of throwing an exception, long form single dash option names will be allowed. It is not allowed to have a single character short option starting with the same character as a single dash long form name; for example, &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-single&lt;/code&gt; are not allowed in the same application.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.allow_subcommand_prefix_matching()&lt;/code&gt;:🚧 If this modifier is enabled, unambiguious prefix portions of a subcommand will match. For example &lt;code&gt;upgrade_package&lt;/code&gt; would match on &lt;code&gt;upgrade_&lt;/code&gt;, &lt;code&gt;upg&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt; as long as no other subcommand would also match. It also disallows subcommand names that are full prefixes of another subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.fallthrough()&lt;/code&gt;: Allow extra unmatched options and positionals to &quot;fall through&quot; and be matched on a parent option. Subcommands by default are allowed to &quot;fall through&quot; as in they will first attempt to match on the current subcommand and if they fail will progressively check parents for matching subcommands. This can be disabled through &lt;code&gt;subcommand_fallthrough(false)&lt;/code&gt; 🆕.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.subcommand_fallthrough()&lt;/code&gt;: 🆕 Allow subcommands to &quot;fall through&quot; and be matched on a parent option. Disabling this prevents additional subcommands at the same level from being matched. It can be useful in certain circumstances where there might be ambiguity between subcommands and positionals. The default is true.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.configurable()&lt;/code&gt;: Allow the subcommand to be triggered from a configuration file. By default subcommand options in a configuration file do not trigger a subcommand but will just update default values.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.disable()&lt;/code&gt;: Specify that the subcommand is disabled, if given with a bool value it will enable or disable the subcommand or option group.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.disabled_by_default()&lt;/code&gt;: Specify that at the start of parsing the subcommand/option_group should be disabled. This is useful for allowing some Subcommands to trigger others.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.enabled_by_default()&lt;/code&gt;: Specify that at the start of each parse the subcommand/option_group should be enabled. This is useful for allowing some Subcommands to disable others.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.silent()&lt;/code&gt;: Specify that the subcommand is silent meaning that if used it won&#39;t show up in the subcommand list. This allows the use of subcommands as modifiers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.validate_positionals()&lt;/code&gt;: Specify that positionals should pass validation before matching. Validation is specified through &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;each&lt;/code&gt; for an option. If an argument fails validation it is not an error and matching proceeds to the next available positional or extra arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.validate_optional_arguments()&lt;/code&gt;: Specify that optional arguments should pass validation before being assigned to an option. Validation is specified through &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;each&lt;/code&gt; for an option. If an argument fails validation it is not an error and matching proceeds to the next available positional subcommand or extra arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.excludes(option_or_subcommand)&lt;/code&gt;: If given an option pointer or pointer to another subcommand, these subcommands cannot be given together. In the case of options, if the option is passed the subcommand cannot be used and will generate an error.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.needs(option_or_subcommand)&lt;/code&gt;: If given an option pointer or pointer to another subcommand, the subcommands will require the given option to have been given before this subcommand is validated which occurs prior to execution of any callback or after parsing is completed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_option()&lt;/code&gt;: Require 1 or more options or option groups be used.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_option(N)&lt;/code&gt;: Require &lt;code&gt;N&lt;/code&gt; options or option groups, if &lt;code&gt;N&amp;gt;0&lt;/code&gt;, or up to &lt;code&gt;N&lt;/code&gt; if &lt;code&gt;N&amp;lt;0&lt;/code&gt;. &lt;code&gt;N=0&lt;/code&gt; resets to the default to 0 or more.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_option(min, max)&lt;/code&gt;: Explicitly set min and max allowed options or option groups. Setting &lt;code&gt;max&lt;/code&gt; to 0 implies unlimited options.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_subcommand()&lt;/code&gt;: Require 1 or more subcommands.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_subcommand(N)&lt;/code&gt;: Require &lt;code&gt;N&lt;/code&gt; subcommands if &lt;code&gt;N&amp;gt;0&lt;/code&gt;, or up to &lt;code&gt;N&lt;/code&gt; if &lt;code&gt;N&amp;lt;0&lt;/code&gt;. &lt;code&gt;N=0&lt;/code&gt; resets to the default to 0 or more.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.require_subcommand(min, max)&lt;/code&gt;: Explicitly set min and max allowed subcommands. Setting &lt;code&gt;max&lt;/code&gt; to 0 is unlimited.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.add_subcommand(name=&quot;&quot;, description=&quot;&quot;)&lt;/code&gt;: Add a subcommand, returns a pointer to the internally stored subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.add_subcommand(shared_ptr&amp;lt;App&amp;gt;)&lt;/code&gt;: Add a subcommand by shared_ptr, returns a pointer to the internally stored subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.remove_subcommand(App)&lt;/code&gt;: Remove a subcommand from the app or subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.got_subcommand(App_or_name)&lt;/code&gt;: Check to see if a subcommand was received on the command line.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_subcommands(filter)&lt;/code&gt;: The list of subcommands that match a particular filter function.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.add_option_group(name=&quot;&quot;, description=&quot;&quot;)&lt;/code&gt;: Add an &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#option-groups&quot;&gt;option group&lt;/a&gt; to an App, an option group is specialized subcommand intended for containing groups of options or other groups for controlling how options interact.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_parent()&lt;/code&gt;: Get the parent App or &lt;code&gt;nullptr&lt;/code&gt; if called on main App.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_option(name)&lt;/code&gt;: Get an option pointer by option name will throw if the specified option is not available, nameless subcommands are also searched&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_option_no_throw(name)&lt;/code&gt;: Get an option pointer by option name. This function will return a &lt;code&gt;nullptr&lt;/code&gt; instead of throwing if the option is not available.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_options(filter)&lt;/code&gt;: Get the list of all defined option pointers (useful for processing the app for custom output formats).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.parse_order()&lt;/code&gt;: Get the list of option pointers in the order they were parsed (including duplicates).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.formatter(fmt)&lt;/code&gt;: Set a formatter, with signature &lt;code&gt;std::string(const App*, std::string, AppFormatMode)&lt;/code&gt;. See Formatting for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.description(str)&lt;/code&gt;: Set/change the description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.get_description()&lt;/code&gt;: Access the description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.alias(str)&lt;/code&gt;: set an alias for the subcommand, this allows subcommands to be called by more than one name.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.parsed()&lt;/code&gt;: True if this subcommand was given on the command line.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.count()&lt;/code&gt;: Returns the number of times the subcommand was called.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.count(option_name)&lt;/code&gt;: Returns the number of times a particular option was called.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.count_all()&lt;/code&gt;: Returns the total number of arguments a particular subcommand processed, on the main App it returns the total number of processed commands.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.name(name)&lt;/code&gt;: Add or change the name.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.callback(void() function)&lt;/code&gt;: Set the callback for an app. Either sets the &lt;code&gt;pre_parse_callback&lt;/code&gt; or the &lt;code&gt;final_callback&lt;/code&gt; depending on the value of &lt;code&gt;immediate_callback&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&quot;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.parse_complete_callback(void() function)&lt;/code&gt;: Set the callback that runs at the completion of parsing. For subcommands this is executed at the completion of the single subcommand and can be executed multiple times. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&quot;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.final_callback(void() function)&lt;/code&gt;: Set the callback that runs at the end of all processing. This is the last thing that is executed before returning. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&quot;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.immediate_callback()&lt;/code&gt;: Specifies whether the callback for a subcommand should be run as a &lt;code&gt;parse_complete_callback&lt;/code&gt;(true) or &lt;code&gt;final_callback&lt;/code&gt;(false). When used on the main app it will execute the main app callback prior to the callbacks for a subcommand if they do not also have the &lt;code&gt;immediate_callback&lt;/code&gt; flag set. It is preferable to use the &lt;code&gt;parse_complete_callback&lt;/code&gt; or &lt;code&gt;final_callback&lt;/code&gt; directly instead of the &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;immediate_callback&lt;/code&gt; if one wishes to control the ordering and timing of callback. Though &lt;code&gt;immediate_callback&lt;/code&gt; can be used to swap them if that is needed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.pre_parse_callback(void(std::size_t) function)&lt;/code&gt;: Set a callback that executes after the first argument of an application is processed. See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#callbacks&quot;&gt;Subcommand callbacks&lt;/a&gt; for some additional details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.allow_extras()&lt;/code&gt;: Do not throw an error if extra arguments are left over.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.positionals_at_end()&lt;/code&gt;: Specify that positional arguments occur as the last arguments and throw an error if an unexpected positional is encountered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.prefix_command()&lt;/code&gt;: Like &lt;code&gt;allow_extras&lt;/code&gt;, but stop processing immediately on the first unrecognized item. All subsequent arguments are placed in the remaining_arg list. It is ideal for allowing your app or subcommand to be a &quot;prefix&quot; to calling another app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.usage(message)&lt;/code&gt;: Replace text to appear at the start of the help string after description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.usage(std::string())&lt;/code&gt;: Set a callback to generate a string that will appear at the start of the help string after description.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.footer(message)&lt;/code&gt;: Set text to appear at the bottom of the help string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.footer(std::string())&lt;/code&gt;: Set a callback to generate a string that will appear at the end of the help string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.set_help_flag(name, message)&lt;/code&gt;: Set the help flag name and message, returns a pointer to the created option.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.set_version_flag(name, versionString or callback, help_message)&lt;/code&gt;: Set the version flag name and version string or callback and optional help message, returns a pointer to the created option.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.set_help_all_flag(name, message)&lt;/code&gt;: Set the help all flag name and message, returns a pointer to the created option. Expands subcommands.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.failure_message(func)&lt;/code&gt;: Set the failure message function. Two provided: &lt;code&gt;CLI::FailureMessage::help&lt;/code&gt; and &lt;code&gt;CLI::FailureMessage::simple&lt;/code&gt; (the default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.group(name)&lt;/code&gt;: Set a group name, defaults to &lt;code&gt;&quot;Subcommands&quot;&lt;/code&gt;. Setting an empty string for the name will be hide the subcommand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[option_name]&lt;/code&gt;: retrieve a const pointer to an option given by &lt;code&gt;option_name&lt;/code&gt; for Example &lt;code&gt;app[&quot;--flag1&quot;]&lt;/code&gt; will get a pointer to the option for the &quot;--flag1&quot; value, &lt;code&gt;app[&quot;--flag1&quot;]-&amp;gt;as&amp;lt;bool&amp;gt;()&lt;/code&gt; will get the results of the command line for a flag. The operation will throw an exception if the option name is not valid.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you have a fixed number of required positional options, that will match before subcommand names. &lt;code&gt;{}&lt;/code&gt; is an empty filter function, and any positional argument will match before repeated subcommand names.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Callbacks&lt;/h4&gt; 
&lt;p&gt;A subcommand has three optional callbacks that are executed at different stages of processing. The &lt;code&gt;preparse_callback&lt;/code&gt; is executed once after the first argument of a subcommand or application is processed and gives an argument for the number of remaining arguments to process. For the main app the first argument is considered the program name, for subcommands the first argument is the subcommand name. For Option groups and nameless subcommands the first argument is after the first argument or subcommand is processed from that group. The second callback is executed after parsing. This is known as the &lt;code&gt;parse_complete_callback&lt;/code&gt;. For subcommands this is executed immediately after parsing and can be executed multiple times if a subcommand is called multiple times. On the main app this callback is executed after all the &lt;code&gt;parse_complete_callback&lt;/code&gt;s for the subcommands are executed but prior to any &lt;code&gt;final_callback&lt;/code&gt; calls in the subcommand or option groups. If the main app or subcommand has a config file, no data from the config file will be reflected in &lt;code&gt;parse_complete_callback&lt;/code&gt; on named subcommands. For &lt;code&gt;option_group&lt;/code&gt;s the &lt;code&gt;parse_complete_callback&lt;/code&gt; is executed prior to the &lt;code&gt;parse_complete_callback&lt;/code&gt; on the main app but after the &lt;code&gt;config_file&lt;/code&gt; is loaded (if specified). The &lt;code&gt;final_callback&lt;/code&gt; is executed after all processing is complete. After the &lt;code&gt;parse_complete_callback&lt;/code&gt; is executed on the main app, the used subcommand &lt;code&gt;final_callback&lt;/code&gt; are executed followed by the &quot;final callback&quot; for option groups. The last thing to execute is the &lt;code&gt;final_callback&lt;/code&gt; for the &lt;code&gt;main_app&lt;/code&gt;. For example say an application was set up like&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.parse_complete_callback(ac1);
app.final_callback(ac2);
auto sub1=app.add_subcommand(&quot;sub1&quot;)-&amp;gt;parse_complete_callback(c1)-&amp;gt;preparse_callback(pc1);
auto sub2=app.add_subcommand(&quot;sub2&quot;)-&amp;gt;final_callback(c2)-&amp;gt;preparse_callback(pc2);
app.preparse_callback( pa);

... A bunch of other options
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then the command line is given as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;program --opt1 opt1_val  sub1 --sub1opt --sub1optb val sub2 --sub2opt sub1 --sub1opt2 sub2 --sub2opt2 val
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pa&lt;/code&gt; will be called prior to parsing any values with an argument of 13.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pc1&lt;/code&gt; will be called immediately after processing the &lt;code&gt;sub1&lt;/code&gt; command with a value of 10.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;c1&lt;/code&gt; will be called when the &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pc2&lt;/code&gt; will be called with value of 6 after the &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;c1&lt;/code&gt; will be called again after the second &lt;code&gt;sub2&lt;/code&gt; command is encountered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ac1&lt;/code&gt; will be called after processing of all arguments&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;c2&lt;/code&gt; will be called once after processing all arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ac2&lt;/code&gt; will be called last after completing all lower level callbacks have been executed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A subcommand is considered terminated when one of the following conditions are met.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;There are no more arguments to process&lt;/li&gt; 
 &lt;li&gt;Another subcommand is encountered that would not fit in an optional positional slot of the subcommand&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;positional_mark&lt;/code&gt; (&lt;code&gt;--&lt;/code&gt;) is encountered and there are no available positional slots in the subcommand.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;subcommand_terminator&lt;/code&gt; mark (&lt;code&gt;++&lt;/code&gt;) is encountered&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Prior to executed a &lt;code&gt;parse_complete_callback&lt;/code&gt; all contained options are processed before the callback is triggered. If a subcommand with a &lt;code&gt;parse_complete_callback&lt;/code&gt; is called again, then the contained options are reset, and can be triggered again.&lt;/p&gt; 
&lt;h4&gt;Option groups&lt;/h4&gt; 
&lt;p&gt;The subcommand method&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;.add_option_group(name,description)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will create an option group, and return a pointer to it. The argument for &lt;code&gt;description&lt;/code&gt; is optional and can be omitted. An option group allows creation of a collection of options, similar to the groups function on options, but with additional controls and requirements. They allow specific sets of options to be composed and controlled as a collective. For an example see &lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/ranges.cpp&quot;&gt;range example&lt;/a&gt;. Option groups are a specialization of an App so all &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#subcommand-options&quot;&gt;functions&lt;/a&gt; that work with an App or subcommand also work on option groups. Options can be created as part of an option group using the add functions just like a subcommand, or previously created options can be added through. The name given in an option group must not contain newlines or null characters.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;ogroup-&amp;gt;add_option(option_pointer);
ogroup-&amp;gt;add_options(option_pointer);
ogroup-&amp;gt;add_options(option1,option2,option3,...);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The option pointers used in this function must be options defined in the parent application of the option group otherwise an error will be generated. Subcommands can also be added via&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;ogroup-&amp;gt;add_subcommand(subcom_pointer);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This results in the subcommand being moved from its parent into the option group.&lt;/p&gt; 
&lt;p&gt;Options in an option group are searched for a command line match after any options in the main app, so any positionals in the main app would be matched first. So care must be taken to make sure of the order when using positional arguments and option groups. Option groups work well with &lt;code&gt;excludes&lt;/code&gt; and &lt;code&gt;require_options&lt;/code&gt; methods, as an application will treat an option group as a single option for the purpose of counting and requirements, and an option group will be considered used if any of the options or subcommands contained in it are used. Option groups allow specifying requirements such as requiring 1 of 3 options in one group and 1 of 3 options in a different group. Option groups can contain other groups as well. Disabling an option group will turn off all options within the group.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;CLI::TriggerOn&lt;/code&gt; and &lt;code&gt;CLI::TriggerOff&lt;/code&gt; methods are helper functions to allow the use of options/subcommands from one group to trigger another group on or off.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;CLI::TriggerOn(group1_pointer, triggered_group);
CLI::TriggerOff(group2_pointer, disabled_group);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These functions make use of &lt;code&gt;preparse_callback&lt;/code&gt;, &lt;code&gt;enabled_by_default()&lt;/code&gt; and &lt;code&gt;disabled_by_default&lt;/code&gt;. The triggered group may be a vector of group pointers. These methods should only be used once per group and will override any previous use of the underlying functions. More complex arrangements can be accomplished using similar methodology with a custom &lt;code&gt;preparse_callback&lt;/code&gt; function that does more.&lt;/p&gt; 
&lt;p&gt;Additional helper functions &lt;code&gt;deprecate_option&lt;/code&gt; and &lt;code&gt;retire_option&lt;/code&gt; are available to deprecate or retire options&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;CLI::deprecate_option(option *, replacement_name=&quot;&quot;);
CLI::deprecate_option(App,option_name,replacement_name=&quot;&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will specify that the option is deprecated which will display a message in the help and a warning on first usage. Deprecated options function normally but will add a message in the help and display a warning on first use.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;CLI::retire_option(App,option *);
CLI::retire_option(App,option_name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will create an option that does nothing by default and will display a warning on first usage that the option is retired and has no effect. If the option exists it is replaces with a dummy option that takes the same arguments.&lt;/p&gt; 
&lt;p&gt;If an empty string is passed the option group name the entire group will be hidden in the help results. For example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;auto hidden_group=app.add_option_group(&quot;&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will create a group such that no options in that group are displayed in the help string. For the purposes of help display, if the option group name starts with a &#39;+&#39; it is treated as if it were not in a group for help and get_options. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;auto added_group=app.add_option_group(&quot;+sub&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case the help output will not reference the option group and options inside of it will be treated for most purposes as if they were part of the parent.&lt;/p&gt; 
&lt;h3&gt;Configuration file&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.set_config(option_name=&quot;&quot;,
               default_file_name=&quot;&quot;,
               help_string=&quot;Read an ini file&quot;,
               required=false)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If this is called with no arguments, it will remove the configuration file option (like &lt;code&gt;set_help_flag&lt;/code&gt;). Setting a configuration option is special. If it is present, it will be read along with the normal command line arguments. The file will be read if it exists, and does not throw an error unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Configuration files are in &lt;a href=&quot;https://toml.io&quot;&gt;TOML&lt;/a&gt; format by default, though the default reader can also accept files in INI format as well. The config reader can read most aspects of TOML files including strings both literal and with potential escape sequences, digit separators, and multi-line strings, and run them through the CLI11 parser. Other formats can be added by an adept user, some variations are available through customization points in the default formatter. An example of a TOML file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# Comments are supported, using a #
# The default section is [default], case-insensitive

value = 1
value2 = 123_456 # a string with separators
str = &quot;A string&quot;
str2 = &quot;A string\nwith new lines&quot;
str3 = &#39;A literal &quot;string&quot;&#39;
vector = [1,2,3]
str_vector = [&quot;one&quot;,&quot;two&quot;,&quot;and three&quot;]

# Sections map to subcommands
[subcommand]
in_subcommand = Wow
sub.subcommand = true
&quot;sub&quot;.&quot;subcommand2&quot; = &quot;string_value&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or equivalently in INI format&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;; Comments are supported, using a ;
; The default section is [default], case-insensitive

value = 1
str = &quot;A string&quot;
vector = 1 2 3
str_vector = &quot;one&quot; &quot;two&quot; &quot;and three&quot;

; Sections map to subcommands
[subcommand]
in_subcommand = Wow
sub.subcommand = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Spaces before and after the name and argument are ignored. Multiple arguments are separated by spaces. One set of quotes will be removed, preserving spaces (the same way the command line works). Boolean options can be &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt;; or &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;disable&lt;/code&gt; (case-insensitive). Sections (and &lt;code&gt;.&lt;/code&gt; separated names) are treated as subcommands (note: this does not necessarily mean that subcommand was passed, it just sets the &quot;defaults&quot;). You cannot set positional-only arguments. Subcommands can be triggered from configuration files if the &lt;code&gt;configurable&lt;/code&gt; flag was set on the subcommand. Then the use of &lt;code&gt;[subcommand]&lt;/code&gt; notation will trigger a subcommand and cause it to act as if it were on the command line.&lt;/p&gt; 
&lt;p&gt;To print a configuration file from the passed arguments, use &lt;code&gt;.config_to_str(default_also=false, write_description=false)&lt;/code&gt;, where &lt;code&gt;default_also&lt;/code&gt; will also show any defaulted arguments, and &lt;code&gt;write_description&lt;/code&gt; will include the app and option descriptions. See &lt;a href=&quot;https://cliutils.github.io/CLI11/book/chapters/config.html&quot;&gt;Config files&lt;/a&gt; for some additional details and customization points.&lt;/p&gt; 
&lt;p&gt;If it is desired that multiple configuration be allowed. Use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.set_config(&quot;--config&quot;)-&amp;gt;expected(1, X);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where X is some positive number and will allow up to &lt;code&gt;X&lt;/code&gt; configuration files to be specified by separate &lt;code&gt;--config&lt;/code&gt; arguments. Value strings with quote characters in it will be printed with a single quote. All other arguments will use double quote. Empty strings will use a double quoted argument. Numerical or boolean values are not quoted.&lt;/p&gt; 
&lt;p&gt;For options or flags which allow 0 arguments to be passed using an empty string in the config file, &lt;code&gt;{}&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt; will convert the result to the default value specified via &lt;code&gt;default_str&lt;/code&gt; or &lt;code&gt;default_val&lt;/code&gt; on the option. If no user specified default is given the result is an empty string or the converted value of an empty string.&lt;/p&gt; 
&lt;p&gt;NOTE: Transforms and checks can be used with the option pointer returned from set_config like any other option to validate the input if needed. It can also be used with the built in transform &lt;code&gt;CLI::FileOnDefaultPath&lt;/code&gt; to look in a default path as well as the current one. For example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.set_config(&quot;--config&quot;)-&amp;gt;transform(CLI::FileOnDefaultPath(&quot;/to/default/path/&quot;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;Transforming Validators&lt;/a&gt; for additional details on this validator. Multiple transforms or validators can be used either by multiple calls or using &lt;code&gt;|&lt;/code&gt; operations with the transform.&lt;/p&gt; 
&lt;h3&gt;Inheriting defaults&lt;/h3&gt; 
&lt;p&gt;Many of the defaults for subcommands and even options are inherited from their creators. The inherited default values for subcommands are &lt;code&gt;allow_extras&lt;/code&gt;, &lt;code&gt;prefix_command&lt;/code&gt;, &lt;code&gt;ignore_case&lt;/code&gt;, &lt;code&gt;ignore_underscore&lt;/code&gt;, &lt;code&gt;fallthrough&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, &lt;code&gt;immediate_callback&lt;/code&gt; and maximum number of required subcommands. The help flag existence, name, and description are inherited, as well.&lt;/p&gt; 
&lt;p&gt;Options have defaults for &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;multi_option_policy&lt;/code&gt;, &lt;code&gt;ignore_case&lt;/code&gt;, &lt;code&gt;ignore_underscore&lt;/code&gt;, &lt;code&gt;delimiter&lt;/code&gt;, and &lt;code&gt;disable_flag_override&lt;/code&gt;. To set these defaults, you should set the &lt;code&gt;option_defaults()&lt;/code&gt; object, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.option_defaults()-&amp;gt;required();
// All future options will be required
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default settings for options are inherited to subcommands, as well.&lt;/p&gt; 
&lt;h3&gt;Formatting&lt;/h3&gt; 
&lt;p&gt;The job of formatting help printouts is delegated to a formatter callable object on Apps and Options. You are free to replace either formatter by calling &lt;code&gt;formatter(fmt)&lt;/code&gt; on an &lt;code&gt;App&lt;/code&gt;, where fmt is any copyable callable with the correct signature. CLI11 comes with a default App formatter functional, &lt;code&gt;Formatter&lt;/code&gt;. It is customizable; you can set &lt;code&gt;label(key, value)&lt;/code&gt; to replace the default labels like &lt;code&gt;REQUIRED&lt;/code&gt;, and &lt;code&gt;column_width(n)&lt;/code&gt; to set the width of the columns before you add the functional to the app or option. You can also override almost any stage of the formatting process in a subclass of either formatter. If you want to make a new formatter from scratch, you can do that too; you just need to implement the correct signature. The first argument is a const pointer to the in question. The formatter will get a &lt;code&gt;std::string&lt;/code&gt; usage name as the second option, and a &lt;code&gt;AppFormatMode&lt;/code&gt; mode for the final option. It should return a &lt;code&gt;std::string&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;AppFormatMode&lt;/code&gt; can be &lt;code&gt;Normal&lt;/code&gt;, &lt;code&gt;All&lt;/code&gt;, or &lt;code&gt;Sub&lt;/code&gt;, and it indicates the situation the help was called in. &lt;code&gt;Sub&lt;/code&gt; is optional, but the default formatter uses it to make sure expanded subcommands are called with their own formatter since you can&#39;t access anything but the call operator once a formatter has been set.&lt;/p&gt; 
&lt;h3&gt;Subclassing&lt;/h3&gt; 
&lt;p&gt;The App class was designed allow toolkits to subclass it, to provide preset default options (see above) and setup/teardown code. Subcommands remain an unsubclassed &lt;code&gt;App&lt;/code&gt;, since those are not expected to need setup and teardown. The default &lt;code&gt;App&lt;/code&gt; only adds a help flag, &lt;code&gt;-h,--help&lt;/code&gt;, than can removed/replaced using &lt;code&gt;.set_help_flag(name, help_string)&lt;/code&gt;. You can also set a help-all flag with &lt;code&gt;.set_help_all_flag(name, help_string)&lt;/code&gt;; this will expand the subcommands (one level only). You can remove options if you have pointers to them using &lt;code&gt;.remove_option(opt)&lt;/code&gt;. You can add a &lt;code&gt;pre_callback&lt;/code&gt; override to customize the after parse but before run behavior, while still giving the user freedom to &lt;code&gt;callback&lt;/code&gt; on the main app.&lt;/p&gt; 
&lt;p&gt;The most important parse function is &lt;code&gt;parse(std::vector&amp;lt;std::string&amp;gt;)&lt;/code&gt;, which takes a reversed list of arguments (so that &lt;code&gt;pop_back&lt;/code&gt; processes the args in the correct order). &lt;code&gt;get_help_ptr&lt;/code&gt; and &lt;code&gt;get_config_ptr&lt;/code&gt; give you access to the help/config option pointers. The standard &lt;code&gt;parse&lt;/code&gt; manually sets the name from the first argument, so it should not be in this vector. You can also use &lt;code&gt;parse(string, bool)&lt;/code&gt; to split up and parse a single string; the optional boolean should be set to true if you are including the program name in the string, and false otherwise. The program name can contain spaces if it is an existing file, otherwise can be enclosed in quotes(single quote, double quote or backtick). Embedded quote characters can be escaped with &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Also, in a related note, the &lt;code&gt;App&lt;/code&gt; you get a pointer to is stored in the parent &lt;code&gt;App&lt;/code&gt; in a &lt;code&gt;shared_ptr&lt;/code&gt;s (similar to &lt;code&gt;Option&lt;/code&gt;s) and are deleted when the main &lt;code&gt;App&lt;/code&gt; goes out of scope unless the object has another owner.&lt;/p&gt; 
&lt;h3&gt;How it works&lt;/h3&gt; 
&lt;p&gt;Every &lt;code&gt;add_&lt;/code&gt; option you have seen so far depends on one method that takes a lambda function. Each of these methods is just making a different lambda function with capture to populate the option. The function has full access to the vector of strings, so it knows how many times an option was passed or how many arguments it received. The lambda returns &lt;code&gt;true&lt;/code&gt; if it could validate the option strings, and &lt;code&gt;false&lt;/code&gt; if it failed.&lt;/p&gt; 
&lt;p&gt;Other values can be added as long as they support &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; (and defaults can be printed if they support &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;). To add a new type, for example, provide a custom &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; with an &lt;code&gt;istream&lt;/code&gt; (inside the CLI namespace is fine if you don&#39;t want to interfere with an existing &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;If you wanted to extend this to support a completely new type, use a lambda or add an overload of the &lt;code&gt;lexical_cast&lt;/code&gt; function in the namespace of the type you need to convert to. Some examples of some new parsers for &lt;code&gt;complex&amp;lt;double&amp;gt;&lt;/code&gt; that support all of the features of a standard &lt;code&gt;add_options&lt;/code&gt; call are in &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/tests/NewParseTest.cpp&quot;&gt;one of the tests&lt;/a&gt;. A simpler example is shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;app.add_option(&quot;--fancy-count&quot;, [](std::vector&amp;lt;std::string&amp;gt; val){
    std::cout &amp;lt;&amp;lt; &quot;This option was given &quot; &amp;lt;&amp;lt; val.size() &amp;lt;&amp;lt; &quot; times.&quot; &amp;lt;&amp;lt; std::endl;
    return true;
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unicode support&lt;/h3&gt; 
&lt;p&gt;CLI11 supports Unicode and wide strings as defined in the &lt;a href=&quot;http://utf8everywhere.org/&quot;&gt;UTF-8 Everywhere&lt;/a&gt; manifesto. In particular:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The library can parse a wide version of command-line arguments on Windows, which are converted internally to UTF-8 (more on this below);&lt;/li&gt; 
 &lt;li&gt;You can store option values in &lt;code&gt;std::wstring&lt;/code&gt;, in which case they will be converted to a correct wide string encoding on your system (UTF-16 on Windows and UTF-32 on most other systems);&lt;/li&gt; 
 &lt;li&gt;Instead of storing wide strings, it is recommended to use provided &lt;code&gt;widen&lt;/code&gt; and &lt;code&gt;narrow&lt;/code&gt; functions to convert to and from wide strings when actually necessary (such as when calling into Windows APIs).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When using the command line on Windows with unicode arguments, your &lt;code&gt;main&lt;/code&gt; function may already receive broken Unicode. Parsing &lt;code&gt;argv&lt;/code&gt; at that point will not give you a correct string. To fix this, you have three options; the first is recommended for cross-platform support:&lt;/p&gt; 
&lt;p&gt;1. Replace &lt;code&gt;argv&lt;/code&gt; with &lt;code&gt;app.ensure_utf8(argv)&lt;/code&gt; before any arguments are parsed. &lt;code&gt;ensure_utf8&lt;/code&gt; will do nothing on systems where &lt;code&gt;argv&lt;/code&gt; is already in UTF-8 (Such as Linux or macOS) and return &lt;code&gt;argv&lt;/code&gt; unmodified. On Windows, it will discard &lt;code&gt;argv&lt;/code&gt; and replace it with a correctly decoded array or arguments from win32 API.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int main(int argc, char** argv) {
    CLI::App app;
    argv = app.ensure_utf8(argv);  // new argv memory is held by app
    // ...
    CLI11_PARSE(app, argc, argv);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be sure you do not modify &lt;code&gt;argv&lt;/code&gt; before this function call, as the correct values will be reconstructed using Windows APIs and produced by this call. It has no effect on other platforms and just passes through &lt;code&gt;argv&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Other options (click to expand)&lt;/summary&gt;
 &lt;p&gt; &lt;/p&gt;
 &lt;p&gt;2. Use the Windows-only non-standard &lt;code&gt;wmain&lt;/code&gt; function, which accepts &lt;code&gt;wchar_t *argv[]&lt;/code&gt; instead of &lt;code&gt;char* argv[]&lt;/code&gt;. Parsing this will allow CLI to convert wide strings to UTF-8 without losing information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int wmain(int argc, wchar_t *argv[]) {
    CLI::App app;
    // ...
    CLI11_PARSE(app, argc, argv);
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;3. Retrieve arguments yourself by using Windows APIs like &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw&quot;&gt;&lt;code&gt;CommandLineToArgvW&lt;/code&gt;&lt;/a&gt; and pass them to CLI. This is what the library is doing under the hood in &lt;code&gt;ensure_utf8&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt;
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;The library provides functions to convert between UTF-8 and wide strings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;namespace CLI {
    std::string narrow(const std::wstring &amp;amp;str);
    std::string narrow(const wchar_t *str);
    std::string narrow(const wchar_t *str, std::size_t size);
    std::string narrow(std::wstring_view str);  // C++17

    std::wstring widen(const std::string &amp;amp;str);
    std::wstring widen(const char *str);
    std::wstring widen(const char *str, std::size_t size);
    std::wstring widen(std::string_view str);  // C++17
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Note on using Unicode paths&lt;/h4&gt; 
&lt;p&gt;When creating a &lt;code&gt;filesystem::path&lt;/code&gt; from a UTF-8 path on Windows, you need to convert it to a wide string first. CLI11 provides a platform-independent &lt;code&gt;to_path&lt;/code&gt; function, which will convert a UTF-8 string to path, the right way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;std::string utf8_name = &quot;Hello Halló Привет 你好 👩‍🚀❤️.txt&quot;;

std::filesystem::path p = CLI::to_path(utf8_name);
std::ifstream stream(CLI::to_path(utf8_name));
// etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Utilities&lt;/h3&gt; 
&lt;p&gt;There are a few other utilities that are often useful in CLI programming. These are in separate headers, and do not appear in &lt;code&gt;CLI11.hpp&lt;/code&gt;, but are completely independent and can be used as needed. The &lt;code&gt;Timer&lt;/code&gt;/&lt;code&gt;AutoTimer&lt;/code&gt; class allows you to easily time a block of code, with custom print output.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;{
CLI::AutoTimer timer {&quot;My Long Process&quot;, CLI::Timer::Big};
some_long_running_process();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a timer with a title (default: &lt;code&gt;Timer&lt;/code&gt;), and will customize the output using the predefined &lt;code&gt;Big&lt;/code&gt; output (default: &lt;code&gt;Simple&lt;/code&gt;). Because it is an &lt;code&gt;AutoTimer&lt;/code&gt;, it will print out the time elapsed when the timer is destroyed at the end of the block. If you use &lt;code&gt;Timer&lt;/code&gt; instead, you can use &lt;code&gt;to_string&lt;/code&gt; or &lt;code&gt;std::cout &amp;lt;&amp;lt; timer &amp;lt;&amp;lt; std::endl;&lt;/code&gt; to print the time. The print function can be any function that takes two strings, the title and the time, and returns a formatted string for printing.&lt;/p&gt; 
&lt;h3&gt;Other libraries&lt;/h3&gt; 
&lt;p&gt;If you use the excellent &lt;a href=&quot;https://github.com/agauniyal/rang&quot;&gt;Rang&lt;/a&gt; library to add color to your terminal in a safe, multi-platform way, you can combine it with CLI11 nicely:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;std::atexit([](){std::cout &amp;lt;&amp;lt; rang::style::reset;});
try {
    app.parse(argc, argv);
} catch (const CLI::ParseError &amp;amp;e) {
    std::cout &amp;lt;&amp;lt; (e.get_exit_code()==0 ? rang::fg::blue : rang::fg::red);
    return app.exit(e);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will print help in blue, errors in red, and will reset before returning the terminal to the user.&lt;/p&gt; 
&lt;p&gt;If you are on a Unix-like system, and you&#39;d like to handle control-c and color, you can add:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; #include &amp;lt;csignal&amp;gt;
 void signal_handler(int s) {
     std::cout &amp;lt;&amp;lt; std::endl &amp;lt;&amp;lt; rang::style::reset &amp;lt;&amp;lt; rang::fg::red &amp;lt;&amp;lt; rang::fg::bold;
     std::cout &amp;lt;&amp;lt; &quot;Control-C detected, exiting...&quot; &amp;lt;&amp;lt; rang::style::reset &amp;lt;&amp;lt; std::endl;
     std::exit(1); // will call the correct exit func, no unwinding of the stack though
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And, in your main function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;     // Nice Control-C
     struct sigaction sigIntHandler;
     sigIntHandler.sa_handler = signal_handler;
     sigemptyset(&amp;amp;sigIntHandler.sa_mask);
     sigIntHandler.sa_flags = 0;
     sigaction(SIGINT, &amp;amp;sigIntHandler, nullptr);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;The API is &lt;a href=&quot;https://CLIUtils.github.io/CLI11/index.html&quot;&gt;documented here&lt;/a&gt;. Also see the &lt;a href=&quot;https://cliutils.github.io/CLI11/book/&quot;&gt;CLI11 tutorial GitBook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Several short examples of different features are included in the repository. A brief description of each is included here&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/arg_capture.cpp&quot;&gt;arg_capture&lt;/a&gt;: Example of capturing all remaining arguments after a specific option, using subcommand and prefix_command() with an alias.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/callback_passthrough.cpp&quot;&gt;callback_passthrough&lt;/a&gt;: Example of directly passing remaining arguments through to a callback function which generates a CLI11 application based on existing arguments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/custom_parse.cpp&quot;&gt;custom_parse&lt;/a&gt;: Based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/566&quot;&gt;Issue #566&lt;/a&gt;, example of custom parser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/digit_args.cpp&quot;&gt;digit_args&lt;/a&gt;: Based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/123&quot;&gt;Issue #123&lt;/a&gt;, uses digit flags to pass a value&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/enum.cpp&quot;&gt;enum&lt;/a&gt;: Using enumerations in an option, and the use of &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#transforming-validators&quot;&gt;CheckedTransformer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/enum_ostream.cpp&quot;&gt;enum_ostream&lt;/a&gt;: In addition to the contents of example enum.cpp, this example shows how a custom ostream operator overrides CLI11&#39;s enum streaming.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/formatter.cpp&quot;&gt;formatter&lt;/a&gt;: Illustrating usage of a custom formatter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/groups.cpp&quot;&gt;groups&lt;/a&gt;: Example using groups of options for help grouping and a timer helper class&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/inter_argument_order.cpp&quot;&gt;inter_argument_order&lt;/a&gt;: An app to practice mixing unlimited arguments, but still recover the original order.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/json.cpp&quot;&gt;json&lt;/a&gt;: Using JSON as a config file parser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/modhelp.cpp&quot;&gt;modhelp&lt;/a&gt;: How to modify the help flag to do something other than default&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/nested.cpp&quot;&gt;nested&lt;/a&gt;: Nested subcommands&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/option_groups.cpp&quot;&gt;option_groups&lt;/a&gt;: Illustrating the use of option groups and a required number of options. Based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/88&quot;&gt;Issue #88&lt;/a&gt; to set interacting groups of options&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/positional_arity.cpp&quot;&gt;positional_arity&lt;/a&gt;: Illustrating use of &lt;code&gt;preparse_callback&lt;/code&gt; to handle situations where the number of arguments can determine which should get parsed, Based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/166&quot;&gt;Issue #166&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/positional_validation.cpp&quot;&gt;positional_validation&lt;/a&gt;: Example of how positional arguments are validated using the &lt;code&gt;validate_positional&lt;/code&gt; flag, also based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/166&quot;&gt;Issue #166&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/prefix_command.cpp&quot;&gt;prefix_command&lt;/a&gt;: Illustrating use of the &lt;code&gt;prefix_command&lt;/code&gt; flag.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/ranges.cpp&quot;&gt;ranges&lt;/a&gt;: App to demonstrate exclusionary option groups based on &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues/88&quot;&gt;Issue #88&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/shapes.cpp&quot;&gt;shapes&lt;/a&gt;: Illustrating how to set up repeated subcommands Based on &lt;a href=&quot;https://gitter.im/CLI11gitter/Lobby?at=5c7af6b965ffa019ea788cd5&quot;&gt;gitter discussion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/simple.cpp&quot;&gt;simple&lt;/a&gt;: A simple example of how to set up a CLI11 Application with different flags and options&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/subcom_help.cpp&quot;&gt;subcom_help&lt;/a&gt;: Configuring help for subcommands&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/subcom_partitioned.cpp&quot;&gt;subcom_partitioned&lt;/a&gt;: Example with a timer and subcommands generated separately and added to the main app later.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/subcommands.cpp&quot;&gt;subcommands&lt;/a&gt;: Short example of subcommands&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/raw/main/examples/validators.cpp&quot;&gt;validators&lt;/a&gt;: Example illustrating use of validators&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;To contribute, open an &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues&quot;&gt;issue&lt;/a&gt; or &lt;a href=&quot;https://github.com/CLIUtils/CLI11/pulls&quot;&gt;pull request&lt;/a&gt; on GitHub, or ask a question on &lt;a href=&quot;https://gitter.im/CLI11gitter/Lobby&quot;&gt;gitter&lt;/a&gt;. There is also a &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/.github/CONTRIBUTING.md&quot;&gt;short note to contributors&lt;/a&gt;. This readme roughly follows the &lt;a href=&quot;https://github.com/RichardLitt/standard-readme&quot;&gt;Standard Readme Style&lt;/a&gt; and includes a mention of almost every feature of the library. More complex features are documented in more detail in the &lt;a href=&quot;https://cliutils.github.io/CLI11/book/&quot;&gt;CLI11 tutorial GitBook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project was created by &lt;a href=&quot;https://github.com/henryiii&quot;&gt;Henry Schreiner&lt;/a&gt; and major features were added by &lt;a href=&quot;https://github.com/phlptp&quot;&gt;Philip Top&lt;/a&gt;. Special thanks to all the contributors (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://profiles.sussex.ac.uk/p281168-alex-dewar/publications&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/23149834?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Alex Dewar&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alex Dewar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=alexdewar&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/andrew-hardin&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/16496326?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Andrew Hardin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrew Hardin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=andrew-hardin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/andreasxp&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/28830446?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Andrey Zhukov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrey Zhukov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=andreasxp&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/SX91&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/754754?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Anton&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anton&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=SX91&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/trokhymchuk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/66204814?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Artem Trokhymchuk &quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Artem Trokhymchuk &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=trokhymchuk&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/BenjaminBeichler&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1441492?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Benjamin Beichler&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Benjamin Beichler&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=BenjaminBeichler&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/calebzulawski&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/563826?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Caleb Zulawski&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Caleb Zulawski&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-calebzulawski&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/krico&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6952185?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Christian Asmussen&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christian Asmussen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=krico&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=krico&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/cbachhuber/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/27212661?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Christoph Bachhuber&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christoph Bachhuber&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#example-cbachhuber&quot; title=&quot;Examples&quot;&gt;💡&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=cbachhuber&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ComixHe&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/54773474?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Comix&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Comix&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ComixHe&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dfleury2&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/4805384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;D. Fleury&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;D. Fleury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=dfleury2&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dbarowy&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/573142?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dan Barowy&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan Barowy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=dbarowy&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mensinda&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/3407462?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Daniel Mensinger&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Mensinger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-mensinda&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DarkWingMcQuack&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/38857302?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;DarkWingMcQuack&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;DarkWingMcQuack&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=DarkWingMcQuack&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ZeeD26&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2487468?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dominik Steinberger&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dominik Steinberger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ZeeD26&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dvj&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/77217?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Doug Johnston&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Doug Johnston&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Advj&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=dvj&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://recursiveascent.blogspot.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1779595?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Baker&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dylan Baker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-dcbaker&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/eli-schwartz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6551424?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Eli Schwartz&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eli Schwartz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=eli-schwartz&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sifferman&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43790149?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ethan Sifferman&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ethan Sifferman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=sifferman&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/helmesjo&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2501070?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Fred Helmesjö&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fred Helmesjö&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Ahelmesjo&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=helmesjo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gblanco92&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3957977?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guillem Blanco&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Guillem Blanco&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=gblanco92&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://iscinumpy.gitlab.io&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/4616906?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Henry Schreiner&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Henry Schreiner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Ahenryiii&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=henryiii&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=henryiii&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://izzys.casa&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/63051?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Isabella Muerte&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Isabella Muerte&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-slurps-mad-rips&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://izzys.casa/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/63051?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Izzy Muerte&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Izzy Muerte&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=bruxisma&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jakoblover&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/14160441?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jakob Lover&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jakob Lover&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=jakoblover&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jgerityneurala&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/57360646?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;James Gerity&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;James Gerity&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=jgerityneurala&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jbriales&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/6850478?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jesus Briales&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jesus Briales&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=jbriales&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Ajbriales&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/SkyToGround&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/58835?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jonas Nilsson&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jonas Nilsson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3ASkyToGround&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=SkyToGround&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/j-rivero&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2098802?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Luis Rivero&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jose Luis Rivero&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=j-rivero&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-j-rivero&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jsoref&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2119212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josh Soref&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Josh Soref&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#tool-jsoref&quot; title=&quot;Tools&quot;&gt;🔧&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=jsoref&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.effibem.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5479063?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Julien Marrec&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Julien Marrec&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=jmarrec&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/KOLANICH&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/240344?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;KOLANICH&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;KOLANICH&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-KOLANICH&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/skannan89&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/11918764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kannan&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kannan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Askannan89&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=skannan89&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://himvis.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/465279?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Khem Raj&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Khem Raj&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=kraj&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/looopTools&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1943536?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Lars Nielsen&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lars Nielsen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=looopTools&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://lucas-czech.de&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4741887?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Lucas Czech&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lucas Czech&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Alczech&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=lczech&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.mogigoma.com/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/130862?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mak Kolybabi&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mak Kolybabi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=mogigoma&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/LostInCompilation&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12819635?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Marc&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=LostInCompilation&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/cetius&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6552472?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Marcin Ropa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marcin Ropa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=cetius&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lambdafu.net/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1138455?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Marcus Brinkmann&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marcus Brinkmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Alambdafu&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=lambdafu&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://msoeken.github.io&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1998245?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mathias Soeken&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mathias Soeken&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=msoeken&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.mmmccormick.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25432?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Matt McCormick&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matt McCormick&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=thewtex&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AnticliMaxtic&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43995389?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Max&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Max&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=AnticliMaxtic&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://mbh.sh&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/20403931?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Michael Hall&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael Hall&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=mbhall88&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nathanhourt&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/271977?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nathan Hourt&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nathan Hourt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Anathanhourt&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=nathanhourt&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nathanielhourt&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/271977?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nathaniel Hourt&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nathaniel Hourt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=nathanielhourt&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/paddy-hack&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6804372?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Olaf Meeuwissen&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Olaf Meeuwissen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=paddy-hack&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://ondrejcertik.com/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/20568?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ondřej Čertík&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ondřej Čertík&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Acertik&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/pleroux0&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/39619854?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Paul le Roux&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paul le Roux&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=pleroux0&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-pleroux0&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/chfast&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/573380?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Paweł Bylica&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paweł Bylica&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-chfast&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PeteAudinate&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/99274874?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PeteAudinate&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;PeteAudinate&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=PeteAudinate&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/peterazmanov&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/15322318?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Peter Azmanov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Azmanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=peterazmanov&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/peterh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79339?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Peter Harris&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Harris&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=peterh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://ptheywood.uk/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/628937?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Peter Heywood&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Heywood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ptheywood&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/phlptp&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/20667153?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Philip Top&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Philip Top&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Aphlptp&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=phlptp&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=phlptp&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rafiw&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/3034707?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rafi Wiener&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rafi Wiener&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Arafiw&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=rafiw&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/RangeMachine&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11577601?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;RangeMachine&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;RangeMachine&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=RangeMachine&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Krzmbrzl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12751591?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Robert Adam&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Robert Adam&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=Krzmbrzl&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.ratml.org/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1845039?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ryan Curtin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ryan Curtin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=rcurtin&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/SherlockInSpace&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5507786?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ryan Sherlock&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ryan Sherlock&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=SherlockInSpace&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://sam.hocevar.net/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/245089?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sam Hocevar&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sam Hocevar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=samhocevar&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://seanfisk.com/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/410322?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sean Fisk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sean Fisk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/issues?q=author%3Aseanfisk&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=seanfisk&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/delpinux&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/35096584?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Stéphane Del Pino&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Stéphane Del Pino&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=delpinux&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/metopa&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/3974178?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Viacheslav Kroilov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Viacheslav Kroilov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=metopa&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/VolkerChristian&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/18554540?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Volker Christian&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Volker Christian&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=VolkerChristian&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/almikhayl&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/6747040?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;almikhayl&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;almikhayl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=almikhayl&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-almikhayl&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ayum&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6747040?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ayum&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ayum&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ayum&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/captainurist&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/73941350?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;captainurist&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;captainurist&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=captainurist&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://cs.odu.edu/~ctsolakis&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/6725596?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;christos&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;christos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ChristosT&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deining&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/18169566?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;deining&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;deining&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=deining&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dherrera-fb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/89840711?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dherrera-fb&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dherrera-fb&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=dherrera-fb&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/djerius&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196875?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;djerius&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;djerius&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=djerius&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dryleev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/83670813?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dryleev&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dryleev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=dryleev&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/elszon&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2971495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;elszon&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;elszon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=elszon&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ferdymercury&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10653970?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ferdymercury&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ferdymercury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ferdymercury&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fpeng1985&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/87981?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fpeng1985&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;fpeng1985&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=fpeng1985&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/geir-t&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/35292136?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;geir-t&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;geir-t&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-geir-t&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gostefan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2479455?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gostefan&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;gostefan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=gostefan&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ncihnegn&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/12021721?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ncihnegn&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ncihnegn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ncihnegn&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nshaheed&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6963603?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;nshaheed&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;nshaheed&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/#platform-nshaheed&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nurelin&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/5276274?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;nurelin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;nurelin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=nurelin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://polistern.i2p/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/55511995?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;polistern&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;polistern&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=polistern&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ryan4729&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/40183301?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ryan4729&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ryan4729&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=ryan4729&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shameekganguly&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2412842?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;shameekganguly&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;shameekganguly&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CLIUtils/CLI11/commits?author=shameekganguly&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;As of version 1.0, this library is available under a 3-Clause BSD license. See the &lt;a href=&quot;https://raw.githubusercontent.com/CLIUtils/CLI11/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;p&gt;CLI11 was developed at the &lt;a href=&quot;http://www.uc.edu&quot;&gt;University of Cincinnati&lt;/a&gt; to support of the &lt;a href=&quot;https://GooFit.github.io&quot;&gt;GooFit&lt;/a&gt; library under &lt;a href=&quot;https://nsf.gov/awardsearch/showAward?AWD_ID=1414736&quot;&gt;NSF Award 1414736&lt;/a&gt;. Version 0.9 was featured in a &lt;a href=&quot;http://diana-hep.org&quot;&gt;DIANA/HEP&lt;/a&gt; meeting at CERN (&lt;a href=&quot;https://indico.cern.ch/event/619465/contributions/2507949/attachments/1448567/2232649/20170424-diana-2.pdf&quot;&gt;see the slides&lt;/a&gt;). Please give it a try! Feedback is always welcome.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dmlc/xgboost</title>
      <link>https://github.com/dmlc/xgboost</link>
      <description>&lt;p&gt;Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Dask, Flink and DataFlow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://xgboost.ai/images/logo/xgboost-logo-trimmed.png&quot; width=&quot;200/&quot; /&gt; eXtreme Gradient Boosting&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://buildkite.com/xgboost/xgboost-ci&quot;&gt;&lt;img src=&quot;https://badge.buildkite.com/aca47f40a32735c00a8550540c5eeff6a4c1d246a580cae9b0.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/dmlc/xgboost/actions&quot;&gt;&lt;img src=&quot;https://github.com/dmlc/xgboost/workflows/XGBoost%20CI/badge.svg?branch=master&quot; alt=&quot;XGBoost-CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://xgboost.readthedocs.org&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/xgboost/badge/?version=latest&quot; alt=&quot;Documentation Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/dmlc/xgboost/master/LICENSE&quot;&gt;&lt;img src=&quot;https://dmlc.github.io/img/apache2.svg?sanitize=true&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cran.r-project.org/web/packages/xgboost&quot;&gt;&lt;img src=&quot;https://www.r-pkg.org/badges/version/xgboost&quot; alt=&quot;CRAN Status Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/xgboost/&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/xgboost.svg?sanitize=true&quot; alt=&quot;PyPI version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://anaconda.org/conda-forge/py-xgboost&quot;&gt;&lt;img src=&quot;https://img.shields.io/conda/vn/conda-forge/py-xgboost.svg?sanitize=true&quot; alt=&quot;Conda version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://optuna.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Optuna-integrated-blue&quot; alt=&quot;Optuna&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/XGBoostProject&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/@XGBoostProject--_.svg?style=social&amp;amp;logo=twitter&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://api.securityscorecards.dev/projects/github.com/dmlc/xgboost&quot;&gt;&lt;img src=&quot;https://api.securityscorecards.dev/projects/github.com/dmlc/xgboost/badge&quot; alt=&quot;OpenSSF Scorecard&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://colab.research.google.com/github/comet-ml/comet-examples/blob/master/integrations/model-training/xgboost/notebooks/how_to_use_comet_with_xgboost_tutorial.ipynb&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&quot; alt=&quot;Open In Colab&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://xgboost.ai/community&quot;&gt;Community&lt;/a&gt; | &lt;a href=&quot;https://xgboost.readthedocs.org&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/dmlc/xgboost/master/demo/README.md&quot;&gt;Resources&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/dmlc/xgboost/master/CONTRIBUTORS.md&quot;&gt;Contributors&lt;/a&gt; | &lt;a href=&quot;https://xgboost.readthedocs.io/en/latest/changes/index.html&quot;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;XGBoost is an optimized distributed gradient boosting library designed to be highly &lt;em&gt;&lt;strong&gt;efficient&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;flexible&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;portable&lt;/strong&gt;&lt;/em&gt;. It implements machine learning algorithms under the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradient_boosting&quot;&gt;Gradient Boosting&lt;/a&gt; framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. The same code runs on major distributed environment (Kubernetes, Hadoop, SGE, Dask, Spark, PySpark) and can solve problems beyond billions of examples.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;© Contributors, 2021. Licensed under an &lt;a href=&quot;https://github.com/dmlc/xgboost/raw/master/LICENSE&quot;&gt;Apache-2&lt;/a&gt; license.&lt;/p&gt; 
&lt;h2&gt;Contribute to XGBoost&lt;/h2&gt; 
&lt;p&gt;XGBoost has been developed and used by a group of active community members. Your help is very valuable to make the package better for everyone. Checkout the &lt;a href=&quot;https://xgboost.ai/community&quot;&gt;Community Page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tianqi Chen and Carlos Guestrin. &lt;a href=&quot;https://arxiv.org/abs/1603.02754&quot;&gt;XGBoost: A Scalable Tree Boosting System&lt;/a&gt;. In 22nd SIGKDD Conference on Knowledge Discovery and Data Mining, 2016&lt;/li&gt; 
 &lt;li&gt;XGBoost originates from research project at University of Washington.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Become a sponsor and get a logo here. See details at &lt;a href=&quot;https://xgboost.ai/sponsors&quot;&gt;Sponsoring the XGBoost Project&lt;/a&gt;. The funds are used to defray the cost of continuous integration and testing infrastructure (&lt;a href=&quot;https://xgboost-ci.net&quot;&gt;https://xgboost-ci.net&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Open Source Collective sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dmlc/xgboost/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/xgboost/backers/badge.svg?sanitize=true&quot; alt=&quot;Backers on Open Collective&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/dmlc/xgboost/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/xgboost/sponsors/badge.svg?sanitize=true&quot; alt=&quot;Sponsors on Open Collective&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;[&lt;a href=&quot;https://opencollective.com/xgboost#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/xgboost-ai/xgboost-ai.github.io/master/images/sponsors/nvidia.jpg&quot; alt=&quot;NVIDIA&quot; width=&quot;72&quot; height=&quot;72&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.comet.com/site/?utm_source=xgboost&amp;amp;utm_medium=github&amp;amp;utm_content=readme&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.comet.ml/img/notebook_logo.png&quot; height=&quot;72&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/guest-f5ebfc79&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/guest-f5ebfc79/avatar/256.png&quot; height=&quot;72&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://databento.com/?utm_source=xgboost&amp;amp;utm_medium=sponsor&amp;amp;utm_content=display&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/xgboost-ai/xgboost-ai.github.io/refs/heads/master/images/sponsors/databento.png&quot; height=&quot;72&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;[&lt;a href=&quot;https://opencollective.com/xgboost#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/xgboost#backers&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/xgboost/backers.svg?width=890&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

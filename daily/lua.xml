<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Daily Trending</title>
    <description>Daily Trending of Lua in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:34:49 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; 
&lt;p&gt;这里是 Rime 的一份配置仓库，用户需要下载各平台对应的前端，并将此配置应用到配置目录。&lt;/p&gt; 
&lt;p&gt;雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。&lt;/p&gt; 
&lt;p&gt;详细介绍：&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;基本套路&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; 
 &lt;li&gt;主要功能 
  &lt;ul&gt; 
   &lt;li&gt;轻量的英文输入，支持中英混输&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;拆字反查（&lt;kbd&gt;uU&lt;/kbd&gt;+拼音），拆字辅码（拼音+&lt;kbd&gt;`&lt;/kbd&gt;+拆字辅码）&lt;/li&gt; 
   &lt;li&gt;自整理的 Emoji&lt;/li&gt; 
   &lt;li&gt;以词定字（左右中括号：&lt;kbd&gt;[&lt;/kbd&gt;、&lt;kbd&gt;]&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;长词优先&lt;/li&gt; 
   &lt;li&gt;Unicode（&lt;kbd&gt;U&lt;/kbd&gt;+Unicode 码位）&lt;/li&gt; 
   &lt;li&gt;数字、人民币大写（&lt;kbd&gt;R&lt;/kbd&gt;+数字）&lt;/li&gt; 
   &lt;li&gt;日期、时间、星期（详见方案 &lt;code&gt;/date_translator&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;农历（转写：&lt;kbd&gt;N&lt;/kbd&gt;+八位数字；获取当前农历：全拼&lt;kbd&gt;nl&lt;/kbd&gt;，双拼&lt;kbd&gt;lunar&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;简易计算器（&lt;kbd&gt;cC&lt;/kbd&gt;+算式）&lt;/li&gt; 
   &lt;li&gt;常见错音错字提示&lt;/li&gt; 
   &lt;li&gt;置顶候选项（详见方案 &lt;code&gt;/pin_cand_filter&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;所有标点符号直接上屏&lt;/li&gt; 
   &lt;li&gt;特殊符号、字符输入（全拼&lt;kbd&gt;v&lt;/kbd&gt;+首字母缩写；双拼&lt;kbd&gt;V&lt;/kbd&gt;+首字母缩写）&lt;/li&gt; 
   &lt;li&gt;拼音纠错（模糊音）&lt;/li&gt; 
   &lt;li&gt;更多默认未启用的功能请参考 &lt;code&gt;lua/&lt;/code&gt; 及方案注释&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;简体字表、词库 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;通用规范汉字表&lt;/a&gt;（by 中华人民共和国教育部）8K 常用汉字&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan 字库&lt;/a&gt;（by Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;）40K 大字库， &lt;strong&gt;默认未启用&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;现代汉语常用词表&lt;/a&gt;（by 中国国家语言文字工作委员会）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;华宇野风词库&lt;/a&gt;（by 野风）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;简化字八股文&lt;/a&gt;（by rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;清华大学开源词库&lt;/a&gt;（by THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;腾讯词向量&lt;/a&gt;（@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;整理&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;词库修订 
  &lt;ul&gt; 
   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; 
   &lt;li&gt;全词库完成注音&lt;/li&gt; 
   &lt;li&gt;同义多音字注音&lt;/li&gt; 
   &lt;li&gt;参考 
    &lt;ul&gt; 
     &lt;li&gt;《现代汉语词典》&lt;/li&gt; 
     &lt;li&gt;《同义词词林》&lt;/li&gt; 
     &lt;li&gt;《新华成语大词典》&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime、Squirrel、Weasel 常用配置项的详尽注释&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;长期维护词库&lt;/h2&gt; 
&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; 
&lt;p&gt;主要维护的词库：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; 
&lt;p&gt;欢迎在词库方面提 issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ，我会及时更新修正。&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;使用说明&lt;/h2&gt; 
&lt;h3&gt;选择和安装 RIME 前端&lt;/h3&gt; 
&lt;p&gt;要使用雾凇拼音默认提供的所有功能，请保证&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您的 RIME 前端提供的 librime 版本 ≥ 1.8.5 且&lt;/li&gt; 
 &lt;li&gt;含有 librime-lua 依赖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是主流平台上的一些 RIME 前端安装建议。部分信息具有时效性，请以当下具体情况为准：&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;系统&lt;/th&gt; 
   &lt;th&gt;RIME 前端&lt;/th&gt; 
   &lt;th&gt;雾凇拼音版本要求&lt;/th&gt; 
   &lt;th&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rime（小企鹅输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 0.0.8&lt;/td&gt; 
   &lt;td&gt;暂不支持九宫格&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;（同文输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;（仓输入法）&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;闭源；有内购&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;（鼠须管）&lt;/td&gt; 
   &lt;td&gt;≥ 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 版本请参考&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;🔗&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;支持&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;卷轴模式&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;（小狼毫）&lt;/td&gt; 
   &lt;td&gt;≥ 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 可手动更新 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;（但不支持彩色 emoji）&lt;br /&gt;Weasel 当下有兼容性问题，建议安装其他输入法备用&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux 依赖问题的具体解释请参考 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;雾凇拼音的部分配置可能要求更高的 librime 或者客户端版本，这些功能已在具体配置文件中注明。&lt;/p&gt; 
&lt;p&gt;以下安装方式，选择其一：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;手动安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;东风破 plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;自动部署脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;仓输入法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;（AUR）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;手动安装&lt;/h3&gt; 
&lt;p&gt;您可以将仓库打包下载，将所有文件复制粘贴到 RIME 前端的配置目录，重新部署。&lt;/p&gt; 
&lt;p&gt;只需要使用或者更新词库的话，可以手动粘贴覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，&lt;strong&gt;清空配置目录&lt;/strong&gt;再导入。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;您也可以前往 &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; 界面，下载特定版本的词典文件（具体描述见 Release 说明），覆盖配置目录的对应文件。&lt;/p&gt; 
&lt;h3&gt;Git 安装&lt;/h3&gt; 
&lt;p&gt;您如果熟悉 git 常用操作，可以使用 git clone 命令将本仓库克隆到对应前端的用户目录。由于本库提交历史较多且更改频繁，添加 &lt;code&gt;--depth&lt;/code&gt; 参数可以显著减少传输体积。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# 更新
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 checkout 命令，您也可以实现更新部分文件的效果。&lt;/p&gt; 
&lt;h3&gt;东风破 &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;选择配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）来进行安装或更新。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ 简易安装教程&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;安装 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 请先安装 git 和 bash，并加入环境变量
# 请确保和 github.com 的连接稳定
cd ~
git clone https://github.com/rime/plum.git plum
# 卸载 plum 只需要删除 ~/plum 文件夹即可
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install &amp;lt;recipe_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
&lt;/details&gt; 
&lt;p&gt;词库配方只是更新具体词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; 
&lt;p&gt;℞ 安装或更新全部文件&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新所有词库文件（包含下面三个）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新拼音词库文件（ &lt;code&gt;cn_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新英文词库文件（ &lt;code&gt;en_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新 opencc （ &lt;code&gt;opencc/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;下面这个配方会在 &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; 里将 &lt;code&gt;speller/algebra&lt;/code&gt; 修改为对应的双拼拼写，选择一个自己使用的双拼作为参数。&lt;/p&gt; 
&lt;p&gt;℞ 双拼补丁&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 下载特定版本的配置&lt;/p&gt; 
&lt;p&gt;在仓库后加 &lt;code&gt;@tag&lt;/code&gt; 即可，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;仓输入法 &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;如何导入&quot;雾凇拼音输入方案&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓输入法目前已内置雾凇拼音。&lt;/p&gt; 
&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; 
&lt;h3&gt;自动部署脚本&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;使用 AUR helper 安装 &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，
# yay 默认未开启此功能，可以通过此命令开启
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; 
&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # 仅使用「雾凇拼音」的默认配置，配置此行即可
  __include: rime_ice_suggestion:/
  # 以下根据自己所需自行定义，仅做参考。
  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # 开启逗号句号翻页
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;h2&gt;感谢 ❤️&lt;/h2&gt; 
&lt;p&gt;特别感谢上文已经提及的词库、词典的作者、贡献者及整理者；特别感谢以及下列词库、方案、脚本的作者及贡献者（提及的均为 GitHub id）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg 开发的汉字转拼音工具和数据库（MIT）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;） ：提供了部分（约 1000 条）英文词汇以及原始英文方案参考；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;部件拆字方案&lt;/a&gt;（@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;）：提供的拆字反查和候选筛选插件；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;长词优先插件&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode 插件&lt;/a&gt;（@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;数字、人民币大写插件&lt;/a&gt;（@98wubi）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;农历插件&lt;/a&gt;（@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;未能在此处详述的、在本库源码注释中提及的项目及作者给予的帮助和参考&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Lithium-7&quot;&gt;@Lithium-7&lt;/a&gt; 对词库的大量修订。&lt;/p&gt; 
&lt;p&gt;感谢所有贡献者。&lt;/p&gt; 
&lt;!-- 搜狗转 Rime：[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;赞助 ☕&lt;/h2&gt; 
&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;请 Dvel 吃个煎饼馃子&quot; width=&quot;600&quot; /&gt;</description>
    </item>
    
    <item>
      <title>folke/which-key.nvim</title>
      <link>https://github.com/folke/which-key.nvim</link>
      <description>&lt;p&gt;💥 Create key bindings that stick. WhichKey helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💥 Which Key&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/89277334-dcdc-4b0f-9fd4-02f27012f589&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/f8d71a75-312e-4a42-add8-d153493b2633&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/e4400a1d-7e71-4439-b6ff-6cbc40647a6f&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔍 &lt;strong&gt;Key Binding Help&lt;/strong&gt;: show available keybindings in a popup as you type.&lt;/li&gt; 
 &lt;li&gt;⌨️ &lt;strong&gt;Modes&lt;/strong&gt;: works in normal, insert, visual, operator pending, terminal and command mode. Every mode can be enabled/disabled.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Customizable Layouts&lt;/strong&gt;: choose from &lt;code&gt;classic&lt;/code&gt;, &lt;code&gt;modern&lt;/code&gt;, and &lt;code&gt;helix&lt;/code&gt; presets or customize the window.&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Flexible Sorting&lt;/strong&gt;: sort by &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;alphanum&lt;/code&gt;, &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;icase&lt;/code&gt;, &lt;code&gt;desc&lt;/code&gt;, or &lt;code&gt;manual&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Formatting&lt;/strong&gt;: customizable key labels and descriptions&lt;/li&gt; 
 &lt;li&gt;🖼️ &lt;strong&gt;Icons&lt;/strong&gt;: integrates with &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⏱️ &lt;strong&gt;Delay&lt;/strong&gt;: delay is independent of &lt;code&gt;timeoutlen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Plugins&lt;/strong&gt;: built-in plugins for marks, registers, presets, and spelling suggestions&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Operators, Motions, Text Objects&lt;/strong&gt;: help for operators, motions and text objects&lt;/li&gt; 
 &lt;li&gt;🐙 &lt;strong&gt;Hydra Mode&lt;/strong&gt;: keep the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/which-key.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      &quot;&amp;lt;leader&amp;gt;?&quot;,
      function()
        require(&quot;which-key&quot;).show({ global = false })
      end,
      desc = &quot;Buffer Local Keymaps (which-key)&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] Make sure to run &lt;code&gt;:checkhealth which-key&lt;/code&gt; if something isn&#39;t working properly&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is highly configurable. Expand to see the list of all the default options below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class wk.Opts
local defaults = {
  ---@type false | &quot;classic&quot; | &quot;modern&quot; | &quot;helix&quot;
  preset = &quot;classic&quot;,
  -- Delay before showing the popup. Can be a number or a function that returns a number.
  ---@type number | fun(ctx: { keys: string, mode: string, plugin?: string }):number
  delay = function(ctx)
    return ctx.plugin and 0 or 200
  end,
  ---@param mapping wk.Mapping
  filter = function(mapping)
    -- example to exclude mappings without a description
    -- return mapping.desc and mapping.desc ~= &quot;&quot;
    return true
  end,
  --- You can add any mappings here, or use `require(&#39;which-key&#39;).add()` later
  ---@type wk.Spec
  spec = {},
  -- show a warning when issues were detected with your mappings
  notify = true,
  -- Which-key automatically sets up triggers for your mappings.
  -- But you can disable this and setup the triggers manually.
  -- Check the docs for more info.
  ---@type wk.Spec
  triggers = {
    { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nxso&quot; },
  },
  -- Start hidden and wait for a key to be pressed before showing the popup
  -- Only used by enabled xo mapping modes.
  ---@param ctx { mode: string, operator: string }
  defer = function(ctx)
    return ctx.mode == &quot;V&quot; or ctx.mode == &quot;&amp;lt;C-V&amp;gt;&quot;
  end,
  plugins = {
    marks = true, -- shows a list of your marks on &#39; and `
    registers = true, -- shows your registers on &quot; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode
    -- the presets plugin, adds help for a bunch of default keybindings in Neovim
    -- No actual key bindings are created
    spelling = {
      enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
      suggestions = 20, -- how many suggestions should be shown in the list?
    },
    presets = {
      operators = true, -- adds help for operators like d, y, ...
      motions = true, -- adds help for motions
      text_objects = true, -- help for text objects triggered after entering an operator
      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;
      nav = true, -- misc bindings to work with windows
      z = true, -- bindings for folds, spelling and others prefixed with z
      g = true, -- bindings for prefixed with g
    },
  },
  ---@type wk.Win.opts
  win = {
    -- don&#39;t allow the popup to overlap with the cursor
    no_overlap = true,
    -- width = 1,
    -- height = { min = 4, max = 25 },
    -- col = 0,
    -- row = math.huge,
    -- border = &quot;none&quot;,
    padding = { 1, 2 }, -- extra window padding [top/bottom, right/left]
    title = true,
    title_pos = &quot;center&quot;,
    zindex = 1000,
    -- Additional vim.wo and vim.bo options
    bo = {},
    wo = {
      -- winblend = 10, -- value between 0-100 0 for fully opaque and 100 for fully transparent
    },
  },
  layout = {
    width = { min = 20 }, -- min and max width of the columns
    spacing = 3, -- spacing between columns
  },
  keys = {
    scroll_down = &quot;&amp;lt;c-d&amp;gt;&quot;, -- binding to scroll down inside the popup
    scroll_up = &quot;&amp;lt;c-u&amp;gt;&quot;, -- binding to scroll up inside the popup
  },
  ---@type (string|wk.Sorter)[]
  --- Mappings are sorted using configured sorters and natural sort of the keys
  --- Available sorters:
  --- * local: buffer-local mappings first
  --- * order: order of the items (Used by plugins like marks / registers)
  --- * group: groups last
  --- * alphanum: alpha-numerical first
  --- * mod: special modifier keys last
  --- * manual: the order the mappings were added
  --- * case: lower-case first
  sort = { &quot;local&quot;, &quot;order&quot;, &quot;group&quot;, &quot;alphanum&quot;, &quot;mod&quot; },
  ---@type number|fun(node: wk.Node):boolean?
  expand = 0, -- expand groups when &amp;lt;= n mappings
  -- expand = function(node)
  --   return not node.desc -- expand all nodes without a description
  -- end,
  -- Functions/Lua Patterns for formatting the labels
  ---@type table&amp;lt;string, ({[1]:string, [2]:string}|fun(str:string):string)[]&amp;gt;
  replace = {
    key = {
      function(key)
        return require(&quot;which-key.view&quot;).format(key)
      end,
      -- { &quot;&amp;lt;Space&amp;gt;&quot;, &quot;SPC&quot; },
    },
    desc = {
      { &quot;&amp;lt;Plug&amp;gt;%(?(.*)%)?&quot;, &quot;%1&quot; },
      { &quot;^%+&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC]md&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC][rR]&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[sS]ilent&amp;gt;&quot;, &quot;&quot; },
      { &quot;^lua%s+&quot;, &quot;&quot; },
      { &quot;^call%s+&quot;, &quot;&quot; },
      { &quot;^:%s*&quot;, &quot;&quot; },
    },
  },
  icons = {
    breadcrumb = &quot;»&quot;, -- symbol used in the command line area that shows your active key combo
    separator = &quot;➜&quot;, -- symbol used between a key and it&#39;s label
    group = &quot;+&quot;, -- symbol prepended to a group
    ellipsis = &quot;…&quot;,
    -- set to false to disable all mapping icons,
    -- both those explicitly added in a mapping
    -- and those from rules
    mappings = true,
    --- See `lua/which-key/icons.lua` for more details
    --- Set to `false` to disable keymap icons from rules
    ---@type wk.IconRule[]|false
    rules = {},
    -- use the highlights from mini.icons
    -- When `false`, it will use `WhichKeyIcon` instead
    colors = true,
    -- used by key format
    keys = {
      Up = &quot; &quot;,
      Down = &quot; &quot;,
      Left = &quot; &quot;,
      Right = &quot; &quot;,
      C = &quot;󰘴 &quot;,
      M = &quot;󰘵 &quot;,
      D = &quot;󰘳 &quot;,
      S = &quot;󰘶 &quot;,
      CR = &quot;󰌑 &quot;,
      Esc = &quot;󱊷 &quot;,
      ScrollWheelDown = &quot;󱕐 &quot;,
      ScrollWheelUp = &quot;󱕑 &quot;,
      NL = &quot;󰌑 &quot;,
      BS = &quot;󰁮&quot;,
      Space = &quot;󱁐 &quot;,
      Tab = &quot;󰌒 &quot;,
      F1 = &quot;󱊫&quot;,
      F2 = &quot;󱊬&quot;,
      F3 = &quot;󱊭&quot;,
      F4 = &quot;󱊮&quot;,
      F5 = &quot;󱊯&quot;,
      F6 = &quot;󱊰&quot;,
      F7 = &quot;󱊱&quot;,
      F8 = &quot;󱊲&quot;,
      F9 = &quot;󱊳&quot;,
      F10 = &quot;󱊴&quot;,
      F11 = &quot;󱊵&quot;,
      F12 = &quot;󱊶&quot;,
    },
  },
  show_help = true, -- show a help message in the command line for using WhichKey
  show_keys = true, -- show the currently pressed key and its label as a message in the command line
  -- disable WhichKey for certain buf types and file types.
  disable = {
    ft = {},
    bt = {},
  },
  debug = false, -- enable wk.log in the current directory
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;⌨️ Mappings&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; automatically gets the descriptions of your keymaps from the &lt;code&gt;desc&lt;/code&gt; attribute of the keymap. So for most use-cases, you don&#39;t need to do anything else.&lt;/p&gt; 
&lt;p&gt;However, the &lt;strong&gt;mapping spec&lt;/strong&gt; is still useful to configure group descriptions and mappings that don&#39;t really exist as a regular keymap.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The &lt;strong&gt;mappings spec&lt;/strong&gt; changed in &lt;code&gt;v3&lt;/code&gt;, so make sure to only use the new &lt;code&gt;add&lt;/code&gt; method if you updated your existing mappings.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Mappings can be added as part of the config &lt;code&gt;opts.spec&lt;/code&gt;, or can be added later using &lt;code&gt;require(&quot;which-key&quot;).add()&lt;/code&gt;. &lt;code&gt;wk.add()&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; 
&lt;p&gt;A mapping has the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;: when present, it will create the mapping&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;desc&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) description &lt;strong&gt;&lt;em&gt;(required for non-groups)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) group name &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&quot;n&quot;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;cond&lt;/strong&gt;: (&lt;code&gt;boolean|fun():boolean&lt;/code&gt;) condition to enable the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: (&lt;code&gt;boolean&lt;/code&gt;) hide the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;icon&lt;/strong&gt;: (&lt;code&gt;string|wk.Icon|fun():(wk.Icon|string)&lt;/code&gt;) icon spec &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;proxy&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) proxy to another mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;expand&lt;/strong&gt;: (&lt;code&gt;fun():wk.Spec&lt;/code&gt;) nested mappings &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;. These are only used for creating mappings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When &lt;code&gt;desc&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;icon&lt;/code&gt; are functions, they are evaluated every time the popup is shown.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;expand&lt;/code&gt; property allows to create dynamic mappings. Only functions as &lt;code&gt;rhs&lt;/code&gt; are supported for dynamic mappings. Two examples are included in &lt;code&gt;which-key.extras&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.buf&lt;/code&gt;: creates numerical key to buffer mappings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.win&lt;/code&gt;: creates numerical key to window mappings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local wk = require(&quot;which-key&quot;)
wk.add({
  { &quot;&amp;lt;leader&amp;gt;f&quot;, group = &quot;file&quot; }, -- group
  { &quot;&amp;lt;leader&amp;gt;ff&quot;, &quot;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&quot;, desc = &quot;Find File&quot;, mode = &quot;n&quot; },
  { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() print(&quot;hello&quot;) end, desc = &quot;Foobar&quot; },
  { &quot;&amp;lt;leader&amp;gt;fn&quot;, desc = &quot;New File&quot; },
  { &quot;&amp;lt;leader&amp;gt;f1&quot;, hidden = true }, -- hide this keymap
  { &quot;&amp;lt;leader&amp;gt;w&quot;, proxy = &quot;&amp;lt;c-w&amp;gt;&quot;, group = &quot;windows&quot; }, -- proxy to window mappings
  { &quot;&amp;lt;leader&amp;gt;b&quot;, group = &quot;buffers&quot;, expand = function()
      return require(&quot;which-key.extras&quot;).expand.buf()
    end
  },
  {
    -- Nested mappings are allowed and can be added in any order
    -- Most attributes can be inherited or overridden on any level
    -- There&#39;s no limit to the depth of nesting
    mode = { &quot;n&quot;, &quot;v&quot; }, -- NORMAL and VISUAL mode
    { &quot;&amp;lt;leader&amp;gt;q&quot;, &quot;&amp;lt;cmd&amp;gt;q&amp;lt;cr&amp;gt;&quot;, desc = &quot;Quit&quot; }, -- no need to specify mode since it&#39;s inherited
    { &quot;&amp;lt;leader&amp;gt;w&quot;, &quot;&amp;lt;cmd&amp;gt;w&amp;lt;cr&amp;gt;&quot;, desc = &quot;Write&quot; },
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎯 Triggers&lt;/h2&gt; 
&lt;p&gt;There&#39;s two ways that &lt;strong&gt;which-key&lt;/strong&gt; can be triggered:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by a trigger keymap&lt;/li&gt; 
 &lt;li&gt;by a &lt;code&gt;ModeChanged&lt;/code&gt; event for visual and operator pending mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both can be configured using &lt;code&gt;opts.triggers&lt;/code&gt; and &lt;code&gt;opts.defer&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;By default &lt;code&gt;opts.triggers&lt;/code&gt; includes &lt;code&gt;{ &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; }&lt;/code&gt;, which will setup keymap triggers for every mode automatically and will trigger during &lt;code&gt;ModeChanged&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Auto triggers will never be created for existing keymaps. That includes every valid single key Neovim builtin mapping. If you want to trigger on a builtin keymap, you have to add it manually.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; },
   { &quot;a&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To manually setup triggers, you can set &lt;code&gt;opts.triggers&lt;/code&gt; to:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;leader&amp;gt;&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For &lt;code&gt;ModeChanged&lt;/code&gt; triggers, you can configure the &lt;code&gt;opts.defer&lt;/code&gt; option. When it returns &lt;code&gt;true&lt;/code&gt;, the popup will be shown only after an additional key is pressed. So &lt;code&gt;yaf&lt;/code&gt;, would show which-key after pressing &lt;code&gt;ya&lt;/code&gt;, but not after &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Defer some operators:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@param ctx { mode: string, operator: string }
defer = function(ctx)
  if vim.list_contains({ &quot;d&quot;, &quot;y&quot; }, ctx.operator) then
    return true
  end
  return vim.list_contains({ &quot;&amp;lt;C-V&amp;gt;&quot;, &quot;V&quot; }, ctx.mode)
end,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🎨 Icons&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!note] For full support, you need to install either &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There&#39;s multiple ways to set icons for your keymaps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if you use lazy.nvim, then some icons will be autodetected for keymaps belonging to certain plugins.&lt;/li&gt; 
 &lt;li&gt;custom rules to decide what icon to use&lt;/li&gt; 
 &lt;li&gt;in your mapping spec, you can specify what icon to use at any level, so at the node for &lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; for example, to apply to all git keymaps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;icon&lt;/code&gt; attribute of a mapping can be a &lt;code&gt;string&lt;/code&gt;, which will be used as the actual icon, or an &lt;code&gt;wk.Icon&lt;/code&gt; object, which can have the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;icon&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the icon to use &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hl&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the highlight group to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;color&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the color to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid colors are: &lt;code&gt;azure&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, &lt;code&gt;purple&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the category of the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid categories are: &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;filetype&lt;/code&gt;, &lt;code&gt;extension&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the name of the icon in the specified category &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If you&#39;d rather not use icons, you can disable them by setting &lt;code&gt;opts.icons.mappings&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🐙 Hydra Mode&lt;/h2&gt; 
&lt;p&gt;Hydra mode is a special mode that keeps the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Show hydra mode for changing windows
require(&quot;which-key&quot;).show({
  keys = &quot;&amp;lt;c-w&amp;gt;&quot;,
  loop = true, -- this will keep the popup open until you hit &amp;lt;esc&amp;gt;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔥 Plugins&lt;/h2&gt; 
&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Presets&lt;/h3&gt; 
&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; and more.&lt;/p&gt; 
&lt;h3&gt;Marks&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/43fb0874-7f79-4521-aee9-03e2b0841758&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Registers&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global registers when you hit &quot; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d8077dcb-56fb-47b0-ad9e-1aba5db16950&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Spelling&lt;/h3&gt; 
&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/102c7963-329a-40b9-b0a8-72c8656318b7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;🎨 Colors&lt;/h2&gt; 
&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; 
&lt;!-- colors:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Default Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyBorder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatBorder&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Border of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyDesc&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Identifier&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyGroup&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;group name&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIcon&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;@markup.link&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;icons&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconAzure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconBlue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticInfo&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconCyan&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticHint&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGreen&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticOk&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGrey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Normal&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconOrange&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconPurple&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Constant&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconRed&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticError&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconYellow&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyNormal&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;NormalFloat&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Normal in th which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeySeparator&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;the separator between the key and its description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyTitle&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatTitle&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Title of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyValue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;values by plugins (like marks, registers, etc)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- colors:end --&gt;</description>
    </item>
    
    <item>
      <title>Civitasv/cmake-tools.nvim</title>
      <link>https://github.com/Civitasv/cmake-tools.nvim</link>
      <description>&lt;p&gt;CMake integration in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CMake Tools&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/images/demo.gif&quot; /&gt;&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;🔥CMake Tools for Neovim which is written in pure lua.🔥&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;CREDIT:&lt;/p&gt; 
 &lt;p&gt;It is a fork from the brilliant &lt;a href=&quot;https://github.com/Shatur/neovim-cmake&quot;&gt;neovim-cmake&lt;/a&gt;. Since I change too much of it, So I make a new repo to develop it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The goal of this plugin is to offer a comprehensive, convenient, and powerful workflow for CMake-based projects in Neovim, comparable to the functionality provided by &lt;a href=&quot;https://github.com/microsoft/vscode-cmake-tools&quot;&gt;vscode-cmake-tools&lt;/a&gt; for Visual Studio Code.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Require Neovim (&amp;gt;=0.7).&lt;/li&gt; 
 &lt;li&gt;Require &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Allow integerating with &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer&lt;/a&gt;, optional, if you want this feature, please install it firstly.&lt;/li&gt; 
 &lt;li&gt;Allow integerating with &lt;a href=&quot;https://github.com/akinsho/toggleterm.nvim&quot;&gt;toggleterm&lt;/a&gt;, optional, if you want this feature, please install it firstly.&lt;/li&gt; 
 &lt;li&gt;Install it like any other Neovim plugin. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;: &lt;code&gt;return { &#39;Civitasv/cmake-tools.nvim&#39;, opts = {} }&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;Civitasv/cmake-tools.nvim&#39;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;Civitasv/cmake-tools.nvim&#39;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🎈&lt;/span&gt; Configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local osys = require(&quot;cmake-tools.osys&quot;)
require(&quot;cmake-tools&quot;).setup {
  cmake_command = &quot;cmake&quot;, -- this is used to specify cmake command path
  ctest_command = &quot;ctest&quot;, -- this is used to specify ctest command path
  cmake_use_preset = true,
  cmake_regenerate_on_save = true, -- auto generate when save CMakeLists.txt
  cmake_generate_options = { &quot;-DCMAKE_EXPORT_COMPILE_COMMANDS=1&quot; }, -- this will be passed when invoke `CMakeGenerate`
  cmake_build_options = {}, -- this will be passed when invoke `CMakeBuild`
  -- support macro expansion:
  --       ${kit}
  --       ${kitGenerator}
  --       ${variant:xx}
  cmake_build_directory = function()
    if osys.iswin32 then
      return &quot;out\\${variant:buildType}&quot;
    end
    return &quot;out/${variant:buildType}&quot;
  end, -- this is used to specify generate directory for cmake, allows macro expansion, can be a string or a function returning the string, relative to cwd.
  cmake_compile_commands_options = {
    action = &quot;soft_link&quot;, -- available options: soft_link, copy, lsp, none
                          -- soft_link: this will automatically make a soft link from compile commands file to target
                          -- copy:      this will automatically copy compile commands file to target
                          -- lsp:       this will automatically set compile commands file location using lsp
                          -- none:      this will make this option ignored
    target = vim.loop.cwd() -- path to directory, this is used only if action == &quot;soft_link&quot; or action == &quot;copy&quot;
  },
  cmake_kits_path = nil, -- this is used to specify global cmake kits path, see CMakeKits for detailed usage
  cmake_variants_message = {
    short = { show = true }, -- whether to show short message
    long = { show = true, max_length = 40 }, -- whether to show long message
  },
  cmake_dap_configuration = { -- debug settings for cmake
    name = &quot;cpp&quot;,
    type = &quot;codelldb&quot;,
    request = &quot;launch&quot;,
    stopOnEntry = false,
    runInTerminal = true,
    console = &quot;integratedTerminal&quot;,
  },
  cmake_executor = { -- executor to use
    name = &quot;quickfix&quot;, -- name of the executor
    opts = {}, -- the options the executor will get, possible values depend on the executor type. See `default_opts` for possible values.
    default_opts = { -- a list of default and possible values for executors
      quickfix = {
        show = &quot;always&quot;, -- &quot;always&quot;, &quot;only_on_error&quot;
        position = &quot;belowright&quot;, -- &quot;vertical&quot;, &quot;horizontal&quot;, &quot;leftabove&quot;, &quot;aboveleft&quot;, &quot;rightbelow&quot;, &quot;belowright&quot;, &quot;topleft&quot;, &quot;botright&quot;, use `:h vertical` for example to see help on them
        size = 10,
        encoding = &quot;utf-8&quot;, -- if encoding is not &quot;utf-8&quot;, it will be converted to &quot;utf-8&quot; using `vim.fn.iconv`
        auto_close_when_success = true, -- typically, you can use it with the &quot;always&quot; option; it will auto-close the quickfix buffer if the execution is successful.
      },
      toggleterm = {
        direction = &quot;float&quot;, -- &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;
        close_on_exit = false, -- whether close the terminal when exit
        auto_scroll = true, -- whether auto scroll to the bottom
        singleton = true, -- single instance, autocloses the opened one, if present
      },
      overseer = {
        new_task_opts = {
            strategy = {
                &quot;toggleterm&quot;,
                direction = &quot;horizontal&quot;,
                auto_scroll = true,
                quit_on_exit = &quot;success&quot;
            }
        }, -- options to pass into the `overseer.new_task` command
        on_new_task = function(task)
            require(&quot;overseer&quot;).open(
                { enter = false, direction = &quot;right&quot; }
            )
        end,   -- a function that gets overseer.Task when it is created, before calling `task:start`
      },
      terminal = {
        name = &quot;Main Terminal&quot;,
        prefix_name = &quot;[CMakeTools]: &quot;, -- This must be included and must be unique, otherwise the terminals will not work. Do not use a simple spacebar &quot; &quot;, or any generic name
        split_direction = &quot;horizontal&quot;, -- &quot;horizontal&quot;, &quot;vertical&quot;
        split_size = 11,

        -- Window handling
        single_terminal_per_instance = true, -- Single viewport, multiple windows
        single_terminal_per_tab = true, -- Single viewport per tab
        keep_terminal_static_location = true, -- Static location of the viewport if avialable
        auto_resize = true, -- Resize the terminal if it already exists

        -- Running Tasks
        start_insert = false, -- If you want to enter terminal with :startinsert upon using :CMakeRun
        focus = false, -- Focus on terminal when cmake task is launched.
        do_not_add_newline = false, -- Do not hit enter on the command inserted when using :CMakeRun, allowing a chance to review or modify the command before hitting enter.
      }, -- terminal executor uses the values in cmake_terminal
    },
  },
  cmake_runner = { -- runner to use
    name = &quot;terminal&quot;, -- name of the runner
    opts = {}, -- the options the runner will get, possible values depend on the runner type. See `default_opts` for possible values.
    default_opts = { -- a list of default and possible values for runners
      quickfix = {
        show = &quot;always&quot;, -- &quot;always&quot;, &quot;only_on_error&quot;
        position = &quot;belowright&quot;, -- &quot;bottom&quot;, &quot;top&quot;
        size = 10,
        encoding = &quot;utf-8&quot;,
        auto_close_when_success = true, -- typically, you can use it with the &quot;always&quot; option; it will auto-close the quickfix buffer if the execution is successful.
      },
      toggleterm = {
        direction = &quot;float&quot;, -- &#39;vertical&#39; | &#39;horizontal&#39; | &#39;tab&#39; | &#39;float&#39;
        close_on_exit = false, -- whether close the terminal when exit
        auto_scroll = true, -- whether auto scroll to the bottom
        singleton = true, -- single instance, autocloses the opened one, if present
      },
      overseer = {
        new_task_opts = {
            strategy = {
                &quot;toggleterm&quot;,
                direction = &quot;horizontal&quot;,
                autos_croll = true,
                quit_on_exit = &quot;success&quot;
            }
        }, -- options to pass into the `overseer.new_task` command
        on_new_task = function(task)
        end,   -- a function that gets overseer.Task when it is created, before calling `task:start`
      },
      terminal = {
        name = &quot;Main Terminal&quot;,
        prefix_name = &quot;[CMakeTools]: &quot;, -- This must be included and must be unique, otherwise the terminals will not work. Do not use a simple spacebar &quot; &quot;, or any generic name
        split_direction = &quot;horizontal&quot;, -- &quot;horizontal&quot;, &quot;vertical&quot;
        split_size = 11,

        -- Window handling
        single_terminal_per_instance = true, -- Single viewport, multiple windows
        single_terminal_per_tab = true, -- Single viewport per tab
        keep_terminal_static_location = true, -- Static location of the viewport if avialable
        auto_resize = true, -- Resize the terminal if it already exists

        -- Running Tasks
        start_insert = false, -- If you want to enter terminal with :startinsert upon using :CMakeRun
        focus = false, -- Focus on terminal when cmake task is launched.
        do_not_add_newline = false, -- Do not hit enter on the command inserted when using :CMakeRun, allowing a chance to review or modify the command before hitting enter.
      },
    },
  },
  cmake_notifications = {
    runner = { enabled = true },
    executor = { enabled = true },
    spinner = { &quot;⠋&quot;, &quot;⠙&quot;, &quot;⠹&quot;, &quot;⠸&quot;, &quot;⠼&quot;, &quot;⠴&quot;, &quot;⠦&quot;, &quot;⠧&quot;, &quot;⠇&quot;, &quot;⠏&quot; }, -- icons used for progress display
    refresh_rate_ms = 100, -- how often to iterate icons
  },
  cmake_virtual_text_support = true, -- Show the target related to current file using virtual text (at right corner)
  cmake_use_scratch_buffer = false, -- A buffer that shows what cmake-tools has done
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generally, the default is enough.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;And attention, when you firstly enter a new project, a session file for this project will be created, and &lt;code&gt;cmake_generate_options&lt;/code&gt;, &lt;code&gt;cmake_build_options&lt;/code&gt;, &lt;code&gt;cmake_build_directory&lt;/code&gt; in your configuration will be used to initialize some fields of it. Then, if you reopen this project, it will reuse this session file to initialize these fields, or, you can think this project has its own settings, so if you change the values in global configuration, it will not reflect on these projects, you should refresh these fields by your own. Also see &lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/sessions.md&quot;&gt;session docs&lt;/a&gt; and issue &lt;a href=&quot;https://github.com/Civitasv/cmake-tools.nvim/issues/162&quot;&gt;#162&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🪄&lt;/span&gt; Docs&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Our plugin will automatically create a buffer named *cmake-tools*, all commands executed by this plugin will be dumped in this buffer, so when something goes wrong, you can know excatly what happend.&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/basic_usage.md&quot;&gt;basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/settings.md&quot;&gt;settings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/executor_and_runner.md&quot;&gt;executor and runner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/all_commands.md&quot;&gt;all commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_presets.md&quot;&gt;cmake presets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_kits.md&quot;&gt;cmake kits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/cmake_variants.md&quot;&gt;cmake variants&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/sessions.md&quot;&gt;sessions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/howto.md&quot;&gt;how to&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;span&gt;💪&lt;/span&gt; Contribute&lt;/h2&gt; 
&lt;p&gt;If you want to implement a missing feature, &lt;a href=&quot;https://raw.githubusercontent.com/Civitasv/cmake-tools.nvim/master/docs/contribute.md&quot;&gt;consider making a PR&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Optionally you can even add tests. We use &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim#plenarytest_harness&quot;&gt;plenary test harness&lt;/a&gt;, as taken from &lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;neotest-rust&lt;/a&gt;. The tests run from inside a neovim instance, so &lt;code&gt;vim&lt;/code&gt; and such are available.&lt;/p&gt; 
&lt;h2&gt;LICENCE&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot;&gt;GPL-3.0 License&lt;/a&gt; © Civitasv&lt;/p&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/vscode-cmake-tools&quot;&gt;vscode-cmake-tools&lt;/a&gt; is an amazing plugin for CMake-based project in Visual Studio Code, &lt;a href=&quot;https://github.com/microsoft/vscode-cmake-tools/raw/main/LICENSE.txt&quot;&gt;MIT LICENSE&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Inspired by &lt;a href=&quot;https://github.com/Shatur/neovim-cmake&quot;&gt;neovim-cmake&lt;/a&gt; which is made by &lt;a href=&quot;https://github.com/Shatur&quot;&gt;Shatur&lt;/a&gt;, &lt;a href=&quot;https://github.com/Shatur/neovim-cmake/raw/master/COPYING&quot;&gt;GPL-3.0 license&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary&lt;/a&gt;, &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim/raw/master/LICENSE&quot;&gt;MIT LICENSE&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>olimorris/codecompanion.nvim</title>
      <link>https://github.com/olimorris/codecompanion.nvim</link>
      <description>&lt;p&gt;✨ AI Coding, Vim Style&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/64da6a69-a54d-4799-b034-59d9efd27b76&quot; alt=&quot;CodeCompanion.nvim&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/olimorris/codecompanion.nvim?color=c678dd&amp;amp;logoColor=e06c75&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/olimorris/codecompanion.nvim/ci.yml?branch=main&amp;amp;label=tests&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/olimorris/codecompanion.nvim?style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Code with any LLM via the &lt;a href=&quot;https://codecompanion.olimorris.dev/getting-started.html&quot;&gt;in-built&lt;/a&gt; adapters, the &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;community&lt;/a&gt; adapters or by &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;building&lt;/a&gt; your own&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;New features are always announced &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/discussions/categories/announcements&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💜&lt;/span&gt; Sponsors&lt;/h2&gt; 
&lt;p&gt;Thank you to the following people:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- sponsors --&gt;&lt;a href=&quot;https://github.com/carlosflorencio&quot;&gt;&lt;img src=&quot;https://github.com/carlosflorencio.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Carlos Florêncio&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/adam-e-trepanier&quot;&gt;&lt;img src=&quot;https://github.com/adam-e-trepanier.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Adam Trepanier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jfgordon2&quot;&gt;&lt;img src=&quot;https://github.com/jfgordon2.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Jeff Gordon&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/llinfeng&quot;&gt;&lt;img src=&quot;https://github.com/llinfeng.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Linfeng Li&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/prettymuchbryce&quot;&gt;&lt;img src=&quot;https://github.com/prettymuchbryce.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Bryce Neal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/pratyushmittal&quot;&gt;&lt;img src=&quot;https://github.com/pratyushmittal.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Pratyush Mittal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/toupeira&quot;&gt;&lt;img src=&quot;https://github.com/toupeira.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Markus Koller&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JuanCrg90&quot;&gt;&lt;img src=&quot;https://github.com/JuanCrg90.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Juan Carlos Ruiz&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Alexander-Garcia&quot;&gt;&lt;img src=&quot;https://github.com/Alexander-Garcia.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Alexander Garcia&quot; /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;If &lt;i&gt;you&lt;/i&gt; love CodeCompanion and use it in your workflow, please consider &lt;a href=&quot;https://github.com/sponsors/olimorris&quot;&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;💬&lt;/span&gt; &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;Copilot Chat&lt;/a&gt; meets &lt;a href=&quot;https://zed.dev/blog/zed-ai&quot;&gt;Zed AI&lt;/a&gt;, in Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🔌&lt;/span&gt; Support for Anthropic, Copilot, GitHub Models, DeepSeek, Gemini, Mistral AI, Novita, Ollama, OpenAI, Azure OpenAI, HuggingFace and xAI LLMs (or &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;bring your own&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🫶&lt;/span&gt; User contributed and supported &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/inline-assistant.html&quot;&gt;Inline transformations&lt;/a&gt;, code creation and refactoring&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🤖&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/variables.html&quot;&gt;Variables&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/slash-commands.html&quot;&gt;Slash Commands&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/tools.html&quot;&gt;Tools&lt;/a&gt; and &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/workflows.html&quot;&gt;Workflows&lt;/a&gt; to improve LLM output&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;✨&lt;/span&gt; Built in &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/action-palette.html&quot;&gt;prompt library&lt;/a&gt; for common tasks like advice on LSP errors and code explanations&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🏗&lt;/span&gt; Create your own &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/prompts.html&quot;&gt;custom prompts&lt;/a&gt;, Variables and Slash Commands&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📚&lt;/span&gt; Have &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/introduction.html#quickly-accessing-a-chat-buffer&quot;&gt;multiple chats&lt;/a&gt; open at the same time&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🎨&lt;/span&gt; Support for &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/#images-vision&quot;&gt;vision and images&lt;/a&gt; as input&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💪&lt;/span&gt; Async execution for fast performance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;📸&lt;/span&gt; In Action&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/aa109f1d-0ec9-4f08-bd9a-df99da03b9a4&quot;&gt;The Chat Buffer&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/2a06e0a4-adb9-42c0-8a93-0fd86295ade0&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/362b7cfd-e794-4d9c-9a74-90d5e2a87a32&quot;&gt;Tools + Agentic Workflows&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/59efa262-e768-4f36-9901-9d02b018fcf0&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/dcddcb85-cba0-4017-9723-6e6b7f080fee&quot;&gt;Inline Assistant&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/11a42705-d9de-4eb5-a9ab-c8a2772fb4d4&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Getting Started&lt;/h2&gt; 
&lt;p&gt;Everything you need to know about CodeCompanion (installation, configuration and usage) is within the &lt;a href=&quot;https://codecompanion.olimorris.dev&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🧰&lt;/span&gt; Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Before raising an &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/issues&quot;&gt;issue&lt;/a&gt;, there are a number of steps you can take to troubleshoot a problem:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Checkhealth&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;:checkhealth codecompanion&lt;/code&gt; and check all dependencies are installed correctly. Also take note of the log file path.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Turn on logging&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Update your config and turn debug logging on:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;codecompanion&quot;).setup({
  opts = {
    log_level = &quot;DEBUG&quot;, -- or &quot;TRACE&quot;
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and inspect the log file as per the location from the checkhealth command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try with a &lt;code&gt;minimal.lua&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A large proportion of issues which are raised in Neovim plugins are to do with a user&#39;s own config. That&#39;s why I always ask users to fill in a &lt;code&gt;minimal.lua&lt;/code&gt; file when they raise an issue. We can rule out their config being an issue and it allows me to recreate the problem.&lt;/p&gt; 
&lt;p&gt;For this purpose, I have included a &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/raw/main/minimal.lua&quot;&gt;minimal.lua&lt;/a&gt; file in the repository for you to test out if you&#39;re facing issues. Simply copy the file, edit it and run neovim with &lt;code&gt;nvim --clean -u minimal.lua&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;🎁&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;I am open to contributions but they will be implemented at my discretion. Feel free to open up a discussion before embarking on a PR and please read the &lt;a href=&quot;https://raw.githubusercontent.com/olimorris/codecompanion.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc&quot;&gt;Steven Arcangeli&lt;/a&gt; for his genius creation of the chat buffer and his feedback early on&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/S1M0N38/dante.nvim&quot;&gt;Dante.nvim&lt;/a&gt; for the beautifully simple diff implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/piersolenski/wtf.nvim&quot;&gt;Wtf.nvim&lt;/a&gt; for the LSP assistant action&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;CopilotChat.nvim&lt;/a&gt; for the rendering and usability of the chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;Aerial.nvim&lt;/a&gt; for the Tree-sitter parsing which inspired the symbols Slash Command&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saghen&quot;&gt;Saghen&lt;/a&gt; for the fantastic docs inspiration from &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; and continued PRs to the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catwell&quot;&gt;Catwell&lt;/a&gt; for the &lt;a href=&quot;https://github.com/catwell/cw-lua/raw/master/deque/deque.lua&quot;&gt;queue&lt;/a&gt; inspiration that I use to stack agents and tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ravitemer&quot;&gt;ravitemer&lt;/a&gt; for the fantastic extensions API&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Davidyz&quot;&gt;Davidyz&lt;/a&gt; for his continued, excellent contributions that keep CodeCompanion going&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>Kong/kong</title>
      <link>https://github.com/Kong/kong</link>
      <description>&lt;p&gt;🦍 The Cloud-Native API Gateway and AI Gateway.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/Kong/kong?style=flat-square&quot; alt=&quot;Stars&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/Kong/kong?style=flat-square&quot; alt=&quot;GitHub commit activity&quot; /&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/_/kong?style=flat-square&quot; alt=&quot;Docker Pulls&quot; /&gt; &lt;a href=&quot;https://github.com/Kong/kong/actions&quot;&gt;&lt;img src=&quot;https://github.com/Kong/kong/actions/workflows/build_and_test.yml/badge.svg?branch=master&amp;amp;event=push&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/Kong/kong?color=green&amp;amp;label=Version&amp;amp;style=flat-square&quot; alt=&quot;Version&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square&quot; alt=&quot;License&quot; /&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/thekonginc?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Kong&lt;/strong&gt; or &lt;strong&gt;Kong API Gateway&lt;/strong&gt; is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins. It also provides advanced AI capabilities with multi-LLM support.&lt;/p&gt; 
&lt;p&gt;By providing functionality for proxying, routing, load balancing, health checking, authentication (and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/#features&quot;&gt;more&lt;/a&gt;), Kong serves as the central layer for orchestrating microservices or conventional API traffic with ease.&lt;/p&gt; 
&lt;p&gt;Kong runs natively on Kubernetes thanks to its official &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;Kubernetes Ingress Controller&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;Installation&lt;/a&gt; | &lt;a href=&quot;https://docs.konghq.com&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Discussions&lt;/a&gt; | &lt;a href=&quot;https://discuss.konghq.com&quot;&gt;Forum&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/blog&quot;&gt;Blog&lt;/a&gt; | &lt;a href=&quot;https://hub.docker.com/r/kong/kong/tags&quot;&gt;Builds&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Cloud Hosted Kong&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you prefer to use a cloud-hosted Kong, you can &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;sign up for a free trial of Kong Konnect&lt;/a&gt; and get started in minutes. If not, you can follow the instructions below to get started with Kong on your own infrastructure.&lt;/p&gt; 
&lt;p&gt;Let’s test drive Kong by adding authentication to an API in under 5 minutes.&lt;/p&gt; 
&lt;p&gt;We suggest using the docker-compose distribution via the instructions below, but there is also a &lt;a href=&quot;https://docs.konghq.com/gateway/latest/install/docker/#install-kong-gateway-in-db-less-mode&quot;&gt;docker installation&lt;/a&gt; procedure if you’d prefer to run the Kong API Gateway in DB-less mode.&lt;/p&gt; 
&lt;p&gt;Whether you’re running in the cloud, on bare metal, or using containers, you can find every supported distribution on our &lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;official installation&lt;/a&gt; page.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;To start, clone the Docker repository and navigate to the compose folder.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ git clone https://github.com/Kong/docker-kong
  $ cd docker-kong/compose/
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Start the Gateway stack using:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ KONG_DATABASE=postgres docker-compose --profile database up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Gateway is now available on the following ports on localhost:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:8000&lt;/code&gt; - send traffic to your service via Kong&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8001&lt;/code&gt; - configure Kong using Admin API or via &lt;a href=&quot;https://github.com/kong/deck&quot;&gt;decK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8002&lt;/code&gt; - access Kong&#39;s management Web UI (&lt;a href=&quot;https://github.com/Kong/kong-manager&quot;&gt;Kong Manager&lt;/a&gt;) on &lt;a href=&quot;http://localhost:8002&quot;&gt;localhost:8002&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Next, follow the &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/getting-started/configuring-a-service/&quot;&gt;quick start guide&lt;/a&gt; to tour the Gateway features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;By centralizing common API functionality across all your organization&#39;s services, the Kong API Gateway creates more freedom for engineering teams to focus on the challenges that matter most.&lt;/p&gt; 
&lt;p&gt;The top Kong features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Advanced routing, load balancing, health checking - all configurable via a RESTful admin API or declarative configuration.&lt;/li&gt; 
 &lt;li&gt;Authentication and authorization for APIs using methods like JWT, basic auth, OAuth, ACLs and more.&lt;/li&gt; 
 &lt;li&gt;Proxy, SSL/TLS termination, and connectivity support for L4 or L7 traffic.&lt;/li&gt; 
 &lt;li&gt;Plugins for enforcing traffic controls, rate limiting, req/res transformations, logging, monitoring and including a plugin developer hub.&lt;/li&gt; 
 &lt;li&gt;Plugins for AI traffic to support multi-LLM implementations and no-code AI use cases, with advanced AI prompt engineering, AI observability, AI security and more.&lt;/li&gt; 
 &lt;li&gt;Sophisticated deployment models like Declarative Databaseless Deployment and Hybrid Deployment (control plane/data plane separation) without any vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;Native &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;ingress controller&lt;/a&gt; support for serving Kubernetes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Plugin Hub&lt;/h3&gt; 
&lt;p&gt;Plugins provide advanced functionality that extends the use of the Gateway. Many of the Kong Inc. and community-developed plugins like AWS Lambda, Correlation ID, and Response Transformer are showcased at the &lt;a href=&quot;https://docs.konghq.com/hub/&quot;&gt;Plugin Hub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Contribute to the Plugin Hub and ensure your next innovative idea is published and available to the broader community!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We ❤️ pull requests, and we’re continually working hard to make it as easy as possible for developers to contribute. Before beginning development with the Kong API Gateway, please familiarize yourself with the following developer resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Community Pledge (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COMMUNITY_PLEDGE.md&quot;&gt;COMMUNITY_PLEDGE.md&lt;/a&gt;) for our pledge to interact with you, the open source community.&lt;/li&gt; 
 &lt;li&gt;Contributor Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;) to learn about how to contribute to Kong.&lt;/li&gt; 
 &lt;li&gt;Development Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/DEVELOPER.md&quot;&gt;DEVELOPER.md&lt;/a&gt;): Setting up your development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use the &lt;a href=&quot;https://docs.konghq.com/latest/plugin-development/&quot;&gt;Plugin Development Guide&lt;/a&gt; for building new and creative plugins, or browse the online version of Kong&#39;s source code documentation in the &lt;a href=&quot;https://docs.konghq.com/latest/pdk/&quot;&gt;Plugin Development Kit (PDK) Reference&lt;/a&gt;. Developers can build plugins in &lt;a href=&quot;https://docs.konghq.com/gateway/latest/plugin-development/&quot;&gt;Lua&lt;/a&gt;, &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-go-plugins&quot;&gt;Go&lt;/a&gt; or &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-javascript-plugins&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; for more details about a given release. The &lt;a href=&quot;https://semver.org&quot;&gt;SemVer Specification&lt;/a&gt; is followed when versioning Gateway releases.&lt;/p&gt; 
&lt;h2&gt;Join the Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://docs.konghq.com/&quot;&gt;docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Kong discussions forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the Kong discussions at the Kong Nation forum: &lt;a href=&quot;https://discuss.konghq.com/&quot;&gt;https://discuss.konghq.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href=&quot;http://kongcommunity.slack.com/&quot;&gt;Community Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read up on the latest happenings at our &lt;a href=&quot;https://konghq.com/blog/&quot;&gt;blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href=&quot;https://x.com/thekonginc&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Subscribe to our &lt;a href=&quot;https://www.youtube.com/c/KongInc/videos&quot;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visit our &lt;a href=&quot;https://konghq.com/&quot;&gt;homepage&lt;/a&gt; to learn more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Konnect Cloud&lt;/h2&gt; 
&lt;p&gt;Kong Inc. offers commercial subscriptions that enhance the Kong API Gateway in a variety of ways. Customers of Kong&#39;s &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Konnect Cloud&lt;/a&gt; subscription take advantage of additional gateway functionality, commercial support, and access to Kong&#39;s managed (SaaS) control plane platform. The Konnect Cloud platform features include real-time analytics, a service catalog, developer portals, and so much more! &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;Get started&lt;/a&gt; with Konnect Cloud.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright 2016-2025 Kong Inc.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd#installation&quot;&gt;fd-find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>AstroNvim/astrocommunity</title>
      <link>https://github.com/AstroNvim/astrocommunity</link>
      <description>&lt;p&gt;A community repository of common plugin specifications&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; id=&quot;madewithlua&quot;&gt; 
 &lt;img src=&quot;https://astronvim.com/logo/astronvim.svg?sanitize=true&quot; width=&quot;110&quot; , height=&quot;100&quot; /&gt; 
&lt;/div&gt; 
&lt;h1 align=&quot;center&quot;&gt;AstroNvim Community Repository&lt;/h1&gt; 
&lt;p&gt;AstroNvim&#39;s community repository contains plugin configuration specifications — a collection of plugins contributed by the community for AstroNvim, a NeoVim configuration. These specifications help manage the variety of plugins used in AstroNvim.&lt;/p&gt; 
&lt;h2&gt;📦 Setup&lt;/h2&gt; 
&lt;p&gt;To integrate the community plugins, add the provided configurations to your &lt;code&gt;plugins&lt;/code&gt; setup preferably before you import your own plugins to guarantee all AstroCommunity changes are loaded before your own overrides. If you are using the &lt;a href=&quot;https://github.com/AstroNvim/template&quot;&gt;AstroNvim Template&lt;/a&gt; This can be done in your &lt;code&gt;lua/community.lua&lt;/code&gt; file. If you&#39;re unfamiliar with configuring plugins, we recommend referring to the &lt;a href=&quot;https://docs.astronvim.com/configuration/customizing_plugins/&quot;&gt;AstroNvim documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Importing AstroCommunity Plugins&lt;/h3&gt; 
&lt;p&gt;Integrate the following content within your &lt;code&gt;lua/community.lua&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;AstroNvim/astrocommunity&quot;,
  { import = &quot;astrocommunity.colorscheme.catppuccin&quot; },
  -- ... import any community contributed plugins here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing AstroCommunity Installations&lt;/h3&gt; 
&lt;p&gt;Once you have AstroCommunity imports defined in your &lt;code&gt;lua/community.lua&lt;/code&gt; you can then further customize the installations in your own plugin definitions (typically done in the &lt;code&gt;lua/plugins/&lt;/code&gt; directory). Here is an example assuming you have Catppuccin installed as shown above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  { -- further customize the options set by the community
    &quot;catppuccin&quot;,
    opts = {
      integrations = {
        sandwich = false,
        noice = true,
        mini = true,
        leap = true,
        markdown = true,
        neotest = true,
        cmp = true,
        overseer = true,
        lsp_trouble = true,
        rainbow_delimiters = true,
      },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To disable imports, set the &lt;code&gt;enabled&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. You have two approaches to modify an existing plugin: use the full repository name (e.g., &quot;m4xshen/smartcolumn.nvim&quot;) or the module name (e.g., &quot;catppuccin&quot;). Remember, the module name might differ from the folder name.&lt;/li&gt; 
 &lt;li&gt;It&#39;s recommended to use the full import path when customizing a plugin, and not the shorthand notation of just the repository name.&lt;/li&gt; 
 &lt;li&gt;You can override many aspects of community plugins including settings, dependencies, and versions. For more details on available options, refer to the &lt;a href=&quot;https://lazy.folke.io/&quot;&gt;lazy.nvim documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve written a plugin configuration and wish to add it with the AstroCommunity repository, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/AstroNvim/astrocommunity/main/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; and submit a pull request. Ensure you&#39;ve rigorously tested your changes before submission. This isn&#39;t an official repository, so its stability relies on community contributions. We&#39;re excited to see how this project grows and evolves!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>amzxyz/rime_wanxiang</title>
      <link>https://github.com/amzxyz/rime_wanxiang</link>
      <description>&lt;p&gt;Rime万象拼音输入方案：标准版与增强版可选，词库基于AI筛选和语料辅助筛选精干高效，配合全新语法模型，输入不再纠结。PRO版本支持10种双拼，6种辅助码，并且可以扩展更多，支持中英混输，内置超级注释、带调全拼输入码显示、快符与重复上屏、手动排序、tips等功能扩展，大大增强使用体验。　　Q群：11033572&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;h1&gt;万象系列方案 &lt;a href=&quot;https://deepwiki.com/amzxyz/rime_wanxiang&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;h2&gt;万象拼音——基于深度优化的词库和语言模型&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;万象词库与万象语言模型&lt;/a&gt; 是一种带声调的词库，经过AI和大基数语料筛选、加频，结合语言模型获得更准确的整句输出。还结合了中英文混输，一套词库，多种用法，具体可以点击链接了解优势&lt;/p&gt; 
&lt;h3&gt;优势&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;词库词语全部加音调&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;设计6种辅助码，头部使用全拼编码，可以转化为任何双拼编码&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;词库解码顺序为：全拼拼音；墨奇码；鹤形；自然码；虎码首末；五笔前2；汉心码&lt;/li&gt; 
   &lt;li&gt;因此，万象拼音支持拼音和辅助码任意两两组合&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他类型辅助码用户可以通过LMDG工具包进行词库辅助码刷新，使用zrm-fuzhu方案包，替换为刷新后的词库即可使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;万象词库中的带声调拼音标注+词组构成+词频是整个万象项目的核心，是使用体验的基石，方案的其它功能皆可自定义，我希望使用者可以基于词库+转写的方式获得输入体验&lt;/strong&gt; &lt;a href=&quot;https://docs.qq.com/smartsheet/DWHZsdnZZaGh5bWJI?viewId=vUQPXH&amp;amp;tab=BB08J2&quot;&gt;万象词库问题收集反馈表&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;效果大赏&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202502200358104987_%E6%95%88%E6%9E%9C.png&quot; alt=&quot;效果.png&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;版本差异&lt;/th&gt; 
   &lt;th&gt;标准版&lt;/th&gt; 
   &lt;th&gt;增强版&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;方案文件&lt;/td&gt; 
   &lt;td&gt;wanxiang.schema.yaml&lt;/td&gt; 
   &lt;td&gt;wanxiang_pro.schema.yaml&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;是否调频&lt;/td&gt; 
   &lt;td&gt;默认开启&lt;/td&gt; 
   &lt;td&gt;默认关闭&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词记录&lt;/td&gt; 
   &lt;td&gt;无差别自动记录，词库混乱&lt;/td&gt; 
   &lt;td&gt;需手动造词``引导，词库可控&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词位置&lt;/td&gt; 
   &lt;td&gt;wanxiang.userdb&lt;/td&gt; 
   &lt;td&gt;zc.userdb&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;辅助码&lt;/td&gt; 
   &lt;td&gt;有基于声调的辅助&lt;/td&gt; 
   &lt;td&gt;有7种辅助码可选，同时兼容声调辅助&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;简码&lt;/td&gt; 
   &lt;td&gt;全拼开启基于转写的简码，双拼未开启&lt;/td&gt; 
   &lt;td&gt;有携带部分数据但未配置(自己设置的才是自己的)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;词库格式&lt;/td&gt; 
   &lt;td&gt;你➩nǐ➩1000&lt;/td&gt; 
   &lt;td&gt;你➩nǐ;re➩1000&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;新手快速入门&lt;/h3&gt; 
&lt;p&gt;不了解rime基础的可以参考友情链接，初步了解rime运行的些许特性：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mintimate.cc/zh/guide/installRime.html&quot;&gt;oh my rime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://xishansnow.github.io/posts/41ac964d.html&quot;&gt;rime参数配置&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;整个rime配置生态都是通的，里面有非常完整的使用方法，(诸如放到哪里、换个皮肤、什么是用户目录。。。)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; &lt;em&gt;如果你是第一次使用万象，可以不要用你过往经验来定义万象，按如下的步骤将万象跑起来后,体验一下万象的功能，然后学习一下万象的各项内容之后再考虑。&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;①快速运行：&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;将方案文件置于用户目录中，直接部署，等待部署完成后，&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;输入以下指令(斜杠引导)切换为对应的双拼/全拼，切换后按照提示重新部署，完成。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这样的指令能帮你一次性完成4个补丁文件的输入类型修改，运行逻辑：根目录无自定义文件则复制custom文件夹相关文件出来并修改为对应的输入方案，如果根目录存在则只修改输入方案，不进行复制，因此不会被覆盖。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ios仓输入法，平台特殊，需要额外去：方案文件管理-使用键盘文件覆盖应用文件，才能完成文件变更&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;/flypy    → 小鹤双拼
/mspy     → 微软双拼
/zrm      → 自然码
/sogou    → 搜狗双拼
/abc      → 智能ABC
/ziguang  → 紫光双拼
/pyjj     → 拼音加加
/gbpy     → 国标双拼
/lxsq     → 乱序17
/pinyin   → 全拼
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;②进阶custom patch法（已经尽量为你简化）强烈推荐，适用于长期稳定使用：&lt;/h4&gt; 
&lt;p&gt;其实快速运行中我们已经完成了custom patch的部署，里面还预设了一些示例，这些例子只是例子，请务必详细阅读每一行，保留有用的删除无用的，千万不要改完双拼就万事大吉了，每一行详细查阅、理解、修改。custom是对对应方案文件的最后一道补丁，是真正属于你自己的配置文件，他不会被升级所覆盖。&lt;/p&gt; 
&lt;p&gt;方案提供了custom文件夹，预设了一些文件与教程，请不要删除相关文件，根据文件夹中内容进行相关修改变更：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wanxiang.custom.yaml是对wanxiang.schema.yaml的补丁以此类推
可以打补丁的类型：
schema,default,weasel,squirrel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;注意不要删除和变更每一个custom的表头。&lt;/p&gt; 
&lt;p&gt;更详细参照：&lt;a href=&quot;https://docs.qq.com/doc/DQ0FqSXBmYVpWVFpy?rtkey=&quot;&gt;🚀 Rime 万象拼音输入方案 新手安装配置指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;③脚本更新：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;脚本的下载地址 &lt;a href=&quot;https://github.com/expoli/rime-wanxiang-update-tools&quot;&gt;万象方案更新脚本&lt;/a&gt;。这里以win版本的小狼毫为例，如果你是&lt;strong&gt;中文系统&lt;/strong&gt;请下载更新脚本的 powershell &lt;strong&gt;非utf-8版本&lt;/strong&gt;，具体文件名：&lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 。在使用万象之前，请安装小狼毫，安装小狼毫的过程中，请一切保持默认即可，等你熟悉之后可以自定义。本入门最终会带你一步步设置使用&lt;strong&gt;小鹤双拼+墨奇辅助码&lt;/strong&gt;的方案。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;下载更新脚本：直接点击上面地址首页右边最新 release 链接，然后下载对应的 &lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 文件即可。下载完成后，直接双击运行刚刚下载的ps1脚本。如果杀毒报错，请将你下载的文件恢复后，添加到信任文件。如果执行一闪而过、或者遇到乱码再尝试下载 utf-8 版本，具体文件名：&lt;code&gt;rime-wanxiang-update-windows-utf-8.ps1&lt;/code&gt;。如果提示权限不足，可以在 powershell 终端中执行 &lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt; 再尝试运行下载的 ps1 脚本。&lt;/li&gt; 
 &lt;li&gt;脚本执行后，需要你确认你使用的是全拼还是双拼用户，如果你是全拼用户，请根据提示输入 0 后回车。如果你双拼用户，需要你确认你使用的辅助码类型，默认的万象方案支持汉心、简单鹤、墨奇、虎码、五笔、自然码共计6种辅助码类型。如果没有你想要的辅助码类型，也不要着急，可在熟悉万象之后自定义。根据提示输入你使用的辅助码类型的数字后回车即可。这里我按墨奇辅助码输入。更不要着急怎么选择双拼方案，后面会告诉你的。&lt;/li&gt; 
 &lt;li&gt;脚本继续执行，提示选择是否全部更新，不要管，你是新手，直接选全部更新，输入 0 回车。然后就默默的等待脚本执行完后，按任意键退出即可。默认情况下，万象的双拼方案为自然码。&lt;/li&gt; 
 &lt;li&gt;在使用脚本更新之前，务必使用进阶custom patch法维护好你的配置，更新不会覆盖custom.yaml类文件&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;答疑&lt;/h3&gt; 
&lt;h4&gt;为什么词库这么大，我见过只有单字携带辅助码的方案，词库可以缩小吗？&lt;/h4&gt; 
&lt;p&gt;在这里我借助wiki深入阐述一下这个问题并解答这些问题：&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%87%E8%B1%A1%E8%AF%8D%E5%BA%93PRO%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5&quot;&gt;万象词库PRO的设计理念&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E9%97%AD%E8%B0%83%E9%A2%91%E4%BB%A5%E5%8F%8A%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E6%8E%AA%E6%96%BD%E6%9C%89%E5%93%AA%E4%BA%9B&quot;&gt;为什么PRO版本默认关闭调频的说明&lt;/a&gt; &lt;code&gt;enable_user_dict: false # 是否开启自动调频，true为开启&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;功能一览&lt;/h3&gt; 
&lt;h4&gt;辅助码&lt;/h4&gt; 
&lt;p&gt;辅助码可以在输入一个确定得拼音后面继续输入一个部首的读音，使得这个字出现在靠前甚至第一位。这种方式易于理解，无须记忆字根，一切基于拼音得基础上。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041144502563_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121653.png&quot; alt=&quot;截图_选择区域_20240704121653.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能1&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 如果想要 &lt;code&gt;镇&lt;/code&gt; 字显示在前面 那么在本方案下提供两种方式，第一种就是辅助码声母，&lt;code&gt;vf&lt;/code&gt;继续输入&lt;code&gt;j&lt;/code&gt; 也就是金字旁得声母即可出现结果，如果还是出现不了你要的结果，可以输入另外主体字的声母来继续缩小范围。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041147131421_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121809.png&quot; alt=&quot;截图_选择区域_20240704121809.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能2&lt;/strong&gt; 第二种方式是通过反查字库来定位，只是通过不同的方案实现，在输入主要拼音后，通过符号``` 来引导进入反查状态，引导后继续输入&lt;code&gt;jn&lt;/code&gt;金 则包含金的字就会被选出来；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149125588_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121635.png&quot; alt=&quot;截图_选择区域_20240704121635.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;引导后继续输入&lt;code&gt;mu 木&lt;/code&gt;则带&lt;code&gt;木&lt;/code&gt;的字就会被选出来&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149524870_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121611.png&quot; alt=&quot;截图_选择区域_20240704121611.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能3&lt;/strong&gt; 通过 拼音状态下``〔反查：部件|笔画〕&lt;code&gt;来引导拆字模式 举例 &lt;/code&gt;震` 假设你不认识，你可以通过`雨和辰` 来合并输入，拼音状态输入后，继续输入其它字符字母az会消失如下图，输入 `yu if` 即雨 辰，结果出现了我们要的震字，且给出了辅助码 `y` 和 `i` ，`y`是雨的声母`y`，`i`是辰的声母`ch`，同时通过hspnz分别代表横竖撇捺折，两种类型兼容。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202409280324599355_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240928112256.png&quot; alt=&quot;截图_选择区域_20240928112256.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能4&lt;/strong&gt; 句子中间或者单字输入时需要输入全位辅助码时由于与双拼词语重码，因为我们设计的基本辅助码是2位，加上双拼共4位，由于在整句中我们为了整句输入的顺畅，不会将4码聚拢作为优先级较高的选择，这样会在很多时候造成你想打的句子缩成一团变成全辅助码的词汇。此时可以通过追加/的方式使其聚拢，这种方式是由于我们是直接辅助码导致的，如果我们通过一个符号引导辅助码，那么在输入时要每一个都用到符号，而采用这种方式我们只需要在必要的时候使用/节省了输入的按键开支，下面由两个图片说明问题：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210142513354_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093644.png&quot; alt=&quot;截图_选择区域_20240821093644.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210143144721_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093701.png&quot; alt=&quot;截图_选择区域_20240821093701.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能5&lt;/strong&gt; 句子中间或者单字输入时需要可以使用更精确的聚拢方式&quot;声调辅助&quot;，7890数字按键代表1234声，轻声归并到4声，在功能4中我们可以在双拼两码后面3个编码的位置任意插入声调与两位辅助码混合使用，就是除了不用斜杠了，我们还顺序自由了，下面由两个图片说明问题：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202505120222182012_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101814.png&quot; alt=&quot;截图_选择区域_20250512101814.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/20250512022217432_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101752.png&quot; alt=&quot;截图_选择区域_20250512101752.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202505120222163619_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20250512101713.png&quot; alt=&quot;截图_选择区域_20250512101713.png&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;其他亮点功能&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;日期、时间、节日、节气、问候模板：&lt;/strong&gt; 可以在按键配置的地方定制引导前缀&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;key_binder/shijian_keys: [&quot;/&quot;, &quot;o&quot;]&lt;/code&gt; 这样的配置以为你你可以/sj也可以osj，某些方案o有别的作用时候可以去掉o,灵活处理。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;#时间：osj 或者 /sj
#日期：orq 或者 /rq
#农历：onl 或者 /nl
#星期：oxq 或者 /xq
#今年第几周：oww 或者 /ww
#节气：ojq 或者 /jq
#日期+时间：ors 或者 /rs
#时间戳：ott 或者 /tt
#大写N日期：N20250315 或者 N0302 即不添加年
#节日：ojr 或者 /jr
#问候模板：/day 或者 oday
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Unicode：&lt;/strong&gt; 大写 U 开头，如 U62fc 得到「拼」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数字、金额大写：&lt;/strong&gt; 大写 R 开头，如 R1234 得到「一千二百三十四、壹仟贰佰叁拾肆元整」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;/引导模式：&lt;/strong&gt; 通过输入 /sx 快捷输入关于“数学”的特殊符号，具体能输入什么可以打开 symbols.yaml学习。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;计算器：&lt;/strong&gt; 通过输入大写V引导继续输入如：V3+5 候选框就会有8和3+5=8，基础功能 &lt;code&gt;+ - * / % ^&lt;/code&gt; 还支持 &lt;code&gt;sin(x) cos(x)&lt;/code&gt; 等众多运算方式 &lt;a href=&quot;https://github.com/gaboolic/rime-shuangpin-fuzhuma/raw/main/md/calc.md&quot;&gt;点击全面学习&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自动上屏：&lt;/strong&gt; 例如：三位、四位简码唯一时，自动上屏如&lt;code&gt;jjkw岌岌可危&lt;/code&gt; &lt;code&gt;zmhu怎么回事&lt;/code&gt; 。默认未开启，方案文件中&lt;code&gt;speller:&lt;/code&gt;字段下取消注释这两句开启 &lt;code&gt;# auto_select: true # auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;错音错字提示：&lt;/strong&gt; 例如：输入&lt;code&gt;gei yu给予&lt;/code&gt;，获得&lt;code&gt;jǐ yǔ&lt;/code&gt;提示，此功能与全拼、双拼类型无关全部支持；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;快符Lua：&lt;/strong&gt; 例如 &lt;code&gt;;q&lt;/code&gt; 通过分号键引导的26字母+10个数字，快速符号自动上屏，双击分号上屏中文状态下分号本身，分号+单引号;&#39;重复上屏候选词，此功能会占用分号不能直接上屏而变成双击，但带来的收益也是显而易见的；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;超级tips：&lt;/strong&gt; 支持将表情、化学式、翻译、简码 提示等等你能想到得数据获得提示显示并将通过一个自定义按键直接上屏，默认为“.” 避免了占用候选框，通过Control+t 进行开关。⚠️仓输入法、超越输入法设置按键交由rime去处理，没有特殊需求应该一律交给rime；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;辅助码提示（仅PRO）：&lt;/strong&gt; 任意长度候选词的辅助码提示能力，默认开启1个字的辅助码，可以在方案文件中定义更长的长度。Ctrl+a可以实时在开启辅助码提示、开启声调全拼提示、关闭注释 三个状态循环，Ctrl+c开启拆分辅助提示，优先级高于普通辅助提示；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输入码音调显示：&lt;/strong&gt; 通过Ctrl+s可以使得输入码实时动态显示全拼并加音调，这是万象特色功能；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户按需造词（仅PRO）：&lt;/strong&gt; 默认通过&lt;code&gt;``&lt;/code&gt;引导的方式进入用户词自造词模式，继续输入则&lt;code&gt;``&lt;/code&gt;前缀消失，后面打出来的字上屏后完成造词。 pro版本讲究自主可控，由于辅助码的使用在很多时候不熟悉的时候可能会上屏更加异常的词汇或者生僻字，有的用户还不会使用Esc退出输入，而是选择直接敲下空格。按需造词可以有效把控造出的词是有意义的，而且默认靠后，原因简单基本上有意义的高频词万象已经提供，你应该使用辅助码将其前置。&lt;strong&gt;重点&lt;/strong&gt;：在此基础上我们还支持“后触发”当你输入编码后发现没有你要的行业词汇，此时在后面双击&lt;code&gt;``&lt;/code&gt; 就可以在不删除编码的情况下完成造词。还有一个是次选造词，如果次选是你想要的，并且是词库组合成的，上屏就会记录下来。&lt;/p&gt; 
&lt;p&gt;总结一下，造词功能由：①&lt;code&gt;``&lt;/code&gt;起始的主动造词，②&lt;code&gt;``&lt;/code&gt;在编码后面的主动造词，③次选造词。三个特性构成&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户词删除：&lt;/strong&gt; 不管什么删除都不能直接作用于固定词典，使用Ctrl+del是rime系统删除用户词,就可以将用户词标记为c&amp;lt;=0，这在rime系统中就表现为不使用，假性删除，如何能真的删除这些词汇，可以通过/del输入编码来触发删除，这是一个危险操作，操作之前需要点击同步触发导出用户词的txt文件，此后我们就能放心使用，整个步骤：①先同步，②输入/del触发清理③重新部署④同步，就可以将清理后的词库恢复到db数据库中。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;手动排序（Lua）：&lt;/strong&gt; ①词典候选类型：对选中的候选词操作，使用Ctrl+j向左一步，Ctrl+k向右一步，Ctrl+l(零)移除选中排序信息，Ctrl+p 置顶选中候选。其作用于当时编码与候选词；②动态生成的Lua候选，很多时候我们对日期、时间等输出格式首选有着自己的追求，复杂的配置又往往提升了使用难度，于是我们基于排序Lua实现了动态内容的按序号索引的排序，也就是说该序号下原本生成的格式整个发生了位置变化，使用方法一致。信息储存于Lua文件夹下排序数据库中sequence.userdb，支持导出导入数据便于多设备共用。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;排序信息同步：

1. A 设备导出
    1. 首选确保 rime 用户目录下的 lua 目录下没有 `sequence.txt` 文件
    2. 按「部署」，会自动导出数据到 `sequence.txt` 文件
    3. 将生成的 `sequence.txt` 这个复制到 B 的相同位置

2. B 设置按「部署」导入成功。如想查看同步的结果，可以再次按下部署，查看生成的「sequence.txt」 文件
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**声调辅助回退（Lua）：**万象是将7890用于代表1234声，轻声归并到了4，我们支持在例如输入ni9后发现我可能要4声，ni0，此时我们无需删除数字9而是直接输入对的0，类似手动在7890之间轮巡，能有效快速提升声调辅助的效率，减少使用负担，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;删除键限制（Lua）：&lt;/strong&gt; 可以在输入中当持续按下删除编码为0时会卡住，抬起重新按下才能继续删除已经上屏内容，避免误删除上屏内容。目前仅PC可用，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输入长度限制（Lua）：&lt;/strong&gt; 对两类场景进行限制，避免数据并发卡顿：1、重复输入8个连续相同的字母，aaaaaaaa会提示:已超最大重复声母。因为连续多个的重复字母会造成严重的卡顿；2、分词片段限制在30个，也就是30个字，过长的语句价值不大还会造成卡顿。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tab循环切换音节：&lt;/strong&gt; 当输入多个字词时想要给前面补充辅助码，可以多次按下tab循环切换，这种可能比那些复杂的快捷键好用一些；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;翻译模式：&lt;/strong&gt; 输入状态按下Ctrl+E快捷键进入翻译模式，原理是opencc查表进行中英文互译，能否翻译取决于词表的丰富度；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;反查：&lt;/strong&gt; 支持&lt;code&gt;`&lt;/code&gt;引导状态下的显示格式化，同时支持部件组字模式和笔画模式。反查模式不受字符集过滤影响，默认开放大字集,也不受辅助码开关影响，会显示注释，如：功能2相关展示；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字符集过滤：&lt;/strong&gt; 默认开启过滤，写在charset.dict.yaml的就是可以通过的字表，默认为8105+𰻞𰻞，如果你想什么字在小字集模式可以通过可以写在这里，配套开关【小字集、大字集】，快捷键Ctrl+g&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自定义词库：&lt;/strong&gt; 自定义词库首先要利用&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;LMDG&lt;/a&gt;中的脚本将你自己的词库刷成与万象同类型的声调、或者声调+辅助码的形态，因为主词库要参与转写。对于custom_phrase则需要手动编辑编码为实际输入的编码&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/万象输入方案.png&quot; height=&quot;2800&quot; width=&quot;1000&quot; /&gt; 
&lt;h2&gt;鸣谢&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;感谢网友的热情提报问题，使得模型和词库体验进一步提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;赞赏&lt;/h2&gt; 
&lt;p&gt;如果觉得项目好用，可以请AMZ喝咖啡&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/赞赏.jpg&quot; height=&quot;312&quot; width=&quot;446&quot; /&gt;</description>
    </item>
    
    <item>
      <title>supermaven-inc/supermaven-nvim</title>
      <link>https://github.com/supermaven-inc/supermaven-nvim</link>
      <description>&lt;p&gt;The official Neovim plugin for Supermaven&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supermaven Neovim Plugin&lt;/h1&gt; 
&lt;p&gt;This plugin, supermaven-nvim, lets you use &lt;a href=&quot;https://supermaven.com/&quot;&gt;Supermaven&lt;/a&gt; in Neovim. If you encounter any issues while using supermaven-nvim, consider opening an issue or reaching out to us on &lt;a href=&quot;https://discord.com/invite/QQpqBmQH3w&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Using a plugin manager, run the .setup({}) function in your Neovim configuration file.&lt;/p&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lazy&quot;).setup({
    {
      &quot;supermaven-inc/supermaven-nvim&quot;,
      config = function()
        require(&quot;supermaven-nvim&quot;).setup({})
      end,
    },
}, {})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &quot;supermaven-inc/supermaven-nvim&quot;,
  config = function()
    require(&quot;supermaven-nvim&quot;).setup({})
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optional configuration&lt;/h3&gt; 
&lt;p&gt;By default, supermaven-nvim will use the &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt; keymaps to accept and clear suggestions. You can change these keymaps by passing a &lt;code&gt;keymaps&lt;/code&gt; table to the .setup({}) function. Also in this table is &lt;code&gt;accept_word&lt;/code&gt;, which allows partially accepting a completion, up to the end of the next word. By default this keymap is set to &lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;ignore_filetypes&lt;/code&gt; table is used to ignore filetypes when using supermaven-nvim. If a filetype is present as a key, and its value is &lt;code&gt;true&lt;/code&gt;, supermaven-nvim will not display suggestions for that filetype.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;suggestion_color&lt;/code&gt; and &lt;code&gt;cterm&lt;/code&gt; options can be used to set the color of the suggestion text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;supermaven-nvim&quot;).setup({
  keymaps = {
    accept_suggestion = &quot;&amp;lt;Tab&amp;gt;&quot;,
    clear_suggestion = &quot;&amp;lt;C-]&amp;gt;&quot;,
    accept_word = &quot;&amp;lt;C-j&amp;gt;&quot;,
  },
  ignore_filetypes = { cpp = true }, -- or { &quot;cpp&quot;, }
  color = {
    suggestion_color = &quot;#ffffff&quot;,
    cterm = 244,
  },
  log_level = &quot;info&quot;, -- set to &quot;off&quot; to disable logging completely
  disable_inline_completion = false, -- disables inline completion for use with cmp
  disable_keymaps = false, -- disables built in keymaps for more manual control
  condition = function()
    return false
  end -- condition to check for stopping supermaven, `true` means to stop supermaven when the condition is true.
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Disabling supermaven-nvim conditionally&lt;/h3&gt; 
&lt;p&gt;By default, supermaven-nvim will always run unless &lt;code&gt;condition&lt;/code&gt; function returns true or current filetype is in &lt;code&gt;ignore_filetypes&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can disable supermaven-nvim conditionally by setting &lt;code&gt;condition&lt;/code&gt; function to return true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;supermaven-nvim&quot;).setup({
  condition = function()
    return string.match(vim.fn.expand(&quot;%:t&quot;), &quot;foo.sh&quot;)
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will disable supermaven-nvim for files with the name &lt;code&gt;foo.sh&lt;/code&gt; in it, e.g. &lt;code&gt;myscriptfoo.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Using with nvim-cmp&lt;/h3&gt; 
&lt;p&gt;If you are using nvim-cmp, you can use the &lt;code&gt;supermaven&lt;/code&gt; source (which is registered by default) by adding the following to your &lt;code&gt;cmp.setup()&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- cmp.lua
cmp.setup {
  ...
  sources = {
    { name = &quot;supermaven&quot; },
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It also has a builtin highlight group CmpItemKindSupermaven. To add an icon to Supermaven for lspkind, simply add Supermaven to your lspkind symbol map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- lspkind.lua
local lspkind = require(&quot;lspkind&quot;)
lspkind.init({
  symbol_map = {
    Supermaven = &quot;&quot;,
  },
})

vim.api.nvim_set_hl(0, &quot;CmpItemKindSupermaven&quot;, {fg =&quot;#6CC644&quot;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can add Supermaven to the lspkind symbol_map within the cmp format function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- cmp.lua
cmp.setup {
  ...
  formatting = {
    format = lspkind.cmp_format({
      mode = &quot;symbol&quot;,
      max_width = 50,
      symbol_map = { Supermaven = &quot;&quot; }
    })
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Programmatically checking and accepting suggestions&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can also check if there is an active suggestion and accept it programmatically.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;supermaven-nvim&quot;).setup({
  disable_keymaps = true
})

...

M.expand = function(fallback)
  local luasnip = require(&#39;luasnip&#39;)
  local suggestion = require(&#39;supermaven-nvim.completion_preview&#39;)

  if luasnip.expandable() then
    luasnip.expand()
  elseif suggestion.has_suggestion() then
    suggestion.on_accept_suggestion()
  else
    fallback()
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Upon starting supermaven-nvim, you will be prompted to either use the Free Tier with the command &lt;code&gt;:SupermavenUseFree&lt;/code&gt; or to activate a Supermaven Pro subscription by following a link, which will connect your Supermaven account.&lt;/p&gt; 
&lt;p&gt;If Supermaven is set up, you can use &lt;code&gt;:SupermavenLogout&lt;/code&gt; to switch versions.&lt;/p&gt; 
&lt;p&gt;You can also use &lt;code&gt;:SupermavenShowLog&lt;/code&gt; to view the logged messages in &lt;code&gt;path/to/stdpath-cache/supermaven-nvim.log&lt;/code&gt; if you encounter any issues. Or &lt;code&gt;:SupermavenClearLog&lt;/code&gt; to clear the log file.&lt;/p&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;Supermaven-nvim provides the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:SupermavenStart    start supermaven-nvim
:SupermavenStop     stop supermaven-nvim
:SupermavenRestart  restart supermaven-nvim
:SupermavenToggle   toggle supermaven-nvim
:SupermavenStatus   show status of supermaven-nvim
:SupermavenUseFree  switch to the free version
:SupermavenUsePro   switch to the pro version
:SupermavenLogout   log out of supermaven
:SupermavenShowLog  show logs for supermaven-nvim
:SupermavenClearLog clear logs for supermaven-nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Lua API&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;supermaven-nvim.api&lt;/code&gt; module provides the following functions for interacting with supermaven-nvim from Lua:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local api = require(&quot;supermaven-nvim.api&quot;)

api.start() -- starts supermaven-nvim
api.stop() -- stops supermaven-nvim
api.restart() -- restarts supermaven-nvim if it is running, otherwise starts it
api.toggle() -- toggles supermaven-nvim
api.is_running() -- returns true if supermaven-nvim is running
api.use_free_version() -- switch to the free version
api.use_pro() -- switch to the pro version
api.logout() -- log out of supermaven
api.show_log() -- show logs for supermaven-nvim
api.clear_log() -- clear logs for supermaven-nvim
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ntop/ntopng</title>
      <link>https://github.com/ntop/ntopng</link>
      <description>&lt;p&gt;Web-based Traffic and Security Network Traffic Monitoring&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ntopng&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ntop/ntopng/actions?query=workflow%3ABuild&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/ntop/ntopng/build.yml?branch=dev&amp;amp;logo=github&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:ntopng&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/ntopng.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gurubase.io/g/ntopng&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gurubase-Ask%20ntopng%20Guru-006BFF&quot; alt=&quot;Gurubase&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Introduction&lt;/h3&gt; 
&lt;p&gt;ntopng® is a web-based network traffic monitoring application released under GPLv3. It is the new incarnation of the original ntop written in 1998, and now revamped in terms of performance, usability, and features.&lt;/p&gt; 
&lt;p&gt;While you can read more about ntopng on the ntop web site (&lt;a href=&quot;http://www.ntop.org&quot;&gt;http://www.ntop.org&lt;/a&gt;), we suggest you to start reading the &lt;a href=&quot;https://github.com/ntop/ntopng/raw/dev/doc/README.md&quot;&gt;doc/README.md&lt;/a&gt; file for learning how to compile and use ntopng.&lt;/p&gt; 
&lt;p&gt;If instead of source code you prefer to use a pre-built package, please go to &lt;a href=&quot;http://packages.ntop.org&quot;&gt;http://packages.ntop.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We build binary packages for the following platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Debian/Ubuntu LTS x64&lt;/li&gt; 
 &lt;li&gt;CentOS/RedHat/RockyLinux/AlmaLinux Linux x64&lt;/li&gt; 
 &lt;li&gt;Windows x64&lt;/li&gt; 
 &lt;li&gt;RaspberryPI/Debian ARM&lt;/li&gt; 
 &lt;li&gt;FreeBSD/OPNsense/pfSense&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Enjoy.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;If you want to learn more about ntopng please visit the &lt;a href=&quot;https://www.ntop.org/guides/ntopng/&quot;&gt;User&#39;s Guide&lt;/a&gt; and the &lt;a href=&quot;https://www.ntop.org/guides/ntopng/api/index.html&quot;&gt;API Documentation&lt;/a&gt; or watch our &lt;a href=&quot;https://www.youtube.com/watch?v=dtLrax-_ZNs&quot;&gt;latest webinar&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Details&lt;/h3&gt; 
&lt;p&gt;For more information about ntopng, please visit &lt;a href=&quot;https://www.ntop.org/products/traffic-analysis/ntop/&quot;&gt;http://ntop.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ntopng is a registered trademark in the US and EU.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/lazydev.nvim</title>
      <link>https://github.com/folke/lazydev.nvim</link>
      <description>&lt;p&gt;Faster LuaLS setup for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💻 &lt;code&gt;lazydev.nvim&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;lazydev.nvim&lt;/strong&gt; is a plugin that properly configures &lt;a href=&quot;https://luals.github.io/&quot;&gt;LuaLS&lt;/a&gt; for editing your &lt;strong&gt;Neovim&lt;/strong&gt; config by lazily updating your workspace libraries.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;much faster auto-completion, since only the modules you &lt;code&gt;require&lt;/code&gt; in open Neovim files will be loaded.&lt;/li&gt; 
 &lt;li&gt;no longer needed to configure what plugin sources you want to have enabled for a certain project&lt;/li&gt; 
 &lt;li&gt;load third-party addons from &lt;a href=&quot;https://github.com/LuaLS/LLS-Addons&quot;&gt;LLS-Addons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;will update your workspace libraries for: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;require&lt;/strong&gt; statements: &lt;code&gt;require(&quot;nvim-treesitter&quot;)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;module annotations&lt;/strong&gt;: &lt;code&gt;---@module &quot;nvim-treesitter&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;, &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; and &lt;a href=&quot;https://github.com/ms-jpq/coq_nvim&quot;&gt;nvim_coq&lt;/a&gt; completion source for the above&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/folke/lazydev.nvim/assets/292349/c5f23225-88eb-454d-9b4e-1bf9183f7ff8&quot; alt=&quot;2024-06-01_21-02-40&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;⚠️ Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you have files that only use types from a plugin, then those types won&#39;t be available in your workspace.&lt;/li&gt; 
 &lt;li&gt;completion for module names when typing &lt;code&gt;require(...)&lt;/code&gt; will only return loaded modules in your workspace.&lt;/li&gt; 
 &lt;li&gt;To get around the above, you can: 
  &lt;ul&gt; 
   &lt;li&gt;pre-load those plugins with the &lt;code&gt;library&lt;/code&gt; option.&lt;/li&gt; 
   &lt;li&gt;use the &lt;strong&gt;nvim-cmp&lt;/strong&gt;, &lt;strong&gt;blink.cmp&lt;/strong&gt; or &lt;strong&gt;coq_nvim&lt;/strong&gt; completion source to get all available modules.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Neovim types are &lt;strong&gt;NOT&lt;/strong&gt; included and also no longer needed on &lt;strong&gt;Neovim &amp;gt;= 0.10&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.10.0&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; plugin manager 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;OR&lt;/strong&gt; a plugin manager that uses &lt;strong&gt;Neovim&lt;/strong&gt;&#39;s native package system&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;With &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;folke/lazydev.nvim&quot;,
    ft = &quot;lua&quot;, -- only load on lua files
    opts = {
      library = {
        -- See the configuration section for more details
        -- Load luvit types when the `vim.uv` word is found
        { path = &quot;${3rd}/luv/library&quot;, words = { &quot;vim%.uv&quot; } },
      },
    },
  },
  { -- optional cmp completion source for require statements and module annotations
    &quot;hrsh7th/nvim-cmp&quot;,
    opts = function(_, opts)
      opts.sources = opts.sources or {}
      table.insert(opts.sources, {
        name = &quot;lazydev&quot;,
        group_index = 0, -- set group index to 0 to skip loading LuaLS completions
      })
    end,
  },
  { -- optional blink completion source for require statements and module annotations
    &quot;saghen/blink.cmp&quot;,
    opts = {
      sources = {
        -- add lazydev to your completion providers
        default = { &quot;lazydev&quot;, &quot;lsp&quot;, &quot;path&quot;, &quot;snippets&quot;, &quot;buffer&quot; },
        providers = {
          lazydev = {
            name = &quot;LazyDev&quot;,
            module = &quot;lazydev.integrations.blink&quot;,
            -- make lazydev completions top priority (see `:h blink.cmp`)
            score_offset = 100,
          },
        },
      },
    },
  }
  -- { &quot;folke/neodev.nvim&quot;, enabled = false }, -- make sure to uninstall or disable neodev.nvim
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can force enable/disable &lt;strong&gt;lazydev&lt;/strong&gt; in certain project folders using &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;exrc&#39;&quot;&gt;:h &#39;exrc&#39;&lt;/a&gt; with &lt;code&gt;vim.g.lazydev_enabled = true&lt;/code&gt; or &lt;code&gt;vim.g.lazydev_enabled = false&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;
{
  &quot;folke/lazydev.nvim&quot;,
  ft = &quot;lua&quot;, -- only load on lua files
  opts = {
    library = {
      -- Library paths can be absolute
      &quot;~/projects/my-awesome-lib&quot;,
      -- Or relative, which means they will be resolved from the plugin dir.
      &quot;lazy.nvim&quot;,
      -- It can also be a table with trigger words / mods
      -- Only load luvit types when the `vim.uv` word is found
      { path = &quot;${3rd}/luv/library&quot;, words = { &quot;vim%.uv&quot; } },
      -- always load the LazyVim library
      &quot;LazyVim&quot;,
      -- Only load the lazyvim library when the `LazyVim` global is found
      { path = &quot;LazyVim&quot;, words = { &quot;LazyVim&quot; } },
      -- Load the wezterm types when the `wezterm` module is required
      -- Needs `justinsgithub/wezterm-types` to be installed
      { path = &quot;wezterm-types&quot;, mods = { &quot;wezterm&quot; } },
      -- Load the xmake types when opening file named `xmake.lua`
      -- Needs `LelouchHe/xmake-luals-addon` to be installed
      { path = &quot;xmake-luals-addon/library&quot;, files = { &quot;xmake.lua&quot; } },
    },
    -- always enable unless `vim.g.lazydev_enabled = false`
    -- This is the default
    enabled = function(root_dir)
      return vim.g.lazydev_enabled == nil and true or vim.g.lazydev_enabled
    end,
    -- disable when a .luarc.json file is found
    enabled = function(root_dir)
      return not vim.uv.fs_stat(root_dir .. &quot;/.luarc.json&quot;)
    end,
  },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@alias lazydev.Library {path:string, words:string[], mods:string[]}
---@alias lazydev.Library.spec string|{path:string, words?:string[], mods?:string[]}
---@class lazydev.Config
local defaults = {
  runtime = vim.env.VIMRUNTIME --[[@as string]],
  library = {}, ---@type lazydev.Library.spec[]
  integrations = {
    -- Fixes lspconfig&#39;s workspace management for LuaLS
    -- Only create a new workspace if the buffer is not part
    -- of an existing workspace or one of its libraries
    lspconfig = true,
    -- add the cmp source for completion of:
    -- `require &quot;modname&quot;`
    -- `---@module &quot;modname&quot;`
    cmp = true,
    -- same, but for Coq
    coq = false,
  },
  ---@type boolean|(fun(root:string):boolean?)
  enabled = function(root_dir)
      return vim.g.lazydev_enabled == nil and true or vim.g.lazydev_enabled
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;Just install the plugin and start editing your Lua files.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t use &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt;, then you can use &lt;code&gt;require(&#39;lazydev&#39;).find_workspace(buf?)&lt;/code&gt; to check if the buffer is part of an existing workspace or its libraries.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;:LazyDev&lt;/code&gt; command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LazyDev&lt;/code&gt; or &lt;code&gt;:LazyDev debug&lt;/code&gt; will show a notification with the &lt;strong&gt;lazydev&lt;/strong&gt; settings for the current buffer.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LazyDev lsp&lt;/code&gt;: will show a notification with the settings for &lt;strong&gt;any&lt;/strong&gt; attached LSP servers. Not limited to &lt;strong&gt;LuaLS&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>igorlfs/nvim-dap-view</title>
      <link>https://github.com/igorlfs/nvim-dap-view</link>
      <description>&lt;p&gt;Visualize debugging sessions in neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-dap-view&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;minimalistic &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; alternative&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/e7d428f2-8361-4407-a4d0-5f3c4f97332e&quot;&gt;https://github.com/user-attachments/assets/e7d428f2-8361-4407-a4d0-5f3c4f97332e&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;br /&gt; &lt;strong&gt;Requires neovim 0.11+&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Via lazy.nvim&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
    {
        &quot;igorlfs/nvim-dap-view&quot;,
        ---@module &#39;dap-view&#39;
        ---@type dapview.Config
        opts = {},
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Watch expressions&lt;/li&gt; 
 &lt;li&gt;Manipulate breakpoints&lt;/li&gt; 
 &lt;li&gt;Navigate in the call stack&lt;/li&gt; 
 &lt;li&gt;Inspect all variables in scope[^1]&lt;/li&gt; 
 &lt;li&gt;REPL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of that in a unified, unintrusive window.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Start a regular debugging session. When desired, you can use &lt;code&gt;:DapViewOpen&lt;/code&gt; to start the plugin. You can switch to another section using the letter outlined in the &lt;code&gt;&#39;winbar&#39;&lt;/code&gt; (e.g., &lt;code&gt;B&lt;/code&gt; for &quot;Breakpoints&quot;). Explore what you can do each section by using &lt;code&gt;g?&lt;/code&gt; to inspect the keymaps.&lt;/p&gt; 
&lt;p&gt;Once you&#39;re done debugging, you can close the plugin with &lt;code&gt;:DapViewClose&lt;/code&gt; and then terminate your session as usual.&lt;/p&gt; 
&lt;p&gt;There&#39;s a lot more you can do: &lt;code&gt;nvim-dap-view&lt;/code&gt; is highly customizable. To learn all the options, commands, tips and tricks, visit the full documentation on the &lt;a href=&quot;https://igorlfs.github.io/nvim-dap-view/home&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;You can contribute in many ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you have any questions, create a &lt;a href=&quot;https://github.com/igorlfs/nvim-dap-view/discussions/new/choose&quot;&gt;discussion&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If something isn&#39;t working, create a &lt;a href=&quot;https://github.com/igorlfs/nvim-dap-view/issues/new?template=bug_report.yml&quot;&gt;bug report&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you have an idea, file a &lt;a href=&quot;https://github.com/igorlfs/nvim-dap-view/issues/new?template=feature_request.yml&quot;&gt;feature request&lt;/a&gt;. You can also go ahead and implement it yourself with a &lt;a href=&quot;https://github.com/igorlfs/nvim-dap-view/compare&quot;&gt;PR&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you have some spare bucks, consider &lt;a href=&quot;https://github.com/sponsors/igorlfs&quot;&gt;sponsoring&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[^1]: using nvim-dap&#39;s widgets&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beyond-all-reason/Beyond-All-Reason</title>
      <link>https://github.com/beyond-all-reason/Beyond-All-Reason</link>
      <description>&lt;p&gt;Main game repository for Beyond All Reason.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beyond-All-Reason&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/discord/225695362004811776&quot; alt=&quot;Discord&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Open source RTS game built on top of the Recoil RTS Engine&lt;/p&gt; 
&lt;h2&gt;Where to download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download&quot;&gt;https://www.beyondallreason.info/download&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How to play&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/guides&quot;&gt;https://www.beyondallreason.info/guides&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development Quick Start&lt;/h2&gt; 
&lt;p&gt;Beyond All Reason (BAR), consists of 2 primary components, the lobby (Chobby - &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby&quot;&gt;https://github.com/beyond-all-reason/BYAR-Chobby&lt;/a&gt;) and the game code itself (this repository).&lt;/p&gt; 
&lt;p&gt;The game runs on top of the Recoil engine &lt;a href=&quot;https://github.com/beyond-all-reason/spring&quot;&gt;https://github.com/beyond-all-reason/spring&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to develop the game (this repository) you first need a working install of the lobby/launcher. There are 2 ways to do this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download#How-To-Install&quot;&gt;Download the full BAR application&lt;/a&gt; from the website and run it. This is probably what you will have done if you have previously installed and played the game.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OR if you want to develop the lobby client, follow &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;the guide in the Chobby README&lt;/a&gt;. First download a &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby/releases&quot;&gt;release of Chobby&lt;/a&gt; and then launch Chobby, this will automatically download and install the engine and other dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once you have a working install of BAR you need a local development copy of the game code to work with. This code will live in the BAR install directory.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;To find the BAR install directory simply open the launcher (not full game) and click the &quot;Open install directory&quot; button. This is one of the 3 buttons (&lt;code&gt;Toggle log&lt;/code&gt; and &lt;code&gt;Upload log&lt;/code&gt; are the other 2). For Windows installs this might be your user&#39;s &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory create the empty file &lt;code&gt;devmode.txt&lt;/code&gt;. E.g: &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data/devmode.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory in the &lt;code&gt;data&lt;/code&gt; folder in the &lt;code&gt;games&lt;/code&gt; sub-directory (create &lt;code&gt;games&lt;/code&gt; if it doesn&#39;t exist) clone the code for this repository into a directory with a name ending in &lt;code&gt;.sdd&lt;/code&gt;. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/beyond-all-reason/Beyond-All-Reason.git BAR.sdd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure that you have the correct path by looking for the file &lt;code&gt;Beyond-All-Reason/data/games/BAR.sdd/modinfo.lua&lt;/code&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Now you have the game code launch the full game from the launcher as normal. Then go to &lt;code&gt;Settings &amp;gt; Developer &amp;gt; Singleplayer&lt;/code&gt; and select &lt;code&gt;Beyond All Reason Dev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch a match normally through the game UI. This match will use the dev copy of the LUA code which is in &lt;code&gt;BAR-install-directory/data/games/BAR.sdd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If developing Chobby also clone the code into the &lt;code&gt;games&lt;/code&gt; directory. Follow the guide in the &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;Chobby README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;More on the &lt;code&gt;.sdd&lt;/code&gt; directory to run raw LUA and the structure expected by Spring Engine is &lt;a href=&quot;https://springrts.com/wiki/Gamedev:Structure&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kylechui/nvim-surround</title>
      <link>https://github.com/kylechui/nvim-surround</link>
      <description>&lt;p&gt;Add/change/delete surrounding delimiter pairs with ease. Written with ❤️ in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-surround&lt;/h1&gt; 
&lt;p&gt;Surround selections, stylishly &lt;span&gt;😎&lt;/span&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;video src=&quot;https://user-images.githubusercontent.com/48545987/178679494-c7d58bdd-d8ca-4802-a01c-a9444b8b882f.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt; 
&lt;/div&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add/delete/change surrounding pairs 
  &lt;ul&gt; 
   &lt;li&gt;Function calls and HTML tags out-of-the-box&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Dot-repeat previous actions&lt;/li&gt; 
 &lt;li&gt;Set buffer-local mappings and surrounds&lt;/li&gt; 
 &lt;li&gt;Jump to the &lt;em&gt;nearest&lt;/em&gt; surrounding pair for modification&lt;/li&gt; 
 &lt;li&gt;Use a single character as an alias for several text-objects 
  &lt;ul&gt; 
   &lt;li&gt;E.g. &lt;code&gt;q&lt;/code&gt; is aliased to &lt;code&gt;`,&#39;,&quot;&lt;/code&gt;, so &lt;code&gt;csqb&lt;/code&gt; replaces the &lt;em&gt;nearest&lt;/em&gt; set of quotes with parentheses&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Surround using powerful pairs that depend on user input&lt;/li&gt; 
 &lt;li&gt;Modify custom surrounds 
  &lt;ul&gt; 
   &lt;li&gt;First-class support for Vim motions, Lua patterns, and Tree-sitter nodes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Highlight selections for visual feedback&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🔒&lt;/span&gt; Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;Neovim 0.8+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[Recommended] If &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&quot;&gt;nvim-treesitter-textobjects&lt;/a&gt; is installed, then Tree-sitter text-objects can be used to define surrounds, simplifying configuration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;📦&lt;/span&gt; Installation&lt;/h2&gt; 
&lt;p&gt;Install this plugin using your favorite plugin manager, and then call &lt;code&gt;require(&quot;nvim-surround&quot;).setup()&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;kylechui/nvim-surround&quot;,
    version = &quot;^3.0.0&quot;, -- Use for stability; omit to use `main` branch for the latest features
    event = &quot;VeryLazy&quot;,
    config = function()
        require(&quot;nvim-surround&quot;).setup({
            -- Configuration here, or leave empty to use defaults
        })
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
    &quot;kylechui/nvim-surround&quot;,
    tag = &quot;*&quot;, -- Use for stability; omit to use `main` branch for the latest features
    config = function()
        require(&quot;nvim-surround&quot;).setup({
            -- Configuration here, or leave empty to use defaults
        })
    end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Usage&lt;/h2&gt; 
&lt;p&gt;The three &quot;core&quot; operations of &lt;code&gt;add&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt;/&lt;code&gt;change&lt;/code&gt; can be done with the keymaps &lt;code&gt;ys{motion}{char}&lt;/code&gt;, &lt;code&gt;ds{char}&lt;/code&gt;, and &lt;code&gt;cs{target}{replacement}&lt;/code&gt;, respectively. For the following examples, &lt;code&gt;*&lt;/code&gt; will denote the cursor position:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-help&quot;&gt;    Old text                    Command         New text
--------------------------------------------------------------------------------
    surr*ound_words             ysiw)           (surround_words)
    *make strings               ys$&quot;            &quot;make strings&quot;
    [delete ar*ound me!]        ds]             delete around me!
    remove &amp;lt;b&amp;gt;HTML t*ags&amp;lt;/b&amp;gt;    dst             remove HTML tags
    &#39;change quot*es&#39;            cs&#39;&quot;            &quot;change quotes&quot;
    &amp;lt;b&amp;gt;or tag* types&amp;lt;/b&amp;gt;        csth1&amp;lt;CR&amp;gt;       &amp;lt;h1&amp;gt;or tag types&amp;lt;/h1&amp;gt;
    delete(functi*on calls)     dsf             function calls
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Detailed information on how to use this plugin can be found in &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&quot;&gt;&lt;code&gt;:h nvim-surround.usage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Configuration&lt;/h2&gt; 
&lt;p&gt;The default configuration is found &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/lua/nvim-surround/config.lua&quot;&gt;here&lt;/a&gt;. Simply call &lt;code&gt;require(&quot;nvim-surround&quot;).setup&lt;/code&gt; or &lt;code&gt;require(&quot;nvim-surround&quot;).buffer_setup&lt;/code&gt; with the desired options.&lt;/p&gt; 
&lt;p&gt;More information on how to configure this plugin can be found in &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/doc/nvim-surround.txt&quot;&gt;&lt;code&gt;:h nvim-surround.configuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/kylechui/nvim-surround/raw/main/CONTRIBUTING.md&quot;&gt;the contributing file&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Shoutouts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;vim-surround&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.surround&quot;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Like this project? Give it a &lt;span&gt;⭐&lt;/span&gt; to show your support!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ravitemer/mcphub.nvim</title>
      <link>https://github.com/ravitemer/mcphub.nvim</link>
      <description>&lt;p&gt;An MCP client for Neovim that seamlessly integrates MCP servers into your editing workflow with an intuitive interface for managing, testing, and using MCP servers with your favorite chat plugins.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://www.warp.dev/mcp-hub-nvim&quot;&gt; &lt;img alt=&quot;Warp sponsorship&quot; src=&quot;https://github.com/user-attachments/assets/fae9c70d-51de-43fa-af65-c82228ba67f9&quot; /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.warp.dev/mcp-hub-nvim&quot;&gt;The Intelligent Terminal&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.warp.dev/mcp-hub-nvim&quot;&gt;Run mcphub.nvim in Warp today&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;h1&gt; &lt;img width=&quot;28px&quot; style=&quot;display:inline;&quot; src=&quot;https://github.com/user-attachments/assets/5cdf9d69-3de7-458b-a670-5153a97c544a&quot; /&gt; MCP HUB&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.lua.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Lua-2C2D72?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=white&quot; alt=&quot;Lua&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://nixos.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/NixOS-5277C3?style=flat-square&amp;amp;logo=nixos&amp;amp;logoColor=white&quot; alt=&quot;NixOS&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/NTqfxXsNuN&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Join-7289DA?style=flat-square&amp;amp;logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;MCP Hub is a MCP client for neovim that seamlessly integrates &lt;a href=&quot;https://modelcontextprotocol.io/&quot;&gt;MCP (Model Context Protocol)&lt;/a&gt; servers into your editing workflow. It provides an intuitive interface for managing, testing, and using MCP servers with your favorite chat plugins.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7c299fbd-4820-4065-8b07-50db66179d3d&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;💜 Sponsors&lt;/h2&gt; 
&lt;!-- sponsors --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CryogenicPlanet&quot;&gt;&lt;img src=&quot;https://github.com/CryogenicPlanet.png&quot; width=&quot;50px&quot; alt=&quot;CryogenicPlanet&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris&quot;&gt;&lt;img src=&quot;https://github.com/olimorris.png&quot; width=&quot;50px&quot; alt=&quot;Oli Morris&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/supermemoryai&quot;&gt;&lt;img src=&quot;https://github.com/supermemoryai.png&quot; width=&quot;50px&quot; alt=&quot;Super Memory&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/yingmanwumen&quot;&gt;&lt;img src=&quot;https://github.com/yingmanwumen.png&quot; width=&quot;50px&quot; alt=&quot;yingmanwumen&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/yetone&quot;&gt;&lt;img src=&quot;https://github.com/yetone.png&quot; width=&quot;50px&quot; alt=&quot;Yetone&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/omarcresp&quot;&gt;&lt;img src=&quot;https://github.com/omarcresp.png&quot; width=&quot;50px&quot; alt=&quot;omarcresp&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/petermoser&quot;&gt;&lt;img src=&quot;https://github.com/petermoser.png&quot; width=&quot;50px&quot; alt=&quot;petermoser&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/watsy0007&quot;&gt;&lt;img src=&quot;https://github.com/watsy0007.png&quot; width=&quot;50px&quot; alt=&quot;watsy0007&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kohane27&quot;&gt;&lt;img src=&quot;https://github.com/kohane27.png&quot; width=&quot;50px&quot; alt=&quot;kohane27&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/copleykj&quot;&gt;&lt;img src=&quot;https://github.com/copleykj.png&quot; width=&quot;50px&quot; alt=&quot;Kelly Copley&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nom-social&quot;&gt;&lt;img src=&quot;https://github.com/nom-social.png&quot; width=&quot;50px&quot; alt=&quot;Nom Social&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- sponsors --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;Special thanks to:&lt;/b&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://dub.sh/composio-mcp&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://ravitemer.github.io/mcphub.nvim/sponsors/composio-logo.png&quot; height=&quot;60px&quot; alt=&quot;Composio.dev logo&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://vapi.ai&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/32b4d458-b2d1-484d-b096-dfb083b44c2c&quot; height=&quot;60px&quot; alt=&quot;Vapi logo&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Category&lt;/th&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Support&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/server&quot;&gt;&lt;strong&gt;Capabilities&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Tools&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Full support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;🔔 Tool List Changed&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Real-time updates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Resources&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Full support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;🔔 Resource List Changed&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Real-time updates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Resource Templates&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;URI templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Prompts&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Full support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;🔔 Prompts List Changed&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Real-time updates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Roots&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;Not supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Sampling&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;Not supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;MCP Server Transports&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#streamable-http&quot;&gt;Streamable-HTTP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Primary transport protocol for remote servers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#backwards-compatibility&quot;&gt;SSE&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Fallback transport for remote servers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#stdio&quot;&gt;STDIO&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;For local servers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Authentication for remote servers&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;OAuth&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;With PKCE flow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Headers&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;For API keys/tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Chat Integration&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim&quot;&gt;Avante.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Tools, resources, resourceTemplates, prompts(as slash_commands)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;CodeCompanion.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Tools, resources, templates, prompts (as slash_commands), 🖼 image responses&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;CopilotChat.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Tools, resources, function calling support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Marketplace&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Server Discovery&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Browse from verified MCP servers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Installation&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Manual and auto install with AI&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Universal &lt;code&gt;${}&lt;/code&gt; Syntax&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Environment variables and command execution across all fields&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;VS Code Compatibility&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Support for &lt;code&gt;servers&lt;/code&gt; key, &lt;code&gt;${env:}&lt;/code&gt;, &lt;code&gt;${input:}&lt;/code&gt;, predefined variables&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;JSON5 Support&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Comments and trailing commas via &lt;a href=&quot;https://github.com/Joakker/lua-json5&quot;&gt;&lt;code&gt;lua-json5&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Workspace Management&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Project-Local Configs&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Automatic detection and merging with global config&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Smart File-watching&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Smart updates with config file watching&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Multi-instance&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;All neovim instances stay in sync&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Shutdown-delay&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Can run as systemd service with configure delay before stopping the hub&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Lua Native MCP Servers&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Write once , use everywhere. Can write tools, resources, prompts directly in lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Dev Mode&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Hot reload MCP servers on file changes for development&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🎥 Demos&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h4&gt;MCP Hub + &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;CodeCompanion&lt;/a&gt; + Github &lt;/h4&gt; 
 &lt;p&gt; 
  &lt;video muted controls src=&quot;https://github.com/user-attachments/assets/1a10ad50-5832-4627-bcc3-be49e7941105&quot;&gt;&lt;/video&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;MCP Hub + &lt;a href=&quot;https://github.com/yetone/avante.nvim&quot;&gt;Avante&lt;/a&gt; + Figma &lt;/h4&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/e33fb5c3-7dbd-40b2-bec5-471a465c7f4d&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href=&quot;https://ravitemer.github.io/mcphub.nvim/&quot;&gt;documentation site&lt;/a&gt; for detailed guides and examples&lt;/p&gt; 
&lt;h2&gt;👋 Get Help&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://ravitemer.github.io/mcphub.nvim/troubleshooting&quot;&gt;Troubleshooting guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href=&quot;https://discord.gg/NTqfxXsNuN&quot;&gt;Discord server&lt;/a&gt; for discussions, help, and updates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🎁&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://raw.githubusercontent.com/ravitemer/mcphub.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🚧 TODO&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Neovim MCP Server (kind of) with better editing, diffs, terminal integration etc (Ideas are welcome)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Enhanced help view with comprehensive documentation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; MCP Resources as variables in chat plugins&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; MCP Prompts as slash commands in chat plugins&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Enable LLM to start and stop MCP Servers dynamically&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support SSE transport&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support /slash_commands in avante&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support streamable-http transport&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support OAuth&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Add types&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Better Docs&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Add tests&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Support #variables in avante&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;👏 Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; for inspiring our text highlighting utilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ravitemer/mcp-registry&quot;&gt;ravitemer/mcp-registry&lt;/a&gt; for providing the marketplace api&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mrcjkb/rustaceanvim</title>
      <link>https://github.com/mrcjkb/rustaceanvim</link>
      <description>&lt;p&gt;🦀 Supercharge your Rust experience in Neovim! A heavily modified fork of rust-tools.nvim&lt;/p&gt;&lt;hr&gt;&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/rustaceanvim.svg?sanitize=true&quot; alt=&quot;rustaceanvim&quot; /&gt; &lt;/a&gt; 
 &lt;p align=&quot;center&quot;&gt; &lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&quot;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/issues/new?assignees=&amp;amp;labels=bug&amp;amp;projects=&amp;amp;template=bug_report.yml&quot;&gt;Report Bug&lt;/a&gt; · &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=ideas&quot;&gt;Request Feature&lt;/a&gt; · &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=q-a&quot;&gt;Ask Question&lt;/a&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;strong&gt; Supercharge your Rust experience in &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;!&lt;br /&gt; A heavily modified fork of &lt;a href=&quot;https://github.com/simrat39/rust-tools.nvim&quot;&gt;rust-tools.nvim&lt;/a&gt;&lt;br /&gt; &lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt;🦀&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&quot; alt=&quot;Neovim&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.lua.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&quot; alt=&quot;Lua&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Rust-000000?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&quot; alt=&quot;Rust&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://nixos.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/nix-0175C2?style=for-the-badge&amp;amp;logo=NixOS&amp;amp;logoColor=white&quot; alt=&quot;Nix&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/mrcjkb/rustaceanvim.svg?style=for-the-badge&quot; alt=&quot;GPL2 License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/mrcjkb/rustaceanvim.svg?style=for-the-badge&quot; alt=&quot;Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/actions/workflows/nix-build.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/mrcjkb/rustaceanvim/nix-build.yml?style=for-the-badge&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://luarocks.org/modules/MrcJkb/rustaceanvim&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/MrcJkb/rustaceanvim?logo=lua&amp;amp;color=purple&amp;amp;style=for-the-badge&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Just works. &lt;a href=&quot;https://mrcjkb.dev/posts/2023-08-22-setup.html&quot;&gt;No need to call &lt;code&gt;setup&lt;/code&gt;!&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;No dependency on &lt;code&gt;lspconfig&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Lazy initialization by design.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#pencil-prerequisites&quot;&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#inbox_tray-installation&quot;&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#zap-quick-setup&quot;&gt;&lt;span&gt;⚡&lt;/span&gt; Quick setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&quot;&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#stethoscope-troubleshooting&quot;&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#left_speech_bubble-faq&quot;&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/122&quot;&gt;&lt;span&gt;🚣&lt;/span&gt; Migrating from rust-tools&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;❔&lt;/span&gt; Do I need rustaceanvim&lt;/h2&gt; 
&lt;p&gt;If you are starting out with Rust, Neovim&#39;s built-in LSP client API (see &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;&lt;code&gt;:h lsp&lt;/code&gt;&lt;/a&gt;) or &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; is probably enough for you. It provides the lowest common denominator of LSP support. This plugin is for those who would like &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;additional non-standard features&lt;/a&gt; that are specific to rust-analyzer.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/h2&gt; 
&lt;h3&gt;Required&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rust-analyzer.github.io/&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;For versions that are compatible with older Neovim versions, see previous major version bumps in &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/CHANGELOG.md&quot;&gt;the changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Optional&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://graphviz.org/doc/info/lang.html&quot;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;, for crate graphs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/&quot;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;, required for Cargo projects.&lt;/li&gt; 
 &lt;li&gt;A debug adapter (e.g. &lt;a href=&quot;https://lldb.llvm.org/&quot;&gt;&lt;code&gt;lldb&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/vadimcn/codelldb&quot;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;) and &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;, required for debugging.&lt;/li&gt; 
 &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;, which also provides highlights, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/nvim-neorocks/rocks.nvim&quot;&gt;&lt;code&gt;rocks.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Rocks install rustaceanvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &#39;mrcjkb/rustaceanvim&#39;,
  version = &#39;^6&#39;, -- Recommended
  lazy = false, -- This plugin is already lazy
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;It is suggested to pin to tagged releases if you would like to avoid breaking changes.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To manually generate documentation, use &lt;code&gt;:helptags ALL&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Nix&lt;/h3&gt; 
&lt;p&gt;For Nix users with flakes enabled, this project provides outputs in the form of a package and an overlay. It is also available in &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Look at the configuration information below to get started.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick Setup&lt;/h2&gt; 
&lt;p&gt;This plugin automatically configures the &lt;code&gt;rust-analyzer&lt;/code&gt; builtin LSP client and integrates with other Rust tools. See the &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;Usage / Features&lt;/a&gt; section for more info.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;Do not call the &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; setup or set up the LSP client for &lt;code&gt;rust-analyzer&lt;/code&gt; manually, as doing so may cause conflicts.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is a filetype plugin that works out of the box, so there is no need to call a &lt;code&gt;setup&lt;/code&gt; function or configure anything to get this plugin working.&lt;/p&gt; 
&lt;p&gt;You will most likely want to add some keymaps. Most keymaps are only useful in rust files, so I suggest you define them in &lt;code&gt;~/.config/nvim/after/ftplugin/rust.lua&lt;/code&gt;[^1]&lt;/p&gt; 
&lt;p&gt;[^1]: See &lt;a href=&quot;https://neovim.io/doc/user/starting.html#base-directories&quot;&gt;&lt;code&gt;:help base-directories&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local bufnr = vim.api.nvim_get_current_buf()
vim.keymap.set(
  &quot;n&quot;, 
  &quot;&amp;lt;leader&amp;gt;a&quot;, 
  function()
    vim.cmd.RustLsp(&#39;codeAction&#39;) -- supports rust-analyzer&#39;s grouping
    -- or vim.lsp.buf.codeAction() if you don&#39;t want grouping.
  end,
  { silent = true, buffer = bufnr }
)
vim.keymap.set(
  &quot;n&quot;, 
  &quot;K&quot;,  -- Override Neovim&#39;s built-in hover keymap with rustaceanvim&#39;s hover actions
  function()
    vim.cmd.RustLsp({&#39;hover&#39;, &#39;actions&#39;})
  end,
  { silent = true, buffer = bufnr }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For more LSP related keymaps, &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig#suggested-configuration&quot;&gt;see the &lt;code&gt;nvim-lspconfig&lt;/code&gt; suggestions&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;If you want to share keymaps with &lt;code&gt;nvim-lspconfig&lt;/code&gt;, you can also use the &lt;code&gt;vim.g.rustaceanvim.server.on_attach&lt;/code&gt; function, or an &lt;code&gt;LspAttach&lt;/code&gt; autocommand.&lt;/li&gt; 
  &lt;li&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&quot;&gt;Advanced configuration&lt;/a&gt; section or &lt;code&gt;:h rustaceanvim.config&lt;/code&gt; for more configuration options.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; in &lt;code&gt;after/ftplugin/rust.lua&lt;/code&gt;, as the file is sourced after the plugin is initialized.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/h2&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Debugging&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;debuggables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] debuggables {args[]}?
:RustLsp[!] debug {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;debug&#39;)
vim.cmd.RustLsp(&#39;debuggables&#39;)
-- or, to run the previous debuggable:
vim.cmd.RustLsp { &#39;debuggables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;debuggables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last debuggable.&lt;/p&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt; (Please read the plugin&#39;s documentation).&lt;/li&gt; 
  &lt;li&gt;A debug adapter (e.g. &lt;a href=&quot;https://lldb.llvm.org/resources/lldbdap&quot;&gt;&lt;code&gt;lldb-dap&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/vadimcn/codelldb&quot;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;By default, this plugin will silently attempt to autoload &lt;code&gt;nvim-dap&lt;/code&gt; configurations when the LSP client attaches. You can call them with &lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; or &lt;code&gt;:DapContinue&lt;/code&gt; once they have been loaded. The feature can be disabled by setting &lt;code&gt;vim.g.rustaceanvim.dap.autoload_configurations = false&lt;/code&gt;.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;:RustLsp debuggables&lt;/code&gt; will only load debug configurations created by &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; will load all Rust debug configurations, including those specified in a &lt;code&gt;.vscode/launch.json&lt;/code&gt; (see &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/raw/9adbfdca13afbe646d09a8d7a86d5d031fb9c5a5/doc/dap.txt#L316&quot;&gt;&lt;code&gt;:h dap-launch.json&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
  &lt;li&gt;Note that rustaceanvim may only be able to load DAP configurations when rust-analyzer has finished initializing (which may be after the client attaches, in large projects). This means that the DAP configurations may not be loaded immediately upon startup.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/ce17d228-ae0a-416a-8159-fe095a85dcb7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Runnables&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;runnables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;run&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] runnables {args[]}?
:RustLsp[!] run {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;run&#39;) 
vim.cmd.RustLsp(&#39;runnables&#39;)
-- or, to run the previous runnable:
vim.cmd.RustLsp { &#39;runnables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;runnables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last runnable.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/95183192-5669-4a07-804b-83f67831be57&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Testables and failed test diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;If you set the &lt;code&gt;vim.g.rustaceanvim.tools.test_executor&lt;/code&gt; option to &lt;code&gt;&#39;background&#39;&lt;/code&gt;, this plugin will run tests in the background, parse the results, and - if possible - display failed tests as diagnostics.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] testables {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;testables&#39;)
-- or, to run the previous testables:
vim.cmd.RustLsp { &#39;testables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;testables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last testable.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b3639b7a-105e-49de-9bdc-9c88e8e508a2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Neotest integration&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;This plugin provides a &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; adapter, which you can add to neotest as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;neotest&#39;).setup {
    -- ...,
    adapters = {
      -- ...,
      require(&#39;rustaceanvim.neotest&#39;)
    },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: If you use rustaceanvim&#39;s neotest adapter, do not add &lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;neotest-rust&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Here is a comparison between rustaceanvim&#39;s adapter and neotest-rust:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
    &lt;th align=&quot;left&quot;&gt;rustaceanvim&lt;/th&gt; 
    &lt;th align=&quot;left&quot;&gt;neotest-rust&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Test discovery&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;rust-analyzer (LSP)&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;tree-sitter&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Command construction&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;rust-analyzer (LSP)&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;tree-sitter&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;DAP strategy&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;Automatic DAP detection (reuses &lt;code&gt;debuggables&lt;/code&gt;); overridable with &lt;code&gt;vim.g.rustaceanvim.dap&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;Defaults to &lt;code&gt;codelldb&lt;/code&gt;; manual configuration&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Test runner&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;cargo&lt;/code&gt; or &lt;code&gt;cargo-nextest&lt;/code&gt;, if detected&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;If you configure rustaceanvim to use neotest, the &lt;code&gt;tools.test_executor&lt;/code&gt; will default to using neotest for &lt;code&gt;testables&lt;/code&gt; and &lt;code&gt;runnables&lt;/code&gt; that are tests.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b734fdb6-3c8a-492b-9b39-bb238d7cd7b1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Expand macros recursively&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp expandMacro
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;expandMacro&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/477d9e58-74b0-42ff-87ca-2fef34d06db3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Rebuild proc macros&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp rebuildProcMacros
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;rebuildProcMacros&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Move item up/down&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp moveItem {up|down}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;up&#39; }
vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;down&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Grouped code actions&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Sometimes, rust-analyzer groups code actions by category, which is not supported by Neovim&#39;s built-in &lt;code&gt;vim.lsp.buf.codeAction&lt;/code&gt;. This plugin provides a command with a UI that does:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp codeAction
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;codeAction&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you set the option &lt;code&gt;vim.g.rustaceanvim.tools.code_actions.ui_select_fallback&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), it will fall back to &lt;code&gt;vim.ui.select&lt;/code&gt; if there are no grouped code actions.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/866d3cb1-8e56-4380-8c03-812386441f47&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Hover actions&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Note: To activate hover actions, run the command twice. This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your config and you will automatically enter the hover actions window.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp hover actions
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;actions&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can invoke a hover action by switching to the hover window and entering &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on the respective line, or with a keymap for the &lt;code&gt;&amp;lt;Plug&amp;gt;RustHoverAction&lt;/code&gt; mapping, which accepts a &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; prefix as the (1-based) index of the hover action to invoke.&lt;/p&gt; 
 &lt;p&gt;For example, if you set the following keymap:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;a&#39;, &#39;&amp;lt;Plug&amp;gt;RustHoverAction&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;you can invoke the third hover action with &lt;code&gt;3&amp;lt;space&amp;gt;a&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c7b6c730-4439-47b0-9a75-7ea4e6831f7a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Hover range&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp hover range
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;range&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Explain errors&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Display a hover window with explanations from the &lt;a href=&quot;https://doc.rust-lang.org/error_codes/error-index.html&quot;&gt;rust error codes index&lt;/a&gt; over error diagnostics (if they have an error code).&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp explainError {cycle?|cycle_prev?|current?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;explainError&#39;) -- default to &#39;cycle&#39;
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;cycle&#39; })
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;cycle_prev&#39; })
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;current&#39; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;explainError&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with an error code.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle_prev&lt;/code&gt;: Like &lt;code&gt;vim.diagnostic.goto_prev&lt;/code&gt;, searches backwards for a diagnostic with an error code.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/bac9b31c-22ca-40c4-bfd3-b8c5ba4cc49a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Render diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Display a hover window with the rendered diagnostic, as displayed during &lt;code&gt;cargo build&lt;/code&gt;. Useful for solving bugs around borrowing and generics, as it consolidates the important bits (sometimes across files) together.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp renderDiagnostic {cycle?|cycle_prev?|current?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;renderDiagnostic&#39;) -- defaults to &#39;cycle&#39;
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;cycle&#39; })
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;cycle_prev&#39; })
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;current&#39; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;renderDiagnostic&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with rendered data.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle_prev&lt;/code&gt;: Like &lt;code&gt;vim.diagnostic.goto_prev&lt;/code&gt;, searches backwards for a diagnostic with rendered data.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/a972c6b6-c504-4c2a-8380-53451bb8c2de&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Jump to related diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Sometimes, rust-analyzer provides related diagnostics in multiple locations. Using the &lt;code&gt;relatedDiagnostics&lt;/code&gt; subcommand, you can navigate between them. If a diagnostic has more than one related diagnostic, this will populate the quickfix list.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp relatedDiagnostics
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;relatedDiagnostics&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/26695f41-2d9d-4250-82fa-fea867fd9432&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Open Cargo.toml&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp openCargo
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;openCargo&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Open docs.rs documentation&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Open docs.rs documentation for the symbol under the cursor.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp openDocs
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;openDocs&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Parent Module&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp parentModule
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;parentModule&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Filtered workspace symbol searches&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;rust-analyzer supports filtering workspace symbol searches.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] workspaceSymbol {onlyTypes?|allSymbols?} {query?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;workspaceSymbol&#39;)
-- or
vim.cmd.RustLsp { 
  &#39;workspaceSymbol&#39;, 
  &#39;&amp;lt;onlyTypes|allSymbols&amp;gt;&#39; --[[ optional ]], 
  &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]], 
  bang = true --[[ optional ]]
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will include dependencies in the search.&lt;/li&gt; 
  &lt;li&gt;You can also influence the behaviour of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.workspace_symbol()&quot;&gt;&lt;code&gt;vim.lsp.buf.workspace_symbol()&lt;/code&gt;&lt;/a&gt; by setting the rust-analyzer &lt;code&gt;workspace.symbol.search&lt;/code&gt; server option.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Join lines&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces. Works with individual lines in normal mode and multiple lines in visual mode.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp joinLines
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;joinLines&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Structural search replace&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Searches the entire buffer in normal mode.&lt;/li&gt; 
  &lt;li&gt;Searches the selection in visual mode.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp ssr {query}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;ssr&#39;, &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]] }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b61fbc56-ab53-48e6-bfdd-eb8d4de28795&quot; alt=&quot;tty&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View crate graph&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp crateGraph {backend {output}}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;crateGraph&#39;, &#39;[backend]&#39;, &#39;[output]&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://graphviz.org/doc/info/lang.html&quot;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View syntax tree&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Requires rust-analyzer &amp;gt;= 2025-01-20.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp syntaxTree
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;syntaxTree&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c865a263-1568-41c7-a32b-bc4a34b198dc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Fly check&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Run &lt;code&gt;cargo check&lt;/code&gt; or another compatible command (f.x. &lt;code&gt;clippy&lt;/code&gt;) in a background thread and provide LSP diagnostics based on the output of the command.&lt;/p&gt; 
 &lt;p&gt;Useful in large projects where running &lt;code&gt;cargo check&lt;/code&gt; on each save can be costly.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp flyCheck {run?|clear?|cancel?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;flyCheck&#39;) -- defaults to &#39;run&#39;
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;run&#39; }
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;clear&#39; }
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;cancel&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE]&lt;/p&gt; 
  &lt;p&gt;This is only useful if you set the option, &lt;code&gt;[&#39;rust-analzyer&#39;].checkOnSave = false&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View HIR / MIR&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Opens a buffer with a textual representation of the HIR or MIR of the function containing the cursor. Useful for debugging or when working on rust-analyzer itself.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp view {hir|mir}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;view&#39;, &#39;hir&#39; }
vim.cmd.RustLsp { &#39;view&#39;, &#39;mir&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Rustc unpretty&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Opens a buffer with a textual representation of the MIR or others things, of the function closest to the cursor. Achieves an experience similar to Rust Playground.&lt;/p&gt; 
 &lt;p&gt;NOTE: This currently requires a tree-sitter parser for Rust, and a nightly compiler toolchain.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Rustc unpretty {hir|mir|...}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.Rustc { &#39;unpretty&#39;, &#39;hir&#39; }
vim.cmd.Rustc { &#39;unpretty&#39;, &#39;mir&#39; }
-- ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;ra-multiplex&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;On Linux and MacOS, rustaceanvim can auto-detect and connect to a running &lt;a href=&quot;https://github.com/pr2502/ra-multiplex&quot;&gt;ra-multiplex&lt;/a&gt; server. By default, it will try to do so automatically if the &lt;code&gt;vim.g.rustaceanvim.server.cmd&lt;/code&gt; option is unset. See also &lt;code&gt;:h rustaceanvim.ra_multiplex&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Configure rust-analyzer on the fly&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;You can configure rust-analyzer on the fly using the &lt;code&gt;:RustAnalyzer config&lt;/code&gt; subcommand. The command takes a Lua table as an argument (it does not validate it!).&lt;/p&gt; 
 &lt;p&gt;For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustAnalyzer config { checkOnSave = false }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustAnalyzer { &#39;config&#39;, &#39;{ checkOnSave = false }&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See also: &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/h2&gt; 
&lt;p&gt;To modify the default configuration, set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&quot;&gt;&lt;code&gt;:h rustaceanvim&lt;/code&gt;&lt;/a&gt; for a detailed documentation of all available configuration options. You may need to run &lt;code&gt;:helptags ALL&lt;/code&gt; if the documentation has not been installed.&lt;/li&gt; 
 &lt;li&gt;The default configuration &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/lua/rustaceanvim/config/internal.lua&quot;&gt;can be found here (see &lt;code&gt;RustaceanDefaultConfig&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For detailed descriptions of the language server configs, see the &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You only need to specify the keys that you want to be changed, because defaults are applied for keys that are not provided.&lt;/p&gt; 
&lt;p&gt;Example config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.rustaceanvim = {
  -- Plugin configuration
  tools = {
  },
  -- LSP configuration
  server = {
    on_attach = function(client, bufnr)
      -- you can also put keymaps in here
    end,
    default_settings = {
      -- rust-analyzer language server configuration
      [&#39;rust-analyzer&#39;] = {
      },
    },
  },
  -- DAP configuration
  dap = {
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; can also be a function that returns a table.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;You can also use &lt;code&gt;:h vim.lsp.config&lt;/code&gt; to configure &lt;code&gt;vim.g.rustaceanvim.server&lt;/code&gt; options. For example, &lt;code&gt;vim.lsp.config(&quot;*&quot;, {})&lt;/code&gt; or &lt;code&gt;vim.lsp.config(&quot;rust-analyzer&quot;, {})&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Using &lt;code&gt;codelldb&lt;/code&gt; for debugging&lt;/h3&gt; 
&lt;p&gt;For Rust, &lt;code&gt;codelldb&lt;/code&gt; from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&quot;&gt;CodeLLDB VSCode extension&lt;/a&gt; provides a better experience than &lt;code&gt;lldb&lt;/code&gt;. If you are using a distribution that lets you install the &lt;code&gt;codelldb&lt;/code&gt; executable, this plugin will automatically detect it and configure itself to use it as a debug adapter.&lt;/p&gt; 
&lt;p&gt;Some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NixOS: &lt;a href=&quot;https://github.com/NixOS/nixpkgs/raw/nixos-unstable/pkgs/applications/editors/vscode/extensions/vadimcn.vscode-lldb/default.nix#L134&quot;&gt;&lt;code&gt;vscode-extensions.vadimcn.vscode-lldb.adapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;This repository&#39;s Nix flake provides a &lt;code&gt;codelldb&lt;/code&gt; package.&lt;/li&gt; 
 &lt;li&gt;Arch Linux: &lt;a href=&quot;https://aur.archlinux.org/packages/codelldb-bin&quot;&gt;&lt;code&gt;codelldb-bin&lt;/code&gt; (AUR)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Using &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;:MasonInstall codelldb&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If your distribution does not have a &lt;code&gt;codelldb&lt;/code&gt; package, you can configure it as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&quot;&gt;CodeLLDB VSCode extension&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out where it is installed. On Linux, this is typically in &lt;code&gt;$HOME/.vscode/extensions/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Update your configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.rustaceanvim = function()
  -- Update this path
  local extension_path = vim.env.HOME .. &#39;/.vscode/extensions/vadimcn.vscode-lldb-1.10.0/&#39;
  local codelldb_path = extension_path .. &#39;adapter/codelldb&#39;
  local liblldb_path = extension_path .. &#39;lldb/lib/liblldb&#39;
  local this_os = vim.uv.os_uname().sysname;

  -- The path is different on Windows
  if this_os:find &quot;Windows&quot; then
    codelldb_path = extension_path .. &quot;adapter\\codelldb.exe&quot;
    liblldb_path = extension_path .. &quot;lldb\\bin\\liblldb.dll&quot;
  else
    -- The liblldb extension is .so for Linux and .dylib for MacOS
    liblldb_path = liblldb_path .. (this_os == &quot;Linux&quot; and &quot;.so&quot; or &quot;.dylib&quot;)
  end

  local cfg = require(&#39;rustaceanvim.config&#39;)
  return {
    dap = {
      adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),
    },
  }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How to dynamically load different &lt;code&gt;rust-analyzer&lt;/code&gt; settings per project&lt;/h3&gt; 
&lt;p&gt;By default, this plugin will look for a &lt;code&gt;.vscode/settings.json&lt;/code&gt;[^2] file and attempt to load it. If the file does not exist, or it can&#39;t be decoded, the &lt;code&gt;server.default_settings&lt;/code&gt; will be used.&lt;/p&gt; 
&lt;p&gt;[^2]: See &lt;a href=&quot;https://github.com/rust-analyzer/rust-project.json-example/raw/master/.vscode/settings.json&quot;&gt;this example&lt;/a&gt; and the rust-analyzer &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;configuration manual&lt;/a&gt;. Note that JSON5 is currently not supported by Neovim.&lt;/p&gt; 
&lt;p&gt;Another option is to use &lt;code&gt;:h exrc&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Health checks&lt;/h3&gt; 
&lt;p&gt;For a health check, run &lt;code&gt;:checkhealth rustaceanvim&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; log file&lt;/h3&gt; 
&lt;p&gt;To open the &lt;code&gt;rust-analyzer&lt;/code&gt; log file, run &lt;code&gt;:RustLsp logFile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Minimal config&lt;/h3&gt; 
&lt;p&gt;To troubleshoot this plugin with a minimal config in a temporary directory, you can try &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/troubleshooting/minimal.lua&quot;&gt;minimal.lua&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;nvim -u minimal.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you use Nix, you can run &lt;code&gt;nix run &quot;github:mrcjkb/rustaceanvim#nvim-minimal-stable&quot;&lt;/code&gt;. or &lt;code&gt;nix run &quot;github:mrcjkb/rustaceanvim#nvim-minimal-nightly&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you cannot reproduce your issue with a minimal config, it may be caused by another plugin, or a setting of your plugin manager. In this case, add additional plugins and configurations to &lt;code&gt;minimal.lua&lt;/code&gt;, until you can reproduce it.&lt;/p&gt; 
&lt;h3&gt;rust-analyzer troubleshooting&lt;/h3&gt; 
&lt;p&gt;For issues related to rust-analyzer (e.g. LSP features not working), see also &lt;a href=&quot;https://rust-analyzer.github.io/book/troubleshooting.html&quot;&gt;the rust-analyzer troubleshooting guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/h3&gt; 
&lt;h4&gt;Where are inlay hints / type hints?&lt;/h4&gt; 
&lt;p&gt;As Neovim &amp;gt;= 0.10 supports inlay hints natively, I have removed the code from this plugin. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-inlay_hint&quot;&gt;&lt;code&gt;:h lsp-inlay_hint&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;h4&gt;Can I display inlay hints to the end of the line?&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;a href=&quot;https://github.com/chrisgrieser/nvim-lsp-endhints&quot;&gt;&lt;code&gt;nvim-lsp-endhints&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; 
&lt;h4&gt;How to enable auto completion?&lt;/h4&gt; 
&lt;p&gt;As of &lt;a href=&quot;https://github.com/neovim/neovim/pull/27339&quot;&gt;#ff097f2091e7a970e5b12960683b4dade5563040&lt;/a&gt;, Neovim has built-in completion based on the &lt;code&gt;triggerCharacters&lt;/code&gt; sent by language servers. Omni completion is also available for a more traditional &lt;code&gt;vim&lt;/code&gt;-like completion experience.&lt;/p&gt; 
&lt;p&gt;For more extensible and complex autocompletion setups, you need a plugin such as &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/a&gt; and a LSP completion source like &lt;a href=&quot;https://github.com/hrsh7th/cmp-nvim-lsp&quot;&gt;&lt;code&gt;cmp-nvim-lsp&lt;/code&gt;&lt;/a&gt;, or you may use &lt;a href=&quot;https://github.com/saghen/blink.cmp&quot;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;I&#39;m having issues with (auto)completion&lt;/h4&gt; 
&lt;p&gt;rustaceanvim doesn&#39;t implement (auto)completion. Issues with (auto)completion either come from another plugin or rust-analzyer.&lt;/p&gt; 
&lt;h4&gt;mason.nvim and nvim-lspconfig&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/mason.txt&quot;&gt;&lt;code&gt;:h rustaceanvim.mason&lt;/code&gt;&lt;/a&gt; for details about troubleshooting mason.nvim and nvim-lspconfig issues, or configuring rustaceanvim to use a rust-analyzer installation that is managed by mason.nvim.&lt;/p&gt; 
&lt;h4&gt;I am not seeing diagnostics in a standalone file&lt;/h4&gt; 
&lt;p&gt;rust-analyzer has limited support for standalone files. Many diagnostics come from Cargo. If you&#39;re not in a Cargo project, you won&#39;t see any Cargo diagnostics.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;&lt;code&gt;rouge8/neotest-rust&lt;/code&gt;&lt;/a&gt; A &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt; adapter for Rust, using &lt;a href=&quot;https://nexte.st/&quot;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saecki/crates.nvim&quot;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vxpm/ferris.nvim&quot;&gt;&lt;code&gt;vxpm/ferris.nvim&lt;/code&gt;&lt;/a&gt; Geared towards people who prefer manual LSP client configuration. Has some features that have not yet been implemented by this plugin.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adaszko/tree_climber_rust.nvim&quot;&gt;&lt;code&gt;adaszko/tree_climber_rust.nvim&lt;/code&gt;&lt;/a&gt; tree-sitter powered incremental selection tailored for Rust.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rust-tools.nvim&lt;/code&gt; draws inspiration from &lt;a href=&quot;https://github.com/akinsho/flutter-tools.nvim&quot;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/starter</title>
      <link>https://github.com/LazyVim/starter</link>
      <description>&lt;p&gt;Starter template for LazyVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💤 LazyVim&lt;/h1&gt; 
&lt;p&gt;A starter template for &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt;LazyVim&lt;/a&gt;. Refer to the &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>koreader/koreader</title>
      <link>https://github.com/koreader/koreader</link>
      <description>&lt;p&gt;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://koreader.rocks&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koreader/koreader.github.io/master/koreader-logo.png&quot; alt=&quot;KOReader&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;KOReader is a document viewer primarily aimed at e-ink readers.&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/COPYING&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/koreader/koreader&quot; alt=&quot;AGPL Licence&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/koreader/koreader.svg?sanitize=true&quot; alt=&quot;Latest release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/koreader/koreader&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/koreader/koreader?color=red&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/forum-on_mobileread-lightgrey&quot; alt=&quot;Mobileread&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/koreader/koreader.svg?style=shield&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/koreader/koreader/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widgets/koreader/-/koreader/svg-badge.svg?sanitize=true&quot; alt=&quot;Weblate Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;Download&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;User guide&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;Wiki&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Main features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;portable&lt;/strong&gt;: runs on embedded devices (Cervantes, Kindle, Kobo, PocketBook, reMarkable), Android and Linux computers. Developers can run a KOReader emulator in Linux and MacOS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;multi-format documents&lt;/strong&gt;: supports fixed page formats (PDF, DjVu, CBT, CBZ) and reflowable e-book formats (EPUB, FB2, Mobi, DOC, RTF, HTML, CHM, TXT). Scanned PDF/DjVu documents can also be reflowed with the built-in K2pdfopt library. &lt;a href=&quot;https://github.com/koreader/koreader/wiki/ZIP&quot;&gt;ZIP files&lt;/a&gt; are also supported for some formats.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;full-featured reading&lt;/strong&gt;: multi-lingual user interface with a highly customizable reader view and many typesetting options. You can set arbitrary page margins, override line spacing and choose external fonts and styles. It has multi-lingual hyphenation dictionaries bundled into the application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;integrated&lt;/strong&gt; with &lt;em&gt;calibre&lt;/em&gt; (search metadata, receive ebooks wirelessly, browse library via OPDS), &lt;em&gt;Wallabag&lt;/em&gt;, &lt;em&gt;Wikipedia&lt;/em&gt;, &lt;em&gt;Google Translate&lt;/em&gt; and other content providers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;optimized for e-ink devices&lt;/strong&gt;: custom UI without animation, with paginated menus, adjustable text contrast, and easy zoom to fit content or page in paged media.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;extensible&lt;/strong&gt;: via plugins&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;fast&lt;/strong&gt;: on some older devices, it has been measured to have less than half the page-turn delay as the built in reading software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;and much more&lt;/strong&gt;: look up words with StarDict dictionaries / Wikipedia, add your own online OPDS catalogs and RSS feeds, over-the-air software updates, an FTP client, an SSH server, …&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check the &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;user guide&lt;/a&gt; and the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt; to discover more features and to help us document them.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Please follow the model specific steps for your device:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Android-devices&quot;&gt;Android&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-BQ-devices&quot;&gt;Cervantes&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kindle-devices&quot;&gt;Kindle&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices&quot;&gt;Kobo&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-desktop-linux&quot;&gt;Linux&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-PocketBook-devices&quot;&gt;Pocketbook&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Remarkable&quot;&gt;reMarkable&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building.md&quot;&gt;Setting up a build environment&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Collaborating_with_Git.md&quot;&gt;Collaborating with Git&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building_targets.md&quot;&gt;Building targets&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Porting.md&quot;&gt;Porting&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;KOReader is developed and supported by volunteers all around the world. There are many ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;fix bugs&lt;/a&gt; and &lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&quot;&gt;implement new features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;translate the program into your language&lt;/a&gt; or improve an existing translation&lt;/li&gt; 
 &lt;li&gt;document lesser-known features on the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;help others with your knowledge on the &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;forum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Right now we only support &lt;a href=&quot;https://liberapay.com/KOReader&quot;&gt;liberapay&lt;/a&gt; donations.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/koreader/koreader?color=orange&quot; alt=&quot;Last commit&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/pulse&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/koreader/koreader&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

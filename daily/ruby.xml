<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Ruby Daily Trending</title>
    <description>Daily Trending of Ruby in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:36:49 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>ubicloud/ubicloud</title>
      <link>https://github.com/ubicloud/ubicloud</link>
      <description>&lt;p&gt;Open source alternative to AWS. Elastic compute, block storage (non replicated), firewall and load balancer, managed Postgres, K8s, AI inference, and IAM services.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/779e73bd-c260-4729-8430-c630628f1b6b&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Ubicloud &lt;a href=&quot;https://github.com/ubicloud/ubicloud/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/ubicloud/ubicloud/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ubicloud/ubicloud/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/ubicloud/ubicloud/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.greptile.com/repo/ubicloud/ubicloud&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/learn_with-greptile-%091B12?color=%091B12&quot; alt=&quot;Learn this repo using Greptile&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Ubicloud is an open source cloud that can run anywhere. Think of it as an open alternative to cloud providers, like what Linux is to proprietary operating systems.&lt;/p&gt; 
&lt;p&gt;Ubicloud provides IaaS cloud features on bare metal providers, such as Hetzner, Leaseweb, and AWS Bare Metal. You can set it up yourself on these providers or you can use our &lt;a href=&quot;https://console.ubicloud.com&quot;&gt;managed service&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;h3&gt;Managed platform&lt;/h3&gt; 
&lt;p&gt;You can use Ubicloud without installing anything. When you do this, we pass along the underlying provider&#39;s benefits to you, such as price or location.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://console.ubicloud.com&quot;&gt;https://console.ubicloud.com&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Build your own cloud&lt;/h3&gt; 
&lt;p&gt;You can also build your own cloud. To do this, start up Ubicloud&#39;s control plane and connect to its cloud console.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone git@github.com:ubicloud/ubicloud.git

# Generate secrets for demo
./demo/generate_env

# Run containers: db-migrator, app (web &amp;amp; respirate), postgresql
docker-compose -f demo/docker-compose.yml up

# Visit localhost:3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The control plane is responsible for cloudifying bare metal Linux machines. The easiest way to build your own cloud is to lease instances from one of those providers. For example: &lt;a href=&quot;https://www.hetzner.com/sb&quot;&gt;https://www.hetzner.com/sb&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Once you lease instance(s), update the &lt;code&gt;.env&lt;/code&gt; file with the following environment variables:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;HETZNER_USER&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;HETZNER_PASSWORD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;HETZNER_SSH_PUBLIC_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;HETZNER_SSH_PRIVATE_KEY&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then, run the following script for each instance to cloudify it. Currently, the script cloudifies bare metal instances leased from Hetzner. After you cloudify your instances, you can provision and manage cloud resources on these machines.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Enter hostname/IP and provider
docker exec -it ubicloud-app ./demo/cloudify_server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Later when you create VMs, Ubicloud will assign them IPv6 addresses. If your ISP doesn&#39;t support IPv6, please use a VPN or tunnel broker such as Mullvad or Hurricane Electric&#39;s &lt;a href=&quot;https://tunnelbroker.net/&quot;&gt;https://tunnelbroker.net/&lt;/a&gt; to connect. Alternatively, you could lease IPv4 addresses from your provider and add them to your control plane.&lt;/p&gt; 
&lt;h2&gt;Why use it&lt;/h2&gt; 
&lt;p&gt;Public cloud providers like AWS, Azure, and Google Cloud have made life easier for start-ups and enterprises. But they are closed source, have you rent computers at a huge premium, and lock you in. Ubicloud offers an open source alternative, reduces your costs, and returns control of your infrastructure back to you. All without sacrificing the cloud&#39;s convenience.&lt;/p&gt; 
&lt;p&gt;Today, AWS offers about two hundred cloud services. Ultimately, we will implement 10% of the cloud services that make up 80% of that consumption.&lt;/p&gt; 
&lt;p&gt;Example workloads and reasons to use Ubicloud today include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;You have an ephemeral workload like a CI/CD pipeline (we&#39;re integrating with GitHub Actions), or you&#39;d like to run compute/memory heavy tests. Our managed cloud is ~3x cheaper than AWS, so you save on costs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You want a portable and simple app deployment service like &lt;a href=&quot;https://github.com/basecamp/kamal&quot;&gt;Kamal&lt;/a&gt;. We&#39;re moving Ubicloud&#39;s control plane from Heroku to Kamal; and we want to provide open and portable services for Kamal&#39;s dependencies in the process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You have bare metal machines sitting somewhere. You&#39;d like to build your own cloud for portability, security, or compliance reasons.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;You can provide us your feedback, get help, or ask us questions regarding your Ubicloud installations in the &lt;a href=&quot;https://github.com/ubicloud/ubicloud/discussions&quot;&gt;Community Forum&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We follow an established architectural pattern in building public cloud services. A control plane manages a data plane, where the data plane leverages open source software. You can find our current cloud components / services below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elastic Compute&lt;/strong&gt;: Our control plane communicates with Linux bare metal servers using SSH. We use &lt;a href=&quot;https://github.com/cloud-hypervisor/cloud-hypervisor&quot;&gt;Cloud Hypervisor&lt;/a&gt; as our virtual machine monitor (VMM); and each instance of the VMM is contained within Linux namespaces for further isolation / security.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt;: We use &lt;a href=&quot;https://en.wikipedia.org/wiki/IPsec&quot;&gt;IPsec&lt;/a&gt; tunneling to establish an encrypted and private network environment. We support IPv4 and IPv6 in a dual-stack setup and provide both public and private networking. For security, each customer’s VMs operate in their own networking namespace. For &lt;a href=&quot;https://www.ubicloud.com/blog/ubicloud-firewalls-how-linux-nftables-enables-flexible-rules&quot;&gt;firewalls&lt;/a&gt; and &lt;a href=&quot;https://www.ubicloud.com/blog/ubicloud-load-balancer-simple-and-cost-free&quot;&gt;load balancers&lt;/a&gt;, we use Linux nftables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Block Storage, non replicated&lt;/strong&gt;: We use Storage Performance Development Toolkit (&lt;a href=&quot;https://spdk.io&quot;&gt;SPDK&lt;/a&gt;) to provide virtualized block storage to VMs. SPDK enables us to add enterprise features such as snapshot and replication in the future. We follow security best practices and encrypt the data encryption key itself.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Attribute-Based Access Control (ABAC)&lt;/strong&gt;: With ABAC, you can define attributes, roles, and permissions for users and give them fine-grained access to resources. You can read more about our &lt;a href=&quot;https://raw.githubusercontent.com/ubicloud/ubicloud/main/doc/authorization.md&quot;&gt;ABAC design here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;What&#39;s Next?&lt;/strong&gt;: We&#39;re planning to work on a managed K8s or metrics/monitoring service next. If you have a workload that would benefit from a specific cloud service, please get in touch with us through our &lt;a href=&quot;https://github.com/ubicloud/ubicloud/discussions&quot;&gt;Community Forum&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Control plane: Manages data plane services and resources. This is a Ruby program that stores its data in Postgres. We use the &lt;a href=&quot;https://roda.jeremyevans.net/&quot;&gt;Roda&lt;/a&gt; framework to serve HTTP requests and &lt;a href=&quot;http://sequel.jeremyevans.net/&quot;&gt;Sequel&lt;/a&gt; to access the database. We manage web authentication with &lt;a href=&quot;http://rodauth.jeremyevans.net/&quot;&gt;Rodauth&lt;/a&gt;. We communicate with data plane servers using SSH, via the library &lt;a href=&quot;https://github.com/net-ssh/net-ssh&quot;&gt;net-ssh&lt;/a&gt;. For our tests, we use &lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloud console: Server-side web app served by the Roda framework. For the visual design, we use &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt; with components from &lt;a href=&quot;https://tailwindui.com&quot;&gt;Tailwind UI&lt;/a&gt;. We also use jQuery for interactivity.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you’d like to start hacking with Ubicloud, any method of obtaining Ruby and Postgres versions is acceptable. If you have no opinion on this, our development team uses &lt;code&gt;mise&lt;/code&gt; as &lt;a href=&quot;https://raw.githubusercontent.com/ubicloud/ubicloud/main/DEVELOPERS.md&quot;&gt;documented here in detail&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://greptile.com/&quot;&gt;Greptile&lt;/a&gt; provides an AI/LLM that indexes Ubicloud&#39;s source code &lt;a href=&quot;https://learnthisrepo.com/ubicloud&quot;&gt;can answer questions about it&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Do you have any experience with building this sort of thing?&lt;/h3&gt; 
&lt;p&gt;Our founding team comes from Azure; and worked at Amazon and Heroku before that. We also have start-up experience. We were co-founders and founding team members at &lt;a href=&quot;https://github.com/citusdata/citus&quot;&gt;Citus Data&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=18990469&quot;&gt;which got acquired by Microsoft&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How is this different than OpenStack?&lt;/h3&gt; 
&lt;p&gt;We see three differences. First, Ubicloud is available as a managed service (vs boxed software). This way, you can get started in minutes rather than weeks. Since Ubicloud is designed for multi-tenancy, it comes with built-in features such as encryption at rest and in transit, virtual networking, secrets rotation, etc.&lt;/p&gt; 
&lt;p&gt;Second, we&#39;re initially targeting developers. This -we hope- will give us fast feedback cycles and enable us to have 6 key services in GA form in the next two years. OpenStack is still primarily used for 3 cloud services.&lt;/p&gt; 
&lt;p&gt;Last, we&#39;re designing for simplicity. With OpenStack, you pick between 10 hypervisors, 10 S3 implementations, and 5 block storage implementations. The software needs to work in a way where all of these implementations are compatible with each other. That leads to consultant-ware. We&#39;ll take a more opinionated approach with Ubicloud.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sidekiq/sidekiq</title>
      <link>https://github.com/sidekiq/sidekiq</link>
      <description>&lt;p&gt;Simple, efficient background processing for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekiq&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/sidekiq&quot;&gt;&lt;img src=&quot;https://badge.fury.io/rb/sidekiq.svg?sanitize=true&quot; alt=&quot;Gem Version&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/sidekiq/sidekiq/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Simple, efficient background jobs for Ruby.&lt;/p&gt; 
&lt;p&gt;Sidekiq uses threads to handle many jobs at the same time in the same process. Sidekiq can be used by any Ruby application.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis: Redis 7.0+, Valkey 7.2+ or Dragonfly 1.27+&lt;/li&gt; 
 &lt;li&gt;Ruby: MRI 3.2+ or JRuby 9.4+.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sidekiq 8.0 supports Rails and Active Job 7.0+.&lt;/p&gt; 
&lt;p&gt;Sidekiq supports &lt;a href=&quot;https://valkey.io&quot;&gt;Valkey&lt;/a&gt; and &lt;a href=&quot;https://www.dragonflydb.io&quot;&gt;Dragonfly&lt;/a&gt; as Redis alternatives. Redis 7.2.4 is considered to be the canonical implementation. Incompatibilities with that version are considered bugs.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;bundle add sidekiq
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Getting-Started&quot;&gt;Getting Started wiki page&lt;/a&gt; and follow the simple setup process. You can watch &lt;a href=&quot;https://www.youtube.com/playlist?list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&quot;&gt;this YouTube playlist&lt;/a&gt; to learn all about Sidekiq and see its features in action. Here&#39;s the Web UI:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/sidekiq/sidekiq/raw/main/examples/web-ui.png&quot; alt=&quot;Web UI&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;The benchmark in &lt;code&gt;bin/sidekiqload&lt;/code&gt; creates 500,000 no-op jobs and drains them as fast as possible, assuming a fixed Redis network latency of 1ms. This requires a lot of Redis network I/O and JSON parsing. This benchmark is IO-bound so we increase the concurrency to 25. If your application is sending lots of emails or performing other network-intensive work, you could see a similar benefit but be careful not to saturate the CPU. Real world applications will rarely if ever need to use concurrency greater than 10.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
   &lt;th&gt;Time to process 500k jobs&lt;/th&gt; 
   &lt;th&gt;Throughput (jobs/sec)&lt;/th&gt; 
   &lt;th&gt;Ruby&lt;/th&gt; 
   &lt;th&gt;Concurrency&lt;/th&gt; 
   &lt;th&gt;Job Type&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;21.3 sec&lt;/td&gt; 
   &lt;td&gt;23,500&lt;/td&gt; 
   &lt;td&gt;3.2.0+yjit&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;Sidekiq::Job&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;33.8 sec&lt;/td&gt; 
   &lt;td&gt;14,700&lt;/td&gt; 
   &lt;td&gt;3.2.0+yjit&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;23.5 sec&lt;/td&gt; 
   &lt;td&gt;21,300&lt;/td&gt; 
   &lt;td&gt;3.2.0&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;Sidekiq::Job&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;46.5 sec&lt;/td&gt; 
   &lt;td&gt;10,700&lt;/td&gt; 
   &lt;td&gt;3.2.0&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;23.0 sec&lt;/td&gt; 
   &lt;td&gt;21,700&lt;/td&gt; 
   &lt;td&gt;2.7.5&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;Sidekiq::Job&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; 
   &lt;td&gt;46.5 sec&lt;/td&gt; 
   &lt;td&gt;10,850&lt;/td&gt; 
   &lt;td&gt;2.7.5&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Most of Sidekiq&#39;s overhead is Redis network I/O. ActiveJob adds a notable amount of CPU overhead due to argument deserialization and callbacks. Concurrency of 30 was determined experimentally to maximize one CPU without saturating it.&lt;/p&gt; 
&lt;h2&gt;Want to Upgrade?&lt;/h2&gt; 
&lt;p&gt;Use &lt;code&gt;bundle up sidekiq&lt;/code&gt; to upgrade Sidekiq and all its dependencies. Upgrade notes between each major version can be found in the &lt;code&gt;docs/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;I also sell &lt;a href=&quot;https://billing.contribsys.com/spro/&quot;&gt;Sidekiq Pro&lt;/a&gt; and &lt;a href=&quot;https://billing.contribsys.com/sent/new.cgi&quot;&gt;Sidekiq Enterprise&lt;/a&gt;, extensions to Sidekiq which provide more features, a commercial-friendly license and allow you to support high quality open source development all at the same time. Please see the &lt;a href=&quot;https://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt; homepage for more detail.&lt;/p&gt; 
&lt;h2&gt;Problems?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Do not directly email any Sidekiq committers with questions or problems.&lt;/strong&gt; A community is best served when discussions are held in public.&lt;/p&gt; 
&lt;p&gt;If you have a problem, please review the &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt; and &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Problems-and-Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; wiki pages. Searching the &lt;a href=&quot;https://github.com/sidekiq/sidekiq/issues&quot;&gt;issues&lt;/a&gt; for your problem is also a good idea.&lt;/p&gt; 
&lt;p&gt;Sidekiq Pro and Sidekiq Enterprise customers get private email support. You can purchase at &lt;a href=&quot;https://sidekiq.org&quot;&gt;https://sidekiq.org&lt;/a&gt;; email &lt;a href=&quot;mailto:support@contribsys.com&quot;&gt;support@contribsys.com&lt;/a&gt; for help.&lt;/p&gt; 
&lt;p&gt;Useful resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Product documentation is in the &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Occasional announcements are made to the &lt;a href=&quot;https://ruby.social/@sidekiq&quot;&gt;@sidekiq&lt;/a&gt; Mastodon account.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://stackoverflow.com/questions/tagged/sidekiq&quot;&gt;Sidekiq tag&lt;/a&gt; on Stack Overflow has lots of useful Q &amp;amp; A.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Every Thursday morning is Sidekiq Office Hour: I video chat and answer questions. See the &lt;a href=&quot;https://sidekiq.org/support.html&quot;&gt;Sidekiq support page&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/sidekiq/sidekiq/raw/main/.github/contributing.md&quot;&gt;the contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/sidekiq/sidekiq/raw/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for licensing details. The license for Sidekiq Pro and Sidekiq Enterprise can be found in &lt;a href=&quot;https://github.com/sidekiq/sidekiq/raw/main/COMM-LICENSE.txt&quot;&gt;COMM-LICENSE.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;Mike Perham, &lt;a href=&quot;https://ruby.social/@getajobmike&quot;&gt;mastodon&lt;/a&gt;, &lt;a href=&quot;https://www.mikeperham.com&quot;&gt;https://www.mikeperham.com&lt;/a&gt; / &lt;a href=&quot;https://www.contribsys.com&quot;&gt;https://www.contribsys.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dependabot/dependabot-core</title>
      <link>https://github.com/dependabot/dependabot-core</link>
      <description>&lt;p&gt;🤖 Dependabot&#39;s core logic for creating update PRs.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://user-images.githubusercontent.com/7659/174594540-5e29e523-396a-465b-9a6e-6cab5b15a568.svg&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://user-images.githubusercontent.com/7659/174594559-0b3ddaa7-e75b-4f10-9dee-b51431a9fd4c.svg&quot; /&gt; 
  &lt;img src=&quot;https://user-images.githubusercontent.com/7659/174594540-5e29e523-396a-465b-9a6e-6cab5b15a568.svg?sanitize=true&quot; alt=&quot;Dependabot&quot; width=&quot;336&quot; /&gt; 
 &lt;/picture&gt; &lt;/h1&gt; 
&lt;p&gt;Welcome to the public home of Dependabot &lt;img alt=&quot;dependabot&quot; src=&quot;https://github.githubassets.com/images/icons/emoji/dependabot.png?v8&quot; /&gt;).&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#what-is-dependabot-core&quot;&gt;What is Dependabot-Core?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#how-to-run-dependabot&quot;&gt;How to run Dependabot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#contributing-to-dependabot&quot;&gt;Contributing to Dependabot&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#reporting-issues-and-feature-requests&quot;&gt;Reporting Issues and Feature Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#submitting-pull-requests&quot;&gt;Submitting Pull Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#new-ecosystems&quot;&gt;New Ecosystems&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#development-guide&quot;&gt;Development Guide&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#getting-a-development-environment-running&quot;&gt;Getting a Development Environment Running&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#debugging-problems&quot;&gt;Debugging Problems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#running-tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#profiling&quot;&gt;Profiling&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#architecture-and-code-layout&quot;&gt;Architecture and Code Layout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#trademarks&quot;&gt;Trademarks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#notes-for-project-maintainers&quot;&gt;Notes for Project Maintainers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h1&gt;What is Dependabot-Core?&lt;/h1&gt; 
&lt;p&gt;Dependabot-Core is the library at the heart of &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot&quot;&gt;Dependabot&lt;/a&gt; security / version updates.&lt;/p&gt; 
&lt;p&gt;Use it to generate automated pull requests updating dependencies for projects written in Ruby, JavaScript, Python, PHP, Dart, Elixir, Elm, Go, Rust, Java and .NET. It can also update git submodules, Docker files, and Terraform files. Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check for the latest version of a dependency &lt;em&gt;that&#39;s resolvable given a project&#39;s other dependencies&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Generate updated manifest and lockfiles for a new dependency version&lt;/li&gt; 
 &lt;li&gt;Generate PR descriptions that include the updated dependency&#39;s changelogs, release notes, and commits&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;How to run Dependabot&lt;/h1&gt; 
&lt;p&gt;Most people are familiar with the Dependabot service that runs on GitHub.com and GitHub Enterprise. Enabling that is as simple as &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates&quot;&gt;checking a &lt;code&gt;dependabot.yml&lt;/code&gt; configuration file in to your repository&#39;s &lt;code&gt;.github&lt;/code&gt; directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;However, if you want to run a custom version of Dependabot or run it on another platform, you&#39;re not left out in the cold. This repo provides the logic necessary for hosting your own standalone Dependabot. It currently supports opening Pull Requests against repositories hosted on GitHub, Github Enterprise, Azure DevOps, GitLab, BitBucket, and AWS CodeCommit.&lt;/p&gt; 
&lt;p&gt;Dependabot-Core is a library, so you&#39;ll need an entrypoint script of some kind. Here are a few examples to help you get started.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re looking to run Dependabot locally for development/debugging purposes, see the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#development-guide&quot;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Dependabot-Script&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/dependabot/dependabot-script&quot;&gt;dependabot-script&lt;/a&gt; repo provides a collection of example scripts for configuring the Dependabot-Core library. It is intended as a starting point for advanced users to run a self-hosted version of Dependabot within their own projects.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We recently refactored the monolithic docker image used within the Dependabot Core library into one-image-per-ecosystem. Unfortunately, that broke dependabot-scripts, and we haven&#39;t had time to update them yet. We are aware of the problem and hope to provide a solution soon.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Dependabot CLI&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/dependabot/cli&quot;&gt;Dependabot CLI&lt;/a&gt; is a newer tool that may eventually replace &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dependabot-script&quot;&gt;&lt;code&gt;dependabot-script&lt;/code&gt;&lt;/a&gt; for standalone use cases. While it creates dependency diffs, it&#39;s currently missing the logic to turn those diffs into actual PRs. Nevertheless, it may be useful for advanced users looking for examples of how to hack on Dependabot.&lt;/p&gt; 
&lt;h2&gt;Dependabot on CI&lt;/h2&gt; 
&lt;p&gt;In an environment such as GitHub where Dependabot runs in a container, if you want to change your build or installation process depending on whether it&#39;s running within the context of the Dependabot container, you can check the existence of the &lt;code&gt;DEPENDABOT&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h1&gt;Contributing to Dependabot&lt;/h1&gt; 
&lt;h2&gt;Reporting issues and Feature Requests&lt;/h2&gt; 
&lt;p&gt;👋 Want to give us feedback on Dependabot, or contribute to it? That&#39;s great - thank you so much!&lt;/p&gt; 
&lt;h3&gt;Reproducible Example&lt;/h3&gt; 
&lt;p&gt;Most bug reports should be accompanied by a link to a public repository that reproduces the problem. Bug reports that cannot be reproduced on a public repo using the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#cli-tool&quot;&gt;CLI tool&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;dry-run script&lt;/a&gt; may be closed as &quot;cannot reproduce&quot;.&lt;/p&gt; 
&lt;h3&gt;No &quot;+1&quot; Comments&lt;/h3&gt; 
&lt;p&gt;Our issue tracker is quite active, and as a result there&#39;s a good chance someone already filed the same issue. If so, please upvote that issue, because we use 👍 reactions on issues as one signal to gauge the impact of a feature request or bug.&lt;/p&gt; 
&lt;p&gt;However, please do not leave comments that contribute nothing new to the discussion. For details, see &lt;a href=&quot;https://github.com/golang/go/wiki/NoPlusOne&quot;&gt;https://github.com/golang/go/wiki/NoPlusOne&lt;/a&gt;. This is open source, if you see something you want fixed, we are happy to coach you through contributing a pull request to fix it.&lt;/p&gt; 
&lt;h3&gt;Don&#39;t file issues about Security Alerts or Dependency Graph&lt;/h3&gt; 
&lt;p&gt;The issue-tracker is meant solely for issues related to Dependabot&#39;s updating logic. Issues about &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts&quot;&gt;security alerts&lt;/a&gt; or &lt;a href=&quot;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph&quot;&gt;Dependency Graph&lt;/a&gt; should instead be filed as a &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/code-security&quot;&gt;Code Security discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A good rule of thumb is that if you have questions about the &lt;em&gt;diff&lt;/em&gt; in a PR, it belongs here.&lt;/p&gt; 
&lt;h3&gt;Disclosing Security Issues&lt;/h3&gt; 
&lt;p&gt;If you believe you have found a security vulnerability in Dependabot, please review &lt;a href=&quot;https://github.com/dependabot/dependabot-core/security/policy&quot;&gt;our security policy&lt;/a&gt; for details about disclosing them to the GitHub Bug Bounty program, so we can work to resolve the issue before it is disclosed publicly.&lt;/p&gt; 
&lt;h2&gt;Submitting Pull Requests&lt;/h2&gt; 
&lt;p&gt;Want to contribute to Dependabot? That&#39;s great - thank you so much!&lt;/p&gt; 
&lt;p&gt;Contribution workflow:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the project.&lt;/li&gt; 
 &lt;li&gt;Get the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#getting-a-development-environment-running&quot;&gt;development environment running&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Make your feature addition or bug fix.&lt;/li&gt; 
 &lt;li&gt;Add &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#running-tests&quot;&gt;tests for it&lt;/a&gt;. This is important so we don&#39;t break it in a future version unintentionally.&lt;/li&gt; 
 &lt;li&gt;Send a pull request. The tests will run on it automatically, so don&#39;t worry if you couldn&#39;t get them running locally.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; guidelines for more information.&lt;/p&gt; 
&lt;h2&gt;New Ecosystems&lt;/h2&gt; 
&lt;p&gt;If you&#39;re interested in contributing support for a new ecosystem, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/CONTRIBUTING.md#contributing-new-ecosystems&quot;&gt;contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h1&gt;Development Guide&lt;/h1&gt; 
&lt;h2&gt;Getting a Development Environment Running&lt;/h2&gt; 
&lt;p&gt;The first step to debugging a problem or writing a new feature is getting a development environment going. We provide a custom &lt;a href=&quot;https://www.docker.com/products/docker-desktop/&quot;&gt;Docker-based&lt;/a&gt; developer shell that bakes in all required dependencies. In most cases this is the best way to work with the project.&lt;/p&gt; 
&lt;p&gt;The developer shell uses volume mounts to incorporate your local changes to Dependabot&#39;s source code. This way you can edit locally using your favorite editor and the changes are immediately reflected within the docker container for performing &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#debugging-problems&quot;&gt;dry-runs&lt;/a&gt; or executing &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#running-tests&quot;&gt;tests&lt;/a&gt;. Note: See caveat about &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#making-changes-to-native-package-manager-helpers&quot;&gt;editing the native package manager helper scripts&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;p&gt;The script to launch the developer shell builds the docker images from scratch if it can&#39;t find them locally. This can take a while.&lt;/p&gt; 
&lt;p&gt;Skip the wait by pulling the pre-built image for the ecosystem you want to work on. The image name uses the &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem&quot;&gt;YAML ecosystem name&lt;/a&gt; to specify the ecosystem. For example, for Go Modules, the YAML name is &lt;code&gt;gomod&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker pull ghcr.io/dependabot/dependabot-updater-gomod
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Pre-built images are currently only available for AMD64 / Intel architecture. They &lt;em&gt;will&lt;/em&gt; run on ARM, but 2x-3x slower than if you &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#building-images-from-scratch&quot;&gt;manually build ARM-specific images&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Next, run the developer shell, specifying the desired ecosystem &lt;em&gt;using the top-level directory name of the ecosystem in this project&lt;/em&gt;. For example, for Go Modules, the top-level directory is named &lt;code&gt;go_modules&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/docker-dev-shell go_modules
=&amp;gt; running docker development shell
[dependabot-core-dev] ~ $ cd go_modules &amp;amp;&amp;amp; rspec spec # to run tests for a particular package
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building Images from Scratch&lt;/h3&gt; 
&lt;p&gt;Normally the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; is all you need, but occasionally you&#39;ll need to rebuild the underlying images.&lt;/p&gt; 
&lt;p&gt;For example, while we don&#39;t yet publish ARM-specific images, if you &lt;em&gt;are&lt;/em&gt; working on an ARM-based platform, we recommend manually building the images because the resulting containers run much faster.&lt;/p&gt; 
&lt;p&gt;The developer shell runs within a Dependabot Development docker image, which is built on top of an ecosystem image.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;flowchart LR
    A[&quot;docker-dev-shell script&quot;] --&amp;gt; B(&quot;Dependabot Development docker image&quot;)
    B --&amp;gt; C(&quot;Dependabot Updater Ecosystem docker image (ecosystem specific)&quot;)
    C --&amp;gt; D(&quot;Dependabot Updater Core docker image&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Changes to the docker files for any of these images requires building one or more of the images locally in order to be reflected in the development shell.&lt;/p&gt; 
&lt;p&gt;The simple but slow way is to delete any existing images and then run &lt;code&gt;bin/docker-dev-shell&lt;/code&gt; which automatically builds missing images.&lt;/p&gt; 
&lt;p&gt;The faster way is to pull all the pre-built images that are dependencies of the image you actually need to build. To (re)build a specific one:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The Updater core image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker pull ghcr.io/dependabot/dependabot-updater-core # OR
$ docker build -f Dockerfile.updater-core . # recommended on ARM
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The Updater ecosystem image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker pull ghcr.io/dependabot/dependabot-updater-gomod # OR
$ script/build go_modules # recommended on ARM
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The development container using the &lt;code&gt;--rebuild&lt;/code&gt; flag:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ bin/docker-dev-shell go_modules --rebuild
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Making Changes to native Package Manager helpers&lt;/h3&gt; 
&lt;p&gt;Several Dependabot packages make use of &#39;native helpers&#39;, small executables in their host language.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Changes to these files are not automatically reflected inside the development container.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Once you have made any edits to the helper files, run the appropriate build script to update the installed version with your changes like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bin/docker-dev-shell bundler
=&amp;gt; running docker development shell
$ bundler/helpers/v2/build
$ bin/dry-run.rb bundler dependabot/demo --dir=&quot;/ruby&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To view logs and stdout from the native package manager helpers, see &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#debugging-native-package-manager-helpers&quot;&gt;debugging native helpers&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Debugging Problems&lt;/h1&gt; 
&lt;p&gt;The first step to debugging is getting the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#getting-a-development-environment-running&quot;&gt;development environment running&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Within the development environment, you have two options for simulating a dependency update job: You can use the newly-developed &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#cli-tool&quot;&gt;CLI tool&lt;/a&gt; or the original &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;Dry-run script&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;CLI tool&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/dependabot/cli&quot;&gt;Dependabot CLI&lt;/a&gt; is a newly-developed tool that incorporates the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#private-registry-credential-management&quot;&gt;GitHub Credentials Proxy&lt;/a&gt; to more realistically simulate what&#39;s happening within the Dependabot-at-GitHub service when talking to private registries.&lt;/p&gt; 
&lt;p&gt;It has a &lt;a href=&quot;https://github.com/dependabot/cli#debugging-with-the-cli&quot;&gt;dedicated debugging guide&lt;/a&gt;, including support for dropping into the Ruby debugger.&lt;/p&gt; 
&lt;h2&gt;Dry-Run Script&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Before running the dry-run script, you&#39;ll need to &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#getting-a-development-environment-running&quot;&gt;get the development environment running&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can use the &lt;code&gt;bin/dry-run.rb&lt;/code&gt; script to simulate a dependency update job, printing the diff that would be generated to the terminal. It takes two positional arguments: the &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem&quot;&gt;package manager&lt;/a&gt; and the GitHub repo name (including the account):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bin/docker-dev-shell go_modules
=&amp;gt; running docker development shell
$ bin/dry-run.rb go_modules rsc/quote
=&amp;gt; fetching dependency files
=&amp;gt; parsing dependency files
=&amp;gt; updating 2 dependencies
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Helpful options to speed up dry-run testing&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;Dry-Run script&lt;/a&gt; supports many other options, all of which are documented at the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/bin/dry-run.rb&quot;&gt;top of the script&#39;s source code&lt;/a&gt;. For example:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;LOCAL_GITHUB_ACCESS_TOKEN=&quot;fake-GitHub-PAT&quot;&lt;/code&gt; allows specifying a &lt;a href=&quot;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&quot;&gt;GitHub Personal Access Token (PAT)&lt;/a&gt; to avoid rate-limiting.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--dir=&quot;path/to/subdir/containing/manifest&lt;/code&gt; is required if the manifest file is located in a subdirectory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--dep=&quot;dep-name-that-I-want-to-test&quot;&lt;/code&gt; allows specifying a single dep to try to update and all others are ignored.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--cache=files&lt;/code&gt; allows caching remote dep files locally for faster re-runs when testing local logic changes.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--updater-options=feature_flag_name&lt;/code&gt; allows passing in feature flags.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Here&#39;s an example of how to string all these together&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  LOCAL_GITHUB_ACCESS_TOKEN=github_pat_123_fake_string \
  bin/dry-run.rb docker jeffwidman/secrets-store-driver \
  --dir &quot;/manifest_staging/charts/secrets-store-provider&quot; \
  --cache=files \
  --dep=&quot;secrets-store&quot; \
  --updater-options=kubernetes_updates
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Adding debug breakpoints&lt;/h3&gt; 
&lt;p&gt;You can add a &lt;code&gt;debugger&lt;/code&gt; statement anywhere in the ruby code, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;      def latest_resolvable_version
        debugger
        latest_version_finder.latest_version
      end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you execute the job, the Ruby debugger will open. It should look something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;[11, 20] in ~/go_modules/lib/dependabot/go_modules/update_checker.rb
    11|   module GoModules
    12|     class UpdateChecker &amp;lt; Dependabot::UpdateCheckers::Base
    13|       require_relative &quot;update_checker/latest_version_finder&quot;
    14|
    15|       def latest_resolvable_version
=&amp;gt;  16|         debugger
    17|         latest_version_finder.latest_version
    18|       end
    19|
    20|       # This is currently used to short-circuit latest_resolvable_version,
=&amp;gt;#0    Dependabot::GoModules::UpdateChecker#latest_resolvable_version at ~/go_modules/lib/dependabot/go_modules/update_checker.rb:16
  #1    Dependabot::GoModules::UpdateChecker#latest_version at ~/go_modules/lib/dependabot/go_modules/update_checker.rb:24
  # and 9 frames (use `bt&#39; command for all frames)
(rdbg)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this prompt, you can run &lt;a href=&quot;https://github.com/ruby/debug&quot;&gt;debugger commands&lt;/a&gt; to navigate around, or enter methods and variables to see what they contain. Try entering &lt;code&gt;dependency&lt;/code&gt; to see what dependency Dependabot is currently working on.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; While in the debugger, changes made to the source code will not be picked up. You will have to end your debugging session and restart it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Debugging Native Package Manager Helpers&lt;/h3&gt; 
&lt;p&gt;When you&#39;re debugging an issue you often need to peek inside these scripts that run in a separate process.&lt;/p&gt; 
&lt;p&gt;Print all log statements from native helpers using &lt;code&gt;DEBUG_HELPERS=true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DEBUG_HELPERS=true bin/dry-run.rb bundler dependabot/demo --dir=&quot;/ruby&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pause execution to debug a single native helper function using &lt;code&gt;DEBUG_FUNCTION=&amp;lt;function name&amp;gt;&lt;/code&gt;. The function maps to a native helper function name, for example, one of the functions in &lt;code&gt;bundler/helpers/v2/lib/functions.rb&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When this function is being executed a &lt;code&gt;debugger&lt;/code&gt; is inserted, pausing execution of the &lt;code&gt;bin/dry-run.rb&lt;/code&gt; script, this leaves the current updates &lt;code&gt;tmp&lt;/code&gt; directory in place allowing you to &lt;code&gt;cd&lt;/code&gt; into the directory and run the native helper function directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; DEBUG_FUNCTION=parsed_gemfile bin/dry-run.rb bundler dependabot/demo --dir=&quot;/ruby&quot;
=&amp;gt; fetching dependency files
=&amp;gt; dumping fetched dependency files: ./dry-run/dependabot/demo/ruby
=&amp;gt; parsing dependency files
$ cd /home/dependabot/dependabot-core/tmp/dependabot_TEMP/ruby &amp;amp;&amp;amp; echo &quot;{\&quot;function\&quot;:\&quot;parsed_gemfile\&quot;,\&quot;args\&quot;:{\&quot;gemfile_name\&quot;:\&quot;Gemfile\&quot;,\&quot;lockfile_name\&quot;:\&quot;Gemfile.lock\&quot;,\&quot;dir\&quot;:\&quot;/home/dependabot/dependabot-core/tmp/dependabot_TEMP/ruby\&quot;}}&quot; | BUNDLER_VERSION=1.17.3 BUNDLE_GEMFILE=/opt/bundler/v1/Gemfile GEM_HOME=/opt/bundler/v1/.bundle bundle exec ruby /opt/bundler/v1/run.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Copy and run the &lt;code&gt;cd...&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd /home/dependabot/dependabot-core/tmp/dependabot_TEMP/ruby &amp;amp;&amp;amp; echo &quot;{\&quot;function\&quot;:\&quot;parsed_gemfile\&quot;,\&quot;args\&quot;:{\&quot;gemfile_name\&quot;:\&quot;Gemfile\&quot;,\&quot;lockfile_name\&quot;:\&quot;Gemfile.lock\&quot;,\&quot;dir\&quot;:\&quot;/home/dependabot/dependabot-core/tmp/dependabot_TEMP/ruby\&quot;}}&quot; | BUNDLER_VERSION=1.17.3 BUNDLE_GEMFILE=/opt/bundler/v1/Gemfile GEM_HOME=/opt/bundler/v1/.bundle bundle exec ruby /opt/bundler/v1/run.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This should log out the output of the &lt;code&gt;parsed_gemfile&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;{&quot;result&quot;:[{&quot;name&quot;:&quot;business&quot;,&quot;requirement&quot;:&quot;~&amp;gt; 1.0.0&quot;,&quot;groups&quot;:[&quot;default&quot;],&quot;source&quot;:null,&quot;type&quot;:&quot;runtime&quot;},{&quot;name&quot;:&quot;uk_phone_numbers&quot;,&quot;requirement&quot;:&quot;~&amp;gt; 0.1.0&quot;,&quot;groups&quot;:[&quot;default&quot;],&quot;source&quot;:null,&quot;type&quot;:&quot;runtime&quot;}]}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep in mind that unlike changes to the ruby source, changes on your host machine to the native helpers source code are not synced to the development container. So you have two choices for editing the native helper:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can directly edit the temporary copy of the native helper within the development container, for example: &lt;code&gt;vi /opt/bundler/v1/lib/functions/file_parser.rb&lt;/code&gt;. And then re-run the &lt;code&gt;cd...&lt;/code&gt; command. This is the fastest way to debug, but any changes won&#39;t be saved outside the container.&lt;/li&gt; 
 &lt;li&gt;You can edit your local copy, and then &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#making-changes-to-native-package-manager-helpers&quot;&gt;rebuild the native helper&lt;/a&gt;. This will require re-running the dry-run script to pickup the change.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Debugging Ignore Conditions&lt;/h3&gt; 
&lt;p&gt;Most of the ecosystems in Dependabot-Core support &lt;code&gt;ignore&lt;/code&gt; conditions which allow a user to specify dependency names or versions to exclude from upgrades. The docs for the Dependabot service at GitHub &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#ignore&quot;&gt;describe the feature in more detail&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#cli-tool&quot;&gt;Dependabot CLI&lt;/a&gt; supports passing in ignore conditions as part of the job definition. See &lt;a href=&quot;https://github.com/dependabot/cli#scenario-file&quot;&gt;the example&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;dry-run script&lt;/a&gt; supports passing in one or more ignore conditions via the env var &lt;code&gt;IGNORE_CONDITIONS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;IGNORE_CONDITIONS=&#39;[{&quot;dependency-name&quot;:&quot;*&quot;,&quot;update-types&quot;: [&quot;version-update:semver-major&quot;]}]&#39; \
bin/dry-run.rb docker test_org/test-dependabot`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debugging Security Updates&lt;/h3&gt; 
&lt;p&gt;Many of the ecosystems in Dependabot-Core support &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-security-updates/about-dependabot-security-updates&quot;&gt;security updates&lt;/a&gt;. These are a special form of version update where a dependency name and range of vulnerable versions are passed in. Dependabot-Core will try to upgrade any instance of that dependency to the &lt;em&gt;minimum&lt;/em&gt; non-vulnerable version. This is in contrast to a normal version update which tries to update to the &lt;em&gt;latest&lt;/em&gt; version.&lt;/p&gt; 
&lt;p&gt;The env var &lt;code&gt;SECURITY_ADVISORIES&lt;/code&gt; allows passing one or more security alert notifications to the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;dry-run script&lt;/a&gt; in order to simulate a security update:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SECURITY_ADVISORIES=&#39;[{&quot;dependency-name&quot;:&quot;buffer&quot;,&quot;patched-versions&quot;:[],&quot;unaffected-versions&quot;:[],&quot;affected-versions&quot;:[&quot;&amp;lt;= 2.0.0&quot;]}]&#39; \
bin/dry-run.rb pub dart-lang/pub-dev --dir &quot;/app&quot; --cache=files --dep=&quot;buffer&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code and Docker&lt;/h3&gt; 
&lt;p&gt;There&#39;s built-in support for leveraging Visual Studio Code&#39;s &lt;a href=&quot;https://code.visualstudio.com/docs/devcontainers/containers&quot;&gt;ability for debugging&lt;/a&gt; inside a Docker container. After installing the recommended &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&quot;&gt;&lt;code&gt;Dev Containers&lt;/code&gt; extension&lt;/a&gt;, simply press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; (&lt;code&gt;⇧⌘P&lt;/code&gt; on macOS) and select &lt;code&gt;Dev Containers: Reopen in Container&lt;/code&gt;. You can also access the dropdown by clicking on the green button in the bottom-left corner of the editor. If the development Docker image isn&#39;t present on your machine, it will be built automatically. Once that&#39;s finished, start the &lt;code&gt;Debug Dry Run&lt;/code&gt; configuration &lt;code&gt;(F5)&lt;/code&gt; and you&#39;ll be prompted to select a package manager and a repository to perform a dry run on. Feel free to place breakpoints on the code.&lt;/p&gt; 
&lt;p&gt;There is also support to debug individual test runs by running the &lt;code&gt;Debug Tests&lt;/code&gt; configuration &lt;code&gt;(F5)&lt;/code&gt; and you&#39;ll be prompted to select an ecosystem and provide an rspec path.&lt;/p&gt; 
&lt;p&gt;⚠️ The &lt;code&gt;Clone Repository ...&lt;/code&gt; commands of the Remote Containers extension are currently missing some functionality and are therefore not supported. You have to clone the repository manually and use the &lt;code&gt;Reopen in Container&lt;/code&gt; or &lt;code&gt;Open Folder in Container...&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Running Tests&lt;/h2&gt; 
&lt;p&gt;Once you get the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#getting-a-development-environment-running&quot;&gt;development environment for a particular ecosystem&lt;/a&gt; going, execute the tests for that ecosystem by running &lt;code&gt;rspec spec&lt;/code&gt; inside that ecosystem&#39;s folder, e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd go_modules
$ rspec spec
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also limit the tests to only the file you&#39;re working on, or only tests that previously failed, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ rspec spec/dependabot/file_updaters/elixir --only-failures
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Style is enforced by &lt;a href=&quot;https://rubocop.org/&quot;&gt;RuboCop&lt;/a&gt;. To check for style violations, simply run &lt;code&gt;rubocop&lt;/code&gt; in each of the packages, e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd go_modules
$ rubocop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Profiling&lt;/h2&gt; 
&lt;p&gt;You can profile a &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/#dry-run-script&quot;&gt;dry-run&lt;/a&gt; by passing the &lt;code&gt;--profile&lt;/code&gt; flag when running it, or tag an &lt;code&gt;rspec&lt;/code&gt; test with &lt;code&gt;:profile&lt;/code&gt;. This will generate a &lt;code&gt;stackprof-&amp;lt;datetime&amp;gt;.dump&lt;/code&gt; file in the &lt;code&gt;tmp/&lt;/code&gt; folder, and you can generate a flamegraph from this by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;stackprof --d3-flamegraph tmp/stackprof-&amp;lt;data or spec name&amp;gt;.dump &amp;gt; tmp/flamegraph.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Architecture and Code Layout&lt;/h1&gt; 
&lt;p&gt;Dependabot-Core is a collection of Ruby packages (gems), which contain the logic for updating dependencies in several languages.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;dependabot-common&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;common&lt;/code&gt; package contains all general-purpose/shared functionality. For instance, the code for creating pull requests for the different supported platforms lives here, as does most of the logic for handling Git dependencies (as most languages support Git dependencies in one way or another). There are also base classes defined for each of the major concerns required to implement support for a language or package manager.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;dependabot-{package-manager}&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;There is a gem for each package manager or language that Dependabot supports. At a minimum, each of these gems will implement the following classes:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Service&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FileFetcher&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetches the relevant dependency files for a project (e.g., the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt;). See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/common/lib/dependabot/file_fetchers/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FileParser&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Parses a dependency file and extracts a list of dependencies for a project. See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/common/lib/dependabot/file_parsers/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;UpdateChecker&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Checks whether a given dependency is up-to-date. See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/common/lib/dependabot/update_checkers/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FileUpdater&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Updates a dependency file to use the latest version of a given dependency. See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/common/lib/dependabot/file_updaters/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MetadataFinder&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Looks up metadata about a dependency, such as its GitHub URL. See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/common/lib/dependabot/metadata_finders/README.md&quot;&gt;README&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Describes the logic for comparing dependency versions. See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/hex/lib/dependabot/hex/version.rb&quot;&gt;hex Version class&lt;/a&gt; for an example.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Requirement&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Describes the format of a dependency requirement (e.g. &lt;code&gt;&amp;gt;= 1.2.3&lt;/code&gt;). See the &lt;a href=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/hex/lib/dependabot/hex/requirement.rb&quot;&gt;hex Requirement class&lt;/a&gt; for an example.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The high-level flow looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dependabot/dependabot-core/main/architecture.svg?sanitize=true&quot; alt=&quot;Dependabot high-level architecture diagram&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;dependabot-omnibus&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This is a &quot;meta&quot; gem, that simply depends on all the others. If you want to automatically include support for all languages, you can just include this gem and you&#39;ll get all you need.&lt;/p&gt; 
&lt;h2&gt;Private Registry Credential Management&lt;/h2&gt; 
&lt;p&gt;For many ecosystems, Dependabot-Core supports private registries. Sometimes this happens by passing the private registry credentials directly to the native package managers (&lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;bundler&lt;/code&gt;, etc), other times it happens within the Dependabot-Core Ruby code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    Private Registry Credentials-&amp;gt;&amp;gt;Dependabot-Core:&amp;lt;br /&amp;gt;
    Dependabot-Core-&amp;gt;&amp;gt;Native Package Managers:&amp;lt;br /&amp;gt;
    Native Package Managers-&amp;gt;&amp;gt;Package Registries:&amp;lt;br /&amp;gt;
    Dependabot-Core-&amp;gt;&amp;gt;Package Registries:&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While simple and straightforward, this is a security risk for ecosystems that allow running untrusted code within their manifest files. For example &lt;code&gt;setup.py&lt;/code&gt; and &lt;code&gt;.gemspec&lt;/code&gt; allow running native Python and Ruby code. If a package in the dependency tree gets hacked, an attacker could push a malicious manifest that forces the native package manager to expose the creds.&lt;/p&gt; 
&lt;p&gt;To guard against this, for the Dependabot service that Github runs, we wrap Dependabot-Core with a credential proxy so those private registry secrets are never exposed to Dependabot-Core.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    Dependabot-Core-&amp;gt;&amp;gt;Credentials Proxy: All requests are unauthenticated
    Credentials Proxy-&amp;gt;&amp;gt;Package Registries: Creds are injected by the Proxy
    Note left of Dependabot-Core: The Dependabot Service&amp;lt;br /&amp;gt; that GitHub Runs
    Package Registries-&amp;gt;&amp;gt;Credentials Proxy: Creds are stripped by the Proxy
    Credentials Proxy-&amp;gt;&amp;gt;Dependabot-Core: Dependabot-Core never sees private registry credentials
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This also means if Dependabot-Core ever has a security vulnerability, those creds are still not at risk of being exposed.&lt;/p&gt; 
&lt;h1&gt;Trademarks&lt;/h1&gt; 
&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of GitHub trademarks or logos is subject to and must follow &lt;a href=&quot;https://github.com/logos&quot;&gt;GitHub Logos and Usage&lt;/a&gt;. Use of GitHub trademarks or logos in modified versions of this project must not cause confusion or imply GitHub sponsorship. Any use of third-party trademarks or logos are subject to those third-party’s policies.&lt;/p&gt; 
&lt;h1&gt;History&lt;/h1&gt; 
&lt;p&gt;Dependabot and dependabot-core started life as &lt;a href=&quot;https://github.com/gocardless/bump&quot;&gt;Bump&lt;/a&gt; and &lt;a href=&quot;https://github.com/gocardless/bump-core&quot;&gt;Bump Core&lt;/a&gt;, back when @hmarr and @greysteil were working at &lt;a href=&quot;https://gocardless.com&quot;&gt;GoCardless&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Dependabot became a part of GitHub in 2019!&lt;/p&gt; 
&lt;h1&gt;Notes for project maintainers&lt;/h1&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;span&gt;📖&lt;/span&gt; Release guide&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;p&gt;Publish a new release to RubyGems by running the &lt;a href=&quot;https://github.com/dependabot/dependabot-core/actions/workflows/gems-bump-version.yml&quot;&gt;&lt;code&gt;Gems - Bump Version&lt;/code&gt;&lt;/a&gt; workflow and following the instructions on the job summary.&lt;/p&gt; 
 &lt;p&gt;In a nutshell the process will be:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Run the action to generate a version bump PR.&lt;/li&gt; 
  &lt;li&gt;Merge the PR.&lt;/li&gt; 
  &lt;li&gt;Tag that merge commit as a new release using the format &lt;code&gt;v1.2.3&lt;/code&gt;. The job summary contains a URL pre-populated with the correct version for the title and tag.&lt;/li&gt; 
  &lt;li&gt;Once the release is tagged, another GitHub Action workflow automatically pushes it to RubyGems.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Freika/dawarich</title>
      <link>https://github.com/Freika/dawarich</link>
      <description>&lt;p&gt;Self-hostable alternative to Google Timeline (Google Location History)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌍 Dawarich: Your Self-Hosted Location History Tracker&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/pHsBjpt5J8&quot;&gt;&lt;img src=&quot;https://dcbadge.limes.pink/api/server/pHsBjpt5J8&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; | &lt;a href=&quot;https://ko-fi.com/H2H3IDYDD&quot;&gt;&lt;img src=&quot;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&quot; alt=&quot;ko-fi&quot; /&gt;&lt;/a&gt; | &lt;a href=&quot;https://www.patreon.com/freika&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dfreika%26type%3Dpatrons&amp;amp;style=for-the-badge&quot; alt=&quot;Patreon&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.circleci.com/pipelines/github/Freika/dawarich&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/Freika/dawarich.svg?style=svg&quot; alt=&quot;CircleCI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📸 Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/map.jpeg&quot; alt=&quot;Map&quot; /&gt; &lt;em&gt;Map View&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/stats.jpeg&quot; alt=&quot;Stats&quot; /&gt; &lt;em&gt;Statistics Overview&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/imports.jpeg&quot; alt=&quot;Import&quot; /&gt; &lt;em&gt;Imports page&lt;/em&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🗺️ About Dawarich&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Dawarich&lt;/strong&gt; is a self-hosted web app designed to replace Google Timeline (aka Google Location History). It enables you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visualize your data on an interactive map.&lt;/li&gt; 
 &lt;li&gt;Import your location history from Google Maps Timeline and Owntracks.&lt;/li&gt; 
 &lt;li&gt;Explore statistics like the number of countries and cities visited, total distance traveled, and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;📄 &lt;strong&gt;Changelog&lt;/strong&gt;: Find the latest updates &lt;a href=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/CHANGELOG.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👩‍💻 &lt;strong&gt;Contribute&lt;/strong&gt;: See &lt;a href=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for how to contribute to Dawarich.&lt;/h2&gt; 
&lt;h2&gt;⚠️ Disclaimer&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;💔 &lt;strong&gt;DO NOT UPDATE AUTOMATICALLY&lt;/strong&gt;: Read release notes before updating. Automatic updates may break your setup.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Under active development&lt;/strong&gt;: Expect frequent updates, bugs, and breaking changes.&lt;/li&gt; 
 &lt;li&gt;❌ &lt;strong&gt;Do not delete your original data&lt;/strong&gt; after importing into Dawarich.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Backup before updates&lt;/strong&gt;: Always &lt;a href=&quot;https://dawarich.app/docs/tutorials/backup-and-restore&quot;&gt;backup your data&lt;/a&gt; before upgrading.&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Stay up-to-date&lt;/strong&gt;: Make sure you&#39;re running the latest version for the best experience.&lt;/li&gt; 
 &lt;li&gt;⚠️ &lt;strong&gt;DO NOT USE PRODUCTION ENVIRONMENT&lt;/strong&gt;: Dawarich is not yet ready for production.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🧭 Supported Location Tracking&lt;/h2&gt; 
&lt;p&gt;You can track your location with the following apps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;💫 &lt;a href=&quot;https://dawarich.app/docs/dawarich-for-ios/&quot;&gt;Dawarich for iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌍 &lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#overland&quot;&gt;Overland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🛰️ &lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#owntracks&quot;&gt;OwnTracks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🗺️ &lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#gps-logger&quot;&gt;GPSLogger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📱 &lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#phonetrack&quot;&gt;PhoneTrack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏡 &lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#home-assistant&quot;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simply install one of the supported apps on your device and configure it to send location updates to your Dawarich instance.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🚀 How to Start Dawarich Locally&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository.&lt;/li&gt; 
 &lt;li&gt;Run the following command to start the app: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Access the app at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;⏹️ &lt;strong&gt;To stop the app&lt;/strong&gt;, press &lt;code&gt;Ctrl+C&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🔧 How to Install Dawarich&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://dawarich.app/docs/intro#setup-your-dawarich-instance&quot;&gt;Docker Setup&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/platforms/synology&quot;&gt;Synology&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🆕 &lt;strong&gt;Default Credentials&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Username&lt;/strong&gt;: &lt;code&gt;demo@dawarich.app&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Password&lt;/strong&gt;: &lt;code&gt;password&lt;/code&gt; Feel free to change them in the account settings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📊 Features&lt;/h2&gt; 
&lt;h3&gt;🔍 Location Tracking&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Track your live location using one of the &lt;a href=&quot;https://raw.githubusercontent.com/Freika/dawarich/master/#-supported-location-tracking&quot;&gt;supported apps&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🗺️ Location History Visualization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;View your historical data on a map with customizable layers: 
  &lt;ul&gt; 
   &lt;li&gt;Heatmap&lt;/li&gt; 
   &lt;li&gt;Points&lt;/li&gt; 
   &lt;li&gt;Lines between points&lt;/li&gt; 
   &lt;li&gt;Fog of War&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔵 Areas&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Draw areas on the map so Dawarich could suggest your visits there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📍 Visits (Beta)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dawarich can suggest places you&#39;ve visited and allow you to confirm or reject them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📊 Statistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Analyze your travel history: number of countries/cities visited, distance traveled, and time spent, broken down by year and month.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;✈️ Trips&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a trip to visualize your travels between two points in time. You&#39;ll be able to see the route, distance, and time spent, and also add notes to your trip. If you have Immich or Photoprism integration, you&#39;ll also be able to see photos from your trips!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📸 Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide credentials for Immich or Photoprism (or both!) and Dawarich will automatically import geodata from your photos.&lt;/li&gt; 
 &lt;li&gt;You&#39;ll also be able to visualize your photos on the map!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📥 Import Your Data&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Import from various sources: 
  &lt;ul&gt; 
   &lt;li&gt;Google Maps Timeline&lt;/li&gt; 
   &lt;li&gt;OwnTracks&lt;/li&gt; 
   &lt;li&gt;Strava&lt;/li&gt; 
   &lt;li&gt;Immich&lt;/li&gt; 
   &lt;li&gt;GPX/GeoJSON files&lt;/li&gt; 
   &lt;li&gt;Photos’ EXIF data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📤 Export Your Data&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Export your data to GeoJSON or GPX formats.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📚 Guides and Tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/reverse-proxy&quot;&gt;Set up Reverse Proxy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/import-existing-data#sources-of-data&quot;&gt;Import Google Takeout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#overland&quot;&gt;Track Location with Overland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/track-your-location#owntracks&quot;&gt;Track Location with OwnTracks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dawarich.app/docs/tutorials/export-your-data&quot;&gt;Export Your Data&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🛠️ More guides available in the &lt;a href=&quot;https://dawarich.app/docs/intro&quot;&gt;Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🛠️ Environment Variables&lt;/h2&gt; 
&lt;p&gt;Check the documentation on the &lt;a href=&quot;https://dawarich.app/docs/environment-variables-and-settings&quot;&gt;website&lt;/a&gt; for detailed information about environment variables and settings.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;💫 Star History&lt;/h2&gt; 
&lt;p&gt;As you could probably guess, I like statistics.&lt;/p&gt; 
&lt;a href=&quot;https://star-history.com/#Freika/dawarich&amp;amp;Date&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&amp;amp;theme=dark&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&quot; /&gt; 
  &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&quot; /&gt; 
 &lt;/picture&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>gitlabhq/gitlabhq</title>
      <link>https://github.com/gitlabhq/gitlabhq</link>
      <description>&lt;p&gt;GitLab CE Mirror | Please open new issues in our issue tracker on GitLab.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitLab&lt;/h1&gt; 
&lt;h2&gt;Canonical source&lt;/h2&gt; 
&lt;p&gt;The canonical source of GitLab where all development takes place is &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab&quot;&gt;hosted on GitLab.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you wish to clone a copy of GitLab without proprietary code, you can use the read-only mirror of GitLab located at &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-foss/&quot;&gt;https://gitlab.com/gitlab-org/gitlab-foss/&lt;/a&gt;. However, please do not submit any issues and/or merge requests to that project.&lt;/p&gt; 
&lt;h2&gt;Free trial&lt;/h2&gt; 
&lt;p&gt;You can request a free trial of GitLab Ultimate &lt;a href=&quot;https://about.gitlab.com/free-trial/&quot;&gt;on our website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Open source software to collaborate on code&lt;/h2&gt; 
&lt;p&gt;To see how GitLab looks please see the &lt;a href=&quot;https://about.gitlab.com/features/&quot;&gt;features page on our website&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Manage Git repositories with fine grained access controls that keep your code secure&lt;/li&gt; 
 &lt;li&gt;Perform code reviews and enhance collaboration with merge requests&lt;/li&gt; 
 &lt;li&gt;Complete continuous integration (CI) and continuous deployment/delivery (CD) pipelines to build, test, and deploy your applications&lt;/li&gt; 
 &lt;li&gt;Each project can also have an issue tracker, issue board, and a wiki&lt;/li&gt; 
 &lt;li&gt;Used by more than 100,000 organizations, GitLab is the most popular solution to manage Git repositories on-premises&lt;/li&gt; 
 &lt;li&gt;Completely free and open source (MIT Expat license)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Editions&lt;/h2&gt; 
&lt;p&gt;There are three editions of GitLab:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitLab Community Edition (CE) is available freely under the MIT Expat license.&lt;/li&gt; 
 &lt;li&gt;GitLab Enterprise Edition (EE) includes &lt;a href=&quot;https://about.gitlab.com/pricing/#compare-options&quot;&gt;extra features&lt;/a&gt; that are more useful for organizations with more than 100 users. To use EE and get official support please &lt;a href=&quot;https://about.gitlab.com/pricing/&quot;&gt;become a subscriber&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;JiHu Edition (JH) tailored specifically for the &lt;a href=&quot;https://about.gitlab.cn/&quot;&gt;Chinese market&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for licensing information as it pertains to files in this repository.&lt;/p&gt; 
&lt;h2&gt;Hiring&lt;/h2&gt; 
&lt;p&gt;We are hiring developers, support engineers, and production engineers all the time, please see our &lt;a href=&quot;https://about.gitlab.com/jobs/&quot;&gt;jobs page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Website&lt;/h2&gt; 
&lt;p&gt;On &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;about.gitlab.com&lt;/a&gt; you can find more information about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/pricing/&quot;&gt;Subscriptions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/services/&quot;&gt;Professional Services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/community/&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/gitlab-com/&quot;&gt;Hosted GitLab.com&lt;/a&gt; use GitLab as a free service&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/features/#enterprise&quot;&gt;GitLab Enterprise Edition&lt;/a&gt; with additional features aimed at larger organizations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/solutions/continuous-integration/&quot;&gt;GitLab CI&lt;/a&gt; a continuous integration (CI) server that is easy to integrate with GitLab.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/doc/install/requirements.md&quot;&gt;requirements documentation&lt;/a&gt; for system requirements and more information about the supported operating systems.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The recommended way to install GitLab is with the &lt;a href=&quot;https://about.gitlab.com/downloads/&quot;&gt;Omnibus packages&lt;/a&gt; on our package server. Compared to &lt;a href=&quot;https://docs.gitlab.com/install/installation/&quot;&gt;a self-compiled installation&lt;/a&gt;, this is faster and less error prone. Just select your operating system, download the respective package (Debian or RPM) and install it using the system&#39;s package manager.&lt;/p&gt; 
&lt;p&gt;For more information about other installation methods, see &lt;a href=&quot;https://about.gitlab.com/install/&quot;&gt;install GitLab&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;GitLab is an open source project and we are very happy to accept community contributions. Please refer to &lt;a href=&quot;https://about.gitlab.com/contributing/&quot;&gt;Contributing to GitLab page&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Install a development environment&lt;/h2&gt; 
&lt;p&gt;To work on GitLab itself, we recommend setting up your development environment with &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-development-kit&quot;&gt;the GitLab Development Kit (GDK)&lt;/a&gt;. If you do not use GDK, you need to &lt;a href=&quot;https://docs.gitlab.com/install/installation/&quot;&gt;install and configure all the dependencies yourself&lt;/a&gt;, this is a lot of work and error prone. One small thing you also have to do when installing it yourself is to copy the example development Puma configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cp config/puma.example.development.rb config/puma.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instructions on how to start GitLab and how to run the tests can be found in the &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-development-kit#getting-started&quot;&gt;getting started section of the GitLab Development Kit&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Software stack&lt;/h2&gt; 
&lt;p&gt;GitLab is a Ruby on Rails application that runs on the following software:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu/Debian/CentOS/RHEL/OpenSUSE&lt;/li&gt; 
 &lt;li&gt;Ruby (MRI) 3.2.5&lt;/li&gt; 
 &lt;li&gt;Git 2.33+&lt;/li&gt; 
 &lt;li&gt;Redis 6.0+&lt;/li&gt; 
 &lt;li&gt;PostgreSQL 14.9+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information please see the &lt;a href=&quot;https://docs.gitlab.com/ee/development/architecture.html&quot;&gt;architecture&lt;/a&gt; and &lt;a href=&quot;https://docs.gitlab.com/ee/install/requirements.html&quot;&gt;requirements&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;UX design&lt;/h2&gt; 
&lt;p&gt;Please adhere to the &lt;a href=&quot;https://design.gitlab.com/&quot;&gt;UX Guide&lt;/a&gt; when creating designs and implementing code.&lt;/p&gt; 
&lt;h2&gt;Third-party applications&lt;/h2&gt; 
&lt;p&gt;There are a lot of &lt;a href=&quot;https://about.gitlab.com/applications/&quot;&gt;third-party applications integrating with GitLab&lt;/a&gt;. These include GUI Git clients, mobile applications and API wrappers for various languages.&lt;/p&gt; 
&lt;h2&gt;GitLab release cycle&lt;/h2&gt; 
&lt;p&gt;For more information about the release process see the &lt;a href=&quot;https://gitlab.com/gitlab-org/release-tools/blob/master/README.md&quot;&gt;release documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Upgrading&lt;/h2&gt; 
&lt;p&gt;For upgrading information please see our &lt;a href=&quot;https://about.gitlab.com/update/&quot;&gt;update page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;All documentation can be found on &lt;a href=&quot;https://docs.gitlab.com&quot;&gt;https://docs.gitlab.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://about.gitlab.com/getting-help/&quot;&gt;Getting help for GitLab&lt;/a&gt; on our website for the many options to get help.&lt;/p&gt; 
&lt;h2&gt;Why should I use GitLab?&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href=&quot;https://about.gitlab.com/why-gitlab/&quot;&gt;why our customers choose GitLab&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docusealco/docuseal</title>
      <link>https://github.com/docusealco/docuseal</link>
      <description>&lt;p&gt;Open source DocuSign alternative. Create, fill, and sign digital documents ✍️&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot; style=&quot;border-bottom: none&quot;&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://www.docuseal.com&quot;&gt; &lt;img alt=&quot;DocuSeal&quot; src=&quot;https://github.com/docusealco/docuseal/assets/5418788/c12cd051-81cd-4402-bc3a-92f2cfdc1b06&quot; width=&quot;80&quot; /&gt; &lt;br /&gt; &lt;/a&gt; DocuSeal 
 &lt;/div&gt; &lt;/h1&gt; 
&lt;h3 align=&quot;center&quot;&gt; Open source document filling and signing &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://hub.docker.com/r/docuseal/docuseal&quot;&gt; &lt;img alt=&quot;Docker releases&quot; src=&quot;https://img.shields.io/docker/v/docuseal/docuseal&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/qygYCDGck9&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1125112641170448454?logo=discord&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=docusealco&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/docusealco?style=social&quot; alt=&quot;Follow @docusealco&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt; DocuSeal is an open source platform that provides secure and efficient digital document signing and processing. Create PDF forms to have them filled and signed online on any device with an easy-to-use, mobile-optimized web tool. &lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt; &lt;a href=&quot;https://demo.docuseal.tech&quot;&gt;✨ Live Demo&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href=&quot;https://docuseal.com/sign_up&quot;&gt;☁️ Try in Cloud&lt;/a&gt; &lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://demo.docuseal.tech&quot;&gt;&lt;img src=&quot;https://github.com/docusealco/docuseal/assets/5418788/d8703ea3-361a-423f-8bfe-eff1bd9dbe14&quot; alt=&quot;Demo&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;PDF form fields builder (WYSIWYG)&lt;/li&gt; 
 &lt;li&gt;12 field types available (Signature, Date, File, Checkbox etc.)&lt;/li&gt; 
 &lt;li&gt;Multiple submitters per document&lt;/li&gt; 
 &lt;li&gt;Automated emails via SMTP&lt;/li&gt; 
 &lt;li&gt;Files storage on disk or AWS S3, Google Storage, Azure Cloud&lt;/li&gt; 
 &lt;li&gt;Automatic PDF eSignature&lt;/li&gt; 
 &lt;li&gt;PDF signature verification&lt;/li&gt; 
 &lt;li&gt;Users management&lt;/li&gt; 
 &lt;li&gt;Mobile-optimized&lt;/li&gt; 
 &lt;li&gt;6 UI languages with signing available in 14 languages&lt;/li&gt; 
 &lt;li&gt;API and Webhooks for integrations&lt;/li&gt; 
 &lt;li&gt;Easy to deploy in minutes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Pro Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Company logo and white-label&lt;/li&gt; 
 &lt;li&gt;User roles&lt;/li&gt; 
 &lt;li&gt;Automated reminders&lt;/li&gt; 
 &lt;li&gt;Invitation and identify verification via SMS&lt;/li&gt; 
 &lt;li&gt;Conditional fields and formulas&lt;/li&gt; 
 &lt;li&gt;Bulk send with CSV, XLSX spreadsheet import&lt;/li&gt; 
 &lt;li&gt;SSO / SAML&lt;/li&gt; 
 &lt;li&gt;Template creation with HTML API (&lt;a href=&quot;https://www.docuseal.com/guides/create-pdf-document-fillable-form-with-html-api&quot;&gt;Guide&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Template creation with PDF or DOCX and field tags API (&lt;a href=&quot;https://www.docuseal.com/guides/use-embedded-text-field-tags-in-the-pdf-to-create-a-fillable-form&quot;&gt;Guide&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Embedded signing form (&lt;a href=&quot;https://github.com/docusealco/docuseal-react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/docusealco/docuseal-vue&quot;&gt;Vue&lt;/a&gt;, &lt;a href=&quot;https://github.com/docusealco/docuseal-angular&quot;&gt;Angular&lt;/a&gt; or &lt;a href=&quot;https://www.docuseal.com/docs/embedded&quot;&gt;JavaScript&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Embedded document form builder (&lt;a href=&quot;https://github.com/docusealco/docuseal-react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/docusealco/docuseal-vue&quot;&gt;Vue&lt;/a&gt;, &lt;a href=&quot;https://github.com/docusealco/docuseal-angular&quot;&gt;Angular&lt;/a&gt; or &lt;a href=&quot;https://www.docuseal.com/docs/embedded&quot;&gt;JavaScript&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.docuseal.com/pricing&quot;&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deploy&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Heroku&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Railway&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/docusealco/docuseal-heroku&quot;&gt;&lt;img alt=&quot;Deploy on Heroku&quot; src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot; height=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://railway.app/template/IGoDnc?referralCode=ruU7JR&quot;&gt;&lt;img alt=&quot;Deploy on Railway&quot; src=&quot;https://railway.app/button.svg?sanitize=true&quot; height=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;strong&gt;DigitalOcean&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Render&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://cloud.digitalocean.com/apps/new?repo=https://github.com/docusealco/docuseal-digitalocean/tree/master&amp;amp;refcode=421d50f53990&quot;&gt;&lt;img alt=&quot;Deploy on DigitalOcean&quot; src=&quot;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&quot; height=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://render.com/deploy?repo=https://github.com/docusealco/docuseal-render&quot;&gt;&lt;img alt=&quot;Deploy to Render&quot; src=&quot;https://render.com/images/deploy-to-render-button.svg?sanitize=true&quot; height=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Docker&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --name docuseal -p 3000:3000 -v.:/data docuseal/docuseal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default DocuSeal docker container uses an SQLite database to store data and configurations. Alternatively, it is possible use PostgreSQL or MySQL databases by specifying the &lt;code&gt;DATABASE_URL&lt;/code&gt; env variable.&lt;/p&gt; 
&lt;h4&gt;Docker Compose&lt;/h4&gt; 
&lt;p&gt;Download docker-compose.yml into your private server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl https://raw.githubusercontent.com/docusealco/docuseal/master/docker-compose.yml &amp;gt; docker-compose.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the app under a custom domain over https using docker compose (make sure your DNS points to the server to automatically issue ssl certs with Caddy):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo HOST=your-domain-name.com docker compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;For Businesses&lt;/h2&gt; 
&lt;h3&gt;Integrate seamless document signing into your web or mobile apps with DocuSeal&lt;/h3&gt; 
&lt;p&gt;At DocuSeal we have expertise and technologies to make documents creation, filling, signing and processing seamlessly integrated with your product. We specialize in working with various industries, including &lt;strong&gt;Banking, Healthcare, Transport, Real Estate, eCommerce, KYC, CRM, and other software products&lt;/strong&gt; that require bulk document signing. By leveraging DocuSeal, we can assist in reducing the overall cost of developing and processing electronic documents while ensuring security and compliance with local electronic document laws.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.docuseal.com/contact&quot;&gt;Book a Meeting&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Distributed under the AGPLv3 License. See &lt;a href=&quot;https://github.com/docusealco/docuseal/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information. Unless otherwise noted, all files © 2023 DocuSeal LLC.&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.docuseal.com/online-signature&quot;&gt;Signature Maker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.docuseal.com/sign-documents-online&quot;&gt;Sign Document Online&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.docuseal.com/fill-pdf&quot;&gt;Fill PDF Online&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>crmne/ruby_llm</title>
      <link>https://github.com/crmne/ruby_llm</link>
      <description>&lt;p&gt;Stop juggling AI SDKs! RubyLLM offers one delightful Ruby interface for OpenAI, Anthropic, Gemini, Bedrock, OpenRouter, DeepSeek, Ollama &amp; compatible APIs. Chat, Vision, Audio, PDF, Images, Embeddings, Tools, Streaming &amp; Rails integration.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;/docs/assets/images/logotype_dark.svg&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/crmne/ruby_llm/main/docs/assets/images/logotype.svg?sanitize=true&quot; alt=&quot;RubyLLM&quot; height=&quot;120&quot; width=&quot;250&quot; /&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;strong&gt;One &lt;em&gt;beautiful&lt;/em&gt; Ruby API for GPT, Claude, Gemini, and more.&lt;/strong&gt; Easily build chatbots, AI agents, RAG applications, and content generators. Features chat (text, images, audio, PDFs), image generation, embeddings, tools (function calling), structured output, Rails integration, and streaming. Works with OpenAI, Anthropic, Google Gemini, AWS Bedrock, DeepSeek, Mistral, Ollama (local models), OpenRouter, Perplexity, GPUStack, and any OpenAI-compatible API.&lt;/p&gt; 
&lt;div class=&quot;badge-container&quot;&gt; 
 &lt;a href=&quot;https://badge.fury.io/rb/ruby_llm&quot;&gt;&lt;img src=&quot;https://badge.fury.io/rb/ruby_llm.svg?a=3&quot; alt=&quot;Gem Version&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/testdouble/standard&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&quot; alt=&quot;Ruby Style Guide&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://rubygems.org/gems/ruby_llm&quot;&gt;&lt;img alt=&quot;Gem Downloads&quot; src=&quot;https://img.shields.io/gem/dt/ruby_llm&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://codecov.io/gh/crmne/ruby_llm&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/crmne/ruby_llm/branch/main/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Battle tested at &lt;a href=&quot;https://chatwithwork.com&quot;&gt;
  &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://chatwithwork.com/logotype-dark.svg&quot; /&gt;
   &lt;img src=&quot;https://chatwithwork.com/logotype.svg?sanitize=true&quot; alt=&quot;Chat with Work&quot; height=&quot;30&quot; align=&quot;absmiddle&quot; /&gt;
  &lt;/picture&gt;&lt;/a&gt; — &lt;em&gt;Claude Code for your documents&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;The problem with AI libraries&lt;/h2&gt; 
&lt;p&gt;Every AI provider comes with its own client library, its own response format, its own conventions for streaming, and its own way of handling errors. Want to use multiple providers? Prepare to juggle incompatible APIs and bloated dependencies.&lt;/p&gt; 
&lt;p&gt;RubyLLM fixes all that. One beautiful API for everything. One consistent format. Minimal dependencies — just Faraday, Zeitwerk, and Marcel. Because working with AI should be a joy, not a chore.&lt;/p&gt; 
&lt;h2&gt;What makes it great&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Just ask questions
chat = RubyLLM.chat
chat.ask &quot;What&#39;s the best way to learn Ruby?&quot;

# Analyze images, audio, documents, and text files
chat.ask &quot;What&#39;s in this image?&quot;, with: &quot;ruby_conf.jpg&quot;
chat.ask &quot;Describe this meeting&quot;, with: &quot;meeting.wav&quot;
chat.ask &quot;Summarize this document&quot;, with: &quot;contract.pdf&quot;
chat.ask &quot;Explain this code&quot;, with: &quot;app.rb&quot;

# Multiple files at once - types automatically detected
chat.ask &quot;Analyze these files&quot;, with: [&quot;diagram.png&quot;, &quot;report.pdf&quot;, &quot;notes.txt&quot;]

# Stream responses in real-time
chat.ask &quot;Tell me a story about a Ruby programmer&quot; do |chunk|
  print chunk.content
end

# Generate images
RubyLLM.paint &quot;a sunset over mountains in watercolor style&quot;

# Create vector embeddings
RubyLLM.embed &quot;Ruby is elegant and expressive&quot;

# Let AI use your code
class Weather &amp;lt; RubyLLM::Tool
  description &quot;Gets current weather for a location&quot;
  param :latitude, desc: &quot;Latitude (e.g., 52.5200)&quot;
  param :longitude, desc: &quot;Longitude (e.g., 13.4050)&quot;

  def execute(latitude:, longitude:)
    url = &quot;https://api.open-meteo.com/v1/forecast?latitude=#{latitude}&amp;amp;longitude=#{longitude}&amp;amp;current=temperature_2m,wind_speed_10m&quot;

    response = Faraday.get(url)
    data = JSON.parse(response.body)
  rescue =&amp;gt; e
    { error: e.message }
  end
end

chat.with_tool(Weather).ask &quot;What&#39;s the weather in Berlin? (52.5200, 13.4050)&quot;

# Get structured output with JSON schemas
class ProductSchema &amp;lt; RubyLLM::Schema
  string :name, description: &quot;Product name&quot;
  number :price, description: &quot;Price in USD&quot;
  array :features, description: &quot;Key features&quot; do
    string description: &quot;Feature description&quot;
  end
end

response = chat.with_schema(ProductSchema)
               .ask &quot;Analyze this product description&quot;, with: &quot;product.txt&quot;
# response.content =&amp;gt; { &quot;name&quot; =&amp;gt; &quot;...&quot;, &quot;price&quot; =&amp;gt; 99.99, &quot;features&quot; =&amp;gt; [...] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Core Capabilities&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;💬 &lt;strong&gt;Unified Chat:&lt;/strong&gt; Converse with models from OpenAI, Anthropic, Gemini, Bedrock, OpenRouter, DeepSeek, Perplexity, Mistral, Ollama, or any OpenAI-compatible API using &lt;code&gt;RubyLLM.chat&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;👁️ &lt;strong&gt;Vision:&lt;/strong&gt; Analyze images within chats.&lt;/li&gt; 
 &lt;li&gt;🔊 &lt;strong&gt;Audio:&lt;/strong&gt; Transcribe and understand audio content.&lt;/li&gt; 
 &lt;li&gt;📄 &lt;strong&gt;Document Analysis:&lt;/strong&gt; Extract information from PDFs, text files, CSV, JSON, XML, Markdown, and code files.&lt;/li&gt; 
 &lt;li&gt;🖼️ &lt;strong&gt;Image Generation:&lt;/strong&gt; Create images with &lt;code&gt;RubyLLM.paint&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;📊 &lt;strong&gt;Embeddings:&lt;/strong&gt; Generate text embeddings for vector search with &lt;code&gt;RubyLLM.embed&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;Tools (Function Calling):&lt;/strong&gt; Let AI models call your Ruby code using &lt;code&gt;RubyLLM::Tool&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;📋 &lt;strong&gt;Structured Output:&lt;/strong&gt; Guarantee responses conform to JSON schemas with &lt;code&gt;RubyLLM::Schema&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🚂 &lt;strong&gt;Rails Integration:&lt;/strong&gt; Easily persist chats, messages, and tool calls using &lt;code&gt;acts_as_chat&lt;/code&gt; and &lt;code&gt;acts_as_message&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🌊 &lt;strong&gt;Streaming:&lt;/strong&gt; Process responses in real-time with idiomatic Ruby blocks.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Async Support:&lt;/strong&gt; Built-in fiber-based concurrency for high-performance operations.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Smart Configuration:&lt;/strong&gt; Global and scoped configs with automatic retries and proxy support.&lt;/li&gt; 
 &lt;li&gt;📚 &lt;strong&gt;Model Registry:&lt;/strong&gt; Access 500+ models with capability detection and pricing info.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Add to your Gemfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &#39;ruby_llm&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Configure your API keys (using environment variables is recommended):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# config/initializers/ruby_llm.rb or similar
RubyLLM.configure do |config|
  config.openai_api_key = ENV.fetch(&#39;OPENAI_API_KEY&#39;, nil)
  # Add keys ONLY for providers you intend to use
  # config.anthropic_api_key = ENV.fetch(&#39;ANTHROPIC_API_KEY&#39;, nil)
  # ... see Configuration guide for all options ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://rubyllm.com/installation&quot;&gt;Installation Guide&lt;/a&gt; for full details.&lt;/p&gt; 
&lt;h2&gt;Rails Integration&lt;/h2&gt; 
&lt;p&gt;Add persistence to your chat models effortlessly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Generate models and migrations
rails generate ruby_llm:install
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Or add to existing models
class Chat &amp;lt; ApplicationRecord
  acts_as_chat # Automatically saves messages &amp;amp; tool calls
end

class Message &amp;lt; ApplicationRecord
  acts_as_message
end

class ToolCall &amp;lt; ApplicationRecord
  acts_as_tool_call
end

# Now chats persist automatically
chat = Chat.create!(model_id: &quot;gpt-4.1-nano&quot;)
chat.ask(&quot;What&#39;s in this file?&quot;, with: &quot;report.pdf&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://rubyllm.com/guides/rails&quot;&gt;Rails Integration Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;Dive deeper with the official documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Guides:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/chat&quot;&gt;Chatting with AI Models&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/tools&quot;&gt;Using Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/streaming&quot;&gt;Streaming Responses&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/rails&quot;&gt;Rails Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/image-generation&quot;&gt;Image Generation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/embeddings&quot;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/models&quot;&gt;Working with Models&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://rubyllm.com/guides/available-models&quot;&gt;Available Models&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see &lt;a href=&quot;https://raw.githubusercontent.com/crmne/ruby_llm/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for details on setup, testing, and contribution guidelines.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Released under the MIT License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mastodon/mastodon</title>
      <link>https://github.com/mastodon/mastodon</link>
      <description>&lt;p&gt;Your self-hosted, globally interconnected microblogging community&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Want to learn more about Mastodon? Click below to find out more in a video.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://www.youtube.com/watch?v=IPSbNdBmWKE&quot;&gt; &lt;img alt=&quot;Mastodon hero image&quot; src=&quot;https://github.com/user-attachments/assets/ef53f5e9-c0d8-484d-9f53-00efdebb92c3&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://github.com/mastodon/mastodon/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/mastodon/mastodon.svg?sanitize=true&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://github.com/mastodon/mastodon/actions/workflows/test-ruby.yml&quot;&gt; &lt;img src=&quot;https://github.com/mastodon/mastodon/actions/workflows/test-ruby.yml/badge.svg?sanitize=true&quot; alt=&quot;Ruby Testing&quot; /&gt;&lt;/a&gt; &lt;a style=&quot;text-decoration:none&quot; href=&quot;https://crowdin.com/project/mastodon&quot;&gt; &lt;img src=&quot;https://d322cqt584bo4o.cloudfront.net/mastodon/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Mastodon is a &lt;strong&gt;free, open-source social network server&lt;/strong&gt; based on &lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt; where users can follow friends and discover new ones. On Mastodon, users can publish anything they want: links, pictures, text, and video. All Mastodon servers are interoperable as a federated network (users on one server can seamlessly communicate with users from another one, including non-Mastodon software that implements ActivityPub!)&lt;/p&gt; 
&lt;h2&gt;Navigation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org&quot;&gt;Project homepage 🐘&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/sponsors#donate&quot;&gt;Donate to support development 🎁&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://joinmastodon.org/sponsors&quot;&gt;View sponsors&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.joinmastodon.org&quot;&gt;Blog 📰&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.joinmastodon.org&quot;&gt;Documentation 📚&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mastodon/mastodon/pkgs/container/mastodon&quot;&gt;Official container image 🚢&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/app/javascript/images/elephant_ui_working.svg?raw=true&quot; align=&quot;right&quot; width=&quot;30%&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Part of the Fediverse. Based on open standards, with no vendor lock-in.&lt;/strong&gt; - the network goes beyond just Mastodon; anything that implements ActivityPub is part of a broader social network known as &lt;a href=&quot;https://jointhefediverse.net/&quot;&gt;the Fediverse&lt;/a&gt;. You can follow and interact with users on other servers (including those running different software), and they can follow you back.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Real-time, chronological timeline updates&lt;/strong&gt; - updates of people you&#39;re following appear in real-time in the UI.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Media attachments&lt;/strong&gt; - upload and view images and videos attached to the updates. Videos with no audio track are treated like animated GIFs; normal videos loop continuously.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Safety and moderation tools&lt;/strong&gt; - Mastodon includes private posts, locked accounts, phrase filtering, muting, blocking, and many other features, along with a reporting and moderation system.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;OAuth2 and a straightforward REST API&lt;/strong&gt; - Mastodon acts as an OAuth2 provider, and third party apps can use the REST and Streaming APIs. This results in a &lt;a href=&quot;https://joinmastodon.org/apps&quot;&gt;rich app ecosystem&lt;/a&gt; with a variety of choices!&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;h3&gt;Tech stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails&quot;&gt;Ruby on Rails&lt;/a&gt; powers the REST API and other web pages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; is the main database.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;https://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt; are used for caching and queueing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; powers the streaming API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt; and &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; are used for the dynamic parts of the interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; supports testing on real devices and browsers. (This project is tested with BrowserStack)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chromatic.com/&quot;&gt;Chromatic&lt;/a&gt; provides visual regression testing. (This project is tested with Chromatic)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt; 3.2+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; 13+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt; 6.2+&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; 20+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This repository includes deployment configurations for &lt;strong&gt;Docker and docker-compose&lt;/strong&gt;, as well as for other environments like Heroku and Scalingo. For Helm charts, reference the &lt;a href=&quot;https://github.com/mastodon/chart&quot;&gt;mastodon/chart repository&lt;/a&gt;. A &lt;a href=&quot;https://docs.joinmastodon.org/admin/install/&quot;&gt;&lt;strong&gt;standalone&lt;/strong&gt; installation guide&lt;/a&gt; is available in the main documentation.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Mastodon is &lt;strong&gt;free, open-source software&lt;/strong&gt; licensed under &lt;strong&gt;AGPLv3&lt;/strong&gt;. We welcome contributions and help from anyone who wants to improve the project.&lt;/p&gt; 
&lt;p&gt;You should read the overall &lt;a href=&quot;https://github.com/mastodon/.github/raw/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; guide, which covers our development processes.&lt;/p&gt; 
&lt;p&gt;You should also read and understand the &lt;a href=&quot;https://github.com/mastodon/.github/raw/main/CODE_OF_CONDUCT.md&quot;&gt;CODE OF CONDUCT&lt;/a&gt; that enables us to maintain a welcoming and inclusive community. Collaboration begins with mutual respect and understanding.&lt;/p&gt; 
&lt;p&gt;You can learn about setting up a development environment in the &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/docs/DEVELOPMENT.md&quot;&gt;DEVELOPMENT&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;p&gt;If you would like to help with translations 🌐 you can do so on &lt;a href=&quot;https://crowdin.com/project/mastodon&quot;&gt;Crowdin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2016-2025 Eugen Rochko (+ &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/AUTHORS.md&quot;&gt;&lt;code&gt;mastodon authors&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;Licensed under GNU Affero General Public License as stated in the &lt;a href=&quot;https://raw.githubusercontent.com/mastodon/mastodon/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Copyright (c) 2016-2025 Eugen Rochko &amp;amp; other Mastodon contributors

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU Affero General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
details.

You should have received a copy of the GNU Affero General Public License along
with this program. If not, see https://www.gnu.org/licenses/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>heartcombo/devise</title>
      <link>https://github.com/heartcombo/devise</link>
      <description>&lt;p&gt;Flexible authentication solution for Rails with Warden.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/heartcombo/devise/main/devise.png&quot; alt=&quot;Devise Logo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Devise is a flexible authentication solution for Rails based on Warden. It:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is Rack based;&lt;/li&gt; 
 &lt;li&gt;Is a complete MVC solution based on Rails engines;&lt;/li&gt; 
 &lt;li&gt;Allows you to have multiple models signed in at the same time;&lt;/li&gt; 
 &lt;li&gt;Is based on a modularity concept: use only what you really need.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It&#39;s composed of 10 modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/DatabaseAuthenticatable&quot;&gt;Database Authenticatable&lt;/a&gt;: hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Omniauthable&quot;&gt;Omniauthable&lt;/a&gt;: adds OmniAuth (&lt;a href=&quot;https://github.com/omniauth/omniauth&quot;&gt;https://github.com/omniauth/omniauth&lt;/a&gt;) support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Confirmable&quot;&gt;Confirmable&lt;/a&gt;: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Recoverable&quot;&gt;Recoverable&lt;/a&gt;: resets the user password and sends reset instructions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Registerable&quot;&gt;Registerable&lt;/a&gt;: handles signing up users through a registration process, also allowing them to edit and destroy their account.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Rememberable&quot;&gt;Rememberable&lt;/a&gt;: manages generating and clearing a token for remembering the user from a saved cookie.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Trackable&quot;&gt;Trackable&lt;/a&gt;: tracks sign in count, timestamps and IP address.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Timeoutable&quot;&gt;Timeoutable&lt;/a&gt;: expires sessions that have not been active in a specified period of time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Validatable&quot;&gt;Validatable&lt;/a&gt;: provides validations of email and password. It&#39;s optional and can be customized, so you&#39;re able to define your own validations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Lockable&quot;&gt;Lockable&lt;/a&gt;: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#information&quot;&gt;Information&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#the-devise-wiki&quot;&gt;The Devise wiki&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#bug-reports&quot;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#stackoverflow-and-mailing-list&quot;&gt;StackOverflow and Mailing List&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#rdocs&quot;&gt;RDocs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#example-applications&quot;&gt;Example applications&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#starting-with-rails&quot;&gt;Starting with Rails?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-filters-and-helpers&quot;&gt;Controller filters and helpers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-models&quot;&gt;Configuring Models&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#strong-parameters&quot;&gt;Strong Parameters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-views&quot;&gt;Configuring views&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-controllers&quot;&gt;Configuring controllers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-routes&quot;&gt;Configuring routes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#i18n&quot;&gt;I18n&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#test-helpers&quot;&gt;Test helpers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-tests&quot;&gt;Controller tests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&quot;&gt;Integration tests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#omniauth&quot;&gt;OmniAuth&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-multiple-models&quot;&gt;Configuring multiple models&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#active-job-integration&quot;&gt;Active Job Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#password-reset-tokens-and-rails-logs&quot;&gt;Password reset tokens and Rails logs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#other-orms&quot;&gt;Other ORMs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#rails-api-mode&quot;&gt;Rails API mode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#additional-information&quot;&gt;Additional information&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#warden&quot;&gt;Warden&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#contributors&quot;&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /TOC --&gt; 
&lt;h2&gt;Information&lt;/h2&gt; 
&lt;h3&gt;The Devise wiki&lt;/h3&gt; 
&lt;p&gt;The Devise Wiki has lots of additional information about Devise including many &quot;how-to&quot; articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki&quot;&gt;https://github.com/heartcombo/devise/wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Bug reports&lt;/h3&gt; 
&lt;p&gt;If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/Bug-reports&quot;&gt;https://github.com/heartcombo/devise/wiki/Bug-reports&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you have discovered a security related bug, please do &lt;em&gt;NOT&lt;/em&gt; use the GitHub issue tracker. Send an email to &lt;a href=&quot;mailto:heartcombo@googlegroups.com&quot;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;StackOverflow and Mailing List&lt;/h3&gt; 
&lt;p&gt;If you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/devise&quot;&gt;http://stackoverflow.com/questions/tagged/devise&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The deprecated mailing list can still be read on&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/group/plataformatec-devise&quot;&gt;https://groups.google.com/group/plataformatec-devise&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RDocs&lt;/h3&gt; 
&lt;p&gt;You can view the Devise documentation in RDoc format here:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://rubydoc.info/github/heartcombo/devise/main/frames&quot;&gt;http://rubydoc.info/github/heartcombo/devise/main/frames&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you need to use Devise with previous versions of Rails, you can always run &quot;gem server&quot; from the command line after you install the gem to access the old documentation.&lt;/p&gt; 
&lt;h3&gt;Example applications&lt;/h3&gt; 
&lt;p&gt;There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/Example-Applications&quot;&gt;https://github.com/heartcombo/devise/wiki/Example-Applications&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;p&gt;Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/Extensions&quot;&gt;https://github.com/heartcombo/devise/wiki/Extensions&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/Contributing&quot;&gt;https://github.com/heartcombo/devise/wiki/Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You will usually want to write tests for your changes. To run the test suite, go into Devise&#39;s top-level directory and run &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bin/test&lt;/code&gt;. Devise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: &lt;code&gt;DEVISE_ORM&lt;/code&gt; and &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;DEVISE_ORM&lt;/h3&gt; 
&lt;p&gt;Since Devise supports both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM. The default value of &lt;code&gt;DEVISE_ORM&lt;/code&gt; is &lt;code&gt;active_record&lt;/code&gt;. To run the tests for Mongoid, you can pass &lt;code&gt;mongoid&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DEVISE_ORM=mongoid bin/test

==&amp;gt; Devise.orm = :mongoid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.&lt;/p&gt; 
&lt;p&gt;Please note that the command output will show the variable value being used.&lt;/p&gt; 
&lt;h3&gt;BUNDLE_GEMFILE&lt;/h3&gt; 
&lt;p&gt;We can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory). Inside the &lt;a href=&quot;https://github.com/heartcombo/devise/tree/main/gemfiles&quot;&gt;gemfiles&lt;/a&gt; directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks using some of them. If that&#39;s the case, you can simulate the same environment using the &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt; variable. For example, if the tests broke using Ruby 3.0.0 and Rails 6.0, you can do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rbenv shell 3.0.0 # or rvm use 3.0.0
BUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install
BUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also combine both of them if the tests broke for Mongoid:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;BUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install
BUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 DEVISE_ORM=mongoid bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;p&gt;Devise uses &lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;Mini Test&lt;/a&gt; as test framework.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Running all tests:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Running tests for an specific file:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/test test/models/trackable_test.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Running a specific test given a regex:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/test test/models/trackable_test.rb:16
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Starting with Rails?&lt;/h2&gt; 
&lt;p&gt;If you are building your first Rails application, we recommend you &lt;em&gt;do not&lt;/em&gt; use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Here&#39;s a few resources that should help you get started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Michael Hartl&#39;s online book: &lt;a href=&quot;https://www.railstutorial.org/book/modeling_users&quot;&gt;https://www.railstutorial.org/book/modeling_users&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ryan Bates&#39; Railscasts: &lt;a href=&quot;http://railscasts.com/episodes/250-authentication-from-scratch&quot;&gt;http://railscasts.com/episodes/250-authentication-from-scratch&lt;/a&gt; and &lt;a href=&quot;http://railscasts.com/episodes/250-authentication-from-scratch-revised&quot;&gt;http://railscasts.com/episodes/250-authentication-from-scratch-revised&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Codecademy&#39;s Ruby on Rails: Authentication and Authorization: &lt;a href=&quot;https://www.codecademy.com/learn/rails-auth&quot;&gt;https://www.codecademy.com/learn/rails-auth&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. &lt;span&gt;😃&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Devise 4.0 works with Rails 6.0 onwards. Run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bundle add devise
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, you need to run the generator:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise:install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At this point, a number of instructions will appear in the console. Among these instructions, you&#39;ll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for &lt;code&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The generator will install an initializer which describes ALL of Devise&#39;s configuration options. It is &lt;em&gt;imperative&lt;/em&gt; that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.&lt;/p&gt; 
&lt;p&gt;In the following command you will replace &lt;code&gt;MODEL&lt;/code&gt; with the class name used for the application’s users (it’s frequently &lt;code&gt;User&lt;/code&gt; but could also be &lt;code&gt;Admin&lt;/code&gt;). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your &lt;code&gt;config/routes.rb&lt;/code&gt; file to point to the Devise controller.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise MODEL
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&#39;ll need to uncomment the Confirmable section in the migration.&lt;/p&gt; 
&lt;p&gt;Then run &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You should restart your application after changing Devise&#39;s configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.&lt;/p&gt; 
&lt;h3&gt;Controller filters and helpers&lt;/h3&gt; 
&lt;p&gt;Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is &#39;User&#39;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;before_action :authenticate_user!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Rails 5, note that &lt;code&gt;protect_from_forgery&lt;/code&gt; is no longer prepended to the &lt;code&gt;before_action&lt;/code&gt; chain, so if you have set &lt;code&gt;authenticate_user&lt;/code&gt; before &lt;code&gt;protect_from_forgery&lt;/code&gt;, your request will result in &quot;Can&#39;t verify CSRF token authenticity.&quot; To resolve this, either change the order in which you call them, or use &lt;code&gt;protect_from_forgery prepend: true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If your devise model is something other than User, replace &quot;_user&quot; with &quot;_yourmodel&quot;. The same logic applies to the instructions below.&lt;/p&gt; 
&lt;p&gt;To verify if a user is signed in, use the following helper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;user_signed_in?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the current signed-in user, this helper is available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;current_user
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can access the session for this scope:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;user_session
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a &lt;code&gt;:user&lt;/code&gt; resource, the &lt;code&gt;user_root_path&lt;/code&gt; will be used if it exists; otherwise, the default &lt;code&gt;root_path&lt;/code&gt; will be used. This means that you need to set the root inside your routes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;root to: &#39;home#index&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also override &lt;code&gt;after_sign_in_path_for&lt;/code&gt; and &lt;code&gt;after_sign_out_path_for&lt;/code&gt; to customize your redirect hooks.&lt;/p&gt; 
&lt;p&gt;Notice that if your Devise model is called &lt;code&gt;Member&lt;/code&gt; instead of &lt;code&gt;User&lt;/code&gt;, for example, then the helpers available are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;before_action :authenticate_member!

member_signed_in?

current_member

member_session
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuring Models&lt;/h3&gt; 
&lt;p&gt;The Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Besides &lt;code&gt;:stretches&lt;/code&gt;, you can define &lt;code&gt;:pepper&lt;/code&gt;, &lt;code&gt;:encryptor&lt;/code&gt;, &lt;code&gt;:confirm_within&lt;/code&gt;, &lt;code&gt;:remember_for&lt;/code&gt;, &lt;code&gt;:timeout_in&lt;/code&gt;, &lt;code&gt;:unlock_in&lt;/code&gt; among other options. For more details, see the initializer file that was created when you invoked the &quot;devise:install&quot; generator described above. This file is usually located at &lt;code&gt;/config/initializers/devise.rb&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Strong Parameters&lt;/h3&gt; 
&lt;p&gt;The Parameter Sanitizer API has changed for Devise 4 &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;For previous Devise versions see &lt;a href=&quot;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&quot;&gt;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;When you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.&lt;/p&gt; 
&lt;p&gt;There are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sign_in&lt;/code&gt; (&lt;code&gt;Devise::SessionsController#create&lt;/code&gt;) - Permits only the authentication keys (like &lt;code&gt;email&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sign_up&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#create&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;password_confirmation&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;account_update&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#update&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;password_confirmation&lt;/code&gt; and &lt;code&gt;current_password&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In case you want to permit additional parameters (the lazy way™), you can do so using a simple before action in your &lt;code&gt;ApplicationController&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you&#39;re using &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;), then you will need to tell devise about those nestings and types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Devise allows you to completely change Devise defaults or invoke custom behavior by passing a block:&lt;/p&gt; 
&lt;p&gt;To permit simple scalar values for username and email, use this&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def configure_permitted_parameters
  devise_parameter_sanitizer.permit(:sign_in) do |user_params|
    user_params.permit(:username, :email)
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters&#39; permitted scalars, so we need to configure Devise in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def configure_permitted_parameters
  devise_parameter_sanitizer.permit(:sign_up) do |user_params|
    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rails/strong_parameters#nested-parameters&quot;&gt;https://github.com/rails/strong_parameters#nested-parameters&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from &lt;code&gt;Devise::ParameterSanitizer&lt;/code&gt; and adding your own logic:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class User::ParameterSanitizer &amp;lt; Devise::ParameterSanitizer
  def initialize(*)
    super
    permit(:sign_up, keys: [:username, :email])
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then configure your controllers to use it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protected

  def devise_parameter_sanitizer
    if resource_class == User
      User::ParameterSanitizer.new(User, :user, params)
    else
      super # Use the default one
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The example above overrides the permitted parameters for the user to be both &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt;. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.&lt;/p&gt; 
&lt;h3&gt;Configuring views&lt;/h3&gt; 
&lt;p&gt;We built Devise to help you quickly develop an application that uses authentication. However, we don&#39;t want to be in your way when you need to customize it.&lt;/p&gt; 
&lt;p&gt;Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise:views
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have more than one Devise model in your application (such as &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Admin&lt;/code&gt;), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set &lt;code&gt;config.scoped_views = true&lt;/code&gt; inside the &lt;code&gt;config/initializers/devise.rb&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;After doing so, you will be able to have views based on the role like &lt;code&gt;users/sessions/new&lt;/code&gt; and &lt;code&gt;admins/sessions/new&lt;/code&gt;. If no view is found within the scope, Devise will use the default view at &lt;code&gt;devise/sessions/new&lt;/code&gt;. You can also use the generator to generate scoped views:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise:views users
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to generate only a few sets of views, like the ones for the &lt;code&gt;registerable&lt;/code&gt; and &lt;code&gt;confirmable&lt;/code&gt; module, you can pass a list of views to the generator with the &lt;code&gt;-v&lt;/code&gt; flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise:views -v registrations confirmations
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuring controllers&lt;/h3&gt; 
&lt;p&gt;If the customization at the views level is not enough, you can customize each controller by following these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create your custom controllers using the generator which requires a scope:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rails generate devise:controllers [scope]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you specify &lt;code&gt;users&lt;/code&gt; as the scope, controllers will be created in &lt;code&gt;app/controllers/users/&lt;/code&gt;. And the sessions controller will look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController
  # GET /resource/sign_in
  # def new
  #   super
  # end
  ...
end
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;-c&lt;/code&gt; flag to specify one or more controllers, for example: &lt;code&gt;rails generate devise:controllers users -c sessions&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tell the router to use this controller:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recommended but not required: copy (or move) the views from &lt;code&gt;devise/sessions&lt;/code&gt; to &lt;code&gt;users/sessions&lt;/code&gt;. Rails will continue using the views from &lt;code&gt;devise/sessions&lt;/code&gt; due to inheritance if you skip this step, but having the views matching the controller(s) keeps things consistent.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finally, change or extend the desired controller actions.&lt;/p&gt; &lt;p&gt;You can completely override a controller action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController
  def create
    # custom sign-in code
  end
end
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can simply add new behavior to it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController
  def create
    super do |resource|
      BackgroundWorker.trigger(resource)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for triggering background jobs or logging events during certain actions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Remember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call &lt;code&gt;flash[:notice]&lt;/code&gt; and &lt;code&gt;flash[:alert]&lt;/code&gt; as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a &lt;code&gt;:timedout&lt;/code&gt; key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.&lt;/p&gt; 
&lt;h3&gt;Configuring routes&lt;/h3&gt; 
&lt;p&gt;Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;devise_for :users, path: &#39;auth&#39;, path_names: { sign_in: &#39;login&#39;, sign_out: &#39;logout&#39;, password: &#39;secret&#39;, confirmation: &#39;verification&#39;, unlock: &#39;unblock&#39;, registration: &#39;register&#39;, sign_up: &#39;cmon_let_me_in&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be sure to check &lt;code&gt;devise_for&lt;/code&gt; &lt;a href=&quot;https://www.rubydoc.info/gems/devise/ActionDispatch/Routing/Mapper#devise_for-instance_method&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;If you have the need for more deep customization, for instance to also allow &quot;/sign_in&quot; besides &quot;/users/sign_in&quot;, all you need to do is create your routes normally and wrap them in a &lt;code&gt;devise_scope&lt;/code&gt; block in the router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;devise_scope :user do
  get &#39;sign_in&#39;, to: &#39;devise/sessions#new&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This way, you tell Devise to use the scope &lt;code&gt;:user&lt;/code&gt; when &quot;/sign_in&quot; is accessed. Notice &lt;code&gt;devise_scope&lt;/code&gt; is also aliased as &lt;code&gt;as&lt;/code&gt; in your router.&lt;/p&gt; 
&lt;p&gt;Please note: You will still need to add &lt;code&gt;devise_for&lt;/code&gt; in your routes in order to use helper methods such as &lt;code&gt;current_user&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;devise_for :users, skip: :all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Hotwire/Turbo&lt;/h3&gt; 
&lt;p&gt;Devise integrates with Hotwire/Turbo by treating such requests as navigational, and configuring certain responses for errors and redirects to match the expected behavior. New apps are generated with the following response configuration by default, and existing apps may opt-in by adding the config to their Devise initializers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Devise.setup do |config|
  # ...
  # When using Devise with Hotwire/Turbo, the http status for error responses
  # and some redirects must match the following. The default in Devise for existing
  # apps is `200 OK` and `302 Found` respectively, but new apps are generated with
  # these new defaults that match Hotwire/Turbo behavior.
  # Note: These might become the new default in future versions of Devise.
  config.responder.error_status = :unprocessable_entity
  config.responder.redirect_status = :see_other
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: these custom responses require the &lt;code&gt;responders&lt;/code&gt; gem version to be &lt;code&gt;3.1.0&lt;/code&gt; or higher, please make sure you update it if you&#39;re going to use this configuration. Check &lt;a href=&quot;https://github.com/heartcombo/devise/wiki/How-To:-Upgrade-to-Devise-4.9.0-%5BHotwire-Turbo-integration%5D&quot;&gt;this upgrade guide&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the above statuses configuration may become the default for Devise in a future release.&lt;/p&gt; 
&lt;p&gt;There are a couple other changes you might need to make in your app to work with Hotwire/Turbo, if you&#39;re migrating from rails-ujs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;data-confirm&lt;/code&gt; option that adds a confirmation modal to buttons/forms before submission needs to change to &lt;code&gt;data-turbo-confirm&lt;/code&gt;, so that Turbo handles those appropriately.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;data-method&lt;/code&gt; option that sets the request method for link submissions needs to change to &lt;code&gt;data-turbo-method&lt;/code&gt;. This is not necessary for &lt;code&gt;button_to&lt;/code&gt; or &lt;code&gt;form&lt;/code&gt;s since Turbo can handle those.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;re setting up Devise to sign out via &lt;code&gt;:delete&lt;/code&gt;, and you&#39;re using links (instead of buttons wrapped in a form) to sign out with the &lt;code&gt;method: :delete&lt;/code&gt; option, they will need to be updated as described above. (Devise does not provide sign out links/buttons in its shared views.)&lt;/p&gt; 
&lt;p&gt;Make sure to inspect your views looking for those, and change appropriately.&lt;/p&gt; 
&lt;h3&gt;I18n&lt;/h3&gt; 
&lt;p&gt;Devise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;en:
  devise:
    sessions:
      signed_in: &#39;Signed in successfully.&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create distinct messages based on the resource you&#39;ve configured using the singular name given in routes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;en:
  devise:
    sessions:
      user:
        signed_in: &#39;Welcome user, you are signed in.&#39;
      admin:
        signed_in: &#39;Hello admin!&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Devise mailer uses a similar pattern to create subject messages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;en:
  devise:
    mailer:
      confirmation_instructions:
        subject: &#39;Hello everybody!&#39;
        user_subject: &#39;Hello User! Please confirm your email&#39;
      reset_password_instructions:
        subject: &#39;Reset instructions&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/I18n&quot;&gt;https://github.com/heartcombo/devise/wiki/I18n&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Caution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.&lt;/p&gt; 
&lt;h3&gt;Test helpers&lt;/h3&gt; 
&lt;p&gt;Devise includes some test helpers for controller and integration tests. In order to use them, you need to include the respective module in your test cases/specs.&lt;/p&gt; 
&lt;h3&gt;Controller tests&lt;/h3&gt; 
&lt;p&gt;Controller tests require that you include &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; on your test case or its parent &lt;code&gt;ActionController::TestCase&lt;/code&gt; superclass. For Rails versions prior to 5, include &lt;code&gt;Devise::Test::ControllerHelpers&lt;/code&gt; instead, since the superclass for controller tests was changed to ActionDispatch::IntegrationTest (for more details, see the &lt;a href=&quot;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&quot;&gt;Integration tests&lt;/a&gt; section).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase
  include Devise::Test::IntegrationHelpers # Rails &amp;gt;= 5
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase
  include Devise::Test::ControllerHelpers # Rails &amp;lt; 5
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re using RSpec, you can put the following inside a file named &lt;code&gt;spec/support/devise.rb&lt;/code&gt; or in your &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; (or &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; if you are using &lt;code&gt;rspec-rails&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;RSpec.configure do |config|
  config.include Devise::Test::ControllerHelpers, type: :controller
  config.include Devise::Test::ControllerHelpers, type: :view
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Just be sure that this inclusion is made &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt; directive.&lt;/p&gt; 
&lt;p&gt;Now you are ready to use the &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods on your controller tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;sign_in @user
sign_in @user, scope: :admin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are testing Devise internal controllers or a controller that inherits from Devise&#39;s, you need to tell Devise which mapping should be used before a request. This is necessary because Devise gets this information from the router, but since controller tests do not pass through the router, it needs to be stated explicitly. For example, if you are testing the user scope, simply use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;test &#39;GET new&#39; do
  # Mimic the router behavior of setting the Devise scope through the env.
  @request.env[&#39;devise.mapping&#39;] = Devise.mappings[:user]

  # Use the sign_in helper to sign in a fixture `User` record.
  sign_in users(:alice)

  get :new

  # assert something
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Integration tests&lt;/h3&gt; 
&lt;p&gt;Integration test helpers are available by including the &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; module.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class PostsTests &amp;lt; ActionDispatch::IntegrationTest
  include Devise::Test::IntegrationHelpers
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can use the following &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods in your integration tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;sign_in users(:bob)
sign_in users(:bob), scope: :admin

sign_out :user
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RSpec users can include the &lt;code&gt;IntegrationHelpers&lt;/code&gt; module on their &lt;code&gt;:feature&lt;/code&gt; specs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;RSpec.configure do |config|
  config.include Devise::Test::IntegrationHelpers, type: :feature
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike controller tests, integration tests do not need to supply the &lt;code&gt;devise.mapping&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; value, as the mapping can be inferred by the routes that are executed in your tests.&lt;/p&gt; 
&lt;p&gt;You can read more about testing your Rails controllers with RSpec in the wiki:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&quot;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OmniAuth&lt;/h3&gt; 
&lt;p&gt;Devise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.omniauth :github, &#39;APP_ID&#39;, &#39;APP_SECRET&#39;, scope: &#39;user,public_repo&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can read more about OmniAuth support in the wiki:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&quot;&gt;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuring multiple models&lt;/h3&gt; 
&lt;p&gt;Devise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Create a migration with the required fields
create_table :admins do |t|
  t.string :email
  t.string :encrypted_password
  t.timestamps null: false
end

# Inside your Admin model
devise :database_authenticatable, :timeoutable

# Inside your routes
devise_for :admins

# Inside your protected controller
before_action :authenticate_admin!

# Inside your controllers and views
admin_signed_in?
current_admin
admin_session
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can simply run the Devise generator.&lt;/p&gt; 
&lt;p&gt;Keep in mind that those models will have completely different routes. They &lt;strong&gt;do not&lt;/strong&gt; and &lt;strong&gt;cannot&lt;/strong&gt; share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.&lt;/p&gt; 
&lt;h3&gt;Active Job Integration&lt;/h3&gt; 
&lt;p&gt;If you are using Active Job to deliver Action Mailer messages in the background through a queuing back-end, you can send Devise emails through your existing queue by overriding the &lt;code&gt;send_devise_notification&lt;/code&gt; method in your model.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def send_devise_notification(notification, *args)
  devise_mailer.send(notification, self, *args).deliver_later
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Password reset tokens and Rails logs&lt;/h3&gt; 
&lt;p&gt;If you enable the &lt;a href=&quot;https://www.rubydoc.info/gems/devise/Devise/Models/Recoverable&quot;&gt;Recoverable&lt;/a&gt; module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.&lt;/li&gt; 
 &lt;li&gt;Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use &lt;code&gt;deliver_later&lt;/code&gt; to send password reset emails, password reset tokens will be leaked.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Rails sets the production logger level to INFO by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In &lt;code&gt;config/environments/production.rb&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.log_level = :warn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Other ORMs&lt;/h3&gt; 
&lt;p&gt;Devise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.&lt;/p&gt; 
&lt;h3&gt;Rails API Mode&lt;/h3&gt; 
&lt;p&gt;Rails 5+ has a built-in &lt;a href=&quot;https://edgeguides.rubyonrails.org/api_app.html&quot;&gt;API Mode&lt;/a&gt; which optimizes Rails for use as an API (only). Devise is &lt;em&gt;somewhat&lt;/em&gt; able to handle applications that are built in this mode without additional modifications in the sense that it should not raise exceptions and the like. But some issues may still arise during &lt;code&gt;development&lt;/code&gt;/&lt;code&gt;testing&lt;/code&gt;, as we still don&#39;t know the full extent of this compatibility. (For more information, see &lt;a href=&quot;https://github.com/heartcombo/devise/issues/4947/&quot;&gt;issue #4947&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;Supported Authentication Strategies&lt;/h4&gt; 
&lt;p&gt;API-only applications don&#39;t support browser-based authentication via cookies, which is devise&#39;s default. Yet, devise can still provide authentication out of the box in those cases with the &lt;code&gt;http_authenticatable&lt;/code&gt; strategy, which uses HTTP Basic Auth and authenticates the user on each request. (For more info, see this wiki article for &lt;a href=&quot;https://github.com/heartcombo/devise/wiki/How-To:-Use-HTTP-Basic-Authentication&quot;&gt;How To: Use HTTP Basic Authentication&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;The devise default for HTTP Auth is disabled, so it will need to be enabled in the devise initializer for the database strategy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.http_authenticatable = [:database]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This restriction does not limit you from implementing custom warden strategies, either in your application or via gem-based extensions for devise. A common authentication strategy for APIs is token-based authentication. For more information on extending devise to support this type of authentication and others, see the wiki article for &lt;a href=&quot;https://github.com/heartcombo/devise/wiki/How-To:-Simple-Token-Authentication-Example#alternatives&quot;&gt;Simple Token Authentication Examples and alternatives&lt;/a&gt; or this blog post on &lt;a href=&quot;http://blog.plataformatec.com.br/2019/01/custom-authentication-methods-with-devise/&quot;&gt;Custom authentication methods with Devise&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Testing&lt;/h4&gt; 
&lt;p&gt;API Mode changes the order of the middleware stack, and this can cause problems for &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt;. This problem usually surfaces as an &lt;code&gt;undefined method `[]=&#39; for nil:NilClass&lt;/code&gt; error when using integration test helpers, such as &lt;code&gt;#sign_in&lt;/code&gt;. The solution is simply to reorder the middlewares by adding the following to test.rb:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies
Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a deeper understanding of this, review &lt;a href=&quot;https://github.com/heartcombo/devise/issues/4696&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally be mindful that without views supported, some email-based flows from Confirmable, Recoverable and Lockable are not supported directly at this time.&lt;/p&gt; 
&lt;h2&gt;Additional information&lt;/h2&gt; 
&lt;h3&gt;Warden&lt;/h3&gt; 
&lt;p&gt;Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wardencommunity/warden&quot;&gt;https://github.com/wardencommunity/warden&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;We have a long list of valued contributors. Check them all at:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/heartcombo/devise/graphs/contributors&quot;&gt;https://github.com/heartcombo/devise/graphs/contributors&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License. Copyright 2020-2024 Rafael França, Leonardo Tegon, Carlos Antônio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; 
&lt;p&gt;The Devise logo is licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redmine/redmine</title>
      <link>https://github.com/redmine/redmine</link>
      <description>&lt;p&gt;Mirror of redmine code source - Official Subversion repository is at https://svn.redmine.org/redmine - contact: @vividtone or maeda (at) farend (dot) jp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= Redmine&lt;/p&gt; 
&lt;p&gt;Redmine is a flexible project management web application written using Ruby on Rails framework.&lt;/p&gt; 
&lt;p&gt;More details can be found in the doc directory or on the official website &lt;a href=&quot;https://www.redmine.org&quot;&gt;https://www.redmine.org&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opf/openproject</title>
      <link>https://github.com/opf/openproject</link>
      <description>&lt;p&gt;OpenProject is the leading open source project management software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenProject&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/opf/openproject&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/opf/openproject&quot; alt=&quot;GitHub commit activity&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/checks-status/opf/openproject/dev&quot; alt=&quot;GitHub branch checks state&quot; /&gt; &lt;a href=&quot;https://github.com/opf/openproject/actions/workflows/test-core.yml&quot;&gt;&lt;img src=&quot;https://github.com/opf/openproject/actions/workflows/test-core.yml/badge.svg?branch=dev&quot; alt=&quot;Github Tests&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;We empower teams to achieve great things together for the good of society.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;OpenProject is a web-based project management software. Use OpenProject to manage your projects, tasks and goals. Collaborate via work packages and link them to your pull requests on Github. &lt;a href=&quot;https://www.openproject.org/docs/system-admin-guide/integrations/github-integration/&quot;&gt;Read more about the OpenProject GitHub integration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/opf/openproject/dev/GitHub-tab-new.png&quot; alt=&quot;Screenshot of OpenProject, showing the GitHub tab on a work package&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;OpenProject&#39;s key features are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#project-planning&quot;&gt;Project planning and scheduling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#product-management&quot;&gt;Product roadmap and release planning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#task-management&quot;&gt;Task management and team collaboration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#agile-scrum&quot;&gt;Agile and Scrum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#time-tracking&quot;&gt;Time tracking, cost reporting, and budgeting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/collaboration-software-features/#bug-tracking&quot;&gt;Bug tracking&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/docs/user-guide/wysiwyg/&quot;&gt;Wikis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/docs/user-guide/forums/&quot;&gt;Forums&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/docs/user-guide/meetings/&quot;&gt;Meeting agendas and meeting minutes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More information and screenshots can be found on our &lt;a href=&quot;https://www.openproject.org&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Start now with OpenProject&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Free Trial&lt;/strong&gt;: &lt;a href=&quot;https://start.openproject.com/&quot;&gt;Start a 14-days free trial of OpenProject&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Community Edition&lt;/strong&gt;, free of charge: Download OpenProject and get started with the self-hosted Community edition. If you want to run an instance of OpenProject in production (or for evaluation), refer to our in-depth &lt;a href=&quot;https://www.openproject.org/download-and-installation/&quot;&gt;installation guides&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Edition&lt;/strong&gt;: Sign up for the Enterprise version, choose between cloud or on-premises and benefit from comprehensive support and Enterprise add-ons.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Explore our &lt;a href=&quot;https://www.openproject.org/docs/&quot;&gt;comprehensive documentation&lt;/a&gt; to help you get up and running quickly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Training&lt;/strong&gt;: &lt;a href=&quot;https://www.openproject.org/training-and-consulting/#training-signup&quot;&gt;Book one of our training or consulting offers&lt;/a&gt; to get your team on board in no time.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Report bugs&lt;/h2&gt; 
&lt;p&gt;You found a bug? Please &lt;a href=&quot;https://www.openproject.org/docs/development/report-a-bug/&quot;&gt;report it&lt;/a&gt; to our &lt;a href=&quot;https://community.openproject.org/projects/openproject&quot;&gt;OpenProject Community&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;OpenProject is supported by its Community members, both companies and individuals.&lt;/p&gt; 
&lt;p&gt;We are always looking for new members to our Community, so if you are interested in improving OpenProject we would be glad to welcome and support you getting into the code. There are guides as well, e.g. a &lt;a href=&quot;https://www.openproject.org/docs/development/development-environment/&quot;&gt;Quick Start for Developers&lt;/a&gt;, but don&#39;t hesitate to simply &lt;a href=&quot;https://www.openproject.org/contact&quot;&gt;contact us&lt;/a&gt; if you have questions.&lt;/p&gt; 
&lt;p&gt;Working on OpenProject comes with the satisfaction of working on a widely used open source application.&lt;/p&gt; 
&lt;p&gt;Also, if you do not want to be limited to working on open source in your free time, OpenProject GmbH, the company contributing to the OpenProject development, &lt;a href=&quot;https://www.openproject.org/career/&quot;&gt;is hiring&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Stay in contact&lt;/h2&gt; 
&lt;p&gt;Here you can find our &lt;a href=&quot;https://www.openproject.org/contact/&quot;&gt;contact information&lt;/a&gt;. As we regularly update OpenProject, we recommend staying in touch – here is where you can find us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openproject.org/blog/community-instance/&quot;&gt;OpenProject Community&lt;/a&gt; with &lt;a href=&quot;https://community.openproject.org/projects/openproject/forums&quot;&gt;forum discussions&lt;/a&gt;: The open instance where we develop our features – transparent and open for discussions, bug reports or feature requests.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/company/18706985&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/openproject/&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fosstodon.org/@openproject&quot;&gt;Fosstodon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/openproject&quot;&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security / responsible disclosure&lt;/h2&gt; 
&lt;p&gt;We take security very seriously at OpenProject. We value any kind of feedback that will keep our Community secure. If you happen to come across a security issue we urge you to disclose it to us privately to allow our users and Community enough time to upgrade. Security issues will always take precedence over anything else in the pipeline.&lt;/p&gt; 
&lt;p&gt;For more information on how to disclose a security vulnerability, &lt;a href=&quot;https://raw.githubusercontent.com/opf/openproject/dev/docs/security-and-privacy/statement-on-security/README.md&quot;&gt;please see this page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenProject is licensed under the terms of the GNU General Public License version 3. See &lt;a href=&quot;https://raw.githubusercontent.com/opf/openproject/dev/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/opf/openproject/dev/LICENSE&quot;&gt;LICENSE&lt;/a&gt; files for details.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;h3&gt;Icons&lt;/h3&gt; 
&lt;p&gt;Thanks to Vincent Le Moign and his fabulous Minicons icons on &lt;a href=&quot;http://www.webalys.com/minicons/icons-free-pack.php&quot;&gt;webalys.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;OpenProject icon font&lt;/h3&gt; 
&lt;p&gt;Published and created by the OpenProject Foundation (OPF) under &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt; with icons from the following sources &lt;a href=&quot;http://www.webalys.com/minicons&quot;&gt;Minicons Free Vector Icons Pack&lt;/a&gt; and &lt;a href=&quot;http://www.webalys.com/design-interface-application-framework.php&quot;&gt;User Interface Design framework&lt;/a&gt; both by webalys&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Creative Commons License&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;OpenProject Icon Font by the OpenProject Foundation (OPF) is licensed under Creative Commons Attribution 3.0 Unported License and Free for both personal and commercial use. You can copy, adapt, remix, distribute or transmit it.&lt;/p&gt; 
&lt;p&gt;Under this condition: provide a mention of the &quot;OpenProject Foundation&quot; and a link back to OpenProject &lt;a href=&quot;http://www.openproject.org&quot;&gt;www.openproject.org&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>huginn/huginn</title>
      <link>https://github.com/huginn/huginn</link>
      <description>&lt;p&gt;Create agents that monitor and act on your behalf. Your agents are standing by!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/huginn/huginn/master/media/huginn-logo.png&quot; alt=&quot;Huginn&quot; title=&quot;Your agents are standing by.&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;What is Huginn?&lt;/h2&gt; 
&lt;p&gt;Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn&#39;s Agents create and consume events, propagating them along a directed graph. Think of it as a hackable version of IFTTT or Zapier on your own server. You always know who has your data. You do.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/the-name.png&quot; alt=&quot;the origin of the name&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;Here are some of the things that you can do with Huginn:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Track the weather and get an email when it&#39;s going to rain (or snow) tomorrow (&quot;Don&#39;t forget your umbrella!&quot;)&lt;/li&gt; 
 &lt;li&gt;List terms that you care about and receive email when their occurrence on Twitter changes. (For example, want to know when something interesting has happened in the world of Machine Learning? Huginn will watch the term &quot;machine learning&quot; on Twitter and tell you when there is a spike in discussion.)&lt;/li&gt; 
 &lt;li&gt;Watch for air travel or shopping deals&lt;/li&gt; 
 &lt;li&gt;Follow your project names on Twitter and get updates when people mention them&lt;/li&gt; 
 &lt;li&gt;Scrape websites and receive email when they change&lt;/li&gt; 
 &lt;li&gt;Connect to Adioso, HipChat, FTP, IMAP, Jabber, JIRA, MQTT, nextbus, Pushbullet, Pushover, RSS, Bash, Slack, StubHub, translation APIs, Twilio, Twitter, and Weibo, to name a few.&lt;/li&gt; 
 &lt;li&gt;Send digest email with things that you care about at specific times during the day&lt;/li&gt; 
 &lt;li&gt;Track counts of high frequency events and send an SMS within moments when they spike, such as the term &quot;san francisco emergency&quot;&lt;/li&gt; 
 &lt;li&gt;Send and receive WebHooks&lt;/li&gt; 
 &lt;li&gt;Run custom JavaScript or CoffeeScript functions&lt;/li&gt; 
 &lt;li&gt;Track your location over time&lt;/li&gt; 
 &lt;li&gt;Create Amazon Mechanical Turk workflows as the inputs, or outputs, of agents (the Amazon Turk Agent is called the &quot;HumanTaskAgent&quot;). For example: &quot;Once a day, ask 5 people for a funny cat photo; send the results to 5 more people to be rated; send the top-rated photo to 5 people for a funny caption; send to 5 final people to rate for funniest caption; finally, post the best captioned photo on my blog.&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/huginn/huginn?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://changelog.com/podcast/199&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/changelog-%23199-lightgrey.svg?sanitize=true&quot; alt=&quot;Changelog #199&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Join us in our &lt;a href=&quot;https://gitter.im/huginn/huginn&quot;&gt;Gitter room&lt;/a&gt; to discuss the project.&lt;/p&gt; 
&lt;h3&gt;Join us!&lt;/h3&gt; 
&lt;p&gt;Want to help with Huginn? All contributions are encouraged! You could make UI improvements, &lt;a href=&quot;https://github.com/huginn/huginn/wiki/Creating-a-new-agent&quot;&gt;add new Agents&lt;/a&gt;, write &lt;a href=&quot;https://github.com/huginn/huginn/wiki&quot;&gt;documentation and tutorials&lt;/a&gt;, or try tackling &lt;a href=&quot;https://github.com/huginn/huginn/issues?direction=desc&amp;amp;labels=help+wanted&amp;amp;page=1&amp;amp;sort=created&amp;amp;state=open&quot;&gt;issues tagged with #&quot;help wanted&quot;&lt;/a&gt;. Please fork, add specs, and send pull requests!&lt;/p&gt; 
&lt;p&gt;Really want a fix or feature? Want to solve some community issues and earn some extra coffee money? Take a look at the &lt;a href=&quot;https://www.bountysource.com/trackers/282580-huginn&quot;&gt;current bounties on Bountysource&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Have an awesome idea but not feeling quite up to contributing yet? Head over to our &lt;a href=&quot;https://github.com/huginn/huginn/issues/353&quot;&gt;Official &#39;suggest an agent&#39; thread &lt;/a&gt; and tell us!&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Please checkout the &lt;a href=&quot;http://vimeo.com/61976251&quot;&gt;Huginn Introductory Screencast&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;And now, some example screenshots. Below them are instructions to get you started.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/your-agents.png&quot; alt=&quot;Example list of agents&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/diagram.png&quot; alt=&quot;Event flow diagram&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/peaks.png&quot; alt=&quot;Detecting peaks in Twitter&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/my-locations.png&quot; alt=&quot;Logging your location over time&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/new-agent.png&quot; alt=&quot;Making a new agent&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;The quickest and easiest way to check out Huginn is to use the official Docker image. Have a look at the &lt;a href=&quot;https://github.com/huginn/huginn/raw/master/doc/docker/install.md&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Local Installation&lt;/h3&gt; 
&lt;p&gt;If you just want to play around, you can simply fork this repository, then perform the following steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run &lt;code&gt;git remote add upstream https://github.com/huginn/huginn.git&lt;/code&gt; to add the main repository as a remote for your fork.&lt;/li&gt; 
 &lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; (&lt;code&gt;cp .env.example .env&lt;/code&gt;) and edit &lt;code&gt;.env&lt;/code&gt;, at least updating the &lt;code&gt;APP_SECRET_TOKEN&lt;/code&gt; variable.&lt;/li&gt; 
 &lt;li&gt;Make sure that you have MySQL or PostgreSQL installed. (On a Mac, the easiest way is with &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. If you&#39;re going to use PostgreSQL, you&#39;ll need to prepend all commands below with &lt;code&gt;DATABASE_ADAPTER=postgresql&lt;/code&gt;.)&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle&lt;/code&gt; to install dependencies&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle exec rake db:create&lt;/code&gt;, &lt;code&gt;bundle exec rake db:migrate&lt;/code&gt;, and then &lt;code&gt;bundle exec rake db:seed&lt;/code&gt; to create a development database with some example Agents.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle exec foreman start&lt;/code&gt;, visit &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;, and login with the username of &lt;code&gt;admin&lt;/code&gt; and the password of &lt;code&gt;password&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Setup some Agents!&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/huginn/huginn/wiki&quot;&gt;wiki&lt;/a&gt; for usage examples and to get started making new Agents.&lt;/li&gt; 
 &lt;li&gt;Periodically run &lt;code&gt;git fetch upstream&lt;/code&gt; and then &lt;code&gt;git checkout master &amp;amp;&amp;amp; git merge upstream/master&lt;/code&gt; to merge in the newest version of Huginn.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: By default, email messages are intercepted in the &lt;code&gt;development&lt;/code&gt; Rails environment, which is what you just setup. You can view them at &lt;a href=&quot;http://localhost:3000/letter_opener&quot;&gt;http://localhost:3000/letter_opener&lt;/a&gt;. If you&#39;d like to send real email via SMTP when playing with Huginn locally, set &lt;code&gt;SEND_EMAIL_IN_DEVELOPMENT&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;If you need more detailed instructions, see the &lt;a href=&quot;https://github.com/huginn/huginn/wiki/Novice-setup-guide&quot;&gt;Novice setup guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Develop&lt;/h3&gt; 
&lt;p&gt;All agents have specs! And there&#39;s also acceptance tests that simulate running Huginn in a headless browser.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install PhantomJS 2.1.1 or greater: 
  &lt;ul&gt; 
   &lt;li&gt;Using &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;Node Package Manager&lt;/a&gt;: &lt;code&gt;npm install phantomjs&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; on OSX &lt;code&gt;brew install phantomjs&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run all specs with &lt;code&gt;bundle exec rspec&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run a specific spec with &lt;code&gt;bundle exec rspec path/to/specific/test_spec.rb&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Read more about rspec for rails &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Using Huginn Agent gems&lt;/h2&gt; 
&lt;p&gt;Huginn Agents can now be written as external gems and be added to your Huginn installation with the &lt;code&gt;ADDITIONAL_GEMS&lt;/code&gt; environment variable. See the &lt;code&gt;Additional Agent gems&lt;/code&gt; section of &lt;code&gt;.env.example&lt;/code&gt; for more information.&lt;/p&gt; 
&lt;p&gt;If you&#39;d like to write your own Huginn Agent Gem, please see &lt;a href=&quot;https://github.com/huginn/huginn_agent&quot;&gt;huginn_agent&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our general intention is to encourage complex and specific Agents to be written as Gems, while continuing to add new general-purpose Agents to the core Huginn repository.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://github.com/huginn/huginn/wiki#deploying-huginn&quot;&gt;the Huginn Wiki&lt;/a&gt; for detailed deployment strategies for different providers.&lt;/p&gt; 
&lt;h3&gt;Heroku&lt;/h3&gt; 
&lt;p&gt;Try Huginn on Heroku: &lt;a href=&quot;https://heroku.com/deploy&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.png&quot; alt=&quot;Deploy&quot; /&gt;&lt;/a&gt; (Takes a few minutes to setup. Read the &lt;a href=&quot;https://github.com/huginn/huginn/raw/master/doc/heroku/install.md&quot;&gt;documentation&lt;/a&gt; while you are waiting and be sure to click &#39;View it&#39; after launch!) Huginn launches only on a paid subscription plan for Heroku. For non-experimental use, we strongly recommend Heroku&#39;s 1GB paid plan or our Docker container.&lt;/p&gt; 
&lt;h3&gt;OpenShift&lt;/h3&gt; 
&lt;h4&gt;OpenShift Online&lt;/h4&gt; 
&lt;p&gt;Try Huginn on OpenShift Online&lt;/p&gt; 
&lt;p&gt;Create a new app with either &lt;code&gt;mysql&lt;/code&gt; or &lt;code&gt;postgres&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;oc new-app -f https://raw.githubusercontent.com/huginn/huginn/master/openshift/templates/huginn-mysql.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;oc new-app -f https://raw.githubusercontent.com/huginn/huginn/master/openshift/templates/huginn-postgresql.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the web console to import either json file by going to &quot;Add to Project&quot; -&amp;gt; &quot;Import YAML/JSON&quot;.&lt;/p&gt; 
&lt;p&gt;If you are on the Starter plan, make sure to follow the &lt;a href=&quot;https://docs.openshift.com/online/getting_started/beyond_the_basics.html#btb-creating-a-new-application-from-source-code&quot;&gt;guide&lt;/a&gt; to remove any existing application.&lt;/p&gt; 
&lt;p&gt;The templates should work on a v3 installation or the current v4 online.&lt;/p&gt; 
&lt;h3&gt;Manual installation on any server&lt;/h3&gt; 
&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/huginn/huginn/raw/master/doc/manual/README.md&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Optional Setup&lt;/h3&gt; 
&lt;h4&gt;Setup for private development&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/huginn/huginn/wiki/Private-development-instructions&quot;&gt;private development instructions&lt;/a&gt; on the wiki.&lt;/p&gt; 
&lt;h4&gt;Enable the WeatherAgent&lt;/h4&gt; 
&lt;p&gt;In order to use the WeatherAgent you need an &lt;a href=&quot;https://pirate-weather.apiable.io/products/weather-data&quot;&gt;Weather Data API key from Pirate Weather&lt;/a&gt;. Sign up for one and then change the value of &lt;code&gt;api_key: your-key&lt;/code&gt; in your seeded WeatherAgent.&lt;/p&gt; 
&lt;h4&gt;Disable SSL&lt;/h4&gt; 
&lt;p&gt;We assume your deployment will run over SSL. This is a very good idea! However, if you wish to turn this off, you&#39;ll probably need to edit &lt;code&gt;config/initializers/devise.rb&lt;/code&gt; and modify the line containing &lt;code&gt;config.rememberable_options = { :secure =&amp;gt; true }&lt;/code&gt;. You will also need to edit &lt;code&gt;config/environments/production.rb&lt;/code&gt; and modify the value of &lt;code&gt;config.force_ssl&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Huginn is provided under the MIT License.&lt;/p&gt; 
&lt;p&gt;Huginn was originally created by &lt;a href=&quot;https://github.com/cantino&quot;&gt;@cantino&lt;/a&gt; in 2013. Since then, many people&#39;s dedicated contributions have made it what it is today.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/huginn/huginn&quot;&gt;&lt;img src=&quot;https://travis-ci.org/huginn/huginn.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/huginn/huginn&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/huginn/huginn/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gemnasium.com/huginn/huginn&quot;&gt;&lt;img src=&quot;https://gemnasium.com/huginn/huginn.svg?sanitize=true&quot; alt=&quot;Dependency Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.bountysource.com/trackers/282580-huginn?utm_source=282580&amp;amp;utm_medium=shield&amp;amp;utm_campaign=TRACKER_BADGE&quot;&gt;&lt;img src=&quot;https://www.bountysource.com/badge/tracker?tracker_id=282580&quot; alt=&quot;Bountysource&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spree/spree</title>
      <link>https://github.com/spree/spree</link>
      <description>&lt;p&gt;An open source eCommerce platform giving you full control and customizability. Modular and API-first. Multi-vendor, multi-tenant, multi-store, multi-currency, multi-language. Built using Ruby on Rails. Developed by @vendo-dev&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://spreecommerce.org&quot;&gt; &lt;img alt=&quot;Spree Commerce - an open source eCommerce platform&quot; src=&quot;https://github.com/spree/spree/assets/12614496/ff5372a4-e906-458e-83b6-7927ba0629c1&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;Spree Commerce&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; An &lt;a href=&quot;https://spreecommerce.org/&quot; alt=&quot;open-source eCommerce platform&quot;&gt;open-source eCommerce platform&lt;/a&gt; giving you full control and customizability. &lt;br /&gt; Build any eCommerce solution that your business requires. &lt;br /&gt; &lt;br /&gt; &lt;a href=&quot;https://spreecommerce.org/announcing-spree-5-the-biggest-open-source-release-ever/&quot;&gt;Spree 5&lt;/a&gt; · &lt;a href=&quot;https://spreecommerce.org&quot;&gt;Website&lt;/a&gt; · &lt;a href=&quot;https://spreecommerce.org/docs/&quot;&gt;Documentation&lt;/a&gt; · &lt;a href=&quot;https://slack.spreecommerce.org&quot;&gt;Slack&lt;/a&gt; · &lt;a href=&quot;https://github.com/spree/spree_starter/&quot;&gt;Starter&lt;/a&gt; · &lt;a href=&quot;https://demo.spreecommerce.org&quot;&gt;Demo&lt;/a&gt; · &lt;a href=&quot;https://spreecommerce.org/pricing/&quot;&gt;Pricing&lt;/a&gt; · &lt;a href=&quot;https://github.com/spree/spree/milestones?direction=asc&amp;amp;sort=due_date&amp;amp;state=open&quot;&gt;Roadmap&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://rubygems.org/gems/spree&quot;&gt; &lt;img alt=&quot;Gem Total Downloads&quot; src=&quot;https://img.shields.io/gem/dt/spree&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://slack.spreecommerce.org&quot;&gt; &lt;img alt=&quot;Slack members&quot; src=&quot;https://img.shields.io/badge/slack%20members-6.5K-blue&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit the &lt;a href=&quot;https://spreecommerce.org/docs/developer/getting-started/quickstart&quot;&gt;Quickstart Guide&lt;/a&gt; to set up Spree in 5 minutes.&lt;/p&gt; 
&lt;p&gt;Make sure to check out the latest &lt;a href=&quot;https://github.com/spree/spree#spree-5-announcement--demo&quot;&gt;Spree 5 release announcement&lt;/a&gt; and demo.&lt;/p&gt; 
&lt;p&gt;If you like what you see, consider giving Spree a GitHub star &lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Thank you for supporting Spree open-source &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;Spree 5 Announcement &amp;amp; Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://spreecommerce.org/announcing-spree-5-the-biggest-open-source-release-ever/&quot;&gt;&lt;img src=&quot;https://vendo-production-res.cloudinary.com/image/upload/w_2000/q_auto/v1742985405/docs/github/Spree_Commerce_open-source_eCommerce_myzurl.jpg&quot; alt=&quot;Spree Commerce 5 version&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We’re thrilled to unveil &lt;a href=&quot;https://spreecommerce.org/announcing-spree-5-the-biggest-open-source-release-ever/&quot;&gt;Spree 5&lt;/a&gt; — the most powerful and feature-packed open-source release in Spree Commerce’s history, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A completely revamped Admin Dashboard experience: boost your team&#39;s productivity&lt;/li&gt; 
 &lt;li&gt;A Mobile-First, No-code Customizable Storefront: raise conversions and loyalty&lt;/li&gt; 
 &lt;li&gt;New integrations: a native &lt;a href=&quot;https://github.com/spree/spree_stripe&quot;&gt;Stripe integration&lt;/a&gt;, and also Stripe Connect, Klaviyo integrations available with the Enterprise Edition&lt;/li&gt; 
 &lt;li&gt;Enterprise Edition Admin Features: Audit Log, &lt;a href=&quot;https://spreecommerce.org/marketplace-ecommerce/&quot;&gt;Multi-Vendor Marketplace&lt;/a&gt;, &lt;a href=&quot;https://spreecommerce.org/multi-tenant-white-label-ecommerce/&quot;&gt;Multi-tenant / White-label SaaS eCommerce&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://spreecommerce.org/announcing-spree-5-the-biggest-open-source-release-ever/&quot;&gt;full Spree 5 announcement here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://demo.spreecommerce.org/&quot;&gt;Spree 5 demo&lt;/a&gt; for yourself.&lt;/p&gt; 
&lt;h2&gt;Enterprise support&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://spreecommerce.org/contact/&quot;&gt;Contact us&lt;/a&gt; for enterprise support and custom development services. We offer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;expert delivery of your Spree application,&lt;/li&gt; 
 &lt;li&gt;migrations and upgrades,&lt;/li&gt; 
 &lt;li&gt;optimizing your Spree stack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Enterprise Edition&lt;/h2&gt; 
&lt;p&gt;Besides enterprise support we also offer the Spree Commerce &lt;a href=&quot;https://spreecommerce.org/spree-commerce-version-comparison-community-edition-vs-enterprise-edition/&quot;&gt;Enterprise Edition&lt;/a&gt; that gives you all the tools you need to launch your store or marketplace and provides you with ready-to-use integrations that will reduce your project&#39;s development time and cost.&lt;/p&gt; 
&lt;p&gt;To get access to Spree Enterprise (Vendo), contact our &lt;a href=&quot;https://spreecommerce.org/get-started/&quot;&gt;Sales team&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Customizable and modular&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;pick and choose parts you want to use&lt;/li&gt; 
 &lt;li&gt;customize everything else (storefront, order processing, API, etc)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt=&quot;Spree Commerce - Storefront customization&quot; src=&quot;https://github.com/spree/spree/assets/12614496/1a000452-6716-4fab-90ca-a4c28fc138a7&quot; /&gt; 
&lt;h3&gt;Composable and API-first&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;connect with your existing ecosystem, build custom workflows with ease&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://spreecommerce.org/docs/api-reference/introduction&quot;&gt;Storefront and Admin API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Webhooks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt=&quot;Spree Commerce - API   Integrations&quot; src=&quot;https://github.com/spree/spree/assets/12614496/18e98e8e-15cd-4b74-8e58-80e5b3f281d8&quot; /&gt; 
&lt;h3&gt;Cart and Checkout for any use case&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;advanced cart functionality&lt;/li&gt; 
 &lt;li&gt;over 30 payment provider integrations out of the box&lt;/li&gt; 
 &lt;li&gt;API to integrate any other payment gateway&lt;/li&gt; 
 &lt;li&gt;robust discounts system&lt;/li&gt; 
 &lt;li&gt;store credits, gift cards&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt=&quot;Spree Commerce - Cart   Checkout&quot; src=&quot;https://github.com/spree/spree/assets/12614496/05399a8f-a57a-4907-a8ea-a4e58285a55d&quot; /&gt; 
&lt;img alt=&quot;Spree Commerce - Payments   Refunds&quot; src=&quot;https://github.com/spree/spree/assets/12614496/0911073c-a681-409e-810c-f7e8daa4daac&quot; /&gt; 
&lt;h3&gt;&lt;a href=&quot;https://spreecommerce.org/multi-region-ecommerce/&quot;&gt;Global Commerce&lt;/a&gt; ready&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;multi-currency&lt;/li&gt; 
 &lt;li&gt;multi-language&lt;/li&gt; 
 &lt;li&gt;full translation support for products, categories, and more&lt;/li&gt; 
 &lt;li&gt;different shipping methods / costs for different regions&lt;/li&gt; 
 &lt;li&gt;advanced tax calculation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt=&quot;Spree Commerce - Multi-region   Multi-store&quot; src=&quot;https://github.com/spree/spree/assets/12614496/e9c2edce-b80c-47ad-817b-a00a4ba54495&quot; /&gt; 
&lt;img alt=&quot;Spree Commerce - Multi-region&quot; src=&quot;https://github.com/spree/spree/assets/12614496/f8678baf-4efa-4de7-b092-b01ef3a4d8ea&quot; /&gt; 
&lt;h3&gt;&lt;a href=&quot;https://spreecommerce.org/multi-store-ecommerce/&quot;&gt;Multi-Store&lt;/a&gt; ready&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;host multiple brands / stores on a single Spree instance&lt;/li&gt; 
 &lt;li&gt;each with different branding, configuration, payment methods, shipping options, product catalogs etc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt=&quot;Spree Commerce - Multi-store&quot; src=&quot;https://github.com/spree/spree/assets/12614496/cf651354-6180-4927-973f-c650b80ccdb0&quot; /&gt; 
&lt;h3&gt;Responsive Admin Panel&lt;/h3&gt; 
&lt;p&gt;Manage and curate products, users, orders, returns, shipments &amp;amp; more &lt;img alt=&quot;Spree Commerce - Inventory management&quot; src=&quot;https://github.com/spree/spree/assets/12614496/cdc7af4d-41ba-44f2-9595-efc948865107&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Orders &amp;amp; Post-purchase management&lt;/h3&gt; 
&lt;p&gt;Manage orders, shipments, returns and refunds &lt;img alt=&quot;Spree Commerce - Order   Return management&quot; src=&quot;https://github.com/spree/spree/assets/12614496/b1dffa8c-24d4-4629-a026-02951b5a80d7&quot; /&gt; &lt;img alt=&quot;Spree Commerce - Order Fulfillment&quot; src=&quot;https://github.com/spree/spree/assets/12614496/2212ec6d-bfd0-4940-9aae-f0ceea0b4e4d&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Why developers love it&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Runs anywhere&lt;/strong&gt; - cloud, VPS, Docker, Kubernetes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Battle Tested&lt;/strong&gt; - used by thousands of merchants around the globe in all categories since 2007!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensions available&lt;/strong&gt; adding new features to Spree&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What you can build with Spree&lt;/h2&gt; 
&lt;p&gt;Use Spree for any use case. Innovate beyond what&#39;s out there.&lt;/p&gt; 
&lt;h3&gt;A &lt;a href=&quot;https://spreecommerce.org/headless-ecommerce/&quot;&gt;headless eCommerce&lt;/a&gt; micro-service&lt;/h3&gt; 
&lt;p&gt;Capture orders and payments for whatever you&#39;re selling - physical or digital, products or services&lt;/p&gt; 
&lt;img alt=&quot;Spree Commerce - headless open-source eCommerce&quot; src=&quot;https://github.com/spree/spree/assets/12614496/2bca9fdf-5ae2-4433-83aa-431105906fc8&quot; /&gt; 
&lt;h3&gt;A &lt;a href=&quot;https://spreecommerce.org/use-cases/multi-vendor-marketplace-demo/&quot;&gt;Multi-vendor marketplace&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Run your own marketplace with multiple suppliers, each with a dedicated supplier dashboard &lt;img alt=&quot;Spree Commerce - Marketplace&quot; src=&quot;https://github.com/spree/spree/assets/12614496/c4ddd118-df4c-464e-b1fe-d43862e5cf25&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;A &lt;a href=&quot;https://spreecommerce.org/use-cases/headless-b2b-ecommerce/&quot;&gt;B2B eCommerce&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Start capturing 6+ figure orders from resellers with safe payments and a checkout process that fits your business model &lt;img alt=&quot;Spree Commerce - B2B eCommerce&quot; src=&quot;https://github.com/spree/spree/assets/12614496/e0a184f6-31ad-4f7f-b30b-6f8a501b6f63&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://spreecommerce.org/use-cases/wholesale-ecommerce/&quot;&gt;Wholesale eCommerce&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Run your wholesale operation the way your retail partners expect &lt;img alt=&quot;Spree Commerce - Wholesale&quot; src=&quot;https://github.com/spree/spree/assets/12614496/bac1e551-f629-47d6-a983-b385aa65b1bd&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;A &lt;a href=&quot;https://spreecommerce.org/multi-tenant-white-label-ecommerce/&quot;&gt;white-label SaaS or multi-tenant eCommerce&lt;/a&gt; platform&lt;/h3&gt; 
&lt;p&gt;Launch a &lt;a href=&quot;https://spreecommerce.org/multi-tenant-white-label-ecommerce/&quot;&gt;multi-tenant eCommerce platform&lt;/a&gt; for your customers, resellers, affiliates in any configuration, eg. B2B2B, B2B2C, B2B2E&lt;/p&gt; 
&lt;img alt=&quot;Spree Commerce - Multi-store&quot; src=&quot;https://github.com/spree/spree/assets/12614496/cf651354-6180-4927-973f-c650b80ccdb0&quot; /&gt; 
&lt;h2&gt;Community &amp;amp; Contributing&lt;/h2&gt; 
&lt;p&gt;Spree is an open source project and we love contributions in any form - pull requests, issues, feature ideas!&lt;/p&gt; 
&lt;p&gt;Follow our &lt;a href=&quot;https://spreecommerce.org/docs/developer/contributing/quickstart&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://slack.spreecommerce.org&quot;&gt;Join our Slack&lt;/a&gt; to meet other community members.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://spreecommerce.org/contact/&quot;&gt;Contact us&lt;/a&gt; and let&#39;s go!&lt;/p&gt; 
&lt;h2&gt;Developed by&lt;/h2&gt; 
&lt;p&gt;Spree is developed and maintained by&lt;/p&gt; 
&lt;a href=&quot;https://getvendo.com&quot;&gt; &lt;img alt=&quot;Vendo&quot; src=&quot;https://avatars.githubusercontent.com/u/89416582?s=96&amp;amp;v=4&quot; /&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Vendo is the commercial entity behind Spree Commerce and in particular the latest, unprecedented investment into Spree 5 and following versions as well as its integrations. We&#39;ve been the Spree core team since 2016 and led numerous Spree projects while supporting the community. Learn more at: &lt;a href=&quot;https://www.getvendo.com/&quot;&gt;https://www.getvendo.com/&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Spree Commerce is a free, open-source eCommerce framework giving you full control and customizability.&lt;/p&gt; 
&lt;p&gt;For Spree Commerce versions 4.10 and later in the &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;spree/spree&lt;/a&gt; repository two licenses apply simultaneously and users are required to comply with the terms of these two licenses at the same time:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://opensource.org/license/agpl-v3&quot;&gt;AGPL-3.0&lt;/a&gt; - for all contributions from version 4.10 onwards&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://opensource.org/license/bsd-3-clause&quot;&gt;BSD-3-Clause&lt;/a&gt; - for all other contributions predating version 4.10&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Effectively, for versions 4.10 and upwards &lt;strong&gt;AGPL-3.0&lt;/strong&gt; license applies.&lt;/p&gt; 
&lt;p&gt;Spree Commerce versions 4.9 and earlier in the &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;spree/spree&lt;/a&gt; repository are available under the BSD-3-Clause license and users are required to comply with its terms.&lt;/p&gt; 
&lt;p&gt;Please note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://spreecommerce.org/spree-under-agplv3-may-be-used-privately/&quot;&gt;Spree under AGPLv3 may be used privately&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://spreecommerce.org/spree-commerce-developer-covenant/&quot;&gt;Spree Commerce Developer Covenant&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you’d like to use Spree Commerce without the AGPL-3.0 restrictions e.g. for a SaaS business, please talk to us about obtaining a &lt;a href=&quot;https://github.com/spree/spree/raw/main/license.md#commercial-license&quot;&gt;Commercial License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All third party components incorporated into this software are licensed under the original license provided by the owner of the applicable component.&lt;/p&gt; 
&lt;p&gt;Please refer to our &lt;a href=&quot;https://spreecommerce.org/why-spree-is-changing-its-open-source-license-to-agpl-3-0-and-introducing-a-commercial-license/&quot;&gt;Licensing FAQ&lt;/a&gt; in case of questions&lt;/p&gt; 
&lt;p&gt;If you like what you see, consider giving Spree a GitHub star &lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Thank you for supporting Spree open-source &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shopify/roast</title>
      <link>https://github.com/Shopify/roast</link>
      <description>&lt;p&gt;Structured AI workflows made easy&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/f9b1ace2-5478-4f4a-ac8e-5945ed75c5b4&quot; alt=&quot;roast-horiz-logo&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Roast&lt;/h1&gt; 
&lt;p&gt;A convention-oriented framework for creating structured AI workflows, maintained by the Augmented Engineering team at Shopify.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install roast-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add to your Gemfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &#39;roast-ai&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Why you should use Roast&lt;/h2&gt; 
&lt;p&gt;Roast provides a structured, declarative approach to building AI workflows with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Convention over configuration&lt;/strong&gt;: Define powerful workflows using simple YAML configuration files and prompts written in markdown (with ERB support)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built-in tools&lt;/strong&gt;: Ready-to-use tools for file operations, search, and AI interactions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ruby integration&lt;/strong&gt;: When prompts aren&#39;t enough, write custom steps in Ruby using a clean, extensible architecture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Shared context&lt;/strong&gt;: Each step shares its conversation transcript with its parent workflow by default&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Step customization&lt;/strong&gt;: Steps can be fully configured with their own AI models and parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session replay&lt;/strong&gt;: Rerun previous sessions starting at a specified step to speed up development time&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel execution&lt;/strong&gt;: Run multiple steps concurrently to speed up workflow execution&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Function caching&lt;/strong&gt;: Flexibly cache the results of tool function calls to speed up workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensive instrumentation&lt;/strong&gt;: Monitor and track workflow execution, AI calls, and tool usage (&lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/docs/INSTRUMENTATION.md&quot;&gt;see instrumentation documentation&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What does it look like?&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a simple workflow that analyzes test files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: analyze_tests
# Default model for all steps
model: gpt-4o-mini
tools:
  - Roast::Tools::ReadFile
  - Roast::Tools::Grep

steps:
  - read_test_file
  - analyze_coverage
  - generate_report

# Step-specific model overrides the global model
analyze_coverage:
  model: gpt-4-turbo
  json: true

# Step-specific config that specifies a custom path, not in the current directory
generate_report:
  path: ../reporting/generate_report
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each step can have its own prompt file (e.g., &lt;code&gt;analyze_coverage/prompt.md&lt;/code&gt;) and configuration. Steps can be run in parallel by nesting them in arrays:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - prepare_data
  -
    - analyze_code_quality
    - check_test_coverage
    - verify_documentation
  - generate_final_report
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Workflows can include steps that run bash commands (wrap in &lt;code&gt;$()&lt;/code&gt;), use interpolation with &lt;code&gt;{{}}&lt;/code&gt; syntax, and even simple inlined prompts as a natural language string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_spec
  - create_minitest
  - run_and_improve
  - $(bundle exec rubocop -A {{file}})
  - Summarize the changes made to {{File.basename(file)}}.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Try it&lt;/h2&gt; 
&lt;p&gt;If you don’t have one already, get an OpenAI key from &lt;a href=&quot;https://platform.openai.com/settings/organization/api-keys&quot;&gt;here&lt;/a&gt;. You will need an account with a credit card and credits applied to the associated project. Make sure that a basic completion works:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export OPENAI_API_KEY=sk-proj-....

curl -H &quot;Content-Type: application/json&quot; \
    -H &quot;Authorization: Bearer $OPENAI_API_KEY&quot; \
    -d &#39;{&quot;model&quot;:&quot;gpt-4.1-mini&quot;,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;What is 1+1?&quot;}]}&#39; \
    https://api.openai.com/v1/chat/completions
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/examples/grading/workflow.md&quot;&gt;test grading workflow&lt;/a&gt; in this repository is a senior software engineer and testing expert that evaluates the quality of a test based on guidelines.&lt;/p&gt; 
&lt;p&gt;Try the workflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./exe/roast execute examples/grading/workflow.yml test/roast/resources_test.rb

🔥🔥🔥 Everyone loves a good roast 🔥🔥🔥
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will output a test grade.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;========== TEST GRADE REPORT ==========
Test file: test/roast/resources_test.rb

FINAL GRADE:
  Score: 80/100
  Letter Grade: B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you may also need &lt;code&gt;shadowenv&lt;/code&gt; and &lt;code&gt;rg&lt;/code&gt;, on MacOS run &lt;code&gt;brew install shadowenv&lt;/code&gt; and &lt;code&gt;brew install rg&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;How to use Roast&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a workflow YAML file defining your steps and tools&lt;/li&gt; 
 &lt;li&gt;Create prompt files for each step (e.g., &lt;code&gt;step_name/prompt.md&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Run the workflow:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# With a target file
roast execute workflow.yml target_file.rb

# Or for a targetless workflow (API calls, data generation, etc.)
roast execute workflow.yml

# Roast will automatically search in `project_root/roast/workflow_name` if the path is incomplete.
roast execute my_cool_workflow # Equivalent to `roast execute roast/my_cool_workflow/workflow.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Understanding Workflows&lt;/h3&gt; 
&lt;p&gt;In Roast, workflows maintain a single conversation with the AI model throughout execution. Each step represents one or more user-assistant interactions within this conversation, with optional tool calls. Steps naturally build upon each other through the shared context.&lt;/p&gt; 
&lt;h4&gt;Step Types&lt;/h4&gt; 
&lt;p&gt;Roast supports several types of steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Standard step&lt;/strong&gt;: References a directory containing at least a &lt;code&gt;prompt.md&lt;/code&gt; and optional &lt;code&gt;output.txt&lt;/code&gt; template. This is the most common type of step.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As an alternative to a directory, you can also implement a custom step as a Ruby class, optionally extending &lt;code&gt;Roast::Workflow::BaseStep&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the example given above, the script would live at &lt;code&gt;workflow/analyze_code.rb&lt;/code&gt; and should contain a class named &lt;code&gt;AnalyzeCode&lt;/code&gt; with an initializer that takes a workflow object as context, and a &lt;code&gt;call&lt;/code&gt; method that will be invoked to run the step. The result of the &lt;code&gt;call&lt;/code&gt; method will be stored in the &lt;code&gt;workflow.output&lt;/code&gt; hash.&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Parallel steps&lt;/strong&gt;: Groups of steps executed concurrently&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  -
    - analyze_code_quality
    - check_test_coverage
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Command execution step&lt;/strong&gt;: Executes shell commands directly, just wrap in &lt;code&gt;$(expr)&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - $(command line expr)
  - rubocop: $(bundle exec rubocop -A)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will execute the command and store the result in the workflow output hash. Explicit key name is optional (&lt;code&gt;rubocop&lt;/code&gt; in the second line of the example).&lt;/p&gt; &lt;p&gt;By default, commands that exit with non-zero status will halt the workflow. You can configure steps to continue on error:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - lint_check: $(rubocop {{file}})
  - fix_issues

# Step configuration
lint_check:
  exit_on_error: false  # Continue workflow even if command fails
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When &lt;code&gt;exit_on_error: false&lt;/code&gt;, the command output will include the exit status, allowing subsequent steps to process error information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conditional steps&lt;/strong&gt;: Execute different steps based on conditions using &lt;code&gt;if/unless&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - check_environment:
      if: &quot;{{ENV[&#39;RAILS_ENV&#39;] == &#39;production&#39;}}&quot;
      then:
        - run_production_checks
        - notify_team
      else:
        - run_development_setup

  - verify_dependencies:
      unless: &quot;$(bundle check)&quot;
      then:
        - bundle_install: &quot;$(bundle install)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conditions can be:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Ruby expressions: &lt;code&gt;if: &quot;{{output[&#39;count&#39;] &amp;gt; 5}}&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Bash commands: &lt;code&gt;if: &quot;$(test -f config.yml &amp;amp;&amp;amp; echo true)&quot;&lt;/code&gt; (exit code 0 = true)&lt;/li&gt; 
   &lt;li&gt;Step references: &lt;code&gt;if: &quot;previous_step_name&quot;&lt;/code&gt; (uses the step&#39;s output)&lt;/li&gt; 
   &lt;li&gt;Direct values: &lt;code&gt;if: &quot;true&quot;&lt;/code&gt; or &lt;code&gt;if: &quot;false&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Iteration steps&lt;/strong&gt;: Loop over collections or repeat steps with conditions&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  # Loop over a collection
  - process_files:
      each: &quot;{{Dir.glob(&#39;**/*.rb&#39;)}}&quot;
      as: current_file
      steps:
        - analyze_file
        - Generate a report for {{current_file}}

  # Repeat until a condition is met
  - improve_code:
      repeat:
        until: &quot;{{output[&#39;test_pass&#39;] == true}}&quot;
        max_iterations: 5
        steps:
          - run_tests
          - fix_issues
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each loops support:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Collections from Ruby expressions: &lt;code&gt;each: &quot;{{[1, 2, 3]}}&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Command output: &lt;code&gt;each: &quot;$(ls *.rb)&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Step references: &lt;code&gt;each: &quot;file_list&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Repeat loops support:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Until conditions: &lt;code&gt;until: &quot;{{condition}}&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Maximum iterations: &lt;code&gt;max_iterations: 10&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Case/when/else steps&lt;/strong&gt;: Select different execution paths based on a value (similar to Ruby&#39;s case statement)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - detect_language

  - case: &quot;{{ workflow.output.detect_language }}&quot;
    when:
      ruby:
        - lint_with_rubocop
        - test_with_rspec
      javascript:
        - lint_with_eslint
        - test_with_jest
      python:
        - lint_with_pylint
        - test_with_pytest
    else:
      - analyze_generic
      - generate_basic_report
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Case expressions can be:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Workflow outputs: &lt;code&gt;case: &quot;{{ workflow.output.variable }}&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Ruby expressions: &lt;code&gt;case: &quot;{{ count &amp;gt; 10 ? &#39;high&#39; : &#39;low&#39; }}&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Bash commands: &lt;code&gt;case: &quot;$(echo $ENVIRONMENT)&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Direct values: &lt;code&gt;case: &quot;production&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The value is compared against each key in the &lt;code&gt;when&lt;/code&gt; clause, and matching steps are executed. If no match is found, the &lt;code&gt;else&lt;/code&gt; steps are executed (if provided).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raw prompt step&lt;/strong&gt;: Simple text prompts for the model without tools&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - Summarize the changes made to the codebase.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates a simple prompt-response interaction without tool calls or looping. It&#39;s detected by the presence of spaces in the step name and is useful for summarization or simple questions at the end of a workflow.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Agent step&lt;/strong&gt;: Direct pass-through to coding agents (e.g., Claude Code)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - ^fix_linting_errors                                    # File-based agent prompt
  - ^Review the code and identify any performance issues   # Inline agent prompt
  - regular_analysis                                       # Normal step through LLM
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Agent steps are prefixed with &lt;code&gt;^&lt;/code&gt; and send the prompt content directly to the CodingAgent tool without LLM translation. This is useful when you want to give precise instructions to a coding agent without the intermediate interpretation layer. Agent steps support both file-based prompts (&lt;code&gt;fix_linting_errors/prompt.md&lt;/code&gt;) and inline prompts (text with spaces).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Session continuity for agent steps:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Agent steps support two options for maintaining Claude context across steps:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;continue: true&lt;/code&gt;&lt;/strong&gt; - Continues from the immediately previous Claude Code session (note, if multiple Claude Code sessions are being run in parallel in the same working directory, this might not be the previous Claude Code session from this workflow)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;&lt;code&gt;resume: step_name&lt;/code&gt;&lt;/strong&gt; - Resumes from a specific earlier step&#39;s Claude Code session&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Continue option:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;continue&lt;/code&gt; option allows sequential agent steps to maintain a continuous conversation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - ^analyze_codebase
  - ^implement_feature
  - ^add_tests

# Configuration
analyze_codebase:
  continue: false  # Start fresh (default)

implement_feature:
  continue: true   # Continue from immediately previous analyze_codebase step

add_tests:
  continue: true   # Continue from immediately previous implement_feature step
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Resume functionality for agent steps:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Agent steps can resume from specific previous Claude Code sessions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - ^analyze_codebase
  - ^implement_feature
  - ^polish_implementation

# Configuration
analyze_codebase:
  continue: false  # Start fresh

implement_feature:
  continue: true   # Continue from previous conversation

polish_implementation:
  resume: analyze_codebase  # Resume from a specific step&#39;s session not the immediately previous one
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: Session IDs are only available when the CodingAgent is configured to output JSON format (includes &lt;code&gt;--output-format stream-json&lt;/code&gt; in the command). If you are using a custom CodingAgent command that does not produce JSON output, resume functionality will not be available.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;resume&lt;/code&gt; is specified but the step name given does not have CodingAgent session to resume from, the CodingAgent will start Claude Code with a fresh session.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shell script step&lt;/strong&gt;: Execute shell scripts directly as workflow steps&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - setup_environment     # Executes setup_environment.sh
  - run_tests             # Executes run_tests.sh  
  - cleanup
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Shell script steps allow you to execute &lt;code&gt;.sh&lt;/code&gt; files directly as workflow steps alongside Ruby steps and AI prompts. Scripts are automatically discovered in the same locations as other step types.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Configuration options:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Step configuration  
my_script:
  json: true              # Parse stdout as JSON
  exit_on_error: false    # Don&#39;t fail workflow on non-zero exit
  env:                    # Custom environment variables
    CUSTOM_VAR: &quot;value&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Environment integration:&lt;/strong&gt; Shell scripts automatically receive workflow context:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ROAST_WORKFLOW_RESOURCE&lt;/code&gt;: Current workflow resource&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ROAST_STEP_NAME&lt;/code&gt;: Current step name&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ROAST_WORKFLOW_OUTPUT&lt;/code&gt;: Previous step outputs as JSON&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Example script (&lt;code&gt;setup_environment.sh&lt;/code&gt;):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
echo &quot;Setting up environment for: $ROAST_WORKFLOW_RESOURCE&quot;

# Create a config file that subsequent steps can use
mkdir -p tmp
echo &quot;DATABASE_URL=sqlite://test.db&quot; &amp;gt; tmp/config.env

# Output data for the workflow (available via ROAST_WORKFLOW_OUTPUT in later steps)
echo &#39;{&quot;status&quot;: &quot;configured&quot;, &quot;database&quot;: &quot;sqlite://test.db&quot;, &quot;config_file&quot;: &quot;tmp/config.env&quot;}&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Input step&lt;/strong&gt;: Interactive prompts for user input during workflow execution&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_code
  - get_user_feedback:
      prompt: &quot;Should we proceed with the refactoring? (yes/no)&quot;
      type: confirm
  - review_changes:
      prompt: &quot;Enter your review comments&quot;
      type: text
  - select_strategy:
      prompt: &quot;Choose optimization strategy&quot;
      type: select
      options:
        - &quot;Performance optimization&quot;
        - &quot;Memory optimization&quot;
        - &quot;Code clarity&quot;
  - api_configuration:
      prompt: &quot;Enter API key&quot;
      type: password
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Input steps pause workflow execution to collect user input. They support several types:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: Free-form text input (default if type not specified)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;confirm&lt;/code&gt;: Yes/No confirmation prompts&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;select&lt;/code&gt;: Choice from a list of options&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;password&lt;/code&gt;: Masked input for sensitive data&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The user&#39;s input is stored in the workflow output using the step name as the key and can be accessed in subsequent steps via interpolation (e.g., &lt;code&gt;{{output.get_user_feedback}}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Step Configuration&lt;/h4&gt; 
&lt;p&gt;Steps can be configured with various options to control their behavior:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_code           # Simple step reference
  - generate_report:       # Step with configuration
      model: gpt-4o        # Override the global model for this step
      print_response: true # Explicitly control output printing
      json: true           # Request JSON-formatted response
      params:              # Additional parameters for the API call
        temperature: 0.8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Configuration options:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: Override the workflow&#39;s default model for this specific step&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;print_response&lt;/code&gt;: Control whether the step&#39;s response is included in the final output (default: &lt;code&gt;false&lt;/code&gt;, except for the last step which defaults to &lt;code&gt;true&lt;/code&gt; as of v0.3.1)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: Request a JSON-formatted response from the model&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;params&lt;/code&gt;: Additional parameters passed to the model API (temperature, max_tokens, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Custom directory path for the step&#39;s prompt files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;coerce_to&lt;/code&gt;: Type coercion for the step result (&lt;code&gt;:boolean&lt;/code&gt;, &lt;code&gt;:llm_boolean&lt;/code&gt;, &lt;code&gt;:iterable&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Automatic Last Step Output&lt;/strong&gt;: As of version 0.3.1, the last step in a workflow automatically has &lt;code&gt;print_response: true&lt;/code&gt; unless explicitly configured otherwise. This ensures that newcomers to Roast see output from their workflows by default.&lt;/p&gt; 
&lt;h4&gt;Shared Configuration&lt;/h4&gt; 
&lt;p&gt;Roast supports sharing common configuration and steps across multiple workflows using a &lt;code&gt;shared.yml&lt;/code&gt; file.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Place a &lt;code&gt;shared.yml&lt;/code&gt; file one level above your workflow directory&lt;/li&gt; 
 &lt;li&gt;Define YAML anchors for common configurations like tools, models or steps&lt;/li&gt; 
 &lt;li&gt;Reference these anchors in your workflow files using YAML alias syntax&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Example structure:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my_project/
├── shared.yml          # Common configuration anchors
└── workflows/
    ├── analyze_code.yml
    ├── generate_docs.yml
    └── test_suite.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example &lt;code&gt;shared.yml&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Define common tools
standard_tools: &amp;amp;standard_tools
  - Roast::Tools::Grep
  - Roast::Tools::ReadFile
  - Roast::Tools::WriteFile
  - Roast::Tools::SearchFile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using in workflows:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Code Analysis Workflow
tools: *standard_tools         # Reference shared tools

steps:
  ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Data Flow Between Steps&lt;/h4&gt; 
&lt;p&gt;Roast handles data flow between steps in three primary ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversation Context (Implicit)&lt;/strong&gt;: The LLM naturally remembers the entire conversation history, including all previous prompts and responses. In most cases, this is all you need for a step to reference and build upon previous results. This is the preferred approach for most prompt-oriented workflows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Output Hash (Explicit)&lt;/strong&gt;: Each step&#39;s result is automatically stored in the &lt;code&gt;workflow.output&lt;/code&gt; hash using the step name as the key. This programmatic access is mainly useful when:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You need to perform non-LLM transformations on data&lt;/li&gt; 
   &lt;li&gt;You&#39;re writing custom output logic&lt;/li&gt; 
   &lt;li&gt;You need to access specific values for presentation or logging&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interpolation (Dynamic)&lt;/strong&gt;: You can use &lt;code&gt;{{expression}}&lt;/code&gt; syntax to inject values from the workflow context directly into step names, commands, or prompt text. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_file
  - $(rubocop -A {{file}})
  - Generate a summary for {{file}}
  - result_for_{{file}}: store_results
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Interpolation supports:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Simple variable access: &lt;code&gt;{{file}}&lt;/code&gt;, &lt;code&gt;{{resource.target}}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Access to step outputs: &lt;code&gt;{{output[&#39;previous_step&#39;]}}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Any valid Ruby expression evaluated in the workflow context: &lt;code&gt;{{File.basename(file)}}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For typical AI workflows, the continuous conversation history provides seamless data flow without requiring explicit access to the output hash. Steps can simply refer to previous information in their prompts, and the AI model will use its memory of the conversation to provide context-aware responses. For more dynamic requirements, the interpolation syntax provides a convenient way to inject context-specific values into steps.&lt;/p&gt; 
&lt;h3&gt;Command Line Options&lt;/h3&gt; 
&lt;h4&gt;Basic Options&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-o, --output FILE&lt;/code&gt;: Save results to a file instead of outputting to STDOUT&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-c, --concise&lt;/code&gt;: Use concise output templates (exposed as a boolean flag on &lt;code&gt;workflow&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;: Show output from all steps as they execute&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-r, --replay STEP_NAME&lt;/code&gt;: Resume a workflow from a specific step, optionally with a specific session timestamp&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-f, --file-storage&lt;/code&gt;: Use filesystem storage for sessions instead of SQLite (default: SQLite)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Workflow Validation&lt;/h4&gt; 
&lt;p&gt;Roast provides a &lt;code&gt;validate&lt;/code&gt; command to check workflow configuration files for errors and potential issues before execution:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Validate a specific workflow
roast validate workflow.yml

# Validate a workflow in a subdirectory
roast validate my_workflow

# Validate with strict mode (treats warnings as errors)
roast validate workflow.yml --strict
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The validator checks for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;YAML syntax errors&lt;/li&gt; 
 &lt;li&gt;Missing required fields&lt;/li&gt; 
 &lt;li&gt;Invalid step references&lt;/li&gt; 
 &lt;li&gt;Circular dependencies&lt;/li&gt; 
 &lt;li&gt;Tool availability&lt;/li&gt; 
 &lt;li&gt;Prompt file existence&lt;/li&gt; 
 &lt;li&gt;Configuration consistency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This helps catch configuration errors early and ensures workflows will run smoothly.&lt;/p&gt; 
&lt;h4&gt;Session Storage and Management&lt;/h4&gt; 
&lt;p&gt;Roast uses SQLite by default for session storage, providing better performance and advanced querying capabilities. Sessions are automatically saved during workflow execution, capturing each step&#39;s state including conversation transcripts and outputs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Storage Options:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Use default SQLite storage (recommended)
roast execute workflow.yml

# Use legacy filesystem storage
roast execute workflow.yml --file-storage

# Set storage type via environment variable
ROAST_STATE_STORAGE=file roast execute workflow.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Session Management Commands:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# List all sessions
roast sessions

# Filter sessions by status
roast sessions --status waiting

# Filter sessions by workflow
roast sessions --workflow my_workflow

# Show sessions older than 7 days
roast sessions --older-than 7d

# Clean up old sessions
roast sessions --cleanup --older-than 30d

# View detailed session information
roast session &amp;lt;session_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Session Replay&lt;/h4&gt; 
&lt;p&gt;The session replay feature allows you to resume workflows from specific steps, saving time during development and debugging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Resume from a specific step
roast execute workflow.yml -r step_name

# Resume from a specific step in a specific session
roast execute workflow.yml -r 20250507_123456_789:step_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This feature is particularly useful when:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Debugging specific steps in a long workflow&lt;/li&gt; 
 &lt;li&gt;Iterating on prompts without rerunning the entire workflow&lt;/li&gt; 
 &lt;li&gt;Resuming after failures in long-running workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Storage Locations:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SQLite: &lt;code&gt;~/.roast/sessions.db&lt;/code&gt; (configurable via &lt;code&gt;ROAST_SESSIONS_DB&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Filesystem: &lt;code&gt;.roast/sessions/&lt;/code&gt; directory in your project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Target Option (&lt;code&gt;-t, --target&lt;/code&gt;)&lt;/h4&gt; 
&lt;p&gt;The target option is highly flexible and accepts several formats:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Single file path:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t path/to/file.rb

# is equivalent to
roast execute workflow.yml path/to/file.rb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Directory path:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t path/to/directory

# Roast will run on the directory as a resource
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Glob patterns:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t &quot;**/*_test.rb&quot;

# Roast will run the workflow on each matching file
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;URL as target:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t &quot;https://api.example.com/data&quot;

# Roast will run the workflow using the URL as a resource
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;API configuration (Fetch API-style):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t &#39;{
  &quot;url&quot;: &quot;https://api.example.com/resource&quot;,
  &quot;options&quot;: {
    &quot;method&quot;: &quot;POST&quot;,
    &quot;headers&quot;: {
      &quot;Content-Type&quot;: &quot;application/json&quot;,
      &quot;Authorization&quot;: &quot;Bearer ${API_TOKEN}&quot;
    },
    &quot;body&quot;: {
      &quot;query&quot;: &quot;search term&quot;,
      &quot;limit&quot;: 10
    }
  }
}&#39;

# Roast will recognize this as an API configuration with Fetch API-style format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Shell command execution with $(...):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;roast execute workflow.yml -t &quot;$(find . -name &#39;*.rb&#39; -mtime -1)&quot;

# Roast will run the workflow on each file returned (expects one per line)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Git integration examples:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Process changed test files
roast execute workflow.yml -t &quot;$(git diff --name-only HEAD | grep _test.rb)&quot;

# Process staged files
roast execute workflow.yml -t &quot;$(git diff --cached --name-only)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Targetless Workflows&lt;/h4&gt; 
&lt;p&gt;Roast also supports workflows that don&#39;t operate on a specific pre-defined set of target files:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API-driven workflows:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: API Integration Workflow
tools:
  - Roast::Tools::ReadFile
  - Roast::Tools::WriteFile

# Dynamic API token using shell command
api_token: $(cat ~/.my_token)

# Option 1: Use a targetless workflow with API logic in steps
steps:
  - fetch_api_data  # Step will make API calls
  - transform_data
  - generate_report

# Option 2: Specify an API target directly in the workflow
target: &#39;{
  &quot;url&quot;: &quot;https://api.example.com/resource&quot;,
  &quot;options&quot;: {
    &quot;method&quot;: &quot;GET&quot;,
    &quot;headers&quot;: {
      &quot;Authorization&quot;: &quot;Bearer ${API_TOKEN}&quot;
    }
  }
}&#39;

steps:
  - process_api_response
  - generate_report
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Data generation workflows:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Generate Documentation
tools:
  - Roast::Tools::WriteFile
steps:
  - generate_outline
  - write_documentation
  - create_examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These targetless workflows are ideal for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;API integrations&lt;/li&gt; 
 &lt;li&gt;Content generation&lt;/li&gt; 
 &lt;li&gt;Report creation&lt;/li&gt; 
 &lt;li&gt;Interactive tools&lt;/li&gt; 
 &lt;li&gt;Scheduled automation tasks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Global Model Configuration&lt;/h4&gt; 
&lt;p&gt;You can set a default model for all steps in your workflow by specifying the &lt;code&gt;model&lt;/code&gt; parameter at the top level:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: My Workflow
model: gpt-4o-mini  # Will be used for all steps unless overridden
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Individual steps can override this setting with their own model parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;analyze_data:
  model: anthropic/claude-3-haiku  # Takes precedence over the global model
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;API Provider Configuration&lt;/h4&gt; 
&lt;p&gt;Roast supports both OpenAI and OpenRouter as API providers. By default, Roast uses OpenAI, but you can specify OpenRouter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: My Workflow
api_provider: openrouter
api_token: $(echo $OPENROUTER_API_KEY)
model: anthropic/claude-3-opus-20240229
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Benefits of using OpenRouter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Access to multiple model providers through a single API&lt;/li&gt; 
 &lt;li&gt;Support for models from Anthropic, Meta, Mistral, and more&lt;/li&gt; 
 &lt;li&gt;Consistent API interface across different model providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When using OpenRouter, specify fully qualified model names including the provider prefix (e.g., &lt;code&gt;anthropic/claude-3-opus-20240229&lt;/code&gt;).&lt;/p&gt; 
&lt;h4&gt;Dynamic API Tokens and URIs&lt;/h4&gt; 
&lt;p&gt;Roast allows you to dynamically fetch attributes such as API token and URI base (to use with a proxy) via shell commands directly in your workflow configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# This will execute the shell command and use the result as the API token
api_token: $(print-token --key)

# For OpenAI (default)
api_token: $(echo $OPENAI_API_KEY)

# For OpenRouter (requires api_provider setting)
api_provider: openrouter
api_token: $(echo $OPENROUTER_API_KEY)

# Static Proxy URI
uri_base: https://proxy.example.com/v1

# Dynamic Proxy URI
uri_base: $(echo $AI_PROXY_URI_BASE)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This makes it easy to use environment-specific tokens without hardcoding credentials, especially useful in development environments or CI/CD pipelines. Alternatively, Roast will fall back to &lt;code&gt;OPENROUTER_API_KEY&lt;/code&gt; or &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variables based on the specified provider.&lt;/p&gt; 
&lt;h3&gt;Template Output with ERB&lt;/h3&gt; 
&lt;p&gt;Each step can have an &lt;code&gt;output.txt&lt;/code&gt; file that uses ERB templating to format the final output. This allows you to customize how the AI&#39;s response is processed and displayed.&lt;/p&gt; 
&lt;p&gt;Example &lt;code&gt;step_name/output.txt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;% if workflow.verbose %&amp;gt;
Detailed Analysis:
&amp;lt;%= response %&amp;gt;
&amp;lt;% else %&amp;gt;
Summary: &amp;lt;%= response.lines.first %&amp;gt;
&amp;lt;% end %&amp;gt;

Files analyzed: &amp;lt;%= workflow.file %&amp;gt;
Status: &amp;lt;%= workflow.output[&#39;status&#39;] || &#39;completed&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is an example of where the &lt;code&gt;workflow.output&lt;/code&gt; hash is useful - formatting output for display based on data from previous steps.&lt;/p&gt; 
&lt;p&gt;Available in templates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;response&lt;/code&gt;: The AI&#39;s response for this step&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;workflow&lt;/code&gt;: Access to the workflow object&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;workflow.output&lt;/code&gt;: The shared hash containing results from all steps when you need programmatic access&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;workflow.file&lt;/code&gt;: Current file being processed (or &lt;code&gt;nil&lt;/code&gt; for targetless workflows)&lt;/li&gt; 
 &lt;li&gt;All workflow configuration options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For most workflows, you&#39;ll mainly use &lt;code&gt;response&lt;/code&gt; to access the current step&#39;s results. The &lt;code&gt;workflow.output&lt;/code&gt; hash becomes valuable when you need to reference specific data points from previous steps in your templates or for conditional display logic.&lt;/p&gt; 
&lt;h2&gt;Advanced Features&lt;/h2&gt; 
&lt;h3&gt;Workflow Metadata&lt;/h3&gt; 
&lt;p&gt;Roast workflows maintain a metadata store that allows steps to share structured data beyond the standard output hash. This is particularly useful for tracking state that needs to persist across steps but shouldn&#39;t be part of the conversation context.&lt;/p&gt; 
&lt;h4&gt;Setting Metadata&lt;/h4&gt; 
&lt;p&gt;Metadata can be set by custom Ruby steps that extend &lt;code&gt;BaseStep&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# workflow/analyze_codebase.rb
class AnalyzeCodebase &amp;lt; Roast::Workflow::BaseStep
   include Roast::Helpers::MetadataAccess
   
  def call
    # Perform analysis
    analysis_results = perform_deep_analysis
    
    # Store metadata for other steps to use
    workflow.metadata[name.to_s] ||= {}
    workflow.metadata[name.to_s][&quot;total_files&quot;] = analysis_results[:file_count]
    workflow.metadata[name.to_s][&quot;complexity_score&quot;] = analysis_results[:complexity]
    workflow.metadata[name.to_s][&quot;analysis_id&quot;] = SecureRandom.uuid
    
    # Return the normal output for the conversation
    &quot;Analyzed #{analysis_results[:file_count]} files with average complexity of #{analysis_results[:complexity]}&quot;
  end
  
  private
  
  def perform_deep_analysis
    # Your analysis logic here
    { file_count: 42, complexity: 7.5 }
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Accessing Metadata&lt;/h4&gt; 
&lt;p&gt;Metadata from previous steps can be accessed in:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Ruby steps:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class GenerateReport &amp;lt; Roast::Workflow::BaseStep
  def call
    # Access metadata from a previous step
    total_files = workflow.metadata.dig(&quot;analyze_codebase&quot;, &quot;total_files&quot;)
    complexity = workflow.metadata.dig(&quot;analyze_codebase&quot;, &quot;complexity_score&quot;)
    
    &quot;Generated report for #{total_files} files with complexity score: #{complexity}&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;Workflow configuration via interpolation:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;steps:
  - analyze_codebase
  - validate_threshold
  - generate_report

# Use metadata in step configuration
validate_threshold:
  if: &quot;{{metadata.analyze_codebase.complexity_score &amp;gt; 8.0}}&quot;
  then:
    - send_alert
    - create_ticket
  else:
    - mark_as_passed

# Pass metadata to command steps
send_alert:
  $(slack-notify &quot;High complexity detected: {{metadata.analyze_codebase.complexity_score}}&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;Prompt templates (ERB):&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;# In analyze_codebase/output.txt
Analysis Summary:
Files analyzed: &amp;lt;%= workflow.metadata.dig(name.to_s, &quot;total_files&quot;) %&amp;gt;
Complexity score: &amp;lt;%= workflow.metadata.dig(name.to_s, &quot;complexity_score&quot;) %&amp;gt;
Analysis ID: &amp;lt;%= workflow.metadata.dig(name.to_s, &quot;analysis_id&quot;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Metadata Best Practices&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Use metadata for data that shouldn&#39;t be in the conversation&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Don&#39;t duplicate output data:&lt;/strong&gt; Metadata complements the output hash, it doesn&#39;t replace it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The metadata system is particularly useful for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tracking session or transaction IDs across multiple steps&lt;/li&gt; 
 &lt;li&gt;Storing configuration or state that tools need to access&lt;/li&gt; 
 &lt;li&gt;Passing data between steps without cluttering the AI conversation&lt;/li&gt; 
 &lt;li&gt;Implementing complex conditional logic based on computed values&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Instrumentation&lt;/h3&gt; 
&lt;p&gt;Roast provides extensive instrumentation capabilities using ActiveSupport::Notifications. You can monitor workflow execution, track AI model usage, measure performance, and integrate with external monitoring systems. &lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/docs/INSTRUMENTATION.md&quot;&gt;Read the full instrumentation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Built-in Tools&lt;/h3&gt; 
&lt;p&gt;Roast provides several built-in tools that you can use in your workflows:&lt;/p&gt; 
&lt;h4&gt;Tool Configuration&lt;/h4&gt; 
&lt;p&gt;Tools can be configured using a hash format in your workflow YAML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;tools:
  - Roast::Tools::ReadFile        # No configuration needed
  - Roast::Tools::Cmd:             # With configuration
      allowed_commands:
        - git
        - npm
        - yarn
  - Roast::Tools::CodingAgent:     # Optional configuration
      coding_agent_command: claude --model opus -p --allowedTools &quot;Bash, Glob, Grep, LS, Read&quot;
      model: opus                  # Model to use for all CodingAgent invocations
      retries: 3                   # Number of automatic retries on failure (default: 0)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Currently supported configurations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Roast::Tools::Cmd&lt;/code&gt; via &lt;code&gt;allowed_commands&lt;/code&gt;: restricts which commands can be executed (defaults to: &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;rake&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Roast::Tools::CodingAgent&lt;/code&gt; via: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;coding_agent_command&lt;/code&gt;: customizes the Claude Code CLI command used by the agent&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: sets the model for all CodingAgent invocations (e.g., &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;sonnet&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;retries&lt;/code&gt;: number of times to automatically retry if the agent encounters an error (default: 0, no retries)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Cmd Tool Configuration&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;Cmd&lt;/code&gt; tool&#39;s &lt;code&gt;allowed_commands&lt;/code&gt; can be configured in two ways:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Simple String Format&lt;/strong&gt; (uses default descriptions):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;tools:
  - Roast::Tools::Cmd:
      allowed_commands:
        - pwd
        - ls
        - git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Hash Format with Custom Descriptions&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;tools:
  - Roast::Tools::Cmd:
      allowed_commands:
        - pwd
        - name: git
          description: &quot;git CLI - version control system with subcommands like status, commit, push&quot;
        - name: npm
          description: &quot;npm CLI - Node.js package manager with subcommands like install, run&quot;
        - name: docker
          description: &quot;Docker CLI - container platform with subcommands like build, run, ps&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Custom descriptions help the LLM understand when and how to use each command, making your workflows more effective.&lt;/p&gt; 
&lt;h3&gt;Step-Level Tool Filtering&lt;/h3&gt; 
&lt;p&gt;You can restrict which tools are available to specific steps using the &lt;code&gt;available_tools&lt;/code&gt; configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Define all tools globally
tools:
  - Roast::Tools::Grep
  - Roast::Tools::ReadFile
  - Roast::Tools::WriteFile
  - Roast::Tools::Cmd:
      allowed_commands:
        - pwd
        - ls
        - echo

# Configure steps with specific tool access
explore_directory:
  available_tools:
    - pwd
    - ls

analyze_files:
  available_tools:
    - grep
    - read_file

write_summary:
  available_tools:
    - write_file
    - echo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This feature provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Each step only has access to the tools it needs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reduces the tool list sent to the LLM&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clarity&lt;/strong&gt;: Makes tool usage explicit for each step&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Key points:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use snake_case tool names (e.g., &lt;code&gt;read_file&lt;/code&gt; for &lt;code&gt;Roast::Tools::ReadFile&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;For &lt;code&gt;Cmd&lt;/code&gt; tool, use the specific command names (e.g., &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;When &lt;code&gt;available_tools&lt;/code&gt; is not specified, all tools remain available (backward compatible)&lt;/li&gt; 
 &lt;li&gt;Empty array (&lt;code&gt;available_tools: []&lt;/code&gt;) means no tools for that step&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/examples/available_tools_demo/&quot;&gt;available_tools_demo&lt;/a&gt; for a complete example.&lt;/p&gt; 
&lt;h4&gt;ReadFile&lt;/h4&gt; 
&lt;p&gt;Reads the contents of a file from the filesystem.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Basic usage
read_file(path: &quot;path/to/file.txt&quot;)

# Reading a specific portion of a file
read_file(path: &quot;path/to/large_file.txt&quot;, offset: 100, limit: 50)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;path&lt;/code&gt; can be absolute or relative to the current working directory&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; for large files to read specific sections (line numbers)&lt;/li&gt; 
 &lt;li&gt;Returns the file content as a string&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;WriteFile&lt;/h4&gt; 
&lt;p&gt;Writes content to a file, creating the file if it doesn&#39;t exist or overwriting it if it does.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Basic usage
write_file(path: &quot;output.txt&quot;, content: &quot;This is the file content&quot;)

# With path restriction for security
write_file(
  path: &quot;output.txt&quot;,
  content: &quot;Restricted content&quot;,
  restrict: &quot;/safe/directory&quot; # Only allows writing to files under this path
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Creates missing directories automatically&lt;/li&gt; 
 &lt;li&gt;Can restrict file operations to specific directories for security&lt;/li&gt; 
 &lt;li&gt;Returns a success message with the number of lines written&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;UpdateFiles&lt;/h4&gt; 
&lt;p&gt;Applies a unified diff/patch to one or more files. Changes are applied atomically when possible.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;update_files(
  diff: &amp;lt;&amp;lt;~DIFF,
    --- a/file1.txt
    +++ b/file1.txt
    @@ -1,3 +1,4 @@
     line1
    +new line
     line2
     line3

    --- a/file2.txt
    +++ b/file2.txt
    @@ -5,7 +5,7 @@
     line5
     line6
    -old line7
    +updated line7
     line8
  DIFF
  base_path: &quot;/path/to/project&quot;, # Optional, defaults to current working directory
  restrict_path: &quot;/path/to/allowed&quot;, # Optional, restricts where files can be modified
  create_files: true, # Optional, defaults to true
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Accepts standard unified diff format from tools like &lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Supports multiple file changes in a single operation&lt;/li&gt; 
 &lt;li&gt;Handles file creation, deletion, and modification&lt;/li&gt; 
 &lt;li&gt;Performs atomic operations with rollback on failure&lt;/li&gt; 
 &lt;li&gt;Includes fuzzy matching to handle minor context differences&lt;/li&gt; 
 &lt;li&gt;This tool is especially useful for making targeted changes to multiple files at once&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grep&lt;/h4&gt; 
&lt;p&gt;Searches file contents for a specific pattern using regular expressions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Basic usage
grep(pattern: &quot;function\\s+myFunction&quot;)

# With file filtering
grep(pattern: &quot;class\\s+User&quot;, include: &quot;*.rb&quot;)

# With directory scope
grep(pattern: &quot;TODO:&quot;, path: &quot;src/components&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Uses regular expressions for powerful pattern matching&lt;/li&gt; 
 &lt;li&gt;Can filter by file types using the &lt;code&gt;include&lt;/code&gt; parameter&lt;/li&gt; 
 &lt;li&gt;Can scope searches to specific directories with the &lt;code&gt;path&lt;/code&gt; parameter&lt;/li&gt; 
 &lt;li&gt;Returns a list of files containing matches&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;SearchFile&lt;/h4&gt; 
&lt;p&gt;Provides advanced file search capabilities beyond basic pattern matching.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;search_file(query: &quot;class User&quot;, file_path: &quot;app/models&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Combines pattern matching with contextual search&lt;/li&gt; 
 &lt;li&gt;Useful for finding specific code structures or patterns&lt;/li&gt; 
 &lt;li&gt;Returns matched lines with context&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Cmd&lt;/h4&gt; 
&lt;p&gt;Executes shell commands with configurable restrictions. By default, only allows specific safe commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Execute allowed commands (pwd, find, ls, rake, ruby, dev, mkdir by default)
pwd(args: &quot;-L&quot;)
ls(args: &quot;-la&quot;)
ruby(args: &quot;-e &#39;puts RUBY_VERSION&#39;&quot;)

# Or use the legacy cmd function with full command
cmd(command: &quot;ls -la&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Commands are registered as individual functions based on allowed_commands configuration&lt;/li&gt; 
 &lt;li&gt;Default allowed commands: pwd, find, ls, rake, ruby, dev, mkdir&lt;/li&gt; 
 &lt;li&gt;Each command has built-in descriptions to help the LLM understand usage&lt;/li&gt; 
 &lt;li&gt;Configurable via workflow YAML (see Tool Configuration section)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Bash&lt;/h4&gt; 
&lt;p&gt;Executes shell commands without restrictions. &lt;strong&gt;⚠️ WARNING: Use only in trusted environments!&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Execute any command - no restrictions
bash(command: &quot;curl https://api.example.com | jq &#39;.data&#39;&quot;)

# Complex operations with pipes and redirects
bash(command: &quot;find . -name &#39;*.log&#39; -mtime +30 -delete&quot;)

# System administration tasks
bash(command: &quot;ps aux | grep ruby | awk &#39;{print $2}&#39;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;No command restrictions&lt;/strong&gt; - full shell access&lt;/li&gt; 
 &lt;li&gt;Designed for prototyping and development environments&lt;/li&gt; 
 &lt;li&gt;Logs warnings by default (disable with &lt;code&gt;ROAST_BASH_WARNINGS=false&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Should NOT be used in production or untrusted contexts&lt;/li&gt; 
 &lt;li&gt;See &lt;code&gt;examples/bash_prototyping/&lt;/code&gt; for usage examples&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;CodingAgent&lt;/h4&gt; 
&lt;p&gt;Creates a specialized agent for complex coding tasks or long-running operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Basic usage
coding_agent(
  prompt: &quot;Refactor the authentication module to use JWT tokens&quot;,
  include_context_summary: true,  # Include workflow context in the agent prompt
  continue: true                  # Continue from previous agent session
)

# With automatic retries on failure
coding_agent(
  prompt: &quot;Implement complex feature with error handling&quot;,
  retries: 3  # Retry up to 3 times if the agent encounters errors
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Delegates complex tasks to a specialized coding agent (Claude Code)&lt;/li&gt; 
 &lt;li&gt;Useful for tasks that require deep code understanding or multi-step changes&lt;/li&gt; 
 &lt;li&gt;Can work across multiple files and languages&lt;/li&gt; 
 &lt;li&gt;Supports automatic retries on transient failures (network issues, API errors)&lt;/li&gt; 
 &lt;li&gt;Retries can be configured globally (see Tool Configuration) or per invocation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MCP (Model Context Protocol) Tools&lt;/h3&gt; 
&lt;p&gt;Roast supports MCP tools, allowing you to integrate external services and tools through the Model Context Protocol standard. MCP enables seamless connections to databases, APIs, and specialized tools.&lt;/p&gt; 
&lt;h4&gt;Configuring MCP Tools&lt;/h4&gt; 
&lt;p&gt;MCP tools are configured in the &lt;code&gt;tools&lt;/code&gt; section of your workflow YAML alongside traditional Roast tools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;tools:
  # Traditional Roast tools
  - Roast::Tools::ReadFile

  # MCP tools with SSE (Server-Sent Events)
  - Documentation:
      url: https://gitmcp.io/myorg/myrepo/docs
      env:
        - &quot;Authorization: Bearer {{ENV[&#39;API_TOKEN&#39;]}}&quot;

  # MCP tools with stdio
  - GitHub:
      command: npx
      args: [&quot;-y&quot;, &quot;@modelcontextprotocol/server-github&quot;]
      env:
        GITHUB_PERSONAL_ACCESS_TOKEN: &quot;{{ENV[&#39;GITHUB_TOKEN&#39;]}}&quot;
      only:
        - search_repositories
        - get_issue
        - create_issue
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;SSE MCP Tools&lt;/h4&gt; 
&lt;p&gt;Connect to HTTP endpoints implementing the MCP protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- Tool Name:
    url: https://example.com/mcp-endpoint
    env:
      - &quot;Authorization: Bearer {{resource.api_token}}&quot;
    only: [function1, function2]  # Optional whitelist
    except: [function3]           # Optional blacklist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Stdio MCP Tools&lt;/h4&gt; 
&lt;p&gt;Connect to local processes implementing the MCP protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- Tool Name:
    command: docker
    args: [&quot;run&quot;, &quot;-i&quot;, &quot;--rm&quot;, &quot;ghcr.io/example/mcp-server&quot;]
    env:
      API_KEY: &quot;{{ENV[&#39;API_KEY&#39;]}}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/examples/mcp/&quot;&gt;MCP tools example&lt;/a&gt; for complete documentation and more examples.&lt;/p&gt; 
&lt;h3&gt;Custom Tools&lt;/h3&gt; 
&lt;p&gt;You can create your own tools using the &lt;a href=&quot;https://github.com/OlympiaAI/raix-rails?tab=readme-ov-file#use-of-toolsfunctions&quot;&gt;Raix function dispatch pattern&lt;/a&gt;. Custom tools should be placed in &lt;code&gt;.roast/initializers/&lt;/code&gt; (subdirectories are supported):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# .roast/initializers/tools/git_analyzer.rb
module MyProject
  module Tools
    module GitAnalyzer
      extend self

      def self.included(base)
        base.class_eval do
          function(
            :analyze_commit,
            &quot;Analyze a git commit for code quality and changes&quot;,
            commit_sha: { type: &quot;string&quot;, description: &quot;The SHA of the commit to analyze&quot; },
            include_diff: { type: &quot;boolean&quot;, description: &quot;Include the full diff in the analysis&quot;, default: false }
          ) do |params|
            GitAnalyzer.call(params[:commit_sha], params[:include_diff])
          end
        end
      end

      def call(commit_sha, include_diff = false)
        Roast::Helpers::Logger.info(&quot;🔍 Analyzing commit: #{commit_sha}\n&quot;)

        # Your implementation here
        commit_info = `git show #{commit_sha} --stat`
        commit_info += &quot;\n\n&quot; + `git show #{commit_sha}` if include_diff

        commit_info
      rescue StandardError =&amp;gt; e
        &quot;Error analyzing commit: #{e.message}&quot;.tap do |error_message|
          Roast::Helpers::Logger.error(error_message + &quot;\n&quot;)
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then include your tool in the workflow:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;tools:
  - MyProject::Tools::GitAnalyzer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The tool will be available to the AI model during workflow execution, and it can call &lt;code&gt;analyze_commit&lt;/code&gt; with the appropriate parameters.&lt;/p&gt; 
&lt;h3&gt;Project-specific Configuration&lt;/h3&gt; 
&lt;p&gt;You can extend Roast with project-specific configuration by creating initializers in &lt;code&gt;.roast/initializers/&lt;/code&gt;. These are automatically loaded when workflows run, allowing you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add custom instrumentation&lt;/li&gt; 
 &lt;li&gt;Configure monitoring and metrics&lt;/li&gt; 
 &lt;li&gt;Set up project-specific tools&lt;/li&gt; 
 &lt;li&gt;Customize workflow behavior&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example structure:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;your-project/
  ├── .roast/
  │   └── initializers/
  │       ├── metrics.rb
  │       ├── logging.rb
  │       └── custom_tools.rb
  └── ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre/Post Processing Framework&lt;/h3&gt; 
&lt;p&gt;Roast supports pre-processing and post-processing phases for workflows. This enables powerful workflows that need setup/teardown or result aggregation across all processed files.&lt;/p&gt; 
&lt;h4&gt;Overview&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Pre-processing&lt;/strong&gt;: Steps executed once before any targets are processed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Post-processing&lt;/strong&gt;: Steps executed once after all targets have been processed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Shared state&lt;/strong&gt;: Pre-processing results are available to all subsequent steps&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Result aggregation&lt;/strong&gt;: Post-processing has access to all workflow execution results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Single-target support&lt;/strong&gt;: Pre/post processing works with single-target workflows too&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Output templates&lt;/strong&gt;: Post-processing supports &lt;code&gt;output.txt&lt;/code&gt; templates for custom formatting&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Configuration&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: optimize_tests
model: gpt-4o
target: &quot;test/**/*_test.rb&quot;

# Pre-processing steps run once before any test files
pre_processing:
  - gather_baseline_metrics
  - setup_test_environment

# Main workflow steps run for each test file
steps:
  - analyze_test
  - improve_coverage
  - optimize_performance

# Post-processing steps run once after all test files
post_processing:
  - aggregate_results
  - generate_report
  - cleanup_environment
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Directory Structure&lt;/h4&gt; 
&lt;p&gt;Pre and post-processing steps follow the same conventions as regular steps but are organized in their own directories:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;workflow.yml
pre_processing/
  ├── gather_baseline_metrics/
  │   └── prompt.md
  └── setup_test_environment/
      └── prompt.md
analyze_test/
  └── prompt.md
improve_coverage/
  └── prompt.md
optimize_performance/
  └── prompt.md
post_processing/
  ├── output.txt
  ├── aggregate_results/
  │   └── prompt.md
  ├── generate_report/
  │   └── prompt.md
  └── cleanup_environment/
      └── prompt.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Data Access&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Pre-processing results in target workflows:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Target workflows have access to pre-processing results through the &lt;code&gt;pre_processing_data&lt;/code&gt; variable with dot notation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;# In a target workflow step prompt
The baseline metrics from pre-processing:
&amp;lt;%= pre_processing_data.gather_baseline_metrics %&amp;gt;

Environment setup details:
&amp;lt;%= pre_processing_data.setup_test_environment %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Post-processing data access:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Post-processing steps have access to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pre_processing&lt;/code&gt;: Direct access to pre-processing results with dot notation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;targets&lt;/code&gt;: Hash of all target workflow results, keyed by file paths&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example post-processing prompt:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Generate Summary Report

Based on the baseline metrics:
&amp;lt;%= pre_processing.gather_baseline_metrics %&amp;gt;

Environment configuration:
&amp;lt;%= pre_processing.setup_test_environment %&amp;gt;

And the results from processing all files:
&amp;lt;% targets.each do |file, target| %&amp;gt;
File: &amp;lt;%= file %&amp;gt;
Analysis results: &amp;lt;%= target.output.analyze_test %&amp;gt;
Coverage improvements: &amp;lt;%= target.output.improve_coverage %&amp;gt;
Performance optimizations: &amp;lt;%= target.output.optimize_performance %&amp;gt;
&amp;lt;% end %&amp;gt;

Please generate a comprehensive summary report showing:
1. Overall improvements achieved
2. Files with the most significant changes
3. Recommendations for further optimization
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Output Templates&lt;/h4&gt; 
&lt;p&gt;Post-processing supports custom output formatting using ERB templates. Create an &lt;code&gt;output.txt&lt;/code&gt; file in your &lt;code&gt;post_processing&lt;/code&gt; directory to format the final workflow output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;# post_processing/output.txt
=== Workflow Summary Report ===
Generated at: &amp;lt;%= Time.now.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) %&amp;gt;

Environment: &amp;lt;%= pre_processing.setup_test_environment %&amp;gt;

Files Processed: &amp;lt;%= targets.size %&amp;gt;

&amp;lt;% targets.each do |file, target| %&amp;gt;
- &amp;lt;%= file %&amp;gt;: &amp;lt;%= target.output.analyze_test %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= output.generate_report %&amp;gt;
===============================
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The template has access to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pre_processing&lt;/code&gt;: All pre-processing step outputs with dot notation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;targets&lt;/code&gt;: Hash of all target workflow results with dot notation (each target has &lt;code&gt;.output&lt;/code&gt; and &lt;code&gt;.final_output&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;output&lt;/code&gt;: Post-processing step outputs with dot notation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Use Cases&lt;/h4&gt; 
&lt;p&gt;This pattern is ideal for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Code migrations&lt;/strong&gt;: Setup migration tools, process files, generate migration report&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test optimization&lt;/strong&gt;: Baseline metrics, optimize tests, aggregate improvements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Documentation generation&lt;/strong&gt;: Analyze codebase, generate docs per module, create index&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dependency updates&lt;/strong&gt;: Check versions, update files, verify compatibility&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security audits&lt;/strong&gt;: Setup scanners, check each file, generate security report&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance analysis&lt;/strong&gt;: Establish baselines, analyze components, summarize findings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/Shopify/roast/main/examples/pre_post_processing&quot;&gt;pre/post processing example&lt;/a&gt; for a complete working demonstration.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;After checking out the repo, run &lt;code&gt;bundle install&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;bundle exec rake&lt;/code&gt; to run the tests and linter. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rswag/rswag</title>
      <link>https://github.com/rswag/rswag</link>
      <description>&lt;p&gt;Seamlessly adds a Swagger to Rails-based API&#39;s&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rswag&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/rswag/rswag/actions/workflows/ruby.yml?query=branch%3Amaster+&quot;&gt;&lt;img src=&quot;https://github.com/rswag/rswag/actions/workflows/ruby.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/rswag/rswag/maintainability&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/1175b984edc4610f82ab/maintainability&quot; alt=&quot;Maintainability&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenApi 3.0 compatible!&lt;/p&gt; 
&lt;p&gt;Seeking maintainers! Got a pet-bug that needs fixing? Just let us know in your issue/pr that you&#39;d like to step up to help.&lt;/p&gt; 
&lt;p&gt;Rswag extends rspec-rails &quot;request specs&quot; with a Swagger-based DSL for describing and testing API operations. You describe your API operations with a succinct, intuitive syntax, and it automatically runs the tests. Once you have green tests, run a rake task to auto-generate corresponding OpenAPI files and expose them as YAML or JSON endpoints. Rswag also provides an embedded version of the awesome &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;swagger-ui&lt;/a&gt; that&#39;s powered by the exposed file. This toolchain makes it seamless to go from integration specs, which you&#39;re probably doing in some form already, to living documentation for your API consumers.&lt;/p&gt; 
&lt;p&gt;Api Rswag creates &lt;a href=&quot;http://swagger.io&quot;&gt;Swagger&lt;/a&gt; tooling for Rails API&#39;s. Generate beautiful API documentation, including a UI to explore and test operations, directly from your rspec integration tests.&lt;/p&gt; 
&lt;p&gt;And that&#39;s not all ...&lt;/p&gt; 
&lt;p&gt;Once you have an API that can describe itself in Swagger, you&#39;ve opened the treasure chest of Swagger-based tools including a client generator that can be targeted to a wide range of popular platforms. See &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;swagger-codegen&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#rswag&quot;&gt;rswag&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#the-rspec-dsl&quot;&gt;The rspec DSL&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#paths-operations-and-responses&quot;&gt;Paths, Operations and Responses&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#null-values&quot;&gt;Null Values&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#support-for-oneof-anyof-or-allof-schemas&quot;&gt;Support for oneOf, anyOf or AllOf schemas&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#global-metadata&quot;&gt;Global Metadata&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#supporting-multiple-versions-of-api&quot;&gt;Supporting multiple versions of API&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#formatting-the-description-literals&quot;&gt;Formatting the description literals:&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#specifyingtesting-api-security&quot;&gt;Specifying/Testing API Security&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#configuration--customization&quot;&gt;Configuration &amp;amp; Customization&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#output-location-for-generated-openapi-files&quot;&gt;Output Location for Generated OpenAPI Files&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#input-location-for-rspec-tests&quot;&gt;Input Location for Rspec Tests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#referenced-parameters-and-schema-definitions&quot;&gt;Referenced Parameters and Schema Definitions&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#request-examples&quot;&gt;Request examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#response-headers&quot;&gt;Response headers&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#nullable-or-optional-response-headers&quot;&gt;Nullable or Optional Response Headers&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#response-examples&quot;&gt;Response examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#enable-auto-generation-examples-from-responses&quot;&gt;Enable auto generation examples from responses&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#dry-run-option&quot;&gt;Dry Run Option&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#running-tests-without-documenting&quot;&gt;Running tests without documenting&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#rswag-helper-methods&quot;&gt;rswag helper methods&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#route-prefix-for-openapi-json-endpoints&quot;&gt;Route Prefix for OpenAPI JSON Endpoints&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#root-location-for-openapi-files&quot;&gt;Root Location for OpenAPI Files&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#dynamic-values-for-openapi-json&quot;&gt;Dynamic Values for OpenAPI JSON&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#custom-headers-for-openapi-files&quot;&gt;Custom Headers for OpenAPI Files&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#enable-swagger-endpoints-for-swagger-ui&quot;&gt;Enable Swagger Endpoints for swagger-ui&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#enable-simple-basic-auth-for-swagger-ui&quot;&gt;Enable Simple Basic Auth for swagger-ui&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#route-prefix-for-the-swagger-ui&quot;&gt;Route Prefix for the swagger-ui&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#customizing-the-swagger-ui&quot;&gt;Customizing the swagger-ui&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/rswag/rswag/master/#serve-ui-assets-directly-from-your-web-server&quot;&gt;Serve UI Assets Directly from your Web Server&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Add this line to your applications &lt;em&gt;Gemfile&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &#39;rswag&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you like to avoid loading rspec in other bundler groups load the rswag-specs component separately. Note: Adding it to the :development group is not strictly necessary, but without it, generators and rake tasks must be preceded by RAILS_ENV=test.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Gemfile
gem &#39;rswag-api&#39;
gem &#39;rswag-ui&#39;

group :development, :test do
  gem &#39;rspec-rails&#39;
  gem &#39;rswag-specs&#39;
end
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the install generator&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;rails g rswag:install
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;rails g rswag:api:install
rails g rswag:ui:install
RAILS_ENV=test rails g rswag:specs:install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create an integration spec to describe and test your API. There is also a generator which can help get you started &lt;code&gt;rails generate rspec:swagger API::MyController&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/requests/blogs_spec.rb
require &#39;openapi_helper&#39;

describe &#39;Blogs API&#39; do

  path &#39;/blogs&#39; do

    post &#39;Creates a blog&#39; do
      tags &#39;Blogs&#39;
      consumes &#39;application/json&#39;
      parameter name: &#39;blog&#39;, in: :body, schema: {
        type: :object,
        properties: {
          title: { type: :string },
          content: { type: :string }
        },
        required: [ &#39;title&#39;, &#39;content&#39; ]
      }

      response &#39;201&#39;, &#39;blog created&#39; do
        let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39;, content: &#39;bar&#39; } } } }
        run_test!
      end

      response &#39;422&#39;, &#39;invalid request&#39; do
        let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39; } } }
        run_test!
      end
    end
  end

  path &#39;/blogs/{id}&#39; do

    get &#39;Retrieves a blog&#39; do
      tags &#39;Blogs&#39;, &#39;Another Tag&#39;
      produces &#39;application/json&#39;, &#39;application/xml&#39;
      parameter name: &#39;id&#39;, in: :path, type: :string
      request_body_example value: { some_field: &#39;Foo&#39; }, name: &#39;basic&#39;, summary: &#39;Request example description&#39;

      response &#39;200&#39;, &#39;blog found&#39; do
        schema type: :object,
          properties: {
            id: { type: :integer },
            title: { type: :string },
            content: { type: :string }
          },
          required: [ &#39;id&#39;, &#39;title&#39;, &#39;content&#39; ]

        let(:request_params) { &#39;id&#39; =&amp;gt; { Blog.create(title: &#39;foo&#39;, content: &#39;bar&#39;).id } }
        run_test!
      end

      response &#39;404&#39;, &#39;blog not found&#39; do
        let(:request_params) { { &#39;id&#39; =&amp;gt; &#39;invalid&#39; } }
        run_test!
      end

      response &#39;406&#39;, &#39;unsupported accept header&#39; do
        let(:request_headers) { { &#39;Accept&#39; =&amp;gt; &#39;application/foo&#39; } }
        run_test!
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default, the above command will create spec under &lt;em&gt;spec/requests&lt;/em&gt; folder. You can pass an option to change this default path as in &lt;code&gt;rails generate rspec:swagger API::BlogsController --spec_path integration&lt;/code&gt;. This will create the spec file &lt;em&gt;spec/integration/blogs_spec.rb&lt;/em&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Generate the OpenAPI JSON file(s)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;rake rswag:specs:swaggerize
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This common command is also aliased as &lt;code&gt;rake rswag&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Or if you installed your gems separately:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;RAILS_ENV=test rails rswag
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spin up your app and check out the awesome, auto-generated docs at &lt;em&gt;/api-docs&lt;/em&gt;!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;The rspec DSL&lt;/h2&gt; 
&lt;h3&gt;Paths, Operations and Responses&lt;/h3&gt; 
&lt;p&gt;If you&#39;ve used &lt;a href=&quot;http://swagger.io/specification&quot;&gt;Swagger&lt;/a&gt; before, then the syntax should be very familiar. To describe your API operations, start by specifying a path and then list the supported operations (i.e. HTTP verbs) for that path. Path parameters must be surrounded by curly braces ({}). Within an operation block (see &quot;post&quot; or &quot;get&quot; in the example above), most of the fields supported by the &lt;a href=&quot;http://swagger.io/specification/#operationObject&quot;&gt;Swagger &quot;Operation&quot; object&lt;/a&gt; are available as methods on the example group. To list (and test) the various responses for an operation, create one or more response blocks. Again, you can reference the &lt;a href=&quot;http://swagger.io/specification/#responseObject&quot;&gt;Swagger &quot;Response&quot; object&lt;/a&gt; for available fields.&lt;/p&gt; 
&lt;p&gt;Take special note of the &lt;strong&gt;run_test!&lt;/strong&gt; method that&#39;s called within each response block. This tells rswag to create and execute a corresponding example. It builds and submits a request based on parameter descriptions and corresponding values that have been provided using the &lt;code&gt;request_params&lt;/code&gt; rspec variable. For example, the &quot;post&quot; description in the example above specifies a &quot;body&quot; parameter called &quot;blog&quot;. It also lists 2 different responses. For the success case (i.e. the 201 response), notice how &lt;code&gt;request_params&lt;/code&gt; is used to set the blog parameter to a value that matches the provided schema. For the failure case (i.e. the 422 response), notice how it&#39;s set to a value that does not match the provided schema. When the test is executed, rswag also validates the actual response code and, where applicable, the response body against the provided &lt;a href=&quot;https://json-schema.org/specification&quot;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to add metadata to the example, you can pass keyword arguments to the &lt;strong&gt;run_test!&lt;/strong&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# to run particular test case
response &#39;201&#39;, &#39;blog created&#39; do
  run_test! focus: true
end

# to write vcr cassette
response &#39;201&#39;, &#39;blog created&#39; do
  run_test! vcr: true
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to customize the description of the generated specification, a description can be passed to &lt;strong&gt;run_test!&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response &#39;201&#39;, &#39;blog created&#39; do
  run_test! &quot;custom spec description&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to do additional validation on the response, pass a block to the &lt;strong&gt;run_test!&lt;/strong&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response &#39;201&#39;, &#39;blog created&#39; do
  run_test! do |response|
    data = JSON.parse(response.body)
    expect(data[&#39;title&#39;]).to eq(&#39;foo&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;d like your specs to be a little more explicit about what&#39;s going on here, you can replace the call to &lt;strong&gt;run_test!&lt;/strong&gt; with equivalent &quot;before&quot; and &quot;it&quot; blocks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;response &#39;201&#39;, &#39;blog created&#39; do
  let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39;, content: &#39;bar&#39; } } }

  before do |example|
    submit_request(example.metadata)
  end

  it &#39;returns a valid 201 response&#39; do |example|
    assert_response_matches_metadata(example.metadata)
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also note that the examples generated with &lt;strong&gt;run_test!&lt;/strong&gt; are tagged with the &lt;code&gt;:rswag&lt;/code&gt; so they can easily be filtered. E.g. &lt;code&gt;rspec --tag rswag&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;date-time in query parameters&lt;/h3&gt; 
&lt;p&gt;Input sent in queries of Rspec tests is HTML safe, including date-time strings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;parameter name: &#39;date_time&#39;, in: :query, type: :string

response &#39;200&#39;, &#39;blog found&#39; do
  let(:date_time) { DateTime.new(2001, 2, 3, 4, 5, 6, &#39;-7&#39;).to_s }
  let(:request_params) { { &#39;date_time&#39; =&amp;gt; date_time } }

  run_test! do
    expect(request[:path]).to eq(&#39;/blogs?date_time=2001-02-03T04%3A05%3A06-07%3A00&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enum description&lt;/h3&gt; 
&lt;p&gt;If you want to output a description of each enum value, the description can be passed to each value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;parameter name: &#39;status&#39;, in: :query,
          enum: { &#39;draft&#39;: &#39;Retrieves draft blogs&#39;, &#39;published&#39;: &#39;Retrieves published blogs&#39;, &#39;archived&#39;: &#39;Retrieves archived blogs&#39; },
          description: &#39;Filter by status&#39;

response &#39;200&#39;, &#39;success&#39; do
  let(:request_params) { {&#39;status&#39; =&amp;gt; &#39;published&#39;} }

  run_test!
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Schema validations&lt;/h3&gt; 
&lt;h4&gt;Additional properties&lt;/h4&gt; 
&lt;p&gt;If you want to disallow additional properties in response body, you can set the option &lt;code&gt;openapi_no_additional_properties&lt;/code&gt; to true:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/swagger_helper.rb
RSpec.configure do |config|
  config.openapi_no_additional_properties = true # default false
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can set similarly the option per individual example as shown in Strict (deprecated) sections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;      response &#39;200&#39;, &#39;blog found&#39;, :openapi_no_additional_properties do
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;      response &#39;200&#39;, &#39;blog found&#39;, openapi_no_additional_properties: true do
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;All required properties&lt;/h4&gt; 
&lt;p&gt;If you want to disallow missing required properties in response body, you can set the &lt;code&gt;openapi_all_properties_required&lt;/code&gt; option to true: &lt;strong&gt;Important&lt;/strong&gt; it will allow the additional properties&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/swagger_helper.rb
RSpec.configure do |config|
  config.openapi_all_properties_required = true # default false
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can set similarly the option per individual example as shown in Strict (deprecated) sections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;      response &#39;200&#39;, &#39;blog found&#39;, :openapi_all_properties_required do
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;      response &#39;200&#39;, &#39;blog found&#39;, openapi_all_properties_required: true do
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Null Values&lt;/h3&gt; 
&lt;p&gt;This library is currently using JSON::Draft4 for validation of response models. Nullable properties can be supported with the non-standard property &#39;x-nullable&#39; to a definition to allow null/nil values to pass. Or you can add the new standard &lt;code&gt;nullable&lt;/code&gt; property to a definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;describe &#39;Blogs API&#39; do
  path &#39;/blogs&#39; do
    post &#39;Creates a blog&#39; do
      ...

      response &#39;200&#39;, &#39;blog found&#39; do
        schema type: :object,
          properties: {
            id: { type: :integer },
            title: { type: :string, nullable: true }, # preferred syntax
            content: { type: :string, &#39;x-nullable&#39;: true } # legacy syntax, but still works
          }
        ....
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Support for oneOf, anyOf or AllOf schemas&lt;/h3&gt; 
&lt;p&gt;OpenAPI 3.0 supports more flexible schema validation with the &lt;code&gt;oneOf&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt; and &lt;code&gt;allOf&lt;/code&gt; directives. rswag will handle these definitions and validate them properly.&lt;/p&gt; 
&lt;p&gt;Notice the &lt;code&gt;schema&lt;/code&gt; inside the &lt;code&gt;response&lt;/code&gt; section. Placing a &lt;code&gt;schema&lt;/code&gt; method inside the response will validate (and fail the tests) if during the integration test run the endpoint response does not match the response schema. This test validation can handle anyOf and allOf as well. See below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;
  path &#39;/blogs/flexible&#39; do
    post &#39;Creates a blog flexible body&#39; do
      tags &#39;Blogs&#39;
      description &#39;Creates a flexible blog from provided data&#39;
      operationId &#39;createFlexibleBlog&#39;
      consumes &#39;application/json&#39;
      produces &#39;application/json&#39;

      parameter name: &#39;blog&#39;, in: :body, schema: {
          oneOf: [
            { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/blog&#39; },
            { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/flexible_blog&#39; }
          ]
        }

      response &#39;201&#39;, &#39;flexible blog created&#39; do
        schema oneOf: [{ &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/blog&#39; }, { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/flexible_blog&#39; }]
        run_test!
      end
    end
  end

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This automatic schema validation is a powerful feature of rswag.&lt;/p&gt; 
&lt;h3&gt;Global Metadata&lt;/h3&gt; 
&lt;p&gt;In addition to paths, operations and responses, OpenAPI also supports global API metadata. When you install rswag, a file called &lt;em&gt;openapi_helper.rb&lt;/em&gt; is added to your spec folder. This is where you define one or more OpenAPI documents and provide global metadata. Again, the format is based on OpenAPI so most of the global fields supported by the top level &lt;a href=&quot;http://swagger.io/specification/#swaggerObject&quot;&gt;&quot;Swagger&quot; object&lt;/a&gt; can be provided with each document definition. As an example, you could define an OpenAPI document for each version of your API and in each case specify a title, version string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/openapi_helper.rb
RSpec.configure do |config|
  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;

  config.openapi_specs = {
    &#39;v1/openapi.json&#39; =&amp;gt; {
      openapi: &#39;3.0.1&#39;,
      info: {
        title: &#39;API V1&#39;,
        version: &#39;v1&#39;,
        description: &#39;This is the first version of my API&#39;
      },
      servers: [
        {
          url: &#39;https://{defaultHost}&#39;,
          variables: {
            defaultHost: {
                default: &#39;www.example.com&#39;
            }
          }
        }
      ]
    },

    &#39;v2/openapi.yaml&#39; =&amp;gt; {
      openapi: &#39;3.0.1&#39;,
      info: {
        title: &#39;API V2&#39;,
        version: &#39;v2&#39;,
        description: &#39;This is the second version of my API&#39;
      },
      servers: [
        {
          url: &#39;{protocol}://{defaultHost}&#39;,
          variables: {
            protocol: {
              default: :https
            },
            defaultHost: {
                default: &#39;www.example.com&#39;
            }
          }
        }
      ]
    }
  }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supporting multiple versions of API&lt;/h4&gt; 
&lt;p&gt;By default, the paths, operations and responses defined in your spec files will be associated with the first OpenAPI document in &lt;em&gt;openapi_helper.rb&lt;/em&gt;. If your API has multiple versions, you should be using separate documents to describe each of them. In order to assign a file with a given version of API, you&#39;ll need to add the &lt;code&gt;openapi_spec&lt;/code&gt; tag to each spec specifying its target document name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/requests/v2/blogs_spec.rb
describe &#39;Blogs API&#39;, openapi_spec: &#39;v2/openapi.yaml&#39; do

  path &#39;/blogs&#39; do
  ...

  path &#39;/blogs/{id}&#39; do
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supporting YAML format&lt;/h4&gt; 
&lt;p&gt;By default, the OpenAPI specs are generated in JSON format. If you want to generate them in YAML format, you can specify the OpenAPI format in the &lt;code&gt;openapi_helper.rb&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/openapi_helper.rb
RSpec.configure do |config|
  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;

  # Use if you want to see which test is running
  # config.formatter = :documentation

  # Generate OpenAPI docs in YAML format
  config.openapi_format = :yaml

  config.openapi_specs = {
    &#39;v1/openapi.yaml&#39; =&amp;gt; {
      openapi: &#39;3.0.1&#39;,
      info: {
        title: &#39;API V1&#39;,
        version: &#39;v1&#39;,
        description: &#39;This is the first version of my API&#39;
      },
      servers: [
        {
          url: &#39;https://{defaultHost}&#39;,
          variables: {
            defaultHost: {
                default: &#39;www.example.com&#39;
            }
          }
        }
      ]
    },
  }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Formatting the description literals:&lt;/h4&gt; 
&lt;p&gt;OpenAPI supports the Markdown syntax to format strings. This can be especially handy if you were to provide a long description of a given API version or endpoint. Use &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;this guide&lt;/a&gt; for reference.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There is one difference between the official Markdown syntax and OpenAPI interpretation, namely tables. To create a table like this:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Column1&lt;/th&gt; 
   &lt;th&gt;Column2&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cell1&lt;/td&gt; 
   &lt;td&gt;cell2&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;you should use the following syntax, making sure there is no whitespace at the start of any of the lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;amp;#13;
| Column1 | Column2 | &amp;amp;#13; |
| ------- | ------- |&amp;amp;#13;
| cell1   | cell2    |&amp;amp;#13;
&amp;amp;#13;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Specifying/Testing API Security&lt;/h3&gt; 
&lt;p&gt;OpenAPI allows for the specification of different security schemes and their applicability to operations in an API. To leverage this in rswag, you define the schemes globally in &lt;em&gt;openapi_helper.rb&lt;/em&gt; and then use the &quot;security&quot; attribute at the operation level to specify which schemes, if any, are applicable to that operation. OpenAPI supports :basic, :bearer, :apiKey and :oauth2 and :openIdConnect scheme types. See &lt;a href=&quot;https://swagger.io/docs/specification/authentication/&quot;&gt;the spec&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/openapi_helper.rb
RSpec.configure do |config|
  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;

  config.openapi_specs = {
    &#39;v1/openapi.json&#39; =&amp;gt; {
      ...  # note the new Open API 3.0 compliant security structure here, under &quot;components&quot;
      components: {
        securitySchemes: {
          basic_auth: {
            type: :http,
            scheme: :basic
          },
          api_key: {
            type: :apiKey,
            name: &#39;api_key&#39;,
            in: :header
          }
        }
      }
    }
  }
end

# spec/requests/blogs_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs&#39; do

    post &#39;Creates a blog&#39; do
      tags &#39;Blogs&#39;
      security [ basic_auth: [] ]
      ...

      response &#39;201&#39;, &#39;blog created&#39; do
        let(:request_headers) { { &#39;Authorization&#39; =&amp;gt; &quot;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&quot; } }
        run_test!
      end

      response &#39;401&#39;, &#39;authentication failed&#39; do
        let(:request_headers) { { &#39;Authorization&#39; =&amp;gt; &quot;Basic #{::Base64.strict_encode64(&#39;bogus:bogus&#39;)}&quot; } }
        run_test!
      end
    end
  end
end

# example of documenting an endpoint that handles basic auth and api key based security
describe &#39;Auth examples API&#39; do
  path &#39;/auth-tests/basic-and-api-key&#39; do
    post &#39;Authenticates with basic auth and api key&#39; do
      tags &#39;Auth Tests&#39;
      operationId &#39;testBasicAndApiKey&#39;
      security [{ basic_auth: [], api_key: [] }]

      response &#39;204&#39;, &#39;Valid credentials&#39; do
        let(:request_headers) {
          {
            &#39;Authorization&#39; =&amp;gt; &quot;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&quot;
            &#39;api_key&#39; =&amp;gt; &#39;foobar&#39;,
          }
        }
        run_test!
      end

      response &#39;401&#39;, &#39;Invalid credentials&#39; do
        let(:request_headers) {
          {
            &#39;Authorization&#39; =&amp;gt; &quot;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&quot;
            &#39;api_key&#39; =&amp;gt; &#39;bar-foo&#39;,
          }
        }
        run_test!
      end
    end
  end
end


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Depending on the scheme types, you&#39;ll be required to assign a corresponding parameter value with each example. For example, :basic auth is required above and so the :Authorization (header) parameter must be set accordingly&lt;/p&gt; 
&lt;h2&gt;Configuration &amp;amp; Customization&lt;/h2&gt; 
&lt;p&gt;The steps described above will get you up and running with minimal setup. However, rswag offers a lot of flexibility to customize as you see fit. Before exploring the various options, you&#39;ll need to be aware of its different components. The following table lists each of them and the files that get added/updated as part of a standard install.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Gem&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Added/Updated&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;rswag-specs&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Swagger-based DSL for rspec &amp;amp; accompanying rake task for generating OpenAPI files&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;spec/openapi_helper.rb&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;rswag-api&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Rails Engine that exposes your OpenAPI files as JSON endpoints&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;config/initializers/rswag_api.rb, config/routes.rb&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;rswag-ui&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Rails Engine that includes &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;swagger-ui&lt;/a&gt; and powers it from your Swagger endpoints&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;config/initializers/rswag_ui.rb, config/routes.rb&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Output Location for Generated OpenAPI Files&lt;/h3&gt; 
&lt;p&gt;You can adjust this in the &lt;em&gt;openapi_helper.rb&lt;/em&gt; that&#39;s installed with &lt;strong&gt;rswag-specs&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/openapi_helper.rb
RSpec.configure do |config|
  config.openapi_root = Rails.root.to_s + &#39;/your-custom-folder-name&#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you do change this, you&#39;ll also need to update the rswag_api.rb initializer (assuming you&#39;re using rswag-api). More on this later.&lt;/p&gt; 
&lt;h3&gt;Input Location for Rspec Tests&lt;/h3&gt; 
&lt;p&gt;By default, rswag will search for integration tests in &lt;em&gt;spec/requests&lt;/em&gt;, &lt;em&gt;spec/api&lt;/em&gt; and &lt;em&gt;spec/integration&lt;/em&gt;. If you want to use tests from other locations, provide the PATTERN argument to rake:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# search for tests in spec/openapi
rake rswag:specs:swaggerize PATTERN=&quot;spec/openapi/**/*_spec.rb&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Additional rspec options&lt;/h3&gt; 
&lt;p&gt;You can add additional rspec parameters using the ADDITIONAL_RSPEC_OPTS env variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Only include tests tagged &quot;rswag&quot;
rake rswag:specs:swaggerize ADDITIONAL_RSPEC_OPTS=&quot;--tag rswag&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Referenced Parameters and Schema Definitions&lt;/h3&gt; 
&lt;p&gt;OpenAPI allows you to describe JSON structures inline with your operation descriptions OR as referenced globals. For example, you might have a standard response structure for all failed operations. Rather than repeating the schema in every operation spec, you can define it globally and provide a reference to it in each spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/openapi_helper.rb
config.openapi_specs = {
  &#39;v1/openapi.json&#39; =&amp;gt; {
    openapi: &#39;3.0.0&#39;,
    info: {
      title: &#39;API V1&#39;
    },
    components: {
      schemas: {
        errors_object: {
          type: &#39;object&#39;,
          properties: {
            errors: { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_map&#39; }
          }
        },
        errors_map: {
          type: &#39;object&#39;,
          additionalProperties: {
            type: &#39;array&#39;,
            items: { type: &#39;string&#39; }
          }
        },
        blog: {
          type: &#39;object&#39;,
          properties: {
            id: { type: &#39;integer&#39; },
            title: { type: &#39;string&#39; },
            content: { type: &#39;string&#39;, nullable: true },
            thumbnail: { type: &#39;string&#39;, nullable: true }
          },
          required: %w[id title]
        },
        new_blog: {
          type: &#39;object&#39;,
          properties: {
            title: { type: &#39;string&#39; },
            content: { type: &#39;string&#39;, nullable: true },
            thumbnail: { type: &#39;string&#39;, format: &#39;binary&#39;, nullable: true }
          },
          required: %w[title]
        }
      }
    }
  }
}

# spec/requests/blogs_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs&#39; do

    post &#39;Creates a blog&#39; do

      parameter name: &#39;new_blog&#39;, in: :body, schema: { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/new_blog&#39; }

      response 422, &#39;invalid request&#39; do
        schema &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_object&#39;
  ...
end

# spec/requests/comments_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs/{blog_id}/comments&#39; do

    post &#39;Creates a comment&#39; do

      response 422, &#39;invalid request&#39; do
        schema &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_object&#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request examples&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/integration/blogs_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs/{blog_id}&#39; do

    get &#39;Retrieves a blog&#39; do

      request_body_example value: { some_field: &#39;Foo&#39; }, name: &#39;request_example_1&#39;, summary: &#39;A request example&#39;

      response 200, &#39;blog found&#39; do
        ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to use the actual request from the spec as the example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;config.after(:each, operation: true, use_as_request_example: true) do |spec|
  spec.metadata[:operation][:request_examples] ||= []

  example = {
    value: JSON.parse(request.body.string, symbolize_names: true),
    name: &#39;request_example_1&#39;,
    summary: &#39;A request example&#39;
  }

  spec.metadata[:operation][:request_examples] &amp;lt;&amp;lt; example
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response headers&lt;/h3&gt; 
&lt;p&gt;In Rswag, you could use &lt;code&gt;header&lt;/code&gt; method inside the response block to specify header objects for this response. Rswag will validate your response headers with those header objects and inject them into the generated OpenAPI spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/requests/comments_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs/{blog_id}/comments&#39; do

    post &#39;Creates a comment&#39; do

      response 422, &#39;invalid request&#39; do
        header &#39;X-Rate-Limit-Limit&#39;, schema: { type: :integer }, description: &#39;The number of allowed requests in the current period&#39;
        header &#39;X-Rate-Limit-Remaining&#39;, schema: { type: :integer }, description: &#39;The number of remaining requests in the current period&#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Nullable or Optional Response Headers&lt;/h4&gt; 
&lt;p&gt;You can include &lt;code&gt;nullable&lt;/code&gt; or &lt;code&gt;required&lt;/code&gt; to specify whether a response header must be present or may be null. When &lt;code&gt;nullable&lt;/code&gt; is not included, the headers validation validates that the header response is non-null. When &lt;code&gt;required&lt;/code&gt; is not included, the headers validation validates the the header response is passed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/integration/comments_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs/{blog_id}/comments&#39; do

    get &#39;Gets a list of comments&#39; do

      response 200, &#39;blog found&#39; do
        header &#39;X-Cursor&#39;, schema: { type: :string, nullable: true }, description: &#39;The cursor to get the next page of comments.&#39;
        header &#39;X-Per-Page&#39;, schema: { type: :integer }, required: false, description: &#39;The number of comments per page.&#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response examples&lt;/h3&gt; 
&lt;p&gt;You can provide custom response examples to the generated OpenAPI spec by calling the method &lt;code&gt;examples&lt;/code&gt; inside the response block: However, auto generated example responses are now enabled by default in rswag. See below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/requests/blogs_spec.rb
describe &#39;Blogs API&#39; do

  path &#39;/blogs/{blog_id}&#39; do

    get &#39;Retrieves a blog&#39; do

      response 200, &#39;blog found&#39; do
        example &#39;application/json&#39;, :example_key, {
            id: 1,
            title: &#39;Hello world!&#39;,
            content: &#39;...&#39;
          }
        example &#39;application/json&#39;, :example_key_2, {
            id: 1,
            title: &#39;Hello world!&#39;,
            content: &#39;...&#39;
          }, &quot;Summary of the example&quot;, &quot;Longer description of the example&quot;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enable auto generation examples from responses&lt;/h3&gt; 
&lt;p&gt;To enable examples generation from responses add callback above run_test! like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;after do |example|
  content = example.metadata[:response][:content] || {}
  example_spec = {
    &quot;application/json&quot;=&amp;gt;{
      examples: {
        test_example: {
          value: JSON.parse(response.body, symbolize_names: true)
        }
      }
    }
  }
  example.metadata[:response][:content] = content.deep_merge(example_spec)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note you will need to disable the &lt;code&gt;--dry-run&lt;/code&gt; option for Rspec 3.0.0 or higher to run the after callback. See below for more information.&lt;/p&gt; 
&lt;h4&gt;Dry Run Option&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;--dry-run&lt;/code&gt; option is enabled by default for Rspec 3, but if you need to disable it you can use the environment variable &lt;code&gt;RSWAG_DRY_RUN=0&lt;/code&gt; during the generation command or add the following to your &lt;code&gt;config/environments/test.rb&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;RSpec.configure do |config|
  config.rswag_dry_run = false
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running tests without documenting&lt;/h4&gt; 
&lt;p&gt;If you want to use Rswag for testing without adding it to you OpenAPI specs, you can provide the document tag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;describe &#39;Blogs API&#39; do
  path &#39;/blogs/{blog_id}&#39; do
    get &#39;Retrieves a blog&#39; do
      # documentation is now disabled for this response only
      response 200, &#39;blog found&#39;, document: false do
        ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also reenable documentation for specific responses only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# documentation is now disabled
describe &#39;Blogs API&#39;, document: false do
  path &#39;/blogs/{blog_id}&#39; do
    get &#39;Retrieves a blog&#39; do
      # documentation is reenabled for this response only
      response 200, &#39;blog found&#39;, document: true do
        ...
      end

      response 401, &#39;special case&#39; do
        ...
      end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;rswag helper methods&lt;/h5&gt; 
&lt;!--
There are some helper methods to help with documenting request bodies.
```ruby
describe &#39;Blogs API&#39;, type: :request, openapi_spec: &#39;v1/openapi.json&#39; do
  let(:request_headers) { { &#39;api_key&#39; =&gt; &#39;fake_key&#39; } }

  path &#39;/blogs&#39; do
    post &#39;Creates a blog&#39; do
      tags &#39;Blogs&#39;
      description &#39;Creates a new blog from provided data&#39;
      operationId &#39;createBlog&#39;
      consumes &#39;application/json&#39;
      produces &#39;application/json&#39;

      request_body_json schema: { &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39; },
                        examples: :blog

      request_body_text_plain
      request_body_xml schema: { &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39; }

      let(:blog) { { blog: { title: &#39;foo&#39;, content: &#39;bar&#39; } } }

      response &#39;201&#39;, &#39;blog created&#39; do
        schema &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39;
        run_test!
      end

      response &#39;422&#39;, &#39;invalid request&#39; do
        schema &#39;$ref&#39; =&gt; &#39;#/components/schemas/errors_object&#39;
        let(:blog) { { blog: { title: &#39;foo&#39; } } }

        run_test! do |response|
          expect(response.body).to include(&quot;can&#39;t be blank&quot;)
        end
      end
    end
  end
end
```

In the above example, we see methods ```request_body_json``` ```request_body_plain``` ```request_body_xml```.
These methods can be used to describe json, plain text and xml body. They are just wrapper methods to setup posting JSON, plain text or xml into your endpoint.
The simplest most common usage is for json formatted body to use the schema: to specify the location of the schema for the request body
and the examples: :blog which will create a named example &quot;blog&quot; under the &quot;requestBody / content / application/json / examples&quot; section.
Again, documenting request response examples changed in OpenAPI 3.0. The example above would generate a openapi.json snippet that looks like this:

```json
        ...
        {&quot;requestBody&quot;: {
          &quot;required&quot;: true,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;examples&quot;: {
                &quot;blog&quot;: {  // takes the name from  examples: :blog above
                  &quot;value&quot;: {  // this is OpenAPI 3.0 structure -&gt; https://swagger.io/docs/specification/adding-examples/
                    &quot;blog&quot;: { // here is the actual JSON payload that is submitted to the service, and shows up in swagger UI as an example
                      &quot;title&quot;: &quot;foo&quot;,
                      &quot;content&quot;: &quot;bar&quot;
                    }
                  }
                }
              },
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/blog&quot;
              }
            },
            &quot;test/plain&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            },
            &quot;application/xml&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/blog&quot;
              }
            }
          }
        },
        }
```

*NOTE:* for this example request body to work in the tests properly, you need to ``let`` a variable named *blog*.
The variable with the matching name (blog in this case) is eval-ed and captured to be placed in the examples section.
This ```let``` value is used in the integration test to run the test AND captured and injected into the requestBody section.

##### rswag response examples #####

In the same way that requestBody examples can be captured and injected into the output, response examples can also be captured.
Using the above example, when the integration test is run - the OpenAPI spec would include the following snippet providing more useful real world examples
capturing the response from the execution of the integration test.

```json
       ...  &quot;responses&quot;: {
          &quot;201&quot;: {
            &quot;description&quot;: &quot;blog created&quot;,
            &quot;content&quot;: {
              &quot;application/json&quot;: {
                &quot;example&quot;: {
                  &quot;id&quot;: 1,
                  &quot;title&quot;: &quot;foo&quot;,
                  &quot;content&quot;: &quot;bar&quot;,
                  &quot;thumbnail&quot;: null
                },
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/blog&quot;
                }
              }
            }
          },
          &quot;422&quot;: {
            &quot;description&quot;: &quot;invalid request&quot;,
            &quot;content&quot;: {
              &quot;application/json&quot;: {
                &quot;example&quot;: {
                  &quot;errors&quot;: {
                    &quot;content&quot;: [
                      &quot;can&#39;t be blank&quot;
                    ]
                  }
                },
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/errors_object&quot;
                }
              }
            }
          }
        }
```
 --&gt; 
&lt;h3&gt;Route Prefix for OpenAPI JSON Endpoints&lt;/h3&gt; 
&lt;p&gt;The functionality to expose OpenAPI files, such as those generated by rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any Engine, you can change its mount prefix in &lt;em&gt;routes.rb&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;TestApp::Application.routes.draw do
  ...

  mount Rswag::Api::Engine =&amp;gt; &#39;your-custom-prefix&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Assuming a OpenAPI file exists at &amp;lt;openapi_root&amp;gt;/v1/openapi.json, this configuration would expose the file as the following JSON endpoint:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET http://&amp;lt;hostname&amp;gt;/your-custom-prefix/v1/openapi.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Root Location for OpenAPI Files&lt;/h3&gt; 
&lt;p&gt;You can adjust this in the &lt;em&gt;rswag_api.rb&lt;/em&gt; initializer that&#39;s installed with &lt;strong&gt;rspec-api&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Api.configure do |c|
  c.openapi_root = Rails.root.to_s + &#39;/your-custom-folder-name&#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re using rswag-specs to generate OpenAPI files, you&#39;ll want to ensure they both use the same &amp;lt;openapi_root&amp;gt;. The reason for separate settings is to maintain independence between the two gems. For example, you could install rswag-api independently and create your OpenAPI files manually.&lt;/p&gt; 
&lt;h3&gt;Dynamic Values for OpenAPI JSON&lt;/h3&gt; 
&lt;p&gt;There may be cases where you need to add dynamic values to the OpenAPI JSON that&#39;s returned by rswag-api. For example, you may want to provide an explicit host name. Rather than hardcoding it, you can configure a filter that&#39;s executed prior to serializing every OpenAPI document:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Api.configure do |c|
  ...

  c.openapi_filter = lambda { |openapi, env| openapi[&#39;host&#39;] = env[&#39;HTTP_HOST&#39;] }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how the filter is passed the rack env for the current request. This provides a lot of flexibility. For example, you can assign the &quot;host&quot; property (as shown) or you could inspect session information or an Authorization header and remove operations based on user permissions.&lt;/p&gt; 
&lt;h3&gt;Custom Headers for OpenAPI Files&lt;/h3&gt; 
&lt;p&gt;You can specify custom headers for serving your generated OpenAPI JSON. For example you may want to force a specific charset for the &#39;Content-Type&#39; header. You can configure a hash of headers to be sent with the request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Api.configure do |c|
  ...

  c.openapi_headers = { &#39;Content-Type&#39; =&amp;gt; &#39;application/json; charset=UTF-8&#39; }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Take care when overriding Content-Type if you serve both YAML and JSON files as it will no longer switch the Content-Type header correctly.&lt;/p&gt; 
&lt;h3&gt;Enable Swagger Endpoints for swagger-ui&lt;/h3&gt; 
&lt;p&gt;You can update the &lt;em&gt;rswag_ui.rb&lt;/em&gt; initializer, installed with rswag-ui, to specify which Swagger endpoints should be available to power the documentation UI. If you&#39;re using rswag-api, these should correspond to the Swagger endpoints it exposes. When the UI is rendered, you&#39;ll see these listed in a drop-down to the top right of the page:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Ui.configure do |c|
  c.openapi_endpoint &#39;/api-docs/v1/openapi.json&#39;, &#39;API V1 Docs&#39;
  c.openapi_endpoint &#39;/api-docs/v2/openapi.json&#39;, &#39;API V2 Docs&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enable Simple Basic Auth for swagger-ui&lt;/h3&gt; 
&lt;p&gt;You can also update the &lt;em&gt;rswag_ui.rb&lt;/em&gt; initializer, installed with rswag-ui to specify a username and password should you want to keep your documentation private.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Ui.configure do |c|
  c.basic_auth_enabled = true
  c.basic_auth_credentials &#39;username&#39;, &#39;password&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Route Prefix for the swagger-ui&lt;/h3&gt; 
&lt;p&gt;Similar to rswag-api, you can customize the swagger-ui path by changing its mount prefix in &lt;em&gt;routes.rb&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;TestApp::Application.routes.draw do
  ...

  mount Rswag::Api::Engine =&amp;gt; &#39;api-docs&#39;
  mount Rswag::Ui::Engine =&amp;gt; &#39;your-custom-prefix&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing the swagger-ui&lt;/h3&gt; 
&lt;p&gt;The swagger-ui provides several options for customizing its behavior, all of which are documented here &lt;a href=&quot;https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui&quot;&gt;https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui&lt;/a&gt;. If you need to tweak these or customize the overall look and feel of your swagger-ui, then you&#39;ll need to provide your own version of index.html. You can do this with the following generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;rails g rswag:ui:custom

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will add a local version that you can modify at &lt;em&gt;app/views/rswag/ui/home/index.html.erb&lt;/em&gt;. For example, it will let you to add your own &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and favicon.&lt;/p&gt; 
&lt;p&gt;To replace the &lt;em&gt;&quot;Swagger sponsored by&quot;&lt;/em&gt; brand image, you can add the following script to the generated file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
  (function () {
  window.addEventListener(&quot;load&quot;, function () {
      setTimeout(function () {

          var logo = document.getElementsByClassName(&#39;link&#39;);

          logo[0].children[0].alt = &quot;My API&quot;;
          logo[0].children[0].src = &quot;/favicon.png&quot;;
      });
  }); })();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above script would expect to find an image named &lt;code&gt;favicon.png&lt;/code&gt; in the public folder.&lt;/p&gt; 
&lt;p&gt;You can also customize the swagger ui with &lt;em&gt;configuration objects.&lt;/em&gt; Rswag&#39;s &lt;code&gt;config_object&lt;/code&gt; can be used with swagger&#39;s configuration parameters found here: &lt;a href=&quot;https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/&quot;&gt;https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/&lt;/a&gt; The ui can be configured in the &lt;em&gt;config/initializers/rswag-ui.rb&lt;/em&gt; file like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Rswag::Ui.configure do |c|
  c.config_object[&#39;defaultModelsExpandDepth&#39;] = 1
end

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Serve UI Assets Directly from your Web Server&lt;/h3&gt; 
&lt;p&gt;Rswag ships with an embedded version of the &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot;&gt;swagger-ui&lt;/a&gt;, which is a static collection of JavaScript and CSS files. These assets are served by the rswag-ui middleware. However, for optimal performance you may want to serve them directly from your web server (e.g. Apache or NGINX). To do this, you&#39;ll need to copy them to the web server root. This is the &quot;public&quot; folder in a typical Rails application.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bundle exec rake rswag:ui:copy_assets[public/api-docs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;: The provided subfolder MUST correspond to the UI mount prefix - &quot;api-docs&quot; by default.&lt;/p&gt; 
&lt;p&gt;Notes to test OpenAPI output locally with Swagger editor&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker pull swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;docker run -d -p 80:8080 swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will run the swagger editor in the docker daemon and can be accessed at &lt;code&gt;http://localhost&lt;/code&gt;. From here, you can use the UI to load the generated openapi.json to validate the output.&lt;/p&gt; 
&lt;h3&gt;Linting with RuboCop RSpec&lt;/h3&gt; 
&lt;p&gt;When you lint your RSpec spec files with &lt;code&gt;rubocop-rspec&lt;/code&gt;, it will fail to detect RSpec aliases that Rswag defines. Make sure to use &lt;code&gt;rubocop-rspec&lt;/code&gt; 2.0 or newer and add the following to your &lt;code&gt;.rubocop.yml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;inherit_gem:
  rswag-specs: .rubocop_rspec_alias_config.yml
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>fastlane/fastlane</title>
      <link>https://github.com/fastlane/fastlane</link>
      <description>&lt;p&gt;🚀 The easiest way to automate building and releasing your iOS and Android apps&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png&quot;&gt; &lt;img src=&quot;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png?raw=true&quot; alt=&quot;fastlane Logo&quot; width=&quot;500&quot; /&gt; &lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FastlaneTools&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat&quot; alt=&quot;Twitter: @FastlaneTools&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/fastlane.svg?style=flat&quot; alt=&quot;Gem&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/fastlane.json&amp;amp;query=$.versions.stable&amp;amp;label=homebrew&quot; alt=&quot;Homebrew&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/fastlane/fastlane&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/fastlane/fastlane/master.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome!&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2 align=&quot;center&quot;&gt; ✨ All fastlane docs were moved to &lt;a href=&quot;https://docs.fastlane.tools/&quot;&gt;docs.fastlane.tools&lt;/a&gt; ✨ &lt;/h2&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Need Help?&lt;/h2&gt; 
&lt;p&gt;Before submitting a new GitHub issue, please make sure to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out &lt;a href=&quot;https://docs.fastlane.tools&quot;&gt;docs.fastlane.tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Search for &lt;a href=&quot;https://github.com/fastlane/fastlane/issues&quot;&gt;existing GitHub issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the above doesn&#39;t help, please &lt;a href=&quot;https://github.com/fastlane/fastlane/issues&quot;&gt;submit an issue&lt;/a&gt; on GitHub and provide information about your setup, in particular the output of the &lt;code&gt;fastlane env&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to report a regression in &lt;em&gt;fastlane&lt;/em&gt; (something that has worked before, but broke with a new release), please mark your issue title as such using &lt;code&gt;[Regression] Your title here&lt;/code&gt;. This enables us to quickly detect and fix regressions.&lt;/p&gt; 
&lt;h2&gt;&lt;em&gt;fastlane&lt;/em&gt; team&lt;/h2&gt; 
&lt;!-- This table is regenerated and resorted on each release --&gt; 
&lt;table id=&quot;team&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td id=&quot;iulian-onofrei&quot;&gt; &lt;a href=&quot;https://github.com/revolter&quot;&gt; &lt;img src=&quot;https://github.com/revolter.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/Revolt666&quot;&gt;Iulian Onofrei&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;daniel-jankowski&quot;&gt; &lt;a href=&quot;https://github.com/mollyIV&quot;&gt; &lt;img src=&quot;https://github.com/mollyIV.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mollyIV&quot;&gt;Daniel Jankowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;danielle-tomlinson&quot;&gt; &lt;a href=&quot;https://github.com/endocrimes&quot;&gt; &lt;img src=&quot;https://github.com/endocrimes.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/endocrimes&quot;&gt;Danielle Tomlinson&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;jorge-revuelta-h&quot;&gt; &lt;a href=&quot;https://github.com/minuscorp&quot;&gt; &lt;img src=&quot;https://github.com/minuscorp.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/minuscorp&quot;&gt;Jorge Revuelta H&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;olivier-halligon&quot;&gt; &lt;a href=&quot;https://github.com/AliSoftware&quot;&gt; &lt;img src=&quot;https://github.com/AliSoftware.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/aligatr&quot;&gt;Olivier Halligon&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;satoshi-namai&quot;&gt; &lt;a href=&quot;https://github.com/ainame&quot;&gt; &lt;img src=&quot;https://github.com/ainame.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/ainame&quot;&gt;Satoshi Namai&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;luka-mirosevic&quot;&gt; &lt;a href=&quot;https://github.com/lmirosevic&quot;&gt; &lt;img src=&quot;https://github.com/lmirosevic.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/lmirosevic&quot;&gt;Luka Mirosevic&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;manu-wallner&quot;&gt; &lt;a href=&quot;https://github.com/milch&quot;&gt; &lt;img src=&quot;https://github.com/milch.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/acrooow&quot;&gt;Manu Wallner&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;kohki-miki&quot;&gt; &lt;a href=&quot;https://github.com/giginet&quot;&gt; &lt;img src=&quot;https://github.com/giginet.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/giginet&quot;&gt;Kohki Miki&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;fumiya-nakamura&quot;&gt; &lt;a href=&quot;https://github.com/nafu&quot;&gt; &lt;img src=&quot;https://github.com/nafu.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/nafu003&quot;&gt;Fumiya Nakamura&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;jérôme-lacoste&quot;&gt; &lt;a href=&quot;https://github.com/lacostej&quot;&gt; &lt;img src=&quot;https://github.com/lacostej.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/lacostej&quot;&gt;Jérôme Lacoste&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;max-ott&quot;&gt; &lt;a href=&quot;https://github.com/max-ott&quot;&gt; &lt;img src=&quot;https://github.com/max-ott.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/ott_max&quot;&gt;Max Ott&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;jimmy-dee&quot;&gt; &lt;a href=&quot;https://github.com/jdee&quot;&gt; &lt;img src=&quot;https://github.com/jdee.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;Jimmy Dee&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;matthew-ellis&quot;&gt; &lt;a href=&quot;https://github.com/matthewellis&quot;&gt; &lt;img src=&quot;https://github.com/matthewellis.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mellis1995&quot;&gt;Matthew Ellis&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;helmut-januschka&quot;&gt; &lt;a href=&quot;https://github.com/hjanuschka&quot;&gt; &lt;img src=&quot;https://github.com/hjanuschka.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/hjanuschka&quot;&gt;Helmut Januschka&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;stefan-natchev&quot;&gt; &lt;a href=&quot;https://github.com/snatchev&quot;&gt; &lt;img src=&quot;https://github.com/snatchev.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/snatchev&quot;&gt;Stefan Natchev&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;łukasz-grabowski&quot;&gt; &lt;a href=&quot;https://github.com/lucgrabowski&quot;&gt; &lt;img src=&quot;https://github.com/lucgrabowski.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;Łukasz Grabowski&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;joshua-liebowitz&quot;&gt; &lt;a href=&quot;https://github.com/taquitos&quot;&gt; &lt;img src=&quot;https://github.com/taquitos.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/taquitos&quot;&gt;Joshua Liebowitz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;manish-rathi&quot;&gt; &lt;a href=&quot;https://github.com/crazymanish&quot;&gt; &lt;img src=&quot;https://github.com/crazymanish.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/iammanishrathi&quot;&gt;Manish Rathi&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;aaron-brager&quot;&gt; &lt;a href=&quot;https://github.com/getaaron&quot;&gt; &lt;img src=&quot;https://github.com/getaaron.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/getaaron&quot;&gt;Aaron Brager&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;felix-krause&quot;&gt; &lt;a href=&quot;https://github.com/KrauseFx&quot;&gt; &lt;img src=&quot;https://github.com/KrauseFx.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/KrauseFx&quot;&gt;Felix Krause&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;maksym-grebenets&quot;&gt; &lt;a href=&quot;https://github.com/mgrebenets&quot;&gt; &lt;img src=&quot;https://github.com/mgrebenets.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mgrebenets&quot;&gt;Maksym Grebenets&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;jan-piotrowski&quot;&gt; &lt;a href=&quot;https://github.com/janpio&quot;&gt; &lt;img src=&quot;https://github.com/janpio.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/Sujan&quot;&gt;Jan Piotrowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;josh-holtz&quot;&gt; &lt;a href=&quot;https://github.com/joshdholtz&quot;&gt; &lt;img src=&quot;https://github.com/joshdholtz.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/joshdholtz&quot;&gt;Josh Holtz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
   &lt;td id=&quot;roger-oba&quot;&gt; &lt;a href=&quot;https://github.com/rogerluan&quot;&gt; &lt;img src=&quot;https://github.com/rogerluan.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/rogerluan_&quot;&gt;Roger Oba&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td id=&quot;andrew-mcburney&quot;&gt; &lt;a href=&quot;https://github.com/armcburney&quot;&gt; &lt;img src=&quot;https://github.com/armcburney.png&quot; width=&quot;140px;&quot; /&gt; &lt;/a&gt; &lt;h4 align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/armcburney&quot;&gt;Andrew McBurney&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; 
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Special thanks to all &lt;a href=&quot;https://github.com/fastlane/fastlane/graphs/contributors&quot;&gt;contributors&lt;/a&gt; for extending and improving &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribute to &lt;em&gt;fastlane&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://raw.githubusercontent.com/fastlane/fastlane/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to help with &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Help us keep &lt;em&gt;fastlane&lt;/em&gt; open and inclusive. Please read and follow our &lt;a href=&quot;https://github.com/fastlane/fastlane/raw/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Metrics&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The number of &lt;em&gt;fastlane&lt;/em&gt; runs&lt;/li&gt; 
 &lt;li&gt;A salted hash of the app identifier or package name, which helps us anonymously identify unique usage of &lt;em&gt;fastlane&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can easily opt-out of metrics collection by adding &lt;code&gt;opt_out_usage&lt;/code&gt; at the top of your &lt;code&gt;Fastfile&lt;/code&gt; or by setting the environment variable &lt;code&gt;FASTLANE_OPT_OUT_USAGE&lt;/code&gt;. &lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/fastlane_core/lib/fastlane_core/analytics&quot;&gt;Check out the metrics code on GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT license. See the &lt;a href=&quot;https://raw.githubusercontent.com/fastlane/fastlane/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2 align=&quot;center&quot;&gt; ✨ All fastlane docs were moved to &lt;a href=&quot;https://docs.fastlane.tools/&quot;&gt;docs.fastlane.tools&lt;/a&gt; ✨ &lt;/h2&gt; 
&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>chatwoot/chatwoot</title>
      <link>https://github.com/chatwoot/chatwoot</link>
      <description>&lt;p&gt;Open-source live-chat, email support, omni-channel desk. An alternative to Intercom, Zendesk, Salesforce Service Cloud etc. 🔥💬&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/.github/screenshots/header.png#gh-light-mode-only&quot; width=&quot;100%&quot; alt=&quot;Header light mode&quot; /&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/.github/screenshots/header-dark.png#gh-dark-mode-only&quot; width=&quot;100%&quot; alt=&quot;Header dark mode&quot; /&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Chatwoot&lt;/h1&gt; 
&lt;p&gt;The modern customer support platform, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/e6e3f66332c91e5a4c0c/maintainability&quot; alt=&quot;Maintainability&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&quot; alt=&quot;CircleCI Badge&quot; /&gt; &lt;a href=&quot;https://hub.docker.com/r/chatwoot/chatwoot/&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/chatwoot/chatwoot&quot; alt=&quot;Docker Pull Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/chatwoot/chatwoot/&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&quot; alt=&quot;Docker Build Badge&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&quot; alt=&quot;Commits-per-month&quot; /&gt; &lt;a title=&quot;Crowdin&quot; target=&quot;_self&quot; href=&quot;https://chatwoot.crowdin.com/chatwoot&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/cJXdrwS&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/647412545203994635&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://status.chatwoot.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&quot; alt=&quot;uptime&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://status.chatwoot.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&quot; alt=&quot;response time&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://artifacthub.io/packages/helm/chatwoot/chatwoot&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/artifact-hub&quot; alt=&quot;Artifact HUB&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&quot; alt=&quot;Deploy to Heroku&quot;&gt; &lt;img width=&quot;150&quot; alt=&quot;Deploy&quot; src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&quot; alt=&quot;Deploy to DigitalOcean&quot;&gt; &lt;img width=&quot;200&quot; alt=&quot;Deploy to DO&quot; src=&quot;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/.github/screenshots/dashboard.png#gh-light-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard dark mode&quot; /&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/.github/screenshots/dashboard-dark.png#gh-dark-mode-only&quot; width=&quot;100%&quot; alt=&quot;Chat dashboard&quot; /&gt; 
&lt;hr /&gt; 
&lt;p&gt;Chatwoot is the modern, open-source, and self-hosted customer support platform designed to help businesses deliver exceptional customer support experience. Built for scale and flexibility, Chatwoot gives you full control over your customer data while providing powerful tools to manage conversations across channels.&lt;/p&gt; 
&lt;h3&gt;✨ Captain – AI Agent for Support&lt;/h3&gt; 
&lt;p&gt;Supercharge your support with Captain, Chatwoot’s AI agent. Captain helps automate responses, handle common queries, and reduce agent workload—ensuring customers get instant, accurate answers. With Captain, your team can focus on complex conversations while routine questions are resolved automatically. Read more about Captain &lt;a href=&quot;https://chwt.app/captain-docs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;💬 Omnichannel Support Desk&lt;/h3&gt; 
&lt;p&gt;Chatwoot centralizes all customer conversations into one powerful inbox, no matter where your customers reach out from. It supports live chat on your website, email, Facebook, Instagram, Twitter, WhatsApp, Telegram, Line, SMS etc.&lt;/p&gt; 
&lt;h3&gt;📚 Help center portal&lt;/h3&gt; 
&lt;p&gt;Publish help articles, FAQs, and guides through the built-in Help Center Portal. Enable customers to find answers on their own, reduce repetitive queries, and keep your support team focused on more complex issues.&lt;/p&gt; 
&lt;h3&gt;🗂️ Other features&lt;/h3&gt; 
&lt;h4&gt;Collaboration &amp;amp; Productivity&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Private Notes and @mentions for internal team discussions.&lt;/li&gt; 
 &lt;li&gt;Labels to organize and categorize conversations.&lt;/li&gt; 
 &lt;li&gt;Keyboard Shortcuts and a Command Bar for quick navigation.&lt;/li&gt; 
 &lt;li&gt;Canned Responses to reply faster to frequently asked questions.&lt;/li&gt; 
 &lt;li&gt;Auto-Assignment to route conversations based on agent availability.&lt;/li&gt; 
 &lt;li&gt;Multi-lingual Support to serve customers in multiple languages.&lt;/li&gt; 
 &lt;li&gt;Custom Views and Filters for better inbox organization.&lt;/li&gt; 
 &lt;li&gt;Business Hours and Auto-Responders to manage response expectations.&lt;/li&gt; 
 &lt;li&gt;Teams and Automation tools for scaling support workflows.&lt;/li&gt; 
 &lt;li&gt;Agent Capacity Management to balance workload across the team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Customer Data &amp;amp; Segmentation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contact Management with profiles and interaction history.&lt;/li&gt; 
 &lt;li&gt;Contact Segments and Notes for targeted communication.&lt;/li&gt; 
 &lt;li&gt;Campaigns to proactively engage customers.&lt;/li&gt; 
 &lt;li&gt;Custom Attributes for storing additional customer data.&lt;/li&gt; 
 &lt;li&gt;Pre-Chat Forms to collect user information before starting conversations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Integrations&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Slack Integration to manage conversations directly from Slack.&lt;/li&gt; 
 &lt;li&gt;Dialogflow Integration for chatbot automation.&lt;/li&gt; 
 &lt;li&gt;Dashboard Apps to embed internal tools within Chatwoot.&lt;/li&gt; 
 &lt;li&gt;Shopify Integration to view and manage customer orders right within Chatwoot.&lt;/li&gt; 
 &lt;li&gt;Use Google Translate to translate messages from your customers in realtime.&lt;/li&gt; 
 &lt;li&gt;Create and manage Linear tickets within Chatwoot.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Reports &amp;amp; Insights&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Live View of ongoing conversations for real-time monitoring.&lt;/li&gt; 
 &lt;li&gt;Conversation, Agent, Inbox, Label, and Team Reports for operational visibility.&lt;/li&gt; 
 &lt;li&gt;CSAT Reports to measure customer satisfaction.&lt;/li&gt; 
 &lt;li&gt;Downloadable Reports for offline analysis and reporting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Detailed documentation is available at &lt;a href=&quot;https://www.chatwoot.com/help-center&quot;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Translation process&lt;/h2&gt; 
&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&quot;https://translate.chatwoot.com&quot;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&quot;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&quot;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; 
&lt;h2&gt;Branching model&lt;/h2&gt; 
&lt;p&gt;We use the &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; 
&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot; alt=&quot;Deploy&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Follow this &lt;a href=&quot;https://www.chatwoot.com/docs/environment-variables&quot;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; 
&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; 
&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; 
&lt;a href=&quot;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&quot; alt=&quot;Deploy to DigitalOcean&quot;&gt; &lt;img width=&quot;200&quot; alt=&quot;Deploy to DO&quot; src=&quot;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&quot; /&gt; &lt;/a&gt; 
&lt;h3&gt;Other deployment options&lt;/h3&gt; 
&lt;p&gt;For other supported options, checkout our &lt;a href=&quot;https://chatwoot.com/deploy&quot;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&quot;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&quot;https://discord.gg/cJXdrwS&quot;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks goes to all these &lt;a href=&quot;https://www.chatwoot.com/docs/contributors&quot;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/chatwoot/chatwoot/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; © 2017-2025, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kilimchoi/engineering-blogs</title>
      <link>https://github.com/kilimchoi/engineering-blogs</link>
      <description>&lt;p&gt;A curated list of engineering blogs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Software Engineering Blogs &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#companies-1&quot;&gt;Companies&lt;/a&gt;&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-companies&quot;&gt;#&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-companies&quot;&gt;A&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-companies&quot;&gt;B&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-companies&quot;&gt;C&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-companies&quot;&gt;D&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-companies&quot;&gt;E&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-companies&quot;&gt;F&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-companies&quot;&gt;G&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-companies&quot;&gt;H&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-companies&quot;&gt;I&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-companies&quot;&gt;J&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-companies&quot;&gt;K&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-companies&quot;&gt;L&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-companies&quot;&gt;M&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-companies&quot;&gt;N&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-companies&quot;&gt;O&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-companies&quot;&gt;P&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-companies&quot;&gt;Q&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-companies&quot;&gt;R&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-companies&quot;&gt;S&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-companies&quot;&gt;T&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-companies&quot;&gt;U&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-companies&quot;&gt;V&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-companies&quot;&gt;W&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-companies&quot;&gt;X&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-companies&quot;&gt;Y&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-companies&quot;&gt;Z&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#individualsgroup-contributors-1&quot;&gt;Individuals/Group Contributors&lt;/a&gt;&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-individuals&quot;&gt;#&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-individuals&quot;&gt;A&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-individuals&quot;&gt;B&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-individuals&quot;&gt;C&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-individuals&quot;&gt;D&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-individuals&quot;&gt;E&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-individuals&quot;&gt;F&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-individuals&quot;&gt;G&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-individuals&quot;&gt;H&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-individuals&quot;&gt;I&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-individuals&quot;&gt;J&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-individuals&quot;&gt;K&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-individuals&quot;&gt;L&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-individuals&quot;&gt;M&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-individuals&quot;&gt;N&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-individuals&quot;&gt;O&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-individuals&quot;&gt;P&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-individuals&quot;&gt;Q&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-individuals&quot;&gt;R&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-individuals&quot;&gt;S&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-individuals&quot;&gt;T&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-individuals&quot;&gt;U&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-individuals&quot;&gt;V&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-individuals&quot;&gt;W&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-individuals&quot;&gt;X&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-individuals&quot;&gt;Y&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-individuals&quot;&gt;Z&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#productstechnologies-1&quot;&gt;Products/Technologies&lt;/a&gt;&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-technologies&quot;&gt;#&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-technologies&quot;&gt;A&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-technologies&quot;&gt;B&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-technologies&quot;&gt;C&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-technologies&quot;&gt;D&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-technologies&quot;&gt;E&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-technologies&quot;&gt;F&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-technologies&quot;&gt;G&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-technologies&quot;&gt;H&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-technologies&quot;&gt;I&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-technologies&quot;&gt;J&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-technologies&quot;&gt;K&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-technologies&quot;&gt;L&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-technologies&quot;&gt;M&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-technologies&quot;&gt;N&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-technologies&quot;&gt;O&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-technologies&quot;&gt;P&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-technologies&quot;&gt;Q&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-technologies&quot;&gt;R&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-technologies&quot;&gt;S&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-technologies&quot;&gt;T&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-technologies&quot;&gt;U&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-technologies&quot;&gt;V&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-technologies&quot;&gt;W&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-technologies&quot;&gt;X&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-technologies&quot;&gt;Y&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-technologies&quot;&gt;Z&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Companies&lt;/h3&gt; 
&lt;h4&gt;# companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;8th Light &lt;a href=&quot;https://8thlight.com/blog/&quot;&gt;https://8thlight.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;A companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;AdRoll &lt;a href=&quot;http://tech.adroll.com/blog/&quot;&gt;http://tech.adroll.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Advanced Web Machinery &lt;a href=&quot;https://advancedweb.hu/&quot;&gt;https://advancedweb.hu/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Airbnb &lt;a href=&quot;https://medium.com/airbnb-engineering&quot;&gt;https://medium.com/airbnb-engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Algolia &lt;a href=&quot;https://blog.algolia.com/&quot;&gt;https://blog.algolia.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Appnexus &lt;a href=&quot;https://techblog.appnexus.com/&quot;&gt;https://techblog.appnexus.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Arkency &lt;a href=&quot;http://blog.arkency.com/&quot;&gt;http://blog.arkency.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Artsy &lt;a href=&quot;http://artsy.github.io/&quot;&gt;http://artsy.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Asana &lt;a href=&quot;https://blog.asana.com/category/eng/&quot;&gt;https://blog.asana.com/category/eng/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Atlassian &lt;a href=&quot;https://developer.atlassian.com/blog/&quot;&gt;https://developer.atlassian.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Atomic Object &lt;a href=&quot;https://spin.atomicobject.com/&quot;&gt;https://spin.atomicobject.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Auth0 &lt;a href=&quot;https://auth0.com/blog/&quot;&gt;https://auth0.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Avenue Code &lt;a href=&quot;http://blog.avenuecode.com/&quot;&gt;http://blog.avenuecode.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AWS &lt;a href=&quot;https://aws.amazon.com/blogs/aws/&quot;&gt;https://aws.amazon.com/blogs/aws/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;B companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Babbel &lt;a href=&quot;https://bytes.babbel.com/en/&quot;&gt;https://bytes.babbel.com/en/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Badoo &lt;a href=&quot;https://techblog.badoo.com/&quot;&gt;https://techblog.badoo.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bandcamp &lt;a href=&quot;https://bandcamptech.wordpress.com/&quot;&gt;https://bandcamptech.wordpress.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Base Lab &lt;a href=&quot;https://lab.getbase.com/category/engineering/&quot;&gt;https://lab.getbase.com/category/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bazaarvoice &lt;a href=&quot;https://blog.developer.bazaarvoice.com/&quot;&gt;https://blog.developer.bazaarvoice.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;BBC &lt;a href=&quot;https://medium.com/bbc-design-engineering/&quot;&gt;https://medium.com/bbc-design-engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Benchling &lt;a href=&quot;https://benchling.engineering/&quot;&gt;https://benchling.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bigcommerce &lt;a href=&quot;http://www.bigeng.io/&quot;&gt;http://www.bigeng.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blender &lt;a href=&quot;https://code.blender.org/&quot;&gt;https://code.blender.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Booking.com &lt;a href=&quot;https://blog.booking.com/&quot;&gt;https://blog.booking.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brandwatch &lt;a href=&quot;http://engineering.brandwatch.com/&quot;&gt;http://engineering.brandwatch.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Canva &lt;a href=&quot;https://engineering.canva.com&quot;&gt;https://engineering.canva.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Capgemini &lt;a href=&quot;https://capgemini.github.io/&quot;&gt;https://capgemini.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cerner &lt;a href=&quot;http://engineering.cerner.com/&quot;&gt;http://engineering.cerner.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clever &lt;a href=&quot;https://engineering.clever.com/&quot;&gt;https://engineering.clever.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cloudera &lt;a href=&quot;https://blog.cloudera.com/&quot;&gt;https://blog.cloudera.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cloudflare &lt;a href=&quot;https://blog.cloudflare.com/&quot;&gt;https://blog.cloudflare.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Codelitt &lt;a href=&quot;https://www.codelitt.com/blog/&quot;&gt;https://www.codelitt.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CodeName One &lt;a href=&quot;http://www.codenameone.com/blog.html&quot;&gt;http://www.codenameone.com/blog.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Codeship &lt;a href=&quot;https://blog.codeship.com/&quot;&gt;https://blog.codeship.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commercetools &lt;a href=&quot;https://techblog.commercetools.com/&quot;&gt;https://techblog.commercetools.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Confluent &lt;a href=&quot;https://www.confluent.io/blog&quot;&gt;https://www.confluent.io/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Credit Karma &lt;a href=&quot;https://engineering.creditkarma.com/&quot;&gt;https://engineering.creditkarma.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Criteo &lt;a href=&quot;https://medium.com/criteo-labs&quot;&gt;https://medium.com/criteo-labs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Crowdfire &lt;a href=&quot;https://crowdfire.engineering/&quot;&gt;https://crowdfire.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CSC - IT Center For Science - Cloud Team &lt;a href=&quot;https://cloud.blog.csc.fi/&quot;&gt;https://cloud.blog.csc.fi/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Curalate &lt;a href=&quot;http://engineering.curalate.com/&quot;&gt;http://engineering.curalate.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;D companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Databricks &lt;a href=&quot;https://databricks.com/blog&quot;&gt;https://databricks.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Deezer &lt;a href=&quot;https://deezer.io/&quot;&gt;https://deezer.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Deliveroo &lt;a href=&quot;https://deliveroo.engineering/&quot;&gt;https://deliveroo.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discord &lt;a href=&quot;https://blog.discordapp.com/&quot;&gt;https://blog.discordapp.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Docker &lt;a href=&quot;https://blog.docker.com/&quot;&gt;https://blog.docker.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;DoorDash &lt;a href=&quot;https://doordash.engineering/blog/&quot;&gt;https://doordash.engineering/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Drivy &lt;a href=&quot;https://drivy.engineering/&quot;&gt;https://drivy.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dropbox &lt;a href=&quot;https://blogs.dropbox.com/tech/&quot;&gt;https://blogs.dropbox.com/tech/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;E companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ebay &lt;a href=&quot;https://www.ebayinc.com/stories/blogs/tech/&quot;&gt;https://www.ebayinc.com/stories/blogs/tech/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;eFounders &lt;a href=&quot;https://medium.com/unexpected-token&quot;&gt;https://medium.com/unexpected-token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Engine Yard &lt;a href=&quot;https://blog.engineyard.com/&quot;&gt;https://blog.engineyard.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Entelo &lt;a href=&quot;https://sourcecode.entelo.com/&quot;&gt;https://sourcecode.entelo.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Envato &lt;a href=&quot;https://webuild.envato.com/&quot;&gt;https://webuild.envato.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Envoy &lt;a href=&quot;https://envoy.engineering/&quot;&gt;https://envoy.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Erlang Solutions &lt;a href=&quot;https://www.erlang-solutions.com/blog.html&quot;&gt;https://www.erlang-solutions.com/blog.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eventbrite &lt;a href=&quot;https://www.eventbrite.com/engineering/&quot;&gt;https://www.eventbrite.com/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Evil Martians &lt;a href=&quot;https://evilmartians.com/chronicles/&quot;&gt;https://evilmartians.com/chronicles/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Expedia &lt;a href=&quot;https://medium.com/expedia-group-tech&quot;&gt;https://medium.com/expedia-group-tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;F companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Facebook &lt;a href=&quot;https://code.facebook.com/posts/&quot;&gt;https://code.facebook.com/posts/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Facebook AI Research &lt;a href=&quot;https://engineering.fb.com/category/ai-research/&quot;&gt;https://engineering.fb.com/category/ai-research/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Feedzai &lt;a href=&quot;https://medium.com/feedzaitech&quot;&gt;https://medium.com/feedzaitech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Findmypast &lt;a href=&quot;http://tech.findmypast.com/&quot;&gt;http://tech.findmypast.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Finn.no &lt;a href=&quot;http://tech.finn.no/&quot;&gt;http://tech.finn.no/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Flickr &lt;a href=&quot;http://code.flickr.net/&quot;&gt;http://code.flickr.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Freeletics &lt;a href=&quot;https://freeletics.engineering/&quot;&gt;https://freeletics.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fynd &lt;a href=&quot;http://gofynd.io/blog&quot;&gt;http://gofynd.io/blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;G companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Galois &lt;a href=&quot;https://galois.com/blog/&quot;&gt;https://galois.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GameChanger &lt;a href=&quot;http://tech.gc.com/&quot;&gt;http://tech.gc.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GIPHY &lt;a href=&quot;https://engineering.giphy.com/&quot;&gt;https://engineering.giphy.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub &lt;a href=&quot;https://githubengineering.com/&quot;&gt;https://githubengineering.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub Old &lt;a href=&quot;https://github.com/blog/category/engineering&quot;&gt;https://github.com/blog/category/engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoCardless &lt;a href=&quot;https://gocardless.com/blog/tagged/engineering/&quot;&gt;https://gocardless.com/blog/tagged/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoDaddy &lt;a href=&quot;https://godaddy.github.io/engineering/&quot;&gt;https://godaddy.github.io/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoSquared &lt;a href=&quot;https://engineering.gosquared.com/&quot;&gt;https://engineering.gosquared.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Grab &lt;a href=&quot;http://engineering.grab.com/&quot;&gt;http://engineering.grab.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Graphcool &lt;a href=&quot;https://blog.graph.cool/&quot;&gt;https://blog.graph.cool/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Grofers &lt;a href=&quot;https://lambda.grofers.com/&quot;&gt;https://lambda.grofers.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Groupon &lt;a href=&quot;https://engineering.groupon.com/&quot;&gt;https://engineering.groupon.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guardian &lt;a href=&quot;https://www.theguardian.com/info/developer-blog&quot;&gt;https://www.theguardian.com/info/developer-blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Gusto &lt;a href=&quot;http://engineering.gusto.com/&quot;&gt;http://engineering.gusto.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;H companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;HackerEarth &lt;a href=&quot;http://engineering.hackerearth.com/&quot;&gt;http://engineering.hackerearth.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Haptik &lt;a href=&quot;https://haptik.ai/tech/&quot;&gt;https://haptik.ai/tech/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Harry&#39;s &lt;a href=&quot;http://engineering.harrys.com/&quot;&gt;http://engineering.harrys.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hashnode &lt;a href=&quot;https://engineering.hashnode.com/&quot;&gt;https://engineering.hashnode.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hashrocket &lt;a href=&quot;https://hashrocket.com/blog&quot;&gt;https://hashrocket.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Helpshift &lt;a href=&quot;https://medium.com/helpshift-engineering/&quot;&gt;https://medium.com/helpshift-engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Heroku &lt;a href=&quot;https://blog.heroku.com/engineering&quot;&gt;https://blog.heroku.com/engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HomeAway &lt;a href=&quot;https://tech.homeaway.com/&quot;&gt;https://tech.homeaway.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Honeybadger &lt;a href=&quot;http://blog.honeybadger.io/&quot;&gt;http://blog.honeybadger.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hootsuite &lt;a href=&quot;http://code.hootsuite.com/&quot;&gt;http://code.hootsuite.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hostinger &lt;a href=&quot;https://www.hostinger.com/blog/engineering/&quot;&gt;https://www.hostinger.com/blog/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Housing.com &lt;a href=&quot;https://medium.com/engineering-housing&quot;&gt;https://medium.com/engineering-housing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HubSpot &lt;a href=&quot;http://product.hubspot.com/blog/topic/engineering&quot;&gt;http://product.hubspot.com/blog/topic/engineering&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;I companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;IBM developerWorks &lt;a href=&quot;https://developer.ibm.com/dwblog/&quot;&gt;https://developer.ibm.com/dwblog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;IMVU &lt;a href=&quot;https://engineering.imvu.com/&quot;&gt;https://engineering.imvu.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Imgur &lt;a href=&quot;https://blog.imgur.com/category/eng/&quot;&gt;https://blog.imgur.com/category/eng/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Indeed &lt;a href=&quot;http://engineering.indeedblog.com/blog/&quot;&gt;http://engineering.indeedblog.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Instacart &lt;a href=&quot;https://tech.instacart.com/&quot;&gt;https://tech.instacart.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Instagram &lt;a href=&quot;https://engineering.instagram.com/&quot;&gt;https://engineering.instagram.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;J companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jane Street &lt;a href=&quot;https://blogs.janestreet.com/category/ocaml/&quot;&gt;https://blogs.janestreet.com/category/ocaml/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jobandtalent &lt;a href=&quot;https://jobandtalent.engineering/&quot;&gt;https://jobandtalent.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;JobTeaser &lt;a href=&quot;https://medium.com/jobteaser-dev-team/&quot;&gt;https://medium.com/jobteaser-dev-team/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Just Eat &lt;a href=&quot;https://tech.just-eat.com/&quot;&gt;https://tech.just-eat.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;K companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Khan Academy &lt;a href=&quot;http://engineering.khanacademy.org&quot;&gt;http://engineering.khanacademy.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kinvolk &lt;a href=&quot;https://kinvolk.io/blog/&quot;&gt;https://kinvolk.io/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kogan.com &lt;a href=&quot;https://devblog.kogan.com/&quot;&gt;https://devblog.kogan.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kolosek &lt;a href=&quot;https://kolosek.com/blog/&quot;&gt;https://kolosek.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;L companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;LINE &lt;a href=&quot;https://engineering.linecorp.com/en/blog&quot;&gt;https://engineering.linecorp.com/en/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LinkedIn &lt;a href=&quot;https://engineering.linkedin.com/blog&quot;&gt;https://engineering.linkedin.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LiveRamp &lt;a href=&quot;https://liveramp.com/engineering/&quot;&gt;https://liveramp.com/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Localytics &lt;a href=&quot;http://eng.localytics.com/&quot;&gt;http://eng.localytics.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lyft &lt;a href=&quot;https://eng.lyft.com/&quot;&gt;https://eng.lyft.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;M companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Made Tech &lt;a href=&quot;https://www.madetech.com/blog&quot;&gt;https://www.madetech.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MapTiler &lt;a href=&quot;https://www.maptiler.com/blog/&quot;&gt;https://www.maptiler.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Medallia &lt;a href=&quot;http://engineering.medallia.com/blog/&quot;&gt;http://engineering.medallia.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Medium &lt;a href=&quot;https://medium.com/medium-eng&quot;&gt;https://medium.com/medium-eng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mesosphere &lt;a href=&quot;https://mesosphere.com/blog/&quot;&gt;https://mesosphere.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Microsoft Python Engineering &lt;a href=&quot;https://blogs.msdn.microsoft.com/pythonengineering/&quot;&gt;https://blogs.msdn.microsoft.com/pythonengineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Moove-it &lt;a href=&quot;https://blog.moove-it.com/&quot;&gt;https://blog.moove-it.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mozilla Automation Team &lt;a href=&quot;https://planet.mozilla.org/ateam/&quot;&gt;https://planet.mozilla.org/ateam/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mozilla Hacks &lt;a href=&quot;https://hacks.mozilla.org/&quot;&gt;https://hacks.mozilla.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mozilla Release Engineering &lt;a href=&quot;https://planet.mozilla.org/releng/&quot;&gt;https://planet.mozilla.org/releng/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;N companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Netflix &lt;a href=&quot;https://medium.com/netflix-techblog&quot;&gt;https://medium.com/netflix-techblog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;New York Times &lt;a href=&quot;https://open.blogs.nytimes.com&quot;&gt;https://open.blogs.nytimes.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nextdoor &lt;a href=&quot;https://engblog.nextdoor.com/&quot;&gt;https://engblog.nextdoor.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nordic APIs &lt;a href=&quot;https://nordicapis.com/blog/&quot;&gt;https://nordicapis.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Novoda &lt;a href=&quot;https://www.novoda.com/blog/&quot;&gt;https://www.novoda.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;NPR Apps &lt;a href=&quot;http://blog.apps.npr.org/&quot;&gt;http://blog.apps.npr.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nvidia &lt;a href=&quot;https://blogs.nvidia.com/&quot;&gt;https://blogs.nvidia.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;O companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;OCTO Technology &lt;a href=&quot;https://blog.octo.com/en/&quot;&gt;https://blog.octo.com/en/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Okta &lt;a href=&quot;https://developer.okta.com/blog/&quot;&gt;https://developer.okta.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OLX &lt;a href=&quot;https://tech.olx.com/&quot;&gt;https://tech.olx.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OmniTI &lt;a href=&quot;https://omniti.com/seeds/stop-collaborate-and-listen-notify&quot;&gt;https://omniti.com/seeds/stop-collaborate-and-listen-notify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OpenDNS &lt;a href=&quot;https://engineering.opendns.com/&quot;&gt;https://engineering.opendns.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oursky &lt;a href=&quot;https://code.oursky.com/&quot;&gt;https://code.oursky.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;P companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Palantir &lt;a href=&quot;https://blog.palantir.com/&quot;&gt;https://blog.palantir.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Panorama Education &lt;a href=&quot;http://engineering.panoramaed.com/&quot;&gt;http://engineering.panoramaed.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paperless Post &lt;a href=&quot;https://www.paperlesspost.com/blog/teams/tech/&quot;&gt;https://www.paperlesspost.com/blog/teams/tech/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paypal &lt;a href=&quot;https://www.paypal-engineering.com/&quot;&gt;https://www.paypal-engineering.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PicCollage &lt;a href=&quot;https://tech.pic-collage.com/&quot;&gt;https://tech.pic-collage.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pinterest &lt;a href=&quot;https://medium.com/@Pinterest_Engineering&quot;&gt;https://medium.com/@Pinterest_Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pluralsight &lt;a href=&quot;https://www.pluralsight.com/guides&quot;&gt;https://www.pluralsight.com/guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Postman &lt;a href=&quot;https://medium.com/better-practices&quot;&gt;https://medium.com/better-practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Postmark &lt;a href=&quot;https://postmarkapp.com/blog&quot;&gt;https://postmarkapp.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Prezi &lt;a href=&quot;https://medium.com/prezi-engineering&quot;&gt;https://medium.com/prezi-engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Prolific Interactive &lt;a href=&quot;http://blog.prolificinteractive.com/category/development/&quot;&gt;http://blog.prolificinteractive.com/category/development/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PubNub: &lt;a href=&quot;https://www.pubnub.com/blog/&quot;&gt;https://www.pubnub.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PullReview &lt;a href=&quot;http://blog.8thcolor.com/&quot;&gt;http://blog.8thcolor.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Q companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quora &lt;a href=&quot;https://engineering.quora.com/&quot;&gt;https://engineering.quora.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;R companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;REA Group &lt;a href=&quot;https://www.rea-group.com/category/tech/&quot;&gt;https://www.rea-group.com/category/tech/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Remind &lt;a href=&quot;http://engineering.remind.com/&quot;&gt;http://engineering.remind.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RetailMeNot &lt;a href=&quot;https://medium.com/retailmenot-engineering/&quot;&gt;https://medium.com/retailmenot-engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Riot Games &lt;a href=&quot;https://engineering.riotgames.com/&quot;&gt;https://engineering.riotgames.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RisingStack &lt;a href=&quot;https://blog.risingstack.com/&quot;&gt;https://blog.risingstack.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Robert Elder Software &lt;a href=&quot;http://blog.robertelder.org/&quot;&gt;http://blog.robertelder.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RoseHosting &lt;a href=&quot;https://www.rosehosting.com/blog/&quot;&gt;https://www.rosehosting.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;S companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Schibsted Tech Polska &lt;a href=&quot;http://www.schibsted.pl/blog/&quot;&gt;http://www.schibsted.pl/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Segment &lt;a href=&quot;https://segment.com/blog/categories/engineering/&quot;&gt;https://segment.com/blog/categories/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sensible &lt;a href=&quot;http://blog.sensible.io/&quot;&gt;http://blog.sensible.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Serverless &lt;a href=&quot;https://serverless.com/blog/&quot;&gt;https://serverless.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sharethis &lt;a href=&quot;https://www.sharethis.com/category/engineering/&quot;&gt;https://www.sharethis.com/category/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Shopify &lt;a href=&quot;https://shopify.engineering/&quot;&gt;https://shopify.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Simple &lt;a href=&quot;https://www.simple.com/engineering&quot;&gt;https://www.simple.com/engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SitePoint &lt;a href=&quot;https://sitepoint.com&quot;&gt;https://sitepoint.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sky Betting &amp;amp; Gaming &lt;a href=&quot;http://engineering.skybettingandgaming.com/&quot;&gt;http://engineering.skybettingandgaming.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Skyscanner &lt;a href=&quot;http://codevoyagers.com/&quot;&gt;http://codevoyagers.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack &lt;a href=&quot;https://slack.engineering/&quot;&gt;https://slack.engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SlideShare &lt;a href=&quot;https://engineering.linkedin.com/blog/topic/slideshare&quot;&gt;https://engineering.linkedin.com/blog/topic/slideshare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Small Improvements &lt;a href=&quot;https://tech.small-improvements.com/&quot;&gt;https://tech.small-improvements.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Soshace &lt;a href=&quot;https://blog.soshace.com/en/&quot;&gt;https://blog.soshace.com/en/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Soundcloud &lt;a href=&quot;https://developers.soundcloud.com/blog/&quot;&gt;https://developers.soundcloud.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SourceClear &lt;a href=&quot;https://blog.sourceclear.com/&quot;&gt;https://blog.sourceclear.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Speedledger &lt;a href=&quot;http://engineering.speedledger.com/&quot;&gt;http://engineering.speedledger.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Spotify &lt;a href=&quot;https://labs.spotify.com/&quot;&gt;https://labs.spotify.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sqreen &lt;a href=&quot;https://blog.sqreen.io/&quot;&gt;https://blog.sqreen.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Square &lt;a href=&quot;https://corner.squareup.com/&quot;&gt;https://corner.squareup.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Squarespace &lt;a href=&quot;https://engineering.squarespace.com/&quot;&gt;https://engineering.squarespace.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stack Overflow &lt;a href=&quot;https://stackoverflow.blog/engineering/&quot;&gt;https://stackoverflow.blog/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stackshare &lt;a href=&quot;https://stackshare.io/feed&quot;&gt;https://stackshare.io/feed&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stitch Fix &lt;a href=&quot;http://multithreaded.stitchfix.com/blog/&quot;&gt;http://multithreaded.stitchfix.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Strava &lt;a href=&quot;https://medium.com/strava-engineering/&quot;&gt;https://medium.com/strava-engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stripe &lt;a href=&quot;https://stripe.com/blog&quot;&gt;https://stripe.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SurveyMonkey &lt;a href=&quot;https://engineering.surveymonkey.com/&quot;&gt;https://engineering.surveymonkey.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swiggy &lt;a href=&quot;https://bytes.swiggy.com/&quot;&gt;https://bytes.swiggy.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;T companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Takipi &lt;a href=&quot;http://blog.takipi.com/&quot;&gt;http://blog.takipi.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Target &lt;a href=&quot;https://target.github.io/&quot;&gt;https://target.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Teamwork &lt;a href=&quot;https://engineroom.teamwork.com/&quot;&gt;https://engineroom.teamwork.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;theScore &lt;a href=&quot;http://techblog.thescore.com/&quot;&gt;http://techblog.thescore.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Thoughtbot &lt;a href=&quot;https://robots.thoughtbot.com/&quot;&gt;https://robots.thoughtbot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Thumbtack &lt;a href=&quot;https://www.thumbtack.com/engineering/&quot;&gt;https://www.thumbtack.com/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Timescale &lt;a href=&quot;https://blog.timescale.com/&quot;&gt;https://blog.timescale.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tinder &lt;a href=&quot;https://tech.gotinder.com/&quot;&gt;https://tech.gotinder.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Toptal &lt;a href=&quot;https://www.toptal.com/blog/&quot;&gt;https://www.toptal.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Transferwise &lt;a href=&quot;http://tech.transferwise.com/&quot;&gt;http://tech.transferwise.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Trivago &lt;a href=&quot;http://tech.trivago.com/&quot;&gt;http://tech.trivago.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;TrueCar &lt;a href=&quot;https://www.drivenbycode.com/&quot;&gt;https://www.drivenbycode.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tumblr &lt;a href=&quot;https://engineering.tumblr.com/&quot;&gt;https://engineering.tumblr.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Twilio &lt;a href=&quot;https://www.twilio.com/blog/&quot;&gt;https://www.twilio.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;U companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Universe &lt;a href=&quot;https://engineering.universe.com&quot;&gt;https://engineering.universe.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;UpGrad &lt;a href=&quot;https://engineering.upgrad.com&quot;&gt;https://engineering.upgrad.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;V companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vena Solutions &lt;a href=&quot;https://engineering.vena.io/&quot;&gt;https://engineering.vena.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;VersionEye &lt;a href=&quot;https://blog.versioneye.com/&quot;&gt;https://blog.versioneye.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Viget &lt;a href=&quot;https://www.viget.com/articles/category/code#articles&quot;&gt;https://www.viget.com/articles/category/code#articles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Vinted &lt;a href=&quot;http://engineering.vinted.com/&quot;&gt;http://engineering.vinted.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;VNGRS &lt;a href=&quot;http://blog.vngrs.com/&quot;&gt;http://blog.vngrs.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;VTS &lt;a href=&quot;https://buildingvts.com/&quot;&gt;https://buildingvts.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;W companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Wayfair &lt;a href=&quot;http://engineering.wayfair.com/&quot;&gt;http://engineering.wayfair.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wealthfront &lt;a href=&quot;http://eng.wealthfront.com/&quot;&gt;http://eng.wealthfront.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wemake.services &lt;a href=&quot;https://medium.com/wemake-services&quot;&gt;https://medium.com/wemake-services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wingify &lt;a href=&quot;http://engineering.wingify.com/&quot;&gt;http://engineering.wingify.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WyeWorks &lt;a href=&quot;https://wyeworks.com/blog/&quot;&gt;https://wyeworks.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;X companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;XING &lt;a href=&quot;https://tech.xing.com/&quot;&gt;https://tech.xing.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Y companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Yahoo &lt;a href=&quot;https://yahooeng.tumblr.com/&quot;&gt;https://yahooeng.tumblr.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Yammer &lt;a href=&quot;https://medium.com/yammer-engineering&quot;&gt;https://medium.com/yammer-engineering&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Z companies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Zalando &lt;a href=&quot;https://tech.zalando.com/blog/&quot;&gt;https://tech.zalando.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zapier &lt;a href=&quot;https://zapier.com/engineering/&quot;&gt;https://zapier.com/engineering/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zendesk &lt;a href=&quot;https://medium.com/zendesk-engineering&quot;&gt;https://medium.com/zendesk-engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zendesk(old) &lt;a href=&quot;https://developer.zendesk.com/blog&quot;&gt;https://developer.zendesk.com/blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Individuals/Group Contributors&lt;/h3&gt; 
&lt;h4&gt;# individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;0xADADA &lt;a href=&quot;https://0xadada.pub/&quot;&gt;https://0xadada.pub/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;A individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Aaron Patterson &lt;a href=&quot;http://tenderlovemaking.com/&quot;&gt;http://tenderlovemaking.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Abu Ashraf Masnun &lt;a href=&quot;http://masnun.com/&quot;&gt;http://masnun.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Addy Osmani &lt;a href=&quot;https://addyosmani.com/blog/&quot;&gt;https://addyosmani.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Alan Storm &lt;a href=&quot;http://alanstorm.com/&quot;&gt;http://alanstorm.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Alex Russell &lt;a href=&quot;https://infrequently.org/&quot;&gt;https://infrequently.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amit Merchant &lt;a href=&quot;https://www.amitmerchant.com/&quot;&gt;https://www.amitmerchant.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Anders Aarvik &lt;a href=&quot;http://aarvik.dk/&quot;&gt;http://aarvik.dk/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Andrew Bancroft &lt;a href=&quot;http://www.andrewcbancroft.com/&quot;&gt;http://www.andrewcbancroft.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Antirez &lt;a href=&quot;http://antirez.com/latest/0&quot;&gt;http://antirez.com/latest/0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ariejan de Vroom &lt;a href=&quot;https://ariejan.net/&quot;&gt;https://ariejan.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ariya Hidayat &lt;a href=&quot;https://ariya.io/&quot;&gt;https://ariya.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Armin Ronacher &lt;a href=&quot;http://lucumr.pocoo.org/&quot;&gt;http://lucumr.pocoo.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Axel Rauschmayer &lt;a href=&quot;http://www.2ality.com/&quot;&gt;http://www.2ality.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;B individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bad Concurrency &lt;a href=&quot;http://bad-concurrency.blogspot.com/&quot;&gt;http://bad-concurrency.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bartlomiej Filipek &lt;a href=&quot;http://www.bfilipek.com/&quot;&gt;http://www.bfilipek.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bill the Lizard &lt;a href=&quot;http://www.billthelizard.com/&quot;&gt;http://www.billthelizard.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bjørn Johansen &lt;a href=&quot;https://bjornjohansen.no/&quot;&gt;https://bjornjohansen.no/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blake Erickson &lt;a href=&quot;https://blog.blakeerickson.com/&quot;&gt;https://blog.blakeerickson.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blundell&#39;s Android Tutorials &lt;a href=&quot;http://blog.blundellapps.co.uk&quot;&gt;http://blog.blundellapps.co.uk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bohops &lt;a href=&quot;https://bohops.com/&quot;&gt;https://bohops.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brendan Eich &lt;a href=&quot;https://brendaneich.com/&quot;&gt;https://brendaneich.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brendan Gregg &lt;a href=&quot;http://www.brendangregg.com/blog/&quot;&gt;http://www.brendangregg.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brujo Benavides &lt;a href=&quot;https://medium.com/@elbrujohalcon&quot;&gt;https://medium.com/@elbrujohalcon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Bryan Cantrill &lt;a href=&quot;http://dtrace.org/blogs/bmc/&quot;&gt;http://dtrace.org/blogs/bmc/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Carlos Becker &lt;a href=&quot;https://carlosbecker.com&quot;&gt;https://carlosbecker.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chen Hui Jing &lt;a href=&quot;https://www.chenhuijing.com/blog/&quot;&gt;https://www.chenhuijing.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chien Tran &lt;a href=&quot;http://thelazylog.com/&quot;&gt;http://thelazylog.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chris Wellons &lt;a href=&quot;http://nullprogram.com/&quot;&gt;http://nullprogram.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code with style! &lt;a href=&quot;https://codewithstyle.info/&quot;&gt;https://codewithstyle.info/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Codrops &lt;a href=&quot;https://tympanus.net/codrops/&quot;&gt;https://tympanus.net/codrops/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;D individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Daily JS &lt;a href=&quot;https://medium.com/dailyjs&quot;&gt;https://medium.com/dailyjs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Daily Tech Video &lt;a href=&quot;http://dailytechvideo.com/&quot;&gt;http://dailytechvideo.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dan Luu &lt;a href=&quot;https://danluu.com/&quot;&gt;https://danluu.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Daniel Doubrovkine (dB.) &lt;a href=&quot;http://code.dblock.org/&quot;&gt;http://code.dblock.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Daniel Schmidt &lt;a href=&quot;https://medium.com/@dschmidt1992&quot;&gt;https://medium.com/@dschmidt1992&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dave Beazley &lt;a href=&quot;http://www.dabeaz.com/blog.html&quot;&gt;http://www.dabeaz.com/blog.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dave Cheney &lt;a href=&quot;https://dave.cheney.net/&quot;&gt;https://dave.cheney.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;David Walsh &lt;a href=&quot;https://davidwalsh.name/&quot;&gt;https://davidwalsh.name/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dean Hume &lt;a href=&quot;http://deanhume.com/&quot;&gt;http://deanhume.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dennis Felsing &lt;a href=&quot;https://hookrace.net/&quot;&gt;https://hookrace.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dereuromark &lt;a href=&quot;http://www.dereuromark.de/&quot;&gt;http://www.dereuromark.de/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Domenico Luciani &lt;a href=&quot;https://domenicoluciani.com&quot;&gt;https://domenicoluciani.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dot Dev (.dev) &lt;a href=&quot;https://dotdev.co&quot;&gt;https://dotdev.co&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dragan Djuric &lt;a href=&quot;http://dragan.rocks&quot;&gt;http://dragan.rocks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dragan Gaic &lt;a href=&quot;http://www.gajotres.net/&quot;&gt;http://www.gajotres.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Drew DeVault &lt;a href=&quot;https://drewdevault.com/&quot;&gt;https://drewdevault.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;E individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Edan Kwan &lt;a href=&quot;http://blog.edankwan.com/&quot;&gt;http://blog.edankwan.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eddie Smith &lt;a href=&quot;http://www.practicallyefficient.com/&quot;&gt;http://www.practicallyefficient.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Edgar Aroutiounian &lt;a href=&quot;https://hyegar.com/&quot;&gt;https://hyegar.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Edward Faulkner &lt;a href=&quot;https://eaf4.com/&quot;&gt;https://eaf4.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Elegant Code &lt;a href=&quot;http://elegantcode.com/&quot;&gt;http://elegantcode.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eli Bendersky &lt;a href=&quot;http://eli.thegreenplace.net/&quot;&gt;http://eli.thegreenplace.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eric Elliot &lt;a href=&quot;https://medium.com/javascript-scene/&quot;&gt;https://medium.com/javascript-scene/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eric Lippert &lt;a href=&quot;https://ericlippert.com/&quot;&gt;https://ericlippert.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Erik Runyon &lt;a href=&quot;https://erikrunyon.com/&quot;&gt;https://erikrunyon.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Evan Hahn &lt;a href=&quot;http://evanhahn.com/&quot;&gt;http://evanhahn.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Evan Jones &lt;a href=&quot;http://www.evanjones.ca/chronological.html&quot;&gt;http://www.evanjones.ca/chronological.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Evan Miller &lt;a href=&quot;http://www.evanmiller.org/&quot;&gt;http://www.evanmiller.org/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;F individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Federico Cargnelutti &lt;a href=&quot;https://blog.fedecarg.com/&quot;&gt;https://blog.fedecarg.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Federico Tomassetti &lt;a href=&quot;https://tomassetti.me/&quot;&gt;https://tomassetti.me/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Filippo Valsorda &lt;a href=&quot;https://blog.filippo.io/&quot;&gt;https://blog.filippo.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Freek Van der Herten &lt;a href=&quot;https://murze.be/&quot;&gt;https://murze.be/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;G individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Gleb Bahmutov &lt;a href=&quot;https://glebbahmutov.com/blog/&quot;&gt;https://glebbahmutov.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Graham King &lt;a href=&quot;https://www.darkcoding.net/&quot;&gt;https://www.darkcoding.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Grzegorz Gajos &lt;a href=&quot;http://ggajos.com/&quot;&gt;http://ggajos.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guido van Rossum &lt;a href=&quot;http://neopythonic.blogspot.com/&quot;&gt;http://neopythonic.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guilherme Rodrigues &lt;a href=&quot;https://firstdoit.com/&quot;&gt;https://firstdoit.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;H individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hayden James &lt;a href=&quot;https://haydenjames.io/&quot;&gt;https://haydenjames.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Henrik Lau Eriksson &lt;a href=&quot;https://conductofcode.io/&quot;&gt;https://conductofcode.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Henrik Warne &lt;a href=&quot;https://henrikwarne.com/&quot;&gt;https://henrikwarne.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;High Scalability &lt;a href=&quot;http://highscalability.com/&quot;&gt;http://highscalability.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Huon Wilson &lt;a href=&quot;http://huonw.github.io/&quot;&gt;http://huonw.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hypriot &lt;a href=&quot;http://blog.hypriot.com/&quot;&gt;http://blog.hypriot.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;I individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ian Hummel &lt;a href=&quot;https://themodernlife.github.io/&quot;&gt;https://themodernlife.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Idontgetoutmuch&#39;s Weblog &lt;a href=&quot;https://idontgetoutmuch.wordpress.com/&quot;&gt;https://idontgetoutmuch.wordpress.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ievgen Kuzminov &lt;a href=&quot;http://stdout.in/&quot;&gt;http://stdout.in/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ilija Eftimov &lt;a href=&quot;http://ieftimov.com/&quot;&gt;http://ieftimov.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ilya Grigorik &lt;a href=&quot;https://www.igvita.com/&quot;&gt;https://www.igvita.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Itamar Turner-Trauring &lt;a href=&quot;https://codewithoutrules.com&quot;&gt;https://codewithoutrules.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;J individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jacopo Tarantino &lt;a href=&quot;https://jack.ofspades.com/&quot;&gt;https://jack.ofspades.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jake Trent &lt;a href=&quot;https://jaketrent.com&quot;&gt;https://jaketrent.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jake Wharton &lt;a href=&quot;http://jakewharton.com/blog&quot;&gt;http://jakewharton.com/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jake Yesbeck &lt;a href=&quot;http://jakeyesbeck.com/&quot;&gt;http://jakeyesbeck.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;James Hague &lt;a href=&quot;http://prog21.dadgum.com/&quot;&gt;http://prog21.dadgum.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;James Long &lt;a href=&quot;http://jlongster.com/archive&quot;&gt;http://jlongster.com/archive&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jamis Buck &lt;a href=&quot;http://weblog.jamisbuck.org/&quot;&gt;http://weblog.jamisbuck.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jan Lelis &lt;a href=&quot;https://idiosyncratic-ruby.com/&quot;&gt;https://idiosyncratic-ruby.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jay Fields &lt;a href=&quot;http://blog.jayfields.com&quot;&gt;http://blog.jayfields.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jeff Atwood &lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;https://blog.codinghorror.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jeff Preshing &lt;a href=&quot;http://preshing.com/&quot;&gt;http://preshing.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jeremy Kun &lt;a href=&quot;https://jeremykun.com/&quot;&gt;https://jeremykun.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jerry Gamblin &lt;a href=&quot;https://jerrygamblin.com/&quot;&gt;https://jerrygamblin.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jesal Gadhia &lt;a href=&quot;https://jes.al/&quot;&gt;https://jes.al/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jessie Frazelle &lt;a href=&quot;https://blog.jessfraz.com/&quot;&gt;https://blog.jessfraz.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Joe Armstrong &lt;a href=&quot;https://joearms.github.io/&quot;&gt;https://joearms.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Joe Nelson &lt;a href=&quot;https://begriffs.com/&quot;&gt;https://begriffs.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Joel Spolsky &lt;a href=&quot;https://www.joelonsoftware.com/&quot;&gt;https://www.joelonsoftware.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Johannes Brodwall &lt;a href=&quot;http://johannesbrodwall.com/&quot;&gt;http://johannesbrodwall.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;John Resig &lt;a href=&quot;https://johnresig.com/category/blog/&quot;&gt;https://johnresig.com/category/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;John Wittenauer &lt;a href=&quot;http://www.johnwittenauer.net/&quot;&gt;http://www.johnwittenauer.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jon Skeet &lt;a href=&quot;https://codeblog.jonskeet.uk/&quot;&gt;https://codeblog.jonskeet.uk/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jonathan Dekhtiar &lt;a href=&quot;http://www.born2data.com/&quot;&gt;http://www.born2data.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Jonathan Snook &lt;a href=&quot;https://snook.ca/&quot;&gt;https://snook.ca/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Josh Haberman &lt;a href=&quot;http://blog.reverberate.org/&quot;&gt;http://blog.reverberate.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Josh Sherman &lt;a href=&quot;https://joshtronic.com/&quot;&gt;https://joshtronic.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Juan Treminio &lt;a href=&quot;https://jtreminio.com&quot;&gt;https://jtreminio.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Julia Evans &lt;a href=&quot;https://jvns.ca/&quot;&gt;https://jvns.ca/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Junior Grossi &lt;a href=&quot;https://blog.jgrossi.com/&quot;&gt;https://blog.jgrossi.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Justin Weiss &lt;a href=&quot;https://www.justinweiss.com/articles/archives/&quot;&gt;https://www.justinweiss.com/articles/archives/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;K individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;K. Harrison &lt;a href=&quot;https://useyourloaf.com/&quot;&gt;https://useyourloaf.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kai Hendry &lt;a href=&quot;https://hendry.iki.fi/&quot;&gt;https://hendry.iki.fi/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kevin Burke &lt;a href=&quot;https://kev.inburke.com/&quot;&gt;https://kev.inburke.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kirill Shevchenko &lt;a href=&quot;https://medium.com/@kirill_shevch&quot;&gt;https://medium.com/@kirill_shevch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kyle Kingsbury &lt;a href=&quot;https://aphyr.com/&quot;&gt;https://aphyr.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;L individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lambda the Ultimate &lt;a href=&quot;http://lambda-the-ultimate.org/&quot;&gt;http://lambda-the-ultimate.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Larry Land &lt;a href=&quot;https://lg.io/&quot;&gt;https://lg.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lazarus Lazaridis &lt;a href=&quot;https://iridakos.com&quot;&gt;https://iridakos.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lea Verou &lt;a href=&quot;http://lea.verou.me/&quot;&gt;http://lea.verou.me/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lerner Consulting Blog &lt;a href=&quot;http://blog.lerner.co.il/&quot;&gt;http://blog.lerner.co.il/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Life Plus Linux &lt;a href=&quot;http://lifepluslinux.blogspot.in/&quot;&gt;http://lifepluslinux.blogspot.in/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LiveOverflow &lt;a href=&quot;https://liveoverflow.com/blog/index.html&quot;&gt;https://liveoverflow.com/blog/index.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Luciano Mammino &lt;a href=&quot;https://loige.co/&quot;&gt;https://loige.co/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;M individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Marc Plano-Lesay &lt;a href=&quot;https://enoent.fr&quot;&gt;https://enoent.fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Marcelo Rinesi &lt;a href=&quot;https://blog.rinesi.com/&quot;&gt;https://blog.rinesi.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Marco Pivetta &lt;a href=&quot;http://ocramius.github.io/&quot;&gt;http://ocramius.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Marek Majkowski &lt;a href=&quot;https://idea.popcount.org/&quot;&gt;https://idea.popcount.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mark Seaborn &lt;a href=&quot;http://lackingrhoticity.blogspot.de/&quot;&gt;http://lackingrhoticity.blogspot.de/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Martin Fowler &lt;a href=&quot;https://martinfowler.com/&quot;&gt;https://martinfowler.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mary Rose Cook &lt;a href=&quot;https://maryrosecook.com/blog/&quot;&gt;https://maryrosecook.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matt Aimonetti &lt;a href=&quot;https://matt.aimonetti.net/&quot;&gt;https://matt.aimonetti.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matt Cutts &lt;a href=&quot;https://www.mattcutts.com/blog/&quot;&gt;https://www.mattcutts.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matt Might &lt;a href=&quot;http://matt.might.net/articles/&quot;&gt;http://matt.might.net/articles/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matt Warren &lt;a href=&quot;http://mattwarren.org/&quot;&gt;http://mattwarren.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Matthew Green &lt;a href=&quot;https://blog.cryptographyengineering.com/&quot;&gt;https://blog.cryptographyengineering.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Michael Crump &lt;a href=&quot;https://michaelcrump.net/&quot;&gt;https://michaelcrump.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Michael Herman &lt;a href=&quot;http://mherman.org/&quot;&gt;http://mherman.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Miguel Quinones &lt;a href=&quot;https://www.miqu.me/&quot;&gt;https://www.miqu.me/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mike Ash &lt;a href=&quot;https://www.mikeash.com/pyblog/&quot;&gt;https://www.mikeash.com/pyblog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mike Fogus &lt;a href=&quot;http://blog.fogus.me/&quot;&gt;http://blog.fogus.me/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Miro Cupak &lt;a href=&quot;https://mirocupak.com/&quot;&gt;https://mirocupak.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Monica Dinculescu &lt;a href=&quot;https://meowni.ca/&quot;&gt;https://meowni.ca/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Monstermuffin &lt;a href=&quot;https://blog.monstermuffin.org/&quot;&gt;https://blog.monstermuffin.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mykhailo Kozik &lt;a href=&quot;http://mishadoff.com/&quot;&gt;http://mishadoff.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;N individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nelson Elhage &lt;a href=&quot;https://blog.nelhage.com/&quot;&gt;https://blog.nelhage.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nic Raboy &lt;a href=&quot;https://www.thepolyglotdeveloper.com/blog/&quot;&gt;https://www.thepolyglotdeveloper.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nick Craver &lt;a href=&quot;https://nickcraver.com/blog/&quot;&gt;https://nickcraver.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nick Desaulniers &lt;a href=&quot;https://nickdesaulniers.github.io/&quot;&gt;https://nickdesaulniers.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nicolas Liochon &lt;a href=&quot;http://blog.thislongrun.com/&quot;&gt;http://blog.thislongrun.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nicolai Parlog (CodeFX) &lt;a href=&quot;http://codefx.org&quot;&gt;http://codefx.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nikola Brežnjak &lt;a href=&quot;http://www.nikola-breznjak.com/blog/&quot;&gt;http://www.nikola-breznjak.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;NSHipster &lt;a href=&quot;http://nshipster.com/&quot;&gt;http://nshipster.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Nate Berkopec &lt;a href=&quot;http://www.nateberkopec.com/&quot;&gt;http://www.nateberkopec.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;O individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ofer Zelig &lt;a href=&quot;https://fullstack.info&quot;&gt;https://fullstack.info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ole Begemann &lt;a href=&quot;https://oleb.net/blog/&quot;&gt;https://oleb.net/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oona Räisänen &lt;a href=&quot;http://www.windytan.com/&quot;&gt;http://www.windytan.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;P individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pamela Fox &lt;a href=&quot;http://blog.pamelafox.org/&quot;&gt;http://blog.pamelafox.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pat Shaughnessy &lt;a href=&quot;http://patshaughnessy.net/&quot;&gt;http://patshaughnessy.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paul Irish &lt;a href=&quot;https://www.paulirish.com/&quot;&gt;https://www.paulirish.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paul Lewis &lt;a href=&quot;https://aerotwist.com/blog/&quot;&gt;https://aerotwist.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Paweł Chudzik &lt;a href=&quot;https://blog.pchudzik.com/&quot;&gt;https://blog.pchudzik.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Peter Norvig &lt;a href=&quot;http://norvig.com/&quot;&gt;http://norvig.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Peter Steinberger &lt;a href=&quot;http://petersteinberger.com/&quot;&gt;http://petersteinberger.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Peteris Krumins &lt;a href=&quot;http://www.catonmat.net/blog/&quot;&gt;http://www.catonmat.net/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Petr Mitrichev &lt;a href=&quot;http://petr-mitrichev.blogspot.com/&quot;&gt;http://petr-mitrichev.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Philip Walton &lt;a href=&quot;https://philipwalton.com/&quot;&gt;https://philipwalton.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Philipp Oppermann &lt;a href=&quot;https://os.phil-opp.com/&quot;&gt;https://os.phil-opp.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pony Foo &lt;a href=&quot;https://ponyfoo.com/&quot;&gt;https://ponyfoo.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Piotr Pasich &lt;a href=&quot;http://piotrpasich.com/&quot;&gt;http://piotrpasich.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;R individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rachel Kroll &lt;a href=&quot;https://rachelbythebay.com/w/&quot;&gt;https://rachelbythebay.com/w/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Radek Pazdera &lt;a href=&quot;http://radek.io&quot;&gt;http://radek.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Radim Řehůřek &lt;a href=&quot;https://radimrehurek.com/blog/&quot;&gt;https://radimrehurek.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ramon Fried &lt;a href=&quot;https://nativeguru.wordpress.com/&quot;&gt;https://nativeguru.wordpress.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ray Wenderlich &lt;a href=&quot;https://www.raywenderlich.com/&quot;&gt;https://www.raywenderlich.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Raymond Chen &lt;a href=&quot;https://blogs.msdn.microsoft.com/oldnewthing/&quot;&gt;https://blogs.msdn.microsoft.com/oldnewthing/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Raymond Hettinger &lt;a href=&quot;https://rhettinger.wordpress.com/&quot;&gt;https://rhettinger.wordpress.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ReactJS News &lt;a href=&quot;https://reactjsnews.com&quot;&gt;https://reactjsnews.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Real Python &lt;a href=&quot;https://realpython.com/blog/&quot;&gt;https://realpython.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Reginald Braithwaite &lt;a href=&quot;http://raganwald.com/#essays&quot;&gt;http://raganwald.com/#essays&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Regular Geek &lt;a href=&quot;http://regulargeek.com/&quot;&gt;http://regulargeek.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rob Allen &lt;a href=&quot;https://akrabat.com/&quot;&gt;https://akrabat.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Robert C. Martin &lt;a href=&quot;http://blog.cleancoder.com/&quot;&gt;http://blog.cleancoder.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Robin Ward &lt;a href=&quot;https://eviltrout.com/&quot;&gt;https://eviltrout.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Robin Wilson &lt;a href=&quot;http://blog.rtwilson.com/&quot;&gt;http://blog.rtwilson.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ruslan Spivak &lt;a href=&quot;https://ruslanspivak.com/&quot;&gt;https://ruslanspivak.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;S individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sam Saffron &lt;a href=&quot;https://samsaffron.com/&quot;&gt;https://samsaffron.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Schakko &lt;a href=&quot;https://schakko.de&quot;&gt;https://schakko.de&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scott Hanselman &lt;a href=&quot;http://www.hanselman.com/blog/&quot;&gt;http://www.hanselman.com/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scott Johnson &lt;a href=&quot;http://www.fuzzyblog.io/blog/&quot;&gt;http://www.fuzzyblog.io/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Srinivas Tamada &lt;a href=&quot;https://www.9lessons.info/&quot;&gt;https://www.9lessons.info/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stack Abuse &lt;a href=&quot;http://www.stackabuse.com/&quot;&gt;http://www.stackabuse.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stanko Tadić &lt;a href=&quot;https://muffinman.io&quot;&gt;https://muffinman.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stefan Parker &lt;a href=&quot;http://codebeforethehorse.tumblr.com/&quot;&gt;http://codebeforethehorse.tumblr.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Stephen Colebourne &lt;a href=&quot;http://blog.joda.org/&quot;&gt;http://blog.joda.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Steve Bellovin &lt;a href=&quot;https://www.cs.columbia.edu/~smb/blog/control/&quot;&gt;https://www.cs.columbia.edu/~smb/blog/control/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Steve Yegge &lt;a href=&quot;https://steve-yegge.blogspot.com/&quot;&gt;https://steve-yegge.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swizec Teller &lt;a href=&quot;https://swizec.com/blog/&quot;&gt;https://swizec.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;T individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tania Rascia &lt;a href=&quot;https://tania.dev/&quot;&gt;https://tania.dev/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The Coded Self &lt;a href=&quot;http://www.thecodedself.com&quot;&gt;http://www.thecodedself.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The Daily WTF &lt;a href=&quot;http://thedailywtf.com/&quot;&gt;http://thedailywtf.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Thomas Young &lt;a href=&quot;http://upcoder.com&quot;&gt;http://upcoder.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tikhon Jelvis &lt;a href=&quot;http://jelv.is/blog/&quot;&gt;http://jelv.is/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;T.J. Maher &lt;a href=&quot;http://adventuresinautomation.blogspot.com/&quot;&gt;http://adventuresinautomation.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;U individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Una Kravets &lt;a href=&quot;https://una.im/&quot;&gt;https://una.im/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Undocumented Matlab &lt;a href=&quot;http://undocumentedmatlab.com/&quot;&gt;http://undocumentedmatlab.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;V individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vanilla Java &lt;a href=&quot;http://vanillajava.blogspot.com/&quot;&gt;http://vanillajava.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Vlad Mihalcea &lt;a href=&quot;https://vladmihalcea.com/&quot;&gt;https://vladmihalcea.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;W individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Wilfred Hughes &lt;a href=&quot;http://www.wilfred.me.uk/&quot;&gt;http://www.wilfred.me.uk/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;William Kennedy &lt;a href=&quot;https://www.goinggo.net/&quot;&gt;https://www.goinggo.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wojtek Gawroński &lt;a href=&quot;http://www.afronski.pl/&quot;&gt;http://www.afronski.pl/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Y individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Yegor Bugayenko &lt;a href=&quot;http://www.yegor256.com/&quot;&gt;http://www.yegor256.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Yifan Lu &lt;a href=&quot;http://yifan.lu/&quot;&gt;http://yifan.lu/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Z individuals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Zach Holman &lt;a href=&quot;https://zachholman.com/&quot;&gt;https://zachholman.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Zolmeister &lt;a href=&quot;https://zolmeister.com/&quot;&gt;https://zolmeister.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Products/Technologies&lt;/h3&gt; 
&lt;h4&gt;A technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Android &lt;a href=&quot;https://android-developers.blogspot.com/&quot;&gt;https://android-developers.blogspot.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;B technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bootstrap.com &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;https://blog.getbootstrap.com/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Crystal &lt;a href=&quot;https://crystal-lang.org/&quot;&gt;https://crystal-lang.org/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;G technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go &lt;a href=&quot;https://blog.golang.org/&quot;&gt;https://blog.golang.org/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;I technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;IPFS &lt;a href=&quot;https://ipfs.io/blog/&quot;&gt;https://ipfs.io/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;J technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;jOOQ &lt;a href=&quot;https://blog.jooq.org/&quot;&gt;https://blog.jooq.org/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;K technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kotlin &lt;a href=&quot;https://blog.jetbrains.com/kotlin/&quot;&gt;https://blog.jetbrains.com/kotlin/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;L technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Laravel &lt;a href=&quot;https://laravel-news.com/blog/&quot;&gt;https://laravel-news.com/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;M technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Microsoft Edge &lt;a href=&quot;https://blogs.windows.com/msedgedev/&quot;&gt;https://blogs.windows.com/msedgedev/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;N technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;.NET &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/&quot;&gt;https://blogs.msdn.microsoft.com/dotnet/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;R technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;React Native &lt;a href=&quot;http://facebook.github.io/react-native/blog/&quot;&gt;http://facebook.github.io/react-native/blog/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Red &lt;a href=&quot;http://www.red-lang.org&quot;&gt;http://www.red-lang.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RocksDB &lt;a href=&quot;http://rocksdb.org/blog&quot;&gt;http://rocksdb.org/blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust &lt;a href=&quot;https://blog.rust-lang.org/&quot;&gt;https://blog.rust-lang.org/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;S technologies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sketch &lt;a href=&quot;https://blog.sketchapp.com/&quot;&gt;https://blog.sketchapp.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swift &lt;a href=&quot;https://developer.apple.com/swift/blog/&quot;&gt;https://developer.apple.com/swift/blog/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h1&gt;RSS feeds&lt;/h1&gt; 
&lt;p&gt;You can find an opml file to import rss feeds here: &lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/engineering_blogs.opml&quot;&gt;engineering_blogs.opml&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Contributions welcome! Read the &lt;a href=&quot;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/contributing.md&quot;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Licensed under a &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>antiwork/flexile</title>
      <link>https://github.com/antiwork/flexile</link>
      <description>&lt;p&gt;Contractor payments as easy as 1-2-3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flexile&lt;/h1&gt; 
&lt;p&gt;Contractor payments as easy as 1-2-3.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;You&#39;ll need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download&quot;&gt;Node.js&lt;/a&gt; (see &lt;a href=&quot;https://raw.githubusercontent.com/antiwork/flexile/main/.node-version&quot;&gt;&lt;code&gt;.node-version&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The easiest way to set up the development environment is to use the &lt;a href=&quot;https://raw.githubusercontent.com/antiwork/flexile/main/bin/setup&quot;&gt;&lt;code&gt;bin/setup&lt;/code&gt; script&lt;/a&gt;, but feel free to run the commands in it yourself:&lt;/p&gt; 
&lt;h3&gt;Backend&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set up Ruby (ideally using &lt;code&gt;rbenv&lt;/code&gt;/&lt;code&gt;rvm&lt;/code&gt;) and PostgreSQL&lt;/li&gt; 
 &lt;li&gt;Navigate to backend code and install dependencies: &lt;code&gt;cd backend &amp;amp;&amp;amp; bundle i &amp;amp;&amp;amp; gem install foreman&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Frontend&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to frontend app and install dependencies &lt;code&gt;cd frontend &amp;amp;&amp;amp; pnpm i&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Finally, set up your environment: &lt;code&gt;cp .env.example .env&lt;/code&gt;. If you&#39;re an Antiwork team member, you can use &lt;code&gt;vercel env pull .env&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Running the App&lt;/h2&gt; 
&lt;p&gt;You can start the local app using the &lt;a href=&quot;https://raw.githubusercontent.com/antiwork/flexile/main/bin/dev&quot;&gt;&lt;code&gt;bin/dev&lt;/code&gt; script&lt;/a&gt; - or feel free to run the commands contained in it yourself.&lt;/p&gt; 
&lt;p&gt;Once the local services are up and running, the application will be available at &lt;code&gt;https://flexile.dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://raw.githubusercontent.com/antiwork/flexile/main/backend/config/data/seed_templates/gumroad.json&quot;&gt;the seeds&lt;/a&gt; for default data created during setup.&lt;/p&gt; 
&lt;h2&gt;Common Issues / Debugging&lt;/h2&gt; 
&lt;h3&gt;1. Postgres User Creation&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Issue:&lt;/strong&gt; When running &lt;code&gt;bin/dev&lt;/code&gt; (after &lt;code&gt;bin/setup&lt;/code&gt;) encountered &lt;code&gt;FATAL: role &quot;username&quot; does not exist&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt; Manually create the Postgres user with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;psql postgres -c &quot;CREATE USER username WITH LOGIN CREATEDB SUPERUSER PASSWORD &#39;password&#39;;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Likely caused by the &lt;code&gt;bin/setup&lt;/code&gt; script failing silently due to lack of Postgres superuser permissions (common with Homebrew installations).&lt;/p&gt; 
&lt;h3&gt;2. Redis Connection &amp;amp; database seeding&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Issue:&lt;/strong&gt; First attempt to run &lt;code&gt;bin/dev&lt;/code&gt; failed with &lt;code&gt;Redis::CannotConnectError&lt;/code&gt; on port 6389.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt; Re-running &lt;code&gt;bin/dev&lt;/code&gt; resolved it but data wasn&#39;t seeded properly, so had to run &lt;code&gt;db:reset&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Likely caused by rails attempting to connect before Redis had fully started.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Run Rails specs
bundle exec rspec # Run all specs
bundle exec rspec spec/system/roles/show_spec.rb:7 # Run a single spec

# Run Playwright end-to-end tests
pnpm playwright test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Services configuration&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Stripe&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create account at &lt;a href=&quot;https://stripe.com&quot;&gt;stripe.com&lt;/a&gt; and complete verification&lt;/li&gt; 
  &lt;li&gt;Enable &lt;strong&gt;Test mode&lt;/strong&gt; (toggle in top right of dashboard)&lt;/li&gt; 
  &lt;li&gt;Navigate to &lt;strong&gt;Developers&lt;/strong&gt; → &lt;strong&gt;API keys&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Copy &lt;strong&gt;Publishable key&lt;/strong&gt; (&lt;code&gt;pk_test_...&lt;/code&gt;) and &lt;strong&gt;Secret key&lt;/strong&gt; (&lt;code&gt;sk_test_...&lt;/code&gt; - click &quot;Reveal&quot; first)&lt;/li&gt; 
  &lt;li&gt;Add to &lt;code&gt;.env&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key_here
STRIPE_SECRET_KEY=sk_test_your_secret_key_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Wise&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Register at &lt;a href=&quot;https://sandbox.transferwise.tech/&quot;&gt;sandbox.transferwise.tech&lt;/a&gt; and complete email verification&lt;/li&gt; 
  &lt;li&gt;Click profile/avatar → &lt;strong&gt;Settings&lt;/strong&gt; → copy your &lt;strong&gt;Membership number&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Go to &lt;strong&gt;Integrations and Tools&lt;/strong&gt; → &lt;strong&gt;API tokens&lt;/strong&gt; → &lt;strong&gt;Create API token&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;Set permissions to &lt;strong&gt;Full Access&lt;/strong&gt;, name it (e.g., &quot;Flexile Development&quot;), and copy the token immediately&lt;/li&gt; 
  &lt;li&gt;Add to &lt;code&gt;.env&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;WISE_PROFILE_ID=your_membership_number_here
WISE_API_KEY=your_full_api_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;
 &lt;/ol&gt;
&lt;/details&gt;   
&lt;details&gt; 
 &lt;summary&gt;Resend&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create account at &lt;a href=&quot;https://resend.com&quot;&gt;resend.com&lt;/a&gt; and complete email verification&lt;/li&gt; 
  &lt;li&gt;Navigate to &lt;strong&gt;API Keys&lt;/strong&gt; in the dashboard&lt;/li&gt; 
  &lt;li&gt;Click &lt;strong&gt;Create API Key&lt;/strong&gt;, give it a name (e.g., &quot;Flexile Development&quot;)&lt;/li&gt; 
  &lt;li&gt;Copy the API key immediately (starts with re_)&lt;/li&gt; 
  &lt;li&gt;Add to &lt;code&gt;.env&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;RESEND_API_KEY=re_your_api_key_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Keep credentials secure and never commit to version control.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Flexile is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/antiwork/flexile/main/LICENSE.md&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Homebrew/brew</title>
      <link>https://github.com/Homebrew/brew</link>
      <description>&lt;p&gt;🍺 The missing package manager for macOS (or Linux)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Homebrew/brew/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/Homebrew/brew.svg?sanitize=true&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Homebrew/brew/raw/HEAD/LICENSE.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/Homebrew/brew&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Features, usage and installation instructions are &lt;a href=&quot;https://brew.sh&quot;&gt;summarised on the homepage&lt;/a&gt;. Terminology (e.g. the difference between a Cellar, Tap, Cask and so forth) is &lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook#homebrew-terminology&quot;&gt;explained here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What Packages Are Available?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Type &lt;code&gt;brew formulae&lt;/code&gt; for a list.&lt;/li&gt; 
 &lt;li&gt;Or visit &lt;a href=&quot;https://formulae.brew.sh&quot;&gt;formulae.brew.sh&lt;/a&gt; to browse packages online.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;More Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;brew help&lt;/code&gt;, &lt;code&gt;man brew&lt;/code&gt; or check &lt;a href=&quot;https://docs.brew.sh/&quot;&gt;our documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;First, please run &lt;code&gt;brew update&lt;/code&gt; and &lt;code&gt;brew doctor&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Second, read the &lt;a href=&quot;https://docs.brew.sh/Troubleshooting&quot;&gt;Troubleshooting Checklist&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;If you don&#39;t read these it will take us far longer to help you with your problem.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;Homebrew is a non-profit project run entirely by unpaid volunteers. We need your funds to pay for software, hardware and hosting around continuous integration and future improvements to the project. Every donation will be spent on making Homebrew better for our users.&lt;/p&gt; 
&lt;p&gt;Please consider a regular donation through &lt;a href=&quot;https://github.com/sponsors/Homebrew&quot;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&quot;https://opencollective.com/homebrew&quot;&gt;Open Collective&lt;/a&gt; or &lt;a href=&quot;https://www.patreon.com/homebrew&quot;&gt;Patreon&lt;/a&gt;. Homebrew is fiscally hosted by the &lt;a href=&quot;https://opencollective.com/opensource&quot;&gt;Open Source Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For questions about donations, including corporate giving, please email the Homebrew PLC at &lt;a href=&quot;mailto:plc@brew.sh&quot;&gt;plc@brew.sh&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/Homebrew/discussions&quot;&gt;Homebrew/discussions (forum)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fosstodon.org/@homebrew&quot;&gt;@homebrew@fosstodon.org (Mastodon)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bsky.app/profile/brew.sh&quot;&gt;@brew.sh (Bluesky)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://x.com/MacHomebrew&quot;&gt;@MacHomebrew (𝕏 (formerly known as Twitter))&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We&#39;d love you to contribute to Homebrew. First, please read our &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/brew/main/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt; and &lt;a href=&quot;https://github.com/Homebrew/.github/raw/HEAD/CODE_OF_CONDUCT.md#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We explicitly welcome contributions from people who have never contributed to open-source before: we were all beginners once! We can help build on a partially working pull request with the aim of getting it merged. We are also actively seeking to diversify our contributors and especially welcome contributions from women from all backgrounds and people of colour.&lt;/p&gt; 
&lt;p&gt;A good starting point for contributing is to first &lt;a href=&quot;https://docs.brew.sh/FAQ#can-i-edit-formulae-myself&quot;&gt;tap &lt;code&gt;homebrew/core&lt;/code&gt;&lt;/a&gt;, then run &lt;code&gt;brew audit --strict&lt;/code&gt; with some of the packages you use (e.g. &lt;code&gt;brew audit --strict wget&lt;/code&gt; if you use &lt;code&gt;wget&lt;/code&gt;) and read through the warnings. Try to fix them until &lt;code&gt;brew audit --strict&lt;/code&gt; shows no results and &lt;a href=&quot;https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request&quot;&gt;submit a pull request&lt;/a&gt;. If no formulae you use have warnings you can run &lt;code&gt;brew audit --strict&lt;/code&gt; without arguments to have it run on all packages and pick one.&lt;/p&gt; 
&lt;p&gt;Alternatively, for something more substantial, check out one of the issues labelled &lt;code&gt;help wanted&lt;/code&gt; in &lt;a href=&quot;https://github.com/homebrew/brew/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&quot;&gt;Homebrew/brew&lt;/a&gt; or &lt;a href=&quot;https://github.com/homebrew/homebrew-core/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&quot;&gt;Homebrew/homebrew-core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Good luck!&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Please report security issues by filling in &lt;a href=&quot;https://github.com/homebrew/brew/security/advisories/new&quot;&gt;the security advisory form&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who We Are&lt;/h2&gt; 
&lt;p&gt;Homebrew&#39;s &lt;a href=&quot;https://docs.brew.sh/Homebrew-Governance#6-project-leader&quot;&gt;Project Leader&lt;/a&gt; is &lt;a href=&quot;https://github.com/MikeMcQuaid&quot;&gt;Mike McQuaid&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Homebrew&#39;s &lt;a href=&quot;https://docs.brew.sh/Homebrew-Governance#4-project-leadership-committee&quot;&gt;Project Leadership Committee&lt;/a&gt; is &lt;a href=&quot;https://github.com/colindean&quot;&gt;Colin Dean&lt;/a&gt;, &lt;a href=&quot;https://github.com/iMichka&quot;&gt;Michka Popoff&lt;/a&gt;, &lt;a href=&quot;https://github.com/MikeMcQuaid&quot;&gt;Mike McQuaid&lt;/a&gt;, &lt;a href=&quot;https://github.com/p-linnane&quot;&gt;Patrick Linnane&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozzadrella&quot;&gt;Vanessa Gennarelli&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Homebrew&#39;s &lt;a href=&quot;https://docs.brew.sh/Homebrew-Governance#7-technical-steering-committee&quot;&gt;Technical Steering Committee&lt;/a&gt; is &lt;a href=&quot;https://github.com/Bo98&quot;&gt;Bo Anderson&lt;/a&gt;, &lt;a href=&quot;https://github.com/issyl0&quot;&gt;Issy Long&lt;/a&gt;, &lt;a href=&quot;https://github.com/cho-m&quot;&gt;Michael Cho&lt;/a&gt;, &lt;a href=&quot;https://github.com/MikeMcQuaid&quot;&gt;Mike McQuaid&lt;/a&gt; and &lt;a href=&quot;https://github.com/ZhongRuoyu&quot;&gt;Ruoyu Zhong&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Homebrew&#39;s maintainers are &lt;a href=&quot;https://github.com/bayandin&quot;&gt;Alexander Bayandin&lt;/a&gt;, &lt;a href=&quot;https://github.com/bevanjkay&quot;&gt;Bevan Kay&lt;/a&gt;, &lt;a href=&quot;https://github.com/Bo98&quot;&gt;Bo Anderson&lt;/a&gt;, &lt;a href=&quot;https://github.com/branchvincent&quot;&gt;Branch Vincent&lt;/a&gt;, &lt;a href=&quot;https://github.com/alebcay&quot;&gt;Caleb Xu&lt;/a&gt;, &lt;a href=&quot;https://github.com/carlocab&quot;&gt;Carlo Cabrera&lt;/a&gt;, &lt;a href=&quot;https://github.com/daeho-ro&quot;&gt;Daeho Ro&lt;/a&gt;, &lt;a href=&quot;https://github.com/dduugg&quot;&gt;Douglas Eichelberger&lt;/a&gt;, &lt;a href=&quot;https://github.com/dtrodrigues&quot;&gt;Dustin Rodrigues&lt;/a&gt;, &lt;a href=&quot;https://github.com/EricFromCanada&quot;&gt;Eric Knibbe&lt;/a&gt;, &lt;a href=&quot;https://github.com/fxcoudert&quot;&gt;FX Coudert&lt;/a&gt;, &lt;a href=&quot;https://github.com/issyl0&quot;&gt;Issy Long&lt;/a&gt;, &lt;a href=&quot;https://github.com/krehel&quot;&gt;Justin Krehel&lt;/a&gt;, &lt;a href=&quot;https://github.com/khipp&quot;&gt;Klaus Hipp&lt;/a&gt;, &lt;a href=&quot;https://github.com/reitermarkus&quot;&gt;Markus Reiter&lt;/a&gt;, &lt;a href=&quot;https://github.com/cho-m&quot;&gt;Michael Cho&lt;/a&gt;, &lt;a href=&quot;https://github.com/iMichka&quot;&gt;Michka Popoff&lt;/a&gt;, &lt;a href=&quot;https://github.com/MikeMcQuaid&quot;&gt;Mike McQuaid&lt;/a&gt;, &lt;a href=&quot;https://github.com/nandahkrishna&quot;&gt;Nanda H Krishna&lt;/a&gt;, &lt;a href=&quot;https://github.com/p-linnane&quot;&gt;Patrick Linnane&lt;/a&gt;, &lt;a href=&quot;https://github.com/chenrui333&quot;&gt;Rui Chen&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZhongRuoyu&quot;&gt;Ruoyu Zhong&lt;/a&gt;, &lt;a href=&quot;https://github.com/Rylan12&quot;&gt;Rylan Polster&lt;/a&gt;, &lt;a href=&quot;https://github.com/samford&quot;&gt;Sam Ford&lt;/a&gt;, &lt;a href=&quot;https://github.com/SMillerDev&quot;&gt;Sean Molenaar&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefanb&quot;&gt;Štefan Baebler&lt;/a&gt;, &lt;a href=&quot;https://github.com/Moisan&quot;&gt;Thierry Moisan&lt;/a&gt;, &lt;a href=&quot;https://github.com/timsutton&quot;&gt;Timothy Sutton&lt;/a&gt; and &lt;a href=&quot;https://github.com/woodruffw&quot;&gt;William Woodruff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Former maintainers with significant contributions include &lt;a href=&quot;https://github.com/miccal&quot;&gt;Miccal Matthews&lt;/a&gt;, &lt;a href=&quot;https://github.com/mistydemeo&quot;&gt;Misty De Méo&lt;/a&gt;, &lt;a href=&quot;https://github.com/sjackman&quot;&gt;Shaun Jackman&lt;/a&gt;, &lt;a href=&quot;https://github.com/vitorgalvao&quot;&gt;Vítor Galvão&lt;/a&gt;, &lt;a href=&quot;https://github.com/claui&quot;&gt;Claudia Pellegrino&lt;/a&gt;, &lt;a href=&quot;https://github.com/SeekingMeaning&quot;&gt;Seeker&lt;/a&gt;, &lt;a href=&quot;https://github.com/javian&quot;&gt;Jan Viljanen&lt;/a&gt;, &lt;a href=&quot;https://github.com/jcount&quot;&gt;JCount&lt;/a&gt;, &lt;a href=&quot;https://github.com/commitay&quot;&gt;commitay&lt;/a&gt;, &lt;a href=&quot;https://github.com/DomT4&quot;&gt;Dominyk Tiller&lt;/a&gt;, &lt;a href=&quot;https://github.com/tdsmith&quot;&gt;Tim Smith&lt;/a&gt;, &lt;a href=&quot;https://github.com/bfontaine&quot;&gt;Baptiste Fontaine&lt;/a&gt;, &lt;a href=&quot;https://github.com/xu-cheng&quot;&gt;Xu Cheng&lt;/a&gt;, &lt;a href=&quot;https://github.com/UniqMartin&quot;&gt;Martin Afanasjew&lt;/a&gt;, &lt;a href=&quot;https://github.com/asparagui&quot;&gt;Brett Koonce&lt;/a&gt;, &lt;a href=&quot;https://github.com/Sharpie&quot;&gt;Charlie Sharpsteen&lt;/a&gt;, &lt;a href=&quot;https://github.com/jacknagel&quot;&gt;Jack Nagel&lt;/a&gt;, &lt;a href=&quot;https://github.com/adamv&quot;&gt;Adam Vandenberg&lt;/a&gt;, &lt;a href=&quot;https://github.com/apjanke&quot;&gt;Andrew Janke&lt;/a&gt;, &lt;a href=&quot;https://github.com/dunn&quot;&gt;Alex Dunn&lt;/a&gt;, &lt;a href=&quot;https://github.com/neutric&quot;&gt;neutric&lt;/a&gt;, &lt;a href=&quot;https://github.com/nijikon&quot;&gt;Tomasz Pajor&lt;/a&gt;, &lt;a href=&quot;https://github.com/vladshablinsky&quot;&gt;Uladzislau Shablinski&lt;/a&gt;, &lt;a href=&quot;https://github.com/alyssais&quot;&gt;Alyssa Ross&lt;/a&gt;, &lt;a href=&quot;https://github.com/ilovezfs&quot;&gt;ilovezfs&lt;/a&gt;, &lt;a href=&quot;https://github.com/lembacon&quot;&gt;Chongyu Zhu&lt;/a&gt; and Homebrew&#39;s creator: &lt;a href=&quot;https://github.com/mxcl&quot;&gt;Max Howell&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Code is under the &lt;a href=&quot;https://raw.githubusercontent.com/Homebrew/brew/main/LICENSE.txt&quot;&gt;BSD 2-clause &quot;Simplified&quot; License&lt;/a&gt;. Documentation is under the &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons Attribution license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Our macOS continuous integration infrastructure is hosted by &lt;a href=&quot;https://www.macstadium.com/customers/homebrew&quot;&gt;MacStadium&#39;s Orka&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.macstadium.com&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/125011/22776032/097557ac-eea6-11e6-8ba8-eff22dfd58f1.png&quot; alt=&quot;Powered by MacStadium&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Secure password storage and syncing is provided by &lt;a href=&quot;https://1password.com/teams/&quot;&gt;1Password for Teams&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://1password.com&quot;&gt;&lt;img src=&quot;https://i.1password.com/akb/featured/1password-icon.svg?sanitize=true&quot; alt=&quot;1Password&quot; height=&quot;64&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;https://brew.sh&lt;/a&gt;&#39;s DNS is &lt;a href=&quot;https://dnsimple.com/resolving/homebrew&quot;&gt;resolving with DNSimple&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dnsimple.com/resolving/homebrew#gh-light-mode-only&quot;&gt;&lt;img src=&quot;https://cdn.dnsimple.com/assets/resolving-with-us/logo-light.png&quot; alt=&quot;DNSimple&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dnsimple.com/resolving/homebrew#gh-dark-mode-only&quot;&gt;&lt;img src=&quot;https://cdn.dnsimple.com/assets/resolving-with-us/logo-dark.png&quot; alt=&quot;DNSimple&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Homebrew is generously supported by &lt;a href=&quot;https://github.com/github&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://github.com/customink&quot;&gt;Custom Ink&lt;/a&gt;, &lt;a href=&quot;https://github.com/ydnar&quot;&gt;Randy Reddig&lt;/a&gt;, &lt;a href=&quot;https://github.com/Codecademy&quot;&gt;Codecademy&lt;/a&gt;, &lt;a href=&quot;https://github.com/Workbrew&quot;&gt;Workbrew&lt;/a&gt; and many other users and organisations via &lt;a href=&quot;https://github.com/sponsors/Homebrew&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/github&quot;&gt;&lt;img src=&quot;https://github.com/github.png?size=64&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>basecamp/kamal</title>
      <link>https://github.com/basecamp/kamal</link>
      <description>&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kamal: Deploy web apps anywhere&lt;/h1&gt; 
&lt;p&gt;From bare metal to cloud VMs, deploy web apps anywhere with zero downtime. Kamal uses &lt;a href=&quot;https://github.com/basecamp/kamal-proxy&quot;&gt;kamal-proxy&lt;/a&gt; to seamlessly switch requests between containers. Works seamlessly across multiple servers, using SSHKit to execute commands. Originally built for Rails apps, Kamal will work with any type of web app that can be containerized with Docker.&lt;/p&gt; 
&lt;p&gt;➡️ See &lt;a href=&quot;https://kamal-deploy.org&quot;&gt;kamal-deploy.org&lt;/a&gt; for documentation on &lt;a href=&quot;https://kamal-deploy.org/docs/installation&quot;&gt;installation&lt;/a&gt;, &lt;a href=&quot;https://kamal-deploy.org/docs/configuration&quot;&gt;configuration&lt;/a&gt;, and &lt;a href=&quot;https://kamal-deploy.org/docs/commands&quot;&gt;commands&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to the documentation&lt;/h2&gt; 
&lt;p&gt;Please help us improve Kamal&#39;s documentation on the &lt;a href=&quot;https://github.com/basecamp/kamal-site&quot;&gt;the basecamp/kamal-site repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Kamal is released under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/vagrant</title>
      <link>https://github.com/hashicorp/vagrant</link>
      <description>&lt;p&gt;Vagrant is a tool for building and distributing development environments.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vagrant&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;https://www.vagrantup.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Source: &lt;a href=&quot;https://github.com/hashicorp/vagrant&quot;&gt;https://github.com/hashicorp/vagrant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HashiCorp Discuss: &lt;a href=&quot;https://discuss.hashicorp.com/c/vagrant/24&quot;&gt;https://discuss.hashicorp.com/c/vagrant/24&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Vagrant is a tool for building and distributing development environments.&lt;/p&gt; 
&lt;p&gt;Development environments managed by Vagrant can run on local virtualized platforms such as VirtualBox or VMware, in the cloud via AWS or OpenStack, or in containers such as with Docker or raw LXC.&lt;/p&gt; 
&lt;p&gt;Vagrant provides the framework and configuration format to create and manage complete portable development environments. These development environments can live on your computer or in the cloud, and are portable between Windows, Mac OS X, and Linux.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Package dependencies: Vagrant requires &lt;code&gt;bsdtar&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; to be available on your system PATH to run successfully.&lt;/p&gt; 
&lt;p&gt;For the quick-start, we&#39;ll bring up a development machine on &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; because it is free and works on all major platforms. Vagrant can, however, work with almost any system such as &lt;a href=&quot;https://www.openstack.org/&quot;&gt;OpenStack&lt;/a&gt;, &lt;a href=&quot;https://www.vmware.com/&quot;&gt;VMware&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;First, make sure your development machine has &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; installed. After this, &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;download and install the appropriate Vagrant package for your OS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To build your first virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vagrant init hashicorp/bionic64
vagrant up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: The above &lt;code&gt;vagrant up&lt;/code&gt; command will also trigger Vagrant to download the &lt;code&gt;bionic64&lt;/code&gt; box via the specified URL. Vagrant only does this if it detects that the box doesn&#39;t already exist on your system.&lt;/p&gt; 
&lt;h2&gt;Getting Started Guide&lt;/h2&gt; 
&lt;p&gt;To learn how to build a fully functional development environment, follow the &lt;a href=&quot;https://www.vagrantup.com/docs/getting-started&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you want the bleeding edge version of Vagrant, we try to keep main pretty stable and you&#39;re welcome to give it a shot. Please review the installation page &lt;a href=&quot;https://www.vagrantup.com/docs/installation/source&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to Vagrant&lt;/h2&gt; 
&lt;p&gt;Please take time to read the &lt;a href=&quot;https://www.hashicorp.com/community-guidelines&quot;&gt;HashiCorp Community Guidelines&lt;/a&gt; and the &lt;a href=&quot;https://github.com/hashicorp/vagrant/raw/main/.github/CONTRIBUTING.md&quot;&gt;Vagrant Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Then you&#39;re good to go!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

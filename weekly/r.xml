<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub R Weekly Trending</title>
    <description>Weekly Trending of R in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:46:28 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>stuart-lab/signac</title>
      <link>https://github.com/stuart-lab/signac</link>
      <description>&lt;p&gt;R toolkit for the analysis of single-cell chromatin data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Signac &lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/stuart-lab/signac/master/man/figures/logo.svg?sanitize=true&quot; style=&quot;height:100px;&quot; /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/stuart-lab/signac/actions&quot;&gt;&lt;img src=&quot;https://github.com/stuart-lab/signac/workflows/R-CMD-check/badge.svg?sanitize=true&quot; alt=&quot;R-CMD-check&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cran.r-project.org/package=Signac&quot;&gt;&lt;img src=&quot;https://www.r-pkg.org/badges/version/Signac&quot; alt=&quot;CRAN Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cran.r-project.org/package=Signac&quot;&gt;&lt;img src=&quot;https://cranlogs.r-pkg.org/badges/Signac&quot; alt=&quot;CRAN Downloads&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Signac is a comprehensive R package for the analysis of single-cell chromatin data. Signac includes functions for quality control, normalization, dimension reduction, clustering, differential activity, and more.&lt;/p&gt; 
&lt;p&gt;Documentation and tutorials can be found at &lt;a href=&quot;https://stuartlab.org/signac/&quot;&gt;https://stuartlab.org/signac/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To install the latest release of Signac from CRAN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;setRepositories(ind=1:3) # needed to automatically install Bioconductor dependencies
install.packages(&quot;Signac&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To release the latest develop version from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;if (!requireNamespace(&quot;remotes&quot;, quietly = TRUE))
    install.packages(&quot;remotes&quot;)
remotes::install_github(&quot;stuart-lab/signac&quot;, ref = &quot;develop&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Release notes&lt;/h2&gt; 
&lt;p&gt;For a changelog please see the &lt;a href=&quot;https://github.com/stuart-lab/signac/raw/develop/NEWS.md&quot;&gt;NEWS file&lt;/a&gt;, also available on the &lt;a href=&quot;https://stuartlab.org/signac/news/index.html&quot;&gt;Signac website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to the Signac package. Please see the &lt;a href=&quot;https://github.com/stuart-lab/signac/raw/develop/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;If you encounter a bug or have a feature request, please open an &lt;a href=&quot;https://github.com/stuart-lab/signac/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you would like to discuss questions related to single-cell analysis, you can open a &lt;a href=&quot;https://github.com/stuart-lab/signac/discussions&quot;&gt;discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Signac runs on a quarterly release schedule. Additional releases will be scheduled in the case of urgent bug fixes. The development roadmap can be viewed on GitHub &lt;a href=&quot;https://github.com/orgs/stuart-lab/projects/1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Citing Signac&lt;/h2&gt; 
&lt;p&gt;If you use the Signac package in your work please cite &lt;a href=&quot;https://doi.org/10.1038/s41592-021-01282-5&quot;&gt;Stuart et al. 2021&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@ARTICLE{signac,
  title     = &quot;Single-cell chromatin state analysis with Signac&quot;,
  author    = &quot;Stuart, Tim and Srivastava, Avi and Madad, Shaista and Lareau,
               Caleb A and Satija, Rahul&quot;,
  journal   = &quot;Nat. Methods&quot;,
  publisher = &quot;Nature Publishing Group&quot;,
  pages     = &quot;1--9&quot;,
  month     =  nov,
  year      =  2021,
  url       = &quot;https://www.nature.com/articles/s41592-021-01282-5&quot;,
  language  = &quot;en&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Related packages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/seurat&quot;&gt;Seurat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/seurat-object&quot;&gt;SeuratObject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mojaveazure/seurat-disk&quot;&gt;SeuratDisk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/seurat-data&quot;&gt;SeuratData&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/seurat-wrappers&quot;&gt;SeuratWrappers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/azimuth&quot;&gt;Azimuth&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>broadinstitute/infercnv</title>
      <link>https://github.com/broadinstitute/infercnv</link>
      <description>&lt;p&gt;Inferring CNV from Single-Cell RNA-Seq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Subclustering&lt;/h1&gt; 
&lt;p&gt;Subclustering resolution is one of the primary settings that will need to be adjusted in most runs to avoid oversplitting. The tutorial below explains how it works and details about it can also be found on the &lt;a href=&quot;https://github.com/broadinstitute/infercnv/wiki/infercnv-tumor-subclusters#tumor-subclustering-by-leiden-clustering-preferred&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;h3&gt;Full documentation&lt;/h3&gt; 
&lt;p&gt;Visit project &lt;a href=&quot;https://github.com/broadinstitute/inferCNV/wiki&quot;&gt;wiki&lt;/a&gt; for InferCNV documentation.&lt;/p&gt; 
&lt;h3&gt;Infercnv video tutorial&lt;/h3&gt; 
&lt;p&gt;A &lt;strong&gt;video&lt;/strong&gt; tutorial giving on overview of infercnv features and how to run an analysis can be found below &lt;strong&gt;(click on the image)&lt;/strong&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=-qOcHAavZT8&quot; title=&quot;Tutorial: Running infercnv&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/-qOcHAavZT8/0.jpg&quot; alt=&quot;Tutorial: Running infercnv&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>swirldev/swirl_courses</title>
      <link>https://github.com/swirldev/swirl_courses</link>
      <description>&lt;p&gt;🎓 A collection of interactive courses for the swirl R package.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swirl courses&lt;/h1&gt; 
&lt;p&gt;This is a collection of interactive courses for use with the &lt;a href=&quot;http://swirlstats.com&quot;&gt;swirl R package&lt;/a&gt;. You&#39;ll find instructions for installing courses further down on this page. Some courses are still in development and we&#39;d love to hear any &lt;a href=&quot;https://github.com/swirldev/swirl_courses/issues/new&quot;&gt;suggestions&lt;/a&gt; you have as you work through them.&lt;/p&gt; 
&lt;p&gt;For more information regarding swirl, visit &lt;a href=&quot;http://swirlstats.com&quot;&gt;swirlstats.com&lt;/a&gt; or the &lt;a href=&quot;https://github.com/swirldev/swirl&quot;&gt;swirl GitHub repository&lt;/a&gt;. If you&#39;d like to write your own interactive content, please visit the &lt;a href=&quot;http://swirlstats.com/instructors.html&quot;&gt;Instructors page&lt;/a&gt; of our website.&lt;/p&gt; 
&lt;p&gt;Here are our current offerings, organized by level of difficulty:&lt;/p&gt; 
&lt;h4&gt;Beginner&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;R Programming&lt;/strong&gt;: The basics of programming in R&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swirldev/R_Programming_E&quot;&gt;&lt;strong&gt;R Programming E&lt;/strong&gt;&lt;/a&gt;: Same as the original, but modified slightly for in-class use (see below ***)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swirlstats.com/scn/rpe.html&quot;&gt;&lt;strong&gt;The R Programming Environment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- - **Data Analysis**: Basic ideas in statistics and data visualization --&gt; 
&lt;!-- - **Mathematical Biostatistics Boot Camp**: One- and two-sample t-tests, power, and sample size --&gt; 
&lt;!-- - **Open Intro**: A very basic introduction to statistics, data analysis, and data visualization --&gt; 
&lt;p&gt;*** &lt;em&gt;R Programming E is identical to R Programming, except we&#39;ve eliminated the prompts for Coursera credentials at the end of each lesson and instead give students the option to send an email to their instructor notifying them of completion. Admittedly, it&#39;s sort of a hack until we come up with a more robust solution for in-class use (i.e. an instructor &quot;dashboard&quot;).&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Intermediate&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Regression Models&lt;/strong&gt;: The basics of regression modeling in R&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Getting and Cleaning Data&lt;/strong&gt;: dplyr, tidyr, lubridate, oh my!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advanced&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Statistical Inference&lt;/strong&gt;: This intermediate to advanced level course closely follows the &lt;a href=&quot;https://www.coursera.org/course/statinference&quot;&gt;Statistical Inference course&lt;/a&gt; of the Johns Hopkins &lt;a href=&quot;https://www.coursera.org/specialization/jhudatascience/1&quot;&gt;Data Science Specialization&lt;/a&gt; on Coursera. It introduces the student to basic concepts of statistical inference including probability, hypothesis testing, confidence intervals and p-values. It concludes with an initiation to topics of particular relevance to big data, issues of multiple testing and resampling.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swirlstats.com/scn/arp.html&quot;&gt;&lt;strong&gt;Advanced R Programming&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since our users come from a variety backgrounds, it&#39;s very hard to label material as &lt;strong&gt;Beginner&lt;/strong&gt;, &lt;strong&gt;Intermediate&lt;/strong&gt;, or &lt;strong&gt;Advanced&lt;/strong&gt;. If you find something that is labelled &lt;strong&gt;Beginner&lt;/strong&gt; to be challenging, please don&#39;t be discouraged. The first step of learning anything is to acknowledge that you are capable of understanding it. True understanding will come with time and practice.&lt;/p&gt; 
&lt;h4&gt;Course Authors&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Writing swirl Courses&lt;/strong&gt;: An interactive guides and example for swirl course authors. The first group of lessons cover basics. The rest cover special topics useful primarily as samples--points of departure for one&#39;s own material. For more comprehensive documentation about writing your own swirl courses see &lt;a href=&quot;http://swirlstats.com/swirlify/&quot;&gt;http://swirlstats.com/swirlify/&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install and run a course automatically from swirl&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;This is the preferred method of installing courses.&lt;/strong&gt; It automates the process by allowing you to do everything right from the R console.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure you have a recent version version of swirl:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;install.packages(&quot;swirl&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Enter the following from the R console, &lt;strong&gt;substituting the name of the course&lt;/strong&gt; that you wish to install:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;library(swirl)
install_course(&quot;Course Name Here&quot;)
swirl()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, &lt;code&gt;install_course(&quot;R Programming&quot;)&lt;/code&gt; will install the R Programming course. &lt;strong&gt;Please note that course names are case sensitive!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If that doesn&#39;t work for you...&lt;/p&gt; 
&lt;h2&gt;Install and run a course manually&lt;/h2&gt; 
&lt;p&gt;If the automatic course installation method outlined above does not work for you, then there&#39;s a simple alternative.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Find the course you want to install on the &lt;a href=&quot;https://swirlstats.com/scn/title.html&quot;&gt;Swirl Course network website&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Follow the manual installation instructions on the course page.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If that does not work for you, consider taking a look at the &lt;a href=&quot;https://github.com/swirldev/swirl_courses/wiki/Legacy-Manual-Install-Instructions-for-Swirl-Courses&quot;&gt;legacy manual install instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Uninstall a course&lt;/h2&gt; 
&lt;p&gt;If you&#39;d like to remove a course at any time, you can use &lt;code&gt;uninstall_course(&quot;Course Name Here&quot;)&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using swirl in the classroom&lt;/h2&gt; 
&lt;p&gt;Instructors around the world are using swirl in their classrooms. We think this is awesome. If you&#39;re an instructor, please feel free to do the same -- free of charge. While your students may be paying to take your course or attend your institution, we simply ask that you don&#39;t charge people &lt;em&gt;directly&lt;/em&gt; for the use of our software or instructional content.&lt;/p&gt; 
&lt;p&gt;If you are not sure about a particular use case, don&#39;t hesitate to post a question to our &lt;a href=&quot;https://groups.google.com/forum/#!forum/swirl-discuss&quot;&gt;Google Group&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>immunogenomics/harmony</title>
      <link>https://github.com/immunogenomics/harmony</link>
      <description>&lt;p&gt;Fast, sensitive and accurate integration of single-cell data with Harmony&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Harmony &lt;img src=&quot;https://raw.githubusercontent.com/immunogenomics/harmony/master/man/figures/logo.png&quot; width=&quot;181px&quot; align=&quot;right&quot; /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/immunogenomics/harmony&quot;&gt;&lt;img src=&quot;https://travis-ci.org/immunogenomics/harmony.svg?branch=master&quot; alt=&quot;Travis-CI Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/immunogenomics/harmony&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/github/immunogenomics/harmony?branch=master&amp;amp;svg=true&quot; alt=&quot;AppVeyor Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.1038/s41592-019-0619-0&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/doi/10.1038/s41592-019-0619-0.svg?sanitize=true&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Fast, sensitive and accurate integration of single-cell data with Harmony&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Check out the manuscript in Nature Methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nature.com/articles/s41592-019-0619-0&quot;&gt;nature website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nature.com/articles/s41592-019-0619-0.epdf?shared_access_token=rDg_Rd07lrFXExt_ySj7V9RgN0jAjWel9jnR3ZoTv0NfDJkKCfDV_X9Mq3lweQmKiXEXxhrebQRjJEZdc-xNv6-7ZN1XotlD_mo5TSS4Z4eWn-kUo6mBwA5dEAKlTfR8OT6E10MZY_E-906ajbzvgg%3D%3D&quot;&gt;read link&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For Python users, check out the &lt;a href=&quot;https://github.com/slowkow/harmonypy&quot;&gt;harmonypy package&lt;/a&gt; by Kamil Slowikowski.&lt;/p&gt; 
&lt;h1&gt;System requirements&lt;/h1&gt; 
&lt;p&gt;Harmony has been tested on R versions &amp;gt;= 3.4. Please consult the DESCRIPTION file for more details on required R packages. Harmony has been tested on Linux, OS X, and Windows platforms.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;To run Harmony, open R and install harmony from CRAN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;install.packages(&quot;harmony&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;d like the latest development version, install from this github directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;devtools::install_github(&quot;immunogenomics/harmony&quot;, build_vignettes=TRUE)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;Harmony is designed to be user-friendly and supports some SingleCellExperiment and Seurat R analysis pipelines. Alternatively, it can be used in standalone mode.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Standalone Mode&lt;/h3&gt; 
&lt;p&gt;Check out this &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/doc/quickstart.html&quot;&gt;vignette&lt;/a&gt; for a quick start tutorial which demonstrates the usage of the tool in standalone mode.&lt;/p&gt; 
&lt;p&gt;At minimum the following parameters need to be specified to achieve an integration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;library(harmony)
my_harmony_embeddings &amp;lt;- RunHarmony(my_pca_embeddings, meta_data, &quot;dataset&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Seurat Objects&lt;/h2&gt; 
&lt;p&gt;By default, the harmony API works on Seurats PCA cell embeddings and corrects them. You can run Harmony within your Seurat workflow with &lt;code&gt;RunHarmony()&lt;/code&gt;. Prior &lt;code&gt;RunHarmony()&lt;/code&gt; the PCA cell embeddings need to be precomputed through Seurat&#39;s API. For downstream analyses, use the &lt;code&gt;harmony&lt;/code&gt; embeddings instead of &lt;code&gt;pca&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example, the following snippet run Harmony and then calculates UMAP of the corrected input embeddings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;seuratObj &amp;lt;- RunHarmony(seuratObj, &quot;dataset&quot;)
seuratObj &amp;lt;- RunUMAP(seuratObj, reduction = &quot;harmony&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a more detailed overview of the &lt;code&gt;RunHarmony()&lt;/code&gt; Seurat interface check, the &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/doc/Seurat.html&quot;&gt;Seurat vignette&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Harmony with two or more covariates&lt;/h2&gt; 
&lt;p&gt;Harmony can integrate over multiple covariates. To do this, specify a vector covariates to integrate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;my_harmony_embeddings &amp;lt;- RunHarmony(
  my_pca_embeddings, meta_data, c(&quot;dataset&quot;, &quot;donor&quot;, &quot;batch_id&quot;)
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Do the same with your Seurat object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;seuratObject &amp;lt;- RunHarmony(seuratObject, c(&quot;dataset&quot;, &quot;donor&quot;, &quot;batch_id&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Advanced tutorial&lt;/h2&gt; 
&lt;p&gt;The examples above all return integrated PCA embeddings. We created a &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/doc/detailedWalkthrough.html&quot;&gt;detailed walkthrough&lt;/a&gt; that explores the internal data structures and mechanics of the Harmony algorithm.&lt;/p&gt; 
&lt;h1&gt;Performance Notes&lt;/h1&gt; 
&lt;h2&gt;BLAS vs. OPENBLAS&lt;/h2&gt; 
&lt;p&gt;R distributions can be bundled with different scientific computing libraries. This can drastically impact harmony&#39;s performance. Rstudio comes by default with BLAS. In contrast, conda distributions of R are bundled with OPENBLAS. Overall, our benchmarks show that &lt;strong&gt;harmony+OPENBLAS is substantially faster compared harmony+BLAS&lt;/strong&gt;. Therefore users with large datasets will benefit using OPENBLAS.&lt;/p&gt; 
&lt;h2&gt;Multithreading in OPENBLAS&lt;/h2&gt; 
&lt;p&gt;One caveat is that OPENBLAS uses OPENMP to parallelize operations. By default, OPENBLAS will utilize all cores for these operations. While in theory this accelerates runtimes, in practice harmony is not optimized for multi-threaded performance and the unoptimized parallelization granularity may result in significantly slower run times and inefficient resource utilization (wasted CPU cycles). Therefore, by default harmony turns off multi-threading. However, very large datasets &amp;gt;1M may benefit from parallelization. This behavior can be controlled by the &lt;code&gt;ncores&lt;/code&gt; parameter which expects a number threads which harmony will use for its math operation. Users are advised to increase gradually &lt;code&gt;ncores&lt;/code&gt; and assess potential performance benefits.&lt;/p&gt; 
&lt;h1&gt;Reproducing results from manuscript&lt;/h1&gt; 
&lt;p&gt;Code to reproduce Harmony results from the Korsunsky et al 2019 manuscript will be made available on github.com/immunogenomics/harmony2019.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chris-mcginnis-ucsf/DoubletFinder</title>
      <link>https://github.com/chris-mcginnis-ucsf/DoubletFinder</link>
      <description>&lt;p&gt;R package for detecting doublets in single-cell RNA sequencing data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;~~ Announcement (11/24/21) ~~ I&#39;m now a postdoc at Stanford and my UCSF email will be decommissioned soon. I also only check my github repos about once per month, so please reach out directly at cmcginni@stanford[dot]edu if you run into any issues.&lt;/p&gt; 
&lt;h1&gt;DoubletFinder&lt;/h1&gt; 
&lt;p&gt;DoubletFinder is an R package that predicts doublets in single-cell RNA sequencing data.&lt;/p&gt; 
&lt;p&gt;DoubletFinder is implemented to interface with Seurat &amp;gt;= 2.0 (&lt;a href=&quot;https://satijalab.org/seurat/&quot;&gt;https://satijalab.org/seurat/&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;DoubletFinder was published by Cell Systems in April, 2019: &lt;a href=&quot;https://www.cell.com/cell-systems/fulltext/S2405-4712(19)30073-0&quot;&gt;https://www.cell.com/cell-systems/fulltext/S2405-4712(19)30073-0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;(02/02/2025) Haibo Liu (Senior Bioinformatician at UMass, @haibol2016) added as maintainer after his much-needed improvement updates to the package.&lt;/p&gt; 
&lt;p&gt;(11/21/2023) Made compatible with Seurat v5 and removed &#39;_v3&#39; flag from relevant function names.&lt;/p&gt; 
&lt;p&gt;(03/31/2020) Internalized functions normally in &#39;modes&#39; package to enable compatibility with R v3.6 and highger.&lt;/p&gt; 
&lt;p&gt;(06/21/2019) Added parallelization to paramSweep_v3 (thanks NathanSkeen!) -- Note: progress no longer updated, but the process is much faster! Fixed bug with smaller datasets. Updated readme.&lt;/p&gt; 
&lt;p&gt;(04/12/2019) Added SCTransform compatibilities to &#39;paramSweep_v3&#39; and &#39;doubletFinder_v3&#39;&lt;/p&gt; 
&lt;p&gt;(04/08/2019) Added &#39;PCs&#39; argument to &#39;doubletFinder&#39;, &#39;doubletFinder_v3&#39;, &#39;paramSweep&#39;, and &#39;paramSweep_v3&#39; to avoid conflicts with dimension reduction preferences. Updated readme.&lt;/p&gt; 
&lt;p&gt;(01/12/2019) Seurat V3 compatibility: &#39;doubletFinder_v3&#39; and &#39;paramSweep_v3&#39; functions added, other functions for parameter estimation remain compatible.&lt;/p&gt; 
&lt;h2&gt;DoubletFinder V2.0 (11/28/2018)&lt;/h2&gt; 
&lt;p&gt;New Features:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Increased computational efficiency during pANN computation&lt;/li&gt; 
 &lt;li&gt;Implemented strategy for determining optimal pK values for any scRNA-seq data using pN-pK parameter sweeps and mean-variance-normalized bimodality coefficient (BCmvn)&lt;/li&gt; 
 &lt;li&gt;Included vignette describing &#39;best-practices&#39; for applying DoubletFinder to scRNA-seq data generated without sample multiplexing&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Installation (in R/RStudio)&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;remotes::install_github(&#39;chris-mcginnis-ucsf/DoubletFinder&#39;, force = TRUE)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;DoubletFinder requires the following R packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Seurat (&amp;gt;= 2.0)&lt;/li&gt; 
 &lt;li&gt;Matrix (1.2.14)&lt;/li&gt; 
 &lt;li&gt;fields (9.6)&lt;/li&gt; 
 &lt;li&gt;KernSmooth (2.23-15)&lt;/li&gt; 
 &lt;li&gt;ROCR (1.0-7)&lt;/li&gt; 
 &lt;li&gt;parallel (3.5.1)&lt;/li&gt; 
 &lt;li&gt;NOTE: These package versions were used in the bioRxiv paper, but other versions may work, as well.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;p&gt;Question: What is my anticipated doublet rate? Answer: This is dependent on your platform (10x, parse, etc.) and will vary with the number of input cells. It will not always be 7.5% as is used in the tutorial. This information is available in the user guides for each technology. See &lt;a href=&quot;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/76&quot;&gt;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/76&lt;/a&gt; and &lt;a href=&quot;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/156&quot;&gt;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/156&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Question: Can I run DoubletFinder on merged data from multiple 10x lanes? Answer: Technically yes but I would only do this if you were splitting the same sample across multiple lanes. You want to avoid instances where DoubletFinder is attempting to find doublets that do not actually exist in the data. I would also not advise running DF on integrated Seurat objects. See &lt;a href=&quot;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/101&quot;&gt;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/101&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Question: I see multiple potential pK values when visualizing BCmvn -- what should I do? Answer: I would spot check the results in GEX space to see what makes the most sense given your understanding of the data. See &lt;a href=&quot;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/62&quot;&gt;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/62&lt;/a&gt; and &lt;a href=&quot;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/40&quot;&gt;https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/40&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;DoubletFinder Overview&lt;/h1&gt; 
&lt;p&gt;DoubletFinder can be broken up into 4 steps:&lt;/p&gt; 
&lt;p&gt;(1) Generate artificial doublets from existing scRNA-seq data&lt;/p&gt; 
&lt;p&gt;(2) Pre-process merged real-artificial data&lt;/p&gt; 
&lt;p&gt;(3) Perform PCA and use the PC distance matrix to find each cell&#39;s proportion of artificial k nearest neighbors (pANN)&lt;/p&gt; 
&lt;p&gt;(4) Rank order and threshold pANN values according to the expected number of doublets&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/DoubletFinderOverview.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;DoubletFinder takes the following arguments:&lt;/p&gt; 
&lt;p&gt;seu ~ This is a fully-processed Seurat object (i.e., after NormalizeData, FindVariableGenes, ScaleData, RunPCA, and RunTSNE have all been run).&lt;/p&gt; 
&lt;p&gt;PCs ~ The number of statistically-significant principal components, specified as a range (e.g., PCs = 1:10)&lt;/p&gt; 
&lt;p&gt;pN ~ This defines the number of generated artificial doublets, expressed as a proportion of the merged real-artificial data. Default is set to 25%, based on observation that DoubletFinder performance is largely pN-invariant (see McGinnis, Murrow and Gartner 2019, Cell Systems).&lt;/p&gt; 
&lt;p&gt;pK ~ This defines the PC neighborhood size used to compute pANN, expressed as a proportion of the merged real-artificial data. No default is set, as pK should be adjusted for each scRNA-seq dataset. Optimal pK values should be estimated using the strategy described below.&lt;/p&gt; 
&lt;p&gt;nExp ~ This defines the pANN threshold used to make final doublet/singlet predictions. This value can best be estimated from cell loading densities into the 10X/Drop-Seq device, and adjusted according to the estimated proportion of homotypic doublets.&lt;/p&gt; 
&lt;h2&gt;Application to Cell Hashing and Demuxlet data&lt;/h2&gt; 
&lt;p&gt;DoubletFinder successfully recapitulates ground-truth doublet classifications determined using antibody-barcode sample multiplexing (Cell Hashing) and SNP deconvolution (Demuxlet). DoubletFinder identifies false-negative Demuxlet classifications caused by doublets formed from cells with identical SNP profiles. DoubletFinder is insensitive to homotypic doublets -- i.e., doublets dervied from transcriptionally-similar cell states.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/Results_Demux.png&quot; alt=&quot;alternativetext&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/Results_Hashing.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;&#39;Best-Practices&#39; for scRNA-seq data generated without sample multiplexing&lt;/h1&gt; 
&lt;h2&gt;Input scRNA-seq Data&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Do not apply DoubletFinder to aggregated scRNA-seq data representing multiple &lt;em&gt;distinct&lt;/em&gt; samples (e.g., multiple 10X lanes). For example, if you run DoubletFinder on aggregated data representing WT and mutant cell lines sequenced across different 10X lanes, artificial doublets will be generated from WT and mutant cells, which cannot exist in your data. These artificial doublets will skew results. Notably, it is okay to run DoubletFinder on data generated by splitting a single sample across multiple 10X lanes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure that input data is cleared of low-quality cell clusters. There are a variety of ways to do this, but I usually use the following workflow:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;Manually threshold raw gene expression matrices according to RNA nUMIs (especially important when dealing with super-loaded 10X data because of the way CellRanger threholds data -- See Lun et al., 2019, Genome Biology.&lt;/li&gt; 
 &lt;li&gt;Pre-process data using standard workflow.&lt;/li&gt; 
 &lt;li&gt;Identify clusters with (A) low RNA UMIs, (B) High % mitochondrial reads, and/or (C) Uninformative marker genes.&lt;/li&gt; 
 &lt;li&gt;Remove clusters, pre-process again, and run DoubletFinder.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;pK Selection&lt;/h2&gt; 
&lt;p&gt;ROC analysis across pN-pK parameter sweeps for Cell Hashing and Demuxlet datasets demonstrate that DoubletFinder performance is largely invariant of pN value selection:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/ParamSweep_Schematic.png&quot; alt=&quot;alternativetext&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/ParamSweep_HeatMap.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;ROC analysis across pN-pK parameter sweeps for simulated scRNA-seq data with (I) Variable numbers of cell states and (II) Variable magnitudes of transcriptional heterogeneity demonstrates that (I) Optimal pK value selection depends on the total number of cell states and (II) DoubletFinder performance suffers when applied to transcriptionally-homogenous data. Simulated data was generated using a strategy similar to as described in Wolock, Lopex &amp;amp; Klein 2019, Cell Systems.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/Simulation_Schematic.png&quot; alt=&quot;alternativetext&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/Results_Simulation.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Simulated and sample-multiplexed data are unique in that ground-truth doublet classifications can be leveraged to characterize how DoubletFinder parameters must be &#39;fit&#39; to distinct scRNA-seq datasets. However, doublets remain unknown in real-world contexts -- which is likely why you are interested in DoubletFinder, at all!&lt;/p&gt; 
&lt;p&gt;To maximize the accuracy of DoubletFinder predictions, we sought a ground-truth-agnostic metric that coincides with pK values that maximize AUC in Cell Hashing and Demuxlet data. Mean-variance normalized bimodality coefficient (BCmvn) achieves this goal, featuring a single, easily-discernible maximum at pK values that optimize AUC.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/BCmvn.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;BCmvn distributions also feature a single maximum for scRNA-seq datasets generated without sample-multiplexing (e.g., Mouse pancreas, Byrnes et al., 2018, Nature Communcations; Mouse kidney, Park et al., 2018, Science), enabling pK selection.&lt;/p&gt; 
&lt;h2&gt;Doublet Number Estimation&lt;/h2&gt; 
&lt;p&gt;DoubletFinder is sensitive to heterotypic doublets -- i.e., doublets formed from transcriptionally-distinct cell states -- but is insensitive to homotypic doublets -- i.e., doublets formed from transcriptionally-similar cell states. In our original manuscript, we suggested using DoubletFinder to predict the number of doublets expected from Poisson statistical estimates realting to the droplet microfluidics cell loading density. However, Poisson estimates are agnostic of homotypic doublets, and will thus invariably overestimate the number of &lt;em&gt;detectable&lt;/em&gt; doublets.&lt;/p&gt; 
&lt;p&gt;To address this issue, we suggest users utilize literature-supported cell type annotations to model the proportion of homotypic doublets present in their data. As an example, we present an analysis of mouse kidney scRNA-seq data (Park et al., 2018, Science):&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/HomotypicAdjustment.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Notably, it is conceivable that literature-suppoted cell type annotations may not accurately recapitulate the magnitude of transcriptional divergence necessary for DoubletFinder sensitivity. For example, nominally-homogenous cells (e.g., CD4+ T-cells) may exist along a spectrum of gene expression states (e.g., distinct anatomical locations, disease states, naive/Tregs/Th17 cells, etc.), and doublets formed by cell sub-types may be detectable by DoubletFinder. Thus, we consider doublet number estimates based on Poisson statistics with and without homotypic doublet proportion adjustment to &#39;bookend&#39; the real detectable doublet rate.&lt;/p&gt; 
&lt;h2&gt;Example code for &#39;real-world&#39; applications&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-R&quot;&gt;## Pre-process Seurat object (standard) --------------------------------------------------------------------------------------
seu_kidney &amp;lt;- CreateSeuratObject(kidney.data)
seu_kidney &amp;lt;- NormalizeData(seu_kidney)
seu_kidney &amp;lt;- FindVariableFeatures(seu_kidney, selection.method = &quot;vst&quot;, nfeatures = 2000)
seu_kidney &amp;lt;- ScaleData(seu_kidney)
seu_kidney &amp;lt;- RunPCA(seu_kidney)
seu_kidney &amp;lt;- RunUMAP(seu_kidney, dims = 1:10)

## Pre-process Seurat object (sctransform) -----------------------------------------------------------------------------------
seu_kidney &amp;lt;- CreateSeuratObject(kidney.data)
seu_kidney &amp;lt;- SCTransform(seu_kidney)
seu_kidney &amp;lt;- RunPCA(seu_kidney)
seu_kidney &amp;lt;- RunUMAP(seu_kidney, dims = 1:10)

## pK Identification (no ground-truth) ---------------------------------------------------------------------------------------
sweep.res.list_kidney &amp;lt;- paramSweep(seu_kidney, PCs = 1:10, sct = FALSE)
sweep.stats_kidney &amp;lt;- summarizeSweep(sweep.res.list_kidney, GT = FALSE)
bcmvn_kidney &amp;lt;- find.pK(sweep.stats_kidney)

## pK Identification (ground-truth) ------------------------------------------------------------------------------------------
sweep.res.list_kidney &amp;lt;- paramSweep(seu_kidney, PCs = 1:10, sct = FALSE)
gt.calls &amp;lt;- seu_kidney@meta.data[rownames(sweep.res.list_kidney[[1]]), &quot;GT&quot;].   ## GT is a vector containing &quot;Singlet&quot; and &quot;Doublet&quot; calls recorded using sample multiplexing classification and/or in silico geneotyping results 
sweep.stats_kidney &amp;lt;- summarizeSweep(sweep.res.list_kidney, GT = TRUE, GT.calls = gt.calls)
bcmvn_kidney &amp;lt;- find.pK(sweep.stats_kidney)

## Homotypic Doublet Proportion Estimate -------------------------------------------------------------------------------------
homotypic.prop &amp;lt;- modelHomotypic(annotations)           ## ex: annotations &amp;lt;- seu_kidney@meta.data$ClusteringResults
nExp_poi &amp;lt;- round(0.075*nrow(seu_kidney@meta.data))  ## Assuming 7.5% doublet formation rate - tailor for your dataset
nExp_poi.adj &amp;lt;- round(nExp_poi*(1-homotypic.prop))

## Run DoubletFinder with varying classification stringencies ----------------------------------------------------------------
seu_kidney &amp;lt;- doubletFinder(seu_kidney, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = NULL, sct = FALSE)
seu_kidney &amp;lt;- doubletFinder(seu_kidney, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi.adj, reuse.pANN = &quot;pANN_0.25_0.09_913&quot;, sct = FALSE)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chris-mcginnis-ucsf/DoubletFinder/master/DF.screenshots/DFkidney_low.vs.high.png&quot; alt=&quot;alternativetext&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Other Doublet Detection Methods&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/AllonKleinLab/scrublet&quot;&gt;Scrublet (Py)&lt;/a&gt; &lt;a href=&quot;https://github.com/EDePasquale/DoubletDecon&quot;&gt;DoubletDecon (R)&lt;/a&gt; &lt;a href=&quot;https://github.com/JonathanShor/DoubletDetection&quot;&gt;DoubletDetection (Py)&lt;/a&gt; &lt;a href=&quot;https://github.com/calico/solo&quot;&gt;Solo (Py)&lt;/a&gt; &lt;a href=&quot;https://github.com/kostkalab/scds&quot;&gt;scds (R)&lt;/a&gt; &lt;a href=&quot;https://github.com/plger/scDblFinder&quot;&gt;scDblFinder (R)&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;References&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Stoeckius M, Zheng S, Houck-Loomis B, Hao S, Yeung BZ, Smibert P, Satija R. Cell Hashing with barcoded antibodies enables multiplexing and doublet detection for single cell genomics. Genome Biology. 2018. 19:224.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Kang HM, Subramaniam M, Targ S, Nguyen M, Maliskova L, McCarthy E, Wan E, Wong S, Byrnes L, Lanata CM, Gate RE, Mostafavi S, Marson A, Zaitlen N, Criswell LA, Ye JC. Multiplexed droplet single-cell RNA-sequencing using natural genetic variation. Nature Biotechnology. 2018. 36(1):89-94.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wolock SL, Lopez R, Klein AM. Scrublet: Computational Identification of Cell Doublets in Single-Cell Transcriptomic Data. Cell Systems. 2019. 8(4):281-291.e9.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Park J, Shrestha R, Qiu C, Kondo A, Huang S, Werth M, Li M, Barasch J, Suszták K. Single-cell transcriptomics of the mouse kidney reveals potential cellular targets of kidney disease. Science. 2018. 360(6390):758-63.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Byrnes LE, Wong DM, Subramaniam M, Meyer NP, Gilchrist CL, Knox SM, Tward AD, Ye CJ, Sneddon JB. Lineage dynamics of murine pancreatic development at single-cell resolution. Nature Communications. 2018; 9:3922.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bais AS, Kostka D. scds: computational annotation of doublets in single-cell RNA sequencing data. Bioinformatics. 2020. 36(4):1150-8.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bernstein NJ, Fong NL, Lam I, Roy MA, Hendrickson DG, Kelley DR. Solo: Doublet Identification in Single-Cell RNA-Seq via Semi-Supervised Deep Learning. Cell Systems. 2020. S2405-4712(20)30195-2.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DePasquale EAK, Schnell DJ, Van Camp PJ, Valiente-Alandi I, Blaxall BC, Grimes HL, Singh H, Salomonis N. DoubletDecon: Deconvoluting Doublets from Single-Cell RNA-Sequencing Data. Cell Reports. 2019. 29(6):1718-27.e8.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>satijalab/seurat</title>
      <link>https://github.com/satijalab/seurat</link>
      <description>&lt;p&gt;R toolkit for single cell genomics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/package=Seurat&quot;&gt;&lt;img src=&quot;https://www.r-pkg.org/badges/version/Seurat&quot; alt=&quot;CRAN Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cran.r-project.org/package=Seurat&quot;&gt;&lt;img src=&quot;https://cranlogs.r-pkg.org/badges/Seurat&quot; alt=&quot;CRAN Downloads&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Seurat v5&lt;/h1&gt; 
&lt;p&gt;Seurat is an R toolkit for single cell genomics, developed and maintained by the Satija Lab at NYGC.&lt;/p&gt; 
&lt;p&gt;We are excited to release Seurat v5! This updates introduces new functionality for spatial, multimodal, and scalable single-cell analysis.&lt;/p&gt; 
&lt;p&gt;Seurat v5 is backwards-compatible with previous versions, so that users will continue to be able to re-run existing workflows.&lt;/p&gt; 
&lt;p&gt;Instructions, documentation, and tutorials can be found at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://satijalab.org/seurat&quot;&gt;https://satijalab.org/seurat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Seurat is also hosted on GitHub, you can view and clone the repository at&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/satijalab/seurat&quot;&gt;https://github.com/satijalab/seurat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Seurat has been successfully installed on Mac OS X, Linux, and Windows, using the devtools package to install directly from GitHub&lt;/p&gt; 
&lt;p&gt;Improvements and new features will be added on a regular basis, please post on the &lt;a href=&quot;https://github.com/satijalab/seurat&quot;&gt;github page&lt;/a&gt; with any questions or if you would like to contribute&lt;/p&gt; 
&lt;p&gt;For a version history/changelog, please see the &lt;a href=&quot;https://github.com/satijalab/seurat/raw/master/NEWS.md&quot;&gt;NEWS file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cole-trapnell-lab/monocle3</title>
      <link>https://github.com/cole-trapnell-lab/monocle3</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MONOCLE 3&lt;/h1&gt; 
&lt;p&gt;Monocle 3 is an analysis toolkit for single-cell RNA-Seq experiments. To use this package, you will need the R statistical computing environment (version 3.0 or later) and several packages available through Bioconductor and CRAN.&lt;/p&gt; 
&lt;p&gt;Details on how to install and use Monocle 3 are available on our website:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://cole-trapnell-lab.github.io/monocle3/&quot;&gt;http://cole-trapnell-lab.github.io/monocle3/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Monocle3 with BPCells counts matrix support&lt;/h2&gt; 
&lt;p&gt;This development branch version of Monocle3 adds the ability to store the counts matrix on-disk using the BPCells package. By default, Monocle3 stores the counts matrix in-memory as a sparse matrix, as in previous versions. In order to store the matrix on-disk, you must set the matrix_control list value &lt;code&gt;matrix_class=&quot;BPCells&quot;&lt;/code&gt; in the affected commands. For example, to load a MatrixMarket file as an on-disk matrix, use the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cds &amp;lt;- load_mm_data(mat_path=&amp;lt;path_to_mtx_file&amp;gt;,
                    feature_anno_path=&amp;lt;path_to_feature_anno_file&amp;gt;,
                    cell_anno_path=&amp;lt;path_to_cell_anno_file&amp;gt;,
                    matrix_control=list(matrix_class=&#39;BPCells&#39;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Monocle3 with BPCells&lt;/h3&gt; 
&lt;p&gt;You must install BPCells from Github before you can install this Monocle3 version, and BPCells requires an HDF5 object library for installation. After installing the HDF5 library, you install BPCells using the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;remotes::install_github(&quot;bnprks/BPCells/r&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/bnprks/BPCells&quot;&gt;BPCells Github site&lt;/a&gt; has additional information.&lt;/p&gt; 
&lt;p&gt;Some Linux distributions provide the HDF5 library as an option. The BPCells site has information about installing the HDF5 library on various operating systems.&lt;/p&gt; 
&lt;p&gt;I used Homebrew to install an HDF5 library on MacOS. I seemed to need to install the pkg-config package as well, and add a pkg-config configuration file for HDF5. Homebrew installed pkg-config in &#39;/opt/homebrew&#39; so I added the hdf5.pc file in&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;/opt/homebrew/lib/pkgconfig/hdf5.pc&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;with the contents&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;prefix=/opt/homebrew/Cellar/hdf5/1.12.2_2
exec_prefix=${prefix}
includedir=${prefix}/include
libdir=/opt/homebrew/Cellar/hdf5/1.12.2_2/lib
  
Name: hdf5
Description: HDF5
URL: xx
Version: 1.12.2_2
Cflags: -I${includedir}
Libs: -L${libdir} -lhdf5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may need to update the version strings in your hdf5.pc file.&lt;/p&gt; 
&lt;p&gt;Monocle3 no longer uses the terra package, so it does not need to be installed.&lt;/p&gt; 
&lt;h3&gt;Notes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Monocle3 can use the BPCells package to store the feature-cell counts matrix on-disk rather than in-memory, which enables analysis of considerably larger data sets than before. By default, Monocle3 stores the counts matrix in-memory as a sparse matrix, as it has in the past. To store the counts matrix on-disk, use the parameter &lt;code&gt;matrix_control=list(matrix_class=&quot;BPCells&quot;)&lt;/code&gt; when you make the CDS or convert the counts matrix using one of the functions&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;load_mm_data()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;load_mtx_data()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;load_cellranger_data()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;load_a549()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;load_worm_embryo()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;load_worm_l2()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;convert_counts_matrix()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;For example, to convert a dgCMatrix counts matrix to a BPCells on-disk matrix in an existing CDS, use the command &lt;code&gt;cds &amp;lt;- convert_counts_matrix(cds, matrix_control=list(matrix_class=&quot;BPCells&quot;))&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;BPCells stores the count matrix information in directories with names similar to &lt;code&gt;monocle.bpcells.20230830.4c4b1bebe4b4.tmp&lt;/code&gt;. Monocle3 tries to remove those directories when you quit R. Please do not remove them while Monocle3 is running because doing so eliminates the count matrix data. You &lt;em&gt;can&lt;/em&gt; remove them after quitting R if Monocle3 fails to remove them.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The method &lt;code&gt;new_cell_data_set()&lt;/code&gt; accepts a BPCells on-disk counts matrix.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The functions &lt;code&gt;save_monocle_objects()&lt;/code&gt; and &lt;code&gt;load_monocle_objects()&lt;/code&gt; store and load BPCells on-disk matrices when the CDS counts matrix is an on-disk BPCells matrix.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The Monocle3 &lt;code&gt;saveRDS()&lt;/code&gt; function warns the user to use &lt;code&gt;save_monocle_objects()&lt;/code&gt; when saving a CDS with a BPCells on-disk counts matrix. If you insist on using the &lt;code&gt;saveRDS()&lt;/code&gt; function, the BPCells on-disk matrix directory will not be stored and you will be unable to load it with the &lt;code&gt;readRDS()&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The function &lt;code&gt;combine_cds()&lt;/code&gt; combines CDSes with mixes of dgCMatrix and BPCells on-disk counts matrices into a BPCells on-disk counts matrix. When called with the &lt;code&gt;matrix_control=list(matrix_class=&quot;BPCells&quot;)&lt;/code&gt; parameter, &lt;code&gt;combine_cds()&lt;/code&gt; combines CDSes with all dgCMatrix counts matrices into a BPCells on-disk counts matrix.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Note that when the counts matrix is stored as a BPCells on-disk matrix, the &lt;code&gt;new_cell_data_set()&lt;/code&gt; method stores a second BPCells on-disk copy of the matrix in the CDS assays slot with the name &lt;code&gt;counts_row_order&lt;/code&gt;. The &lt;code&gt;counts_row_order&lt;/code&gt; matrix is used by Monocle3 when the counts matrix is accessed intensively by row. The reason is that, by default, BPCells stores the matrix as a one-dimensional vector in column-major order, as does R. As a result, column access is fast and row access is slow. We use BPCell&#39;s ability to also store and access matrices in row-major order, which gives fast row access. However, this means that the two copies of the counts matrix must have the same count values. If you replace or change the CDS&#39;s counts matrix, you must also update the &lt;code&gt;counts_row_order&lt;/code&gt; matrix, which you can do using the function &lt;code&gt;set_cds_row_order_matrix()&lt;/code&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The CDS assays slot is a named list where the standard, column-major order, matrix is called &lt;code&gt;counts&lt;/code&gt; and the BPCells row-major order matrix is called &lt;code&gt;counts_row_order&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;counts&lt;/code&gt; matrix getter and setter methods are &lt;code&gt;counts(cds)&lt;/code&gt; and &lt;code&gt;counts(cds)&amp;lt;-&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The Monocle3 setter warns about re-setting the BPCells &lt;code&gt;counts_row_order&lt;/code&gt; matrix, unless called with the parameter &lt;code&gt;bpcells_warn=FALSE&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;counts_row_order&lt;/code&gt; getter method is called &lt;code&gt;counts_row_order&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;There is no corresponding &lt;code&gt;counts_row_order&lt;/code&gt; setter method&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By default, the BPCells on-disk matrix is stored in a directory that is created where R is started. You can change the directory location using the &lt;code&gt;matrix_path&lt;/code&gt; value in the &lt;code&gt;matrix_control&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For more information about the &lt;code&gt;matrix_control&lt;/code&gt; values, see the help document for the function &lt;code&gt;set_matrix_control()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I tested this version using BPCells counts matrices on the examples in the Monocle3 documentation although I did not try all of the plotting functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>posit-dev/mcptools</title>
      <link>https://github.com/posit-dev/mcptools</link>
      <description>&lt;p&gt;Model Context Protocol For R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mcptools &lt;a href=&quot;https://posit-dev.github.io/mcptools/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/logo.png&quot; align=&quot;right&quot; height=&quot;240&quot; alt=&quot;A hexagonal logo showing a bridge connecting two portions of a forested meadow.&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;!-- badges: start --&gt; 
&lt;p&gt;&lt;a href=&quot;https://lifecycle.r-lib.org/articles/stages.html#experimental&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&quot; alt=&quot;Lifecycle: experimental&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml&quot;&gt;&lt;img src=&quot;https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&quot; alt=&quot;R-CMD-check&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- badges: end --&gt; 
&lt;p&gt;mcptools implements the &lt;a href=&quot;https://modelcontextprotocol.io/&quot;&gt;Model Context Protocol&lt;/a&gt; in R. There are two sides to mcptools:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;R as an MCP server&lt;/strong&gt;:&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/r_as_a_server.png&quot; alt=&quot;A system architecture diagram showing three main components: Client (left), Server (center), and Session (right). The Client box lists AI coding assistants including Claude Desktop, Claude Code, Copilot Chat in VS Code, and Positron Assistant. The Server is initiated with `mcp_server()` and contains tools for R functions like reading package documentation, running R code, and inspecting global environment objects. Sessions can be configured with `mcp_session()` and can optionally connect to interactive R sessions, with two example projects shown: &#39;Some R Project&#39; and &#39;Other R Project&#39;.&quot; width=&quot;100%&quot; /&gt; 
&lt;p&gt;When configured with mcptools, MCP-enabled tools like Claude Desktop, Claude Code, and VS Code GitHub Copilot can run R code &lt;em&gt;in the sessions you have running&lt;/em&gt; to answer your questions. While the package supports configuring arbitrary R functions, you may be interested in the &lt;a href=&quot;https://posit-dev.github.io/btw/&quot;&gt;btw&lt;/a&gt; package’s integrated support for mcptools, which provides a default set of tools to to peruse the documentation of packages you have installed, check out the objects in your global environment, and retrieve metadata about your session and platform.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;R as an MCP client&lt;/strong&gt;:&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/r_as_a_client.png&quot; alt=&quot;An architecture diagram showing the Client (left) with R code using the ellmer library to create a chat object and then setting tools from mcp with `mcp_tools()`, and the Server (right) containing third-party tools including GitHub (for reading PRs/Issues), Confluence (for searching), and Google Drive (for searching). Bidirectional arrows indicate communication between the client and server components.&quot; width=&quot;100%&quot; /&gt; 
&lt;p&gt;Register third-party MCP servers with &lt;a href=&quot;https://ellmer.tidyverse.org/&quot;&gt;ellmer&lt;/a&gt; chats to integrate additional context into e.g.&amp;nbsp;&lt;a href=&quot;https://github.com/posit-dev/shinychat&quot;&gt;shinychat&lt;/a&gt; and &lt;a href=&quot;https://posit-dev.github.io/querychat/&quot;&gt;querychat&lt;/a&gt; apps.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE:&lt;/p&gt; 
 &lt;p&gt;This package used to be called acquaint and supplied a default set of tools from &lt;a href=&quot;https://github.com/posit-dev/btw&quot;&gt;btw&lt;/a&gt; when R was used as an MCP server. The direction of the dependency has been reversed; to use the same functionality from before, transition &lt;code&gt;acquaint::mcp_server()&lt;/code&gt; to &lt;code&gt;btw::btw_mcp_server()&lt;/code&gt; and &lt;code&gt;acquaint::mcp_session()&lt;/code&gt; to &lt;code&gt;btw::btw_mcp_session()&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install mcptools from CRAN with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;install.packages(&quot;mcptools&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can install the development version of mcptools like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;pak::pak(&quot;posit-dev/mcptools&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;R as an MCP server&lt;/h3&gt; 
&lt;p&gt;mcptools can be hooked up to any application that supports MCP. For example, to use with Claude Desktop, you might paste the following in your Claude Desktop configuration (on macOS, at &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;r-mcptools&quot;: {
      &quot;command&quot;: &quot;Rscript&quot;,
      &quot;args&quot;: [&quot;-e&quot;, &quot;mcptools::mcp_server()&quot;]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, to use with Claude Code, you might type in a terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;claude mcp add -s &quot;user&quot; r-mcptools -- Rscript -e &quot;mcptools::mcp_server()&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, if you’d like models to access variables in specific R sessions, call &lt;code&gt;mcptools::mcp_session()&lt;/code&gt; in those sessions. (You might include a call to this function in your .Rprofile, perhaps using &lt;code&gt;usethis::edit_r_profile()&lt;/code&gt;, to automatically register every session you start up.)&lt;/p&gt; 
&lt;h3&gt;R as an MCP client&lt;/h3&gt; 
&lt;p&gt;mcptools uses the Claude Desktop configuration file format to register third-party MCP servers, as most MCP servers provide setup instructions for Claude Desktop in their documentation. For example, here’s what the &lt;a href=&quot;https://github.com/github/github-mcp-server&quot;&gt;official GitHub MCP server&lt;/a&gt; configuration would look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;github&quot;: {
      &quot;command&quot;: &quot;docker&quot;,
      &quot;args&quot;: [
        &quot;run&quot;,
        &quot;-i&quot;,
        &quot;--rm&quot;,
        &quot;-e&quot;,
        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;,
        &quot;ghcr.io/github/github-mcp-server&quot;
      ],
      &quot;env&quot;: {
        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;&amp;lt;YOUR_TOKEN&amp;gt;&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the configuration file has been created (by default, mcptools will look to &lt;code&gt;file.path(&quot;~&quot;, &quot;.config&quot;, &quot;mcptools&quot;, &quot;config.json&quot;)&lt;/code&gt;), &lt;code&gt;mcp_tools()&lt;/code&gt; will return a list of ellmer tools which you can pass directly to the &lt;code&gt;$set_tools()&lt;/code&gt; method from ellmer:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ch &amp;lt;- ellmer::chat_anthropic()
ch$set_tools(mcp_tools())

ch$chat(&quot;What issues are open on posit-dev/mcptools?&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;In Claude Desktop, I’ll write the following:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;“From what year is the earliest recorded sample in the &lt;code&gt;forested&lt;/code&gt; data in my Positron session?”&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Without mcptools, Claude couldn’t get far here; by default, it can’t run R code and doesn’t have any way to “speak to” my interactive R sessions.&lt;/p&gt; 
&lt;img src=&quot;https://github.com/user-attachments/assets/064df664-2669-498e-a644-fb191a30235f&quot; alt=&quot;A screencast of a chat with Claude. After the question is asked, a tool called &#39;describe data frame&#39; is called with the `data_frame` argument set to `forested`. The results are returned from mcptools as json, which the model then integrates into its response: &#39;Based on the data structure, I can see there&#39;s a `year` column with values ranfing from 1995 to 2024. The earliest recorded sample in the `forested` data is from 1995.&#39;&quot; width=&quot;100%&quot; /&gt; 
&lt;p&gt;Using the package, the model asks to describe the data frame using a structure that will show summary statistics from the data. mcptools will appropriately route the request to the open Positron session, forwarding the results back to the model for it to situate in a response.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sqjin/CellChat</title>
      <link>https://github.com/sqjin/CellChat</link>
      <description>&lt;p&gt;R toolkit for inference, visualization and analysis of cell-cell communication from single-cell data&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;200&quot; src=&quot;https://github.com/sqjin/CellChat/raw/master/CellChat_Logo.png&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;CAUTION&lt;/h1&gt; 
&lt;p&gt;We have updated CellChat to v2 and migrated CellChat to a new repository. This repository will be NOT updated and maintained any more. Please check the new repository &lt;a href=&quot;https://github.com/jinworks/CellChat&quot;&gt;jinworks/CellChat&lt;/a&gt; for the new updates, and the &lt;a href=&quot;https://biorxiv.org/cgi/content/short/2023.11.05.565674v1&quot;&gt;CellChat v2 paper&lt;/a&gt; for a comprehensive protocol of CellChat.&lt;/p&gt; 
&lt;h1&gt;About CellChat and CellChatDB&lt;/h1&gt; 
&lt;p&gt;CellChat is an R package designed for inference, analysis, and visualization of cell-cell communication from single-cell data. CellChat aims to enable users to identify and interpret cell-cell communication within an easily interpretable framework, with the emphasis of clear, attractive, and interpretable visualizations.&lt;/p&gt; 
&lt;p&gt;CellChatDB is a manually curated database of literature-supported ligand-receptor interactions in mutiple species, leading to a comprehensive recapitulation of known molecular interaction mechanisms including multi-subunit structure of ligand-receptor complexes and co-factors.&lt;/p&gt; 
&lt;p&gt;If you use CellChat in your research, please considering citing our papers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://biorxiv.org/cgi/content/short/2023.11.05.565674v1&quot;&gt;Suoqin Jin et al., CellChat for systematic analysis of cell-cell communication from single-cell and spatially resolved transcriptomics, bioRxiv 2023&lt;/a&gt; [CellChat v2]&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nature.com/articles/s41467-021-21246-9&quot;&gt;Suoqin Jin et al., Inference and analysis of cell-cell communication using CellChat, Nature Communications 2021&lt;/a&gt; [CellChat v1]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Capabilities&lt;/h1&gt; 
&lt;p&gt;In addition to infer the intercellular communication from any given single-cell data, CellChat provides functionality for further data exploration, analysis, and visualization.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It can quantitatively characterize and compare the inferred cell-cell communication networks using a systems approach by combining social network analysis, pattern recognition, and manifold learning approaches.&lt;/li&gt; 
 &lt;li&gt;It provides an easy-to-use tool for extracting and visualizing high-order information of the inferred networks. For example, it allows ready prediction of major signaling inputs and outputs for all cell populations and how these populations and signals coordinate together for functions.&lt;/li&gt; 
 &lt;li&gt;It enables comparative analysis of cell-cell communication across different conditions and identification of altered signaling and cell populations.&lt;/li&gt; 
 &lt;li&gt;It provides several visualization outputs to facilitate intuitive user-guided data interpretation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;700&quot; src=&quot;https://github.com/sqjin/CellChat/raw/master/overview_CellChat.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://clustrmaps.com/site/1bpq2&quot;&gt; &lt;img width=&quot;200&quot; src=&quot;https://clustrmaps.com/map_v2.png?cl=ffffff&amp;amp;w=a&amp;amp;t=n&amp;amp;d=42WqeykSXznN_NSaBlpf6CtSXQxhqmIs6QusUsguFdY&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/sqjin/CellChat/master/#&quot;&gt; &lt;img src=&quot;https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2Fsqjin%2FCellChat&amp;amp;labelColor=%233499cc&amp;amp;countColor=%2370c168&quot; /&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jokergoo/ComplexHeatmap</title>
      <link>https://github.com/jokergoo/ComplexHeatmap</link>
      <description>&lt;p&gt;Make Complex Heatmaps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Make Complex Heatmaps &lt;a href=&quot;https://jokergoo.github.io/ComplexHeatmap-reference/book/&quot;&gt;&lt;img src=&quot;https://jokergoo.github.io/ComplexHeatmap-reference/book/complexheatmap-cover.jpg&quot; width=&quot;240&quot; align=&quot;right&quot; style=&quot;border:2px solid black;&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/jokergoo/ComplexHeatmap/actions&quot;&gt;&lt;img src=&quot;https://github.com/jokergoo/ComplexHeatmap/workflows/R-CMD-check/badge.svg?sanitize=true&quot; alt=&quot;R-CMD-check&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/github/jokergoo/ComplexHeatmap&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/jokergoo/ComplexHeatmap.svg?sanitize=true&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bioconductor.org/packages/stats/bioc/ComplexHeatmap/&quot;&gt;&lt;img src=&quot;http://www.bioconductor.org/shields/downloads/devel/ComplexHeatmap.svg?sanitize=true&quot; alt=&quot;bioc&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://bioconductor.org/packages/devel/bioc/html/ComplexHeatmap.html&quot;&gt;&lt;img src=&quot;http://www.bioconductor.org/shields/years-in-bioc/ComplexHeatmap.svg?sanitize=true&quot; alt=&quot;bioc&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;http://jokergoo.github.io/complexheatmap_logo.svg?sanitize=true&quot; width=&quot;550&quot; /&gt; 
&lt;p&gt;Complex heatmaps are efficient to visualize associations between different sources of data sets and reveal potential patterns. Here the &lt;strong&gt;ComplexHeatmap&lt;/strong&gt; package provides a highly flexible way to arrange multiple heatmaps and supports various annotation graphics.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/jokergoo/InteractiveComplexHeatmap&quot;&gt;&lt;strong&gt;InteractiveComplexHeatmap&lt;/strong&gt;&lt;/a&gt; package can directly export static complex heatmaps into an interactive Shiny app. Have a try!&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;Zuguang Gu, et al., &lt;a href=&quot;http://bioinformatics.oxfordjournals.org/content/early/2016/05/20/bioinformatics.btw313.abstract&quot;&gt;Complex heatmaps reveal patterns and correlations in multidimensional genomic data&lt;/a&gt;, Bioinformatics, 2016.&lt;/p&gt; 
&lt;p&gt;Zuguang Gu. &lt;a href=&quot;https://doi.org/10.1002/imt2.43&quot;&gt;Complex Heatmap Visualization&lt;/a&gt;, iMeta, 2022.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;ComplexHeatmap&lt;/code&gt; is available on &lt;a href=&quot;http://www.bioconductor.org/packages/devel/bioc/html/ComplexHeatmap.html&quot;&gt;Bioconductor&lt;/a&gt;, you can install it by:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;if (!requireNamespace(&quot;BiocManager&quot;, quietly=TRUE))
    install.packages(&quot;BiocManager&quot;)
BiocManager::install(&quot;ComplexHeatmap&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want the latest version, install it directly from GitHub:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;library(devtools)
install_github(&quot;jokergoo/ComplexHeatmap&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Make a single heatmap:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;Heatmap(mat, ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A single Heatmap with column annotations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ha = HeatmapAnnotation(df = anno1, anno_fun = anno2, ...)
Heatmap(mat, ..., top_annotation = ha)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make a list of heatmaps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;Heatmap(mat1, ...) + Heatmap(mat2, ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make a list of heatmaps and row annotations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ha = HeatmapAnnotation(df = anno1, anno_fun = anno2, ..., which = &quot;row&quot;)
Heatmap(mat1, ...) + Heatmap(mat2, ...) + ha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The full documentations are available at &lt;a href=&quot;https://jokergoo.github.io/ComplexHeatmap-reference/book/&quot;&gt;https://jokergoo.github.io/ComplexHeatmap-reference/book/&lt;/a&gt; and the website is at &lt;a href=&quot;https://jokergoo.github.io/ComplexHeatmap&quot;&gt;https://jokergoo.github.io/ComplexHeatmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Blog posts&lt;/h2&gt; 
&lt;p&gt;There are following blog posts focusing on specific topics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2021/03/24/3d-heatmap/&quot;&gt;Make 3D heatmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/05/06/translate-from-pheatmap-to-complexheatmap/&quot;&gt;Translate from pheatmap to ComplexHeatmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/05/11/set-cell-width/height-in-the-heatmap/&quot;&gt;Set cell width/height in the heatmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/05/15/interactive-complexheatmap/&quot;&gt;Interactive ComplexHeatmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/05/31/word-cloud-as-heatmap-annotation/&quot;&gt;Word cloud as heatmap annotation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/06/19/which-heatmap-function-is-faster/&quot;&gt;Which heatmap function is faster?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/06/30/rasterization-in-complexheatmap/&quot;&gt;Rasterization in ComplexHeatmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/07/06/block-annotation-over-several-slices/&quot;&gt;Block annotation over several slices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jokergoo.github.io/2020/07/14/integrate-complexheatmap-with-cowplot-package/&quot;&gt;Integrate ComplexHeatmap with cowplot package&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Visualize Methylation Profile with Complex Annotations&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/449218/47718635-2ec22980-dc49-11e8-9f01-37becb19e0d5.png&quot; alt=&quot;complexheatmap_example4&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Correlations between methylation, expression and other genomic features&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/449218/47718636-2ec22980-dc49-11e8-8db0-1659c27dcf40.png&quot; alt=&quot;complexheatmap_example3&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Visualize Cell Heterogeneity from Single Cell RNASeq&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/449218/47718637-2ec22980-dc49-11e8-925e-955c16cfa982.png&quot; alt=&quot;complexheatmap_example2&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Making Enhanced OncoPrint&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/449218/47718638-2ec22980-dc49-11e8-845e-21e51d3b8e73.png&quot; alt=&quot;complexheatmap_example1&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;UpSet plot&lt;/h3&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/449218/102615477-48c76a80-4136-11eb-98d9-3c528844fbe8.png&quot; width=&quot;500&quot; /&gt; 
&lt;h3&gt;3D heatmap&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/449218/112284448-8c77c600-8c89-11eb-8d38-c5538900df20.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT @ Zuguang Gu&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>benjjneb/dada2</title>
      <link>https://github.com/benjjneb/dada2</link>
      <description>&lt;p&gt;Accurate sample inference from amplicon data with single nucleotide resolution&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://app.travis-ci.com/benjjneb/dada2&quot;&gt;&lt;img src=&quot;https://app.travis-ci.com/benjjneb/dada2.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;dada2&lt;/h1&gt; 
&lt;p&gt;Exact sample inference from high-throughput amplicon data. Resolves real variants differing by as little as one nucleotide. Visit &lt;a href=&quot;https://benjjneb.github.io/dada2/index.html&quot;&gt;the DADA2 website&lt;/a&gt; for the most detailed and up-to-date documentation.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The dada2 package binaries are available through Bioconductor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-S&quot;&gt;## try http:// if https:// URLs are not supported
if (!requireNamespace(&quot;BiocManager&quot;, quietly=TRUE))
    install.packages(&quot;BiocManager&quot;)
BiocManager::install(&quot;dada2&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to install dada2 from source (and get the latest and greatest new features) see our &lt;a href=&quot;https://benjjneb.github.io/dada2/dada-installation.html&quot;&gt;installation from source instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://benjjneb.github.io/dada2/tutorial.html&quot;&gt;tutorial walkthrough of the DADA2 pipeline on paired end Illumina Miseq data&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://www.bioconductor.org/packages/3.6/bioc/manuals/dada2/man/dada2.pdf&quot;&gt;dada2 R package manual&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Further documentation is available on &lt;a href=&quot;http://benjjneb.github.io/dada2/&quot;&gt;the DADA2 front page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;DADA2 Articles&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1038/nmeth.3869&quot;&gt;DADA2: High resolution sample inference from Illumina amplicon data. Nature Methods, 2016.&lt;/a&gt; &lt;a href=&quot;http://rdcu.be/ipGh&quot;&gt;(Open Access link.)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://f1000research.com/articles/5-1492&quot;&gt;Bioconductor workflow for microbiome data analysis: from raw reads to community analyses. F1000 Research, 2016.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1038/ismej.2017.119&quot;&gt;Exact sequence variants should replace operational taxonomic units in marker-gene data analysis. ISMEJ, 2017.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1093/nar/gkz569&quot;&gt;High-throughput amplicon sequencing of the full-length 16S rRNA gene with single-nucleotide resolution. Nucleic Acids Research, 2019.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Other Resources&lt;/h3&gt; 
&lt;p&gt;Planned feature improvements are publicly catalogued at the main DADA2 development site on github, specifically on the &quot;Issues&quot; page for DADA2:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/benjjneb/dada2/issues&quot;&gt;https://github.com/benjjneb/dada2/issues&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If the feature you are hoping for is not listed, you are welcome to add it as a feature request &quot;issue&quot; on this page. This request will be publicly available and listed on the page.&lt;/p&gt; 
&lt;p&gt;Bugs and difficulties in using DADA2 are also welcome on &lt;a href=&quot;https://github.com/benjjneb/dada2/issues&quot;&gt;the issue tracker&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

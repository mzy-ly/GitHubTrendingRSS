<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Weekly Trending</title>
    <description>Weekly Trending of Lua in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:44:45 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a &quot;data only&quot; repo, providing basic, default &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt; configurations for various LSP servers. View &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;all configs&lt;/a&gt; or &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ‚ö†Ô∏è&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The configs live in &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Upgrade to Nvim 0.11+ and use &lt;code&gt;vim.lsp.enable(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to enable a config.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The configs in &lt;code&gt;lua/lspconfig/&lt;/code&gt; are &lt;em&gt;deprecated&lt;/em&gt; and will be removed. 
  &lt;ul&gt; 
   &lt;li&gt;Upgrade to Nvim 0.11+ and use &lt;code&gt;vim.lsp.enable(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to enable a config.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, not the issue tracker.&lt;/li&gt; 
 &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;This repo only provides self-contained &lt;em&gt;configurations&lt;/em&gt;. The &lt;code&gt;require&#39;lspconfig&#39;&lt;/code&gt; &quot;framework&quot; is deprecated and will be removed. 
  &lt;ul&gt; 
   &lt;li&gt;The &quot;framework&quot; parts (&lt;em&gt;not&lt;/em&gt; the configs) of nvim-lspconfig were upstreamed to Nvim core (&lt;code&gt;vim.lsp.config&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.11.3+. 
  &lt;ul&gt; 
   &lt;li&gt;Support for Nvim 0.10 will be removed. Upgrade Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or if you have Nvim 0.12 (nightly), you can use the builtin &lt;code&gt;vim.pack&lt;/code&gt; plugin manager: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add{
  { src = &#39;https://github.com/neovim/nvim-lspconfig&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable its config in your init.lua (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;:help lsp-quickstart&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.enable(&#39;pyright&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;jdtls&#39;, {
  cmd = { &#39;/path/to/jdtls&#39; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets default options and mappings when LSP is active in a buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-defaults&quot;&gt;:help lsp-defaults&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-defaults&quot;&gt;:help diagnostic-defaults&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-attach&quot;&gt;:help lsp-attach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;:help lsp-buf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra settings can be specified for each LSP server. With Nvim 0.11+ you can &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;extend a config&lt;/a&gt; by calling &lt;code&gt;vim.lsp.config(&#39;‚Ä¶&#39;, {‚Ä¶})&lt;/code&gt;. (You can also copy any config directly from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt; and put it in a local &lt;code&gt;lsp/&lt;/code&gt; directory in your &#39;runtimepath&#39;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {
  -- Server-specific settings. See `:help lsp-quickstart`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create a new config&lt;/h2&gt; 
&lt;p&gt;To create a new config you can either (1) use &lt;code&gt;vim.lsp.config&lt;/code&gt; or (2) create a file &lt;code&gt;lsp/&amp;lt;config-name&amp;gt;.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;.&lt;/p&gt; 
&lt;h3&gt;Example: define a new config as code&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.config(&#39;foo&#39;, {cmd={&#39;true&#39;}})&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üòé&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Example: define a new config as a file&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a file &lt;code&gt;lsp/foo.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;. &lt;pre&gt;&lt;code&gt;:exe &#39;edit&#39; stdpath(&#39;config&#39;) .. &#39;/lsp/foo.lua&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add this code to the file (or copy any of the examples from the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/ directory&lt;/a&gt; in this repo): &lt;pre&gt;&lt;code&gt;return {
  cmd = { &#39;true&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Save the file (with &lt;code&gt;++p&lt;/code&gt; to ensure its parent directory is created). &lt;pre&gt;&lt;code&gt;:write ++p
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable the config. &lt;pre&gt;&lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üåà&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Start with &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to troubleshoot. The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in the config from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is a name instead of an absolute path, ensure it is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set filetype?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Not triggering root detection. Some language servers require a &quot;workspace&quot;, which is found by looking for an ancestor directory that contains a &quot;root marker&quot;. The most common root marker is &lt;code&gt;.git/&lt;/code&gt;, but each config defines other &quot;root marker&quot; names. Root markers/directories are listed in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also explicitly set a root instead of relying on automatic detection by enabling &lt;code&gt;&#39;exrc&#39;&lt;/code&gt; and adding an &lt;code&gt;.nvim.lua&lt;/code&gt; at the desired root dir with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;&amp;lt;client name&amp;gt;&#39;, {
  root_dir = vim.fn.fnamemodify(debug.getinfo(1, &#39;S&#39;).source:sub(2), &#39;:p:h&#39;),
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that prior to nvim 0.12 &lt;code&gt;exrc&lt;/code&gt; file is executed only if it&#39;s inside of a cwd where you start &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;. Add this to your init.lua to enable verbose logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, then run &lt;code&gt;:LspLog&lt;/code&gt; to open the log. Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lsp/&amp;lt;server_name&amp;gt;.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/#neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Release process&lt;/h2&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stephan-S/FS25_AutoDrive</title>
      <link>https://github.com/Stephan-S/FS25_AutoDrive</link>
      <description>&lt;p&gt;FS25 version of the AutoDrive mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FS25_AutoDrive&lt;/h1&gt; 
&lt;p&gt;FS25 version of the AutoDrive mod&lt;/p&gt; 
&lt;h3&gt;Latest Release: 3.0.0.6&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/Stephan-S/FS25_AutoDrive/total?label=Downloads&amp;amp;style=plastic&quot; alt=&quot;GitHub all releases&quot; /&gt;&lt;br /&gt; Direct Download: &lt;a href=&quot;https://github.com/Stephan-S/FS25_AutoDrive/releases/latest/download/FS25_AutoDrive.zip&quot;&gt;https://github.com/Stephan-S/FS25_AutoDrive/releases/latest/download/FS25_AutoDrive.zip&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Discord Server:&lt;/h2&gt; 
&lt;p&gt;For help &amp;amp; support, feel free to join us on Discord: &lt;a href=&quot;https://discord.gg/2XfnM59DFy&quot;&gt;https://discord.gg/2XfnM59DFy&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;For a little thank you&lt;/h3&gt; 
&lt;p&gt;If you like our work, feel free to buy us a coffee (of which we drink quite a lot :D )&lt;br /&gt; For now, there is no general link for the team, so each contributer can post his/her preferred donation link here :-)&lt;br /&gt; But remember, this is absolutely not required. We value any issues and feature requests the same!&lt;br /&gt; And to all who do donate: Thank you very much :-)&lt;/p&gt; 
&lt;h4&gt;Stephan (Founder):&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.me/StephanSchlosser&quot;&gt;https://www.paypal.me/StephanSchlosser&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Iwan1803 (Community Manager, Supporter &amp;amp; Tester):&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://iwan1803.de/urls/tip&quot;&gt;https://iwan1803.de/urls/tip&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Axel &amp;amp; Tommo (Modder)&lt;/h4&gt; 
&lt;h4&gt;Willi (Supporter &amp;amp; Tester)&lt;/h4&gt; 
&lt;h2&gt;Placeable Crossings and Reversing (separate mods)&lt;/h2&gt; 
&lt;p&gt;Direct Download: &lt;a href=&quot;https://github.com/Williwillswisse/AD_xCrossing/releases/latest/download/FS25_AutoDrive_xCrossing.zip&quot;&gt;https://github.com/Williwillswisse/AD_xCrossing/releases/latest/download/FS25_AutoDrive_xCrossing.zip&lt;/a&gt; &lt;br /&gt; Direct Download: &lt;a href=&quot;https://github.com/Williwillswisse/AD_T_intersection/releases/latest/download/FS25_AutoDrive_T_intersection.zip&quot;&gt;https://github.com/Williwillswisse/AD_T_intersection/releases/latest/download/FS25_AutoDrive_T_intersection.zip&lt;/a&gt; &lt;br /&gt; Direct Download: &lt;a href=&quot;https://github.com/Williwillswisse/AD_reverseToMarker/releases/latest/download/FS25_AutoDrive_reverseToMarker.zip&quot;&gt;https://github.com/Williwillswisse/AD_reverseToMarker/releases/latest/download/FS25_AutoDrive_reverseToMarker.zip&lt;/a&gt; &lt;br /&gt; Repository: &lt;a href=&quot;https://github.com/Williwillswisse&quot;&gt;https://github.com/Williwillswisse&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Placeables with already prepared AD routes (separate mods)&lt;/h2&gt; 
&lt;p&gt;A growing number of ingame placeables, e.g. buildings, silos, productions and so on with integrated AD routes. &lt;br /&gt; Download: &lt;a href=&quot;https://hof-hirschfeld.de/category/autodrive/&quot;&gt;https://hof-hirschfeld.de/category/autodrive/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Course Editor&lt;/h2&gt; 
&lt;p&gt;The course editor is now maintained by @KillBait and can be found here: &lt;a href=&quot;https://github.com/KillBait/AutoDrive_Course_Editor&quot;&gt;https://github.com/KillBait/AutoDrive_Course_Editor&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvimtools/none-ls.nvim</title>
      <link>https://github.com/nvimtools/none-ls.nvim</link>
      <description>&lt;p&gt;null-ls.nvim reloaded / Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;none-ls.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt; Reloaded, maintained by the community.&lt;/p&gt; 
&lt;p&gt;Only the repo name is changed for compatibility concerns. All the API and future changes will keep in place as-is.&lt;/p&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Replace &lt;code&gt;jose-elias-alvarez/null-ls.nvim&lt;/code&gt; with &lt;code&gt;nvimtools/none-ls.nvim&lt;/code&gt; in your choice of package manager.&lt;/p&gt; 
&lt;p&gt;That&#39;s it.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Open a pull request to become a collaborator. If you have contributed to &lt;code&gt;null-ls.nvim&lt;/code&gt; before, simply open an issue or comment on that commit.&lt;/p&gt; 
&lt;p&gt;If you want to make changes, open a new pull request. Find another collaborator to review your changes, as a review is required for the PR to be merged by yourself (subject to change if there are more collaborators in the future).&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;null-ls.nvim&lt;/h1&gt; 
&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; 
&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; 
&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; 
&lt;p&gt;null-ls is developed on and tested against the latest stable version of Neovim. Support for versions built from &lt;code&gt;HEAD&lt;/code&gt; is provided on a best-effort basis, and users are encouraged to contribute fixes to any issues exclusive to these versions.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&quot;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTIN_CONFIG.md&quot;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; 
&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/HELPERS.md&quot;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; 
&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&quot;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONFIG.md&quot;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)

null_ls.setup({
    sources = {
        null_ls.builtins.formatting.stylua,
        null_ls.builtins.completion.spell,
        require(&quot;none-ls.diagnostics.eslint&quot;), -- requires none-ls-extras.nvim
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/MAIN.md&quot;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Parsing buffer content&lt;/h3&gt; 
&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)

local no_really = {
    method = null_ls.methods.DIAGNOSTICS,
    filetypes = { &quot;markdown&quot;, &quot;text&quot; },
    generator = {
        fn = function(params)
            local diagnostics = {}
            -- sources have access to a params object
            -- containing info about the current file and editor state
            for i, line in ipairs(params.content) do
                local col, end_col = line:find(&quot;really&quot;)
                if col and end_col then
                    -- null-ls fills in undefined positions
                    -- and converts source diagnostics into the required format
                    table.insert(diagnostics, {
                        row = i,
                        col = col,
                        end_col = end_col + 1,
                        source = &quot;no-really&quot;,
                        message = &quot;Don&#39;t use &#39;really!&#39;&quot;,
                        severity = vim.diagnostic.severity.WARN,
                    })
                end
            end
            return diagnostics
        end,
    },
}

null_ls.register(no_really)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; 
&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)
local helpers = require(&quot;null-ls.helpers&quot;)

local markdownlint = {
    method = null_ls.methods.DIAGNOSTICS,
    filetypes = { &quot;markdown&quot; },
    -- null_ls.generator creates an async source
    -- that spawns the command with the given arguments and options
    generator = null_ls.generator({
        command = &quot;markdownlint&quot;,
        args = { &quot;--stdin&quot; },
        to_stdin = true,
        from_stderr = true,
        -- choose an output format (raw, json, or line)
        format = &quot;line&quot;,
        check_exit_code = function(code, stderr)
            local success = code &amp;lt;= 1

            if not success then
                -- can be noisy for things that run often (e.g. diagnostics), but can
                -- be useful for things that run on demand (e.g. formatting)
                print(stderr)
            end

            return success
        end,
        -- use helpers to parse the output from string matchers,
        -- or parse it manually with a function
        on_output = helpers.diagnostics.from_patterns({
            {
                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],
                groups = { &quot;row&quot;, &quot;col&quot;, &quot;message&quot; },
            },
            {
                pattern = [[:(%d+) [%w-/]+ (.*)]],
                groups = { &quot;row&quot;, &quot;message&quot; },
            },
        }),
    }),
}

null_ls.register(markdownlint)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&quot;&gt;Enable debug mode&lt;/a&gt; and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; 
 &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; 
 &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; 
 &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;My &lt;code&gt;:checkhealth&lt;/code&gt; output is wrong! What do I do?&lt;/h3&gt; 
&lt;p&gt;Checking whether a given command is executable is tricky, and null-ls&#39; health check doesn&#39;t handle all cases. null-ls&#39; internal command resolution is independent of its health check output, which is for informational purposes.&lt;/p&gt; 
&lt;p&gt;If you&#39;re not sure whether a given command is running as expected, &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&quot;&gt;enable debug mode&lt;/a&gt; and check your log.&lt;/p&gt; 
&lt;h3&gt;How do I format files?&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. See &lt;code&gt;:help vim.lsp.buf.format()&lt;/code&gt; for usage instructions.&lt;/p&gt; 
&lt;h3&gt;How do I format files on save?&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Formatting-on-save&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; 
&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;null-ls&quot;).setup({
    debug = true,
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; 
&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; 
&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Compatibility-with-other-plugins&quot;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; 
&lt;h3&gt;How does it work?&lt;/h3&gt; 
&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; 
&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; 
&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; 
&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; 
&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.buf.format({ timeout_ms = 2000 })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; 
&lt;p&gt;To avoid a dependency on any plugin managers, the test suite will set up its plugin runtime under the &lt;code&gt;./tests&lt;/code&gt; directory to always have a plenary version available.&lt;/p&gt; 
&lt;p&gt;If you run into plenary-related issues while running the tests, make sure you have an up-to-date version of the plugin by clearing that cache with: &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All tests expect to run on the latest release version of Neovim and are not guaranteed to work on versions built from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mattn/efm-langserver&quot;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamcco/diagnostic-languageserver&quot;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mhartington/formatter.nvim&quot;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/hover.nvim&quot;&gt;hover.nvim&lt;/a&gt;: Hover plugin framework for Neovim.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jdhao/nvim-config</title>
      <link>https://github.com/jdhao/nvim-config</link>
      <description>&lt;p&gt;A modern Neovim configuration with full battery for Python, Lua, C++, Markdown, LaTeX, and more...&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;a&gt; &lt;img alt=&quot;Linux&quot; src=&quot;https://img.shields.io/badge/Linux-%23.svg?style=flat-square&amp;amp;logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img alt=&quot;macOS&quot; src=&quot;https://img.shields.io/badge/macOS-%23.svg?style=flat-square&amp;amp;logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img alt=&quot;Windows&quot; src=&quot;https://img.shields.io/badge/Windows-%23.svg?style=flat-square&amp;amp;logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Neovim-0.11.3-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=green&quot; alt=&quot;Neovim minimum version&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/search?l=vim-script&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/languages/top/jdhao/nvim-config&quot; alt=&quot;Top languages&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/graphs/commit-activity&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/graphs/contributors&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/jdhao/nvim-config?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&quot; alt=&quot;License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://deepwiki.com/jdhao/nvim-config&quot;&gt; &lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;deepwiki&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;This repo hosts my Nvim configuration for Linux, macOS, and Windows. &lt;code&gt;init.lua&lt;/code&gt; is the config entry point for terminal Nvim, and &lt;code&gt;ginit.vim&lt;/code&gt; is the additional config file for &lt;a href=&quot;https://github.com/neovim/neovim/wiki/Related-projects#gui&quot;&gt;GUI client of Nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;My configurations are heavily documented to make it as clear as possible. While you can clone the whole repository and use it, it is not recommended though. Good configurations are personal. Everyone should have his or her unique config file. You are encouraged to copy from this repo the part you want and add it to your own config.&lt;/p&gt; 
&lt;p&gt;To reduce the possibility of breakage, &lt;strong&gt;this config is only maintained for &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;the latest nvim stable release&lt;/a&gt;. No effort is spent on maintaining backward compatibility.&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Install and setup&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/jdhao/nvim-config/main/docs/README.md&quot;&gt;doc here&lt;/a&gt; on how to install Nvim&#39;s dependencies, Nvim itself, and how to set up on different platforms (Linux, macOS, and Windows).&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Plugin management via &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;Lazy.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code, snippet, word auto-completion via &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Language server protocol (LSP) support via &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Git integration via &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Better escaping from insert mode via &lt;a href=&quot;https://github.com/nvim-zh/better-escape.vim&quot;&gt;better-escape.vim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ultra-fast project-wide fuzzy searching via &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Faster code commenting via &lt;a href=&quot;https://github.com/tpope/vim-commentary&quot;&gt;vim-commentary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Faster matching pair insertion and jump via &lt;a href=&quot;https://github.com/windwp/nvim-autopairs&quot;&gt;nvim-autopairs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Smarter and faster matching pair management (add, replace or delete) via &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Fast buffer jump via &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Powerful snippet insertion via &lt;a href=&quot;https://github.com/SirVer/ultisnips&quot;&gt;Ultisnips&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Beautiful statusline via &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;File tree explorer via &lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Better quickfix list with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Show search index and count with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-hlslens&quot;&gt;nvim-hlslens&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;User-defined mapping hint via &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Asynchronous code execution via &lt;a href=&quot;https://github.com/skywind3000/asyncrun.vim&quot;&gt;asyncrun.vim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code highlighting via &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code editing using true nvim inside browser via &lt;a href=&quot;https://github.com/glacambre/firenvim&quot;&gt;firenvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Beautiful colorscheme via &lt;a href=&quot;https://github.com/sainnhe/gruvbox-material&quot;&gt;sainnhe/gruvbox-material&lt;/a&gt; and other colorschemes.&lt;/li&gt; 
 &lt;li&gt;Markdown writing and previewing via &lt;a href=&quot;https://github.com/preservim/vim-markdown&quot;&gt;vim-markdown&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamcco/markdown-preview.nvim&quot;&gt;markdown-preview.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;LaTeX editing and previewing via &lt;a href=&quot;https://github.com/lervag/vimtex&quot;&gt;vimtex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Animated GUI style notification via &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Tags navigation via &lt;a href=&quot;https://github.com/liuchengxu/vista.vim&quot;&gt;vista&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Undo management via &lt;a href=&quot;https://github.com/simnalamburt/vim-mundo&quot;&gt;vim-mundo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code folding with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; and &lt;a href=&quot;https://github.com/luukvbaal/statuscol.nvim&quot;&gt;statuscol.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;......&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;UI Demo&lt;/h1&gt; 
&lt;p&gt;For more UI demos, check &lt;a href=&quot;https://github.com/jdhao/nvim-config/issues/15&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Start screen with dashboard-nvim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/183256752-fb23b215-a6b8-4646-beed-9999f52d53f1.png&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;File fuzzy finding using fzf-lua&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/3199e35d-121a-487b-bfd1-58eb69b0b48a&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Code autocompletion with nvim-cmp&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128590006-0fc1451f-fac1-49b2-bb95-8aba21bfa44e.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Git add, commit and push via fugitive.vim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128590833-aaa05d53-19ef-441d-a5a9-ba1bbd3936c1.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Tags&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128589584-4036a1a2-2e0a-4bbe-8aaf-ff8b91644648.jpg&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Cursor jump via hop.nvim&lt;/h2&gt; 
&lt;p&gt;Go to a string starting with &lt;code&gt;se&lt;/code&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/139459219-8a7e6ac4-1d24-4008-a370-b56773d7cb85.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;GUI-style notification with nvim-notify&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128589873-aadb8264-1098-4834-9876-fa66a309be05.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;code folding with nvim-ufo and statuscol.nvim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/a01a56b2-7c91-43de-b305-f2fbaa81dcec&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Shortcuts&lt;/h1&gt; 
&lt;p&gt;Some of the shortcuts I use frequently are listed here. In the following shortcuts, &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; represents ASCII character &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Shortcut&lt;/th&gt; 
   &lt;th&gt;Mode&lt;/th&gt; 
   &lt;th&gt;platform&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ff&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy file searching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy help file grepping in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fg&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy project-wide grepping in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ft&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy buffer tag searching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy buffer switching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;Space&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Remove trailing white spaces&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Reselect last pasted text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ev&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Edit Nvim config in a new tabpage&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;sv&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Reload Nvim config&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;st&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Show highlight group for cursor text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Quit current window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;Q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Quit all window and close Nvim&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Save current buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Copy the content of entire buffer to default register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle cursor column&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Change current working directory to to the dir of current buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;space&amp;gt;t&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle tag window (show project tags in the right window)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Show Git status result&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gw&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run Git add for current file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git commit&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gpl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git pull&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gpu&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git push&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Delete a branch&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbn&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Create a new branch&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal/Visual&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Get perm link for current/visually-select lines&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;Browse current git repo in browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Visual&lt;/td&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;Blame current line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F9&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Compile&amp;amp;run current source file (for C++, LaTeX, Lua, Python)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F11&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle spell checking&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F12&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle paste mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;\x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Close location or quickfix window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Close current buffer and go to previous buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;{count}gb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Go to buffer &lt;code&gt;{count}&lt;/code&gt; or next buffer in the buffer list.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;{operator}iB&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Operate in the whole buffer, &lt;code&gt;{operator}&lt;/code&gt; can be &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-k&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Move current line or selected lines up&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-j&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Move current line or selected lines down&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-m&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS/Win&lt;/td&gt; 
   &lt;td&gt;Markdown previewing in system browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-Shift-m&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS/Win&lt;/td&gt; 
   &lt;td&gt;Stopping Markdown previewing in system browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ctrl-u&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Turn word under cursor to upper case&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ctrl-t&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Turn word under cursor to title case&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;jk&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Return to Normal mode without lagging&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Custom commands&lt;/h1&gt; 
&lt;p&gt;In addition to commands provided by various plugins, I have also created some custom commands for personal use.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;command&lt;/th&gt; 
   &lt;th&gt;description&lt;/th&gt; 
   &lt;th&gt;example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Redir&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;capture command output to a tabpage for easier inspection.&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Redir hi&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Edit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;edit multiple files at the same time, supports globing&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Edit *.vim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Datetime&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;print current date and time or convert Unix time stamp to date and time&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Datetime 12345&lt;/code&gt; or &lt;code&gt;Datetime&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JSONFormat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;format a JSON file&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;JSONFormat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CopyPath&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;copy current file path to clipboard&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;CopyPath relative&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you find anything that needs improving, do not hesitate to point it out or create a PR.&lt;/p&gt; 
&lt;p&gt;If you come across an issue, you can first use &lt;code&gt;:checkhealth&lt;/code&gt; command provided by &lt;code&gt;nvim&lt;/code&gt; to trouble-shoot yourself. Please read carefully the messages provided by health check.&lt;/p&gt; 
&lt;p&gt;If you still have an issue, &lt;a href=&quot;https://github.com/jdhao/nvim-config/issues&quot;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Further readings&lt;/h1&gt; 
&lt;p&gt;Some of the resources that I find helpful in mastering Nvim is documented &lt;a href=&quot;https://raw.githubusercontent.com/jdhao/nvim-config/main/docs/nvim_resources.md&quot;&gt;here&lt;/a&gt;. You may also be interested in my posts on configuring Nvim:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;My nvim notes can be found &lt;a href=&quot;https://jdhao.github.io/categories/Nvim/&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2021/12/31/using_nvim_after_three_years/&quot;&gt;Using Neovim for Three years&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/&quot;&gt;Config nvim on Linux for Python development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2018/11/15/neovim_configuration_windows/&quot;&gt;Nvim config on Windows 10&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/&quot;&gt;Nvim-qt config on Windows 10&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hekili/hekili</title>
      <link>https://github.com/Hekili/hekili</link>
      <description>&lt;p&gt;Hekili Priority Helper for DPS and Tanks (WoW Retail)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hekili&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Hekili&lt;/strong&gt; is a powerful, highly configurable &lt;strong&gt;priority helper&lt;/strong&gt; for &lt;strong&gt;World of Warcraft&lt;/strong&gt;. It supports &lt;strong&gt;all üó°Ô∏èDPS and üõ°Ô∏èTank specializations&lt;/strong&gt;. ‚ûïHealer specializations are supported with a focus on &lt;strong&gt;DPS abilities&lt;/strong&gt;, great for solo content or downtime during PvE.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Hekili/hekili/releases/latest&quot;&gt;‚û°Ô∏è Latest Release&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® What Does It Do?&lt;/h2&gt; 
&lt;p&gt;Hekili helps you play more effectively by recommending which abilities to use during combat.&lt;/p&gt; 
&lt;p&gt;Its &lt;strong&gt;key feature&lt;/strong&gt; is the display of multiple upcoming sequential actions, allowing you to plan ahead instead of reacting to a single, constantly changing icon. This approach reduces tunnel vision and helps you stay focused on the encounter itself.&lt;/p&gt; 
&lt;p&gt;These recommendations are provided using &lt;strong&gt;Action Priority List (APL) logic&lt;/strong&gt; inherited from &lt;a href=&quot;https://www.simulationcraft.org&quot;&gt;&lt;strong&gt;SimulationCraft&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.raidbots.com/simbot&quot;&gt;&lt;strong&gt;RaidBots&lt;/strong&gt;&lt;/a&gt;. This integration helps ensure consistency between your in-game decisions and the tools you already use to optimize talents, gear, and stats. APLs are &lt;strong&gt;frequently updated&lt;/strong&gt; to reflect changes in class balance, mechanics, and theorycrafting.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hekili&lt;/strong&gt; can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Increase your damage output&lt;/li&gt; 
 &lt;li&gt;Learn and master new specializations&lt;/li&gt; 
 &lt;li&gt;Improve consistency and compare your decisions against theorycrafted simulations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üîß How Does It Work?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Hekili&lt;/strong&gt; uses your current character state ‚Äî including cooldowns, resources, buffs/debuffs, and enemies nearby ‚Äî to &lt;strong&gt;simulate several spells into the future&lt;/strong&gt; using your spec‚Äôs APL logic. It assumes you follow its recommendations in sequence.&lt;/p&gt; 
&lt;p&gt;If you cast something else, the addon &lt;strong&gt;immediately re-evaluates&lt;/strong&gt; your game state and updates its suggestions in real time.&lt;/p&gt; 
&lt;p&gt;Other features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Optional Separate Displays for: 
  &lt;ul&gt; 
   &lt;li&gt;AoE abilities&lt;/li&gt; 
   &lt;li&gt;Cooldowns&lt;/li&gt; 
   &lt;li&gt;Defensives&lt;/li&gt; 
   &lt;li&gt;Interrupts 
    &lt;ul&gt; 
     &lt;li&gt;Guides you to interrupt late in the enemy cast&lt;/li&gt; 
     &lt;li&gt;Filter recommendations to Mythic+ priority spells&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Toggle controls for cooldowns, defensives, interrupts, potions: 
  &lt;ul&gt; 
   &lt;li&gt;You can manually control whether major abilities like 2-minute cooldowns are used by enabling or disabling toggle options.&lt;/li&gt; 
   &lt;li&gt;These toggles can be bound to hotkeys or macros, giving you flexible control on a fight-by-fight basis.&lt;/li&gt; 
   &lt;li&gt;Rather than using the toggles, you can display these abilities in a dedicated Cooldowns display, allowing you to cast them manually when timing is ideal.&lt;/li&gt; 
   &lt;li&gt;This system is especially powerful when paired with encounter knowledge ‚Äî for example, holding cooldowns for a burn phase or add wave can result in substantial DPS gains.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Compatible with &lt;strong&gt;ElvUI&lt;/strong&gt;, &lt;strong&gt;Bartender&lt;/strong&gt;, and other UI mods&lt;/li&gt; 
 &lt;li&gt;Customization 
  &lt;ul&gt; 
   &lt;li&gt;Choose from several display styles to match your needs ‚Äî from a single Automatic display to AoE-specific or dual-display setups&lt;/li&gt; 
   &lt;li&gt;Tailor the look and feel: adjust icon size, spacing, layout, fonts, and transparency&lt;/li&gt; 
   &lt;li&gt;Show spell keybindings on icons, or swap out the default icon for another spell or texture&lt;/li&gt; 
   &lt;li&gt;Disable individual abilities to fit your playstyle ‚Äî for example, if you prefer to macro an on-use trinket into your cooldown, you can hide that trinket from the queue entirely&lt;/li&gt; 
   &lt;li&gt;Advanced users can edit or create their own action lists using familiar &lt;strong&gt;SimulationCraft-style syntax&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;h3&gt;1. &lt;strong&gt;Install the Addon&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;There are two main ways to install &lt;strong&gt;Hekili&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Addon Managers&lt;/strong&gt; (recommended): Automatically install and keep the addon up to date&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manual Download&lt;/strong&gt;: Install it yourself from &lt;a href=&quot;https://github.com/Hekili/hekili/releases/latest&quot;&gt;&lt;strong&gt;GitHub Releases&lt;/strong&gt;&lt;/a&gt; by extracting the &lt;code&gt;.zip&lt;/code&gt; to &lt;code&gt;Interface/AddOns&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Recommended Addon Managers&lt;/h4&gt; 
&lt;p&gt;Because &lt;strong&gt;Hekili&lt;/strong&gt; is frequently updated, we suggest using one of these trusted tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.curseforge.com/download&quot;&gt;&lt;strong&gt;CurseForge&lt;/strong&gt;&lt;/a&gt; ‚Äì A widely used manager for all types of addons. We recommend the standalone desktop version for Windows or macOS to avoid extra overlays.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://addons.wago.io/download&quot;&gt;&lt;strong&gt;Wago App&lt;/strong&gt;&lt;/a&gt; ‚Äì Ideal if you also use &lt;strong&gt;WeakAuras&lt;/strong&gt;, &lt;strong&gt;Plater scripts&lt;/strong&gt;, or other Wago-hosted content.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wowup.io/&quot;&gt;&lt;strong&gt;WowUp&lt;/strong&gt;&lt;/a&gt; ‚Äì Supports both &lt;strong&gt;CurseForge&lt;/strong&gt; and &lt;strong&gt;Wago&lt;/strong&gt; backends, and includes its own addon library. We suggest using the &lt;strong&gt;CurseForge&lt;/strong&gt; version unless you use another tool to manage your WeakAuras.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AcidWeb/CurseBreaker&quot;&gt;&lt;strong&gt;CurseBreaker&lt;/strong&gt;&lt;/a&gt; (for üí™ power users) ‚Äì A lightweight command-line interface (CLI) tool that supports &lt;strong&gt;Wago&lt;/strong&gt;, &lt;strong&gt;WoWInterface&lt;/strong&gt;, &lt;strong&gt;Tukui&lt;/strong&gt;, &lt;strong&gt;ElvUI&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt;, and more. No extra setup is needed for &lt;strong&gt;WoWInterface&lt;/strong&gt;-based updates.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. Configure In-Game&lt;/h3&gt; 
&lt;p&gt;Use the minimap icon or the command: &lt;code&gt;/hekili&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;üõ† Need Help?&lt;/h2&gt; 
&lt;h3&gt;üêõ Bug Reports&lt;/h3&gt; 
&lt;p&gt;If something isn‚Äôt working:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://www.curseforge.com/wow/addons/bugsack&quot;&gt;&lt;strong&gt;BugSack&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.curseforge.com/wow/addons/bug-grabber&quot;&gt;&lt;strong&gt;BugGrabber&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Reproduce the issue, generate a &lt;a href=&quot;https://github.com/Hekili/hekili/wiki/Report-An-Issue#how-do-i-get-a-snapshot&quot;&gt;&lt;strong&gt;snapshot&lt;/strong&gt;&lt;/a&gt;, then open BugSack to check for LUA errors&lt;/li&gt; 
 &lt;li&gt;Submit a report on the &lt;a href=&quot;https://github.com/Hekili/hekili/issues/new/choose&quot;&gt;&lt;strong&gt;Issues page&lt;/strong&gt;&lt;/a&gt;, be sure to include your newly acquired snapshot and LUA errors (if applicable)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;‚ùì Other Support&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the &lt;a href=&quot;https://github.com/Hekili/hekili/wiki&quot;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ask questions in the &lt;a href=&quot;https://discord.gg/3cCTFxM&quot;&gt;&lt;strong&gt;Hekili Discord&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üôè Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on logic from &lt;a href=&quot;https://www.simulationcraft.org/&quot;&gt;&lt;strong&gt;SimulationCraft&lt;/strong&gt;&lt;/a&gt;, which is maintained by many wonderful developers and theorycrafters&lt;/li&gt; 
 &lt;li&gt;Uses libraries like &lt;a href=&quot;https://www.wowace.com/projects/ace3&quot;&gt;&lt;strong&gt;Ace3&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.wowace.com/projects/librangecheck-2-0&quot;&gt;&lt;strong&gt;LibRangeCheck&lt;/strong&gt;&lt;/a&gt;, and others&lt;/li&gt; 
 &lt;li&gt;Maintained by &lt;a href=&quot;https://github.com/Hekili&quot;&gt;&lt;strong&gt;Hekili&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/syrifgit&quot;&gt;&lt;strong&gt;Syrif&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/johnnylam88&quot;&gt;&lt;strong&gt;Nerien&lt;/strong&gt;&lt;/a&gt; and lots of help from our community contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üß™ Developer Notes&lt;/h2&gt; 
&lt;p&gt;If you&#39;re working on custom spec modules, improving existing logic, or contributing to the addon‚Äôs development:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the &lt;a href=&quot;https://github.com/Hekili/hekili/wiki/Developer-Stuff&quot;&gt;&lt;strong&gt;Developer Stuff&lt;/strong&gt;&lt;/a&gt; page&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;/hekili&lt;/code&gt; and the Snapshots tab to inspect live decision-making&lt;/li&gt; 
 &lt;li&gt;Review existing and past &lt;a href=&quot;https://github.com/Hekili/hekili/pulls&quot;&gt;&lt;strong&gt;Pull Requsts&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Review existing and past &lt;a href=&quot;https://github.com/Hekili/hekili/issues&quot;&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd#installation&quot;&gt;fd-find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ÔΩú AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;&lt;a href=&quot;https://apisix.apache.org/ai-gateway/&quot;&gt;AI Gateway&lt;/a&gt;&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents. APISIX also provides the &lt;a href=&quot;https://apisix.apache.org/blog/2025/04/21/host-mcp-server-with-api-gateway/&quot;&gt;&lt;code&gt;mcp-bridge&lt;/code&gt;&lt;/a&gt; plugin to seamlessly convert stdio-based MCP servers to scalable HTTP SSE services.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot; /&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway ‚Äì Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>echasnovski/mini.nvim</title>
      <link>https://github.com/echasnovski/mini.nvim</link>
      <description>&lt;p&gt;Library of 40+ independent Lua modules improving overall Neovim (version 0.9 and higher) experience with minimal effort&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/logo.png&quot; alt=&quot;mini.nvim&quot; /&gt; 
&lt;/div&gt; 
&lt;!-- badges: start --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://badgen.net/github/license/echasnovski/mini.nvim&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/tags/&quot;&gt;&lt;img src=&quot;https://badgen.net/github/tag/echasnovski/mini.nvim&quot; alt=&quot;GitHub tag&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/CHANGELOG.md&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Current%20version/development/cyan&quot; alt=&quot;Current version&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- badges: end --&gt; 
&lt;p&gt;Library of 40+ independent Lua modules improving overall &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; (version 0.9 and higher) experience with minimal effort. They all share same configuration approaches and general design principles.&lt;/p&gt; 
&lt;p&gt;Think about this project as &quot;Swiss Army knife&quot; among Neovim plugins: it has many different independent tools (modules) suitable for most common tasks. Each module can be used separately without any startup and usage overhead.&lt;/p&gt; 
&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/CONTRIBUTING.md&quot;&gt;contributing guides&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#general-principles&quot;&gt;General principles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#plugin-colorschemes&quot;&gt;Plugin colorschemes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#planned-modules&quot;&gt;Planned modules&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are two branches to install from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here are code snippets for some common installation methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Manually with &lt;code&gt;git clone&lt;/code&gt; (compatible with &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Put this at the top of &#39;init.lua&#39;
local path_package = vim.fn.stdpath(&#39;data&#39;) .. &#39;/site&#39;
local mini_path = path_package .. &#39;/pack/deps/start/mini.nvim&#39;
if not vim.loop.fs_stat(mini_path) then
  vim.cmd(&#39;echo &quot;Installing `mini.nvim`&quot; | redraw&#39;)
  local clone_cmd = {
    &#39;git&#39;, &#39;clone&#39;, &#39;--filter=blob:none&#39;,
    -- Uncomment next line to use &#39;stable&#39; branch
    -- &#39;--branch&#39;, &#39;stable&#39;,
    &#39;https://github.com/echasnovski/mini.nvim&#39;, mini_path
  }
  vim.fn.system(clone_cmd)
  vim.cmd(&#39;packadd mini.nvim | helptags ALL&#39;)
  vim.cmd(&#39;echo &quot;Installed `mini.nvim`&quot; | redraw&#39;)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Code snippet&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Main&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Code snippet&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Main&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every module is also distributed as a standalone Git repository. Check out module&#39;s information for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call module&#39;s &lt;code&gt;setup()&lt;/code&gt; (if required) to enable its functionality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; 
 &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;&#39;mini.nvim&#39; contains many modules which is slightly daunting at first. All of them can be used independently, one at a time. For easier exploration, here they are presented in groups based on module&#39;s primary functionality (although some modules can fit in several groups).&lt;/p&gt; 
&lt;h3&gt;Text editing&lt;/h3&gt; 
&lt;p&gt;These modules improve your text editing experience. Start with &#39;mini.ai&#39;, &#39;mini.operators&#39;, and &#39;mini.surround&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.ai&lt;/td&gt; 
   &lt;td&gt;Extend and create &lt;code&gt;a&lt;/code&gt;/&lt;code&gt;i&lt;/code&gt; textobjects&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-ai.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-ai.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.align&lt;/td&gt; 
   &lt;td&gt;Align text interactively&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-align.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-align.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.comment&lt;/td&gt; 
   &lt;td&gt;Comment lines&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-comment.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-comment.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.completion&lt;/td&gt; 
   &lt;td&gt;Completion and signature help&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-completion.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-completion.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.keymap&lt;/td&gt; 
   &lt;td&gt;Special key mappings&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-keymap.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-keymap.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.move&lt;/td&gt; 
   &lt;td&gt;Move any selection in any direction&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-move.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-move.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.operators&lt;/td&gt; 
   &lt;td&gt;Text edit operators&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-operators.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-operators.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.pairs&lt;/td&gt; 
   &lt;td&gt;Autopairs&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-pairs.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-pairs.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.snippets&lt;/td&gt; 
   &lt;td&gt;Manage and expand snippets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-snippets.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-snippets.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.splitjoin&lt;/td&gt; 
   &lt;td&gt;Split and join arguments&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-splitjoin.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-splitjoin.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.surround&lt;/td&gt; 
   &lt;td&gt;Surround actions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-surround.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-surround.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;General workflow&lt;/h3&gt; 
&lt;p&gt;These modules improve your general workflow. Start with &#39;mini.bracketed&#39;, &#39;mini.files&#39;, and &#39;mini.pick&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.basics&lt;/td&gt; 
   &lt;td&gt;Common configuration presets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-basics.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-basics.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.bracketed&lt;/td&gt; 
   &lt;td&gt;Go forward/backward with square brackets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-bracketed.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-bracketed.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.bufremove&lt;/td&gt; 
   &lt;td&gt;Remove buffers&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-bufremove.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-bufremove.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.clue&lt;/td&gt; 
   &lt;td&gt;Show next key clues&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-clue.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-clue.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.deps&lt;/td&gt; 
   &lt;td&gt;Plugin manager&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-deps.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-deps.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.diff&lt;/td&gt; 
   &lt;td&gt;Work with diff hunks&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-diff.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-diff.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.extra&lt;/td&gt; 
   &lt;td&gt;Extra &#39;mini.nvim&#39; functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-extra.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-extra.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.files&lt;/td&gt; 
   &lt;td&gt;Navigate and manipulate file system&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-files.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-files.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.git&lt;/td&gt; 
   &lt;td&gt;Git integration&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-git.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-git.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.jump&lt;/td&gt; 
   &lt;td&gt;Jump to next/previous single character&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-jump.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-jump.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.jump2d&lt;/td&gt; 
   &lt;td&gt;Jump within visible lines&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-jump2d.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-jump2d.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.misc&lt;/td&gt; 
   &lt;td&gt;Miscellaneous functions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-misc.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-misc.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.pick&lt;/td&gt; 
   &lt;td&gt;Pick anything&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-pick.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-pick.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.sessions&lt;/td&gt; 
   &lt;td&gt;Session management&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-sessions.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-sessions.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.visits&lt;/td&gt; 
   &lt;td&gt;Track and reuse file system visits&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-visits.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-visits.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Appearance&lt;/h3&gt; 
&lt;p&gt;These modules improve your Neovim appearance. Start with &#39;mini.hues&#39;, &#39;mini.icons&#39;, and &#39;mini.statusline&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.animate&lt;/td&gt; 
   &lt;td&gt;Animate common Neovim actions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-animate.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-animate.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.base16&lt;/td&gt; 
   &lt;td&gt;Base16 colorscheme creation&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-base16.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.colors&lt;/td&gt; 
   &lt;td&gt;Tweak and save any color scheme&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-colors.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-colors.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.cursorword&lt;/td&gt; 
   &lt;td&gt;Autohighlight word under cursor&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-cursorword.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-cursorword.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.hipatterns&lt;/td&gt; 
   &lt;td&gt;Highlight patterns in text&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hipatterns.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-hipatterns.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.hues&lt;/td&gt; 
   &lt;td&gt;Generate configurable color scheme&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-hues.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.icons&lt;/td&gt; 
   &lt;td&gt;Icon provider&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-icons.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-icons.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.indentscope&lt;/td&gt; 
   &lt;td&gt;Visualize and work with indent scope&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-indentscope.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-indentscope.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.map&lt;/td&gt; 
   &lt;td&gt;Window with buffer text overview&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-map.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-map.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.notify&lt;/td&gt; 
   &lt;td&gt;Show notifications&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-notify.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-notify.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.starter&lt;/td&gt; 
   &lt;td&gt;Start screen&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-starter.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-starter.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.statusline&lt;/td&gt; 
   &lt;td&gt;Statusline&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-statusline.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-statusline.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.tabline&lt;/td&gt; 
   &lt;td&gt;Tabline&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-tabline.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-tabline.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.trailspace&lt;/td&gt; 
   &lt;td&gt;Trailspace (highlight and remove)&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-trailspace.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-trailspace.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Other&lt;/h3&gt; 
&lt;p&gt;These modules don&#39;t quite fit in any of the previous categories.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.doc&lt;/td&gt; 
   &lt;td&gt;Generate Neovim help files&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-doc.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-doc.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.fuzzy&lt;/td&gt; 
   &lt;td&gt;Fuzzy matching&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-fuzzy.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-fuzzy.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.test&lt;/td&gt; 
   &lt;td&gt;Test Neovim plugins&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-test.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-test.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;General principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Design&lt;/strong&gt;. Each module is designed to solve a particular problem targeting balance between feature-richness (handling as many edge-cases as possible) and simplicity of implementation/support. Granted, not all of them ended up with the same balance, but it is the goal nevertheless.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Independence&lt;/strong&gt;. Modules are independent of each other and can be run without external dependencies. Although some of them may need dependencies for full experience.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structure&lt;/strong&gt;. Each module is a submodule for a placeholder &quot;mini&quot; module. So, for example, &quot;surround&quot; module should be referred to as &quot;mini.surround&quot;. As later will be explained, this plugin can also be referred to as &quot;MiniSurround&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Each module you want to use should be enabled separately with &lt;code&gt;require(&amp;lt;name of module&amp;gt;).setup({})&lt;/code&gt;. Possibly replace &lt;code&gt;{}&lt;/code&gt; with your config table or omit altogether to use defaults. You can supply only parts of config, the rest will be inferred from defaults.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Call to module&#39;s &lt;code&gt;setup()&lt;/code&gt; always creates a global Lua object with coherent camel-case name: &lt;code&gt;require(&#39;mini.surround&#39;).setup()&lt;/code&gt; creates &lt;code&gt;_G.MiniSurround&lt;/code&gt;. This allows for a simpler usage of plugin functionality: instead of &lt;code&gt;require(&#39;mini.surround&#39;)&lt;/code&gt; use &lt;code&gt;MiniSurround&lt;/code&gt; (or manually &lt;code&gt;:lua MiniSurround.*&lt;/code&gt; in command line); available from &lt;code&gt;v:lua&lt;/code&gt; like &lt;code&gt;v:lua.MiniSurround&lt;/code&gt;. Considering this, &quot;module&quot; and &quot;Lua object&quot; names can be used interchangeably: &#39;mini.surround&#39; and &#39;MiniSurround&#39; will mean the same thing.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Each supplied &lt;code&gt;config&lt;/code&gt; table is stored in &lt;code&gt;config&lt;/code&gt; field of global object. Like &lt;code&gt;MiniSurround.config&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Values of &lt;code&gt;config&lt;/code&gt; which affect runtime activity can be changed on the fly to have effect. For example, &lt;code&gt;MiniSurround.config.n_lines&lt;/code&gt; can be changed during runtime; but changing &lt;code&gt;MiniSurround.config.mappings&lt;/code&gt; won&#39;t have any effect (as mappings are created once during &lt;code&gt;setup()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;If module works best with some specific non-default option value, it is set during &lt;code&gt;setup()&lt;/code&gt;. If the value is not essential to module&#39;s functionality, it is done only if user or another plugin hasn&#39;t set it beforehand (no matter the value).&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Buffer local configuration&lt;/strong&gt;. Each module can be additionally configured to use certain runtime config settings locally to buffer. See &lt;code&gt;mini.nvim-buffer-local-config&lt;/code&gt; section in help file for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Buffer names&lt;/strong&gt;. All module-related buffers are named according to the following format: &lt;code&gt;mini&amp;lt;module-name&amp;gt;://&amp;lt;buffer-number&amp;gt;/&amp;lt;useful-info&amp;gt;&lt;/code&gt; (forward slashes are used on any platform; &lt;code&gt;&amp;lt;useful-info&amp;gt;&lt;/code&gt; may be empty). This structure allows creating identifiable, reasonably unique, and useful buffer names. For example, &#39;mini.files&#39; buffers are created per displayed directory/file with names like &lt;code&gt;minifiles://10/path/to/displayed/directory&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disabling&lt;/strong&gt;. Each module&#39;s core functionality can be disabled globally or locally to buffer. See &quot;Disabling&quot; section in module&#39;s help page for more details. See &lt;code&gt;mini.nvim-disabling-recipes&lt;/code&gt; section in main help file for common recipes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silencing&lt;/strong&gt;. Each module providing non-error feedback can be configured to not do that by setting &lt;code&gt;config.silent = true&lt;/code&gt; (either inside &lt;code&gt;setup()&lt;/code&gt; call or on the fly).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highlighting&lt;/strong&gt;. Appearance of module&#39;s output is controlled by certain set of highlight groups (see &lt;code&gt;:h highlight-groups&lt;/code&gt;). By default they usually link to some semantically close built-in highlight group and are ensured to be defined after any color scheme takes effect. Use &lt;code&gt;:highlight&lt;/code&gt; command or &lt;code&gt;vim.api.nvim_set_hl()&lt;/code&gt; Lua function to customize highlighting. To see a more calibrated look, use &#39;mini.hues&#39;, &#39;mini.base16&#39;, or plugin&#39;s color scheme.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability&lt;/strong&gt;. Each module upon release is considered to be relatively stable: both in terms of setup and functionality. Any non-bugfix backward-incompatible change will be released gradually as much as possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Not filetype/language specific&lt;/strong&gt;. Including functionality which needs several filetype/language specific implementations is an explicit no-goal of this project. This is mostly due to the potential increase in maintenance to keep implementation up to date. However, any part which might need filetype/language specific tuning should be designed to allow it by letting user set proper buffer options and/or local configuration.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Plugin color schemes&lt;/h2&gt; 
&lt;p&gt;This plugin comes with several color schemes (all have both dark and light variants). Activate any of them as a regular &lt;code&gt;colorscheme&lt;/code&gt; (like &lt;code&gt;:colorscheme miniwinter&lt;/code&gt; or &lt;code&gt;vim.cmd.colorscheme(&#39;miniwinter&#39;)&lt;/code&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Based on &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md&quot;&gt;&#39;mini.hues&#39;&lt;/a&gt; (recommended):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;miniwinter&lt;/code&gt;: &quot;icy winter&quot; palette with azure background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minispring&lt;/code&gt;: &quot;blooming spring&quot; palette with green background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minisummer&lt;/code&gt;: &quot;hot summer&quot; palette with brown/yellow background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;miniautumn&lt;/code&gt;: &quot;cooling autumn&quot; palette with purple background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;randomhue&lt;/code&gt;: random background and foreground of the same hue with medium saturation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can see how they look in &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md#bundled-color-schemes&quot;&gt;&#39;mini.hues&#39; README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Based on &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md&quot;&gt;&#39;mini.base16&#39;&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;minicyan&lt;/code&gt;: cyan and grey main colors with medium contrast and saturation palette.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minischeme&lt;/code&gt;: blue and yellow main colors with high contrast and saturation palette.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can see how they look in &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md#demo&quot;&gt;&#39;mini.base16&#39; README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Planned modules&lt;/h2&gt; 
&lt;p&gt;This is the list of modules I currently intend to implement eventually (as my free time and dedication will allow), in alphabetical order:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&#39;mini.abbrev&#39; - helper to manage/setup Insert mode abbreviations.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.cmdline&#39; - improved Command line. Possibly with custom &lt;code&gt;vim.ui.input&lt;/code&gt; implementation.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.cycle&#39; - cycle through alternatives with pre-defined rules. Something like &lt;a href=&quot;https://github.com/monaqa/dial.nvim&quot;&gt;monaqa/dial.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/AndrewRadev/switch.vim&quot;&gt;AndrewRadev/switch.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&#39;mini.folds&#39; - more capable and user-friendly folds.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.repl&#39; - extendable wrapper for REPLs with built-in support for R, Python, Julia, and maybe (just maybe) some AI tools.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.sendtext&#39; - send text between buffers. In particular between regular and built-in terminal buffers.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.statuscolumn&#39; - customizable &#39;statuscolumn&#39;.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.terminals&#39; - coherently manage interactive terminal buffers. Something like &lt;a href=&quot;https://github.com/kassio/neoterm&quot;&gt;kassio/neoterm&lt;/a&gt;. Might also incorporate functionality to asynchronously run code in shell with post-processed results.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.quickfix&#39; - more capable and user-friendly quickfix list. Possibly with preview and inline editing for search-and-replace workflow.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.windows&#39; - window manager. Interactive picker, layout organizer, and maybe more.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>sindrets/diffview.nvim</title>
      <link>https://github.com/sindrets/diffview.nvim</link>
      <description>&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffview.nvim&lt;/h1&gt; 
&lt;p&gt;Single tabpage interface for easily cycling through diffs for all modified files for any git rev.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/131269942-e34100dd-cbb9-48fe-af31-6e518ce06e9e.png&quot; alt=&quot;preview&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Vim&#39;s diff mode is pretty good, but there is no convenient way to quickly bring up all modified files in a diffsplit. This plugin aims to provide a simple, unified, single tabpage interface that lets you easily review all changed files for any git rev.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git ‚â• 2.31.0 (for Git support)&lt;/li&gt; 
 &lt;li&gt;Mercurial ‚â• 5.4.0 (for Mercurial support)&lt;/li&gt; 
 &lt;li&gt;Neovim ‚â• 0.7.0 (with LuaJIT)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; (optional) For file icons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager of choice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Plug
Plug &#39;sindrets/diffview.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Packer
use &quot;sindrets/diffview.nvim&quot; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Merge Tool&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188286293-13bbf0ab-3595-425d-ba4a-12f514c17eb6.png&quot; alt=&quot;merge tool showcase&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Opening a diff view during a merge or a rebase will list the conflicted files in their own section. When opening a conflicted file, it will open in a 3-way diff allowing you to resolve the merge conflicts with the context of the target branch&#39;s version, as well as the version from the branch which is being merged.&lt;/p&gt; 
&lt;p&gt;The 3-way diff is only the default layout for merge conflicts. There are multiple variations on this layout, a 4-way diff layout, and a single window layout available.&lt;/p&gt; 
&lt;p&gt;In addition to the normal &lt;code&gt;:h copy-diffs&lt;/code&gt; mappings, there are default mappings provided for jumping between conflict markers, obtaining a hunk directly from any of the diff buffers, and accepting any one, all, or none of the versions of a file given by a conflict region.&lt;/p&gt; 
&lt;p&gt;For more information on the merge tool, mappings, layouts and how to configure them, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-merge-tool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-view.x.layout&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;File History&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2786478/188331057-f9ec9a0d-8cda-4ff8-ac98-febcc7aa4010.png&quot; alt=&quot;file history showcase&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The file history view allows you to list all the commits that affected a given set of paths, and view the changes made in a diff split. This is a porcelain interface for git-log, and supports a good number of its options. Things like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Filtering commits by grepping commit messages and commit authors.&lt;/li&gt; 
 &lt;li&gt;Tracing the line evolution of a given set of line ranges for multiple files.&lt;/li&gt; 
 &lt;li&gt;Only listing changes for a specific commit range, branch, or tag.&lt;/li&gt; 
 &lt;li&gt;Following file changes through renames.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get started by opening file history for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The current branch: &lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The current file: &lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more info, see &lt;code&gt;:h :DiffviewFileHistory&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;:DiffviewOpen [git rev] [options] [ -- {paths...}]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Calling &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no args opens a new Diffview that compares against the current index. You can also provide any valid git rev to view only changes for that rev.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~4..HEAD~2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d^!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen d4a7b0d..519b30e&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen origin/main...HEAD&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also provide additional paths to narrow down what files are shown:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewOpen HEAD~2 -- lua/diffview plugin&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For information about additional &lt;code&gt;[options]&lt;/code&gt;, visit the &lt;a href=&quot;https://github.com/sindrets/diffview.nvim/raw/main/doc/diffview.txt&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additional commands for convenience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewClose&lt;/code&gt;: Close the current diffview. You can also use &lt;code&gt;:tabclose&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewToggleFiles&lt;/code&gt;: Toggle the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFocusFiles&lt;/code&gt;: Bring focus to the file panel.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewRefresh&lt;/code&gt;: Update stats and entries in the file list of the current Diffview.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With a Diffview open and the default key bindings, you can cycle through changed files with &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;s-tab&amp;gt;&lt;/code&gt; (see configuration to change the key bindings).&lt;/p&gt; 
&lt;h4&gt;Staging&lt;/h4&gt; 
&lt;p&gt;You can stage individual hunks by editing any buffer that represents the index (after running &lt;code&gt;:DiffviewOpen&lt;/code&gt; with no &lt;code&gt;[git-rev]&lt;/code&gt; the entries under &quot;Changes&quot; will have the index buffer on the left side, and the entries under &quot;Staged changes&quot; will have it on the right side). Once you write to an index buffer the index will be updated.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;:[range]DiffviewFileHistory [paths] [options]&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Opens a new file history view that lists all commits that affected the given paths. This is a porcelain interface for git-log. Both &lt;code&gt;[paths]&lt;/code&gt; and &lt;code&gt;[options]&lt;/code&gt; may be specified in any order, even interchangeably.&lt;/p&gt; 
&lt;p&gt;If no &lt;code&gt;[paths]&lt;/code&gt; are given, defaults to the top-level of the working tree. The top-level will be inferred from the current buffer when possible, otherwise the cwd is used. Multiple &lt;code&gt;[paths]&lt;/code&gt; may be provided and git pathspec is supported.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;[range]&lt;/code&gt; is given, the file history view will trace the line evolution of the given range in the current file (for more info, see the &lt;code&gt;-L&lt;/code&gt; flag in the docs).&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory %&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/file.txt&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory path/to/some/directory&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory include/this and/this :!but/not/this&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=origin..HEAD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:DiffviewFileHistory --range=feat/example-branch&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;DiffviewFileHistory&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;h3&gt;Familiarize Yourself With &lt;code&gt;:h diff-mode&lt;/code&gt;&lt;/h3&gt; 
 &lt;p&gt;This plugin assumes you&#39;re familiar with all the features already provided by nvim&#39;s builtin diff-mode. These features include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Jumping between hunks (&lt;code&gt;:h jumpto-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;Applying the changes of a diff hunk from any of the diffed buffers (&lt;code&gt;:h copy-diffs&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;And more...&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Read the help page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;br /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Additionally check out &lt;a href=&quot;https://raw.githubusercontent.com/sindrets/diffview.nvim/main/USAGE.md&quot;&gt;USAGE&lt;/a&gt; for examples of some more specific use-cases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br /&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt; &lt;/p&gt;
&lt;details&gt; 
 &lt;summary style=&quot;cursor: pointer&quot;&gt;&lt;b&gt;Example config with default values&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
local actions = require(&quot;diffview.actions&quot;)

require(&quot;diffview&quot;).setup({
  diff_binaries = false,    -- Show diffs for binaries
  enhanced_diff_hl = false, -- See |diffview-config-enhanced_diff_hl|
  git_cmd = { &quot;git&quot; },      -- The git executable followed by default args.
  hg_cmd = { &quot;hg&quot; },        -- The hg executable followed by default args.
  use_icons = true,         -- Requires nvim-web-devicons
  show_help_hints = true,   -- Show hints for how to open the help panel
  watch_index = true,       -- Update views and index buffers when the git index changes.
  icons = {                 -- Only applies when use_icons is true.
    folder_closed = &quot;Óóø&quot;,
    folder_open = &quot;Óóæ&quot;,
  },
  signs = {
    fold_closed = &quot;Ôë†&quot;,
    fold_open = &quot;Ôëº&quot;,
    done = &quot;‚úì&quot;,
  },
  view = {
    -- Configure the layout and behavior of different types of views.
    -- Available layouts:
    --  &#39;diff1_plain&#39;
    --    |&#39;diff2_horizontal&#39;
    --    |&#39;diff2_vertical&#39;
    --    |&#39;diff3_horizontal&#39;
    --    |&#39;diff3_vertical&#39;
    --    |&#39;diff3_mixed&#39;
    --    |&#39;diff4_mixed&#39;
    -- For more info, see |diffview-config-view.x.layout|.
    default = {
      -- Config for changed files, and staged files in diff views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
    merge_tool = {
      -- Config for conflicted files in diff views during a merge or rebase.
      layout = &quot;diff3_horizontal&quot;,
      disable_diagnostics = true,   -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = true,           -- See |diffview-config-view.x.winbar_info|
    },
    file_history = {
      -- Config for changed files in file history views.
      layout = &quot;diff2_horizontal&quot;,
      disable_diagnostics = false,  -- Temporarily disable diagnostics for diff buffers while in the view.
      winbar_info = false,          -- See |diffview-config-view.x.winbar_info|
    },
  },
  file_panel = {
    listing_style = &quot;tree&quot;,             -- One of &#39;list&#39; or &#39;tree&#39;
    tree_options = {                    -- Only applies when listing_style is &#39;tree&#39;
      flatten_dirs = true,              -- Flatten dirs that only contain one single dir
      folder_statuses = &quot;only_folded&quot;,  -- One of &#39;never&#39;, &#39;only_folded&#39; or &#39;always&#39;.
    },
    win_config = {                      -- See |diffview-config-win_config|
      position = &quot;left&quot;,
      width = 35,
      win_opts = {},
    },
  },
  file_history_panel = {
    log_options = {   -- See |diffview-config-log_options|
      git = {
        single_file = {
          diff_merges = &quot;combined&quot;,
        },
        multi_file = {
          diff_merges = &quot;first-parent&quot;,
        },
      },
      hg = {
        single_file = {},
        multi_file = {},
      },
    },
    win_config = {    -- See |diffview-config-win_config|
      position = &quot;bottom&quot;,
      height = 16,
      win_opts = {},
    },
  },
  commit_log_panel = {
    win_config = {},  -- See |diffview-config-win_config|
  },
  default_args = {    -- Default args prepended to the arg-list for the listed commands
    DiffviewOpen = {},
    DiffviewFileHistory = {},
  },
  hooks = {},         -- See |diffview-config-hooks|
  keymaps = {
    disable_defaults = false, -- Disable the default keymaps
    view = {
      -- The `view` bindings are active in the diff buffers, only when the current
      -- tabpage is a Diffview.
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,       actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,     actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,          actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,          actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,          actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,  actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,     actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,   actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,   actions.toggle_files,                   { desc = &quot;Toggle the file panel.&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,      actions.cycle_layout,                   { desc = &quot;Cycle through available layouts.&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,          actions.prev_conflict,                  { desc = &quot;In the merge-tool: jump to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,          actions.next_conflict,                  { desc = &quot;In the merge-tool: jump to the next conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;co&quot;,  actions.conflict_choose(&quot;ours&quot;),        { desc = &quot;Choose the OURS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ct&quot;,  actions.conflict_choose(&quot;theirs&quot;),      { desc = &quot;Choose the THEIRS version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cb&quot;,  actions.conflict_choose(&quot;base&quot;),        { desc = &quot;Choose the BASE version of a conflict&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;ca&quot;,  actions.conflict_choose(&quot;all&quot;),         { desc = &quot;Choose all the versions of a conflict&quot; } },
      { &quot;n&quot;, &quot;dx&quot;,          actions.conflict_choose(&quot;none&quot;),        { desc = &quot;Delete the conflict region&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,  actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,  actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,  actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,  actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,          actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    diff1 = {
      -- Mappings in single window diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff1&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff2 = {
      -- Mappings in 2-way diff layouts
      { &quot;n&quot;, &quot;g?&quot;, actions.help({ &quot;view&quot;, &quot;diff2&quot; }), { desc = &quot;Open the help panel&quot; } },
    },
    diff3 = {
      -- Mappings in 3-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff3&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    diff4 = {
      -- Mappings in 4-way diff layouts
      { { &quot;n&quot;, &quot;x&quot; }, &quot;1do&quot;,  actions.diffget(&quot;base&quot;),            { desc = &quot;Obtain the diff hunk from the BASE version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;2do&quot;,  actions.diffget(&quot;ours&quot;),            { desc = &quot;Obtain the diff hunk from the OURS version of the file&quot; } },
      { { &quot;n&quot;, &quot;x&quot; }, &quot;3do&quot;,  actions.diffget(&quot;theirs&quot;),          { desc = &quot;Obtain the diff hunk from the THEIRS version of the file&quot; } },
      { &quot;n&quot;,          &quot;g?&quot;,   actions.help({ &quot;view&quot;, &quot;diff4&quot; }),  { desc = &quot;Open the help panel&quot; } },
    },
    file_panel = {
      { &quot;n&quot;, &quot;j&quot;,              actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,         actions.next_entry,                     { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,              actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,           actions.prev_entry,                     { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,           actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,              actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;,  actions.select_entry,                   { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;-&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;s&quot;,              actions.toggle_stage_entry,             { desc = &quot;Stage / unstage the selected entry&quot; } },
      { &quot;n&quot;, &quot;S&quot;,              actions.stage_all,                      { desc = &quot;Stage all entries&quot; } },
      { &quot;n&quot;, &quot;U&quot;,              actions.unstage_all,                    { desc = &quot;Unstage all entries&quot; } },
      { &quot;n&quot;, &quot;X&quot;,              actions.restore_entry,                  { desc = &quot;Restore entry to the state on the left side&quot; } },
      { &quot;n&quot;, &quot;L&quot;,              actions.open_commit_log,                { desc = &quot;Open the commit log panel&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,             actions.open_fold,                      { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,              actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,             actions.close_fold,                     { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,             actions.toggle_fold,                    { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,             actions.open_all_folds,                 { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,             actions.close_all_folds,                { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,          actions.scroll_view(-0.25),             { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,          actions.scroll_view(0.25),              { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,          actions.select_next_entry,              { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,        actions.select_prev_entry,              { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,             actions.select_first_entry,             { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,             actions.select_last_entry,              { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,             actions.goto_file_edit,                 { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,     actions.goto_file_split,                { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,        actions.goto_file_tab,                  { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;i&quot;,              actions.listing_style,                  { desc = &quot;Toggle between &#39;list&#39; and &#39;tree&#39; views&quot; } },
      { &quot;n&quot;, &quot;f&quot;,              actions.toggle_flatten_dirs,            { desc = &quot;Flatten empty subdirectories in tree listing style&quot; } },
      { &quot;n&quot;, &quot;R&quot;,              actions.refresh_files,                  { desc = &quot;Update stats and entries in the file list&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,      actions.focus_files,                    { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,      actions.toggle_files,                   { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,         actions.cycle_layout,                   { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;[x&quot;,             actions.prev_conflict,                  { desc = &quot;Go to the previous conflict&quot; } },
      { &quot;n&quot;, &quot;]x&quot;,             actions.next_conflict,                  { desc = &quot;Go to the next conflict&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,             actions.help(&quot;file_panel&quot;),             { desc = &quot;Open the help panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cO&quot;,     actions.conflict_choose_all(&quot;ours&quot;),    { desc = &quot;Choose the OURS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cT&quot;,     actions.conflict_choose_all(&quot;theirs&quot;),  { desc = &quot;Choose the THEIRS version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cB&quot;,     actions.conflict_choose_all(&quot;base&quot;),    { desc = &quot;Choose the BASE version of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;cA&quot;,     actions.conflict_choose_all(&quot;all&quot;),     { desc = &quot;Choose all the versions of a conflict for the whole file&quot; } },
      { &quot;n&quot;, &quot;dX&quot;,             actions.conflict_choose_all(&quot;none&quot;),    { desc = &quot;Delete the conflict region for the whole file&quot; } },
    },
    file_history_panel = {
      { &quot;n&quot;, &quot;g!&quot;,            actions.options,                     { desc = &quot;Open the option panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-A-d&amp;gt;&quot;,       actions.open_in_diffview,            { desc = &quot;Open the entry under the cursor in a diffview&quot; } },
      { &quot;n&quot;, &quot;y&quot;,             actions.copy_hash,                   { desc = &quot;Copy the commit hash of the entry under the cursor&quot; } },
      { &quot;n&quot;, &quot;L&quot;,             actions.open_commit_log,             { desc = &quot;Show commit details&quot; } },
      { &quot;n&quot;, &quot;X&quot;,             actions.restore_entry,               { desc = &quot;Restore file to the state from the selected entry&quot; } },
      { &quot;n&quot;, &quot;zo&quot;,            actions.open_fold,                   { desc = &quot;Expand fold&quot; } },
      { &quot;n&quot;, &quot;zc&quot;,            actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;h&quot;,             actions.close_fold,                  { desc = &quot;Collapse fold&quot; } },
      { &quot;n&quot;, &quot;za&quot;,            actions.toggle_fold,                 { desc = &quot;Toggle fold&quot; } },
      { &quot;n&quot;, &quot;zR&quot;,            actions.open_all_folds,              { desc = &quot;Expand all folds&quot; } },
      { &quot;n&quot;, &quot;zM&quot;,            actions.close_all_folds,             { desc = &quot;Collapse all folds&quot; } },
      { &quot;n&quot;, &quot;j&quot;,             actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;down&amp;gt;&quot;,        actions.next_entry,                  { desc = &quot;Bring the cursor to the next file entry&quot; } },
      { &quot;n&quot;, &quot;k&quot;,             actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;up&amp;gt;&quot;,          actions.prev_entry,                  { desc = &quot;Bring the cursor to the previous file entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;cr&amp;gt;&quot;,          actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;o&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;l&quot;,             actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;2-LeftMouse&amp;gt;&quot;, actions.select_entry,                { desc = &quot;Open the diff for the selected entry&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-b&amp;gt;&quot;,         actions.scroll_view(-0.25),          { desc = &quot;Scroll the view up&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;c-f&amp;gt;&quot;,         actions.scroll_view(0.25),           { desc = &quot;Scroll the view down&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;,         actions.select_next_entry,           { desc = &quot;Open the diff for the next file&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;s-tab&amp;gt;&quot;,       actions.select_prev_entry,           { desc = &quot;Open the diff for the previous file&quot; } },
      { &quot;n&quot;, &quot;[F&quot;,            actions.select_first_entry,          { desc = &quot;Open the diff for the first file&quot; } },
      { &quot;n&quot;, &quot;]F&quot;,            actions.select_last_entry,           { desc = &quot;Open the diff for the last file&quot; } },
      { &quot;n&quot;, &quot;gf&quot;,            actions.goto_file_edit,              { desc = &quot;Open the file in the previous tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;&amp;lt;C-f&amp;gt;&quot;,    actions.goto_file_split,             { desc = &quot;Open the file in a new split&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;C-w&amp;gt;gf&quot;,       actions.goto_file_tab,               { desc = &quot;Open the file in a new tabpage&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;,     actions.focus_files,                 { desc = &quot;Bring focus to the file panel&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;,     actions.toggle_files,                { desc = &quot;Toggle the file panel&quot; } },
      { &quot;n&quot;, &quot;g&amp;lt;C-x&amp;gt;&quot;,        actions.cycle_layout,                { desc = &quot;Cycle available layouts&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,            actions.help(&quot;file_history_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    option_panel = {
      { &quot;n&quot;, &quot;&amp;lt;tab&amp;gt;&quot;, actions.select_entry,          { desc = &quot;Change the current option&quot; } },
      { &quot;n&quot;, &quot;q&quot;,     actions.close,                 { desc = &quot;Close the panel&quot; } },
      { &quot;n&quot;, &quot;g?&quot;,    actions.help(&quot;option_panel&quot;),  { desc = &quot;Open the help panel&quot; } },
    },
    help_panel = {
      { &quot;n&quot;, &quot;q&quot;,     actions.close,  { desc = &quot;Close help menu&quot; } },
      { &quot;n&quot;, &quot;&amp;lt;esc&amp;gt;&quot;, actions.close,  { desc = &quot;Close help menu&quot; } },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h3&gt;Hooks&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; table allows you to define callbacks for various events emitted from Diffview. The available hooks are documented in detail in &lt;code&gt;:h diffview-config-hooks&lt;/code&gt;. The hook events are also available as User autocommands. See &lt;code&gt;:h diffview-user-autocmds&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hooks = {
  diff_buf_read = function(bufnr)
    -- Change local options in diff buffers
    vim.opt_local.wrap = false
    vim.opt_local.list = false
    vim.opt_local.colorcolumn = { 80 }
  end,
  view_opened = function(view)
    print(
      (&quot;A new %s was opened on tab page %d!&quot;)
      :format(view.class:name(), view.tabpage)
    )
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keymaps&lt;/h3&gt; 
&lt;p&gt;The keymaps config is structured as a table with sub-tables for various different contexts where mappings can be declared. In these sub-tables key-value pairs are treated as the &lt;code&gt;{lhs}&lt;/code&gt; and &lt;code&gt;{rhs}&lt;/code&gt; of a normal mode mapping. These mappings all use the &lt;code&gt;:map-arguments&lt;/code&gt; &lt;code&gt;silent&lt;/code&gt;, &lt;code&gt;nowait&lt;/code&gt;, and &lt;code&gt;noremap&lt;/code&gt;. The implementation uses &lt;code&gt;vim.keymap.set()&lt;/code&gt;, so the &lt;code&gt;{rhs}&lt;/code&gt; can be either a vim command in the form of a string, or it can be a lua function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Vim command:
    [&quot;a&quot;] = &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;,
    -- Lua function:
    [&quot;b&quot;] = function() print(&quot;bar&quot;) end,
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more control (i.e. mappings for other modes), you can also define index values as list-like tables containing the arguments for &lt;code&gt;vim.keymap.set()&lt;/code&gt;. This way you can also change all the &lt;code&gt;:map-arguments&lt;/code&gt; with the only exception being the &lt;code&gt;buffer&lt;/code&gt; field, as this will be overridden with the target buffer number:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;view = {
  -- Normal and visual mode mapping to vim command:
  { { &quot;n&quot;, &quot;v&quot; }, &quot;&amp;lt;leader&amp;gt;a&quot;, &quot;&amp;lt;Cmd&amp;gt;echom &#39;foo&#39;&amp;lt;CR&amp;gt;&quot;, { silent = true } },
  -- Visual mode mapping to lua function:
  { &quot;v&quot;, &quot;&amp;lt;leader&amp;gt;b&quot;, function() print(&quot;bar&quot;) end, { nowait = true } },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable any single mapping without disabling them all, set its &lt;code&gt;{rhs}&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  view = {
    -- Disable the default normal mode mapping for `&amp;lt;tab&amp;gt;`:
    [&quot;&amp;lt;tab&amp;gt;&quot;] = false,
    -- Disable the default visual mode mapping for `gf`:
    { &quot;x&quot;, &quot;gf&quot;, false },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of the mapped file panel actions also work from the view if they are added to the view maps (and vice versa). The exception is for actions that only really make sense specifically in the file panel, such as &lt;code&gt;next_entry&lt;/code&gt;, &lt;code&gt;prev_entry&lt;/code&gt;. Actions such as &lt;code&gt;toggle_stage_entry&lt;/code&gt; and &lt;code&gt;restore_entry&lt;/code&gt; work just fine from the view. When invoked from the view, these will target the file currently open in the view rather than the file under the cursor in the file panel.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;For more details on how to set mappings for other modes, actions, and more see:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-config-keymaps&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:h diffview-actions&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Restoring Files&lt;/h2&gt; 
&lt;p&gt;If the right side of the diff is showing the local state of a file, you can restore the file to the state from the left side of the diff (key binding &lt;code&gt;X&lt;/code&gt; from the file panel by default). The current state of the file is stored in the git object database, and a command is echoed that shows how to undo the change.&lt;/p&gt; 
&lt;h2&gt;Tips and FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hide untracked files:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -uno&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Exclude certain paths:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -- :!exclude/this :!and/this&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run as if git was started in a specific directory:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen -C/foo/bar/baz&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Diff the index against a git rev:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DiffviewOpen HEAD~2 --cached&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Defaults to &lt;code&gt;HEAD&lt;/code&gt; if no rev is given.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I get the diagonal lines in place of deleted lines in diff-mode?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Change your &lt;code&gt;:h &#39;fillchars&#39;&lt;/code&gt;: 
    &lt;ul&gt; 
     &lt;li&gt;(vimscript): &lt;code&gt;set fillchars+=diff:‚ï±&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;(Lua): &lt;code&gt;vim.opt.fillchars:append { diff = &quot;‚ï±&quot; }&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Note: whether or not the diagonal lines will line up nicely will depend on your terminal emulator. The terminal used in the screenshots is Kitty.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q: How do I jump between hunks in the diff?&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A: Use &lt;code&gt;[c&lt;/code&gt; and &lt;code&gt;]c&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;:h jumpto-diffs&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim: set tw=80 --&gt;</description>
    </item>
    
    <item>
      <title>mfussenegger/nvim-dap</title>
      <link>https://github.com/mfussenegger/nvim-dap</link>
      <description>&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Launch an application to debug&lt;/li&gt; 
 &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; 
 &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; 
 &lt;li&gt;Inspect the state of the application&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/mfussenegger/nvim-dap&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/mfussenegger/nvim-dap?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install nvim-dap like any other Neovim plugin: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git clone https://codeberg.org/mfussenegger/nvim-dap.git ~/.config/nvim/pack/plugins/start/nvim-dap&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Or with &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Or with &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported Neovim versions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Latest nightly&lt;/li&gt; 
 &lt;li&gt;0.11.x (Recommended)&lt;/li&gt; 
 &lt;li&gt;0.10.4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&quot;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the &lt;a href=&quot;https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&quot;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Setting breakpoints via &lt;code&gt;:DapToggleBreakpoint&lt;/code&gt; or &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:DapNew&lt;/code&gt; and &lt;code&gt;:DapContinue&lt;/code&gt; or &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Stepping through code via &lt;code&gt;:DapStepOver&lt;/code&gt;, &lt;code&gt;:DapStepInto&lt;/code&gt; or the corresponding functions &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Inspecting the state: 
  &lt;ul&gt; 
   &lt;li&gt;Via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Try typing an expression followed by ENTER to evaluate it.&lt;/li&gt; 
     &lt;li&gt;Try commands like &lt;code&gt;.help&lt;/code&gt;, &lt;code&gt;.frames&lt;/code&gt;, &lt;code&gt;.threads&lt;/code&gt;.&lt;/li&gt; 
     &lt;li&gt;Variables with structure can be expanded and collapsed with ENTER on the corresponding line.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Via the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;). Typically you&#39;d inspect values, threads, stacktrace ad-hoc when needed instead of showing the information all the time, but you can also create sidebars for a permanent display&lt;/li&gt; 
   &lt;li&gt;Via UI extensions: 
    &lt;ul&gt; 
     &lt;li&gt;IDE like: &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Middle ground between the IDE like nvim-dap-ui and the built-in widgets: &lt;a href=&quot;https://github.com/igorlfs/nvim-dap-view&quot;&gt;nvim-dap-view&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Show inline values: &lt;a href=&quot;https://github.com/theHamsta/nvim-dap-virtual-text&quot;&gt;nvim-dap-virtual-text&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&quot;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The arrow keys are good candidates for keymaps to step through code as their direction resembles the direction you&#39;ll step to.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Down: Step over&lt;/li&gt; 
 &lt;li&gt;Right: Step into&lt;/li&gt; 
 &lt;li&gt;Left: Step out&lt;/li&gt; 
 &lt;li&gt;Up: Restart frame&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can setup keymaps temporary during a debug session using event listeners. See &lt;code&gt;:help dap-listeners&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&quot;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&quot;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; 
&lt;p&gt;Some debug adapters have &lt;a href=&quot;https://codeberg.org/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&quot;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; 
&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; &lt;p&gt;All known extensions are listed in the &lt;a href=&quot;https://codeberg.org/mfussenegger/nvim-dap/wiki/Extensions&quot;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Non-Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&quot;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&quot;https://github.com/puremourning/vimspector&quot;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/puremourning/vimspector&quot;&gt;vimspector&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; 
 &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; 
 &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; 
 &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; 
 &lt;li&gt;Write extensions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; 
&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; launch debug adapter&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; attach to debug adapter&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; toggle breakpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; breakpoints with conditions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; logpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; set exception breakpoints&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; step over, step into, step out&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; step back, reverse continue&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Goto&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; restart&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; stop&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; pause&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; evaluate expressions&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mason-org/mason.nvim</title>
      <link>https://github.com/mason-org/mason.nvim</link>
      <description>&lt;p&gt;Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Linux-%23.svg?logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; alt=&quot;Linux&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/macOS-%23.svg?logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; alt=&quot;macOS&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Windows-%23.svg?logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; alt=&quot;Windows&quot; /&gt; &lt;a href=&quot;https://github.com/mason-org/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/mason-org/mason.nvim/workflows/Tests/badge.svg?sanitize=true&quot; alt=&quot;GitHub CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/williamboman&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/williamboman&quot; alt=&quot;Sponsors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&quot; alt=&quot;mason.nvim&quot; /&gt; &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; Portable package manager for Neovim that runs everywhere Neovim runs.&lt;br /&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;br /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;sup&gt;Latest version: v2.0.1&lt;/sup&gt; 
 &lt;!-- x-release-please-version --&gt; &lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#installation--usage&quot;&gt;Installation &amp;amp; Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#recommended-setup-for-lazynvim&quot;&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#registries&quot;&gt;Registries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L11&quot;&gt;&lt;code&gt;:h mason-introduction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allows you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#requirements&quot;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; 
&lt;p&gt;Packages are installed in Neovim&#39;s data directory (&lt;a href=&quot;https://neovim.io/doc/user/starting.html#standard-path&quot;&gt;&lt;code&gt;:h standard-path&lt;/code&gt;&lt;/a&gt;) by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (LSP client, shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; 
&lt;p&gt;For a list of all available packages, see &lt;a href=&quot;https://mason-registry.dev/registry/list&quot;&gt;https://mason-registry.dev/registry/list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L42&quot;&gt;&lt;code&gt;:h mason-quickstart&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Install using your plugin manager of choice. &lt;strong&gt;Setup is required&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the setup, is not recommended.&lt;/p&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; 
&lt;h3&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The following is the recommended setup when using &lt;code&gt;lazy.nvim&lt;/code&gt;. It will set up the plugin for you, meaning &lt;strong&gt;you don&#39;t have to call &lt;code&gt;require(&quot;mason&quot;).setup()&lt;/code&gt; yourself&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason.nvim&quot;,
    opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L25&quot;&gt;&lt;code&gt;:h mason-requirements&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.10.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Unix systems: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;GNU wget(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unzip(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;GNU tar (&lt;code&gt;tar(1)&lt;/code&gt; or &lt;code&gt;gtar(1)&lt;/code&gt; depending on platform)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For Windows systems: 
  &lt;ul&gt; 
   &lt;li&gt;pwsh or powershell&lt;/li&gt; 
   &lt;li&gt;git&lt;/li&gt; 
   &lt;li&gt;GNU tar&lt;/li&gt; 
   &lt;li&gt;One of the following: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.7-zip.org/&quot;&gt;7zip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://peazip.github.io/&quot;&gt;peazip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/mholt/archiver&quot;&gt;archiver&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.winzip.com/&quot;&gt;winzip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.win-rar.com/&quot;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L140&quot;&gt;&lt;code&gt;:h mason-commands&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUpdate&lt;/code&gt; - updates all managed registries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/re-installs the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Registries&lt;/h2&gt; 
&lt;p&gt;Mason&#39;s core package registry is located at &lt;a href=&quot;https://github.com/mason-org/mason-registry&quot;&gt;mason-org/mason-registry&lt;/a&gt;. Before any packages can be used, the registry needs to be downloaded. This is done automatically for you when using the different Mason commands (e.g. &lt;code&gt;:MasonInstall&lt;/code&gt;), but can also be done manually by using the &lt;code&gt;:MasonUpdate&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;If you&#39;re utilizing Mason&#39;s Lua APIs to access packages, it&#39;s recommended to use the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L520&quot;&gt;&lt;code&gt;:h mason-registry.refresh()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L513&quot;&gt;&lt;code&gt;:h mason-registry.update()&lt;/code&gt;&lt;/a&gt; functions to ensure you have the latest package information before retrieving packages.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Main window&quot; src=&quot;https://github.com/user-attachments/assets/b9a57d21-f551-45ad-a1e5-a9fd66291510&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Language search&quot; src=&quot;https://github.com/user-attachments/assets/3d24fb7b-2c57-4948-923b-0a42bb627cbe&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Language filter&quot; src=&quot;https://github.com/user-attachments/assets/c0ca5818-3c74-4071-bc41-427a2cd1056d&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Package information&quot; src=&quot;https://github.com/user-attachments/assets/6f9f6819-ac97-483d-a77c-8f6c6131ac85&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;New package versions&quot; src=&quot;https://github.com/user-attachments/assets/ff1adc4d-2fcc-46df-ab4c-291c891efa50&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Help window&quot; src=&quot;https://github.com/user-attachments/assets/1fbe75e4-fe69-4417-83e3-82329e1c236e&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L200&quot;&gt;&lt;code&gt;:h mason-settings&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#default-configuration&quot;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup({
    ui = {
        icons = {
            package_installed = &quot;‚úì&quot;,
            package_pending = &quot;‚ûú&quot;,
            package_uninstalled = &quot;‚úó&quot;
        }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration using &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason.nvim&quot;,
    opts = {
        ui = {
            icons = {
                package_installed = &quot;‚úì&quot;,
                package_pending = &quot;‚ûú&quot;,
                package_uninstalled = &quot;‚úó&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Default configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class MasonSettings
local DEFAULT_SETTINGS = {
    ---@since 1.0.0
    -- The directory in which to install packages.
    install_root_dir = path.concat { vim.fn.stdpath &quot;data&quot;, &quot;mason&quot; },

    ---@since 1.0.0
    -- Where Mason should put its bin location in your PATH. Can be one of:
    -- - &quot;prepend&quot; (default, Mason&#39;s bin location is put first in PATH)
    -- - &quot;append&quot; (Mason&#39;s bin location is put at the end of PATH)
    -- - &quot;skip&quot; (doesn&#39;t modify PATH)
    ---@type &#39;&quot;prepend&quot;&#39; | &#39;&quot;append&quot;&#39; | &#39;&quot;skip&quot;&#39;
    PATH = &quot;prepend&quot;,

    ---@since 1.0.0
    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when
    -- debugging issues with package installations.
    log_level = vim.log.levels.INFO,

    ---@since 1.0.0
    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further
    -- packages that are requested to be installed will be put in a queue.
    max_concurrent_installers = 4,

    ---@since 1.0.0
    -- [Advanced setting]
    -- The registries to source packages from. Accepts multiple entries. Should a package with the same name exist in
    -- multiple registries, the registry listed first will be used.
    registries = {
        &quot;github:mason-org/mason-registry&quot;,
    },

    ---@since 1.0.0
    -- The provider implementations to use for resolving supplementary package metadata (e.g., all available versions).
    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.
    -- Builtin providers are:
    --   - mason.providers.registry-api  - uses the https://api.mason-registry.dev API
    --   - mason.providers.client        - uses only client-side tooling to resolve metadata
    providers = {
        &quot;mason.providers.registry-api&quot;,
        &quot;mason.providers.client&quot;,
    },

    github = {
        ---@since 1.0.0
        -- The template URL to use when downloading assets from GitHub.
        -- The placeholders are the following (in order):
        -- 1. The repository (e.g. &quot;rust-lang/rust-analyzer&quot;)
        -- 2. The release version (e.g. &quot;v0.3.0&quot;)
        -- 3. The asset name (e.g. &quot;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&quot;)
        download_url_template = &quot;https://github.com/%s/releases/download/%s/%s&quot;,
    },

    pip = {
        ---@since 1.0.0
        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.
        upgrade_pip = false,

        ---@since 1.0.0
        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior
        -- and is not recommended.
        --
        -- Example: { &quot;--proxy&quot;, &quot;https://proxyserver&quot; }
        install_args = {},
    },

    ui = {
        ---@since 1.0.0
        -- Whether to automatically check for new versions when opening the :Mason window.
        check_outdated_packages_on_open = true,

        ---@since 1.0.0
        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
        -- Defaults to `:h &#39;winborder&#39;` if nil.
        border = nil,

        ---@since 1.11.0
        -- The backdrop opacity. 0 is fully opaque, 100 is fully transparent.
        backdrop = 60,

        ---@since 1.0.0
        -- Width of the window. Accepts:
        -- - Integer greater than 1 for fixed width.
        -- - Float in the range of 0-1 for a percentage of screen width.
        width = 0.8,

        ---@since 1.0.0
        -- Height of the window. Accepts:
        -- - Integer greater than 1 for fixed height.
        -- - Float in the range of 0-1 for a percentage of screen height.
        height = 0.9,

        icons = {
            ---@since 1.0.0
            -- The list icon to use for installed packages.
            package_installed = &quot;‚óç&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are installing, or queued for installation.
            package_pending = &quot;‚óç&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are not installed.
            package_uninstalled = &quot;‚óç&quot;,
        },

        keymaps = {
            ---@since 1.0.0
            -- Keymap to expand a package
            toggle_package_expand = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to install the package under the current cursor position
            install_package = &quot;i&quot;,
            ---@since 1.0.0
            -- Keymap to reinstall/update the package under the current cursor position
            update_package = &quot;u&quot;,
            ---@since 1.0.0
            -- Keymap to check for new version for the package under the current cursor position
            check_package_version = &quot;c&quot;,
            ---@since 1.0.0
            -- Keymap to update all installed packages
            update_all_packages = &quot;U&quot;,
            ---@since 1.0.0
            -- Keymap to check which installed packages are outdated
            check_outdated_packages = &quot;C&quot;,
            ---@since 1.0.0
            -- Keymap to uninstall a package
            uninstall_package = &quot;X&quot;,
            ---@since 1.0.0
            -- Keymap to cancel a package installation
            cancel_installation = &quot;&amp;lt;C-c&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to apply language filter
            apply_language_filter = &quot;&amp;lt;C-f&amp;gt;&quot;,
            ---@since 1.1.0
            -- Keymap to toggle viewing package installation log
            toggle_package_install_log = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.8.0
            -- Keymap to toggle the help view
            toggle_help = &quot;g?&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;sup&gt; üëã didn&#39;t find what you were looking for? Try looking in the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt&quot;&gt;help docs&lt;/a&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt;! &lt;/sup&gt;</description>
    </item>
    
    <item>
      <title>catppuccin/nvim</title>
      <link>https://github.com/catppuccin/nvim</link>
      <description>&lt;p&gt;üç® Soothing pastel theme for (Neo)vim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&quot; width=&quot;100&quot; alt=&quot;Logo&quot; /&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; Catppuccin for &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;(Neo)&lt;/a&gt;&lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213472445-091e54fb-091f-4448-a631-fa6b2ba7d8a5.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; This port of &lt;a href=&quot;https://github.com/catppuccin/&quot;&gt;Catppuccin&lt;/a&gt; is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/v0.1&quot;&gt;v0.1&lt;/a&gt; tag. &lt;/p&gt; 
&lt;h2&gt;Previews&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåª Latte&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473391-603bdc68-68f4-4877-a15a-b469040928b5.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü™¥ Frapp√©&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473368-16931b70-fd84-4a89-a698-1b1bca1f82de.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üå∫ Macchiato&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473285-7bd858be-6947-4d9e-8c01-2573cbc7e76c.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåø Mocha&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213471997-34837219-88cc-4db2-baca-e25813a89789.png&quot; /&gt; 
&lt;/details&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both Vim and Neovim (requires &lt;a href=&quot;https://github.com/neovim/neovim/&quot;&gt;neovim&lt;/a&gt; &amp;gt;= 0.8 or &lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &amp;gt;= 9 compiled with &lt;a href=&quot;https://github.com/lua/lua&quot;&gt;lua&lt;/a&gt; &amp;gt;= 5.1)&lt;/li&gt; 
 &lt;li&gt;Highly configurable with 4 different flavours and &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;the ability to create your own!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim#Compile&quot;&gt;Compiled&lt;/a&gt; configuration for &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/xxfpt3/catppuccinnvim_now_startup_in_1ms/&quot;&gt;fast startup time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrations with lsp, treesitter and &lt;a href=&quot;https://github.com/catppuccin/nvim#integrations&quot;&gt;a bunch of plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://github.com/catppuccin/catppuccin&quot;&gt;many other applications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot;, priority = 1000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add({ source = &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;catppuccin/nvim&quot;, as = &quot;catppuccin&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;catppuccin/nvim&#39;, { &#39;as&#39;: &#39;catppuccin&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme catppuccin &quot; catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    flavour = &quot;auto&quot;, -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = &quot;latte&quot;,
        dark = &quot;mocha&quot;,
    },
    transparent_background = false, -- disables setting the background color.
    float = {
        transparent = false, -- enable transparent floating windows
        solid = false, -- use solid styling for floating windows, see |winborder|
    },
    show_end_of_buffer = false, -- shows the &#39;~&#39; characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
        enabled = false, -- dims the background color of inactive window
        shade = &quot;dark&quot;,
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = { &quot;italic&quot; }, -- Change the style of comments
        conditionals = { &quot;italic&quot; },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
        -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    auto_integrations = false,
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

-- setup must be called before loading
vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Getting colors&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local latte = require(&quot;catppuccin.palettes&quot;).get_palette &quot;latte&quot;
local frappe = require(&quot;catppuccin.palettes&quot;).get_palette &quot;frappe&quot;
local macchiato = require(&quot;catppuccin.palettes&quot;).get_palette &quot;macchiato&quot;
local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a table where the key is the name of the color and the value is the hex code.&lt;/p&gt; 
&lt;h3&gt;Overwriting colors&lt;/h3&gt; 
&lt;p&gt;Colors can be overwritten using &lt;code&gt;color_overrides&lt;/code&gt;, see &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;https://github.com/catppuccin/nvim/discussions/323&lt;/a&gt; for inspiration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    color_overrides = {
        all = {
            text = &quot;#ffffff&quot;,
        },
        latte = {
            base = &quot;#ff0000&quot;,
            mantle = &quot;#242424&quot;,
            crust = &quot;#474747&quot;,
        },
        frappe = {},
        macchiato = {},
        mocha = {},
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Overwriting highlight groups&lt;/h3&gt; 
&lt;p&gt;Global highlight groups can be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    custom_highlights = function(colors)
        return {
            Comment = { fg = colors.flamingo },
            TabLineSel = { bg = colors.pink },
            CmpBorder = { fg = colors.surface2 },
            Pmenu = { bg = colors.none },
        }
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Highlight groups per flavour can also be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    highlight_overrides = {
        all = function(colors)
            return {
                NvimTreeNormal = { fg = colors.none },
                CmpBorder = { fg = &quot;#3e4145&quot; },
            }
        end,
        latte = function(latte)
            return {
                Normal = { fg = latte.base },
            }
        end,
        frappe = function(frappe)
            return {
                [&quot;@comment&quot;] = { fg = frappe.surface2, style = { &quot;italic&quot; } },
            }
        end,
        macchiato = function(macchiato)
            return {
                LineNr = { fg = macchiato.overlay1 },
            }
        end,
        mocha = function(mocha)
            return {
                Comment = { fg = mocha.flamingo },
            }
        end,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;Catppuccin provides theme support for other plugins in the Neovim ecosystem and extended Neovim functionality through &lt;em&gt;integrations&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To enable/disable an integration you just need to set it to true/false, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some integrations are enabled by default, you can control this behaviour with &lt;code&gt;default_integrations&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    default_integrations = false,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; as your package manager, you can use the &lt;code&gt;auto_integrations&lt;/code&gt; option to let catppuccin automatically detect installed plugins and enable their respective integrations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    auto_integrations = true,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a list of supported plugins and their corresponding integration module.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] If you&#39;d like to see the full list of highlight groups modified by Catppuccin, see the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/groups/integrations&quot;&gt;&lt;code&gt;lua/catppuccin/groups/integrations/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;b&gt;Plugin&lt;/b&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;b&gt;Default&lt;/b&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;aerial = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt; 
  &lt;!-- alpha.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;alpha = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- alpha.nvim --&gt; 
  &lt;!-- barbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbar = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbar.nvim --&gt; 
  &lt;!-- barbecue.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;barbecue.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbecue = {
    dim_dirname = true, -- directory name is dimmed by default
    bold_basename = true,
    dim_context = false,
    alt_background = false,
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;barbecue&quot;).setup {
  theme = &quot;catppuccin&quot;, -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbecue.nvim --&gt; 
  &lt;!-- beacon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/DanilaMihailov/beacon.nvim&quot;&gt;beacon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;beacon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- beacon.nvim --&gt; 
  &lt;!-- blink.cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;blink_cmp = {
    style = &#39;bordered&#39;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- blink.cmp --&gt; 
  &lt;!-- bufferline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your bufferline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!NOTE] bufferline needs to be loaded after setting up Catppuccin or it will highlight incorrectly&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &quot;akinsho/bufferline.nvim&quot; {
  after = &quot;catppuccin&quot;,
  config = function()
    require(&quot;bufferline&quot;).setup {
      highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get()
    }
  end
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Configurations are self-explanatory, see &lt;code&gt;:h bufferline-highlights&lt;/code&gt; for detailed explanations:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
bufferline.setup {
    highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get {
        styles = { &quot;italic&quot;, &quot;bold&quot; },
        custom = {
            all = {
                fill = { bg = &quot;#000000&quot; },
            },
            mocha = {
                background = { fg = mocha.text },
            },
            latte = {
                background = { fg = &quot;#000000&quot; },
            },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- bufferline.nvim --&gt; 
  &lt;!-- buffon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/francescarpi/buffon.nvim&quot;&gt;buffon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;buffon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- buffon.nvim --&gt; 
  &lt;!-- coc.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;coc.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = true,
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Note] coc.nvim by default link to native lsp highlight groups so config from &lt;code&gt;native_lsp&lt;/code&gt; will also apply to coc&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;p&gt;In the nested tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- coc.nvim --&gt; 
  &lt;!-- colorful-winsep.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-zh/colorful-winsep.nvim&quot;&gt;colorful-winsep.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;colorful_winsep = {
    enabled = false,
    color = &quot;red&quot;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- colorful_winsep.nvim --&gt; 
  &lt;!-- dashboard-nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dashboard = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dashboard-nvim --&gt; 
  &lt;!-- diffview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;diffview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- diffview.nvim --&gt; 
  &lt;!-- dropbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Bekaboo/dropbar.nvim&quot;&gt;dropbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dropbar = {
    enabled = false,
    color_mode = false, -- enable color for kind&#39;s texts, not just kind&#39;s icons
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dropbar.nvim --&gt; 
  &lt;!-- feline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/freddiehaddad/feline.nvim/&quot;&gt;feline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;  
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your Feline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)

ctp_feline.setup()

require(&quot;feline&quot;).setup({
    components = ctp_feline.get(),
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Notice that calling &lt;code&gt;setup()&lt;/code&gt; is optional. You may pass a lua table in order to change assets, settings and the colors per vim mode.&lt;/p&gt; 
     &lt;p&gt;Here are the defaults:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local clrs = require(&quot;catppuccin.palettes&quot;).get_palette()
local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)
local U = require &quot;catppuccin.utils.colors&quot;

ctp_feline.setup({
    assets = {
        left_separator = &quot;ÓÇ∂&quot;,
        right_separator = &quot;ÓÇ¥&quot;,
        mode_icon = &quot;ÔÜÆ&quot;,
        dir = &quot;Û∞âñ&quot;,
        file = &quot;Û∞àô&quot;,
        lsp = {
            server = &quot;Û∞Ö°&quot;,
            error = &quot;ÔÑë&quot;,
            warning = &quot;ÔÑë&quot;,
            info = &quot;ÔÑë&quot;,
            hint = &quot;ÔÑë&quot;,
        },
        git = {
            branch = &quot;Óú•&quot;,
            added = &quot;ÔÅï&quot;,
            changed = &quot;ÔÖÑ&quot;,
            removed = &quot;ÔÅñ&quot;,
        },
    },
    sett = {
        text = U.vary_color({ latte = latte.base }, clrs.surface0),
        bkg = U.vary_color({ latte = latte.crust }, clrs.surface0),
        diffs = clrs.mauve,
        extras = clrs.overlay1,
        curr_file = clrs.maroon,
        curr_dir = clrs.flamingo,
        show_modified = false, -- show if the file has been modified
        show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                  -- need to set checker.enabled = true in lazy.nvim first
                                  -- the icon is set in ui.icons.plugin in lazy.nvim
    },
    mode_colors = {
        [&quot;n&quot;] = { &quot;NORMAL&quot;, clrs.lavender },
        [&quot;no&quot;] = { &quot;N-PENDING&quot;, clrs.lavender },
        [&quot;i&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;ic&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;t&quot;] = { &quot;TERMINAL&quot;, clrs.green },
        [&quot;v&quot;] = { &quot;VISUAL&quot;, clrs.flamingo },
        [&quot;V&quot;] = { &quot;V-LINE&quot;, clrs.flamingo },
        [&quot;&quot;] = { &quot;V-BLOCK&quot;, clrs.flamingo },
        [&quot;R&quot;] = { &quot;REPLACE&quot;, clrs.maroon },
        [&quot;Rv&quot;] = { &quot;V-REPLACE&quot;, clrs.maroon },
        [&quot;s&quot;] = { &quot;SELECT&quot;, clrs.maroon },
        [&quot;S&quot;] = { &quot;S-LINE&quot;, clrs.maroon },
        [&quot;&quot;] = { &quot;S-BLOCK&quot;, clrs.maroon },
        [&quot;c&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;cv&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;ce&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;r&quot;] = { &quot;PROMPT&quot;, clrs.teal },
        [&quot;rm&quot;] = { &quot;MORE&quot;, clrs.teal },
        [&quot;r?&quot;] = { &quot;CONFIRM&quot;, clrs.mauve },
        [&quot;!&quot;] = { &quot;SHELL&quot;, clrs.green },
    },
    view = {
        lsp = {
            progress = true, -- if true the status bar will display an lsp progress indicator
            name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text &quot;Lsp&quot;
            exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
            separator = &quot;|&quot;, -- the separator used when there are multiple lsp servers
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Warning] Currently feline &lt;a href=&quot;https://github.com/feline-nvim/feline.nvim/issues/302&quot;&gt;doesn&#39;t officially support custom themes&lt;/a&gt;. In order for &lt;code&gt;:colorscheme catppuccin-&amp;lt;flavour&amp;gt;&lt;/code&gt; to work you could add this autocmd as a workaround:&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;ColorScheme&quot;, {
    pattern = &quot;*&quot;,
    callback = function()
        package.loaded[&quot;feline&quot;] = nil
        package.loaded[&quot;catppuccin.groups.integrations.feline&quot;] = nil
        require(&quot;feline&quot;).setup {
            components = require(&quot;catppuccin.groups.integrations.feline&quot;).get(),
        }
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- feline.nvim --&gt; 
  &lt;!-- fern.vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lambdalisue/fern.vim&quot;&gt;fern.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fern = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fern.vim --&gt; 
  &lt;!-- fidget.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/j-hui/fidget.nvim&quot;&gt;fidget.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fidget = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; Set `notification.window.winblend` to `0`: 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fidget&quot;).setup {
    notification = {
        window = {
            winblend = 0,
        },
    }
    -- ... the rest of your fidget config
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fidget.nvim --&gt; 
  &lt;!-- flash.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;flash = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- flash.nvim --&gt; 
    &lt;!-- fzf-lua --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fzf-lua --&gt; 
  &lt;!-- gitgraph.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgraph = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitgraph.nvim --&gt; 
    &lt;!-- gitsigns.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = {
  enabled = true,
  -- align with the transparent_background option by default
  transparent = false,
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- gitsigns.nvim --&gt; 
    &lt;!-- grug-far.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;grug_far = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- grug-far.nvim --&gt; 
    &lt;!-- harpoon --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;harpoon&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;harpoon = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- harpoon --&gt; 
    &lt;!-- headlines.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;headlines = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- headlines.nvim --&gt; 
    &lt;!-- hop.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hop = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- hop.nvim --&gt; 
    &lt;!-- indent-blankline.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;indent_blankline = {
    enabled = true,
    scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
    colored_indent_levels = false,
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;&lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors&quot;&gt;here&lt;/a&gt; to set the latter up.&lt;/p&gt; 
    &lt;/details&gt; 
    &lt;!-- indent-blankline.nvim --&gt; 
    &lt;!-- leap.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;leap = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- leap.nvim --&gt; 
    &lt;!-- lightline.vim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lightline.vim --&gt; 
    &lt;!-- lightspeed.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lightspeed = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lightspeed.nvim --&gt; 
    &lt;!-- lir.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lir = {
    enabled = false,
    git_status = false
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lir.nvim --&gt; 
    &lt;!-- lspsaga.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_saga = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;For custom Lsp Kind Icon and Color&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lspsaga&quot;).setup {
    ui = {
        kind = require(&quot;catppuccin.groups.integrations.lsp_saga&quot;).custom_kind(),
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;!-- lspsaga.nvim --&gt; 
  &lt;!-- lualine.nvim --&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
    options = {
        theme = &quot;catppuccin&quot;
        -- ... the rest of your lualine config
    }
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lualine.nvim --&gt; 
    &lt;!-- markdown --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;markdown&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markdown --&gt; 
  &lt;!-- markview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markview.nvim --&gt; 
  &lt;!-- mason.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mason = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mason.nvim --&gt; 
  &lt;!-- mini.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;mini.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mini = {
    enabled = true,
    indentscope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mini.nvim --&gt; 
  &lt;!-- neo-tree.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neo-tree.nvim --&gt; 
  &lt;!-- neogit --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neogit = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neogit --&gt; 
  &lt;!-- neotest --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotest = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neotest --&gt; 
  &lt;!-- noice.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;noice = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- noice.nvim --&gt; 
  &lt;!-- notifier.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vigoux/notifier.nvim&quot;&gt;notifier.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notifier = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- notifier.nvim --&gt; 
  &lt;!-- nvim-cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-cmp --&gt; 
  &lt;!-- nvim-copilot-vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;copilot.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_vim = false,
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-copilot-vim --&gt; 
  &lt;!-- nvim-dap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special &lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local sign = vim.fn.sign_define

sign(&quot;DapBreakpoint&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapBreakpointCondition&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpointCondition&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapLogPoint&quot;, { text = &quot;‚óÜ&quot;, texthl = &quot;DapLogPoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap --&gt; 
  &lt;!-- nvim-dap-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap_ui = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap-ui --&gt; 
  &lt;!-- nvim-lspconfig --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-lspconfig --&gt; 
  &lt;!-- navic --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;navic&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;navic = {
    enabled = false,
    custom_bg = &quot;NONE&quot;, -- &quot;lualine&quot; will set background to mantle
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You NEED to enable highlight in nvim-navic setting or it won&#39;t work
require(&quot;nvim-navic&quot;).setup {
    highlight = true
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- navic --&gt; 
  &lt;!-- nvim-notify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-notify --&gt; 
  &lt;!-- nvim-semantic-tokens --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-semantic-highlight&quot;&gt;nvim-semantic-tokens&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;semantic_tokens = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-semantic-tokens --&gt; 
  &lt;!-- nvim-surround --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;nvim-surround&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvim_surround = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-surround --&gt; 
  &lt;!-- nvim-tree.lua --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvimtree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-tree.lua --&gt; 
  &lt;!-- nvim-treesitter-context --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter_context = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter-context --&gt; 
  &lt;!-- nvim-treesitter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter --&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/nvim-ts-rainbow2&quot;&gt;nvim-ts-rainbow2&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow2 = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt; 
  &lt;!-- nvim-ts-rainbow --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/p00f/nvim-ts-rainbow&quot;&gt;nvim-ts-rainbow&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow --&gt; 
  &lt;!-- nvim-ufo --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ufo = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ufo --&gt; 
  &lt;!-- nvim-window-picker --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;nvim-window-picker&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;window_picker = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- nvim-window-picker --&gt; 
    &lt;!-- octo.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;octo = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- octo.nvim --&gt; 
  &lt;!-- overseer.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;overseer = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- overseer.nvim --&gt; 
  &lt;!-- pounce.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;pounce = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- pounce.nvim --&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rainbow_delimiters = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt; 
  &lt;!-- reactive.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rasulomaroff/reactive.nvim&quot;&gt;reactive.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;There&#39;re 2 available presets (&lt;code&gt;cursor&lt;/code&gt; and &lt;code&gt;cursorline&lt;/code&gt;) for every flavour.&lt;/p&gt; 
     &lt;p&gt;Here is how you can use them.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;reactive&#39;).setup {
  load = { &#39;catppuccin-mocha-cursor&#39;, &#39;catppuccin-mocha-cursorline&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;To use another flavour just replace &lt;code&gt;mocha&lt;/code&gt; with the one you want to use.&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- reactive.nvim --&gt; 
  &lt;!-- render-markdown.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;render_markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- render-markdown.nvim --&gt; 
  &lt;!-- snacks.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;snacks = {
    enabled = false,
    indent_scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- snacks.nvim --&gt; 
  &lt;!-- symbols-outline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/simrat39/symbols-outline.nvim&quot;&gt;symbols-outline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;[!NOTE] This plugin has been archived by the author, consider using &lt;a href=&quot;https://github.com/hedyhli/outline.nvim&quot;&gt;outline.nvim&lt;/a&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;symbols_outline = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- symbols-outline.nvim --&gt; 
  &lt;!-- telekasten.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/renerocksai/telekasten.nvim&quot;&gt;telekasten.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telekasten = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telekasten.nvim --&gt; 
  &lt;!-- telescope.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telescope = {
    enabled = true,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telescope.nvim --&gt; 
  &lt;!-- trouble.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_trouble = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- trouble.nvim --&gt; 
  &lt;!-- vim-airline --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:airline_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-airline --&gt; 
  &lt;!-- vim-clap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:clap_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-clap --&gt; 
  &lt;!-- vim-dadbod-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kristijanhusak/vim-dadbod-ui&quot;&gt;vim-dadbod-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dadbod_ui = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-dadbod-ui --&gt; 
  &lt;!-- vim-gitgutter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgutter = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-gitgutter --&gt; 
  &lt;!-- vim-illuminate --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;illuminate = {
    enabled = true,
    lsp = false
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-illuminate --&gt; 
  &lt;!-- vim-sandwich --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sandwich = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sandwich --&gt; 
  &lt;!-- vim-signify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;signify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-signify --&gt; 
  &lt;!-- vim-sneak --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim_sneak = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sneak --&gt; 
  &lt;!-- vimwiki --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vimwiki = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vimwiki --&gt; 
  &lt;!-- which-key.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;which_key = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- which-key.nvim --&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Compile&lt;/h2&gt; 
&lt;p&gt;Catppuccin is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time. Catppuccin can pre compute the results of your configuration and store the results in a compiled Lua file. We use these pre-cached values to set it&#39;s highlights.&lt;/p&gt; 
&lt;p&gt;By default, Catppuccin writes the compiled results into the system&#39;s cache directory. See below if you&#39;d like to change the cache directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({ -- Note: On windows we replace `/` with `\` by default
    compile_path = vim.fn.stdpath &quot;cache&quot; .. &quot;/catppuccin&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üôã FAQ&lt;/h2&gt; 
&lt;h3&gt;Why do my Treesitter highlights look incorrect?&lt;/h3&gt; 
&lt;p&gt;Please disable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Why aren&#39;t my colors the same as the previews?&lt;/h3&gt; 
&lt;p&gt;Catppuccin requires that your terminal supports true color, meaning that your terminal can display the full range of 16 million colors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported: iterm2 (macOS), kitty, wezterm, alacritty, &lt;a href=&quot;https://github.com/termstandard/colors#truecolor-support-in-output-devices&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Unsupported: Terminal.app (macOS), Terminus, Terminology, &lt;a href=&quot;https://github.com/termstandard/colors#not-supporting-truecolor&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use tmux, make sure to enable &lt;a href=&quot;https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6&quot;&gt;true color support&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722&quot;&gt;italic font support&lt;/a&gt;. This will prevent issues raised in &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/415&quot;&gt;#415&lt;/a&gt; and &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/428&quot;&gt;#428&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üíù Thanks to&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Current Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vollowx&quot;&gt;vollowx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/comfysage&quot;&gt;robin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Previous Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pocco81&quot;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nullchilly&quot;&gt;nullchilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrtnvgr&quot;&gt;mrtnvgr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Copyright ¬© 2021-present &lt;a href=&quot;https://github.com/catppuccin&quot; target=&quot;_blank&quot;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>AstroNvim/astrocommunity</title>
      <link>https://github.com/AstroNvim/astrocommunity</link>
      <description>&lt;p&gt;A community repository of common plugin specifications&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; id=&quot;madewithlua&quot;&gt; 
 &lt;img src=&quot;https://astronvim.com/logo/astronvim.svg?sanitize=true&quot; width=&quot;110&quot; , height=&quot;100&quot; /&gt; 
&lt;/div&gt; 
&lt;h1 align=&quot;center&quot;&gt;AstroNvim Community Repository&lt;/h1&gt; 
&lt;p&gt;AstroNvim&#39;s community repository contains plugin configuration specifications ‚Äî a collection of plugins contributed by the community for AstroNvim, a NeoVim configuration. These specifications help manage the variety of plugins used in AstroNvim.&lt;/p&gt; 
&lt;h2&gt;üì¶ Setup&lt;/h2&gt; 
&lt;p&gt;To integrate the community plugins, add the provided configurations to your &lt;code&gt;plugins&lt;/code&gt; setup preferably before you import your own plugins to guarantee all AstroCommunity changes are loaded before your own overrides. If you are using the &lt;a href=&quot;https://github.com/AstroNvim/template&quot;&gt;AstroNvim Template&lt;/a&gt; This can be done in your &lt;code&gt;lua/community.lua&lt;/code&gt; file. If you&#39;re unfamiliar with configuring plugins, we recommend referring to the &lt;a href=&quot;https://docs.astronvim.com/configuration/customizing_plugins/&quot;&gt;AstroNvim documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Importing AstroCommunity Plugins&lt;/h3&gt; 
&lt;p&gt;Integrate the following content within your &lt;code&gt;lua/community.lua&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;AstroNvim/astrocommunity&quot;,
  { import = &quot;astrocommunity.colorscheme.catppuccin&quot; },
  -- ... import any community contributed plugins here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing AstroCommunity Installations&lt;/h3&gt; 
&lt;p&gt;Once you have AstroCommunity imports defined in your &lt;code&gt;lua/community.lua&lt;/code&gt; you can then further customize the installations in your own plugin definitions (typically done in the &lt;code&gt;lua/plugins/&lt;/code&gt; directory). Here is an example assuming you have Catppuccin installed as shown above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  { -- further customize the options set by the community
    &quot;catppuccin&quot;,
    opts = {
      integrations = {
        sandwich = false,
        noice = true,
        mini = true,
        leap = true,
        markdown = true,
        neotest = true,
        cmp = true,
        overseer = true,
        lsp_trouble = true,
        rainbow_delimiters = true,
      },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To disable imports, set the &lt;code&gt;enabled&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. You have two approaches to modify an existing plugin: use the full repository name (e.g., &quot;m4xshen/smartcolumn.nvim&quot;) or the module name (e.g., &quot;catppuccin&quot;). Remember, the module name might differ from the folder name.&lt;/li&gt; 
 &lt;li&gt;It&#39;s recommended to use the full import path when customizing a plugin, and not the shorthand notation of just the repository name.&lt;/li&gt; 
 &lt;li&gt;You can override many aspects of community plugins including settings, dependencies, and versions. For more details on available options, refer to the &lt;a href=&quot;https://lazy.folke.io/&quot;&gt;lazy.nvim documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve written a plugin configuration and wish to add it with the AstroCommunity repository, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/AstroNvim/astrocommunity/main/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; and submit a pull request. Ensure you&#39;ve rigorously tested your changes before submission. This isn&#39;t an official repository, so its stability relies on community contributions. We&#39;re excited to see how this project grows and evolves!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>greggh/claude-code.nvim</title>
      <link>https://github.com/greggh/claude-code.nvim</link>
      <description>&lt;p&gt;Seamless integration between Claude Code AI assistant and Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Neovim Plugin&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/greggh/claude-code.nvim/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.7%2B-blueviolet?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Tests-44%20passing-success?style=flat-square&amp;amp;logo=github-actions&quot; alt=&quot;Tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/releases/tag/v0.4.2&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Version-0.4.2-blue?style=flat-square&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/greggh/claude-code.nvim?style=flat-square&amp;amp;logo=github&quot; alt=&quot;Discussions&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;A seamless integration between &lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; AI assistant and Neovim&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#features&quot;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#usage&quot;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#contributing&quot;&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/greggh/claude-code.nvim/raw/main/assets/claude-code.png?raw=true&quot; alt=&quot;Claude Code in Neovim&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This plugin was built entirely with Claude Code in a Neovim terminal, and then inside itself using Claude Code for everything!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ Toggle Claude Code in a terminal window with a single key press&lt;/li&gt; 
 &lt;li&gt;üß† Support for command-line arguments like &lt;code&gt;--continue&lt;/code&gt; and custom variants&lt;/li&gt; 
 &lt;li&gt;üîÑ Automatically detect and reload files modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;‚ö° Real-time buffer updates when files are changed externally&lt;/li&gt; 
 &lt;li&gt;üì± Customizable window position and size (including floating windows)&lt;/li&gt; 
 &lt;li&gt;ü§ñ Integration with which-key (if available)&lt;/li&gt; 
 &lt;li&gt;üìÇ Automatically uses git project root as working directory (when available)&lt;/li&gt; 
 &lt;li&gt;üß© Modular and maintainable code structure&lt;/li&gt; 
 &lt;li&gt;üìã Type annotations with LuaCATS for better IDE support&lt;/li&gt; 
 &lt;li&gt;‚úÖ Configuration validation to prevent errors&lt;/li&gt; 
 &lt;li&gt;üß™ Testing framework for reliability (44 comprehensive tests)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim 0.7.0 or later&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code CLI&lt;/a&gt; tool installed and available in your PATH&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt; (dependency for git operations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt; for version history and updates.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;greggh/claude-code.nvim&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;, -- Required for git operations
  },
  config = function()
    require(&quot;claude-code&quot;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;greggh/claude-code.nvim&#39;,
  requires = {
    &#39;nvim-lua/plenary.nvim&#39;, -- Required for git operations
  },
  config = function()
    require(&#39;claude-code&#39;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;greggh/claude-code.nvim&#39;
&quot; After installing, add this to your init.vim:
&quot; lua require(&#39;claude-code&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The plugin can be configured by passing a table to the &lt;code&gt;setup&lt;/code&gt; function. Here&#39;s the default configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  -- Terminal window settings
  window = {
    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)
    position = &quot;botright&quot;,  -- Position of the window: &quot;botright&quot;, &quot;topleft&quot;, &quot;vertical&quot;, &quot;float&quot;, etc.
    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code
    hide_numbers = true,    -- Hide line numbers in the terminal window
    hide_signcolumn = true, -- Hide the sign column in the terminal window
    
    -- Floating window configuration (only applies when position = &quot;float&quot;)
    float = {
      width = &quot;80%&quot;,        -- Width: number of columns or percentage string
      height = &quot;80%&quot;,       -- Height: number of rows or percentage string
      row = &quot;center&quot;,       -- Row position: number, &quot;center&quot;, or percentage string
      col = &quot;center&quot;,       -- Column position: number, &quot;center&quot;, or percentage string
      relative = &quot;editor&quot;,  -- Relative to: &quot;editor&quot; or &quot;cursor&quot;
      border = &quot;rounded&quot;,   -- Border style: &quot;none&quot;, &quot;single&quot;, &quot;double&quot;, &quot;rounded&quot;, &quot;solid&quot;, &quot;shadow&quot;
    },
  },
  -- File refresh settings
  refresh = {
    enable = true,           -- Enable file change detection
    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)
    timer_interval = 1000,   -- How often to check for file changes (milliseconds)
    show_notifications = true, -- Show notification when files are reloaded
  },
  -- Git project settings
  git = {
    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)
  },
  -- Shell-specific settings
  shell = {
    separator = &#39;&amp;amp;&amp;amp;&#39;,        -- Command separator used in shell commands
    pushd_cmd = &#39;pushd&#39;,     -- Command to push directory onto stack (e.g., &#39;pushd&#39; for bash/zsh, &#39;enter&#39; for nushell)
    popd_cmd = &#39;popd&#39;,       -- Command to pop directory from stack (e.g., &#39;popd&#39; for bash/zsh, &#39;exit&#39; for nushell)
  },
  -- Command settings
  command = &quot;claude&quot;,        -- Command used to launch Claude Code
  -- Command variants
  command_variants = {
    -- Conversation management
    continue = &quot;--continue&quot;, -- Resume the most recent conversation
    resume = &quot;--resume&quot;,     -- Display an interactive conversation picker

    -- Output options
    verbose = &quot;--verbose&quot;,   -- Enable verbose logging with full turn-by-turn output
  },
  -- Keymaps
  keymaps = {
    toggle = {
      normal = &quot;&amp;lt;C-,&amp;gt;&quot;,       -- Normal mode keymap for toggling Claude Code, false to disable
      terminal = &quot;&amp;lt;C-,&amp;gt;&quot;,     -- Terminal mode keymap for toggling Claude Code, false to disable
      variants = {
        continue = &quot;&amp;lt;leader&amp;gt;cC&quot;, -- Normal mode keymap for Claude Code with continue flag
        verbose = &quot;&amp;lt;leader&amp;gt;cV&quot;,  -- Normal mode keymap for Claude Code with verbose flag
      },
    },
    window_navigation = true, -- Enable window navigation keymaps (&amp;lt;C-h/j/k/l&amp;gt;)
    scrolling = true,         -- Enable scrolling keymaps (&amp;lt;C-f/b&amp;gt;) for page up/down
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; In your Vim/Neovim commands or init file:
:ClaudeCode
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Or from Lua:
vim.cmd[[ClaudeCode]]

-- Or map to a key:
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cc&#39;, &#39;&amp;lt;cmd&amp;gt;ClaudeCode&amp;lt;CR&amp;gt;&#39;, { desc = &#39;Toggle Claude Code&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;Basic command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCode&lt;/code&gt; - Toggle the Claude Code terminal window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conversation management commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeContinue&lt;/code&gt; - Resume the most recent conversation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeResume&lt;/code&gt; - Display an interactive conversation picker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Output options command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeVerbose&lt;/code&gt; - Enable verbose logging with full turn-by-turn output&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Commands are automatically generated for each entry in your &lt;code&gt;command_variants&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;h3&gt;Key Mappings&lt;/h3&gt; 
&lt;p&gt;Default key mappings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ac&lt;/code&gt; - Toggle Claude Code terminal window (normal mode)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-,&amp;gt;&lt;/code&gt; - Toggle Claude Code terminal window (both normal and terminal modes)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Variant mode mappings (if configured):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cC&lt;/code&gt; - Toggle Claude Code with --continue flag&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cV&lt;/code&gt; - Toggle Claude Code with --verbose flag&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally, when in the Claude Code terminal:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt; - Move to the window on the left&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; - Move to the window below&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; - Move to the window above&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; - Move to the window on the right&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; - Scroll full-page down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; - Scroll full-page up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: After scrolling with &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, you&#39;ll need to press the &lt;code&gt;i&lt;/code&gt; key to re-enter insert mode so you can continue typing to Claude Code.&lt;/p&gt; 
&lt;p&gt;When Claude Code modifies files that are open in Neovim, they&#39;ll be automatically reloaded.&lt;/p&gt; 
&lt;h3&gt;Floating Window Example&lt;/h3&gt; 
&lt;p&gt;To use Claude Code in a floating window:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  window = {
    position = &quot;float&quot;,
    float = {
      width = &quot;90%&quot;,      -- Take up 90% of the editor width
      height = &quot;90%&quot;,     -- Take up 90% of the editor height
      row = &quot;center&quot;,     -- Center vertically
      col = &quot;center&quot;,     -- Center horizontally
      relative = &quot;editor&quot;,
      border = &quot;double&quot;,  -- Use double border style
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How it Works&lt;/h2&gt; 
&lt;p&gt;This plugin:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Creates a terminal buffer running the Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;Sets up autocommands to detect file changes on disk&lt;/li&gt; 
 &lt;li&gt;Automatically reloads files when they&#39;re modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;Provides convenient keymaps and commands for toggling the terminal&lt;/li&gt; 
 &lt;li&gt;Automatically detects git repositories and sets working directory to the git root&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please check out our &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; for details on how to get started.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License - See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;For a complete guide on setting up a development environment, installing all required tools, and understanding the project structure, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;p&gt;The project includes comprehensive setup for development:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Complete installation instructions for all platforms in &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pre-commit hooks for code quality&lt;/li&gt; 
 &lt;li&gt;Testing framework with 44 comprehensive tests&lt;/li&gt; 
 &lt;li&gt;Linting and formatting tools&lt;/li&gt; 
 &lt;li&gt;Weekly dependency updates workflow for Claude CLI and actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run tests
make test

# Check code quality
make lint

# Set up pre-commit hooks
scripts/setup-hooks.sh

# Format code
make format
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; - Get help, share ideas, and connect with other users&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;GitHub Issues&lt;/a&gt; - Report bugs or suggest features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/pulls&quot;&gt;GitHub Pull Requests&lt;/a&gt; - Contribute to the project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; by Anthropic - This plugin was entirely built using Claude Code. Development cost: $5.42 with 17m 12.9s of API time&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;Plenary.nvim&lt;/a&gt; - Core dependency for testing framework and Git operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; - Versioning standard used in this project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt; - Code of Conduct standard&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://keepachangelog.com/&quot;&gt;Keep a Changelog&lt;/a&gt; - Changelog format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luals.github.io/wiki/annotations/&quot;&gt;LuaCATS&lt;/a&gt; - Type annotations for better IDE support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JohnnyMorganz/StyLua&quot;&gt;StyLua&lt;/a&gt; - Lua code formatter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lunarmodules/luacheck&quot;&gt;Luacheck&lt;/a&gt; - Lua static analyzer and linter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href=&quot;https://github.com/greggh&quot;&gt;Gregg Housh&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kdheepak/lazygit.nvim</title>
      <link>https://github.com/kdheepak/lazygit.nvim</link>
      <description>&lt;p&gt;Plugin for calling lazygit from within neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lazygit.nvim&lt;/h1&gt; 
&lt;p&gt;Plugin for calling &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;lazygit&lt;/a&gt; from within neovim.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1813121/87866391-79fcfe00-c93e-11ea-94a9-204947de1b39.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/akinsho/nvim-toggleterm.lua#custom-terminals&quot;&gt;akinsho/nvim-toggleterm&lt;/a&gt; or &lt;a href=&quot;https://github.com/voldikss/vim-floaterm&quot;&gt;voldikss/vim-floaterm&lt;/a&gt; as an alternative to this package.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; nvim v0.7.2
Plug &#39;kdheepak/lazygit.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.7.2
use({
    &quot;kdheepak/lazygit.nvim&quot;,
    -- optional for floating window border decoration
    requires = {
        &quot;nvim-lua/plenary.nvim&quot;,
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.8.0
return {
    &quot;kdheepak/lazygit.nvim&quot;,
    lazy = true,
    cmd = {
        &quot;LazyGit&quot;,
        &quot;LazyGitConfig&quot;,
        &quot;LazyGitCurrentFile&quot;,
        &quot;LazyGitFilter&quot;,
        &quot;LazyGitFilterCurrentFile&quot;,
    },
    -- optional for floating window border decoration
    dependencies = {
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    -- setting the keybinding for LazyGit with &#39;keys&#39; is recommended in
    -- order to load the plugin when the command is run for the first time
    keys = {
        { &quot;&amp;lt;leader&amp;gt;lg&quot;, &quot;&amp;lt;cmd&amp;gt;LazyGit&amp;lt;cr&amp;gt;&quot;, desc = &quot;LazyGit&quot; }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Feel free to use any plugin manager. Just remember that if you are not using the latest neovim release, you will need to use &lt;a href=&quot;https://github.com/kdheepak/lazygit.vim/tree/nvim-v0.4.3&quot;&gt;the &lt;code&gt;nvim-v0.4.3&lt;/code&gt; branch&lt;/a&gt;. Integration with &lt;code&gt;nvr&lt;/code&gt; works better on the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;You can check what version of &lt;code&gt;neovim&lt;/code&gt; you have:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvim --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;The following are configuration options and their defaults.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lazygit_floating_window_winblend = 0 &quot; transparency of floating window
let g:lazygit_floating_window_scaling_factor = 0.9 &quot; scaling factor for floating window
let g:lazygit_floating_window_border_chars = [&#39;‚ï≠&#39;,&#39;‚îÄ&#39;, &#39;‚ïÆ&#39;, &#39;‚îÇ&#39;, &#39;‚ïØ&#39;,&#39;‚îÄ&#39;, &#39;‚ï∞&#39;, &#39;‚îÇ&#39;] &quot; customize lazygit popup window border characters
let g:lazygit_floating_window_use_plenary = 0 &quot; use plenary.nvim to manage floating window if available
let g:lazygit_use_neovim_remote = 1 &quot; fallback to 0 if neovim-remote is not installed

let g:lazygit_use_custom_config_file_path = 0 &quot; config file path is evaluated if this value is 1
let g:lazygit_config_file_path = &#39;&#39; &quot; custom config file path
&quot; OR
let g:lazygit_config_file_path = [] &quot; list of custom config file paths
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.lazygit_floating_window_winblend = 0 -- transparency of floating window
vim.g.lazygit_floating_window_scaling_factor = 0.9 -- scaling factor for floating window
vim.g.lazygit_floating_window_border_chars = {&#39;‚ï≠&#39;,&#39;‚îÄ&#39;, &#39;‚ïÆ&#39;, &#39;‚îÇ&#39;, &#39;‚ïØ&#39;,&#39;‚îÄ&#39;, &#39;‚ï∞&#39;, &#39;‚îÇ&#39;} -- customize lazygit popup window border characters
vim.g.lazygit_floating_window_use_plenary = 0 -- use plenary.nvim to manage floating window if available
vim.g.lazygit_use_neovim_remote = 1 -- fallback to 0 if neovim-remote is not installed

vim.g.lazygit_use_custom_config_file_path = 0 -- config file path is evaluated if this value is 1
vim.g.lazygit_config_file_path = &#39;&#39; -- custom config file path
-- OR
vim.g.lazygit_config_file_path = {} -- table of custom config file paths

vim.g.lazygit_on_exit_callback = nil -- optional function callback when exiting lazygit (useful for example to refresh some UI elements after lazy git has made some changes)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Call &lt;code&gt;:LazyGit&lt;/code&gt; to start a floating window with &lt;code&gt;lazygit&lt;/code&gt; in the current working directory. And set up a mapping to call &lt;code&gt;:LazyGit&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; setup mapping to call :LazyGit
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;gg :LazyGit&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Call &lt;code&gt;:LazyGitCurrentFile&lt;/code&gt; to start a floating window with &lt;code&gt;lazygit&lt;/code&gt; in the project root of the current file.&lt;/p&gt; 
&lt;p&gt;Open the configuration file for &lt;code&gt;lazygit&lt;/code&gt; directly from vim.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitConfig&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the file does not exist it&#39;ll load the defaults for you.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1813121/78830902-46721580-79d8-11ea-8809-291b346b6c42.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Open project commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitFilter&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open buffer commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitFilterCurrentFile&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using neovim-remote&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/mhinz/neovim-remote&quot;&gt;neovim-remote&lt;/a&gt; and have configured to use it in neovim, it&#39;ll launch the commit editor inside your neovim instance when you use &lt;code&gt;C&lt;/code&gt; inside &lt;code&gt;lazygit&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pip install neovim-remote&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -n &quot;$NVIM_LISTEN_ADDRESS&quot; ]; then
    alias nvim=nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Set &lt;code&gt;EDITOR&lt;/code&gt; environment variable in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -n &quot;$NVIM_LISTEN_ADDRESS&quot; ]; then
    export VISUAL=&quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
    export EDITOR=&quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
else
    export VISUAL=&quot;nvim&quot;
    export EDITOR=&quot;nvim&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Add the following to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;if has(&#39;nvim&#39;) &amp;amp;&amp;amp; executable(&#39;nvr&#39;)
  let $GIT_EDITOR = &quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
endif
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have &lt;code&gt;neovim-remote&lt;/code&gt; and don&#39;t want &lt;code&gt;lazygit.nvim&lt;/code&gt; to use it, you can disable it using the following configuration option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lazygit_use_neovim_remote = 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using nvim --listen and nvim --server to edit files in same process&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can use vanilla nvim server to edit files in the same nvim instance when you use &lt;code&gt;e&lt;/code&gt; inside &lt;code&gt;lazygit&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You have to start nvim with the &lt;code&gt;--listen&lt;/code&gt; parameter. An easy way to ensure this is to use an alias:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# ~/.bashrc
alias vim=&#39;nvim --listen /tmp/nvim-server.pipe&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;You have to modify lazygit to attempt connecting to existing nvim instance on edit:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# ~/.config/jesseduffield/lazygit/config.yml
os:
  editCommand: &#39;nvim&#39;
  editCommandTemplate: &#39;{{editor}} --server /tmp/nvim-server.pipe --remote-tab &quot;$(pwd)/{{filename}}&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Telescope Plugin&lt;/h3&gt; 
&lt;p&gt;The Telescope plugin is used to track all git repository visited in one nvim session.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why a telescope Plugin&lt;/strong&gt; ?&lt;/p&gt; 
&lt;p&gt;Assuming you have one or more submodule(s) in your project and you want to commit changes in both the submodule(s) and the main repo. Though switching between submodules and main repo is not straight forward. A solution at first could be:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;open a file inside the submodule&lt;/li&gt; 
 &lt;li&gt;open lazygit&lt;/li&gt; 
 &lt;li&gt;do commit&lt;/li&gt; 
 &lt;li&gt;then open a file in the main repo&lt;/li&gt; 
 &lt;li&gt;open lazygit&lt;/li&gt; 
 &lt;li&gt;do commit&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;That is really annoying. Instead, you can open it with telescope.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to use&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.7.2
use({
    &quot;kdheepak/lazygit.nvim&quot;,
    requires = {
        &quot;nvim-telescope/telescope.nvim&quot;,
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    config = function()
        require(&quot;telescope&quot;).load_extension(&quot;lazygit&quot;)
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.8.0
{
    &quot;kdheepak/lazygit.nvim&quot;,
    lazy = false,
    cmd = {
        &quot;LazyGit&quot;,
        &quot;LazyGitConfig&quot;,
        &quot;LazyGitCurrentFile&quot;,
        &quot;LazyGitFilter&quot;,
        &quot;LazyGitFilterCurrentFile&quot;,
    },
    -- optional for floating window border decoration
    dependencies = {
        &quot;nvim-telescope/telescope.nvim&quot;,
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    config = function()
        require(&quot;telescope&quot;).load_extension(&quot;lazygit&quot;)
    end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lazy loading &lt;code&gt;lazygit.nvim&lt;/code&gt; for telescope functionality is not supported. Open an issue if you wish to have this feature.&lt;/p&gt; 
&lt;p&gt;If you are not using Packer, to load the telescope extension, you have to add this line to your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;telescope&#39;).load_extension(&#39;lazygit&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default the paths of each repo is stored only when lazygit is triggered. Though, this may not be convenient, so it possible to do something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;autocmd BufEnter * :lua require(&#39;lazygit.utils&#39;).project_root_dir()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That makes sure that any opened buffer which is contained in a git repo will be tracked.&lt;/p&gt; 
&lt;p&gt;Once you have loaded the extension, you can invoke the plugin using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lua require(&quot;telescope&quot;).extensions.lazygit.lazygit()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Highlighting groups&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Default Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LazyGitFloat&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Float terminal foreground and background&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LazyGitBorder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Float terminal border&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>CopilotC-Nvim/CopilotChat.nvim</title>
      <link>https://github.com/CopilotC-Nvim/CopilotChat.nvim</link>
      <description>&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CopilotC-Nvim/CopilotChat.nvim?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CopilotC-Nvim/CopilotChat.nvim/ci.yml?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://copilotc-nvim.github.io/CopilotChat.nvim/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-up-green.svg?logo=vim&amp;amp;style=for-the-badge&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/#contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&amp;amp;logo=github&amp;amp;label=contributors&amp;amp;style=for-the-badge&quot; alt=&quot;Contributors&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vy6hJsTWaZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1200633211236122665?logo=discord&amp;amp;label=discord&amp;amp;style=for-the-badge&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=for-the-badge&quot; alt=&quot;Dotfyle&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9ee30811-0fb8-4500-91f6-34ea6b26adea&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&quot;&gt;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;CopilotChat.nvim brings GitHub Copilot Chat capabilities directly into Neovim with a focus on transparency and user control.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ü§ñ &lt;strong&gt;Multiple AI Models&lt;/strong&gt; - GitHub Copilot (including GPT-4o, Gemini 2.5 Pro, Claude 4 Sonnet, Claude 3.7 Sonnet, Claude 3.5 Sonnet, o3-mini, o4-mini) + custom providers (Ollama, Mistral.ai). The exact list of available models depends on your &lt;a href=&quot;https://github.com/settings/copilot/features&quot;&gt;GitHub Copilot settings&lt;/a&gt; and the models provided by GitHub&#39;s API.&lt;/li&gt; 
 &lt;li&gt;üîß &lt;strong&gt;Tool Calling&lt;/strong&gt; - LLM can use workspace functions (file reading, git operations, search) with your explicit approval&lt;/li&gt; 
 &lt;li&gt;üîí &lt;strong&gt;Explicit Control&lt;/strong&gt; - Only shares what you specifically request - no background data collection&lt;/li&gt; 
 &lt;li&gt;üìù &lt;strong&gt;Interactive Chat&lt;/strong&gt; - Rich UI with completion, diffs, and quickfix integration&lt;/li&gt; 
 &lt;li&gt;üéØ &lt;strong&gt;Smart Prompts&lt;/strong&gt; - Composable templates and sticky prompts for consistent context&lt;/li&gt; 
 &lt;li&gt;‚ö° &lt;strong&gt;Efficient&lt;/strong&gt; - Smart token usage with tiktoken counting and history management&lt;/li&gt; 
 &lt;li&gt;üîå &lt;strong&gt;Extensible&lt;/strong&gt; - &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/functions&quot;&gt;Custom functions&lt;/a&gt; and &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers&quot;&gt;providers&lt;/a&gt;, plus integrations like &lt;a href=&quot;https://github.com/ravitemer/mcphub.nvim&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim 0.10.0+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl 8.0.0+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/settings/copilot&quot;&gt;Copilot chat in the IDE&lt;/a&gt; enabled in GitHub settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] For Neovim &amp;lt; 0.11.0, add &lt;code&gt;noinsert&lt;/code&gt; or &lt;code&gt;noselect&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; otherwise chat autocompletion will not work. For best autocompletion experience, also add &lt;code&gt;popup&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; (even on Neovim 0.11.0+).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gptlang/lua-tiktoken&quot;&gt;tiktoken_core&lt;/a&gt; - For accurate token counting 
  &lt;ul&gt; 
   &lt;li&gt;Arch Linux: Install &lt;a href=&quot;https://aur.archlinux.org/packages/luajit-tiktoken-bin&quot;&gt;&lt;code&gt;luajit-tiktoken-bin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://aur.archlinux.org/packages/lua51-tiktoken-bin&quot;&gt;&lt;code&gt;lua51-tiktoken-bin&lt;/code&gt;&lt;/a&gt; from AUR&lt;/li&gt; 
   &lt;li&gt;Via luarocks: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Manual: Download from &lt;a href=&quot;https://github.com/gptlang/lua-tiktoken/releases&quot;&gt;lua-tiktoken releases&lt;/a&gt; and save as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in your Lua path&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; - For git diff context features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; - For improved search performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lynx.invisible-island.net/&quot;&gt;lynx&lt;/a&gt; - For improved URL context features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration with pickers&lt;/h2&gt; 
&lt;p&gt;For various plugin pickers to work correctly, you need to replace &lt;code&gt;vim.ui.select&lt;/code&gt; with your desired picker (as the default &lt;code&gt;vim.ui.select&lt;/code&gt; is very basic). Here are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api&quot;&gt;fzf-lua&lt;/a&gt; - call &lt;code&gt;require(&#39;fzf-lua&#39;).register_ui_select()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration&quot;&gt;telescope&lt;/a&gt; - setup &lt;code&gt;telescope-ui-select.nvim&lt;/code&gt; plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md#%EF%B8%8F-config&quot;&gt;snacks.picker&lt;/a&gt; - enable &lt;code&gt;ui_select&lt;/code&gt; config&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick/raw/main/lua/mini/pick.lua#L1229&quot;&gt;mini.pick&lt;/a&gt; - set &lt;code&gt;vim.ui.select = require(&#39;mini.pick&#39;).ui_select&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;CopilotC-Nvim/CopilotChat.nvim&quot;,
    dependencies = {
      { &quot;nvim-lua/plenary.nvim&quot;, branch = &quot;master&quot; },
    },
    build = &quot;make tiktoken&quot;,
    opts = {
      -- See Configuration section for options
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin()
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;
call plug#end()

lua &amp;lt;&amp;lt; EOF
require(&quot;CopilotChat&quot;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Core Concepts&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Resources&lt;/strong&gt; (&lt;code&gt;#&amp;lt;name&amp;gt;&lt;/code&gt;) - Add specific content (files, git diffs, URLs) to your prompt&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; (&lt;code&gt;@&amp;lt;name&amp;gt;&lt;/code&gt;) - Give LLM access to functions it can call with your approval&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sticky Prompts&lt;/strong&gt; (&lt;code&gt;&amp;gt; &amp;lt;text&amp;gt;&lt;/code&gt;) - Persist context across single chat session&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt; (&lt;code&gt;$&amp;lt;model&amp;gt;&lt;/code&gt;) - Specify which AI model to use for the chat&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Prompts&lt;/strong&gt; (&lt;code&gt;/PromptName&lt;/code&gt;) - Use predefined prompt templates for common tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Selection&lt;/strong&gt; - Automatically includes current user selection in prompts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Add specific file to context

#file:src/main.lua

# Give LLM access to workspace tools

@copilot What files are in this project?

# Sticky prompt that persists

&amp;gt; #buffer:current
&amp;gt; You are a helpful coding assistant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use &lt;code&gt;@copilot&lt;/code&gt;, the LLM can call functions like &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;gitdiff&lt;/code&gt; etc. You&#39;ll see the proposed function call and can approve/reject it before execution.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat with optional input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop current output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select prompt templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use specific prompt template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Chat Key Mappings&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Insert&lt;/th&gt; 
   &lt;th&gt;Normal&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Trigger/accept completion menu for tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset and clear the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Submit the current prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle sticky prompt for line under cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all sticky prompts in prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Accept nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Jump to section of nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqa&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all answers from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all diffs from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yank nearest diff to register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show diff between source and nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show info about current chat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show help message&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Some plugins (e.g. &lt;code&gt;copilot.vim&lt;/code&gt;) may also map common keys like &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; in insert mode.&lt;br /&gt; To avoid conflicts, disable Copilot&#39;s default &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; mapping with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.copilot_no_tab_map = true
vim.keymap.set(&#39;i&#39;, &#39;&amp;lt;S-Tab&amp;gt;&#39;, &#39;copilot#Accept(&quot;\\&amp;lt;S-Tab&amp;gt;&quot;)&#39;, { expr = true, replace_keycodes = false })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also customize CopilotChat keymaps in your config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Predefined Functions&lt;/h2&gt; 
&lt;p&gt;All predefined functions belong to the &lt;code&gt;copilot&lt;/code&gt; group.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Example Usage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves content from a specific buffer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#buffer&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetches content from multiple buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#buffers:visible&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;diagnostics&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Collects code diagnostics (errors, warnings)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#diagnostics:current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reads content from a specified file path&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#file:path/to/file&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gitdiff&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves git diff information&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#gitdiff:staged&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gitstatus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves git status information&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#gitstatus&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists filenames matching a pattern in workspace&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#glob:**/*.lua&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Searches for a pattern across files in workspace&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#grep:TODO&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Includes content of files in quickfix list&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#quickfix&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Provides access to specified Vim register&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#register:+&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetches content from a specified URL&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#url:https://...&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Predefined Prompts&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Explain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write detailed explanation of selected code as paragraphs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Review&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Comprehensive code review with line-specific issue reporting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Fix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Identify problems and rewrite code with fixes and explanation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Improve performance and readability with optimization strategy&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Docs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add documentation comments to selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate tests for selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Commit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate commit message with commitizen convention from staged changes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;p&gt;For all available configuration options, see &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/lua/CopilotChat/config.lua&quot;&gt;&lt;code&gt;lua/CopilotChat/config.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Setup&lt;/h2&gt; 
&lt;p&gt;Most users only need to configure a few options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  model = &#39;gpt-4.1&#39;,           -- AI model to use
  temperature = 0.1,           -- Lower = focused, higher = creative
  window = {
    layout = &#39;vertical&#39;,       -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;
    width = 0.5,              -- 50% of screen width
  },
  auto_insert_mode = true,     -- Enter insert mode when opening
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Window &amp;amp; Appearance&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  window = {
    layout = &#39;float&#39;,
    width = 80, -- Fixed width in columns
    height = 20, -- Fixed height in rows
    border = &#39;rounded&#39;, -- &#39;single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;
    title = &#39;ü§ñ AI Assistant&#39;,
    zindex = 100, -- Ensure window stays on top
  },

  headers = {
    user = &#39;üë§ You: &#39;,
    assistant = &#39;ü§ñ Copilot: &#39;,
    tool = &#39;üîß Tool: &#39;,
  },
  separator = &#39;‚îÅ‚îÅ&#39;,
  show_folds = false, -- Disable folding for cleaner look
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Buffer Behavior&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Auto-command to customize chat buffer behavior
vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {
  pattern = &#39;copilot-*&#39;,
  callback = function()
    vim.opt_local.relativenumber = false
    vim.opt_local.number = false
    vim.opt_local.conceallevel = 0
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;p&gt;You can customize colors by setting highlight groups in your config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- In your colorscheme or init.lua
vim.api.nvim_set_hl(0, &#39;CopilotChatHeader&#39;, { fg = &#39;#7C3AED&#39;, bold = true })
vim.api.nvim_set_hl(0, &#39;CopilotChatSeparator&#39;, { fg = &#39;#374151&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Types of copilot highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHeader&lt;/code&gt; - Header highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSeparator&lt;/code&gt; - Separator highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatStatus&lt;/code&gt; - Status and spinner in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHelp&lt;/code&gt; - Help text in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatResource&lt;/code&gt; - Resource highlight in chat buffer (e.g. &lt;code&gt;#file&lt;/code&gt;, &lt;code&gt;#gitdiff&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatTool&lt;/code&gt; - Tool call highlight in chat buffer (e.g. &lt;code&gt;@copilot&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatPrompt&lt;/code&gt; - Prompt highlight in chat buffer (e.g. &lt;code&gt;/Explain&lt;/code&gt;, &lt;code&gt;/Review&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatModel&lt;/code&gt; - Model highlight in chat buffer (e.g. &lt;code&gt;$gpt-4.1&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatUri&lt;/code&gt; - URI highlight in chat buffer (e.g. &lt;code&gt;##https://...&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSelection&lt;/code&gt; - Selection highlight in source buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatAnnotation&lt;/code&gt; - Annotation highlight in chat buffer (file headers, tool call headers, tool call body)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prompts&lt;/h2&gt; 
&lt;p&gt;Define your own prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    MyCustomPrompt = {
      prompt = &#39;Explain how it works.&#39;,
      system_prompt = &#39;You are very good at explaining stuff&#39;,
      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,
      description = &#39;My custom prompt description&#39;,
    },
    Yarrr = {
      system_prompt = &#39;You are fascinated by pirates, so please respond in pirate speak.&#39;,
    },
    NiceInstructions = {
      system_prompt = &#39;You are a nice coding tutor, so please respond in a friendly and helpful manner. {BASE_INSTRUCTIONS}&#39;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Functions&lt;/h2&gt; 
&lt;p&gt;Define your own functions in the configuration with input handling and schema:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  functions = {
    birthday = {
      description = &quot;Retrieves birthday information for a person&quot;,
      uri = &quot;birthday://{name}&quot;,
      schema = {
        type = &#39;object&#39;,
        required = { &#39;name&#39; },
        properties = {
          name = {
            type = &#39;string&#39;,
            enum = { &#39;Alice&#39;, &#39;Bob&#39;, &#39;Charlie&#39; },
            description = &quot;Person&#39;s name&quot;,
          },
        },
      },
      resolve = function(input)
        return {
          {
            uri = &#39;birthday://&#39; .. input.name,
            mimetype = &#39;text/plain&#39;,
            data = input.name .. &#39; birthday info&#39;,
          }
        }
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Selections&lt;/h2&gt; 
&lt;p&gt;Control what content is automatically included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Use visual selection, fallback to current line
  selection = function(source)
    return require(&#39;CopilotChat.select&#39;).visual(source) or
           require(&#39;CopilotChat.select&#39;).line(source)
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Available selections:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).visual&lt;/code&gt; - Current visual selection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).buffer&lt;/code&gt; - Entire buffer content&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).line&lt;/code&gt; - Current line content&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).unnamed&lt;/code&gt; - Unnamed register (last deleted/changed/yanked)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Providers&lt;/h2&gt; 
&lt;p&gt;Add custom AI providers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  providers = {
    my_provider = {
      get_url = function(opts) return &quot;https://api.example.com/chat&quot; end,
      get_headers = function() return { [&quot;Authorization&quot;] = &quot;Bearer &quot; .. api_key } end,
      get_models = function() return { { id = &quot;gpt-4.1&quot;, name = &quot;GPT-4.1 model&quot; } } end,
      prepare_input = require(&#39;CopilotChat.config.providers&#39;).copilot.prepare_input,
      prepare_output = require(&#39;CopilotChat.config.providers&#39;).copilot.prepare_output,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Provider Interface:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Optional: Disable provider
  disabled?: boolean,

  -- Optional: Extra info about the provider displayed in info panel
  get_info?(): string[]

  -- Optional: Get extra request headers with optional expiration time
  get_headers?(): table&amp;lt;string,string&amp;gt;, number?,

  -- Optional: Get API endpoint URL
  get_url?(opts: CopilotChat.Provider.options): string,

  -- Optional: Prepare request input
  prepare_input?(inputs: table&amp;lt;CopilotChat.Provider.input&amp;gt;, opts: CopilotChat.Provider.options): table,

  -- Optional: Prepare response output
  prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,

  -- Optional: Get available models
  get_models?(headers: table): table&amp;lt;CopilotChat.Provider.model&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Built-in providers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot&lt;/code&gt; - GitHub Copilot (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github_models&lt;/code&gt; - GitHub Marketplace models (disabled by default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;API Reference&lt;/h1&gt; 
&lt;h2&gt;Core&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local chat = require(&quot;CopilotChat&quot;)

-- Basic Chat Functions
chat.ask(prompt, config)      -- Ask a question with optional config
chat.response()               -- Get the last response text
chat.resolve_prompt()         -- Resolve prompt references
chat.resolve_functions()      -- Resolve functions that are available for automatic use by LLM (WARN: async, requires plenary.async.run)
chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)

-- Window Management
chat.open(config)             -- Open chat window with optional config
chat.close()                  -- Close chat window
chat.toggle(config)           -- Toggle chat window visibility with optional config
chat.reset()                  -- Reset the chat
chat.stop()                   -- Stop current output

-- Source Management
chat.get_source()             -- Get the current source buffer and window
chat.set_source(winnr)        -- Set the source window

-- Selection Management
chat.get_selection()                                   -- Get the current selection
chat.set_selection(bufnr, start_line, end_line, clear) -- Set or clear selection

-- Prompt &amp;amp; Model Management
chat.select_prompt(config)    -- Open prompt selector with optional config
chat.select_model()           -- Open model selector

-- History Management
chat.load(name, history_path) -- Load chat history
chat.save(name, history_path) -- Save chat history

-- Configuration
chat.setup(config)            -- Update configuration
chat.log_level(level)         -- Set log level (debug, info, etc.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chat Window&lt;/h2&gt; 
&lt;p&gt;You can also access the chat window UI methods through the &lt;code&gt;chat.chat&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local window = require(&quot;CopilotChat&quot;).chat

-- Chat UI State
window:visible()             -- Check if chat window is visible
window:focused()             -- Check if chat window is focused

-- Message Management
window:get_message(role, cursor)               -- Get chat message by role, either last or closest to cursor
window:add_message({ role, content }, replace) -- Add or replace a message in chat
window:remove_message(role, cursor)            -- Remove chat message by role, either last or closest to cursor
window:get_block(role, cursor)                 -- Get code block by role, either last or closest to cursor
window:add_sticky(sticky)                      -- Add sticky prompt to chat message

-- Content Management
window:append(text)          -- Append text to chat window
window:clear()               -- Clear chat window content
window:start()               -- Start writing to chat window
window:finish()              -- Finish writing to chat window

-- Navigation
window:follow()              -- Move cursor to end of chat content
window:focus()               -- Focus the chat window

-- Advanced Features
window:overlay(opts)         -- Show overlay with specified options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Open chat, ask a question and handle response
require(&quot;CopilotChat&quot;).open()
require(&quot;CopilotChat&quot;).ask(&quot;#buffer Explain this code&quot;, {
  callback = function(response)
    vim.notify(&quot;Got response: &quot; .. response:sub(1, 50) .. &quot;...&quot;)
    return response
  end,
})

-- Save and load chat history
require(&quot;CopilotChat&quot;).save(&quot;my_debugging_session&quot;)
require(&quot;CopilotChat&quot;).load(&quot;my_debugging_session&quot;)

-- Use custom sticky and model
require(&quot;CopilotChat&quot;).ask(&quot;How can I optimize this?&quot;, {
  model = &quot;gpt-4.1&quot;,
  sticky = {&quot;#buffer&quot;, &quot;#gitdiff:staged&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips&quot;&gt;examples wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;To set up the environment:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
cd CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Install development dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install pre-commit hooks
make install-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Run tests and lint checks&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gptlang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gptlang&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://productsway.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/870029?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dung Duc Huynh (Kaka)&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qoobes.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Haracic&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://youtube.com/@ziontee113&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tr√≠ Thi·ªán Nguy·ªÖn&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tr√≠ Thi·ªán Nguy·ªÖn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Cassius0924&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;He Zhizhou&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/guruprakashrajakkannu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guruprakash Rajakkannu&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kristofka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140354?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kristofka&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PostCyberPunk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PostCyberPunk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ktns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Katsuhiko Nishimra&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/errnoh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/373946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Erno Hopearuoho&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shaungarwood&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shaun Garwood&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neutrinoA4&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;neutrinoA4&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/banjocat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jack Muratore&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AdrielVelazquez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Adriel Velazquez&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deathbeam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomas Slusny&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nisalvd.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nisal&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.gaardhus.dk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tobias G√•rdhus&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tobias G√•rdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.patreon.com/PetrDlouhy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/156755?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Petr Dlouh√Ω&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouh√Ω&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.dylanmadisetti.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Madisetti&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aweis89&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron Weisberg&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tlacuilose&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Tlacuilo&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kevintraver.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196406?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kevin Traver&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/D7ry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dTry&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.ornew.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Arata Furukawa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lingjie00&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ling&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/frolvanya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59515280?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ivan Frolov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ivan Frolov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=frolvanya&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.folkelemaitre.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/292349?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Folke Lemaitre&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Folke Lemaitre&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GitMurf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64155612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;GitMurf&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;GitMurf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=GitMurf&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dimalip.in&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877858?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dmitrii Lipin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dmitrii Lipin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=festeh&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nvimer.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/41784264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;jinzhongjia&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;jinzhongjia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jinzhongjia&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/guill&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3157454?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;guill&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;guill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=guill&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sjonpaulbrown-cc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81941908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sjon-Paul Brown&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sjon-Paul Brown&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=sjonpaulbrown-cc&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/renxzen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13023797?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renzo Mondrag√≥n&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Renzo Mondrag√≥n&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fjchen7&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10106636?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fjchen7&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;fjchen7&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fjchen7&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/radwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184065?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rados≈Çaw Wo≈∫niak&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rados≈Çaw Wo≈∫niak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=radwo&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JakubPecenka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87969308?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JakubPecenka&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;JakubPecenka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JakubPecenka&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thomastthai&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16532581?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;thomastthai&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;thomastthai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=thomastthai&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lisk.in/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/300342?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tom√°≈° Janou≈°ek&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tom√°≈° Janou≈°ek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=liskin&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Moriango&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43554061?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Toddneal Stallworth&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Toddneal Stallworth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Moriango&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/taketwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1241736?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sergey Alexandrov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sergey Alexandrov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=taketwo&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lemeb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7331643?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;L√©opold Mebazaa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;L√©opold Mebazaa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lemeb&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://atko.space&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14937572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JunKi Jin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;JunKi Jin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=atkodev&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/abdennourzahaf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62243290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;abdennourzahaf&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;abdennourzahaf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=abdennourzahaf&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/josiahdenton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44758384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josiah&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Josiah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=josiahdenton&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tku137&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3052212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tony Fischer&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tony Fischer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qiita.com/program3152019&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64008205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kohei Wada&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kohei Wada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Kohei-Wada&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://zags.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79172513?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sebastian Yaghoubi&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastian Yaghoubi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=syaghoubi00&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/johncming&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11719334?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;johncming&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;johncming&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=johncming&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzonatan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5166666?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rokas Brazd≈æionis&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rokas Brazd≈æionis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dzonatan&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unlimitedsola&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3632663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sola&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThisIsMani&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/84711804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mani Chandra&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mani Chandra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ThisIsMani&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nischalbasuti.github.io/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14853910?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nischal Basuti&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nischal Basuti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nischalbasuti&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://teoljungberg.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/810650?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Teo Ljungberg&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Teo Ljungberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=teoljungberg&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JPricey&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4826348?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Joe Price&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joe Price&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JPricey&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://ouuan.moe/about&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30581822?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Yufan You&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yufan You&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ouuan&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ouuan&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://m4dd0c.netlify.app&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/77256586?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Manish Kumar&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Manish Kumar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=m4dd0c&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.azdanov.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6123841?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Anton ≈Ωdanov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anton ≈Ωdanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=azdanov&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=azdanov&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://fredrikaverpil.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/994357?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Fredrik Averpil&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fredrik Averpil&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fredrikaverpil&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://a14n.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/509703?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron D Borden&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron D Borden&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=adborden&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AtifChy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42291930?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Md. Iftakhar Awal Chowdhury&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Md. Iftakhar Awal Chowdhury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AtifChy&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AtifChy&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/danilohorta&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/214497460?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Danilo Horta&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Danilo Horta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=danilohorta&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://mihamina.rktmb.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/488088?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mihamina Rakotomandimby&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mihamina Rakotomandimby&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rakotomandimby&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h1&gt;Stargazers&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive&quot; alt=&quot;Stargazers over time&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beyond-all-reason/Beyond-All-Reason</title>
      <link>https://github.com/beyond-all-reason/Beyond-All-Reason</link>
      <description>&lt;p&gt;Main game repository for Beyond All Reason.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beyond-All-Reason&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/discord/225695362004811776&quot; alt=&quot;Discord&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Open source RTS game built on top of the Recoil RTS Engine&lt;/p&gt; 
&lt;h2&gt;Where to download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download&quot;&gt;https://www.beyondallreason.info/download&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How to play&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/guides&quot;&gt;https://www.beyondallreason.info/guides&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development Quick Start&lt;/h2&gt; 
&lt;p&gt;Beyond All Reason (BAR), consists of 2 primary components, the lobby (Chobby - &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby&quot;&gt;https://github.com/beyond-all-reason/BYAR-Chobby&lt;/a&gt;) and the game code itself (this repository).&lt;/p&gt; 
&lt;p&gt;The game runs on top of the Recoil engine &lt;a href=&quot;https://github.com/beyond-all-reason/spring&quot;&gt;https://github.com/beyond-all-reason/spring&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to develop the game (this repository) you first need a working install of the lobby/launcher. There are 2 ways to do this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download#How-To-Install&quot;&gt;Download the full BAR application&lt;/a&gt; from the website and run it. This is probably what you will have done if you have previously installed and played the game.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OR if you want to develop the lobby client, follow &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;the guide in the Chobby README&lt;/a&gt;. First download a &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby/releases&quot;&gt;release of Chobby&lt;/a&gt; and then launch Chobby, this will automatically download and install the engine and other dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once you have a working install of BAR you need a local development copy of the game code to work with. This code will live in the BAR install directory.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;To find the BAR install directory simply open the launcher (not full game) and click the &quot;Open install directory&quot; button. This is one of the 3 buttons (&lt;code&gt;Toggle log&lt;/code&gt; and &lt;code&gt;Upload log&lt;/code&gt; are the other 2). For Windows installs this might be your user&#39;s &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory create the empty file &lt;code&gt;devmode.txt&lt;/code&gt;. E.g: &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data/devmode.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory in the &lt;code&gt;data&lt;/code&gt; folder in the &lt;code&gt;games&lt;/code&gt; sub-directory (create &lt;code&gt;games&lt;/code&gt; if it doesn&#39;t exist) clone the code for this repository into a directory with a name ending in &lt;code&gt;.sdd&lt;/code&gt;. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/beyond-all-reason/Beyond-All-Reason.git BAR.sdd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure that you have the correct path by looking for the file &lt;code&gt;Beyond-All-Reason/data/games/BAR.sdd/modinfo.lua&lt;/code&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Now you have the game code launch the full game from the launcher as normal. Then go to &lt;code&gt;Settings &amp;gt; Developer &amp;gt; Singleplayer&lt;/code&gt; and select &lt;code&gt;Beyond All Reason Dev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch a match normally through the game UI. This match will use the dev copy of the LUA code which is in &lt;code&gt;BAR-install-directory/data/games/BAR.sdd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If developing Chobby also clone the code into the &lt;code&gt;games&lt;/code&gt; directory. Follow the guide in the &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;Chobby README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;More on the &lt;code&gt;.sdd&lt;/code&gt; directory to run raw LUA and the structure expected by Spring Engine is &lt;a href=&quot;https://springrts.com/wiki/Gamedev:Structure&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lewis6991/gitsigns.nvim</title>
      <link>https://github.com/lewis6991/gitsigns.nvim</link>
      <description>&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/lewis6991/gitsigns.nvim/actions/workflows/ci.yml/badge.svg?branch=main&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim/shield&quot; alt=&quot;Dotfyle&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Deep buffer integration for Git&lt;/p&gt; 
&lt;h2&gt;üëÄ Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hunk Actions&lt;/th&gt; 
   &lt;th&gt;Line Blame&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&quot; width=&quot;450em&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&quot; width=&quot;450em&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Signs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Adds signs to the sign column to indicate added, changed, and deleted lines.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e49ea0bf-c427-41fb-a67f-77c2d413a7cf&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Supports different signs for staged changes.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/28a3e286-96fa-478c-93a3-8028f9bd7123&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Add counts to signs.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d007b924-6811-44ea-b936-d8da4dc00b68&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Hunk Actions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Stage/unstage hunks with &lt;code&gt;:Gitsigns stage_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Reset hunks with &lt;code&gt;:Gitsigns reset_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Also works on partial hunks in visual mode.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks inline with &lt;code&gt;:Gitsigns preview_hunk_inline&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/60acd664-f4a8-4737-ba65-969f1efa7971&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks in popup with &lt;code&gt;:Gitsigns preview_hunk&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d2a9b801-5857-4054-80a8-195d111f4e8c&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Navigate between hunks with &lt;code&gt;:Gitsigns nav_hunk next/prev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Blame&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Show blame of current buffer using &lt;code&gt;:Gitsigns blame&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7d881e94-6e16-4f98-a526-7e785b11acf9&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in popup with &lt;code&gt;:Gitsigns blame_line&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/03ff7557-b538-4cd1-9478-f893bf7e616e&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in virtual text.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/0c79e880-6a6d-4c3f-aa62-33f734725cfd&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ current_line_blame = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_current_line_blame&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Diff&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Change the revision for the signs with &lt;code&gt;:Gitsigns change_base &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show the diff of the current buffer with the index or any revision with &lt;code&gt;:Gitsigns diffthis &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show intra-line word-diff in the buffer.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/409a1f91-5cee-404b-8b12-66b7db3ecac7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ word_diff = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_word_diff&lt;/code&gt;.&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show hunks Quickfix/Location List&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Set the quickfix/location list with changes with &lt;code&gt;:Gitsign setqflist/setloclist&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c17001a5-b9cf-4a00-9891-5b130c0b4745&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;p&gt;Can show hunks for:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;whole repository (&lt;code&gt;target=all&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;attached buffers (&lt;code&gt;target=attached&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;a specific buffer (&lt;code&gt;target=[integer]&lt;/code&gt;).&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Text Object&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Select hunks as a text object.&lt;/li&gt; 
  &lt;li&gt;Can use &lt;code&gt;vim.keymap.set({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;&amp;lt;Cmd&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Status Line Integration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show different revisions of buffers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use &lt;code&gt;:Gitsigns show &amp;lt;REVISION&amp;gt;&lt;/code&gt; to &lt;code&gt;:edit&lt;/code&gt; the current buffer at &lt;code&gt;&amp;lt;REVISION&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;üìã Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.9.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If your version of Neovim is too old, then you can use a past &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;release&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Newish version of git. Older versions may not work with some features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üõ†Ô∏è Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;p&gt;Install using your package manager of choice. No setup required.&lt;/p&gt; 
&lt;p&gt;Optional configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup {
  signs = {
    add          = { text = &#39;‚îÉ&#39; },
    change       = { text = &#39;‚îÉ&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‚Äæ&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;‚îÜ&#39; },
  },
  signs_staged = {
    add          = { text = &#39;‚îÉ&#39; },
    change       = { text = &#39;‚îÉ&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‚Äæ&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;‚îÜ&#39; },
  },
  signs_staged_enable = true,
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  auto_attach = true,
  attach_to_untracked = false,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;
    delay = 1000,
    ignore_whitespace = false,
    virt_text_priority = 100,
    use_focus = true,
  },
  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%R&amp;gt; - &amp;lt;summary&amp;gt;&#39;,
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    style = &#39;minimal&#39;,
    relative = &#39;cursor&#39;,
    row = 0,
    col = 1
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For information on configuring Neovim via lua please see &lt;a href=&quot;https://neovim.io/doc/user/lua-guide.html&quot;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;üéπ Keymaps&lt;/h3&gt; 
&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; 
&lt;p&gt;Here is a suggested example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup{
  ...
  on_attach = function(bufnr)
    local gitsigns = require(&#39;gitsigns&#39;)

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map(&#39;n&#39;, &#39;]c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;]c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;next&#39;)
      end
    end)

    map(&#39;n&#39;, &#39;[c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;[c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;prev&#39;)
      end
    end)

    -- Actions
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, gitsigns.stage_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, gitsigns.reset_hunk)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, function()
      gitsigns.stage_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, function()
      gitsigns.reset_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gitsigns.stage_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gitsigns.reset_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gitsigns.preview_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hi&#39;, gitsigns.preview_hunk_inline)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function()
      gitsigns.blame_line({ full = true })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gitsigns.diffthis)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function()
      gitsigns.diffthis(&#39;~&#39;)
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hQ&#39;, function() gitsigns.setqflist(&#39;all&#39;) end)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hq&#39;, gitsigns.setqflist)

    -- Toggles
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gitsigns.toggle_current_line_blame)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tw&#39;, gitsigns.toggle_word_diff)

    -- Text object
    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, gitsigns.select_hunk)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üîó Plugin Integrations&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns setloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; 
&lt;h2&gt;üö´ Non-Goals&lt;/h2&gt; 
&lt;h3&gt;Implement every feature in &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; 
&lt;h3&gt;Support for other VCS&lt;/h3&gt; 
&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; 
&lt;h2&gt;üîå Similar plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neoclide/coc-git&quot;&gt;coc-git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- links --&gt;</description>
    </item>
    
    <item>
      <title>nvim-java/nvim-java</title>
      <link>https://github.com/nvim-java/nvim-java</link>
      <description>&lt;p&gt;Painless Java in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;‚òï&lt;/span&gt; nvim-java&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&amp;amp;logo=spring&amp;amp;logoColor=white&quot; alt=&quot;Spring&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=openjdk&amp;amp;logoColor=white&quot; alt=&quot;Java&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Gradle-02303A.svg?style=for-the-badge&amp;amp;logo=Gradle&amp;amp;logoColor=white&quot; alt=&quot;Gradle&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Apache%20Maven-C71A36?style=for-the-badge&amp;amp;logo=Apache%20Maven&amp;amp;logoColor=white&quot; alt=&quot;Apache Maven&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&quot; alt=&quot;Neovim&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&quot; alt=&quot;Lua&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Just install and start writing &lt;code&gt;public static void main(String[] args)&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] You cannot use &lt;code&gt;nvim-java&lt;/code&gt; alongside &lt;code&gt;nvim-jdtls&lt;/code&gt;. So remove &lt;code&gt;nvim-jdtls&lt;/code&gt; before installing this&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can find cool tips &amp;amp; tricks here &lt;a href=&quot;https://github.com/nvim-java/nvim-java/wiki/Tips-&amp;amp;-Tricks&quot;&gt;https://github.com/nvim-java/nvim-java/wiki/Tips-&amp;amp;-Tricks&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you are facing errors while using, please check troubleshoot wiki &lt;a href=&quot;https://github.com/nvim-java/nvim-java/wiki/Troubleshooting&quot;&gt;https://github.com/nvim-java/nvim-java/wiki/Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;üì¢&lt;/span&gt; Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nvim-java/nvim-java/assets/18459807/047c8c46-9a0a-4869-b342-d5c2e15647bc&quot;&gt;https://github.com/nvim-java/nvim-java/assets/18459807/047c8c46-9a0a-4869-b342-d5c2e15647bc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üí´&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Spring Boot Tools&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Diagnostics &amp;amp; Auto Completion&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Automatic Debug Configuration&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Organize Imports &amp;amp; Code Formatting&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Running Tests&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Run &amp;amp; Debug Profiles&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;a href=&quot;https://github.com/nvim-java/nvim-java/wiki/Tips-&amp;amp;-Tricks#running-code-actions&quot;&gt;Code Actions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;üí°&lt;/span&gt; Why&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Everything necessary will be installed automatically&lt;/li&gt; 
 &lt;li&gt;Uses &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; to setup &lt;code&gt;jdtls&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Realtime server settings updates is possible using &lt;a href=&quot;https://github.com/folke/neoconf.nvim&quot;&gt;neoconf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Auto loads necessary &lt;code&gt;jdtls&lt;/code&gt; plugins 
  &lt;ul&gt; 
   &lt;li&gt;Supported plugins are, 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;spring-boot-tools&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;lombok&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;java-test&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;java-debug-adapter&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;üî®&lt;/span&gt; How to Install&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;h3&gt;Starter Configs (Recommend for newbies)&lt;/h3&gt; 
 &lt;p&gt;Following are forks of original repositories pre-configured for java. If you don&#39;t know how to get started, use one of the following to get started. You can click on &lt;strong&gt;n commits ahead of&lt;/strong&gt; link to see the changes made on top of the original project&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-java/starter-lazyvim&quot;&gt;LazyVim&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-java/starter-kickstart&quot;&gt;Kickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-java/starter-astronvim&quot;&gt;AstroNvim&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Custom Configuration Instructions&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install the plugin&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {&#39;nvim-java/nvim-java&#39;}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Setup nvim-java before &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Setup jdtls like you would usually do&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lspconfig&#39;).jdtls.setup({})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Yep! That&#39;s all :)&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;‚å®&lt;/span&gt; Commands&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;h3&gt;Build&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaBuildBuildWorkspace&lt;/code&gt; - Runs a full workspace build&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaBuildCleanWorkspace&lt;/code&gt; - Clear the workspace cache (for now you have to close and reopen to restart the language server after the deletion)&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Runner&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaRunnerRunMain&lt;/code&gt; - Runs the application or selected main class (if there are multiple main classes)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:JavaRunnerRunMain
:JavaRunnerRunMain &amp;lt;arguments&amp;gt; &amp;lt;to&amp;gt; &amp;lt;pass&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaRunnerStopMain&lt;/code&gt; - Stops the running application&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaRunnerToggleLogs&lt;/code&gt; - Toggle between show &amp;amp; hide runner log window&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;DAP&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaDapConfig&lt;/code&gt; - DAP is autoconfigured on start up, but in case you want to force configure it again, you can use this API&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Test&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaTestRunCurrentClass&lt;/code&gt; - Run the test class in the active buffer&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaTestDebugCurrentClass&lt;/code&gt; - Debug the test class in the active buffer&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaTestRunCurrentMethod&lt;/code&gt; - Run the test method on the cursor&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaTestDebugCurrentMethod&lt;/code&gt; - Debug the test method on the cursor&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaTestViewLastReport&lt;/code&gt; - Open the last test report in a popup window&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Profiles&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaProfile&lt;/code&gt; - Opens the profiles UI&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Refactor&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaRefactorExtractVariable&lt;/code&gt; - Create a variable from value at cursor/selection&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaRefactorExtractVariableAllOccurrence&lt;/code&gt; - Create a variable for all occurrences from value at cursor/selection&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaRefactorExtractConstant&lt;/code&gt; - Create a constant from the value at cursor/selection&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaRefactorExtractMethod&lt;/code&gt; - Create a method from the value at cursor/selection&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JavaRefactorExtractField&lt;/code&gt; - Create a field from the value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Settings&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;JavaSettingsChangeRuntime&lt;/code&gt; - Change the JDK version to another&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;üíª&lt;/span&gt; APIs&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;h3&gt;Build&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;build.build_workspace&lt;/code&gt; - Runs a full workspace build&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).build.build_workspace()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;build.clean_workspace&lt;/code&gt; - Clear the workspace cache (for now you have to close and reopen to restart the language server after the deletion)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).build.clean_workspace()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Runner&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;built_in.run_app&lt;/code&gt; - Runs the application or selected main class (if there are multiple main classes)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).runner.built_in.run_app({})
require(&#39;java&#39;).runner.built_in.run_app({&#39;arguments&#39;, &#39;to&#39;, &#39;pass&#39;, &#39;to&#39;, &#39;main&#39;})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;built_in.stop_app&lt;/code&gt; - Stops the running application&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).runner.built_in.stop_app()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;built_in.toggle_logs&lt;/code&gt; - Toggle between show &amp;amp; hide runner log window&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).runner.built_in.toggle_logs()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;DAP&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;config_dap&lt;/code&gt; - DAP is autoconfigured on start up, but in case you want to force configure it again, you can use this API&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).dap.config_dap()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Test&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;run_current_class&lt;/code&gt; - Run the test class in the active buffer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).test.run_current_class()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;debug_current_class&lt;/code&gt; - Debug the test class in the active buffer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).test.debug_current_class()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;run_current_method&lt;/code&gt; - Run the test method on the cursor&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).test.run_current_method()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;debug_current_method&lt;/code&gt; - Debug the test method on the cursor&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).test.debug_current_method()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;view_report&lt;/code&gt; - Open the last test report in a popup window&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).test.view_last_report()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Profiles&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).profile.ui()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Refactor&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;extract_variable&lt;/code&gt; - Create a variable from value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).refactor.extract_variable()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;extract_variable_all_occurrence&lt;/code&gt; - Create a variable for all occurrences from value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).refactor.extract_variable_all_occurrence()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;extract_constant&lt;/code&gt; - Create a constant from the value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).refactor.extract_constant()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;extract_method&lt;/code&gt; - Create method from the value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).refactor.extract_method()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;extract_field&lt;/code&gt; - Create a field from the value at cursor/selection&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).refactor.extract_field()
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Settings&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;change_runtime&lt;/code&gt; - Change the JDK version to another&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;java&#39;).settings.change_runtime()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;üóú&lt;/span&gt; How to Use JDK X.X Version?&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;h3&gt;Method 1&lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/folke/neoconf.nvim&quot;&gt;Neoconf&lt;/a&gt; can be used to manage LSP setting including jdtls. Neoconf allows global configuration as well as project-wise configurations. Here is how you can set Jdtls setting on &lt;code&gt;neoconf.json&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;lspconfig&quot;: {
    &quot;jdtls&quot;: {
      &quot;java.configuration.runtimes&quot;: [
        {
          &quot;name&quot;: &quot;JavaSE-21&quot;,
          &quot;path&quot;: &quot;/opt/jdk-21&quot;,
          &quot;default&quot;: true
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Method 2&lt;/h3&gt; 
 &lt;p&gt;Pass the settings to Jdtls setup.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lspconfig&#39;).jdtls.setup({
  settings = {
    java = {
      configuration = {
        runtimes = {
          {
            name = &quot;JavaSE-21&quot;,
            path = &quot;/opt/jdk-21&quot;,
            default = true,
          }
        }
      }
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;üîß&lt;/span&gt; Configuration&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;p&gt;For most users changing the default configuration is not necessary. But if you want, following options are available&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  --  list of file that exists in root of the project
  root_markers = {
    &#39;settings.gradle&#39;,
    &#39;settings.gradle.kts&#39;,
    &#39;pom.xml&#39;,
    &#39;build.gradle&#39;,
    &#39;mvnw&#39;,
    &#39;gradlew&#39;,
    &#39;build.gradle&#39;,
    &#39;build.gradle.kts&#39;,
    &#39;.git&#39;,
  },

  jdtls = {
    version = &#39;v1.43.0&#39;,
  },

  lombok = {
    version = &#39;nightly&#39;,
  },

  -- load java test plugins
  java_test = {
    enable = true,
    version = &#39;0.40.1&#39;,
  },

  -- load java debugger plugins
  java_debug_adapter = {
    enable = true,
    version = &#39;0.58.1&#39;,
  },

  spring_boot_tools = {
    enable = true,
    version = &#39;1.55.1&#39;,
  },

  jdk = {
    -- install jdk using mason.nvim
    auto_install = true,
    version = &#39;17.0.2&#39;,
  },

  notifications = {
    -- enable &#39;Configuring DAP&#39; &amp;amp; &#39;DAP configured&#39; messages on start up
    dap = true,
  },

  -- We do multiple verifications to make sure things are in place to run this
  -- plugin
  verification = {
    -- nvim-java checks for the order of execution of following
    -- * require(&#39;java&#39;).setup()
    -- * require(&#39;lspconfig&#39;).jdtls.setup()
    -- IF they are not executed in the correct order, you will see a error
    -- notification.
    -- Set following to false to disable the notification if you know what you
    -- are doing
    invalid_order = true,

    -- nvim-java checks if the require(&#39;java&#39;).setup() is called multiple
    -- times.
    -- IF there are multiple setup calls are executed, an error will be shown
    -- Set following property value to false to disable the notification if
    -- you know what you are doing
    duplicate_setup_calls = true,

    -- nvim-java checks if nvim-java/mason-registry is added correctly to
    -- mason.nvim plugin.
    -- IF it&#39;s not registered correctly, an error will be thrown and nvim-java
    -- will stop setup
    invalid_mason_registry = false,
  },

  mason = {
    -- These mason registries will be prepended to the existing mason
    -- configuration
    registries = {
      &#39;github:nvim-java/mason-registry&#39;,
    },
  },
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;‚õ≥&lt;/span&gt; Architecture&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;span&gt;üî∏&lt;/span&gt;details&lt;/summary&gt; 
 &lt;p&gt;Following is the high level idea. Jdtls is the language server nvim-java communicates with. However, we don&#39;t have all the features we need just in Jdtls. So, we are loading java-test &amp;amp; java-debug-adapter extensions when we launch Jdtls. Once the language server is started, we communicate with the language server to do stuff.&lt;/p&gt; 
 &lt;p&gt;For instance, to run the current test,&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Request Jdtls for test classes&lt;/li&gt; 
  &lt;li&gt;Request Jdtls for class paths, module paths, java executable&lt;/li&gt; 
  &lt;li&gt;Request Jdtls to start a debug session and send the port of the session back&lt;/li&gt; 
  &lt;li&gt;Prepare TCP connections to listen to the test results&lt;/li&gt; 
  &lt;li&gt;Start nvim-dap and let user interactions to be handled by nvim-dap&lt;/li&gt; 
  &lt;li&gt;Parse the test results as they come in&lt;/li&gt; 
  &lt;li&gt;Once the execution is done, open a window show the test results&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
  ‚îÇ            ‚îÇ                         ‚îÇ            ‚îÇ
  ‚îÇ   Neovim   ‚îÇ                         ‚îÇ   VSCode   ‚îÇ
  ‚îÇ            ‚îÇ                         ‚îÇ            ‚îÇ
  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ               ‚îÇ                ‚îÇ                             ‚îÇ
‚îÇ   nvim-java   ‚îÇ                ‚îÇ   Extension Pack for Java   ‚îÇ
‚îÇ               ‚îÇ                ‚îÇ                             ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ                                       ‚îÇ
        ‚îÇ              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îÇ
        ‚îÇ              ‚îÇ           ‚îÇ            ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫   JDTLS   ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                       ‚îÇ           ‚îÇ
                       ‚îî‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îò
                           ‚îÇ   ‚îÇ
                           ‚îÇ   ‚îÇ
                           ‚îÇ   ‚îÇ
                           ‚îÇ   ‚îÇ
                           ‚îÇ   ‚îÇ
  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îÇ   ‚îÇ         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
  ‚îÇ               ‚îÇ        ‚îÇ   ‚îÇ         ‚îÇ                        ‚îÇ
  ‚îÇ   java-test   ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫   java-debug-adapter   ‚îÇ
  ‚îÇ               ‚îÇ                      ‚îÇ                        ‚îÇ
  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;&lt;span&gt;üìë&lt;/span&gt; Projects Acknowledgement&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/JavaHello/spring-boot.nvim&quot;&gt;spring-boot.nvim&lt;/a&gt; is the one that starts sts4 &amp;amp; do other necessary &lt;code&gt;jdtls&lt;/code&gt; &lt;code&gt;sts4&lt;/code&gt; sync command registration in &lt;code&gt;nvim-java&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-jdtls&quot;&gt;nvim-jdtls&lt;/a&gt; is a plugin that follows &quot;Keep it simple, stupid!&quot; approach. If you love customizing things by yourself, then give nvim-jdtls a try.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] You cannot use &lt;code&gt;nvim-java&lt;/code&gt; alongside &lt;code&gt;nvim-jdtls&lt;/code&gt;. So remove &lt;code&gt;nvim-jdtls&lt;/code&gt; before installing this&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>vague2k/vague.nvim</title>
      <link>https://github.com/vague2k/vague.nvim</link>
      <description>&lt;p&gt;A cool, dark, low contrast colorscheme for Neovim. Pastel yet vivid, like a fleeting memory...&lt;/p&gt;&lt;hr&gt;&lt;img width=&quot;1582&quot; alt=&quot;Screenshot 2025-05-24 at 1 44 17‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/8145d76e-3040-4bee-b6bf-3c65140f4786&quot; /&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;vague2k/vague.nvim&quot;,
  lazy = false, -- make sure we load this during startup if it is your main colorscheme
  priority = 1000, -- make sure to load this before all the other plugins
  config = function()
    -- NOTE: you do not need to call setup if you don&#39;t want to.
    require(&quot;vague&quot;).setup({
      -- optional configuration here
    })
    vim.cmd(&quot;colorscheme vague&quot;)
  end
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using Neovim 0.12 built-in plugin manager &lt;code&gt;vim.pack&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add({
  &quot;https://github.com/vague2k/vague.nvim&quot;,
})

require(&quot;vague&quot;).setup({
    -- optional configuration here
})

vim.cmd(&quot;colorscheme vague&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Default configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;vague&quot;).setup({
  transparent = false, -- don&#39;t set background
  -- disable bold/italic globally in `style`
  bold = true,
  italic = true,
  style = {
    -- &quot;none&quot; is the same thing as default. But &quot;italic&quot; and &quot;bold&quot; are also valid options
    boolean = &quot;bold&quot;,
    number = &quot;none&quot;,
    float = &quot;none&quot;,
    error = &quot;bold&quot;,
    comments = &quot;italic&quot;,
    conditionals = &quot;none&quot;,
    functions = &quot;none&quot;,
    headings = &quot;bold&quot;,
    operators = &quot;none&quot;,
    strings = &quot;italic&quot;,
    variables = &quot;none&quot;,

    -- keywords
    keywords = &quot;none&quot;,
    keyword_return = &quot;italic&quot;,
    keywords_loop = &quot;none&quot;,
    keywords_label = &quot;none&quot;,
    keywords_exception = &quot;none&quot;,

    -- builtin
    builtin_constants = &quot;bold&quot;,
    builtin_functions = &quot;none&quot;,
    builtin_types = &quot;bold&quot;,
    builtin_variables = &quot;none&quot;,
  },
  -- plugin styles where applicable
  -- make an issue/pr if you&#39;d like to see more styling options!
  plugins = {
    cmp = {
      match = &quot;bold&quot;,
      match_fuzzy = &quot;bold&quot;,
    },
    dashboard = {
      footer = &quot;italic&quot;,
    },
    lsp = {
      diagnostic_error = &quot;bold&quot;,
      diagnostic_hint = &quot;none&quot;,
      diagnostic_info = &quot;italic&quot;,
      diagnostic_ok = &quot;none&quot;,
      diagnostic_warn = &quot;bold&quot;,
    },
    neotest = {
      focused = &quot;bold&quot;,
      adapter_name = &quot;bold&quot;,
    },
    telescope = {
      match = &quot;bold&quot;,
    },
  },

  -- Override highlights or add new highlights
  on_highlights = function(highlights, colors) end,

  -- Override colors
  colors = {
    bg = &quot;#141415&quot;,
    fg = &quot;#cdcdcd&quot;,
    floatBorder = &quot;#878787&quot;,
    line = &quot;#252530&quot;,
    comment = &quot;#606079&quot;,
    builtin = &quot;#b4d4cf&quot;,
    func = &quot;#c48282&quot;,
    string = &quot;#e8b589&quot;,
    number = &quot;#e0a363&quot;,
    property = &quot;#c3c3d5&quot;,
    constant = &quot;#aeaed1&quot;,
    parameter = &quot;#bb9dbd&quot;,
    visual = &quot;#333738&quot;,
    error = &quot;#d8647e&quot;,
    warning = &quot;#f3be7c&quot;,
    hint = &quot;#7e98e8&quot;,
    operator = &quot;#90a0b5&quot;,
    keyword = &quot;#6e94b2&quot;,
    type = &quot;#9bb4bc&quot;,
    search = &quot;#405065&quot;,
    plus = &quot;#7fa563&quot;,
    delta = &quot;#f3be7c&quot;,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Explicitly Supported plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;Blink-cmp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;Cmp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvimdev/dashboard-nvim&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;Diffview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;Lualine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;Neotest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;Telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;Treesitter-context&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;Snacks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hiphish/rainbow-delimiters.nvim&quot;&gt;Rainbow delimiters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;Mini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntpeters/vim-better-whitespace&quot;&gt;Vim-better-whitespace&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extras&lt;/h2&gt; 
&lt;p&gt;Extra color configs for other tools can be found in &lt;a href=&quot;https://raw.githubusercontent.com/vague2k/vague.nvim/main/extras/&quot;&gt;extras&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PR&#39;s are welcome and encouraged.&lt;/p&gt; 
&lt;p&gt;If you would like to propose support for a specific plugin, you can make a PR with your modifications to the &lt;code&gt;lua/vague/groups&lt;/code&gt; directory&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot; /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;üí§ lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üî• Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;üí§ Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üöÄ Blazingly fast&lt;/li&gt; 
 &lt;li&gt;üßπ Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;üì¶ Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;üìÇ File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
‚îú‚îÄ‚îÄ lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ config
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ autocmds.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ keymaps.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ lazy.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ options.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ plugins
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ spec1.lua
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ **
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ spec2.lua
‚îî‚îÄ‚îÄ init.lua
&lt;/pre&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

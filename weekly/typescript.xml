<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub TypeScript Weekly Trending</title>
    <description>Weekly Trending of TypeScript in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:50:07 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>idosal/git-mcp</title>
      <link>https://github.com/idosal/git-mcp</link>
      <description>&lt;p&gt;Put an end to code hallucinations! GitMCP is a free, open-source, remote MCP server for any GitHub project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitMCP&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;884&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/2bf3e3df-556c-49c6-ab7b-36c279d53bba&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-what-is-gitmcp&quot;&gt;What is GitMCP&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-features&quot;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-getting-started&quot;&gt;Getting Started&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-how-it-works&quot;&gt;How It Works&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-badge&quot;&gt;Badge&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-examples&quot;&gt;Examples&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-faq&quot;&gt;FAQ&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-privacy&quot;&gt;Privacy&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-contributing&quot;&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/#-license&quot;&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://gitmcp.io/idosal/git-mcp&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://gitmcp.io/badge/idosal/git-mcp&quot; alt=&quot;GitMCP&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/idosal1&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/idosal1?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/liadyosef&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/liadyosef?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.pulsemcp.com/servers/idosal-git-mcp&quot;&gt;&lt;img src=&quot;https://www.pulsemcp.com/badge/top-pick/idosal-git-mcp&quot; width=&quot;400&quot; alt=&quot;Pulse MCP Badge&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;ü§î What is GitMCP?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stop vibe-hallucinating and start vibe-coding!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitmcp.io&quot;&gt;GitMCP&lt;/a&gt; is a free, open-source, remote &lt;a href=&quot;https://docs.anthropic.com/en/docs/agents-and-tools/mcp&quot;&gt;Model Context Protocol (MCP)&lt;/a&gt; server that transforms &lt;strong&gt;any&lt;/strong&gt; GitHub project (repositories or GitHub pages) into a documentation hub. It enables AI tools like Cursor to access up-to-date documentation and code, even if the LLM has never encountered them, thereby eliminating code hallucinations seamlessly.&lt;/p&gt; 
&lt;p&gt;GitMCP supports &lt;strong&gt;two flavors&lt;/strong&gt; -&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Specific Repository (&lt;code&gt;gitmcp.io/{owner}/{repo}&lt;/code&gt; or &lt;code&gt;{owner}.gitmcp.io/{repo}&lt;/code&gt;):&lt;/strong&gt; Use these when you primarily work with a select number of libraries. This ensures your AI assistant always targets the correct project, enhancing security and relevance by preventing access to unintended repositories.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Generic Server (&lt;code&gt;gitmcp.io/docs&lt;/code&gt;):&lt;/strong&gt; Use this for maximum flexibility when you need to switch between different repositories frequently. The AI assistant will prompt you (or decide based on context) which repository to access for each request. Be mindful that this relies on correctly identifying the target repository each time.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;With GitMCP:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI assistants access the &lt;em&gt;latest&lt;/em&gt; documentation and code directly from the source.&lt;/li&gt; 
 &lt;li&gt;Get accurate API usage and reliable code examples.&lt;/li&gt; 
 &lt;li&gt;Work effectively even with niche, new, or rapidly changing libraries.&lt;/li&gt; 
 &lt;li&gt;Significantly reduced hallucinations and improved code correctness.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, this side-by-side comparison shows the result for the same one-shot prompt in Cursor when creating a &lt;a href=&quot;https://github.com/mrdoob/three.js&quot;&gt;three.js&lt;/a&gt; scene -&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/fbf1b4a7-f9f0-4c0e-831c-4d64faae2c45&quot;&gt;https://github.com/user-attachments/assets/fbf1b4a7-f9f0-4c0e-831c-4d64faae2c45&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üòé &lt;strong&gt;Latest Documentation on ANY GitHub Project&lt;/strong&gt;: Grant your AI assistant seamless access to the GitHub project&#39;s documentation and code. The built-in smart search capabilities help find exactly what the AI needs without using too many tokens!&lt;/li&gt; 
 &lt;li&gt;üß† &lt;strong&gt;No More Hallucinations&lt;/strong&gt;: With GitMCP, your AI assistant can provide accurate and relevant answers to your questions.&lt;/li&gt; 
 &lt;li&gt;‚òÅÔ∏è &lt;strong&gt;Zero Setup&lt;/strong&gt;: GitMCP runs in the cloud. Simply add the chosen GitMCP URL as an MCP server in your IDE ‚Äî no downloads, installations, signups, or changes are required.&lt;/li&gt; 
 &lt;li&gt;üí¨ &lt;strong&gt;Embedded Chat&lt;/strong&gt;: Start quickly by chatting directly with the repository&#39;s documentation through our in-browser chat!&lt;/li&gt; 
 &lt;li&gt;‚úÖ &lt;strong&gt;Open, Free, and Private&lt;/strong&gt;: GitMCP is open-source and completely free to use. It doesn&#39;t collect personal information or store queries. You can even self-host it!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;video src=&quot;https://github.com/user-attachments/assets/2c3afaf9-6c08-436e-9efd-db8710554430&quot;&gt;&lt;/video&gt;&lt;/p&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;p&gt;Using GitMCP is easy! Simply follow these steps:&lt;/p&gt; 
&lt;h3&gt;Step 1: Choose the type of server you want&lt;/h3&gt; 
&lt;p&gt;Choose one of these URL formats depending on what you want to connect to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For GitHub repositories: &lt;code&gt;gitmcp.io/{owner}/{repo}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For GitHub Pages sites: &lt;code&gt;{owner}.gitmcp.io/{repo}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For a generic tool that supports any repository (dynamic): &lt;code&gt;gitmcp.io/docs&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Replace &lt;code&gt;{owner}&lt;/code&gt; with the GitHub username or organization name, and &lt;code&gt;{repo}&lt;/code&gt; with the repository name.&lt;/p&gt; 
&lt;p&gt;For your convenience, you can also use the conversion tool on the landing page to format the GitHub URL into an MCP URL!&lt;/p&gt; 
&lt;h3&gt;Step 2: Connect your AI assistant&lt;/h3&gt; 
&lt;p&gt;Select your AI assistant from the options below and follow the configuration instructions:&lt;/p&gt; 
&lt;h4&gt;Connecting Cursor&lt;/h4&gt; 
&lt;p&gt;Update your Cursor configuration file at &lt;code&gt;~/.cursor/mcp.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;gitmcp&quot;: {
      &quot;url&quot;: &quot;https://gitmcp.io/{owner}/{repo}&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting Claude Desktop&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Claude Desktop, go to Settings &amp;gt; Developer &amp;gt; Edit Config&lt;/li&gt; 
 &lt;li&gt;Replace the configuration with: &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;gitmcp&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;mcp-remote&quot;,
        &quot;https://gitmcp.io/{owner}/{repo}&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Connecting Windsurf&lt;/h4&gt; 
&lt;p&gt;Update your Windsurf configuration file at &lt;code&gt;~/.codeium/windsurf/mcp_config.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;gitmcp&quot;: {
      &quot;serverUrl&quot;: &quot;https://gitmcp.io/{owner}/{repo}&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting VSCode&lt;/h4&gt; 
&lt;p&gt;Update your VSCode configuration file at &lt;code&gt;.vscode/mcp.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;servers&quot;: {
    &quot;gitmcp&quot;: {
      &quot;type&quot;: &quot;sse&quot;,
      &quot;url&quot;: &quot;https://gitmcp.io/{owner}/{repo}&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting Cline&lt;/h4&gt; 
&lt;p&gt;Update your Cline configuration file at &lt;code&gt;~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;gitmcp&quot;: {
      &quot;url&quot;: &quot;https://gitmcp.io/{owner}/{repo}&quot;,
      &quot;disabled&quot;: false,
      &quot;autoApprove&quot;: []
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting Highlight AI&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Highlight AI and click the plugins icon (@ symbol) in the sidebar&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;Installed Plugins&lt;/strong&gt; at the top of the sidebar&lt;/li&gt; 
 &lt;li&gt;Select &lt;strong&gt;Custom Plugin&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;Add a plugin using a custom SSE URL&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Plugin name: &lt;code&gt;gitmcp&lt;/code&gt; SSE URL: &lt;code&gt;https://gitmcp.io/{owner}/{repo}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For more details on adding custom MCP servers to HighlightAI, refer to &lt;a href=&quot;https://docs.highlightai.com/learn/developers/plugins/custom-plugins-setup&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Connecting Augment Code&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Augment Code settings&lt;/li&gt; 
 &lt;li&gt;Navigate to the MCP section&lt;/li&gt; 
 &lt;li&gt;Add a new MCP server with the following details:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Name the MCP server: &lt;code&gt;git-mcp Docs&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Use this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx mcp-remote https://gitmcp.io/{owner}/{repo}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or use the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;git-mcp Docs&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;mcp-remote&quot;,
        &quot;https://gitmcp.io/{owner}/{repo}&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connecting Msty AI&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Msty Studio&lt;/li&gt; 
 &lt;li&gt;Go to Tools &amp;gt; Import Tools from JSON Clipboard&lt;/li&gt; 
 &lt;li&gt;Paste the following configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcpServers&quot;: {
    &quot;git-mcp Docs&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;mcp-remote&quot;,
        &quot;https://gitmcp.io/{owner}/{repo}&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more details on configuring MCP servers in Augment Code, visit &lt;a href=&quot;https://docs.augmentcode.com/setup-augment/mcp&quot;&gt;the Augment Code documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember to replace &lt;code&gt;{owner}&lt;/code&gt; and &lt;code&gt;{repo}&lt;/code&gt; with the actual GitHub username/organization and repository name. You can also use the dynamic endpoint &lt;code&gt;https://gitmcp.io/docs&lt;/code&gt; to allow your AI to access any repository on demand.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;‚öô How It Works&lt;/h2&gt; 
&lt;p&gt;GitMCP connects your AI assistant to GitHub repositories using the Model Context Protocol (MCP), a standard that lets AI tools request additional information from external sources.&lt;/p&gt; 
&lt;p&gt;What happens when you use GitMCP:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;You provide the GitMCP URL&lt;/strong&gt; to your AI assistant (e.g., &lt;code&gt;gitmcp.io/microsoft/typescript&lt;/code&gt;). GitMCP exposes tools like documentation fetching, smart search, code search, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Prompt the AI assistant&lt;/strong&gt; on documentation/code-related questions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your AI sends requests&lt;/strong&gt; to GitMCP to use its tools (with your approval).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitMCP executes the AI&#39;s request&lt;/strong&gt; and returns the requested data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your AI receives the information&lt;/strong&gt; and generates a more accurate, grounded response without hallucinations.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Supported Documentation&lt;/h3&gt; 
&lt;p&gt;GitMCP currently supports the following documents (in order of priority):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://llmstxt.org&quot;&gt;llms.txt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AI-optimized version of the project&#39;s documentation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;/root&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;üí° Examples&lt;/h2&gt; 
&lt;p&gt;Here are some examples of how to use GitMCP with different AI assistants and repositories:&lt;/p&gt; 
&lt;h3&gt;Example 1: Using Windsurf with a specific repository&lt;/h3&gt; 
&lt;p&gt;For the GitHub repository &lt;code&gt;https://github.com/microsoft/playwright-mcp&lt;/code&gt;, add &lt;code&gt;https://gitmcp.io/microsoft/playwright-mcp&lt;/code&gt; as an MCP server to Windsurf.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prompt to Claude:&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&quot;How do I use the Playwright MCP&quot;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Windsurf will pull the relevant documentation from GitMCP to implement the memory feature correctly.&lt;/p&gt; 
&lt;h3&gt;Example 2: Using Cursor with a GitHub Pages site&lt;/h3&gt; 
&lt;p&gt;For the GitHub Pages site &lt;code&gt;langchain-ai.github.io/langgraph&lt;/code&gt;, add &lt;code&gt;https://langchain-ai.gitmcp.io/langgraph&lt;/code&gt; as an MCP server to Cursor.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prompt to Cursor:&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&quot;Add memory to my LangGraph agent&quot;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Cursor will pull the relevant documentation and code from GitMCP to correctly implement the memory feature.&lt;/p&gt; 
&lt;h3&gt;Example 3: Using Claude Desktop with the dynamic endpoint&lt;/h3&gt; 
&lt;p&gt;You don&#39;t have to pick specific repositories. The generic &lt;code&gt;gitmcp.io/docs&lt;/code&gt; endpoint allows AI to pick the GitHub project on the fly!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prompt to any AI assistant:&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&quot;I want to learn about the OpenAI Whisper speech recognition model. Explain how it works.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Claude will pull the data from GitMCP and answer the question.&lt;/p&gt; 
&lt;h2&gt;üõ†Ô∏è Tools&lt;/h2&gt; 
&lt;p&gt;GitMCP provides AI assistants with several valuable tools to help them access, understand, and query GitHub repositories.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;fetch_&amp;lt;repo-name&amp;gt;_documentation&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This tool gets the primary documentation from a GitHub repository. It works by retrieving relevant documentation (e.g., &lt;code&gt;llms.txt&lt;/code&gt;). This gives the AI a good overview of what the project is about&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When it&#39;s useful:&lt;/strong&gt; For general questions about a project&#39;s purpose, features, or how to get started&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;search_&amp;lt;repo-name&amp;gt;_documentation&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This tool lets the AI search through a repository&#39;s documentation by providing a specific search query. Instead of loading all the documentation (which could be very large), it uses intelligent search to find just the relevant parts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When it&#39;s useful:&lt;/strong&gt; For specific questions about particular features, functions, or concepts within a project&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;fetch_url_content&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This tool helps the AI get information from links mentioned in the documentation. It retrieves the content from those links and converts it to a format the AI can easily read.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When it&#39;s useful:&lt;/strong&gt; When documentation references external information that would help answer your question&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;search_&amp;lt;repo-name&amp;gt;_code&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This tool searches through the actual code in the repository using GitHub&#39;s code search. It helps AI find specific code examples or implementation details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When it&#39;s useful:&lt;/strong&gt; When you want examples of how something is implemented or need technical details not covered in documentation&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using the dynamic endpoint (&lt;code&gt;gitmcp.io/docs&lt;/code&gt;), these tools are named slightly differently (&lt;code&gt;fetch_generic_documentation&lt;/code&gt;, &lt;code&gt;search_generic_code&lt;/code&gt;, and &lt;code&gt;search_generic_documentation&lt;/code&gt;) and need additional information about which repository to access.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üìä Badge&lt;/h2&gt; 
&lt;p&gt;GitMCP has a badge to your repository&#39;s README. It allows users to quickly access your documentation through their IDE or browser (using the embedded chat). It also showcases how many times your documentation has been accessed through GitMCP.&lt;/p&gt; 
&lt;p&gt;Example (&lt;code&gt;idosal/git-mcp&lt;/code&gt;): &lt;a href=&quot;https://gitmcp.io/idosal/git-mcp&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://gitmcp.io/badge/idosal/git-mcp&quot; alt=&quot;GitMCP&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Adding the Badge to Your Repository&lt;/h3&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![GitMCP](https://img.shields.io/endpoint?url=https://gitmcp.io/badge/OWNER/REPO)](https://gitmcp.io/OWNER/REPO)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;OWNER&lt;/code&gt; with your GitHub username or organization, and &lt;code&gt;REPO&lt;/code&gt; with your repository name.&lt;/p&gt; 
&lt;h3&gt;How We Count Views&lt;/h3&gt; 
&lt;p&gt;Increment for each tool call on the specific repository.&lt;/p&gt; 
&lt;h3&gt;Customizing the Badge&lt;/h3&gt; 
&lt;p&gt;You can customize the badge&#39;s appearance with parameters:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Parameter&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Color for the badge value&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;aquamarine&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;?color=green&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;label&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Badge label&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;GitMCP&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Documentation&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Please reach out!&lt;/p&gt; 
&lt;h2&gt;‚ùì FAQ&lt;/h2&gt; 
&lt;h3&gt;What is the Model Context Protocol?&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://modelcontextprotocol.io/introduction&quot;&gt;Model Context Protocol&lt;/a&gt; is a standard that allows AI assistants to request and receive additional context from external sources in a structured manner, enhancing their understanding and performance.&lt;/p&gt; 
&lt;h3&gt;Does GitMCP work with any AI assistant?&lt;/h3&gt; 
&lt;p&gt;Yes, GitMCP is compatible with any AI assistant supporting the Model Context Protocol, including tools like Cursor, VSCode, Claude, etc.&lt;/p&gt; 
&lt;h3&gt;Is GitMCP compatible with all GitHub projects?&lt;/h3&gt; 
&lt;p&gt;Absolutely! GitMCP works with any public GitHub repository without requiring any modifications. It prioritizes the &lt;code&gt;llms.txt&lt;/code&gt; file and falls back to &lt;code&gt;README.md&lt;/code&gt; or other pages if the former is unavailable. Future updates aim to support additional documentation methods and even generate content dynamically.&lt;/p&gt; 
&lt;h3&gt;Does GitMCP cost money?&lt;/h3&gt; 
&lt;p&gt;No, GitMCP is a free service to the community with no associated costs.&lt;/p&gt; 
&lt;h2&gt;üîí Privacy&lt;/h2&gt; 
&lt;p&gt;GitMCP is deeply committed to its users&#39; privacy. The service doesn&#39;t have access to or store any personally identifiable information as it doesn&#39;t require authentication. In addition, it doesn&#39;t store any queries sent by the agents. Moreover, as GitMCP is an open-source project, it can be deployed independently in your environment.&lt;/p&gt; 
&lt;p&gt;GitMCP only accesses content that is already publicly available and only when queried by a user. GitMCP does not automatically scrape repositories. Before accessing any GitHub Pages site, the code checks for &lt;code&gt;robots.txt&lt;/code&gt; rules and follows the directives set by site owners, allowing them to opt out. Please note that GitMCP doesn&#39;t permanently store data regarding the GitHub projects or their content.&lt;/p&gt; 
&lt;h2&gt;üë• Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions, feedback, and ideas! Please review our &lt;a href=&quot;https://github.com/idosal/git-mcp/raw/main/.github/CONTRIBUTING.md&quot;&gt;contribution&lt;/a&gt; guidelines.&lt;/p&gt; 
&lt;h3&gt;Local Development Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/idosal/git-mcp.git
cd git-mcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pnpm install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run locally for development&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
# or
pnpm dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Using MCP Inspector for Testing&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install the MCP Inspector tool:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx @modelcontextprotocol/inspector
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the inspector interface:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Set Transport Type to &lt;code&gt;SSE&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Enter your GitMCP URL (e.g., &lt;code&gt;http://localhost:5173/docs&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Click &quot;Connect&quot;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;üìÑ License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/idosal/git-mcp/main/LICENSE&quot;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;GitMCP is provided &quot;as is&quot; without warranty of any kind. While we strive to ensure the reliability and security of our service, we are not responsible for any damages or issues that may arise from its use. GitHub projects accessed through GitMCP are subject to their respective owners&#39; terms and conditions. GitMCP is not affiliated with GitHub or any of the mentioned AI tools.&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.star-history.com/#idosal/git-mcp&amp;amp;Timeline&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=idosal/git-mcp&amp;amp;type=Timeline&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>umami-software/umami</title>
      <link>https://github.com/umami-software/umami</link>
      <description>&lt;p&gt;Umami is a modern, privacy-focused alternative to Google Analytics.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://content.umami.is/website/images/umami-logo.png&quot; alt=&quot;Umami Logo&quot; width=&quot;100&quot; /&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;Umami&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;i&gt;Umami is a simple, fast, privacy-focused alternative to Google Analytics.&lt;/i&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/umami-software/umami/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/umami-software/umami.svg?sanitize=true&quot; alt=&quot;GitHub Release&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/umami-software/umami/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/umami-software/umami.svg?sanitize=true&quot; alt=&quot;MIT License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/umami-software/umami/actions&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/umami-software/umami/ci.yml&quot; alt=&quot;Build Status&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://analytics.umami.is/share/LGazGOecbDtaIwDr/umami.is&quot; style=&quot;text-decoration: none;&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Try%20Demo%20Now-Click%20Here-brightgreen&quot; alt=&quot;Umami Demo&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;p&gt;A detailed getting started guide can be found at &lt;a href=&quot;https://umami.is/docs/&quot;&gt;umami.is/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üõ† Installing from Source&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A server with Node.js version 18.18 or newer&lt;/li&gt; 
 &lt;li&gt;A database. Umami supports &lt;a href=&quot;https://www.mariadb.org/&quot;&gt;MariaDB&lt;/a&gt; (minimum v10.5), &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; (minimum v8.0) and &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; (minimum v12.14) databases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Get the Source Code and Install Packages&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/umami-software/umami.git
cd umami
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure Umami&lt;/h3&gt; 
&lt;p&gt;Create an &lt;code&gt;.env&lt;/code&gt; file with the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATABASE_URL=connection-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The connection URL format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;postgresql://username:mypassword@localhost:5432/mydb
mysql://username:mypassword@localhost:3306/mydb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build the Application&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;The build step will create tables in your database if you are installing for the first time. It will also create a login user with username &lt;strong&gt;admin&lt;/strong&gt; and password &lt;strong&gt;umami&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Start the Application&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;By default, this will launch the application on &lt;code&gt;http://localhost:3000&lt;/code&gt;. You will need to either &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/&quot;&gt;proxy&lt;/a&gt; requests from your web server or change the &lt;a href=&quot;https://nextjs.org/docs/api-reference/cli#production&quot;&gt;port&lt;/a&gt; to serve the application directly.&lt;/em&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üê≥ Installing with Docker&lt;/h2&gt; 
&lt;p&gt;To build the Umami container and start up a Postgres database, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, to pull just the Umami Docker image with PostgreSQL support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull docker.umami.is/umami-software/umami:postgresql-latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with MySQL support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull docker.umami.is/umami-software/umami:mysql-latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üîÑ Getting Updates&lt;/h2&gt; 
&lt;p&gt;To get the latest features, simply do a pull, install any new dependencies, and rebuild:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git pull
npm install
npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To update the Docker image, simply pull the new images and rebuild:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose pull
docker compose up --force-recreate -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üõü Support&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/umami-software/umami&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/GitHub--blue?style=social&amp;amp;logo=github&quot; alt=&quot;GitHub&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/umami_software&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Twitter--blue?style=social&amp;amp;logo=twitter&quot; alt=&quot;Twitter&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://linkedin.com/company/umami-software&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/LinkedIn--blue?style=social&amp;amp;logo=linkedin&quot; alt=&quot;LinkedIn&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://umami.is/discord&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Discord--blue?style=social&amp;amp;logo=discord&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Budibase/budibase</title>
      <link>https://github.com/Budibase/budibase</link>
      <description>&lt;p&gt;Create business apps and automate workflows in minutes. Supports PostgreSQL, MySQL, MariaDB, MSSQL, MongoDB, Rest API, Docker, K8s, and more üöÄ No code / Low code platform..&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.budibase.com&quot;&gt; &lt;img alt=&quot;Budibase&quot; src=&quot;https://res.cloudinary.com/daog6scxm/image/upload/v1696515725/Branding/Assets/Symbol/RGB/Full%20Colour/Budibase_Symbol_RGB_FullColour_cbqvha_1_z5cwq2.svg?sanitize=true&quot; width=&quot;60&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt; Budibase &lt;/h1&gt; 
&lt;h3 align=&quot;center&quot;&gt; The low code platform you&#39;ll enjoy using &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; Budibase is an open-source low-code platform that saves engineers 100s of hours building forms, portals, and approval apps, securely. &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; ü§ñ üé® üöÄ &lt;/h3&gt; 
&lt;br /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Budibase design ui&quot; src=&quot;https://res.cloudinary.com/daog6scxm/image/upload/v1680181644/ui/homepage-design-ui_sizp7b.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/Budibase/budibase/releases&quot;&gt; &lt;img alt=&quot;GitHub all releases&quot; src=&quot;https://img.shields.io/github/downloads/Budibase/budibase/total&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/Budibase/budibase/releases&quot;&gt; &lt;img alt=&quot;GitHub release (latest by date)&quot; src=&quot;https://img.shields.io/github/v/release/Budibase/budibase&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=budibase&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/budibase?style=social&quot; alt=&quot;Follow @budibase&quot; /&gt; &lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&quot; alt=&quot;Code of conduct&quot; /&gt; &lt;a href=&quot;https://codecov.io/gh/Budibase/budibase&quot;&gt; &lt;img src=&quot;https://codecov.io/gh/Budibase/budibase/graph/badge.svg?token=E8W2ZFXQOH&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://account.budibase.app/register&quot;&gt;Get started - we host (Budibase Cloud)&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://docs.budibase.com/docs/hosting-methods&quot;&gt;Get started - you host (Docker, K8s, DO)&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://docs.budibase.com/docs&quot;&gt;Docs&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://github.com/Budibase/budibase/discussions?discussions_q=category%3AIdeas&quot;&gt;Feature request&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://github.com/Budibase/budibase/issues&quot;&gt;Report a bug&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; Support: &lt;a href=&quot;https://github.com/Budibase/budibase/discussions&quot;&gt;Discussions&lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;h3&gt;Build and ship real software&lt;/h3&gt; 
&lt;p&gt;Unlike other platforms, with Budibase you build and ship single page applications. Budibase applications have performance baked in and can be designed responsively, providing users with a great experience. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Open source and extensible&lt;/h3&gt; 
&lt;p&gt;Budibase is open-source - licensed as GPL v3. This should fill you with confidence that Budibase will always be around. You can also code against Budibase or fork it and make changes as you please, providing a developer-friendly experience. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Load data or start from scratch&lt;/h3&gt; 
&lt;p&gt;Budibase pulls data from multiple sources, including MongoDB, CouchDB, PostgreSQL, MariaDB, MySQL, Airtable, S3, DynamoDB, or a REST API. And unlike other platforms, with Budibase you can start from scratch and create business apps with no data sources. &lt;a href=&quot;https://github.com/Budibase/budibase/discussions?discussions_q=category%3AIdeas&quot;&gt;Request new datasources&lt;/a&gt;.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Budibase data&quot; src=&quot;https://res.cloudinary.com/daog6scxm/image/upload/v1680281798/ui/data_klbuna.png&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;h3&gt;Design and build apps with powerful pre-made components&lt;/h3&gt; 
&lt;p&gt;Budibase comes out of the box with beautifully designed, powerful components which you can use like building blocks to build your UI. We also expose many of your favourite CSS styling options so you can go that extra creative mile. &lt;a href=&quot;https://github.com/Budibase/budibase/discussions?discussions_q=category%3AIdeas&quot;&gt;Request new component&lt;/a&gt;.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Budibase design&quot; src=&quot;https://res.cloudinary.com/daog6scxm/image/upload/v1675437167/ui/form_2x_mbli8y.png&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;h3&gt;Automate processes, integrate with other tools and connect to webhooks&lt;/h3&gt; 
&lt;p&gt;Save time by automating manual processes and workflows. From connecting to webhooks to automating emails, simply tell Budibase what to do and let it work for you. You can easily &lt;a href=&quot;https://github.com/Budibase/automations&quot;&gt;create new automations for Budibase here&lt;/a&gt; or &lt;a href=&quot;https://github.com/Budibase/budibase/discussions?discussions_q=category%3AIdeas&quot;&gt;Request new automation&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Integrate with your favorite tools&lt;/h3&gt; 
&lt;p&gt;Budibase integrates with a number of popular tools allowing you to build apps that perfectly fit your stack.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Budibase integrations&quot; src=&quot;https://res.cloudinary.com/daog6scxm/image/upload/v1680195228/ui/automate_fg9z07.png&quot; /&gt; &lt;/p&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;h3&gt;Deploy with confidence and security&lt;/h3&gt; 
&lt;p&gt;Budibase is made to scale. With Budibase, you can self-host on your own infrastructure and globally manage users, onboarding, SMTP, apps, groups, theming and more. You can also provide users/groups with an app portal and disseminate user management to the group manager.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Checkout the promo video: &lt;a href=&quot;https://youtu.be/xoljVpty_Kw&quot;&gt;https://youtu.be/xoljVpty_Kw&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;hr /&gt; 
&lt;br /&gt; 
&lt;h2&gt;Budibase Public API&lt;/h2&gt; 
&lt;p&gt;As with anything that we build in Budibase, our new public API is simple to use, flexible, and introduces new extensibility. To summarize, the Budibase API enables:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Budibase as a backend&lt;/li&gt; 
 &lt;li&gt;Interoperability&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Docs&lt;/h4&gt; 
&lt;p&gt;You can learn more about the Budibase API at the following places:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/public-api&quot;&gt;General documentation&lt;/a&gt;: Learn how to get your API key, how to use spec, and how to use Postman&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/reference/appcreate&quot;&gt;Interactive API documentation&lt;/a&gt; : Learn how to interact with the API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;üèÅ Get started&lt;/h2&gt; 
&lt;p&gt;Deploy Budibase using Docker, Kubernetes, and Digital Ocean on your existing infrastructure. Or use Budibase Cloud if you don&#39;t need to self-host and would like to get started quickly.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://docs.budibase.com/docs/hosting-methods&quot;&gt;Get started with self-hosting Budibase&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/docker&quot;&gt;Docker - single ARM compatible image&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/docker-compose&quot;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/kubernetes-k8s&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/digitalocean&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.budibase.com/docs/portainer&quot;&gt;Portainer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://budibase.com&quot;&gt;Get started with Budibase Cloud&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;üéì Learning Budibase&lt;/h2&gt; 
&lt;p&gt;The Budibase documentation &lt;a href=&quot;https://docs.budibase.com/docs&quot;&gt;lives here&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;üí¨ Community&lt;/h2&gt; 
&lt;p&gt;If you have a question or would like to talk with other Budibase users and join our community, please hop over to &lt;a href=&quot;https://github.com/Budibase/budibase/discussions&quot;&gt;Github discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ùó Code of conduct&lt;/h2&gt; 
&lt;p&gt;Budibase is dedicated to providing everyone a welcoming, diverse, and harassment-free experience. We expect everyone in the Budibase community to abide by our &lt;a href=&quot;https://github.com/Budibase/budibase/raw/HEAD/docs/CODE_OF_CONDUCT.md&quot;&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;. Please read it. &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;üôå Contributing to Budibase&lt;/h2&gt; 
&lt;p&gt;From opening a bug report to creating a pull request: every contribution is appreciated and welcomed. If you&#39;re planning to implement a new feature or change the API, please create an issue first. This way, we can ensure your work is not in vain. Environment setup instructions are available &lt;a href=&quot;https://github.com/Budibase/budibase/tree/HEAD/docs/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Not Sure Where to Start?&lt;/h3&gt; 
&lt;p&gt;A good place to start contributing is by looking for the &lt;a href=&quot;https://github.com/Budibase/budibase/labels/good%20first%20issue&quot;&gt;good first issue&lt;/a&gt; tag.&lt;/p&gt; 
&lt;h3&gt;How the repository is organized&lt;/h3&gt; 
&lt;p&gt;Budibase is a monorepo managed by lerna. Lerna manages the building and publishing of the budibase packages. At a high level, here are the packages that make up Budibase.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Budibase/budibase/tree/HEAD/packages/builder&quot;&gt;packages/builder&lt;/a&gt; - contains code for the budibase builder client-side svelte application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Budibase/budibase/tree/HEAD/packages/client&quot;&gt;packages/client&lt;/a&gt; - A module that runs in the browser responsible for reading JSON definition and creating living, breathing web apps from it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Budibase/budibase/tree/HEAD/packages/server&quot;&gt;packages/server&lt;/a&gt; - The budibase server. This Koa app is responsible for serving the JS for the builder and budibase apps, as well as providing the API for interaction with the database and file system.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/Budibase/budibase/raw/HEAD/docs/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;üìù License&lt;/h2&gt; 
&lt;p&gt;Budibase is open-source, licensed as &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GPL v3&lt;/a&gt;. The client and component libraries are licensed as &lt;a href=&quot;https://directory.fsf.org/wiki/License:MPL-2.0&quot;&gt;MPL&lt;/a&gt; - so the apps you build can be licensed however you like.&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;‚≠ê Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/Budibase/budibase&quot;&gt;&lt;img src=&quot;https://starchart.cc/Budibase/budibase.svg?sanitize=true&quot; alt=&quot;Stargazers over time&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are having issues between updates of the builder, please use the guide &lt;a href=&quot;https://github.com/Budibase/budibase/raw/HEAD/docs/CONTRIBUTING.md#troubleshooting&quot;&gt;here&lt;/a&gt; to clear down your environment.&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;a href=&quot;https://github.com/Budibase/budibase/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=Budibase/budibase&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href=&quot;https://contrib.rocks&quot;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>devlikeapro/waha</title>
      <link>https://github.com/devlikeapro/waha</link>
      <description>&lt;p&gt;WAHA - WhatsApp HTTP API (REST API) that you can configure in a click! 3 engines: WEBJS (browser based), NOWEB (websocket nodejs), GOWS (websocket go)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WAHA&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/logo.png&quot; style=&quot;border-radius: 50%&quot; width=&quot;150&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WAHA&lt;/strong&gt; - &lt;strong&gt;W&lt;/strong&gt;hats&lt;strong&gt;A&lt;/strong&gt;pp &lt;strong&gt;H&lt;/strong&gt;TTP &lt;strong&gt;A&lt;/strong&gt;PI (REST API) that you can install on your own server and run in less than 5 minutes!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/devlikeapro/waha&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/devlikeapro/waha&quot; alt=&quot;Docker Pulls&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation: &lt;a href=&quot;https://waha.devlike.pro/&quot;&gt;https://waha.devlike.pro/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dashboard Example: &lt;a href=&quot;https://waha.devlike.pro/dashboard&quot;&gt;https://waha.devlike.pro/dashboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swagger Example: &lt;a href=&quot;https://waha.devlike.pro/swagger&quot;&gt;https://waha.devlike.pro/swagger&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Tables of Contents&lt;/h1&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#quick-start&quot;&gt;Quick start&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#send-your-first-message&quot;&gt;Send your first message&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#1-download-image&quot;&gt;1. Download image&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#2-run-whatsapp-http-api&quot;&gt;2. Run WhatsApp HTTP API&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#3-start-a-new-session&quot;&gt;3. Start a new session&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#4-get-and-scan-qr&quot;&gt;4. Get and scan QR&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#5-get-the-screenshot&quot;&gt;5. Get the screenshot&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#6-send-a-text-message&quot;&gt;6. Send a text message&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#what-is-next&quot;&gt;What is next?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#development&quot;&gt;Development&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/#start-the-project&quot;&gt;Start the project&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;h1&gt;Quick start&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Only thing that you must have - installed docker. Please follow the original instruction &lt;a href=&quot;https://docs.docker.com/get-docker/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;how to install docker -&amp;gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!&lt;/p&gt; 
&lt;h2&gt;Send your first message&lt;/h2&gt; 
&lt;p&gt;Let&#39;s go over steps that allow you to send your first text message via WhatsApp HTTP API!&lt;/p&gt; 
&lt;h3&gt;1. Download image&lt;/h3&gt; 
&lt;p&gt;Assuming you have installed &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;Docker&lt;/a&gt;, let&#39;s download the image.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull devlikeapro/waha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker login -u devlikeapro -p {KEY}
docker pull devlikeapro/waha-plus
docker logout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read more about how to get &lt;code&gt;PASSWORD&lt;/code&gt; for &lt;a href=&quot;https://waha.devlike.pro/docs/how-to/waha-plus/&quot;&gt;&lt;strong&gt;‚ûï WAHA Plus&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;2. Run WhatsApp HTTP API&lt;/h3&gt; 
&lt;p&gt;Run WhatsApp HTTP API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it --rm -p 3000:3000/tcp --name waha devlikeapro/waha

# It prints logs and the last line must be
# WhatsApp HTTP API is running on: http://[::1]:3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open the link in your browser &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; and you&#39;ll see API documentation (Swagger).&lt;/p&gt; 
&lt;h3&gt;3. Start a new session&lt;/h3&gt; 
&lt;p&gt;To start a new session you should have your mobile phone with installed WhatsApp application close to you.&lt;/p&gt; 
&lt;p&gt;Please go and read how what we&#39;ll need to a bit later: &lt;a href=&quot;https://faq.whatsapp.com/381777293328336/?helpref=hc_fnav&quot; target=&quot;_blank&quot;&gt; How to log in - the instruction on WhatsApp site &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;When your ready - find &lt;code&gt;POST /api/sessions&lt;/code&gt;, click on &lt;strong&gt;Try it out&lt;/strong&gt;, then &lt;strong&gt;Execute&lt;/strong&gt; a bit below.&lt;/p&gt; 
&lt;p&gt;The example payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;default&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By using the request with &lt;code&gt;name&lt;/code&gt; values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus&lt;/p&gt; 
&lt;h3&gt;4. Get and scan QR&lt;/h3&gt; 
&lt;p&gt;Find &lt;code&gt;GET /api/screenshot&lt;/code&gt; and execute it, it shows you QR code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Scan the QR with your cell phone&#39;s WhatsApp app.&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;5. Get the screenshot&lt;/h3&gt; 
&lt;p&gt;Execute &lt;code&gt;GET /api/screenshot&lt;/code&gt; after a few seconds after scanning the QR - it&#39;ll show you the screenshot of you Whatsapp instance. If you can get the actual screenshot - then you&#39;re ready to start sending messages!&lt;/p&gt; 
&lt;h3&gt;6. Send a text message&lt;/h3&gt; 
&lt;p&gt;Let&#39;s send a text message - find &lt;code&gt;POST /api/sendText&lt;/code&gt; in &lt;a href=&quot;http://localhost:3000/&quot;&gt;swagger&lt;/a&gt; and change &lt;code&gt;chatId&lt;/code&gt; this way: use a phone international phone number without &lt;code&gt;+&lt;/code&gt; symbol and add &lt;code&gt;@c.us&lt;/code&gt; at the end.&lt;/p&gt; 
&lt;p&gt;For phone number &lt;code&gt;12132132131&lt;/code&gt; the &lt;code&gt;chatId&lt;/code&gt; is &lt;code&gt;12132132131@c.us&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The example payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;chatId&quot;: &quot;12132132130@c.us&quot;,
  &quot;text&quot;: &quot;Hi there!&quot;,
  &quot;session&quot;: &quot;default&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, you can use &lt;code&gt;curl&lt;/code&gt; and send POST request like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Phone without +
export PHONE=12132132130
curl -d &quot;{\&quot;chatId\&quot;: \&quot;${PHONE}@c.us\&quot;, \&quot;text\&quot;: \&quot;Hello from WhatsApp HTTP API\&quot; }&quot; -H &quot;Content-Type: application/json&quot; -X POST http://localhost:3000/api/sendText
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What is next?&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://waha.devlike.pro/docs/overview/introduction/&quot;&gt;Go and read the full documentation!&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Start the project&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository&lt;/li&gt; 
 &lt;li&gt;Make sure you&#39;re using node&amp;gt;=22 (check &lt;a href=&quot;https://raw.githubusercontent.com/devlikeapro/waha/core/.nvmrc&quot;&gt;.nvmrc&lt;/a&gt; to get the version)&lt;/li&gt; 
 &lt;li&gt;Run the following commands:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install dependencies
yarn install
# Fetch and compile proto files
yarn gows:proto
# Run
yarn start
# open http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>simstudioai/sim</title>
      <link>https://github.com/simstudioai/sim</link>
      <description>&lt;p&gt;Sim is an open-source AI agent workflow builder. Sim Studio&#39;s interface is a lightweight, intuitive way to quickly build and deploy LLMs that connect with your favorite tools.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/simstudioai/sim/main/apps/sim/public/static/sim.png&quot; alt=&quot;Sim Logo&quot; width=&quot;500&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License: Apache-2.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/Hr4UWYEcTT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Join%20Server-7289DA?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://x.com/simdotai&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/simstudioai?style=social&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/simstudioai/sim/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.sim.ai&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Docs-visit%20documentation-blue.svg?sanitize=true&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;Sim&lt;/strong&gt; is a lightweight, user-friendly platform for building AI agent workflows. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/simstudioai/sim/main/apps/sim/public/static/demo.gif&quot; alt=&quot;Sim Demo&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Use our &lt;a href=&quot;https://sim.ai&quot;&gt;cloud-hosted version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Self-host using one of the methods below&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Self-Hosting Options&lt;/h2&gt; 
&lt;h3&gt;Option 1: NPM Package (Simplest)&lt;/h3&gt; 
&lt;p&gt;The easiest way to run Sim locally is using our &lt;a href=&quot;https://www.npmjs.com/package/simstudio?activeTab=readme&quot;&gt;NPM package&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx simstudio
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After running these commands, open &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; in your browser.&lt;/p&gt; 
&lt;h4&gt;Options&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-p, --port &amp;lt;port&amp;gt;&lt;/code&gt;: Specify the port to run Sim on (default: 3000)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--no-pull&lt;/code&gt;: Skip pulling the latest Docker images&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Requirements&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker must be installed and running on your machine&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 2: Docker Compose&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Clone the repository
git clone https://github.com/simstudioai/sim.git

# Navigate to the project directory
cd sim

# Start Sim
docker compose -f docker-compose.prod.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Access the application at &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Using Local Models with Ollama&lt;/h4&gt; 
&lt;p&gt;Run Sim with local AI models using &lt;a href=&quot;https://ollama.ai&quot;&gt;Ollama&lt;/a&gt; - no external APIs required:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Start with GPU support (automatically downloads gemma3:4b model)
docker compose -f docker-compose.ollama.yml --profile setup up -d

# For CPU-only systems:
docker compose -f docker-compose.ollama.yml --profile cpu --profile setup up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Wait for the model to download, then visit &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;. Add more models with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose -f docker-compose.ollama.yml exec ollama ollama pull llama3.1:8b
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 3: Dev Containers&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open VS Code with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&quot;&gt;Remote - Containers extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open the project and click &quot;Reopen in Container&quot; when prompted&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bun run dev:full&lt;/code&gt; in the terminal or use the &lt;code&gt;sim-start&lt;/code&gt; alias 
  &lt;ul&gt; 
   &lt;li&gt;This starts both the main application and the realtime socket server&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Option 4: Manual Setup&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bun.sh/&quot;&gt;Bun&lt;/a&gt; runtime&lt;/li&gt; 
 &lt;li&gt;PostgreSQL 12+ with &lt;a href=&quot;https://github.com/pgvector/pgvector&quot;&gt;pgvector extension&lt;/a&gt; (required for AI embeddings)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sim uses vector embeddings for AI features like knowledge bases and semantic search, which requires the &lt;code&gt;pgvector&lt;/code&gt; PostgreSQL extension.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone and install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/simstudioai/sim.git
cd sim
bun install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Set up PostgreSQL with pgvector:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You need PostgreSQL with the &lt;code&gt;vector&lt;/code&gt; extension for embedding support. Choose one option:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Option A: Using Docker (Recommended)&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Start PostgreSQL with pgvector extension
docker run --name simstudio-db \
  -e POSTGRES_PASSWORD=your_password \
  -e POSTGRES_DB=simstudio \
  -p 5432:5432 -d \
  pgvector/pgvector:pg17
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Option B: Manual Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install PostgreSQL 12+ and the pgvector extension&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://github.com/pgvector/pgvector#installation&quot;&gt;pgvector installation guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Set up environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd apps/sim
cp .env.example .env  # Configure with required variables (DATABASE_URL, BETTER_AUTH_SECRET, BETTER_AUTH_URL)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Update your &lt;code&gt;.env&lt;/code&gt; file with the database URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;DATABASE_URL=&quot;postgresql://postgres:your_password@localhost:5432/simstudio&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Set up the database:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bunx drizzle-kit migrate 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;Start the development servers:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Recommended approach - run both servers together (from project root):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bun run dev:full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This starts both the main Next.js application and the realtime socket server required for full functionality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Alternative - run servers separately:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Next.js app (from project root):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bun run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Realtime socket server (from &lt;code&gt;apps/sim&lt;/code&gt; directory in a separate terminal):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd apps/sim
bun run dev:sockets
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tech Stack&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; (App Router)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt;: &lt;a href=&quot;https://bun.sh/&quot;&gt;Bun&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: PostgreSQL with &lt;a href=&quot;https://orm.drizzle.team&quot;&gt;Drizzle ORM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: &lt;a href=&quot;https://better-auth.com&quot;&gt;Better Auth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt;: &lt;a href=&quot;https://ui.shadcn.com/&quot;&gt;Shadcn&lt;/a&gt;, &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: &lt;a href=&quot;https://zustand-demo.pmnd.rs/&quot;&gt;Zustand&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flow Editor&lt;/strong&gt;: &lt;a href=&quot;https://reactflow.dev/&quot;&gt;ReactFlow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href=&quot;https://fumadocs.vercel.app/&quot;&gt;Fumadocs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monorepo&lt;/strong&gt;: &lt;a href=&quot;https://turborepo.org/&quot;&gt;Turborepo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: &lt;a href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Jobs&lt;/strong&gt;: &lt;a href=&quot;https://trigger.dev/&quot;&gt;Trigger.dev&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! Please see our &lt;a href=&quot;https://raw.githubusercontent.com/simstudioai/sim/main/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache License 2.0 - see the &lt;a href=&quot;https://raw.githubusercontent.com/simstudioai/sim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Made with ‚ù§Ô∏è by the Sim Team&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wg-easy/wg-easy</title>
      <link>https://github.com/wg-easy/wg-easy</link>
      <description>&lt;p&gt;The easiest way to run WireGuard VPN + Web-based Admin UI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WireGuard Easy&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wg-easy/wg-easy/actions/workflows/deploy.yml&quot;&gt;&lt;img src=&quot;https://github.com/wg-easy/wg-easy/actions/workflows/deploy.yml/badge.svg?branch=production&quot; alt=&quot;Build &amp;amp; Publish latest Image&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/wg-easy/wg-easy/actions/workflows/lint.yml&quot;&gt;&lt;img src=&quot;https://github.com/wg-easy/wg-easy/actions/workflows/lint.yml/badge.svg?branch=master&quot; alt=&quot;Lint&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/wg-easy/wg-easy/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/wg-easy/wg-easy&quot; alt=&quot;GitHub Stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/wg-easy/wg-easy/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/wg-easy/wg-easy&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/wg-easy/wg-easy/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/wg-easy/wg-easy&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/wg-easy/wg-easy/pkgs/container/wg-easy&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/image_pulls-12M+-blue&quot; alt=&quot;Image Pulls&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You have found the easiest way to install &amp;amp; manage WireGuard on any Linux host!&lt;/p&gt; 
&lt;!-- TOOD: update screenshot --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/wg-easy/wg-easy/master/assets/screenshot.png&quot; width=&quot;802&quot; alt=&quot;wg-easy Screenshot&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;All-in-one: WireGuard + Web UI.&lt;/li&gt; 
 &lt;li&gt;Easy installation, simple to use.&lt;/li&gt; 
 &lt;li&gt;List, create, edit, delete, enable &amp;amp; disable clients.&lt;/li&gt; 
 &lt;li&gt;Show a client&#39;s QR code.&lt;/li&gt; 
 &lt;li&gt;Download a client&#39;s configuration file.&lt;/li&gt; 
 &lt;li&gt;Statistics for which clients are connected.&lt;/li&gt; 
 &lt;li&gt;Tx/Rx charts for each connected client.&lt;/li&gt; 
 &lt;li&gt;Gravatar support.&lt;/li&gt; 
 &lt;li&gt;Automatic Light / Dark Mode&lt;/li&gt; 
 &lt;li&gt;Multilanguage Support&lt;/li&gt; 
 &lt;li&gt;One Time Links&lt;/li&gt; 
 &lt;li&gt;Client Expiration&lt;/li&gt; 
 &lt;li&gt;Prometheus metrics support&lt;/li&gt; 
 &lt;li&gt;IPv6 support&lt;/li&gt; 
 &lt;li&gt;CIDR support&lt;/li&gt; 
 &lt;li&gt;2FA support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To better manage documentation for this project, it has its own site here: &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest&quot;&gt;https://wg-easy.github.io/wg-easy/latest&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/getting-started/&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/basic-installation/&quot;&gt;Basic Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/caddy/&quot;&gt;Caddy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/traefik/&quot;&gt;Traefik&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/podman-nft/&quot;&gt;Podman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/adguard/&quot;&gt;AdGuard Home&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you want to migrate from the old version to the new version, you can find the migration guide here: &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/advanced/migrate/&quot;&gt;Migration Guide&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;This is a quick start guide to get you up and running with WireGuard Easy.&lt;/p&gt; 
&lt;p&gt;For a more detailed installation guide, please refer to the &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/getting-started/&quot;&gt;Getting Started&lt;/a&gt; page.&lt;/p&gt; 
&lt;h3&gt;1. Install Docker&lt;/h3&gt; 
&lt;p&gt;If you haven&#39;t installed Docker yet, install it by running as root:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -sSL https://get.docker.com | sh
exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And log in again.&lt;/p&gt; 
&lt;h3&gt;2. Run WireGuard Easy&lt;/h3&gt; 
&lt;p&gt;The easiest way to run WireGuard Easy is with Docker Compose.&lt;/p&gt; 
&lt;p&gt;Just follow &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/basic-installation/&quot;&gt;these steps&lt;/a&gt; in the detailed documentation.&lt;/p&gt; 
&lt;p&gt;You can also install WireGuard Easy with the &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/docker-run/&quot;&gt;docker run command&lt;/a&gt; or via &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/podman-nft/&quot;&gt;podman&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Now &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/basic-installation/#setup-reverse-proxy&quot;&gt;setup a reverse proxy&lt;/a&gt; to be able to access the Web UI securely from the internet. This step is optional, just make sure to follow the guide &lt;a href=&quot;https://wg-easy.github.io/wg-easy/latest/examples/tutorials/reverse-proxyless/&quot;&gt;here&lt;/a&gt; if you decide not to do it.&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;Are you enjoying this project? Consider donating.&lt;/p&gt; 
&lt;p&gt;Founder: &lt;a href=&quot;https://github.com/sponsors/WeeJeWel&quot;&gt;Buy Emile a beer!&lt;/a&gt; üçª&lt;/p&gt; 
&lt;p&gt;Maintainer: &lt;a href=&quot;https://github.com/sponsors/kaaax0815&quot;&gt;Buy kaaax0815 a coffee!&lt;/a&gt; ‚òï&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker&lt;/li&gt; 
 &lt;li&gt;Node LTS &amp;amp; corepack enabled&lt;/li&gt; 
 &lt;li&gt;Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dev Server&lt;/h3&gt; 
&lt;p&gt;This starts the development server with docker&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;pnpm dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update Auto Imports&lt;/h3&gt; 
&lt;p&gt;If you add something that should be auto-importable and VSCode complains, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd src
pnpm install
cd ..
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test Cli&lt;/h3&gt; 
&lt;p&gt;This starts the cli with docker&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;pnpm cli:dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the AGPL-3.0-only License - see the &lt;a href=&quot;https://raw.githubusercontent.com/wg-easy/wg-easy/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt; 
&lt;p&gt;This project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with Jason A. Donenfeld, ZX2C4 or Edge Security&lt;/p&gt; 
&lt;p&gt;&quot;WireGuard&quot; and the &quot;WireGuard&quot; logo are registered trademarks of Jason A. Donenfeld&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dyad-sh/dyad</title>
      <link>https://github.com/dyad-sh/dyad</link>
      <description>&lt;p&gt;Free, local, open-source AI app builder ‚ú® v0 / lovable / Bolt alternative üåü Star if you like it!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dyad&lt;/h1&gt; 
&lt;p&gt;Dyad is a local, open-source AI app builder. It&#39;s fast, private, and fully under your control ‚Äî like Lovable, v0, or Bolt, but running right on your machine.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://dyad.sh/&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/f6c83dfc-6ffd-4d32-93dd-4b9c46d17790&quot; alt=&quot;Image&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More info at: &lt;a href=&quot;http://dyad.sh/&quot;&gt;http://dyad.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üöÄ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö°Ô∏è &lt;strong&gt;Local&lt;/strong&gt;: Fast, private and no lock-in.&lt;/li&gt; 
 &lt;li&gt;üõ† &lt;strong&gt;Bring your own keys&lt;/strong&gt;: Use your own AI API keys ‚Äî no vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;üñ•Ô∏è &lt;strong&gt;Cross-platform&lt;/strong&gt;: Easy to run on Mac or Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Download&lt;/h2&gt; 
&lt;p&gt;No sign-up required. Just download and go.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.dyad.sh/#download&quot;&gt;üëâ Download for your platform&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;ü§ù Community&lt;/h2&gt; 
&lt;p&gt;Join our growing community of AI app builders on &lt;strong&gt;Reddit&lt;/strong&gt;: &lt;a href=&quot;https://www.reddit.com/r/dyadbuilders/&quot;&gt;r/dyadbuilders&lt;/a&gt; - share your projects and get help from the community!&lt;/p&gt; 
&lt;h2&gt;üõ†Ô∏è Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Dyad&lt;/strong&gt; is open-source (Apache 2.0 licensed).&lt;/p&gt; 
&lt;p&gt;If you&#39;re interested in contributing to dyad, please read our &lt;a href=&quot;https://raw.githubusercontent.com/dyad-sh/dyad/main/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>menloresearch/jan</title>
      <link>https://github.com/menloresearch/jan</link>
      <description>&lt;p&gt;Jan is an open source alternative to ChatGPT that runs 100% offline on your computer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jan - Local AI Assistant&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/menloresearch/jan/dev/docs/src/pages/docs/_assets/jan-app.png&quot; alt=&quot;Jan AI&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &lt;img alt=&quot;GitHub commit activity&quot; src=&quot;https://img.shields.io/github/commit-activity/m/menloresearch/jan&quot; /&gt; &lt;img alt=&quot;Github Last Commit&quot; src=&quot;https://img.shields.io/github/last-commit/menloresearch/jan&quot; /&gt; &lt;img alt=&quot;Github Contributors&quot; src=&quot;https://img.shields.io/github/contributors/menloresearch/jan&quot; /&gt; &lt;img alt=&quot;GitHub closed issues&quot; src=&quot;https://img.shields.io/github/issues-closed/menloresearch/jan&quot; /&gt; &lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/1107178041848909847?label=discord&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://jan.ai/docs/quickstart&quot;&gt;Getting Started&lt;/a&gt; - &lt;a href=&quot;https://jan.ai/docs&quot;&gt;Docs&lt;/a&gt; - &lt;a href=&quot;https://jan.ai/changelog&quot;&gt;Changelog&lt;/a&gt; - &lt;a href=&quot;https://github.com/menloresearch/jan/issues&quot;&gt;Bug reports&lt;/a&gt; - &lt;a href=&quot;https://discord.gg/AsJ8krTT3N&quot;&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Jan is an AI assistant that can run 100% offline on your device. Download and run LLMs with &lt;strong&gt;full control&lt;/strong&gt; and &lt;strong&gt;privacy&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The easiest way to get started is by downloading one of the following versions for your respective operating system:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;b&gt;Stable&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;b&gt;Nightly&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;b&gt;Windows&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/latest/win-x64&quot;&gt;jan.exe&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/nightly/win-x64&quot;&gt;jan.exe&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;b&gt;macOS&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/latest/mac-universal&quot;&gt;jan.dmg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/nightly/mac-universal&quot;&gt;jan.dmg&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;b&gt;Linux (deb)&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/latest/linux-amd64-deb&quot;&gt;jan.deb&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/nightly/linux-amd64-deb&quot;&gt;jan.deb&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;b&gt;Linux (AppImage)&lt;/b&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/latest/linux-amd64-appimage&quot;&gt;jan.AppImage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.jan.ai/download/nightly/linux-amd64-appimage&quot;&gt;jan.AppImage&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Download from &lt;a href=&quot;https://jan.ai/&quot;&gt;jan.ai&lt;/a&gt; or &lt;a href=&quot;https://github.com/menloresearch/jan/releases&quot;&gt;GitHub Releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Local AI Models&lt;/strong&gt;: Download and run LLMs (Llama, Gemma, Qwen, etc.) from HuggingFace&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud Integration&lt;/strong&gt;: Connect to OpenAI, Anthropic, Mistral, Groq, and others&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Assistants&lt;/strong&gt;: Create specialized AI assistants for your tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI-Compatible API&lt;/strong&gt;: Local server at &lt;code&gt;localhost:1337&lt;/code&gt; for other applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Model Context Protocol&lt;/strong&gt;: MCP integration for enhanced capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy First&lt;/strong&gt;: Everything runs locally when you want it to&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Build from Source&lt;/h2&gt; 
&lt;p&gt;For those who enjoy the scenic route:&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js ‚â• 20.0.0&lt;/li&gt; 
 &lt;li&gt;Yarn ‚â• 1.22.0&lt;/li&gt; 
 &lt;li&gt;Make ‚â• 3.81&lt;/li&gt; 
 &lt;li&gt;Rust (for Tauri)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Run with Make&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/menloresearch/jan
cd jan
make dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This handles everything: installs dependencies, builds core components, and launches the app.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Available make targets:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make dev&lt;/code&gt; - Full development setup and launch&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt; - Production build&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test&lt;/code&gt; - Run tests and linting&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt; - Delete everything and start fresh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Run with Mise (easier)&lt;/h3&gt; 
&lt;p&gt;You can also run with &lt;a href=&quot;https://mise.jdx.dev/&quot;&gt;mise&lt;/a&gt;, which is a bit easier as it ensures Node.js, Rust, and other dependency versions are automatically managed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/menloresearch/jan
cd jan

# Install mise (if not already installed)
curl https://mise.run | sh

# Install tools and start development
mise install    # installs Node.js, Rust, and other tools
mise dev        # runs the full development setup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Available mise commands:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;mise dev&lt;/code&gt; - Full development setup and launch&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mise build&lt;/code&gt; - Production build&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mise test&lt;/code&gt; - Run tests and linting&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mise clean&lt;/code&gt; - Delete everything and start fresh&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mise tasks&lt;/code&gt; - List all available tasks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Manual Commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn install
yarn build:core
yarn build:extensions
yarn dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;System Requirements&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Minimum specs for a decent experience:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: 13.6+ (8GB RAM for 3B models, 16GB for 7B, 32GB for 13B)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: 10+ with GPU support for NVIDIA/AMD/Intel Arc&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: Most distributions work, GPU acceleration available&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For detailed compatibility, check our &lt;a href=&quot;https://jan.ai/docs/desktop/mac&quot;&gt;installation guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If things go sideways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check our &lt;a href=&quot;https://jan.ai/docs/troubleshooting&quot;&gt;troubleshooting docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Copy your error logs and system specs&lt;/li&gt; 
 &lt;li&gt;Ask for help in our &lt;a href=&quot;https://discord.gg/FTk2MvZwJH&quot;&gt;Discord&lt;/a&gt; &lt;code&gt;#üÜò|jan-help&lt;/code&gt; channel&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions welcome. See &lt;a href=&quot;https://raw.githubusercontent.com/menloresearch/jan/dev/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for the full spiel.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jan.ai/docs&quot;&gt;Documentation&lt;/a&gt; - The manual you should read&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jan.ai/api-reference&quot;&gt;API Reference&lt;/a&gt; - For the technically inclined&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jan.ai/changelog&quot;&gt;Changelog&lt;/a&gt; - What we broke and fixed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/FTk2MvZwJH&quot;&gt;Discord&lt;/a&gt; - Where the community lives&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt;: &lt;a href=&quot;https://github.com/menloresearch/jan/issues&quot;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business&lt;/strong&gt;: &lt;a href=&quot;mailto:hello@jan.ai&quot;&gt;hello@jan.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;: &lt;a href=&quot;mailto:hr@jan.ai&quot;&gt;hr@jan.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;General Discussion&lt;/strong&gt;: &lt;a href=&quot;https://discord.gg/FTk2MvZwJH&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Apache 2.0 - Because sharing is caring.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Built on the shoulders of giants:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;Llama.cpp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scalar/scalar&quot;&gt;Scalar&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>browserbase/stagehand</title>
      <link>https://github.com/browserbase/stagehand</link>
      <description>&lt;p&gt;The AI Browser Automation Framework&lt;/p&gt;&lt;hr&gt;&lt;div id=&quot;toc&quot; align=&quot;center&quot; style=&quot;margin-bottom: 0;&quot;&gt; 
 &lt;ul style=&quot;list-style: none; margin: 0; padding: 0;&quot;&gt; 
  &lt;a href=&quot;https://stagehand.dev&quot;&gt; 
   &lt;picture&gt; 
    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;media/dark_logo.png&quot; /&gt; 
    &lt;img alt=&quot;Stagehand&quot; src=&quot;https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_logo.png&quot; width=&quot;200&quot; style=&quot;margin-right: 30px;&quot; /&gt; 
   &lt;/picture&gt; &lt;/a&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;The AI Browser Automation Framework&lt;/strong&gt;&lt;br /&gt; &lt;a href=&quot;https://docs.stagehand.dev&quot;&gt;Read the Docs&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/browserbase/stagehand/tree/main?tab=MIT-1-ov-file#MIT-1-ov-file&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;media/dark_license.svg&quot; /&gt; 
   &lt;img alt=&quot;MIT License&quot; src=&quot;https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_license.svg?sanitize=true&quot; /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;a href=&quot;https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;media/dark_slack.svg&quot; /&gt; 
   &lt;img alt=&quot;Slack Community&quot; src=&quot;https://raw.githubusercontent.com/browserbase/stagehand/main/media/light_slack.svg?sanitize=true&quot; /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://trendshift.io/repositories/12122&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/12122&quot; alt=&quot;browserbase%2Fstagehand | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; If you&#39;re looking for the Python implementation, you can find it &lt;a href=&quot;https://github.com/browserbase/stagehand-python&quot;&gt; here&lt;/a&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot; style=&quot;display: flex; align-items: center; justify-content: center; gap: 4px; margin-bottom: 0;&quot;&gt; 
 &lt;b&gt;Vibe code&lt;/b&gt; 
 &lt;span style=&quot;font-size: 1.05em;&quot;&gt; Stagehand with &lt;/span&gt; 
 &lt;a href=&quot;https://director.ai&quot; style=&quot;display: flex; align-items: center;&quot;&gt; &lt;span&gt;Director&lt;/span&gt; &lt;/a&gt; 
 &lt;span&gt; &lt;/span&gt; 
 &lt;picture&gt; 
  &lt;img alt=&quot;Director&quot; src=&quot;https://raw.githubusercontent.com/browserbase/stagehand/main/media/director_icon.svg?sanitize=true&quot; width=&quot;25&quot; /&gt; 
 &lt;/picture&gt; 
&lt;/div&gt; 
&lt;h2&gt;Why Stagehand?&lt;/h2&gt; 
&lt;p&gt;Most existing browser automation tools either require you to write low-level code in a framework like Selenium, Playwright, or Puppeteer, or use high-level agents that can be unpredictable in production. By letting developers choose what to write in code vs. natural language, Stagehand is the natural choice for browser automations in production.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose when to write code vs. natural language&lt;/strong&gt;: use AI when you want to navigate unfamiliar pages, and use code (&lt;a href=&quot;https://playwright.dev/&quot;&gt;Playwright&lt;/a&gt;) when you know exactly what you want to do.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Preview and cache actions&lt;/strong&gt;: Stagehand lets you preview AI actions before running them, and also helps you easily cache repeatable actions to save time and tokens.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Computer use models with one line of code&lt;/strong&gt;: Stagehand lets you integrate SOTA computer use models from OpenAI and Anthropic into the browser with one line of code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Here&#39;s how to build a sample browser automation with Stagehand:&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;div style=&quot;max-width:300px;&quot;&gt; 
  &lt;img src=&quot;https://raw.githubusercontent.com/browserbase/stagehand/main/media/github_demo.gif&quot; alt=&quot;See Stagehand in Action&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// Use Playwright functions on the page object
const page = stagehand.page;
await page.goto(&quot;https://github.com/browserbase&quot;);

// Use act() to execute individual actions
await page.act(&quot;click on the stagehand repo&quot;);

// Use Computer Use agents for larger actions
const agent = stagehand.agent({
    provider: &quot;openai&quot;,
    model: &quot;computer-use-preview&quot;,
});
await agent.execute(&quot;Get to the latest PR&quot;);

// Use extract() to read data from the page
const { author, title } = await page.extract({
  instruction: &quot;extract the author and title of the PR&quot;,
  schema: z.object({
    author: z.string().describe(&quot;The username of the PR author&quot;),
    title: z.string().describe(&quot;The title of the PR&quot;),
  }),
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://docs.stagehand.dev&quot;&gt;docs.stagehand.dev&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Start with Stagehand with one line of code, or check out our &lt;a href=&quot;https://docs.stagehand.dev/get_started/quickstart&quot;&gt;Quickstart Guide&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-browser-app
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.loom.com/share/f5107f86d8c94fa0a8b4b1e89740f7a7&quot;&gt; &lt;p&gt;Watch Anirudh demo create-browser-app to create a Stagehand project!&lt;/p&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://www.loom.com/share/f5107f86d8c94fa0a8b4b1e89740f7a7&quot;&gt; &lt;img style=&quot;max-width:300px;&quot; src=&quot;https://cdn.loom.com/sessions/thumbnails/f5107f86d8c94fa0a8b4b1e89740f7a7-ec3f428b6775ceeb-full-play.gif&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h3&gt;Build and Run from Source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/browserbase/stagehand.git
cd stagehand
pnpm install
pnpm playwright install
pnpm run build
pnpm run example # run the blank script at ./examples/example.ts
pnpm run example 2048 # run the 2048 example at ./examples/2048.ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Stagehand is best when you have an API key for an LLM provider and Browserbase credentials. To add these to your project, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cp .env.example .env
nano .env # Edit the .env file to add API keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; We highly value contributions to Stagehand! For questions or support, please join our &lt;a href=&quot;https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;At a high level, we&#39;re focused on improving reliability, speed, and cost in that order of priority. If you&#39;re interested in contributing, we strongly recommend reaching out to &lt;a href=&quot;https://x.com/miguel_gonzf&quot;&gt;Miguel Gonzalez&lt;/a&gt; or &lt;a href=&quot;https://x.com/pk_iv&quot;&gt;Paul Klein&lt;/a&gt; in our &lt;a href=&quot;https://join.slack.com/t/stagehand-dev/shared_invite/zt-38khc8iv5-T2acb50_0OILUaX7lxeBOg&quot;&gt;Slack community&lt;/a&gt; before starting to ensure that your contribution aligns with our goals.&lt;/p&gt; 
&lt;p&gt;For more information, please see our &lt;a href=&quot;https://docs.stagehand.dev/examples/contributing&quot;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project heavily relies on &lt;a href=&quot;https://playwright.dev/&quot;&gt;Playwright&lt;/a&gt; as a resilient backbone to automate the web. It also would not be possible without the awesome techniques and discoveries made by &lt;a href=&quot;https://github.com/reworkd/tarsier&quot;&gt;tarsier&lt;/a&gt;, &lt;a href=&quot;https://github.com/jbeoris/gemini-zod&quot;&gt;gemini-zod&lt;/a&gt;, and &lt;a href=&quot;https://github.com/normal-computing/fuji-web&quot;&gt;fuji-web&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We&#39;d like to thank the following people for their major contributions to Stagehand:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pkiv&quot;&gt;Paul Klein&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kamath&quot;&gt;Anirudh Kamath&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/seanmcguire12&quot;&gt;Sean McGuire&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/miguelg719&quot;&gt;Miguel Gonzalez&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sameelarif&quot;&gt;Sameel Arif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/filip-michalsky&quot;&gt;Filip Michalsky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://x.com/jeremypress&quot;&gt;Jeremy Press&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/navidpour&quot;&gt;Navid Pour&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the MIT License.&lt;/p&gt; 
&lt;p&gt;Copyright 2025 Browserbase, Inc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fastapi/full-stack-fastapi-template</title>
      <link>https://github.com/fastapi/full-stack-fastapi-template</link>
      <description>&lt;p&gt;Full stack, modern web application template. Using FastAPI, React, SQLModel, PostgreSQL, Docker, GitHub Actions, automatic HTTPS and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Full Stack FastAPI Template&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template/actions?query=workflow%3ATest&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/fastapi/full-stack-fastapi-template/workflows/Test/badge.svg?sanitize=true&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/full-stack-fastapi-template&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://coverage-badge.samuelcolvin.workers.dev/fastapi/full-stack-fastapi-template.svg?sanitize=true&quot; alt=&quot;Coverage&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Technology Stack and Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö° &lt;a href=&quot;https://fastapi.tiangolo.com&quot;&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;&lt;/a&gt; for the Python backend API. 
  &lt;ul&gt; 
   &lt;li&gt;üß∞ &lt;a href=&quot;https://sqlmodel.tiangolo.com&quot;&gt;SQLModel&lt;/a&gt; for the Python SQL database interactions (ORM).&lt;/li&gt; 
   &lt;li&gt;üîç &lt;a href=&quot;https://docs.pydantic.dev&quot;&gt;Pydantic&lt;/a&gt;, used by FastAPI, for the data validation and settings management.&lt;/li&gt; 
   &lt;li&gt;üíæ &lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; as the SQL database.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;üöÄ &lt;a href=&quot;https://react.dev&quot;&gt;React&lt;/a&gt; for the frontend. 
  &lt;ul&gt; 
   &lt;li&gt;üíÉ Using TypeScript, hooks, Vite, and other parts of a modern frontend stack.&lt;/li&gt; 
   &lt;li&gt;üé® &lt;a href=&quot;https://chakra-ui.com&quot;&gt;Chakra UI&lt;/a&gt; for the frontend components.&lt;/li&gt; 
   &lt;li&gt;ü§ñ An automatically generated frontend client.&lt;/li&gt; 
   &lt;li&gt;üß™ &lt;a href=&quot;https://playwright.dev&quot;&gt;Playwright&lt;/a&gt; for End-to-End testing.&lt;/li&gt; 
   &lt;li&gt;ü¶á Dark mode support.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;üêã &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker Compose&lt;/a&gt; for development and production.&lt;/li&gt; 
 &lt;li&gt;üîí Secure password hashing by default.&lt;/li&gt; 
 &lt;li&gt;üîë JWT (JSON Web Token) authentication.&lt;/li&gt; 
 &lt;li&gt;üì´ Email based password recovery.&lt;/li&gt; 
 &lt;li&gt;‚úÖ Tests with &lt;a href=&quot;https://pytest.org&quot;&gt;Pytest&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;üìû &lt;a href=&quot;https://traefik.io&quot;&gt;Traefik&lt;/a&gt; as a reverse proxy / load balancer.&lt;/li&gt; 
 &lt;li&gt;üö¢ Deployment instructions using Docker Compose, including how to set up a frontend Traefik proxy to handle automatic HTTPS certificates.&lt;/li&gt; 
 &lt;li&gt;üè≠ CI (continuous integration) and CD (continuous deployment) based on GitHub Actions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dashboard Login&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/login.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Dashboard - Admin&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/dashboard.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Dashboard - Create User&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/dashboard-create.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Dashboard - Items&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/dashboard-items.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Dashboard - User Settings&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/dashboard-user-settings.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Dashboard - Dark Mode&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/dashboard-dark.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Interactive API Documentation&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/img/docs.png&quot; alt=&quot;API docs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How To Use It&lt;/h2&gt; 
&lt;p&gt;You can &lt;strong&gt;just fork or clone&lt;/strong&gt; this repository and use it as is.&lt;/p&gt; 
&lt;p&gt;‚ú® It just works. ‚ú®&lt;/p&gt; 
&lt;h3&gt;How to Use a Private Repository&lt;/h3&gt; 
&lt;p&gt;If you want to have a private repository, GitHub won&#39;t allow you to simply fork it as it doesn&#39;t allow changing the visibility of forks.&lt;/p&gt; 
&lt;p&gt;But you can do the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a new GitHub repo, for example &lt;code&gt;my-full-stack&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Clone this repository manually, set the name with the name of the project you want to use, for example &lt;code&gt;my-full-stack&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:fastapi/full-stack-fastapi-template.git my-full-stack
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enter into the new directory:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd my-full-stack
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set the new origin to your new repository, copy it from the GitHub interface, for example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git remote set-url origin git@github.com:octocat/my-full-stack.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add this repo as another &quot;remote&quot; to allow you to get updates later:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git remote add upstream git@github.com:fastapi/full-stack-fastapi-template.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push the code to your new repository:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update From the Original Template&lt;/h3&gt; 
&lt;p&gt;After cloning the repository, and after doing changes, you might want to get the latest changes from this original template.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you added the original repository as a remote, you can check it with:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git remote -v

origin    git@github.com:octocat/my-full-stack.git (fetch)
origin    git@github.com:octocat/my-full-stack.git (push)
upstream    git@github.com:fastapi/full-stack-fastapi-template.git (fetch)
upstream    git@github.com:fastapi/full-stack-fastapi-template.git (push)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pull the latest changes without merging:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git pull --no-commit upstream master
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will download the latest changes from this template without committing them, that way you can check everything is right before committing.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If there are conflicts, solve them in your editor.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once you are done, commit the changes:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git merge --continue
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure&lt;/h3&gt; 
&lt;p&gt;You can then update configs in the &lt;code&gt;.env&lt;/code&gt; files to customize your configurations.&lt;/p&gt; 
&lt;p&gt;Before deploying it, make sure you change at least the values for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FIRST_SUPERUSER_PASSWORD&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can (and should) pass these as environment variables from secrets.&lt;/p&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/deployment.md&quot;&gt;deployment.md&lt;/a&gt; docs for more details.&lt;/p&gt; 
&lt;h3&gt;Generate Secret Keys&lt;/h3&gt; 
&lt;p&gt;Some environment variables in the &lt;code&gt;.env&lt;/code&gt; file have a default value of &lt;code&gt;changethis&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You have to change them with a secret key, to generate secret keys you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python -c &quot;import secrets; print(secrets.token_urlsafe(32))&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Copy the content and use that as password / secret key. And run that again to generate another secure key.&lt;/p&gt; 
&lt;h2&gt;How To Use It - Alternative With Copier&lt;/h2&gt; 
&lt;p&gt;This repository also supports generating a new project using &lt;a href=&quot;https://copier.readthedocs.io&quot;&gt;Copier&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It will copy all the files, ask you configuration questions, and update the &lt;code&gt;.env&lt;/code&gt; files with your answers.&lt;/p&gt; 
&lt;h3&gt;Install Copier&lt;/h3&gt; 
&lt;p&gt;You can install Copier with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install copier
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or better, if you have &lt;a href=&quot;https://pipx.pypa.io/&quot;&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;, you can run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pipx install copier
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have &lt;code&gt;pipx&lt;/code&gt;, installing copier is optional, you could run it directly.&lt;/p&gt; 
&lt;h3&gt;Generate a Project With Copier&lt;/h3&gt; 
&lt;p&gt;Decide a name for your new project&#39;s directory, you will use it below. For example, &lt;code&gt;my-awesome-project&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Go to the directory that will be the parent of your project, and run the command with your project&#39;s name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;copier copy https://github.com/fastapi/full-stack-fastapi-template my-awesome-project --trust
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have &lt;code&gt;pipx&lt;/code&gt; and you didn&#39;t install &lt;code&gt;copier&lt;/code&gt;, you can run it directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pipx run copier copy https://github.com/fastapi/full-stack-fastapi-template my-awesome-project --trust
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the &lt;code&gt;--trust&lt;/code&gt; option is necessary to be able to execute a &lt;a href=&quot;https://github.com/fastapi/full-stack-fastapi-template/raw/master/.copier/update_dotenv.py&quot;&gt;post-creation script&lt;/a&gt; that updates your &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; 
&lt;h3&gt;Input Variables&lt;/h3&gt; 
&lt;p&gt;Copier will ask you for some data, you might want to have at hand before generating the project.&lt;/p&gt; 
&lt;p&gt;But don&#39;t worry, you can just update any of that in the &lt;code&gt;.env&lt;/code&gt; files afterwards.&lt;/p&gt; 
&lt;p&gt;The input variables, with their default values (some auto generated) are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;project_name&lt;/code&gt;: (default: &lt;code&gt;&quot;FastAPI Project&quot;&lt;/code&gt;) The name of the project, shown to API users (in .env).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stack_name&lt;/code&gt;: (default: &lt;code&gt;&quot;fastapi-project&quot;&lt;/code&gt;) The name of the stack used for Docker Compose labels and project name (no spaces, no periods) (in .env).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt;: (default: &lt;code&gt;&quot;changethis&quot;&lt;/code&gt;) The secret key for the project, used for security, stored in .env, you can generate one with the method above.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;first_superuser&lt;/code&gt;: (default: &lt;code&gt;&quot;admin@example.com&quot;&lt;/code&gt;) The email of the first superuser (in .env).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;first_superuser_password&lt;/code&gt;: (default: &lt;code&gt;&quot;changethis&quot;&lt;/code&gt;) The password of the first superuser (in .env).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smtp_host&lt;/code&gt;: (default: &quot;&quot;) The SMTP server host to send emails, you can set it later in .env.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smtp_user&lt;/code&gt;: (default: &quot;&quot;) The SMTP server user to send emails, you can set it later in .env.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smtp_password&lt;/code&gt;: (default: &quot;&quot;) The SMTP server password to send emails, you can set it later in .env.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;emails_from_email&lt;/code&gt;: (default: &lt;code&gt;&quot;info@example.com&quot;&lt;/code&gt;) The email account to send emails from, you can set it later in .env.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;postgres_password&lt;/code&gt;: (default: &lt;code&gt;&quot;changethis&quot;&lt;/code&gt;) The password for the PostgreSQL database, stored in .env, you can generate one with the method above.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sentry_dsn&lt;/code&gt;: (default: &quot;&quot;) The DSN for Sentry, if you are using it, you can set it later in .env.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Backend Development&lt;/h2&gt; 
&lt;p&gt;Backend docs: &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/backend/README.md&quot;&gt;backend/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Frontend Development&lt;/h2&gt; 
&lt;p&gt;Frontend docs: &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/frontend/README.md&quot;&gt;frontend/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;p&gt;Deployment docs: &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/deployment.md&quot;&gt;deployment.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;General development docs: &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/development.md&quot;&gt;development.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This includes using Docker Compose, custom local domains, &lt;code&gt;.env&lt;/code&gt; configurations, etc.&lt;/p&gt; 
&lt;h2&gt;Release Notes&lt;/h2&gt; 
&lt;p&gt;Check the file &lt;a href=&quot;https://raw.githubusercontent.com/fastapi/full-stack-fastapi-template/master/release-notes.md&quot;&gt;release-notes.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The Full Stack FastAPI Template is licensed under the terms of the MIT license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>actualbudget/actual</title>
      <link>https://github.com/actualbudget/actual</link>
      <description>&lt;p&gt;A local-first personal finance app&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/actualbudget/actual/master/demo.png&quot; alt=&quot;Actualbudget&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Actual is a local-first personal finance tool. It is 100% free and open-source, written in NodeJS, it has a synchronization element so that all your changes can move between devices without any heavy lifting.&lt;/p&gt; 
&lt;p&gt;If you are interested in contributing, or want to know how development works, see our &lt;a href=&quot;https://actualbudget.org/docs/contributing/&quot;&gt;contributing&lt;/a&gt; document we would love to have you.&lt;/p&gt; 
&lt;p&gt;Want to say thanks? Click the ‚≠ê at the top of the page.&lt;/p&gt; 
&lt;h2&gt;Key Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Actual &lt;a href=&quot;https://discord.gg/pRYNYr4W5A&quot;&gt;discord&lt;/a&gt; community.&lt;/li&gt; 
 &lt;li&gt;Actual &lt;a href=&quot;https://actualbudget.org/docs&quot;&gt;Community Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://actualbudget.org/docs/faq&quot;&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are four ways to deploy Actual:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;One-click deployment &lt;a href=&quot;https://www.pikapods.com/pods?run=actual&quot;&gt;via PikaPods&lt;/a&gt; (~1.40 $/month) - recommended for non-technical users&lt;/li&gt; 
 &lt;li&gt;Managed hosting &lt;a href=&quot;https://actualbudget.org/docs/install/fly&quot;&gt;via Fly.io&lt;/a&gt; (~1.50 $/month)&lt;/li&gt; 
 &lt;li&gt;Self-hosted by using &lt;a href=&quot;https://actualbudget.org/docs/install/docker&quot;&gt;a Docker image&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Local-only apps - &lt;a href=&quot;https://actualbudget.org/download/&quot;&gt;downloadable Windows, Mac and Linux apps&lt;/a&gt; you can run on your device&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Learn more in the &lt;a href=&quot;https://actualbudget.org/docs/install/&quot;&gt;installation instructions docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Ready to Start Budgeting?&lt;/h2&gt; 
&lt;p&gt;Read about &lt;a href=&quot;https://actualbudget.org/docs/getting-started/envelope-budgeting&quot;&gt;Envelope budgeting&lt;/a&gt; to know more about the idea behind Actual Budget.&lt;/p&gt; 
&lt;h3&gt;Are you new to budgeting or want to start fresh?&lt;/h3&gt; 
&lt;p&gt;Check out the community&#39;s &lt;a href=&quot;https://actualbudget.org/docs/getting-started/starting-fresh&quot;&gt;Starting Fresh&lt;/a&gt; guide so you can quickly get up and running!&lt;/p&gt; 
&lt;h3&gt;Are you migrating from other budgeting apps?&lt;/h3&gt; 
&lt;p&gt;Check out the community&#39;s &lt;a href=&quot;https://actualbudget.org/docs/migration/&quot;&gt;Migration&lt;/a&gt; guide to start jumping on the Actual Budget train!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;We have a wide range of documentation on how to use Actual, this is all available in our &lt;a href=&quot;https://actualbudget.org/docs&quot;&gt;Community Documentation&lt;/a&gt;, this includes topics on Budgeting, Account Management, Tips &amp;amp; Tricks and some documentation for developers.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Actual is a community driven product. Learn more about &lt;a href=&quot;https://actualbudget.org/docs/contributing/&quot;&gt;contributing to Actual&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Code structure&lt;/h3&gt; 
&lt;p&gt;The Actual app is split up into a few packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;loot-core - The core application that runs on any platform&lt;/li&gt; 
 &lt;li&gt;desktop-client - The desktop UI&lt;/li&gt; 
 &lt;li&gt;desktop-electron - The desktop app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More information on the project structure is available in our &lt;a href=&quot;https://actualbudget.org/docs/contributing/project-details&quot;&gt;community documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Feature Requests&lt;/h3&gt; 
&lt;p&gt;Current feature requests can be seen &lt;a href=&quot;https://github.com/actualbudget/actual/issues?q=is%3Aissue+label%3A%22needs+votes%22+sort%3Areactions-%2B1-desc&quot;&gt;here&lt;/a&gt;. Vote for your favorite requests by reacting &lt;span&gt;üëç&lt;/span&gt; to the top comment of the request.&lt;/p&gt; 
&lt;p&gt;To add new feature requests, open a new Issue of the &quot;Feature Request&quot; type.&lt;/p&gt; 
&lt;h3&gt;Translation&lt;/h3&gt; 
&lt;p&gt;Make Actual Budget accessible to more people by helping with the &lt;a href=&quot;https://actualbudget.org/docs/contributing/i18n/&quot;&gt;Internationalization&lt;/a&gt; of Actual. We are using a crowd sourcing tool to manage the translations, see our &lt;a href=&quot;https://hosted.weblate.org/projects/actualbudget/&quot;&gt;Weblate Project&lt;/a&gt;. Weblate proudly supports open-source software projects through their &lt;a href=&quot;https://weblate.org/en/hosting/#libre&quot;&gt;Libre plan&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;https://hosted.weblate.org/engage/actualbudget/&quot;&gt; &lt;img src=&quot;https://hosted.weblate.org/widget/actualbudget/actual/287x66-grey.png&quot; alt=&quot;Translation status&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Repo Activity&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://repobeats.axiom.co/api/embed/e20537dd8b74956f86736726ccfbc6f0565bec22.svg?sanitize=true&quot; alt=&quot;Alt&quot; title=&quot;Repobeats analytics image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Thanks to our wonderful sponsors who make Actual Budget possible!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot;&gt; &lt;img src=&quot;https://www.netlify.com/v3/img/components/netlify-color-accent.svg?sanitize=true&quot; alt=&quot;Deploys by Netlify&quot; /&gt; &lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sst/opencode</title>
      <link>https://github.com/sst/opencode</link>
      <description>&lt;p&gt;AI coding agent, built for the terminal.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opencode.ai&quot;&gt; 
  &lt;picture&gt; 
   &lt;source srcset=&quot;packages/web/src/assets/logo-ornate-dark.svg&quot; media=&quot;(prefers-color-scheme: dark)&quot; /&gt; 
   &lt;source srcset=&quot;packages/web/src/assets/logo-ornate-light.svg&quot; media=&quot;(prefers-color-scheme: light)&quot; /&gt; 
   &lt;img src=&quot;https://raw.githubusercontent.com/sst/opencode/dev/packages/web/src/assets/logo-ornate-light.svg?sanitize=true&quot; alt=&quot;opencode logo&quot; /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;AI coding agent, built for the terminal.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opencode.ai/discord&quot;&gt;&lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/1391832426048651334?style=flat-square&amp;amp;label=discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/opencode-ai&quot;&gt;&lt;img alt=&quot;npm&quot; src=&quot;https://img.shields.io/npm/v/opencode-ai?style=flat-square&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sst/opencode/actions/workflows/publish.yml&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/sst/opencode/publish.yml?style=flat-square&amp;amp;branch=dev&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencode.ai&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sst/opencode/dev/packages/web/src/assets/lander/screenshot.png&quot; alt=&quot;opencode Terminal UI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# YOLO
curl -fsSL https://opencode.ai/install | bash

# Package managers
npm i -g opencode-ai@latest        # or bun/pnpm/yarn
brew install sst/tap/opencode      # macOS and Linux
paru -S opencode-bin               # Arch Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Remove versions older than 0.1.x before installing.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation Directory&lt;/h4&gt; 
&lt;p&gt;The install script respects the following priority order for the installation path:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;$OPENCODE_INSTALL_DIR&lt;/code&gt; - Custom installation directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_BIN_DIR&lt;/code&gt; - XDG Base Directory Specification compliant path&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/bin&lt;/code&gt; - Standard user binary directory (if exists or can be created)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.opencode/bin&lt;/code&gt; - Default fallback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Examples
OPENCODE_INSTALL_DIR=/usr/local/bin curl -fsSL https://opencode.ai/install | bash
XDG_BIN_DIR=$HOME/.local/bin curl -fsSL https://opencode.ai/install | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For more info on how to configure opencode &lt;a href=&quot;https://opencode.ai/docs&quot;&gt;&lt;strong&gt;head over to our docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;opencode is an opinionated tool so any fundamental feature needs to go through a design process with the core team.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] We do not accept PRs for core features.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;However we still merge a ton of PRs - you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug fixes&lt;/li&gt; 
 &lt;li&gt;Improvements to LLM performance&lt;/li&gt; 
 &lt;li&gt;Support for new providers&lt;/li&gt; 
 &lt;li&gt;Fixes for env specific quirks&lt;/li&gt; 
 &lt;li&gt;Missing standard behavior&lt;/li&gt; 
 &lt;li&gt;Documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Take a look at the git history to see what kind of PRs we end up merging.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you do not follow the above guidelines we might close your PR.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To run opencode locally you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bun&lt;/li&gt; 
 &lt;li&gt;Golang 1.24.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bun install
$ bun dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development Notes&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;API Client&lt;/strong&gt;: After making changes to the TypeScript API endpoints in &lt;code&gt;packages/opencode/src/server/server.ts&lt;/code&gt;, you will need the opencode team to generate a new stainless sdk for the clients.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;How is this different than Claude Code?&lt;/h4&gt; 
&lt;p&gt;It&#39;s very similar to Claude Code in terms of capability. Here are the key differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open source&lt;/li&gt; 
 &lt;li&gt;Not coupled to any provider. Although Anthropic is recommended, opencode can be used with OpenAI, Google or even local models. As models evolve the gaps between them will close and pricing will drop so being provider-agnostic is important.&lt;/li&gt; 
 &lt;li&gt;A focus on TUI. opencode is built by neovim users and the creators of &lt;a href=&quot;https://terminal.shop&quot;&gt;terminal.shop&lt;/a&gt;; we are going to push the limits of what&#39;s possible in the terminal.&lt;/li&gt; 
 &lt;li&gt;A client/server architecture. This for example can allow opencode to run on your computer, while you can drive it remotely from a mobile app. Meaning that the TUI frontend is just one of the possible clients.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;What&#39;s the other repo?&lt;/h4&gt; 
&lt;p&gt;The other confusingly named repo has no relation to this one. You can &lt;a href=&quot;https://x.com/thdxr/status/1933561254481666466&quot;&gt;read the story behind it here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Join our community&lt;/strong&gt; &lt;a href=&quot;https://discord.gg/opencode&quot;&gt;Discord&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/c/sst-dev&quot;&gt;YouTube&lt;/a&gt; | &lt;a href=&quot;https://x.com/SST_dev&quot;&gt;X.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>blakeblackshear/frigate</title>
      <link>https://github.com/blakeblackshear/frigate</link>
      <description>&lt;p&gt;NVR with realtime local object detection for IP cameras&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img align=&quot;center&quot; alt=&quot;logo&quot; src=&quot;https://raw.githubusercontent.com/blakeblackshear/frigate/dev/docs/static/img/frigate.png&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Frigate - NVR With Realtime Object Detection for IP Cameras&lt;/h1&gt; 
&lt;a href=&quot;https://hosted.weblate.org/engage/frigate-nvr/&quot;&gt; &lt;img src=&quot;https://hosted.weblate.org/widget/frigate-nvr/language-badge.svg?sanitize=true&quot; alt=&quot;Translation status&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;[English] | &lt;a href=&quot;https://github.com/blakeblackshear/frigate/raw/dev/README_CN.md&quot;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A complete and local NVR designed for &lt;a href=&quot;https://www.home-assistant.io&quot;&gt;Home Assistant&lt;/a&gt; with AI object detection. Uses OpenCV and Tensorflow to perform realtime object detection locally for IP cameras.&lt;/p&gt; 
&lt;p&gt;Use of a GPU or AI accelerator such as a &lt;a href=&quot;https://coral.ai/products/&quot;&gt;Google Coral&lt;/a&gt; or &lt;a href=&quot;https://hailo.ai/&quot;&gt;Hailo&lt;/a&gt; is highly recommended. AI accelerators will outperform even the best CPUs with very little overhead.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tight integration with Home Assistant via a &lt;a href=&quot;https://github.com/blakeblackshear/frigate-hass-integration&quot;&gt;custom component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Designed to minimize resource use and maximize performance by only looking for objects when and where it is necessary&lt;/li&gt; 
 &lt;li&gt;Leverages multiprocessing heavily with an emphasis on realtime over processing every frame&lt;/li&gt; 
 &lt;li&gt;Uses a very low overhead motion detection to determine where to run object detection&lt;/li&gt; 
 &lt;li&gt;Object detection with TensorFlow runs in separate processes for maximum FPS&lt;/li&gt; 
 &lt;li&gt;Communicates over MQTT for easy integration into other systems&lt;/li&gt; 
 &lt;li&gt;Records video with retention settings based on detected objects&lt;/li&gt; 
 &lt;li&gt;24/7 recording&lt;/li&gt; 
 &lt;li&gt;Re-streaming via RTSP to reduce the number of connections to your camera&lt;/li&gt; 
 &lt;li&gt;WebRTC &amp;amp; MSE support for low-latency live view&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;View the documentation at &lt;a href=&quot;https://docs.frigate.video&quot;&gt;https://docs.frigate.video&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;If you would like to make a donation to support development, please use &lt;a href=&quot;https://github.com/sponsors/blakeblackshear&quot;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Live dashboard&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width=&quot;800&quot; alt=&quot;Live dashboard&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/5e713cb9-9db5-41dc-947a-6937c3bc376e&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;Streamlined review workflow&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width=&quot;800&quot; alt=&quot;Streamlined review workflow&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/6fed96e8-3b18-40e5-9ddc-31e6f3c9f2ff&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;Multi-camera scrubbing&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width=&quot;800&quot; alt=&quot;Multi-camera scrubbing&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/d6788a15-0eeb-4427-a8d4-80b93cae3d74&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;Built-in mask and zone editor&lt;/h3&gt; 
&lt;div&gt; 
 &lt;img width=&quot;800&quot; alt=&quot;Multi-camera scrubbing&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/d7885fc3-bfe6-452f-b7d0-d957cb3e31f5&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://hosted.weblate.org/projects/frigate-nvr/&quot;&gt;Weblate&lt;/a&gt; to support language translations. Contributions are always welcome.&lt;/p&gt; 
&lt;a href=&quot;https://hosted.weblate.org/engage/frigate-nvr/&quot;&gt; &lt;img src=&quot;https://hosted.weblate.org/widget/frigate-nvr/multi-auto.svg?sanitize=true&quot; alt=&quot;Translation status&quot; /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>musistudio/claude-code-router</title>
      <link>https://github.com/musistudio/claude-code-router</link>
      <description>&lt;p&gt;Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Router&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/README_zh.md&quot;&gt;‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A powerful tool to route Claude Code requests to different models and customize any request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/claude-code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Model Routing&lt;/strong&gt;: Route requests to different models based on your needs (e.g., background tasks, thinking, long context).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Provider Support&lt;/strong&gt;: Supports various model providers like OpenRouter, DeepSeek, Ollama, Gemini, Volcengine, and SiliconFlow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request/Response Transformation&lt;/strong&gt;: Customize requests and responses for different providers using transformers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Model Switching&lt;/strong&gt;: Switch models on-the-fly within Claude Code using the &lt;code&gt;/model&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Actions Integration&lt;/strong&gt;: Trigger Claude Code tasks in your GitHub workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt;: Extend functionality with custom transformers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;h3&gt;1. Installation&lt;/h3&gt; 
&lt;p&gt;First, ensure you have &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/quickstart&quot;&gt;Claude Code&lt;/a&gt; installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g @anthropic-ai/claude-code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, install Claude Code Router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g @musistudio/claude-code-router
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Configuration&lt;/h3&gt; 
&lt;p&gt;Create and configure your &lt;code&gt;~/.claude-code-router/config.json&lt;/code&gt; file. For more details, you can refer to &lt;code&gt;config.example.json&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;config.json&lt;/code&gt; file has several key sections:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;PROXY_URL&lt;/code&gt;&lt;/strong&gt; (optional): You can set a proxy for API requests, for example: &lt;code&gt;&quot;PROXY_URL&quot;: &quot;http://127.0.0.1:7890&quot;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;LOG&lt;/code&gt;&lt;/strong&gt; (optional): You can enable logging by setting it to &lt;code&gt;true&lt;/code&gt;. The log file will be located at &lt;code&gt;$HOME/.claude-code-router.log&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;APIKEY&lt;/code&gt;&lt;/strong&gt; (optional): You can set a secret key to authenticate requests. When set, clients must provide this key in the &lt;code&gt;Authorization&lt;/code&gt; header (e.g., &lt;code&gt;Bearer your-secret-key&lt;/code&gt;) or the &lt;code&gt;x-api-key&lt;/code&gt; header. Example: &lt;code&gt;&quot;APIKEY&quot;: &quot;your-secret-key&quot;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/strong&gt; (optional): You can set the host address for the server. If &lt;code&gt;APIKEY&lt;/code&gt; is not set, the host will be forced to &lt;code&gt;127.0.0.1&lt;/code&gt; for security reasons to prevent unauthorized access. Example: &lt;code&gt;&quot;HOST&quot;: &quot;0.0.0.0&quot;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;NON_INTERACTIVE_MODE&lt;/code&gt;&lt;/strong&gt; (optional): When set to &lt;code&gt;true&lt;/code&gt;, enables compatibility with non-interactive environments like GitHub Actions, Docker containers, or other CI/CD systems. This sets appropriate environment variables (&lt;code&gt;CI=true&lt;/code&gt;, &lt;code&gt;FORCE_COLOR=0&lt;/code&gt;, etc.) and configures stdin handling to prevent the process from hanging in automated environments. Example: &lt;code&gt;&quot;NON_INTERACTIVE_MODE&quot;: true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Providers&lt;/code&gt;&lt;/strong&gt;: Used to configure different model providers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/strong&gt;: Used to set up routing rules. &lt;code&gt;default&lt;/code&gt; specifies the default model, which will be used for all requests if no other route is configured.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;API_TIMEOUT_MS&lt;/code&gt;&lt;/strong&gt;: Specifies the timeout for API calls in milliseconds.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Environment Variable Interpolation&lt;/h4&gt; 
&lt;p&gt;Claude Code Router supports environment variable interpolation for secure API key management. You can reference environment variables in your &lt;code&gt;config.json&lt;/code&gt; using either &lt;code&gt;$VAR_NAME&lt;/code&gt; or &lt;code&gt;${VAR_NAME}&lt;/code&gt; syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;OPENAI_API_KEY&quot;: &quot;$OPENAI_API_KEY&quot;,
  &quot;GEMINI_API_KEY&quot;: &quot;${GEMINI_API_KEY}&quot;,
  &quot;Providers&quot;: [
    {
      &quot;name&quot;: &quot;openai&quot;,
      &quot;api_base_url&quot;: &quot;https://api.openai.com/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;$OPENAI_API_KEY&quot;,
      &quot;models&quot;: [&quot;gpt-5&quot;, &quot;gpt-5-mini&quot;]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This allows you to keep sensitive API keys in environment variables instead of hardcoding them in configuration files. The interpolation works recursively through nested objects and arrays.&lt;/p&gt; 
&lt;p&gt;Here is a comprehensive example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;APIKEY&quot;: &quot;your-secret-key&quot;,
  &quot;PROXY_URL&quot;: &quot;http://127.0.0.1:7890&quot;,
  &quot;LOG&quot;: true,
  &quot;API_TIMEOUT_MS&quot;: 600000,
  &quot;NON_INTERACTIVE_MODE&quot;: false,
  &quot;Providers&quot;: [
    {
      &quot;name&quot;: &quot;openrouter&quot;,
      &quot;api_base_url&quot;: &quot;https://openrouter.ai/api/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [
        &quot;google/gemini-2.5-pro-preview&quot;,
        &quot;anthropic/claude-sonnet-4&quot;,
        &quot;anthropic/claude-3.5-sonnet&quot;,
        &quot;anthropic/claude-3.7-sonnet:thinking&quot;
      ],
      &quot;transformer&quot;: {
        &quot;use&quot;: [&quot;openrouter&quot;]
      }
    },
    {
      &quot;name&quot;: &quot;deepseek&quot;,
      &quot;api_base_url&quot;: &quot;https://api.deepseek.com/chat/completions&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [&quot;deepseek-chat&quot;, &quot;deepseek-reasoner&quot;],
      &quot;transformer&quot;: {
        &quot;use&quot;: [&quot;deepseek&quot;],
        &quot;deepseek-chat&quot;: {
          &quot;use&quot;: [&quot;tooluse&quot;]
        }
      }
    },
    {
      &quot;name&quot;: &quot;ollama&quot;,
      &quot;api_base_url&quot;: &quot;http://localhost:11434/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;ollama&quot;,
      &quot;models&quot;: [&quot;qwen2.5-coder:latest&quot;]
    },
    {
      &quot;name&quot;: &quot;gemini&quot;,
      &quot;api_base_url&quot;: &quot;https://generativelanguage.googleapis.com/v1beta/models/&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [&quot;gemini-2.5-flash&quot;, &quot;gemini-2.5-pro&quot;],
      &quot;transformer&quot;: {
        &quot;use&quot;: [&quot;gemini&quot;]
      }
    },
    {
      &quot;name&quot;: &quot;volcengine&quot;,
      &quot;api_base_url&quot;: &quot;https://ark.cn-beijing.volces.com/api/v3/chat/completions&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [&quot;deepseek-v3-250324&quot;, &quot;deepseek-r1-250528&quot;],
      &quot;transformer&quot;: {
        &quot;use&quot;: [&quot;deepseek&quot;]
      }
    },
    {
      &quot;name&quot;: &quot;modelscope&quot;,
      &quot;api_base_url&quot;: &quot;https://api-inference.modelscope.cn/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;&quot;,
      &quot;models&quot;: [&quot;Qwen/Qwen3-Coder-480B-A35B-Instruct&quot;, &quot;Qwen/Qwen3-235B-A22B-Thinking-2507&quot;],
      &quot;transformer&quot;: {
        &quot;use&quot;: [
          [
            &quot;maxtoken&quot;,
            {
              &quot;max_tokens&quot;: 65536
            }
          ],
          &quot;enhancetool&quot;
        ],
        &quot;Qwen/Qwen3-235B-A22B-Thinking-2507&quot;: {
          &quot;use&quot;: [&quot;reasoning&quot;]
        }
      }
    },
    {
      &quot;name&quot;: &quot;dashscope&quot;,
      &quot;api_base_url&quot;: &quot;https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;&quot;,
      &quot;models&quot;: [&quot;qwen3-coder-plus&quot;],
      &quot;transformer&quot;: {
        &quot;use&quot;: [
          [
            &quot;maxtoken&quot;,
            {
              &quot;max_tokens&quot;: 65536
            }
          ],
          &quot;enhancetool&quot;
        ]
      }
    },
    {
      &quot;name&quot;: &quot;aihubmix&quot;,
      &quot;api_base_url&quot;: &quot;https://aihubmix.com/v1/chat/completions&quot;,
      &quot;api_key&quot;: &quot;sk-&quot;,
      &quot;models&quot;: [
        &quot;Z/glm-4.5&quot;,
        &quot;claude-opus-4-20250514&quot;,
        &quot;gemini-2.5-pro&quot;
      ]
    }
  ],
  &quot;Router&quot;: {
    &quot;default&quot;: &quot;deepseek,deepseek-chat&quot;,
    &quot;background&quot;: &quot;ollama,qwen2.5-coder:latest&quot;,
    &quot;think&quot;: &quot;deepseek,deepseek-reasoner&quot;,
    &quot;longContext&quot;: &quot;openrouter,google/gemini-2.5-pro-preview&quot;,
    &quot;longContextThreshold&quot;: 60000,
    &quot;webSearch&quot;: &quot;gemini,gemini-2.5-flash&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Running Claude Code with the Router&lt;/h3&gt; 
&lt;p&gt;Start Claude Code using the router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ccr code
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: After modifying the configuration file, you need to restart the service for the changes to take effect:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ccr restart
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;4. UI Mode (Beta)&lt;/h3&gt; 
&lt;p&gt;For a more intuitive experience, you can use the UI mode to manage your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ccr ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will open a web-based interface where you can easily view and edit your &lt;code&gt;config.json&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/ui.png&quot; alt=&quot;UI&quot; /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The UI mode is currently in beta. 100% vibe coding: including project initialization, I just created a folder and a project.md document, and all code was generated by ccr + qwen3-coder + gemini(webSearch). If you encounter any issues, please submit an issue on GitHub.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Providers&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Providers&lt;/code&gt; array is where you define the different model providers you want to use. Each provider object requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: A unique name for the provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api_base_url&lt;/code&gt;: The full API endpoint for chat completions.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;: Your API key for the provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: A list of model names available from this provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;transformer&lt;/code&gt; (optional): Specifies transformers to process requests and responses.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Transformers&lt;/h4&gt; 
&lt;p&gt;Transformers allow you to modify the request and response payloads to ensure compatibility with different provider APIs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Global Transformer&lt;/strong&gt;: Apply a transformer to all models from a provider. In this example, the &lt;code&gt;openrouter&lt;/code&gt; transformer is applied to all models under the &lt;code&gt;openrouter&lt;/code&gt; provider.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;openrouter&quot;,
  &quot;api_base_url&quot;: &quot;https://openrouter.ai/api/v1/chat/completions&quot;,
  &quot;api_key&quot;: &quot;sk-xxx&quot;,
  &quot;models&quot;: [
    &quot;google/gemini-2.5-pro-preview&quot;,
    &quot;anthropic/claude-sonnet-4&quot;,
    &quot;anthropic/claude-3.5-sonnet&quot;
  ],
  &quot;transformer&quot;: { &quot;use&quot;: [&quot;openrouter&quot;] }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Model-Specific Transformer&lt;/strong&gt;: Apply a transformer to a specific model. In this example, the &lt;code&gt;deepseek&lt;/code&gt; transformer is applied to all models, and an additional &lt;code&gt;tooluse&lt;/code&gt; transformer is applied only to the &lt;code&gt;deepseek-chat&lt;/code&gt; model.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;deepseek&quot;,
  &quot;api_base_url&quot;: &quot;https://api.deepseek.com/chat/completions&quot;,
  &quot;api_key&quot;: &quot;sk-xxx&quot;,
  &quot;models&quot;: [&quot;deepseek-chat&quot;, &quot;deepseek-reasoner&quot;],
  &quot;transformer&quot;: {
    &quot;use&quot;: [&quot;deepseek&quot;],
    &quot;deepseek-chat&quot;: { &quot;use&quot;: [&quot;tooluse&quot;] }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Passing Options to a Transformer&lt;/strong&gt;: Some transformers, like &lt;code&gt;maxtoken&lt;/code&gt;, accept options. To pass options, use a nested array where the first element is the transformer name and the second is an options object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;siliconflow&quot;,
  &quot;api_base_url&quot;: &quot;https://api.siliconflow.cn/v1/chat/completions&quot;,
  &quot;api_key&quot;: &quot;sk-xxx&quot;,
  &quot;models&quot;: [&quot;moonshotai/Kimi-K2-Instruct&quot;],
  &quot;transformer&quot;: {
    &quot;use&quot;: [
      [
        &quot;maxtoken&quot;,
        {
          &quot;max_tokens&quot;: 16384
        }
      ]
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Available Built-in Transformers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Anthropic&lt;/code&gt;:If you use only the &lt;code&gt;Anthropic&lt;/code&gt; transformer, it will preserve the original request and response parameters(you can use it to connect directly to an Anthropic endpoint).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;deepseek&lt;/code&gt;: Adapts requests/responses for DeepSeek API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gemini&lt;/code&gt;: Adapts requests/responses for Gemini API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;openrouter&lt;/code&gt;: Adapts requests/responses for OpenRouter API. It can also accept a &lt;code&gt;provider&lt;/code&gt; routing parameter to specify which underlying providers OpenRouter should use. For more details, refer to the &lt;a href=&quot;https://openrouter.ai/docs/features/provider-routing&quot;&gt;OpenRouter documentation&lt;/a&gt;. See an example below: &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  &quot;transformer&quot;: {
    &quot;use&quot;: [&quot;openrouter&quot;],
    &quot;moonshotai/kimi-k2&quot;: {
      &quot;use&quot;: [
        [
          &quot;openrouter&quot;,
          {
            &quot;provider&quot;: {
              &quot;only&quot;: [&quot;moonshotai/fp8&quot;]
            }
          }
        ]
      ]
    }
  }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;groq&lt;/code&gt;: Adapts requests/responses for groq API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maxtoken&lt;/code&gt;: Sets a specific &lt;code&gt;max_tokens&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tooluse&lt;/code&gt;: Optimizes tool usage for certain models via &lt;code&gt;tool_choice&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gemini-cli&lt;/code&gt; (experimental): Unofficial support for Gemini via Gemini CLI &lt;a href=&quot;https://gist.github.com/musistudio/1c13a65f35916a7ab690649d3df8d1cd&quot;&gt;gemini-cli.js&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reasoning&lt;/code&gt;: Used to process the &lt;code&gt;reasoning_content&lt;/code&gt; field.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sampling&lt;/code&gt;: Used to process sampling information fields such as &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;top_p&lt;/code&gt;, &lt;code&gt;top_k&lt;/code&gt;, and &lt;code&gt;repetition_penalty&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;enhancetool&lt;/code&gt;: Adds a layer of error tolerance to the tool call parameters returned by the LLM (this will cause the tool call information to no longer be streamed).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cleancache&lt;/code&gt;: Clears the &lt;code&gt;cache_control&lt;/code&gt; field from requests.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vertex-gemini&lt;/code&gt;: Handles the Gemini API using Vertex authentication.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;qwen-cli&lt;/code&gt; (experimental): Unofficial support for qwen3-coder-plus model via Qwen CLI &lt;a href=&quot;https://gist.github.com/musistudio/f5a67841ced39912fd99e42200d5ca8b&quot;&gt;qwen-cli.js&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Custom Transformers:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can also create your own transformers and load them via the &lt;code&gt;transformers&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;transformers&quot;: [
    {
      &quot;path&quot;: &quot;$HOME/.claude-code-router/plugins/gemini-cli.js&quot;,
      &quot;options&quot;: {
        &quot;project&quot;: &quot;xxx&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Router&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Router&lt;/code&gt; object defines which model to use for different scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default&lt;/code&gt;: The default model for general tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;background&lt;/code&gt;: A model for background tasks. This can be a smaller, local model to save costs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;think&lt;/code&gt;: A model for reasoning-heavy tasks, like Plan Mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;longContext&lt;/code&gt;: A model for handling long contexts (e.g., &amp;gt; 60K tokens).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;longContextThreshold&lt;/code&gt; (optional): The token count threshold for triggering the long context model. Defaults to 60000 if not specified.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webSearch&lt;/code&gt;: Used for handling web search tasks and this requires the model itself to support the feature. If you&#39;re using openrouter, you need to add the &lt;code&gt;:online&lt;/code&gt; suffix after the model name.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also switch models dynamically in Claude Code with the &lt;code&gt;/model&lt;/code&gt; command: &lt;code&gt;/model provider_name,model_name&lt;/code&gt; Example: &lt;code&gt;/model openrouter,anthropic/claude-3.5-sonnet&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Custom Router&lt;/h4&gt; 
&lt;p&gt;For more advanced routing logic, you can specify a custom router script via the &lt;code&gt;CUSTOM_ROUTER_PATH&lt;/code&gt; in your &lt;code&gt;config.json&lt;/code&gt;. This allows you to implement complex routing rules beyond the default scenarios.&lt;/p&gt; 
&lt;p&gt;In your &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;CUSTOM_ROUTER_PATH&quot;: &quot;$HOME/.claude-code-router/custom-router.js&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The custom router file must be a JavaScript module that exports an &lt;code&gt;async&lt;/code&gt; function. This function receives the request object and the config object as arguments and should return the provider and model name as a string (e.g., &lt;code&gt;&quot;provider_name,model_name&quot;&lt;/code&gt;), or &lt;code&gt;null&lt;/code&gt; to fall back to the default router.&lt;/p&gt; 
&lt;p&gt;Here is an example of a &lt;code&gt;custom-router.js&lt;/code&gt; based on &lt;code&gt;custom-router.example.js&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// $HOME/.claude-code-router/custom-router.js

/**
 * A custom router function to determine which model to use based on the request.
 *
 * @param {object} req - The request object from Claude Code, containing the request body.
 * @param {object} config - The application&#39;s config object.
 * @returns {Promise&amp;lt;string|null&amp;gt;} - A promise that resolves to the &quot;provider,model_name&quot; string, or null to use the default router.
 */
module.exports = async function router(req, config) {
  const userMessage = req.body.messages.find((m) =&amp;gt; m.role === &quot;user&quot;)?.content;

  if (userMessage &amp;amp;&amp;amp; userMessage.includes(&quot;explain this code&quot;)) {
    // Use a powerful model for code explanation
    return &quot;openrouter,anthropic/claude-3.5-sonnet&quot;;
  }

  // Fallback to the default router configuration
  return null;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Subagent Routing&lt;/h5&gt; 
&lt;p&gt;For routing within subagents, you must specify a particular provider and model by including &lt;code&gt;&amp;lt;CCR-SUBAGENT-MODEL&amp;gt;provider,model&amp;lt;/CCR-SUBAGENT-MODEL&amp;gt;&lt;/code&gt; at the &lt;strong&gt;beginning&lt;/strong&gt; of the subagent&#39;s prompt. This allows you to direct specific subagent tasks to designated models.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CCR-SUBAGENT-MODEL&amp;gt;openrouter,anthropic/claude-3.5-sonnet&amp;lt;/CCR-SUBAGENT-MODEL&amp;gt;
Please help me analyze this code snippet for potential optimizations...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ü§ñ GitHub Actions&lt;/h2&gt; 
&lt;p&gt;Integrate Claude Code Router into your CI/CD pipeline. After setting up &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/github-actions&quot;&gt;Claude Code Actions&lt;/a&gt;, modify your &lt;code&gt;.github/workflows/claude.yaml&lt;/code&gt; to use the router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Claude Code

on:
  issue_comment:
    types: [created]
  # ... other triggers

jobs:
  claude:
    if: |
      (github.event_name == &#39;issue_comment&#39; &amp;amp;&amp;amp; contains(github.event.comment.body, &#39;@claude&#39;)) ||
      # ... other conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; $HOME/.claude-code-router/config.json
          {
            &quot;log&quot;: true,
            &quot;NON_INTERACTIVE_MODE&quot;: true,
            &quot;OPENAI_API_KEY&quot;: &quot;${{ secrets.OPENAI_API_KEY }}&quot;,
            &quot;OPENAI_BASE_URL&quot;: &quot;https://api.deepseek.com&quot;,
            &quot;OPENAI_MODEL&quot;: &quot;deepseek-chat&quot;
          }
          EOF
        shell: bash

      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &amp;amp;
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: &quot;any-string-is-ok&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When running in GitHub Actions or other automation environments, make sure to set &lt;code&gt;&quot;NON_INTERACTIVE_MODE&quot;: true&lt;/code&gt; in your configuration to prevent the process from hanging due to stdin handling issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This setup allows for interesting automations, like running tasks during off-peak hours to reduce API costs.&lt;/p&gt; 
&lt;h2&gt;üìù Further Reading&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/project-motivation-and-how-it-works.md&quot;&gt;Project Motivation and How It Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/maybe-we-can-do-more-with-the-route.md&quot;&gt;Maybe We Can Do More with the Router&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ù§Ô∏è Support &amp;amp; Sponsoring&lt;/h2&gt; 
&lt;p&gt;If you find this project helpful, please consider sponsoring its development. Your support is greatly appreciated!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://ko-fi.com/F1F31GN2GM&quot;&gt;&lt;img src=&quot;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&quot; alt=&quot;ko-fi&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://paypal.me/musistudio1999&quot;&gt;Paypal&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/alipay.jpg&quot; width=&quot;200&quot; alt=&quot;Alipay&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/wechat.jpg&quot; width=&quot;200&quot; alt=&quot;WeChat Pay&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Our Sponsors&lt;/h3&gt; 
&lt;p&gt;A huge thank you to all our sponsors for their generous support!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://aihubmix.com/&quot;&gt;AIHubmix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@Simon Leischnig&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/duanshuaimin&quot;&gt;@duanshuaimin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vrgitadmin&quot;&gt;@vrgitadmin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*o&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ceilwoo&quot;&gt;@ceilwoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*ËØ¥&lt;/li&gt; 
 &lt;li&gt;@*Êõ¥&lt;/li&gt; 
 &lt;li&gt;@K*g&lt;/li&gt; 
 &lt;li&gt;@R*R&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bobleer&quot;&gt;@bobleer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Ëãó&lt;/li&gt; 
 &lt;li&gt;@*Âàí&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Clarence-pan&quot;&gt;@Clarence-pan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/carter003&quot;&gt;@carter003&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@S*r&lt;/li&gt; 
 &lt;li&gt;@*Êôñ&lt;/li&gt; 
 &lt;li&gt;@*Êïè&lt;/li&gt; 
 &lt;li&gt;@Z*z&lt;/li&gt; 
 &lt;li&gt;@*ÁÑ∂&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cluic&quot;&gt;@cluic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Ëãó&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PromptExpert&quot;&gt;@PromptExpert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Â∫î&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yusnake&quot;&gt;@yusnake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*È£û&lt;/li&gt; 
 &lt;li&gt;@Ëë£*&lt;/li&gt; 
 &lt;li&gt;@*Ê±Ä&lt;/li&gt; 
 &lt;li&gt;@*Ê∂Ø&lt;/li&gt; 
 &lt;li&gt;@*:-Ôºâ&lt;/li&gt; 
 &lt;li&gt;@**Á£ä&lt;/li&gt; 
 &lt;li&gt;@*Áê¢&lt;/li&gt; 
 &lt;li&gt;@*Êàê&lt;/li&gt; 
 &lt;li&gt;@Z*o&lt;/li&gt; 
 &lt;li&gt;@*Áê®&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/congzhangzh&quot;&gt;@congzhangzh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*_&lt;/li&gt; 
 &lt;li&gt;@Z*m&lt;/li&gt; 
 &lt;li&gt;@*Èë´&lt;/li&gt; 
 &lt;li&gt;@c*y&lt;/li&gt; 
 &lt;li&gt;@*Êòï&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/witsice&quot;&gt;@witsice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@b*g&lt;/li&gt; 
 &lt;li&gt;@*‰∫ø&lt;/li&gt; 
 &lt;li&gt;@*Ëæâ&lt;/li&gt; 
 &lt;li&gt;@JACK&lt;/li&gt; 
 &lt;li&gt;@*ÂÖâ&lt;/li&gt; 
 &lt;li&gt;@W*l&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kesku&quot;&gt;@kesku&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@Ê∞¥*‰∏´&lt;/li&gt; 
 &lt;li&gt;@‰∫åÂêâÂêâ&lt;/li&gt; 
 &lt;li&gt;@a*g&lt;/li&gt; 
 &lt;li&gt;@*Êûó&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(If your name is masked, please contact me via my homepage email to update it with your GitHub username.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ericc-ch/copilot-api</title>
      <link>https://github.com/ericc-ch/copilot-api</link>
      <description>&lt;p&gt;Turn GitHub Copilot into OpenAI/Anthropic API compatible server. Usable with Claude Code!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot API Proxy&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This is a reverse-engineered proxy of GitHub Copilot API. It is not supported by GitHub, and may break unexpectedly. Use at your own risk.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://ko-fi.com/E1E519XS7W&quot;&gt;&lt;img src=&quot;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&quot; alt=&quot;ko-fi&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using &lt;a href=&quot;https://github.com/sst/opencode&quot;&gt;opencode&lt;/a&gt;, you do not need this project. Opencode supports GitHub Copilot provider out of the box.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Project Overview&lt;/h2&gt; 
&lt;p&gt;A reverse-engineered proxy for the GitHub Copilot API that exposes it as an OpenAI and Anthropic compatible service. This allows you to use GitHub Copilot with any tool that supports the OpenAI Chat Completions API or the Anthropic Messages API, including to power &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/overview&quot;&gt;Claude Code&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI &amp;amp; Anthropic Compatibility&lt;/strong&gt;: Exposes GitHub Copilot as an OpenAI-compatible (&lt;code&gt;/v1/chat/completions&lt;/code&gt;, &lt;code&gt;/v1/models&lt;/code&gt;, &lt;code&gt;/v1/embeddings&lt;/code&gt;) and Anthropic-compatible (&lt;code&gt;/v1/messages&lt;/code&gt;) API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Claude Code Integration&lt;/strong&gt;: Easily configure and launch &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/overview&quot;&gt;Claude Code&lt;/a&gt; to use Copilot as its backend with a simple command-line flag (&lt;code&gt;--claude-code&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Usage Dashboard&lt;/strong&gt;: A web-based dashboard to monitor your Copilot API usage, view quotas, and see detailed statistics.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rate Limit Control&lt;/strong&gt;: Manage API usage with rate-limiting options (&lt;code&gt;--rate-limit&lt;/code&gt;) and a waiting mechanism (&lt;code&gt;--wait&lt;/code&gt;) to prevent errors from rapid requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manual Request Approval&lt;/strong&gt;: Manually approve or deny each API request for fine-grained control over usage (&lt;code&gt;--manual&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Token Visibility&lt;/strong&gt;: Option to display GitHub and Copilot tokens during authentication and refresh for debugging (&lt;code&gt;--show-token&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Authentication&lt;/strong&gt;: Authenticate interactively or provide a GitHub token directly, suitable for CI/CD environments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support for Different Account Types&lt;/strong&gt;: Works with individual, business, and enterprise GitHub Copilot plans.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/7654b383-669d-4eb9-b23c-06d7aefee8c5&quot;&gt;https://github.com/user-attachments/assets/7654b383-669d-4eb9-b23c-06d7aefee8c5&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bun (&amp;gt;= 1.2.x)&lt;/li&gt; 
 &lt;li&gt;GitHub account with Copilot subscription (individual, business, or enterprise)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To install dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bun install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using with Docker&lt;/h2&gt; 
&lt;p&gt;Build image&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker build -t copilot-api .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the container&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Create a directory on your host to persist the GitHub token and related data
mkdir -p ./copilot-data

# Run the container with a bind mount to persist the token
# This ensures your authentication survives container restarts

docker run -p 4141:4141 -v $(pwd)/copilot-data:/root/.local/share/copilot-api copilot-api
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The GitHub token and related data will be stored in &lt;code&gt;copilot-data&lt;/code&gt; on your host. This is mapped to &lt;code&gt;/root/.local/share/copilot-api&lt;/code&gt; inside the container, ensuring persistence across restarts.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Docker with Environment Variables&lt;/h3&gt; 
&lt;p&gt;You can pass the GitHub token directly to the container using environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Build with GitHub token
docker build --build-arg GH_TOKEN=your_github_token_here -t copilot-api .

# Run with GitHub token
docker run -p 4141:4141 -e GH_TOKEN=your_github_token_here copilot-api

# Run with additional options
docker run -p 4141:4141 -e GH_TOKEN=your_token copilot-api start --verbose --port 4141
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker Compose Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;version: &#39;3.8&#39;
services:
  copilot-api:
    build: .
    ports:
      - &quot;4141:4141&quot;
    environment:
      - GH_TOKEN=your_github_token_here
    restart: unless-stopped
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Docker image includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multi-stage build for optimized image size&lt;/li&gt; 
 &lt;li&gt;Non-root user for enhanced security&lt;/li&gt; 
 &lt;li&gt;Health check for container monitoring&lt;/li&gt; 
 &lt;li&gt;Pinned base image version for reproducible builds&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Using with npx&lt;/h2&gt; 
&lt;p&gt;You can run the project directly using npx:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npx copilot-api@latest start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npx copilot-api@latest start --port 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For authentication only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npx copilot-api@latest auth
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Command Structure&lt;/h2&gt; 
&lt;p&gt;Copilot API now uses a subcommand structure with these main commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: Start the Copilot API server. This command will also handle authentication if needed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auth&lt;/code&gt;: Run GitHub authentication flow without starting the server. This is typically used if you need to generate a token for use with the &lt;code&gt;--github-token&lt;/code&gt; option, especially in non-interactive environments.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;check-usage&lt;/code&gt;: Show your current GitHub Copilot usage and quota information directly in the terminal (no server required).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;: Display diagnostic information including version, runtime details, file paths, and authentication status. Useful for troubleshooting and support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Command Line Options&lt;/h2&gt; 
&lt;h3&gt;Start Command Options&lt;/h3&gt; 
&lt;p&gt;The following command line options are available for the &lt;code&gt;start&lt;/code&gt; command:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--port&lt;/td&gt; 
   &lt;td&gt;Port to listen on&lt;/td&gt; 
   &lt;td&gt;4141&lt;/td&gt; 
   &lt;td&gt;-p&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--verbose&lt;/td&gt; 
   &lt;td&gt;Enable verbose logging&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;-v&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--account-type&lt;/td&gt; 
   &lt;td&gt;Account type to use (individual, business, enterprise)&lt;/td&gt; 
   &lt;td&gt;individual&lt;/td&gt; 
   &lt;td&gt;-a&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--manual&lt;/td&gt; 
   &lt;td&gt;Enable manual request approval&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--rate-limit&lt;/td&gt; 
   &lt;td&gt;Rate limit in seconds between requests&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
   &lt;td&gt;-r&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--wait&lt;/td&gt; 
   &lt;td&gt;Wait instead of error when rate limit is hit&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;-w&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--github-token&lt;/td&gt; 
   &lt;td&gt;Provide GitHub token directly (must be generated using the &lt;code&gt;auth&lt;/code&gt; subcommand)&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
   &lt;td&gt;-g&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--claude-code&lt;/td&gt; 
   &lt;td&gt;Generate a command to launch Claude Code with Copilot API config&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;-c&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--show-token&lt;/td&gt; 
   &lt;td&gt;Show GitHub and Copilot tokens on fetch and refresh&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Auth Command Options&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--verbose&lt;/td&gt; 
   &lt;td&gt;Enable verbose logging&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;-v&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--show-token&lt;/td&gt; 
   &lt;td&gt;Show GitHub token on auth&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Debug Command Options&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;--json&lt;/td&gt; 
   &lt;td&gt;Output debug info as JSON&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;none&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;API Endpoints&lt;/h2&gt; 
&lt;p&gt;The server exposes several endpoints to interact with the Copilot API. It provides OpenAI-compatible endpoints and now also includes support for Anthropic-compatible endpoints, allowing for greater flexibility with different tools and services.&lt;/p&gt; 
&lt;h3&gt;OpenAI Compatible Endpoints&lt;/h3&gt; 
&lt;p&gt;These endpoints mimic the OpenAI API structure.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Endpoint&lt;/th&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;POST /v1/chat/completions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Creates a model response for the given chat conversation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GET /v1/models&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists the currently available models.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;POST /v1/embeddings&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Creates an embedding vector representing the input text.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Anthropic Compatible Endpoints&lt;/h3&gt; 
&lt;p&gt;These endpoints are designed to be compatible with the Anthropic Messages API.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Endpoint&lt;/th&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;POST /v1/messages&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Creates a model response for a given conversation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;POST /v1/messages/count_tokens&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Calculates the number of tokens for a given set of messages.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Usage Monitoring Endpoints&lt;/h3&gt; 
&lt;p&gt;New endpoints for monitoring your Copilot usage and quotas.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Endpoint&lt;/th&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GET /usage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Get detailed Copilot usage statistics and quota information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GET /token&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Get the current Copilot token being used by the API.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;p&gt;Using with npx:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Basic usage with start command
npx copilot-api@latest start

# Run on custom port with verbose logging
npx copilot-api@latest start --port 8080 --verbose

# Use with a business plan GitHub account
npx copilot-api@latest start --account-type business

# Use with an enterprise plan GitHub account
npx copilot-api@latest start --account-type enterprise

# Enable manual approval for each request
npx copilot-api@latest start --manual

# Set rate limit to 30 seconds between requests
npx copilot-api@latest start --rate-limit 30

# Wait instead of error when rate limit is hit
npx copilot-api@latest start --rate-limit 30 --wait

# Provide GitHub token directly
npx copilot-api@latest start --github-token ghp_YOUR_TOKEN_HERE

# Run only the auth flow
npx copilot-api@latest auth

# Run auth flow with verbose logging
npx copilot-api@latest auth --verbose

# Show your Copilot usage/quota in the terminal (no server needed)
npx copilot-api@latest check-usage

# Display debug information for troubleshooting
npx copilot-api@latest debug

# Display debug information in JSON format
npx copilot-api@latest debug --json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using the Usage Viewer&lt;/h2&gt; 
&lt;p&gt;After starting the server, a URL to the Copilot Usage Dashboard will be displayed in your console. This dashboard is a web interface for monitoring your API usage.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start the server. For example, using npx: &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npx copilot-api@latest start
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;The server will output a URL to the usage viewer. Copy and paste this URL into your browser. It will look something like this: &lt;code&gt;https://ericc-ch.github.io/copilot-api?endpoint=http://localhost:4141/usage&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you use the &lt;code&gt;start.bat&lt;/code&gt; script on Windows, this page will open automatically.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The dashboard provides a user-friendly interface to view your Copilot usage data:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;API Endpoint URL&lt;/strong&gt;: The dashboard is pre-configured to fetch data from your local server endpoint via the URL query parameter. You can change this URL to point to any other compatible API endpoint.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fetch Data&lt;/strong&gt;: Click the &quot;Fetch&quot; button to load or refresh the usage data. The dashboard will automatically fetch data on load.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Usage Quotas&lt;/strong&gt;: View a summary of your usage quotas for different services like Chat and Completions, displayed with progress bars for a quick overview.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Detailed Information&lt;/strong&gt;: See the full JSON response from the API for a detailed breakdown of all available usage statistics.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;URL-based Configuration&lt;/strong&gt;: You can also specify the API endpoint directly in the URL using a query parameter. This is useful for bookmarks or sharing links. For example: &lt;code&gt;https://ericc-ch.github.io/copilot-api?endpoint=http://your-api-server/usage&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Using with Claude Code&lt;/h2&gt; 
&lt;p&gt;This proxy can be used to power &lt;a href=&quot;https://docs.anthropic.com/en/claude-code&quot;&gt;Claude Code&lt;/a&gt;, an experimental conversational AI assistant for developers from Anthropic.&lt;/p&gt; 
&lt;p&gt;There are two ways to configure Claude Code to use this proxy:&lt;/p&gt; 
&lt;h3&gt;Interactive Setup with &lt;code&gt;--claude-code&lt;/code&gt; flag&lt;/h3&gt; 
&lt;p&gt;To get started, run the &lt;code&gt;start&lt;/code&gt; command with the &lt;code&gt;--claude-code&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npx copilot-api@latest start --claude-code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will be prompted to select a primary model and a &quot;small, fast&quot; model for background tasks. After selecting the models, a command will be copied to your clipboard. This command sets the necessary environment variables for Claude Code to use the proxy.&lt;/p&gt; 
&lt;p&gt;Paste and run this command in a new terminal to launch Claude Code.&lt;/p&gt; 
&lt;h3&gt;Manual Configuration with &lt;code&gt;settings.json&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can configure Claude Code by creating a &lt;code&gt;.claude/settings.json&lt;/code&gt; file in your project&#39;s root directory. This file should contain the environment variables needed by Claude Code. This way you don&#39;t need to run the interactive setup every time.&lt;/p&gt; 
&lt;p&gt;Here is an example &lt;code&gt;.claude/settings.json&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;env&quot;: {
    &quot;ANTHROPIC_BASE_URL&quot;: &quot;http://localhost:4141&quot;,
    &quot;ANTHROPIC_AUTH_TOKEN&quot;: &quot;dummy&quot;,
    &quot;ANTHROPIC_MODEL&quot;: &quot;gpt-4.1&quot;,
    &quot;ANTHROPIC_SMALL_FAST_MODEL&quot;: &quot;gpt-4.1&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find more options here: &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/settings#environment-variables&quot;&gt;Claude Code settings&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also read more about IDE integration here: &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/ide-integrations&quot;&gt;Add Claude Code to your IDE&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Running from Source&lt;/h2&gt; 
&lt;p&gt;The project can be run from source in several ways:&lt;/p&gt; 
&lt;h3&gt;Development Mode&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bun run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Production Mode&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bun run start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage Tips&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To avoid hitting GitHub Copilot&#39;s rate limits, you can use the following flags: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;--manual&lt;/code&gt;: Enables manual approval for each request, giving you full control over when requests are sent.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;--rate-limit &amp;lt;seconds&amp;gt;&lt;/code&gt;: Enforces a minimum time interval between requests. For example, &lt;code&gt;copilot-api start --rate-limit 30&lt;/code&gt; will ensure there&#39;s at least a 30-second gap between requests.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;--wait&lt;/code&gt;: Use this with &lt;code&gt;--rate-limit&lt;/code&gt;. It makes the server wait for the cooldown period to end instead of rejecting the request with an error. This is useful for clients that don&#39;t automatically retry on rate limit errors.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;If you have a GitHub business or enterprise plan account with Copilot, use the &lt;code&gt;--account-type&lt;/code&gt; flag (e.g., &lt;code&gt;--account-type business&lt;/code&gt;). See the &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/managing-github-copilot-access-to-your-organizations-network#configuring-copilot-subscription-based-network-routing-for-your-enterprise-or-organization&quot;&gt;official documentation&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>vercel/examples</title>
      <link>https://github.com/vercel/examples</link>
      <description>&lt;p&gt;Enjoy our curated collection of examples and solutions. Use these patterns to build your own robust and scalable applications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://vercel.com&quot;&gt; &lt;img src=&quot;https://assets.vercel.com/image/upload/v1588805858/repositories/vercel/logo.png&quot; height=&quot;96&quot; /&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h3 align=&quot;center&quot;&gt;&lt;a href=&quot;https://vercel.com&quot;&gt;Vercel Examples&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://vercel.com&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/solutions&quot;&gt;Solutions&lt;/a&gt; ‚Äì Demos, reference architecture, and best practices&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/starter&quot;&gt;Starter&lt;/a&gt; ‚Äì Functional applications which can act as a starting point&lt;/li&gt; 
 &lt;li&gt;And more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Vercel Templates&lt;/h2&gt; 
&lt;p&gt;Multiple examples are being featured in &lt;a href=&quot;https://vercel.com/templates&quot;&gt;Vercel&#39;s Templates&lt;/a&gt;, visit that page for more advanced filtering options.&lt;/p&gt; 
&lt;h3&gt;For Vercelians&lt;/h3&gt; 
&lt;p&gt;Examples that have front matter metadata will create a new Draft template in &lt;a href=&quot;https://app.contentful.com&quot;&gt;Contentful&lt;/a&gt;, for more steps on how to publish a template, read &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/internal/publishing-templates.md&quot;&gt;Publishing Templates&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adding a new example&lt;/h2&gt; 
&lt;p&gt;To quickly start contributing with a new example, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pnpm i
pnpm new-example
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the script above isn&#39;t used, make sure the example complies with the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It must have a &lt;code&gt;.gitignore&lt;/code&gt; similar to &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/plop-templates/example/.gitignore&quot;&gt;plop-templates/example/.gitignore&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;It must have a &lt;code&gt;package.json&lt;/code&gt; similar to &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/plop-templates/example/package.json&quot;&gt;plop-templates/example/package.json&lt;/a&gt; (usage of Next.js is optional). The license should be &lt;code&gt;MIT&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;It must have a &lt;code&gt;README.md&lt;/code&gt; similar to &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/plop-templates/example/README.md&quot;&gt;plop-templates/example/README.md&lt;/a&gt;. The example has to be able to include a demo URL (the Vercel team will deploy it!) and if it requires environment variables, it must have a &lt;code&gt;.env.example&lt;/code&gt; file and instructions on how to set them up. Take &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/edge-middleware/bot-protection-datadome/README.md&quot;&gt;bot-protection-datadome&lt;/a&gt; as an example. 
  &lt;ul&gt; 
   &lt;li&gt;To customize the Vercel Deploy Button take a look at the &lt;a href=&quot;https://vercel.com/docs/deploy-button&quot;&gt;docs&lt;/a&gt;, useful if the deployment has required environment variables.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;If using Next.js, it must have a &lt;code&gt;.eslintrc.json&lt;/code&gt; similar to &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/plop-templates/example/.eslintrc.json&quot;&gt;plop-templates/example/.eslintrc.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;All Next.js examples should be using the same styling and layout provided by &lt;code&gt;@vercel/examples-ui&lt;/code&gt;, its usage can be seen in the &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/plop-templates/example&quot;&gt;plop template&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Adding a template&lt;/h3&gt; 
&lt;p&gt;If you would like the example to be featured in &lt;a href=&quot;https://vercel.com/templates&quot;&gt;vercel.com/templates&lt;/a&gt; then also add the front matter metadata to the top of the readme, like in &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/edge-middleware/bot-protection-datadome/README.md&quot;&gt;bot-protection-datadome&lt;/a&gt;. To know all the possible values for each metadata take a look at &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/internal/fields.json&quot;&gt;&lt;code&gt;internal/fields.json&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to add related templates to your template, copy the &lt;code&gt;slug&lt;/code&gt; from the other template into the &lt;code&gt;relatedTemplates&lt;/code&gt; field, for example for &lt;a href=&quot;https://vercel.com/templates/next.js/monorepo-turborepo&quot;&gt;vercel.com/templates/next.js/monorepo-turborepo&lt;/a&gt; the slug is &lt;code&gt;monorepo-turborepo&lt;/code&gt;, as written in &lt;a href=&quot;https://raw.githubusercontent.com/vercel/examples/main/solutions/monorepo/README.md&quot;&gt;solutions/monorepo/README.md&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;The pre-commit hook&lt;/h3&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://typicode.github.io/husky/#/&quot;&gt;Husky&lt;/a&gt; to manage the pre-commit &lt;a href=&quot;https://git-scm.com/docs/githooks&quot;&gt;Git hook&lt;/a&gt; in this repo. Husky configures hooks automatically during install, so you don&#39;t need to do anything special to get them working, but if it fails to install, you can run the following command to install it manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pnpm run prepare
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Code changes automatically go through Prettier and ESLint when you make a commit, &lt;strong&gt;please do not skip these steps&lt;/strong&gt; unless they&#39;re broken and in that case let us known by creating an issue.&lt;/p&gt; 
&lt;h2&gt;Read the Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://vercel.com/docs&quot;&gt;Vercel Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nextjs.org/docs&quot;&gt;Next.js Docs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have any questions or suggestions about the docs, feel free to &lt;a href=&quot;https://github.com/vercel/examples/discussions&quot;&gt;open a discussion&lt;/a&gt;, or &lt;a href=&quot;https://github.com/vercel/examples/pulls&quot;&gt;submit a PR&lt;/a&gt; with your suggestions!&lt;/p&gt; 
&lt;h2&gt;Provide Feedback&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vercel/examples/discussions&quot;&gt;Start a Discussion&lt;/a&gt; with a question, piece of feedback, or idea you want to share with the team.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vercel/examples/issues&quot;&gt;Open an Issue&lt;/a&gt; if you believe you&#39;ve encountered a bug that you want to flag for the team.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MotiaDev/motia</title>
      <link>https://github.com/MotiaDev/motia</link>
      <description>&lt;p&gt;Modern Backend Framework that unifies APIs, background jobs, workflows, and AI agents into a single cohesive system with built-in observability and state management.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://trendshift.io/repositories/14032&quot; style=&quot;margin-right:8px;&quot;&gt; &lt;img src=&quot;https://trendshift.io/api/badge/repositories/14032&quot; alt=&quot;Motia&quot; style=&quot;width: 250px; height: 55px; margin-right:8px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://vercel.com/blog/summer-2025-oss-program#motia&quot; target=&quot;_blank&quot; style=&quot;margin-left:8px;&quot;&gt; &lt;img alt=&quot;Vercel OSS Program&quot; src=&quot;https://vercel.com/oss/program-badge.svg?sanitize=true&quot; style=&quot;width: 250px; height: 55px; margin-left:8px;&quot; width=&quot;250&quot; height=&quot;55&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;a href=&quot;https://motia.dev&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/packages/docs/public/github-readme-banner.png&quot; alt=&quot;Motia Banner&quot; width=&quot;100%&quot; /&gt; &lt;/a&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;üî• A Modern Unified Backend Framework for APIs, background jobs, workflows, and Agents üî•&lt;/strong&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/motia&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/motia?style=flat&amp;amp;logo=npm&amp;amp;logoColor=white&amp;amp;color=CB3837&amp;amp;labelColor=000000&quot; alt=&quot;npm version&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MotiaDev/motia/raw/main/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-MIT-green?style=flat&amp;amp;logo=opensourceinitiative&amp;amp;logoColor=white&amp;amp;labelColor=000000&quot; alt=&quot;license&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MotiaDev/motia&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/stars/MotiaDev/motia?style=flat&amp;amp;logo=github&amp;amp;logoColor=white&amp;amp;color=yellow&amp;amp;labelColor=000000&quot; alt=&quot;GitHub stars&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/motiadev&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Follow-@motiadev-1DA1F2?style=flat&amp;amp;logo=twitter&amp;amp;logoColor=white&amp;amp;labelColor=000000&quot; alt=&quot;Twitter Follow&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/motia&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1322278831184281721?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=5865F2&amp;amp;label=Discord&amp;amp;labelColor=000000&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.motia.dev/manifesto&quot;&gt;üí° Motia Manifesto&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://www.motia.dev/docs/getting-started/quick-start&quot;&gt;üöÄ Quick Start&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://www.motia.dev/docs/concepts/steps/defining-steps&quot;&gt;üìã Defining Steps&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://www.motia.dev/docs&quot;&gt;üìö Docs&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üéØ What is Motia?&lt;/h2&gt; 
&lt;p&gt;Motia is a &lt;strong&gt;modern backend framework&lt;/strong&gt; that unifies APIs, background jobs, workflows, and AI agents into a single cohesive system. Eliminate runtime complexity and build unified backends where &lt;strong&gt;JavaScript, TypeScript, Python, etc&lt;/strong&gt;, work together in event-driven workflows, with built-in state management, observability, and one-click deployments.&lt;/p&gt; 
&lt;p&gt;Motia brings cohesion to the fragmented backend world with our core primitive: the &lt;strong&gt;Step&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://motia.dev&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/Motia_Github_Repository_GIF.gif&quot; alt=&quot;Motia combines APIs, background queues, and AI agents into one system&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üöÄ Quickstart&lt;/h2&gt; 
&lt;p&gt;Get Motia project up and running in &lt;strong&gt;under 60 seconds&lt;/strong&gt;:&lt;/p&gt; 
&lt;h3&gt;1. Bootstrap a New Motia Project&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;npx motia@latest create -i&lt;/code&gt; # runs the interactive terminal&lt;/p&gt; 
&lt;p&gt;Follow the prompts to pick a template, project name, and language.&lt;/p&gt; 
&lt;h3&gt;2. Start the Workbench&lt;/h3&gt; 
&lt;p&gt;Inside your new project folder, launch the dev server:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;npx motia dev&lt;/code&gt; # ‚ûú &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This spins up the Motia Workbench ‚Äì a local UI for building, testing &amp;amp; observing your backend in real-time.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/motia-terminal.gif&quot; alt=&quot;motia-terminal&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;3. Hit Your First Endpoint&lt;/h3&gt; 
&lt;p&gt;Open a new terminal tab and run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;curl http://localhost:3000/default&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You should see the JSON response:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;{ &quot;message&quot;: &quot;Hello World from Motia!&quot; }&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;4. Explore the Workbench UI&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/new-workbench.png&quot; alt=&quot;new-workbench&quot; /&gt; The Workbench is your command centre:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;üåä Flows&lt;/strong&gt; ‚Äì Visualise how your Steps connect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üîå Endpoints&lt;/strong&gt; ‚Äì Test APIs with one click and stream results live.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëÅÔ∏è Traces&lt;/strong&gt; ‚Äì Inspect end-to-end traces of every execution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üìä Logs&lt;/strong&gt; ‚Äì View structured logs grouped by trace.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üè™ State&lt;/strong&gt; ‚Äì Inspect the key-value store across Steps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;üéâ &lt;strong&gt;That&#39;s it!&lt;/strong&gt; You now have a fully-featured Motia project with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚úÖ &lt;code&gt;/default&lt;/code&gt; API endpoint&lt;/li&gt; 
 &lt;li&gt;‚úÖ Visual debugger &amp;amp; flow inspector&lt;/li&gt; 
 &lt;li&gt;‚úÖ Built-in observability&lt;/li&gt; 
 &lt;li&gt;‚úÖ Hot-reload for instant feedback&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üß± The Step Philosophy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;üéØ Your Logic, Your Step&lt;/strong&gt;: A Step holds your business logic. It can be a simple function, a call to a database, or a complex AI agent. This is where your application&#39;s real work gets done.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üåç Any Language, One Workflow&lt;/strong&gt;: Write Steps in TypeScript, Python, and other languages to come. all in the same project. Use Python for your AI agents and TypeScript for your API, and Motia makes them work together effortlessly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;‚ö° Full Power, No Boilerplate&lt;/strong&gt;: Inside a Step&#39;s &lt;code&gt;handler&lt;/code&gt;, you have the full power of the Node.js or Python ecosystem. Install any package, call any API, connect to any database. No restrictions, just your code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üëÅÔ∏è Zero-Config Observability&lt;/strong&gt;: Get full end-to-end tracing and logging for every Step execution, automatically. No setup required. See exactly what happened, when, and why.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üåä Simple &amp;amp; Powerful Workflows&lt;/strong&gt;: Connect Steps together by emitting and subscribing to events. Build complex, multi-stage processes with simple, declarative code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üè™ Unified State&lt;/strong&gt;: Share data between Steps effortlessly. Motia provides built-in state management that is automatically traced, giving you a complete picture of your data&#39;s lifecycle through a workflow.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üöß The Problem&lt;/h2&gt; 
&lt;p&gt;Backend teams juggle &lt;strong&gt;fragmented runtimes&lt;/strong&gt; across APIs, background queues, and AI agents. This creates deployment complexity, debugging gaps, and cognitive overhead from context-switching between frameworks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This fragmentation demands a unified system.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;‚úÖ The Unified System&lt;/h2&gt; 
&lt;p&gt;Motia unifies your entire backend into a &lt;strong&gt;unified state&lt;/strong&gt;. APIs, background jobs, and AI agents become interconnected Steps with shared state and integrated observability.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;After (Motia)&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multiple deployment targets&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Single unified deployment&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fragmented observability&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;End-to-end tracing&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Language dependent&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;JavaScript, TypeScript, Python, etc&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Context-switching overhead&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Single intuitive model&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Complex error handling&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Automatic retries &amp;amp; fault tolerance&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üîß Supported Step Types&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Trigger&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;api&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;HTTP Request&lt;/td&gt; 
   &lt;td&gt;Expose REST endpoints&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;event&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Emitted Topics&lt;/td&gt; 
   &lt;td&gt;React to internal or external events&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Scheduled Time (cron)&lt;/td&gt; 
   &lt;td&gt;Automate recurring jobs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;noop&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Placeholder for manual/external tasks&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h3&gt;ü§î How it Works&lt;/h3&gt; 
&lt;p&gt;Motia&#39;s architecture is built around a single, powerful primitive: the &lt;strong&gt;Step&lt;/strong&gt;. A Step is not just a trigger; it&#39;s a powerful container for your business logic. You can write anything from a simple database query to a complex AI agent interaction inside a single step. Instead of managing separate services for APIs, background workers, and scheduled tasks, you simply define how your steps are triggered.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Need a public API?&lt;/strong&gt; Create an &lt;code&gt;api&lt;/code&gt; step. This defines a route and handler for HTTP requests. You can build a complete REST or GraphQL API just with these steps.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Need a background job or queue?&lt;/strong&gt; Have your &lt;code&gt;api&lt;/code&gt; step &lt;code&gt;emit&lt;/code&gt; an event. An &lt;code&gt;event&lt;/code&gt; step subscribed to that event&#39;s topic will pick up the job and process it asynchronously. This is how you handle anything that shouldn&#39;t block the main request thread, from sending emails to complex data processing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Need to run a task on a schedule?&lt;/strong&gt; Use a &lt;code&gt;cron&lt;/code&gt; step. It will trigger automatically based on the schedule you define.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This model means you no longer need to glue together separate frameworks and tools. A single Motia application can replace a stack that might otherwise include &lt;strong&gt;Nest.js&lt;/strong&gt; (for APIs), &lt;strong&gt;Temporal&lt;/strong&gt; (for workflows), and &lt;strong&gt;Celery/BullMQ&lt;/strong&gt; (for background jobs). It&#39;s all just steps and events.&lt;/p&gt; 
&lt;h2&gt;‚ö° Core Concepts&lt;/h2&gt; 
&lt;p&gt;The &lt;strong&gt;Step&lt;/strong&gt; is Motia&#39;s core primitive. The following concepts are deeply integrated with Steps to help you build powerful, complex, and scalable backends:&lt;/p&gt; 
&lt;h3&gt;üîë Steps &amp;amp; Step Types&lt;/h3&gt; 
&lt;p&gt;Understand the three ways Steps are triggered:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP (&lt;code&gt;api&lt;/code&gt;)&lt;/strong&gt; ‚Äì Build REST/GraphQL endpoints with zero boilerplate.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Events (&lt;code&gt;event&lt;/code&gt;)&lt;/strong&gt; ‚Äì React to internal or external events emitted by other steps.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cron (&lt;code&gt;cron&lt;/code&gt;)&lt;/strong&gt; ‚Äì Schedule recurring jobs with a familiar cron syntax.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üì£ Emit &amp;amp; Subscribe (Event-Driven Workflows)&lt;/h3&gt; 
&lt;p&gt;Steps talk to each other by &lt;strong&gt;emitting&lt;/strong&gt; and &lt;strong&gt;subscribing&lt;/strong&gt; to topics. This decouples producers from consumers and lets you compose complex workflows with simple, declarative code.&lt;/p&gt; 
&lt;h3&gt;üè™ State Management&lt;/h3&gt; 
&lt;p&gt;All steps share a unified key-value state store. Every &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; is automatically traced so you always know when and where your data changed.&lt;/p&gt; 
&lt;h3&gt;üìä Structured Logging&lt;/h3&gt; 
&lt;p&gt;Motia provides structured, JSON logs correlated with trace IDs and step names. Search and filter your logs without regex hassle.&lt;/p&gt; 
&lt;h3&gt;üì° Streams: Real-time Messaging&lt;/h3&gt; 
&lt;p&gt;Push live updates from long-running or asynchronous workflows to clients without polling. Perfect for dashboards, progress indicators, and interactive AI agents.&lt;/p&gt; 
&lt;h3&gt;üëÅÔ∏è End-to-End Observability with Traces&lt;/h3&gt; 
&lt;p&gt;Every execution generates a full trace, capturing step timelines, state operations, emits, stream calls, and logs. Visualise everything in the Workbench&#39;s Traces UI and debug faster.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üóÇ Examples&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/finance-agent&quot;&gt;Finance Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/github-integration-workflow&quot;&gt;GitHub Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/gmail-workflow&quot;&gt;Gmail Manager&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/finance-agent.png&quot; alt=&quot;Finance&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/github-pr-management.png&quot; alt=&quot;GitHub&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/gmail-flow.png&quot; alt=&quot;Gmail&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/trello-flow&quot;&gt;Trello Automation&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/rag_example&quot;&gt;RAG Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia-examples/tree/main/examples/vision-example&quot;&gt;AI Image Gen&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/trello-manager.png&quot; alt=&quot;Trello&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/parse-embed-rag.png&quot; alt=&quot;RAG&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/generate-image.png&quot; alt=&quot;AI Image&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üåê Language Support&lt;/h2&gt; 
&lt;p&gt;Write steps in your preferred language:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.js&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.ts&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;‚úÖ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.py&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;üöß Beta&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.rb&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;üîÑ Coming Soon&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.go&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;üîÑ Coming Soon&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.rs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h3&gt;üí¨ &lt;strong&gt;Get Help&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;üìã Questions&lt;/strong&gt;: Use our &lt;a href=&quot;https://discord.gg/motia&quot;&gt;Discord community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üêõ Bug Reports&lt;/strong&gt;: &lt;a href=&quot;https://github.com/MotiaDev/motia/issues&quot;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üìñ Documentation&lt;/strong&gt;: &lt;a href=&quot;https://motia.dev/docs&quot;&gt;Official Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;üé• Blog&lt;/strong&gt;: &lt;a href=&quot;https://blog.motia.dev&quot;&gt;Motia Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ü§ù &lt;strong&gt;Contributing&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;We welcome contributions! Whether it&#39;s:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;üêõ Bug fixes and improvements&lt;/li&gt; 
 &lt;li&gt;‚ú® New features and step types&lt;/li&gt; 
 &lt;li&gt;üìö Documentation and examples&lt;/li&gt; 
 &lt;li&gt;üåç Language support additions&lt;/li&gt; 
 &lt;li&gt;üé® Workbench UI enhancements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://github.com/MotiaDev/motia/raw/main/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;strong&gt;üåü Ready to unify your backend?&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://motia.dev&quot;&gt;üöÄ &lt;strong&gt;Get Started Now&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://motia.dev/docs&quot;&gt;üìñ &lt;strong&gt;Read the Docs&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://discord.com/invite/nJFfsH5d6v&quot;&gt;üí¨ &lt;strong&gt;Join Discord&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.star-history.com/#motiadev/motia&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=motiadev/motia&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;sub&gt;Built with ‚ù§Ô∏è by the Motia team ‚Ä¢ &lt;strong&gt;Star us if you find &lt;a href=&quot;https://github.com/orgs/MotiaDev/motia&quot;&gt;Motia&lt;/a&gt; useful!&lt;/strong&gt; ‚≠ê&lt;/sub&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;üöß Roadmap&lt;/h3&gt; 
&lt;p&gt;We have a public roadmap for Motia, you can view it &lt;a href=&quot;https://github.com/orgs/MotiaDev/projects/2/views/4&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Feel free to add comments to the issues, or create a new issue if you have a feature request.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python Types&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/485&quot;&gt;#485&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Python types&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Streams: RBAC&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/495&quot;&gt;#495&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for RBAC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Streams: Workbench UI&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/497&quot;&gt;#497&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Workbench UI&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Queue Strategies&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/476&quot;&gt;#476&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Queue Strategies&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Reactive Steps&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/477&quot;&gt;#477&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Reactive Steps&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Allow cloud configuration&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/478&quot;&gt;#478&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for cloud configuration&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Bring your own Cloud: AWS&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/479&quot;&gt;#479&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for AWS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Point in time triggers&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/480&quot;&gt;#480&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Point in time triggers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Workbench plugins&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/481&quot;&gt;#481&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Workbench plugins&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rewrite our Core in either Go or Rust&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/482&quot;&gt;#482&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrite our Core in either Go or Rust&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Decrease deployment time&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/483&quot;&gt;#483&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Decrease deployment time&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Built-in database support&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/484&quot;&gt;#484&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for built-in database&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Google Cloud Platform&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/486&quot;&gt;#486&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Google Cloud Platform&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Microsoft Azure&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/487&quot;&gt;#487&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Microsoft Azure&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Vercel&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/488&quot;&gt;#488&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Vercel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Cloudflare&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/489&quot;&gt;#489&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Cloudflare&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Go&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/490&quot;&gt;#490&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Go&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Rust&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/491&quot;&gt;#491&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Rust&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Java&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/492&quot;&gt;#492&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Java&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Ruby&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/493&quot;&gt;#493&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Ruby&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: C#&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/494&quot;&gt;#494&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for C#&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Kubernetes&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MotiaDev/motia/issues/496&quot;&gt;#496&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Kubernetes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>ItzCrazyKns/Perplexica</title>
      <link>https://github.com/ItzCrazyKns/Perplexica</link>
      <description>&lt;p&gt;Perplexica is an AI-powered search engine. It is an Open source alternative to Perplexity AI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üöÄ Perplexica - An AI-powered search engine üîé 
 &lt;!-- omit in toc --&gt;&lt;/h1&gt; 
&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://www.warp.dev/perplexica&quot;&gt; &lt;img alt=&quot;Warp sponsorship&quot; width=&quot;400&quot; src=&quot;https://github.com/user-attachments/assets/775dd593-9b5f-40f1-bf48-479faff4c27b&quot; /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.warp.dev/perplexica&quot;&gt;Warp, the AI Devtool that lives in your terminal&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.warp.dev/perplexica&quot;&gt;Available for MacOS, Linux, &amp;amp; Windows&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/26aArMy8tT&quot;&gt;&lt;img src=&quot;https://dcbadge.limes.pink/api/server/26aArMy8tT?style=flat&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/.assets/perplexica-screenshot.png?&quot; alt=&quot;preview&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- omit in toc --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#preview&quot;&gt;Preview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#getting-started-with-docker-recommended&quot;&gt;Getting Started with Docker (Recommended)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#non-docker-installation&quot;&gt;Non-Docker Installation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#ollama-connection-errors&quot;&gt;Ollama Connection Errors&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#using-as-a-search-engine&quot;&gt;Using as a Search Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#using-perplexicas-api&quot;&gt;Using Perplexica&#39;s API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#expose-perplexica-to-network&quot;&gt;Expose Perplexica to a network&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#one-click-deployment&quot;&gt;One-Click Deployment&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#upcoming-features&quot;&gt;Upcoming Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#support-us&quot;&gt;Support Us&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#donations&quot;&gt;Donations&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#contribution&quot;&gt;Contribution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#help-and-support&quot;&gt;Help and Support&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Perplexica is an open-source AI-powered searching tool or an AI-powered search engine that goes deep into the internet to find answers. Inspired by Perplexity AI, it&#39;s an open-source option that not just searches the web but understands your questions. It uses advanced machine learning algorithms like similarity searching and embeddings to refine results and provides clear answers with sources cited.&lt;/p&gt; 
&lt;p&gt;Using SearxNG to stay current and fully open source, Perplexica ensures you always get the most up-to-date information without compromising your privacy.&lt;/p&gt; 
&lt;p&gt;Want to know more about its architecture and how it works? You can read it &lt;a href=&quot;https://github.com/ItzCrazyKns/Perplexica/tree/master/docs/architecture/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Preview&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/.assets/perplexica-preview.gif&quot; alt=&quot;video-preview&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Local LLMs&lt;/strong&gt;: You can make use local LLMs such as Llama3 and Mixtral using Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Two Main Modes:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Copilot Mode:&lt;/strong&gt; (In development) Boosts search by generating different queries to find more relevant internet sources. Like normal search instead of just using the context by SearxNG, it visits the top matches and tries to find relevant sources to the user&#39;s query directly from the page.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Normal Mode:&lt;/strong&gt; Processes your query and performs a web search.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Focus Modes:&lt;/strong&gt; Special modes to better answer specific types of questions. Perplexica currently has 6 focus modes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;All Mode:&lt;/strong&gt; Searches the entire web to find the best results.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Writing Assistant Mode:&lt;/strong&gt; Helpful for writing tasks that do not require searching the web.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Academic Search Mode:&lt;/strong&gt; Finds articles and papers, ideal for academic research.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;YouTube Search Mode:&lt;/strong&gt; Finds YouTube videos based on the search query.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Wolfram Alpha Search Mode:&lt;/strong&gt; Answers queries that need calculations or data analysis using Wolfram Alpha.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Reddit Search Mode:&lt;/strong&gt; Searches Reddit for discussions and opinions related to the query.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Current Information:&lt;/strong&gt; Some search tools might give you outdated info because they use data from crawling bots and convert them into embeddings and store them in a index. Unlike them, Perplexica uses SearxNG, a metasearch engine to get the results and rerank and get the most relevant source out of it, ensuring you always get the latest information without the overhead of daily data updates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt;: Integrate Perplexica into your existing applications and make use of its capibilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It has many more features like image and video search. Some of the planned features are mentioned in &lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/#upcoming-features&quot;&gt;upcoming features&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are mainly 2 ways of installing Perplexica - With Docker, Without Docker. Using Docker is highly recommended.&lt;/p&gt; 
&lt;h3&gt;Getting Started with Docker (Recommended)&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Ensure Docker is installed and running on your system.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the Perplexica repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/ItzCrazyKns/Perplexica.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After cloning, navigate to the directory containing the project files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rename the &lt;code&gt;sample.config.toml&lt;/code&gt; file to &lt;code&gt;config.toml&lt;/code&gt;. For Docker setups, you need only fill in the following fields:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;OPENAI&lt;/code&gt;: Your OpenAI API key. &lt;strong&gt;You only need to fill this if you wish to use OpenAI&#39;s models&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;OLLAMA&lt;/code&gt;: Your Ollama API URL. You should enter it as &lt;code&gt;http://host.docker.internal:PORT_NUMBER&lt;/code&gt;. If you installed Ollama on port 11434, use &lt;code&gt;http://host.docker.internal:11434&lt;/code&gt;. For other ports, adjust accordingly. &lt;strong&gt;You need to fill this if you wish to use Ollama&#39;s models instead of OpenAI&#39;s&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;GROQ&lt;/code&gt;: Your Groq API key. &lt;strong&gt;You only need to fill this if you wish to use Groq&#39;s hosted models&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;ANTHROPIC&lt;/code&gt;: Your Anthropic API key. &lt;strong&gt;You only need to fill this if you wish to use Anthropic models&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;Gemini&lt;/code&gt;: Your Gemini API key. &lt;strong&gt;You only need to fill this if you wish to use Google&#39;s models&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;DEEPSEEK&lt;/code&gt;: Your Deepseek API key. &lt;strong&gt;Only needed if you want Deepseek models.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;AIMLAPI&lt;/code&gt;: Your AI/ML API key. &lt;strong&gt;Only needed if you want to use AI/ML API models and embeddings.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can change these after starting Perplexica from the settings dialog.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;SIMILARITY_MEASURE&lt;/code&gt;: The similarity measure to use (This is filled by default; you can leave it as is if you are unsure about it.)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure you are in the directory containing the &lt;code&gt;docker-compose.yaml&lt;/code&gt; file and execute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wait a few minutes for the setup to complete. You can access Perplexica at &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; in your web browser.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: After the containers are built, you can start Perplexica directly from Docker without having to open a terminal.&lt;/p&gt; 
&lt;h3&gt;Non-Docker Installation&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install SearXNG and allow &lt;code&gt;JSON&lt;/code&gt; format in the SearXNG settings.&lt;/li&gt; 
 &lt;li&gt;Clone the repository and rename the &lt;code&gt;sample.config.toml&lt;/code&gt; file to &lt;code&gt;config.toml&lt;/code&gt; in the root directory. Ensure you complete all required fields in this file.&lt;/li&gt; 
 &lt;li&gt;After populating the configuration run &lt;code&gt;npm i&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Install the dependencies and then execute &lt;code&gt;npm run build&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Finally, start the app by running &lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Using Docker is recommended as it simplifies the setup process, especially for managing environment variables and dependencies.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/ItzCrazyKns/Perplexica/tree/master/docs/installation&quot;&gt;installation documentation&lt;/a&gt; for more information like updating, etc.&lt;/p&gt; 
&lt;h3&gt;Ollama Connection Errors&lt;/h3&gt; 
&lt;p&gt;If you&#39;re encountering an Ollama connection error, it is likely due to the backend being unable to connect to Ollama&#39;s API. To fix this issue you can:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Check your Ollama API URL:&lt;/strong&gt; Ensure that the API URL is correctly set in the settings menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update API URL Based on OS:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Use &lt;code&gt;http://host.docker.internal:11434&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; Use &lt;code&gt;http://host.docker.internal:11434&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; Use &lt;code&gt;http://&amp;lt;private_ip_of_host&amp;gt;:11434&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Adjust the port number if you&#39;re using a different one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux Users - Expose Ollama to Network:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Inside &lt;code&gt;/etc/systemd/system/ollama.service&lt;/code&gt;, you need to add &lt;code&gt;Environment=&quot;OLLAMA_HOST=0.0.0.0:11434&quot;&lt;/code&gt;. (Change the port number if you are using a different one.) Then reload the systemd manager configuration with &lt;code&gt;systemctl daemon-reload&lt;/code&gt;, and restart Ollama by &lt;code&gt;systemctl restart ollama&lt;/code&gt;. For more information see &lt;a href=&quot;https://github.com/ollama/ollama/raw/main/docs/faq.md#setting-environment-variables-on-linux&quot;&gt;Ollama docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Ensure that the port (default is 11434) is not blocked by your firewall.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Using as a Search Engine&lt;/h2&gt; 
&lt;p&gt;If you wish to use Perplexica as an alternative to traditional search engines like Google or Bing, or if you want to add a shortcut for quick access from your browser&#39;s search bar, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open your browser&#39;s settings.&lt;/li&gt; 
 &lt;li&gt;Navigate to the &#39;Search Engines&#39; section.&lt;/li&gt; 
 &lt;li&gt;Add a new site search with the following URL: &lt;code&gt;http://localhost:3000/?q=%s&lt;/code&gt;. Replace &lt;code&gt;localhost&lt;/code&gt; with your IP address or domain name, and &lt;code&gt;3000&lt;/code&gt; with the port number if Perplexica is not hosted locally.&lt;/li&gt; 
 &lt;li&gt;Click the add button. Now, you can use Perplexica directly from your browser&#39;s search bar.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Using Perplexica&#39;s API&lt;/h2&gt; 
&lt;p&gt;Perplexica also provides an API for developers looking to integrate its powerful search engine into their own applications. You can run searches, use multiple models and get answers to your queries.&lt;/p&gt; 
&lt;p&gt;For more details, check out the full documentation &lt;a href=&quot;https://github.com/ItzCrazyKns/Perplexica/tree/master/docs/API/SEARCH.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Expose Perplexica to network&lt;/h2&gt; 
&lt;p&gt;Perplexica runs on Next.js and handles all API requests. It works right away on the same network and stays accessible even with port forwarding.&lt;/p&gt; 
&lt;h2&gt;One-Click Deployment&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://usw.sealos.io/?openapp=system-template%3FtemplateName%3Dperplexica&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/labring-actions/templates/main/Deploy-on-Sealos.svg?sanitize=true&quot; alt=&quot;Deploy to Sealos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://repocloud.io/details/?app_id=267&quot;&gt;&lt;img src=&quot;https://d16t0pc4846x52.cloudfront.net/deploylobe.svg?sanitize=true&quot; alt=&quot;Deploy to RepoCloud&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://template.run.claw.cloud/?referralCode=U11MRQ8U9RM4&amp;amp;openapp=system-fastdeploy%3FtemplateName%3Dperplexica&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ClawCloud/Run-Template/refs/heads/main/Run-on-ClawCloud.svg?sanitize=true&quot; alt=&quot;Run on ClawCloud&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Upcoming Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Add settings page&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Adding support for local LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; History Saving features&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Introducing various Focus Modes&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Adding API support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Adding Discover&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Finalizing Copilot Mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;If you find Perplexica useful, consider giving us a star on GitHub. This helps more people discover Perplexica and supports the development of new features. Your support is greatly appreciated.&lt;/p&gt; 
&lt;h3&gt;Donations&lt;/h3&gt; 
&lt;p&gt;We also accept donations to help sustain our project. If you would like to contribute, you can use the following options to donate. Thank you for your support!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Ethereum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Address: &lt;code&gt;0xB025a84b2F269570Eb8D4b05DEdaA41D8525B6DD&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Perplexica is built on the idea that AI and large language models should be easy for everyone to use. If you find bugs or have ideas, please share them in via GitHub Issues. For more information on contributing to Perplexica you can read the &lt;a href=&quot;https://raw.githubusercontent.com/ItzCrazyKns/Perplexica/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; file to learn more about Perplexica and how you can contribute to it.&lt;/p&gt; 
&lt;h2&gt;Help and Support&lt;/h2&gt; 
&lt;p&gt;If you have any questions or feedback, please feel free to reach out to us. You can create an issue on GitHub or join our Discord server. There, you can connect with other users, share your experiences and reviews, and receive more personalized help. &lt;a href=&quot;https://discord.gg/EFwsmQDgAu&quot;&gt;Click here&lt;/a&gt; to join the Discord server. To discuss matters outside of regular support, feel free to contact me on Discord at &lt;code&gt;itzcrazykns&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Thank you for exploring Perplexica, the AI-powered search engine designed to enhance your search experience. We are constantly working to improve Perplexica and expand its capabilities. We value your feedback and contributions which help us make Perplexica even better. Don&#39;t forget to check back for updates and new features!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-node</title>
      <link>https://github.com/openai/openai-node</link>
      <description>&lt;p&gt;Official JavaScript / TypeScript library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI TypeScript and JavaScript API Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/openai&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/openai.svg?label=npm%20(stable)&quot; alt=&quot;NPM version&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/bundlephobia/minzip/openai&quot; alt=&quot;npm bundle size&quot; /&gt; &lt;a href=&quot;https://jsr.io/@openai/openai&quot;&gt;&lt;img src=&quot;https://jsr.io/badges/@openai/openai&quot; alt=&quot;JSR Version&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library provides convenient access to the OpenAI REST API from TypeScript or JavaScript.&lt;/p&gt; 
&lt;p&gt;It is generated from our &lt;a href=&quot;https://github.com/openai/openai-openapi&quot;&gt;OpenAPI specification&lt;/a&gt; with &lt;a href=&quot;https://stainlessapi.com/&quot;&gt;Stainless&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To learn how to use the OpenAI API, check out our &lt;a href=&quot;https://platform.openai.com/docs/api-reference&quot;&gt;API Reference&lt;/a&gt; and &lt;a href=&quot;https://platform.openai.com/docs&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install openai
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation from JSR&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;deno add jsr:@openai/openai
npx jsr add @openai/openai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These commands will make the module importable from the &lt;code&gt;@openai/openai&lt;/code&gt; scope. You can also &lt;a href=&quot;https://jsr.io/docs/using-packages#importing-with-jsr-specifiers&quot;&gt;import directly from JSR&lt;/a&gt; without an install step if you&#39;re using the Deno JavaScript runtime:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;jsr:@openai/openai&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The full API of this library can be found in &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/api.md&quot;&gt;api.md file&lt;/a&gt; along with many &lt;a href=&quot;https://github.com/openai/openai-node/tree/master/examples&quot;&gt;code examples&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The primary API for interacting with OpenAI models is the &lt;a href=&quot;https://platform.openai.com/docs/api-reference/responses&quot;&gt;Responses API&lt;/a&gt;. You can generate text from the model with the code below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  apiKey: process.env[&#39;OPENAI_API_KEY&#39;], // This is the default and can be omitted
});

const response = await client.responses.create({
  model: &#39;gpt-4o&#39;,
  instructions: &#39;You are a coding assistant that talks like a pirate&#39;,
  input: &#39;Are semicolons optional in JavaScript?&#39;,
});

console.log(response.output_text);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The previous standard (supported indefinitely) for generating text is the &lt;a href=&quot;https://platform.openai.com/docs/api-reference/chat&quot;&gt;Chat Completions API&lt;/a&gt;. You can use that API to generate text from the model with the code below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  apiKey: process.env[&#39;OPENAI_API_KEY&#39;], // This is the default and can be omitted
});

const completion = await client.chat.completions.create({
  model: &#39;gpt-4o&#39;,
  messages: [
    { role: &#39;developer&#39;, content: &#39;Talk like a pirate.&#39; },
    { role: &#39;user&#39;, content: &#39;Are semicolons optional in JavaScript?&#39; },
  ],
});

console.log(completion.choices[0].message.content);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Streaming responses&lt;/h2&gt; 
&lt;p&gt;We provide support for streaming responses using Server Sent Events (SSE).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI();

const stream = await client.responses.create({
  model: &#39;gpt-4o&#39;,
  input: &#39;Say &quot;Sheep sleep deep&quot; ten times fast!&#39;,
  stream: true,
});

for await (const event of stream) {
  console.log(event);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;File uploads&lt;/h2&gt; 
&lt;p&gt;Request parameters that correspond to file uploads can be passed in many different forms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;File&lt;/code&gt; (or an object with the same structure)&lt;/li&gt; 
 &lt;li&gt;a &lt;code&gt;fetch&lt;/code&gt; &lt;code&gt;Response&lt;/code&gt; (or an object with the same structure)&lt;/li&gt; 
 &lt;li&gt;an &lt;code&gt;fs.ReadStream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;the return value of our &lt;code&gt;toFile&lt;/code&gt; helper&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import fs from &#39;fs&#39;;
import OpenAI, { toFile } from &#39;openai&#39;;

const client = new OpenAI();

// If you have access to Node `fs` we recommend using `fs.createReadStream()`:
await client.files.create({ file: fs.createReadStream(&#39;input.jsonl&#39;), purpose: &#39;fine-tune&#39; });

// Or if you have the web `File` API you can pass a `File` instance:
await client.files.create({ file: new File([&#39;my bytes&#39;], &#39;input.jsonl&#39;), purpose: &#39;fine-tune&#39; });

// You can also pass a `fetch` `Response`:
await client.files.create({ file: await fetch(&#39;https://somesite/input.jsonl&#39;), purpose: &#39;fine-tune&#39; });

// Finally, if none of the above are convenient, you can use our `toFile` helper:
await client.files.create({
  file: await toFile(Buffer.from(&#39;my bytes&#39;), &#39;input.jsonl&#39;),
  purpose: &#39;fine-tune&#39;,
});
await client.files.create({
  file: await toFile(new Uint8Array([0, 1, 2]), &#39;input.jsonl&#39;),
  purpose: &#39;fine-tune&#39;,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Webhook Verification&lt;/h2&gt; 
&lt;p&gt;Verifying webhook signatures is &lt;em&gt;optional but encouraged&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For more information about webhooks, see &lt;a href=&quot;https://platform.openai.com/docs/guides/webhooks&quot;&gt;the API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Parsing webhook payloads&lt;/h3&gt; 
&lt;p&gt;For most use cases, you will likely want to verify the webhook and parse the payload at the same time. To achieve this, we provide the method &lt;code&gt;client.webhooks.unwrap()&lt;/code&gt;, which parses a webhook request and verifies that it was sent by OpenAI. This method will throw an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter must be the raw JSON string sent from the server (do not parse it first). The &lt;code&gt;.unwrap()&lt;/code&gt; method will parse this JSON for you into an event object after verifying the webhook was sent from OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { headers } from &#39;next/headers&#39;;
import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  webhookSecret: process.env.OPENAI_WEBHOOK_SECRET, // env var used by default; explicit here.
});

export async function webhook(request: Request) {
  const headersList = headers();
  const body = await request.text();

  try {
    const event = client.webhooks.unwrap(body, headersList);

    switch (event.type) {
      case &#39;response.completed&#39;:
        console.log(&#39;Response completed:&#39;, event.data);
        break;
      case &#39;response.failed&#39;:
        console.log(&#39;Response failed:&#39;, event.data);
        break;
      default:
        console.log(&#39;Unhandled event type:&#39;, event.type);
    }

    return Response.json({ message: &#39;ok&#39; });
  } catch (error) {
    console.error(&#39;Invalid webhook signature:&#39;, error);
    return new Response(&#39;Invalid signature&#39;, { status: 400 });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Verifying webhook payloads directly&lt;/h3&gt; 
&lt;p&gt;In some cases, you may want to verify the webhook separately from parsing the payload. If you prefer to handle these steps separately, we provide the method &lt;code&gt;client.webhooks.verifySignature()&lt;/code&gt; to &lt;em&gt;only verify&lt;/em&gt; the signature of a webhook request. Like &lt;code&gt;.unwrap()&lt;/code&gt;, this method will throw an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter must be the raw JSON string sent from the server (do not parse it first). You will then need to parse the body after verifying the signature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { headers } from &#39;next/headers&#39;;
import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  webhookSecret: process.env.OPENAI_WEBHOOK_SECRET, // env var used by default; explicit here.
});

export async function webhook(request: Request) {
  const headersList = headers();
  const body = await request.text();

  try {
    client.webhooks.verifySignature(body, headersList);

    // Parse the body after verification
    const event = JSON.parse(body);
    console.log(&#39;Verified event:&#39;, event);

    return Response.json({ message: &#39;ok&#39; });
  } catch (error) {
    console.error(&#39;Invalid webhook signature:&#39;, error);
    return new Response(&#39;Invalid signature&#39;, { status: 400 });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Handling errors&lt;/h2&gt; 
&lt;p&gt;When the library is unable to connect to the API, or if the API returns a non-success status code (i.e., 4xx or 5xx response), a subclass of &lt;code&gt;APIError&lt;/code&gt; will be thrown:&lt;/p&gt; 
&lt;!-- prettier-ignore --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const job = await client.fineTuning.jobs
  .create({ model: &#39;gpt-4o&#39;, training_file: &#39;file-abc123&#39; })
  .catch(async (err) =&amp;gt; {
    if (err instanceof OpenAI.APIError) {
      console.log(err.request_id);
      console.log(err.status); // 400
      console.log(err.name); // BadRequestError
      console.log(err.headers); // {server: &#39;nginx&#39;, ...}
    } else {
      throw err;
    }
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Error codes are as follows:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Status Code&lt;/th&gt; 
   &lt;th&gt;Error Type&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;400&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;BadRequestError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;401&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;403&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;PermissionDeniedError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;404&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;NotFoundError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;422&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;UnprocessableEntityError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;429&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;RateLimitError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;=500&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;InternalServerError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;APIConnectionError&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Request IDs&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For more information on debugging requests, see &lt;a href=&quot;https://platform.openai.com/docs/api-reference/debugging-requests&quot;&gt;these docs&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;All object responses in the SDK provide a &lt;code&gt;_request_id&lt;/code&gt; property which is added from the &lt;code&gt;x-request-id&lt;/code&gt; response header so that you can quickly log failing requests and report them back to OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const completion = await client.chat.completions.create({
  messages: [{ role: &#39;user&#39;, content: &#39;Say this is a test&#39; }],
  model: &#39;gpt-4o&#39;,
});
console.log(completion._request_id); // req_123
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also access the Request ID using the &lt;code&gt;.withResponse()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const { data: stream, request_id } = await openai.chat.completions
  .create({
    model: &#39;gpt-4&#39;,
    messages: [{ role: &#39;user&#39;, content: &#39;Say this is a test&#39; }],
    stream: true,
  })
  .withResponse();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Realtime API Beta&lt;/h2&gt; 
&lt;p&gt;The Realtime API enables you to build low-latency, multi-modal conversational experiences. It currently supports text and audio as both input and output, as well as &lt;a href=&quot;https://platform.openai.com/docs/guides/function-calling&quot;&gt;function calling&lt;/a&gt; through a &lt;code&gt;WebSocket&lt;/code&gt; connection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { OpenAIRealtimeWebSocket } from &#39;openai/beta/realtime/websocket&#39;;

const rt = new OpenAIRealtimeWebSocket({ model: &#39;gpt-4o-realtime-preview-2024-12-17&#39; });

rt.on(&#39;response.text.delta&#39;, (event) =&amp;gt; process.stdout.write(event.delta));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information see &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/realtime.md&quot;&gt;realtime.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;To use this library with &lt;a href=&quot;https://learn.microsoft.com/azure/ai-services/openai/overview&quot;&gt;Azure OpenAI&lt;/a&gt;, use the &lt;code&gt;AzureOpenAI&lt;/code&gt; class instead of the &lt;code&gt;OpenAI&lt;/code&gt; class.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The Azure API shape slightly differs from the core API shape which means that the static types for responses / params won&#39;t always be correct.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { AzureOpenAI } from &#39;openai&#39;;
import { getBearerTokenProvider, DefaultAzureCredential } from &#39;@azure/identity&#39;;

const credential = new DefaultAzureCredential();
const scope = &#39;https://cognitiveservices.azure.com/.default&#39;;
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const openai = new AzureOpenAI({ azureADTokenProvider });

const result = await openai.chat.completions.create({
  model: &#39;gpt-4o&#39;,
  messages: [{ role: &#39;user&#39;, content: &#39;Say hello!&#39; }],
});

console.log(result.choices[0]!.message?.content);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Retries&lt;/h3&gt; 
&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. Connection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors will all be retried by default.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;maxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; 
&lt;!-- prettier-ignore --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Configure the default for all requests:
const client = new OpenAI({
  maxRetries: 0, // default is 2
});

// Or, configure per-request:
await client.chat.completions.create({ messages: [{ role: &#39;user&#39;, content: &#39;How can I get the name of the current day in JavaScript?&#39; }], model: &#39;gpt-4o&#39; }, {
  maxRetries: 5,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Timeouts&lt;/h3&gt; 
&lt;p&gt;Requests time out after 10 minutes by default. You can configure this with a &lt;code&gt;timeout&lt;/code&gt; option:&lt;/p&gt; 
&lt;!-- prettier-ignore --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// Configure the default for all requests:
const client = new OpenAI({
  timeout: 20 * 1000, // 20 seconds (default is 10 minutes)
});

// Override per-request:
await client.chat.completions.create({ messages: [{ role: &#39;user&#39;, content: &#39;How can I list all files in a directory using Python?&#39; }], model: &#39;gpt-4o&#39; }, {
  timeout: 5 * 1000,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On timeout, an &lt;code&gt;APIConnectionTimeoutError&lt;/code&gt; is thrown.&lt;/p&gt; 
&lt;p&gt;Note that requests which time out will be &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/#retries&quot;&gt;retried twice by default&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Request IDs&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For more information on debugging requests, see &lt;a href=&quot;https://platform.openai.com/docs/api-reference/debugging-requests&quot;&gt;these docs&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;All object responses in the SDK provide a &lt;code&gt;_request_id&lt;/code&gt; property which is added from the &lt;code&gt;x-request-id&lt;/code&gt; response header so that you can quickly log failing requests and report them back to OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const response = await client.responses.create({ model: &#39;gpt-4o&#39;, input: &#39;testing 123&#39; });
console.log(response._request_id); // req_123
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also access the Request ID using the &lt;code&gt;.withResponse()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const { data: stream, request_id } = await openai.responses
  .create({
    model: &#39;gpt-4o&#39;,
    input: &#39;Say this is a test&#39;,
    stream: true,
  })
  .withResponse();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Auto-pagination&lt;/h2&gt; 
&lt;p&gt;List methods in the OpenAI API are paginated. You can use the &lt;code&gt;for await ‚Ä¶ of&lt;/code&gt; syntax to iterate through items across all pages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;async function fetchAllFineTuningJobs(params) {
  const allFineTuningJobs = [];
  // Automatically fetches more pages as needed.
  for await (const fineTuningJob of client.fineTuning.jobs.list({ limit: 20 })) {
    allFineTuningJobs.push(fineTuningJob);
  }
  return allFineTuningJobs;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can request a single page at a time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;let page = await client.fineTuning.jobs.list({ limit: 20 });
for (const fineTuningJob of page.data) {
  console.log(fineTuningJob);
}

// Convenience methods are provided for manually paginating:
while (page.hasNextPage()) {
  page = await page.getNextPage();
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Realtime API Beta&lt;/h2&gt; 
&lt;p&gt;The Realtime API enables you to build low-latency, multi-modal conversational experiences. It currently supports text and audio as both input and output, as well as &lt;a href=&quot;https://platform.openai.com/docs/guides/function-calling&quot;&gt;function calling&lt;/a&gt; through a &lt;code&gt;WebSocket&lt;/code&gt; connection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { OpenAIRealtimeWebSocket } from &#39;openai/beta/realtime/websocket&#39;;

const rt = new OpenAIRealtimeWebSocket({ model: &#39;gpt-4o-realtime-preview-2024-12-17&#39; });

rt.on(&#39;response.text.delta&#39;, (event) =&amp;gt; process.stdout.write(event.delta));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information see &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/realtime.md&quot;&gt;realtime.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;To use this library with &lt;a href=&quot;https://learn.microsoft.com/azure/ai-services/openai/overview&quot;&gt;Azure OpenAI&lt;/a&gt;, use the &lt;code&gt;AzureOpenAI&lt;/code&gt; class instead of the &lt;code&gt;OpenAI&lt;/code&gt; class.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The Azure API shape slightly differs from the core API shape which means that the static types for responses / params won&#39;t always be correct.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { AzureOpenAI } from &#39;openai&#39;;
import { getBearerTokenProvider, DefaultAzureCredential } from &#39;@azure/identity&#39;;

const credential = new DefaultAzureCredential();
const scope = &#39;https://cognitiveservices.azure.com/.default&#39;;
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const openai = new AzureOpenAI({
  azureADTokenProvider,
  apiVersion: &#39;&amp;lt;The API version, e.g. 2024-10-01-preview&amp;gt;&#39;,
});

const result = await openai.chat.completions.create({
  model: &#39;gpt-4o&#39;,
  messages: [{ role: &#39;user&#39;, content: &#39;Say hello!&#39; }],
});

console.log(result.choices[0]!.message?.content);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on support for the Azure API, see &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/azure.md&quot;&gt;azure.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Advanced Usage&lt;/h2&gt; 
&lt;h3&gt;Accessing raw Response data (e.g., headers)&lt;/h3&gt; 
&lt;p&gt;The &quot;raw&quot; &lt;code&gt;Response&lt;/code&gt; returned by &lt;code&gt;fetch()&lt;/code&gt; can be accessed through the &lt;code&gt;.asResponse()&lt;/code&gt; method on the &lt;code&gt;APIPromise&lt;/code&gt; type that all methods return. This method returns as soon as the headers for a successful response are received and does not consume the response body, so you are free to write custom parsing or streaming logic.&lt;/p&gt; 
&lt;p&gt;You can also use the &lt;code&gt;.withResponse()&lt;/code&gt; method to get the raw &lt;code&gt;Response&lt;/code&gt; along with the parsed data. Unlike &lt;code&gt;.asResponse()&lt;/code&gt; this method consumes the body, returning once it is parsed.&lt;/p&gt; 
&lt;!-- prettier-ignore --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const client = new OpenAI();

const httpResponse = await client.responses
  .create({ model: &#39;gpt-4o&#39;, input: &#39;say this is a test.&#39; })
  .asResponse();

// access the underlying web standard Response object
console.log(httpResponse.headers.get(&#39;X-My-Header&#39;));
console.log(httpResponse.statusText);

const { data: modelResponse, response: raw } = await client.responses
  .create({ model: &#39;gpt-4o&#39;, input: &#39;say this is a test.&#39; })
  .withResponse();
console.log(raw.headers.get(&#39;X-My-Header&#39;));
console.log(modelResponse);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] All log messages are intended for debugging only. The format and content of log messages may change between releases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Log levels&lt;/h4&gt; 
&lt;p&gt;The log level can be configured in two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Via the &lt;code&gt;OPENAI_LOG&lt;/code&gt; environment variable&lt;/li&gt; 
 &lt;li&gt;Using the &lt;code&gt;logLevel&lt;/code&gt; client option (overrides the environment variable if set)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  logLevel: &#39;debug&#39;, // Show all log messages
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available log levels, from most to least verbose:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&#39;debug&#39;&lt;/code&gt; - Show debug messages, info, warnings, and errors&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;info&#39;&lt;/code&gt; - Show info messages, warnings, and errors&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;warn&#39;&lt;/code&gt; - Show warnings and errors (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;error&#39;&lt;/code&gt; - Show only errors&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&#39;off&#39;&lt;/code&gt; - Disable all logging&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;At the &lt;code&gt;&#39;debug&#39;&lt;/code&gt; level, all HTTP requests and responses are logged, including headers and bodies. Some authentication-related headers are redacted, but sensitive data in request and response bodies may still be visible.&lt;/p&gt; 
&lt;h4&gt;Custom logger&lt;/h4&gt; 
&lt;p&gt;By default, this library logs to &lt;code&gt;globalThis.console&lt;/code&gt;. You can also provide a custom logger. Most logging libraries are supported, including &lt;a href=&quot;https://www.npmjs.com/package/pino&quot;&gt;pino&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;winston&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;bunyan&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/consola&quot;&gt;consola&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/signale&quot;&gt;signale&lt;/a&gt;, and &lt;a href=&quot;https://jsr.io/@std/log&quot;&gt;@std/log&lt;/a&gt;. If your logger doesn&#39;t work, please open an issue.&lt;/p&gt; 
&lt;p&gt;When providing a custom logger, the &lt;code&gt;logLevel&lt;/code&gt; option still controls which messages are emitted, messages below the configured level will not be sent to your logger.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;
import pino from &#39;pino&#39;;

const logger = pino();

const client = new OpenAI({
  logger: logger.child({ name: &#39;OpenAI&#39; }),
  logLevel: &#39;debug&#39;, // Send all messages to pino, allowing it to filter
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; 
&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; 
&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; 
&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.get&lt;/code&gt;, &lt;code&gt;client.post&lt;/code&gt;, and other HTTP verbs. Options on the client, such as retries, will be respected when making these requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;await client.post(&#39;/some/path&#39;, {
  body: { some_prop: &#39;foo&#39; },
  query: { some_query_arg: &#39;bar&#39; },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented request params&lt;/h4&gt; 
&lt;p&gt;To make requests using undocumented parameters, you may use &lt;code&gt;// @ts-expect-error&lt;/code&gt; on the undocumented parameter. This library doesn&#39;t validate at runtime that the request matches the type, so any extra values you send will be sent as-is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;client.chat.completions.create({
  // ...
  // @ts-expect-error baz is not yet public
  baz: &#39;undocumented option&#39;,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For requests with the &lt;code&gt;GET&lt;/code&gt; verb, any extra params will be in the query, all other requests will send the extra param in the body.&lt;/p&gt; 
&lt;p&gt;If you want to explicitly send an extra argument, you can do so with the &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, and &lt;code&gt;headers&lt;/code&gt; request options.&lt;/p&gt; 
&lt;h4&gt;Undocumented response properties&lt;/h4&gt; 
&lt;p&gt;To access undocumented response properties, you may access the response object with &lt;code&gt;// @ts-expect-error&lt;/code&gt; on the response object, or cast the response object to the requisite type. Like the request params, we do not validate or strip extra properties from the response from the API.&lt;/p&gt; 
&lt;h3&gt;Customizing the fetch client&lt;/h3&gt; 
&lt;p&gt;If you want to use a different &lt;code&gt;fetch&lt;/code&gt; function, you can either polyfill the global:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import fetch from &#39;my-fetch&#39;;

globalThis.fetch = fetch;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or pass it to the client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;
import fetch from &#39;my-fetch&#39;;

const client = new OpenAI({ fetch });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fetch options&lt;/h3&gt; 
&lt;p&gt;If you want to set custom &lt;code&gt;fetch&lt;/code&gt; options without overriding the &lt;code&gt;fetch&lt;/code&gt; function, you can provide a &lt;code&gt;fetchOptions&lt;/code&gt; object when instantiating the client or making a request. (Request-specific options override client options.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  fetchOptions: {
    // `RequestInit` options
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Configuring proxies&lt;/h4&gt; 
&lt;p&gt;To modify proxy behavior, you can provide custom &lt;code&gt;fetchOptions&lt;/code&gt; that add runtime-specific proxy options to requests:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/node.svg?sanitize=true&quot; align=&quot;top&quot; width=&quot;18&quot; height=&quot;21&quot; /&gt; &lt;strong&gt;Node&lt;/strong&gt; &lt;sup&gt;[&lt;a href=&quot;https://github.com/nodejs/undici/raw/main/docs/docs/api/ProxyAgent.md#example---proxyagent-with-fetch&quot;&gt;docs&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;
import * as undici from &#39;undici&#39;;

const proxyAgent = new undici.ProxyAgent(&#39;http://localhost:8888&#39;);
const client = new OpenAI({
  fetchOptions: {
    dispatcher: proxyAgent,
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/bun.svg?sanitize=true&quot; align=&quot;top&quot; width=&quot;18&quot; height=&quot;21&quot; /&gt; &lt;strong&gt;Bun&lt;/strong&gt; &lt;sup&gt;[&lt;a href=&quot;https://bun.sh/guides/http/proxy&quot;&gt;docs&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;openai&#39;;

const client = new OpenAI({
  fetchOptions: {
    proxy: &#39;http://localhost:8888&#39;,
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/deno.svg?sanitize=true&quot; align=&quot;top&quot; width=&quot;18&quot; height=&quot;21&quot; /&gt; &lt;strong&gt;Deno&lt;/strong&gt; &lt;sup&gt;[&lt;a href=&quot;https://docs.deno.com/api/deno/~/Deno.createHttpClient&quot;&gt;docs&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import OpenAI from &#39;npm:openai&#39;;

const httpClient = Deno.createHttpClient({ proxy: { url: &#39;http://localhost:8888&#39; } });
const client = new OpenAI({
  fetchOptions: {
    client: httpClient,
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h2&gt;Semantic versioning&lt;/h2&gt; 
&lt;p&gt;This package generally follows &lt;a href=&quot;https://semver.org/spec/v2.0.0.html&quot;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Changes that only affect static types, without breaking runtime behavior.&lt;/li&gt; 
 &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; 
&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&quot;https://www.github.com/openai/openai-node/issues&quot;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;TypeScript &amp;gt;= 4.9 is supported.&lt;/p&gt; 
&lt;p&gt;The following runtimes are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Node.js 20 LTS or later (&lt;a href=&quot;https://endoflife.date/nodejs&quot;&gt;non-EOL&lt;/a&gt;) versions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Deno v1.28.0 or higher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bun 1.0 or later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloudflare Workers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vercel Edge Runtime.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Jest 28 or greater with the &lt;code&gt;&quot;node&quot;&lt;/code&gt; environment (&lt;code&gt;&quot;jsdom&quot;&lt;/code&gt; is not supported at this time).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nitro v2.6 or greater.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Web browsers: disabled by default to avoid exposing your secret API credentials. Enable browser support by explicitly setting &lt;code&gt;dangerouslyAllowBrowser&lt;/code&gt; to true&#39;.&lt;/p&gt; 
  &lt;details&gt; 
   &lt;summary&gt;More explanation&lt;/summary&gt; 
   &lt;h3&gt;Why is this dangerous?&lt;/h3&gt; 
   &lt;p&gt;Enabling the &lt;code&gt;dangerouslyAllowBrowser&lt;/code&gt; option can be dangerous because it exposes your secret API credentials in the client-side code. Web browsers are inherently less secure than server environments, any user with access to the browser can potentially inspect, extract, and misuse these credentials. This could lead to unauthorized access using your credentials and potentially compromise sensitive data or functionality.&lt;/p&gt; 
   &lt;h3&gt;When might this not be dangerous?&lt;/h3&gt; 
   &lt;p&gt;In certain scenarios where enabling browser support might not pose significant risks:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Internal Tools: If the application is used solely within a controlled internal environment where the users are trusted, the risk of credential exposure can be mitigated.&lt;/li&gt; 
    &lt;li&gt;Public APIs with Limited Scope: If your API has very limited scope and the exposed credentials do not grant access to sensitive data or critical operations, the potential impact of exposure is reduced.&lt;/li&gt; 
    &lt;li&gt;Development or debugging purpose: Enabling this feature temporarily might be acceptable, provided the credentials are short-lived, aren&#39;t also used in production environments, or are frequently rotated.&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt;&lt;/li&gt; 
&lt;/ul&gt;  
&lt;p&gt;Note that React Native is not supported at this time.&lt;/p&gt; 
&lt;p&gt;If you are interested in other runtime environments, please open or upvote an issue on GitHub.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-node/master/CONTRIBUTING.md&quot;&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

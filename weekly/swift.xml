<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Swift Weekly Trending</title>
    <description>Weekly Trending of Swift in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:49:43 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>aws-amplify/amplify-swift</title>
      <link>https://github.com/aws-amplify/amplify-swift</link>
      <description>&lt;p&gt;A declarative library for application development using cloud services.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Amplify Library for Swift&lt;/h2&gt; 
&lt;img src=&quot;https://s3.amazonaws.com/aws-mobile-hub-images/aws-amplify-logo.png&quot; alt=&quot;AWS Amplify&quot; width=&quot;550&quot; /&gt; 
&lt;p&gt;AWS Amplify provides a declarative and easy-to-use interface across different categories of cloud operations. Our default implementation works with Amazon Web Services (AWS), but AWS Amplify is designed to be open and pluggable for any custom backend or service.&lt;/p&gt; 
&lt;p&gt;The Amplify Library for Swift is layered on the &lt;a href=&quot;https://aws.amazon.com/sdk-for-swift/&quot;&gt;AWS SDK for Swift&lt;/a&gt;. This allows for access to the AWS SDK for Swift for a breadth of service-centric APIs.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://aws-amplify.github.io/amplify-swift/docs/&quot;&gt;&lt;strong&gt;API Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.amplify.aws/start/q/integration/ios&quot;&gt;&lt;strong&gt;Getting Started Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/actions/workflows/deploy_unstable.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/aws-amplify/amplify-swift/deploy_unstable.yml?logo=github&amp;amp;label=CI%2FCD&quot; alt=&quot;CI/CD&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codecov.io/gh/aws-amplify/amplify-swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/aws-amplify/amplify-swift?logo=codecov&amp;amp;label=codecov&quot; alt=&quot;Codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/jWVbPfC&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/308323056592486420?logo=discord&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features/APIs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/analytics/getting-started/q/platform/ios&quot;&gt;Analytics&lt;/a&gt; - for logging metrics and understanding your users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/ios&quot;&gt;API (GraphQL)&lt;/a&gt; - for adding a GraphQL endpoint to your app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/restapi/getting-started/q/platform/ios&quot;&gt;API (REST)&lt;/a&gt; - for adding a REST endpoint to your app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/auth/getting-started/q/platform/ios&quot;&gt;Authentication&lt;/a&gt; - for managing your users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/datastore/getting-started/q/platform/ios&quot;&gt;DataStore&lt;/a&gt; - for making it easier to program for a distributed data store for offline and online scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/geo/getting-started/q/platform/ios&quot;&gt;Geo&lt;/a&gt; - for adding location-based capabilities to your app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/predictions/getting-started/q/platform/ios/&quot;&gt;Predictions&lt;/a&gt; - for connecting your app with machine learning services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/push-notifications/getting-started/q/platform/ios/&quot;&gt;Push Notifications&lt;/a&gt; - for integrating push notifications in your app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.amplify.aws/lib/storage/getting-started/q/platform/ios&quot;&gt;Storage&lt;/a&gt; - store complex objects like pictures and videos to the cloud.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Platform Support&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;right&quot;&gt;Platform&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;Versions&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Support Level&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;iOS&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;13+&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;GA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;macOS&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;12+&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;GA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;tvOS&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;13+&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;GA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;watchOS&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;9+&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;GA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;visionOS&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;1+&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Preview*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Swift Version Support&lt;/h3&gt; 
&lt;p&gt;The current minimum supported Swift language version is &lt;strong&gt;Swift 5.9&lt;/strong&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The minimum Swift language version supported by Amplify Swift matches the version included in the minimum Xcode version allowed by Apple to upload apps to App Store Connect. Historically, Apple updates the minimum allowed Xcode version in April each year. You can expect Amplify Swift to update the minimum supported Swift version within the following 60 days. This is done to ensure Amplify Swift can provide modern Swift APIs and take advantage of Swift language improvements.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Semantic versioning&lt;/h2&gt; 
&lt;p&gt;We follow &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; for our releases.&lt;/p&gt; 
&lt;h3&gt;Semantic versioning and enumeration cases&lt;/h3&gt; 
&lt;p&gt;When Amplify adds a new enumeration value, we will publish a new &lt;strong&gt;minor&lt;/strong&gt; version of the library.&lt;/p&gt; 
&lt;p&gt;Applications that evaluate all members of an enumeration using a &lt;code&gt;switch&lt;/code&gt; statement can add a &lt;code&gt;default&lt;/code&gt; case to prevent new cases from causing compile warnings or errors.&lt;/p&gt; 
&lt;h4&gt;Semantic versioning and dependencies update&lt;/h4&gt; 
&lt;p&gt;We follow &lt;a href=&quot;https://semver.org/#what-should-i-do-if-i-update-my-own-dependencies-without-changing-the-public-api&quot;&gt;semantic versioning for updating our dependencies&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is licensed under the Apache 2.0 License.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Amplify requires Xcode 16.0 or later for all the supported platforms.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;For more detailed instructions, follow the getting started guides in our &lt;a href=&quot;https://docs.amplify.aws/lib/q/platform/ios&quot;&gt;documentation site&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
&lt;/table&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Swift Package Manager is distributed with Xcode. To start adding the Amplify Libraries to your iOS project, open your project in Xcode and select &lt;strong&gt;File &amp;gt; Add Packages&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aws-amplify/amplify-swift/main/readme-images/spm-setup-01-add-package.png&quot; alt=&quot;Add package dependency&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enter the Amplify Library for Swift GitHub repo URL (&lt;code&gt;https://github.com/aws-amplify/amplify-swift&lt;/code&gt;) into the search bar.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You&#39;ll see the Amplify Library for Swift repository rules for which version of Amplify you want Swift Package Manager to install. Choose &lt;strong&gt;Up to Next Major Version&lt;/strong&gt; and enter &lt;strong&gt;2.0.0&lt;/strong&gt; as the minimum version for the Dependency Rule, then click &lt;strong&gt;Add Package&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aws-amplify/amplify-swift/main/readme-images/spm-setup-02-amplify-repo-options.png&quot; alt=&quot;Dependency version options&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Choose which of the libraries you want added to your project. Always select the &lt;strong&gt;Amplify&lt;/strong&gt; library. The &quot;Plugin&quot; to install depends on which categories you are using:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;API: &lt;strong&gt;AWSAPIPlugin&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Analytics: &lt;strong&gt;AWSPinpointAnalyticsPlugin&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Auth: &lt;strong&gt;AWSCognitoAuthPlugin&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;DataStore: &lt;strong&gt;AWSDataStorePlugin&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Geo: &lt;strong&gt;AWSLocationGeoPlugin&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;Storage: &lt;strong&gt;AWSS3StoragePlugin&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aws-amplify/amplify-swift/main/readme-images/spm-setup-03-select-dependencies.png&quot; alt=&quot;Select dependencies&quot; /&gt;&lt;/p&gt; &lt;p&gt;Select all that are appropriate, then click &lt;strong&gt;Add Package&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You can always go back and modify which SPM packages are included in your project by opening the &lt;code&gt;Package Dependencies&lt;/code&gt; tab for your project: Click on the Project file in the Xcode navigator, then click on your project under the Project section, then select the &lt;strong&gt;Package Dependencies&lt;/strong&gt; tab.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In your app code, explicitly import a plugin when you need to add a plugin to Amplify, access plugin options, or access a category escape hatch.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Amplify
import AWSCognitoAuthPlugin
import AWSAPIPlugin
import AWSDataStorePlugin

// ...

func initializeAmplify() {
    do {
        try Amplify.add(plugin: AWSCognitoAuthPlugin())
        try Amplify.add(plugin: AWSAPIPlugin())
        try Amplify.add(plugin: AWSDataStorePlugin())
        // and so on ...
        try Amplify.configure()
    } catch {
        assertionFailure(&quot;Error initializing Amplify: \(error)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re just accessing Amplify category APIs (e.g., &lt;code&gt;Auth.signIn()&lt;/code&gt; or &lt;code&gt;Storage.uploadFile()&lt;/code&gt;), you only need to import Amplify:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Amplify

// ...

func signIn() async throws {
    let signInResult = try await Amplify.Auth.signIn(...)
    // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Escape Hatch&lt;/h2&gt; 
&lt;p&gt;All services and features not listed in the &lt;a href=&quot;https://raw.githubusercontent.com/aws-amplify/amplify-swift/main/#featuresapis&quot;&gt;&lt;strong&gt;Features/API sections&lt;/strong&gt;&lt;/a&gt; are supported via the &lt;a href=&quot;https://github.com/awslabs/aws-sdk-swift&quot;&gt;Swift SDK&lt;/a&gt; or if supported by a category can be accessed via the Escape Hatch like below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Amplify
import AWSS3StoragePlugin
import AWSS3

// ...

guard let plugin = try Amplify.Storage.getPlugin(for: &quot;awsS3StoragePlugin&quot;) as? AWSS3StoragePlugin else {
    print(&quot;Unable to to cast to AWSS3StoragePlugin&quot;)
    return
}

let awsS3 = plugin.getEscapeHatch()

let accelerateConfigInput = PutBucketAccelerateConfigurationInput()
do {
    let accelerateConfigOutput = try await awsS3.putBucketAccelerateConfiguration(
        input: accelerateConfigInput
    )
    print(&quot;putBucketAccelerateConfiguration output: \(accelerateConfigOutput)&quot;)
} catch {
    print(&quot;putBucketAccelerateConfiguration error: \(error)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Describing use of required reason API&lt;/h2&gt; 
&lt;p&gt;As required by the Apple App Store, we provide the new &lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt; file for describing use of required reason API, see &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&quot;&gt;Describing use of required reason API &lt;/a&gt;. You can also export the privacy report after archiving your App in Xcode, see &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4239187&quot;&gt;Create your app’s privacy report&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The following Amplify targets have been identified to be using the &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api#4278401&quot;&gt;User defaults APIs&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;AWSCognitoAuthPlugin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AWSDataStorePlugin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AWSCloudWatchLoggingPlugin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;InternalAWSPinpoint&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reporting Bugs/Feature Requests&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues?q=is%3Aissue+is%3Aopen+label%3Abug&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/aws-amplify/amplify-swift/bug?color=d73a4a&amp;amp;label=bugs&quot; alt=&quot;Open Bugs&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues?q=is%3Aissue+label%3A%22question%22+is%3Aopen+&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/aws-amplify/amplify-swift/question?color=558dfd&amp;amp;label=questions&quot; alt=&quot;Open Questions&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues?q=is%3Aissue+label%3A%22feature-request%22+is%3Aopen+&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/aws-amplify/amplify-swift/feature-request?color=ff9001&amp;amp;label=feature%20requests&quot; alt=&quot;Feature Requests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues?q=is%3Aissue+is%3Aclosed+&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-closed/aws-amplify/amplify-swift?color=%2325CC00&quot; alt=&quot;Closed Issues&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We welcome you to use the GitHub issue tracker to report bugs or suggest features.&lt;/p&gt; 
&lt;p&gt;When filing an issue, please check &lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues&quot;&gt;existing open&lt;/a&gt;, or &lt;a href=&quot;https://github.com/aws-amplify/amplify-swift/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20is%3Aclosed%20&quot;&gt;recently closed&lt;/a&gt;, issues to make sure somebody else hasn&#39;t already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Expected behavior and observed behavior&lt;/li&gt; 
 &lt;li&gt;A reproducible test case or series of steps&lt;/li&gt; 
 &lt;li&gt;The version of our code being used&lt;/li&gt; 
 &lt;li&gt;Any modifications you&#39;ve made relevant to the bug&lt;/li&gt; 
 &lt;li&gt;Anything custom about your environment or deployment&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Open Source Contributions&lt;/h2&gt; 
&lt;p&gt;We welcome any and all contributions from the community! Make sure you read through our contribution guide &lt;a href=&quot;https://raw.githubusercontent.com/aws-amplify/amplify-swift/main/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt; before submitting any PR&#39;s. Thanks! ♥️&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-async-algorithms</title>
      <link>https://github.com/apple/swift-async-algorithms</link>
      <description>&lt;p&gt;Async Algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-async-algorithms&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Swift Async Algorithms&lt;/strong&gt; is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types.&lt;/p&gt; 
&lt;p&gt;This package has three main goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;First-class integration with &lt;code&gt;async/await&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Provide a home for time-based algorithms&lt;/li&gt; 
 &lt;li&gt;Be cross-platform and open source&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;AsyncAlgorithms is a package for algorithms that work with &lt;em&gt;values over time&lt;/em&gt;. That includes those primarily about &lt;em&gt;time&lt;/em&gt;, like &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;, but also algorithms about &lt;em&gt;order&lt;/em&gt; like &lt;code&gt;combineLatest&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt;. Operations that work with multiple inputs (like &lt;code&gt;zip&lt;/code&gt; does on &lt;code&gt;Sequence&lt;/code&gt;) can be surprisingly complex to implement, with subtle behaviors and many edge cases to consider. A shared package can get these details correct, with extensive testing and documentation, for the benefit of all Swift apps.&lt;/p&gt; 
&lt;p&gt;The foundation for AsyncAlgorithms was included in Swift 5.5 from &lt;a href=&quot;https://github.com/apple/swift-evolution/raw/main/proposals/0298-asyncsequence.md&quot;&gt;AsyncSequence&lt;/a&gt;. Swift 5.5 also brings the ability to use a natural &lt;code&gt;for/in&lt;/code&gt; loop with &lt;code&gt;await&lt;/code&gt; to process the values in an &lt;code&gt;AsyncSequence&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt;-equivalent API like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;. Structured concurrency allows us to write code where intermediate state is simply a local variable, &lt;code&gt;try&lt;/code&gt; can be used directly on functions that &lt;code&gt;throw&lt;/code&gt;, and generally treat the logic for asynchronous code similar to that of synchronous code.&lt;/p&gt; 
&lt;p&gt;This package is the home for these APIs. Development and API design take place on &lt;a href=&quot;https://github.com/apple/swift-async-algorithms&quot;&gt;GitHub&lt;/a&gt; and the &lt;a href=&quot;https://forums.swift.org/c/related-projects/swift-async-algorithms&quot;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;h4&gt;Combining asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chain.md&quot;&gt;&lt;code&gt;chain(_:...)&lt;/code&gt;&lt;/a&gt;: Concatenates two or more asynchronous sequences with the same element type.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/CombineLatest.md&quot;&gt;&lt;code&gt;combineLatest(_:...)&lt;/code&gt;&lt;/a&gt;: Combines two or more asynchronous sequences into an asynchronous sequence producing a tuple of elements from those base asynchronous sequences that updates when any of the base sequences produce a value.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Merge.md&quot;&gt;&lt;code&gt;merge(_:...)&lt;/code&gt;&lt;/a&gt;: Merges two or more asynchronous sequence into a single asynchronous sequence producing the elements of all of the underlying asynchronous sequences.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Zip.md&quot;&gt;&lt;code&gt;zip(_:...)&lt;/code&gt;&lt;/a&gt;: Creates an asynchronous sequence of pairs built out of underlying asynchronous sequences.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Joined.md&quot;&gt;&lt;code&gt;joined(separator:)&lt;/code&gt;&lt;/a&gt;: Concatenated elements of an asynchronous sequence of asynchronous sequences, inserting the given separator between each element.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Creating asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Lazy.md&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt;: Create an asynchronous sequence composed from a synchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&quot;&gt;&lt;code&gt;AsyncChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&quot;&gt;&lt;code&gt;AsyncThrowingChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics that can emit failures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Performance optimized asynchronous iterators&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/BufferedBytes.md&quot;&gt;&lt;code&gt;AsyncBufferedByteIterator&lt;/code&gt;&lt;/a&gt;: A highly efficient iterator useful for iterating byte sequences derived from asynchronous read functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Other useful asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/AdjacentPairs.md&quot;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Collects tuples of adjacent elements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chunked.md&quot;&gt;&lt;code&gt;chunks(...)&lt;/code&gt; and &lt;code&gt;chunked(...)&lt;/code&gt;&lt;/a&gt;: Collect values into chunks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Compacted.md&quot;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Remove nil values from an asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/RemoveDuplicates.md&quot;&gt;&lt;code&gt;removeDuplicates()&lt;/code&gt;&lt;/a&gt;: Remove sequentially adjacent duplicate values.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Intersperse.md&quot;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of an asynchronous sequence.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Asynchronous Sequences that transact in time&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Debounce.md&quot;&gt;&lt;code&gt;debounce(for:tolerance:clock:)&lt;/code&gt;&lt;/a&gt;: Emit values after a quiescence period has been reached.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Throttle.md&quot;&gt;&lt;code&gt;throttle(for:clock:reducing:)&lt;/code&gt;&lt;/a&gt;: Ensure a minimum interval has elapsed between events.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Timer.md&quot;&gt;&lt;code&gt;AsyncTimerSequence&lt;/code&gt;&lt;/a&gt;: Emit the value of now at a given interval repeatedly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Obtaining all values from an asynchronous sequence&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;RangeReplaceableCollection.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new instance of a collection containing the elements of an asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(uniqueKeysWithValues:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence, using a combining closure to determine the value for any duplicate keys.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(grouping:by:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;SetAlgebra.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new set from an asynchronous sequence of items.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Effects&lt;/h4&gt; 
&lt;p&gt;Each algorithm has specific behavioral effects. For throwing effects these can either be if the sequence throws, does not throw, or rethrows errors. Sendability effects in some asynchronous sequences are conditional whereas others require the composed parts to all be sendable to satisfy a requirement of &lt;code&gt;Sendable&lt;/code&gt;. The effects are &lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Effects.md&quot;&gt;listed here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adding Swift Async Algorithms as a Dependency&lt;/h2&gt; 
&lt;p&gt;To use the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/apple/swift-async-algorithms&quot;, from: &quot;1.0.0&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include &lt;code&gt;&quot;AsyncAlgorithms&quot;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(name: &quot;&amp;lt;target&amp;gt;&quot;, dependencies: [
    .product(name: &quot;AsyncAlgorithms&quot;, package: &quot;swift-async-algorithms&quot;),
]),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, add &lt;code&gt;import AsyncAlgorithms&lt;/code&gt; to your source code.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;⚠️ Please note that this package requires Xcode 14 on macOS hosts. Previous versions of Xcode do not contain the required Swift version.&lt;/p&gt; 
&lt;h3&gt;Building/Testing Using Xcode on macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Building/Testing on Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the most recent development toolchain for your Linux distribution&lt;/li&gt; 
 &lt;li&gt;Decompress the archive to a path in which the &lt;code&gt;swift&lt;/code&gt; executable is in the binary search path environment variable (&lt;code&gt;$PATH&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Source Stability&lt;/h2&gt; 
&lt;p&gt;The Swift Async Algorithms package has a goal of being source stable as soon as possible; version numbers will follow &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; 
&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-async-algorithms&lt;/code&gt; package will consist of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; 
&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; 
&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beingpax/VoiceInk</title>
      <link>https://github.com/Beingpax/VoiceInk</link>
      <description>&lt;p&gt;Voice-to-text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/VoiceInk/Assets.xcassets/AppIcon.appiconset/256-mac.png&quot; width=&quot;180&quot; height=&quot;180&quot; /&gt; 
 &lt;h1&gt;VoiceInk&lt;/h1&gt; 
 &lt;p&gt;Voice to text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/platform-macOS%2014.0%2B-brightgreen&quot; alt=&quot;Platform&quot; /&gt; &lt;a href=&quot;https://github.com/Beingpax/VoiceInk/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/Beingpax/VoiceInk&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/Beingpax/VoiceInk/total&quot; alt=&quot;GitHub all releases&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/stars/Beingpax/VoiceInk?style=social&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://www.youtube.com/@tryvoiceink&quot;&gt;YouTube&lt;/a&gt; &lt;/p&gt; 
 &lt;a href=&quot;https://tryvoiceink.com&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Download%20Now-Latest%20Version-blue?style=for-the-badge&amp;amp;logo=apple&quot; alt=&quot;Download VoiceInk&quot; width=&quot;250&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;VoiceInk is a native macOS application that transcribes what you say to text almost instantly. You can find all the information and download the app from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/12367379-83e7-48a6-b52c-4488a6a04bba&quot; alt=&quot;VoiceInk Mac App&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After dedicating the past 5 months to developing this app, I&#39;ve decided to open source it for the greater good.&lt;/p&gt; 
&lt;p&gt;My goal is to make it &lt;strong&gt;the most efficient and privacy-focused voice-to-text solution for macOS&lt;/strong&gt; that is a joy to use. While the source code is now open for experienced developers to build and contribute, purchasing a license helps support continued development and gives you access to automatic updates, priority support, and upcoming features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎙️ &lt;strong&gt;Accurate Transcription&lt;/strong&gt;: Local AI models that transcribe your voice to text with 99% accuracy, almost instantly&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Privacy First&lt;/strong&gt;: 100% offline processing ensures your data never leaves your device&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Power Mode&lt;/strong&gt;: Intelligent app detection automatically applies your perfect pre-configured settings based on the app/ URL you&#39;re on&lt;/li&gt; 
 &lt;li&gt;🧠 &lt;strong&gt;Context Aware&lt;/strong&gt;: Smart AI that understands your screen content and adapts to the context&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Global Shortcuts&lt;/strong&gt;: Configurable keyboard shortcuts for quick recording and push-to-talk functionality&lt;/li&gt; 
 &lt;li&gt;📝 &lt;strong&gt;Personal Dictionary&lt;/strong&gt;: Train the AI to understand your unique terminology with custom words, industry terms, and smart text replacements&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Smart Modes&lt;/strong&gt;: Instantly switch between AI-powered modes optimized for different writing styles and contexts&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;AI Assistant&lt;/strong&gt;: Built-in voice assistant mode for a quick chatGPT like conversational assistant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h3&gt;Download&lt;/h3&gt; 
&lt;p&gt;Get the latest version with a free trial from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;tryvoiceink.com&lt;/a&gt;. Your purchase helps me work on VoiceInk full-time and continuously improve it with new features and updates.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can install VoiceInk via &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install --cask voiceink
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;p&gt;As an open-source project, you can build VoiceInk yourself by following the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;. However, the compiled version includes additional benefits like automatic updates, priority support via Discord and email, and helps fund ongoing development.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 14.0 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building from Source&lt;/a&gt; - Detailed instructions for building the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt; - How to contribute to VoiceInk&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; - Our community standards&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! However, please note that all contributions should align with the project&#39;s goals and vision. Before starting work on any feature or fix:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open an issue to discuss your proposed changes&lt;/li&gt; 
 &lt;li&gt;Wait for maintainer feedback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For build instructions, see our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues or have questions, please:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the existing issues in the GitHub repository&lt;/li&gt; 
 &lt;li&gt;Create a new issue if your problem isn&#39;t already reported&lt;/li&gt; 
 &lt;li&gt;Provide as much detail as possible about your environment and the problem&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;h3&gt;Core Technology&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggerganov/whisper.cpp&quot;&gt;whisper.cpp&lt;/a&gt; - High-performance inference of OpenAI&#39;s Whisper model&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FluidInference/FluidAudio&quot;&gt;FluidAudio&lt;/a&gt; - Used for Parakeet model implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Essential Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt; - Keeping VoiceInk up to date&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/KeyboardShortcuts&quot;&gt;KeyboardShortcuts&lt;/a&gt; - User-customizable keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/LaunchAtLogin&quot;&gt;LaunchAtLogin&lt;/a&gt; - Launch at login functionality&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ejbills/mediaremote-adapter&quot;&gt;MediaRemoteAdapter&lt;/a&gt; - Media playback control during recording&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marmelroy/Zip&quot;&gt;Zip&lt;/a&gt; - File compression and decompression utilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Pax&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mhaeuser/Battery-Toolkit</title>
      <link>https://github.com/mhaeuser/Battery-Toolkit</link>
      <description>&lt;p&gt;Control the platform power state of your Apple Silicon Mac.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Battery Toolkit logo&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/LogoCaption.png&quot; width=&quot;500&quot; align=&quot;center&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Control the platform power state of your Apple Silicon Mac.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#features&quot;&gt;Features&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#uninstall&quot;&gt; Uninstall &lt;/a&gt; •&lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#limitations&quot;&gt; Limitations &lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#technical-details&quot;&gt; Technical Details &lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#donate&quot;&gt; Donate &lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Limits battery charge to an upper limit&lt;/h2&gt; 
&lt;p&gt;Modern batteries deteriorate more when always kept at full charge. For this reason, Apple introduced the “Optimized Charging“ feature for all their portable devices, including Macs. However, its limit cannot be changed, and you cannot force charging to be put on hold. Battery Toolkit allows specifying a hard limit past which battery charging will be turned off. For safety reasons, this limit cannot be lower than 50&amp;nbsp;%.&lt;/p&gt; 
&lt;h2&gt;Allows battery charge to drain to a lower limit&lt;/h2&gt; 
&lt;p&gt;Even when connected to power, your Mac&#39;s battery may slowly lose battery charge for various reasons. Short battery charging bursts can further deteriorate batteries. For this reason, Battery Toolkit allows specifying a limit only below which battery charging will be turned on. For safety reasons, this limit cannot be lower than 20&amp;nbsp;%.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This setting is not honoured for cold boots or reboots, because Apple Silicon Macs reset their platform state in these cases. As battery charging will already be ongoing when Battery Toolkit starts, it lets charging proceed to the upper limit to not cause further short bursts across reboots.&lt;/p&gt; 
&lt;h2&gt;Allows you to disable the power adapter&lt;/h2&gt; 
&lt;p&gt;If you want to discharge the battery of your Mac, e.g., to recalibrate it, you can turn off the power adapter without actually unplugging it. You can also have Battery Toolkit disable sleeping when the power adapter is disabled.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Your Mac may go to sleep immediately after enabling the power adapter again. This is a software bug in macOS and cannot easily be worked around.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;img alt=&quot;Power Settings&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/PowerSettings.png&quot; width=&quot;607&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;. &lt;em&gt;Power Settings&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Grants you manual control&lt;/h2&gt; 
&lt;p&gt;The Battery Toolkit &quot;Commands&quot; menu and its menu bar extra allow you to issue various commands related to the power state of your Mac. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enabling and disabling the power adapter&lt;/li&gt; 
 &lt;li&gt;Requesting a full charge&lt;/li&gt; 
 &lt;li&gt;Requesting a charge to the specified upper limit&lt;/li&gt; 
 &lt;li&gt;Stopping charging immediately&lt;/li&gt; 
 &lt;li&gt;Pausing all background activity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Extra&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarExtra.png&quot; width=&quot;283&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;. &lt;em&gt;Menu Bar Extra&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Battery Toolkit currently only supports Apple Silicon Macs &lt;a href=&quot;https://github.com/mhaeuser/Battery-Toolkit/issues/15&quot;&gt;#15&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Manual Install&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the GitHub &lt;a href=&quot;https://github.com/mhaeuser/Battery-Toolkit/releases/latest&quot;&gt;releases&lt;/a&gt; page&lt;/li&gt; 
 &lt;li&gt;Download the latest non-dSYM build (i.e., &lt;code&gt;Battery-Toolkit-X.Y.zip&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Unzip the archive&lt;/li&gt; 
 &lt;li&gt;Drag &lt;code&gt;Battery Toolkit.app&lt;/code&gt; into your Applications folder&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install via Homebrew &lt;span&gt;🍺&lt;/span&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; if you haven&#39;t already&lt;/li&gt; 
 &lt;li&gt;Open Terminal and run &lt;code&gt;brew tap mhaeuser/mhaeuser&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;brew install battery-toolkit&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You may want to add the &lt;code&gt;--no-quarantine&lt;/code&gt; flag onto the end of the install command to bypass Gatekeeper more conveniently, but beware the potential security risks of doing so.&lt;/p&gt; 
&lt;p&gt;Otherwise, follow the steps mentioned below.&lt;/p&gt; 
&lt;h3&gt;Opening the App&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] This step is necessary, because the app has not been notarized by Apple due to the membership fees of the Apple Developer Program. &quot;Apple could not verify &#39;Battery Toolkit.app&#39; is free of malware&quot; refers to the &lt;a href=&quot;https://support.apple.com/en-us/102445&quot;&gt;lack of notarizaion&lt;/a&gt;, not to any anomalies detected.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;On macOS 14 Sonoma or below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Right click &lt;code&gt;Battery Toolkit.app&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open&quot;&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open&quot; in the dialog box&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;On macOS 15 Sequoia or above:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Try to open the app, it will tell you it&#39;s blocked&lt;/li&gt; 
 &lt;li&gt;Go to &lt;code&gt;System Settings &amp;gt; Privacy &amp;amp; Security&lt;/code&gt; and scroll to the bottom&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open Anyway&quot; to allow Battery Toolkit to open&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open Anyway&quot; on the next dialog box and authenticate&lt;/li&gt; 
 &lt;li&gt;Open Battery Toolkit again from Applications folder&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] To ensure there is no chance of interference, please turn “Optimized Charging” &lt;strong&gt;off&lt;/strong&gt; when Battery Toolkit is in use. &lt;br /&gt; Go to macOS System Settings &amp;gt; Battery &amp;gt; the (i) next to Battery Health &amp;gt; Optimized Battery Charging &amp;gt; toggle off&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Battery Toolkit from your Applications folder&lt;/li&gt; 
 &lt;li&gt;The menu bar will change to show the app menus, and a menu bar extra will should be visible&lt;/li&gt; 
 &lt;li&gt;Configure the settings through either method (see &lt;strong&gt;Fig. 2, 3, 4&lt;/strong&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Main&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarMain.png&quot; width=&quot;316&quot; /&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Extra&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarCommands.png&quot; width=&quot;248&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;. &lt;em&gt;Main Menu&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;. &lt;em&gt;Menu Bar Commands&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you prefer, you can quit the GUI to hide the menu bar extra and Battery Toolkit will keep running in the background. If you want to change any settings, simply re-open the app.&lt;/p&gt; 
&lt;h1&gt;Uninstall&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Focus Battery Toolkit&lt;/li&gt; 
 &lt;li&gt;Open the main Battery Toolkit menu in the menu bar (see &lt;strong&gt;Fig. 3&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Choose &quot;Disable Background Activity&quot;&lt;/li&gt; 
 &lt;li&gt;Move the app to the Trash and empty it&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Limitations&lt;/h1&gt; 
&lt;p&gt;Battery Toolkit disables sleep while it is charging, because it has to actively disable charging once reaching the maximum. Sleep is re-enabled once charging is stopped for any reason, e.g., reaching the maximum charge level, manual cancellation, or unplugging the MacBook.&lt;/p&gt; 
&lt;p&gt;Apps, including Battery Toolkit, cannot control the charge state when the machine is shut down. If the charger remains plugged in while the Mac is off, the battery will charge to 100&amp;nbsp;%.&lt;/p&gt; 
&lt;p&gt;Note that sleep should usually be disabled when the power adapter is disabled, as this will exit Clamshell mode and the machine will sleep immediately if the lid is closed. Refer to the toggle in the Settings dialog (see &lt;strong&gt;Fig. 1&lt;/strong&gt;).&lt;/p&gt; 
&lt;h1&gt;Technical Details&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on IOPowerManagement events to minimize resource usage, especially when not connected to power&lt;/li&gt; 
 &lt;li&gt;Support for macOS Ventura daemons and login items for a more reliable experience&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Privileged operations are authenticated by the daemon&lt;/li&gt; 
 &lt;li&gt;Privileged daemon exposes only a minimal protocol via XPC&lt;/li&gt; 
 &lt;li&gt;XPC communication uses the latest macOS codesign features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Icon based on &lt;a href=&quot;https://seekicon.com/free-icon/rechargable-battery_1&quot;&gt;reference icon by Streamline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;README overhauled by &lt;a href=&quot;https://github.com/realrogue&quot;&gt;rogue&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Donate&lt;/h1&gt; 
&lt;p&gt;For various reasons, I will not accept personal donations. However, if you would like to support my work with the &lt;a href=&quot;https://www.kinderschutzbund-kaiserslautern.de/&quot;&gt;Kinderschutzbund Kaiserslautern-Kusel&lt;/a&gt; child protection association, you may donate &lt;a href=&quot;https://www.kinderschutzbund-kaiserslautern.de/helfen-sie-mit/spenden/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>valkey-io/valkey-swift</title>
      <link>https://github.com/valkey-io/valkey-swift</link>
      <description>&lt;p&gt;Valkey client written in Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;valkey-swift&lt;/h1&gt; 
&lt;p&gt;A Swift client library for Valkey.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The valkey-swift project uses a connection pool, which requires a background process to manage it. You can either run it using a Task group&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let valkeyClient = ValkeyClient(.hostname(&quot;localhost&quot;, port: 6379), logger: logger)
try await withThrowingTaskgroup(of: Void.self) { group in
    group.addTask {
        // run connection pool in the background
        try await valkeyClient.run()
    }
    // use valkey client
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use ValkeyClient with &lt;a href=&quot;https://github.com/swift-server/swift-service-lifecycle&quot;&gt;swift-service-lifecycle&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once you have a valkey client setup and running you can call valkey commands directly from the &lt;code&gt;ValkeyClient&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try await valkeyClient.set(key: &quot;foo&quot;, value: &quot;bar&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can create a connection and run multiple commands from that connection using &lt;code&gt;ValkeyClient.withConnection()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try await valkeyClient.withConnection { connection in
    try await connection.set(key: &quot;foo1&quot;, value: &quot;bar&quot;)
    try await connection.set(key: &quot;foo2&quot;, value: &quot;baz&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the Valkey commands are in the Commands folder of the Valkey target. These are generated from the model files Valkey supplies in the &lt;a href=&quot;https://github.com/valkey-io/valkey/tree/unstable/src/commands&quot;&gt;valkey&lt;/a&gt; repository. In many cases where it was possible to ascertain the return type of a command these functions will return that expected type. In situations where this is not possible we have either added a custom return type or a &lt;code&gt;RESPToken&lt;/code&gt; is returned and you&#39;ll need to convert it manually.&lt;/p&gt; 
&lt;h3&gt;Pipelining commands&lt;/h3&gt; 
&lt;p&gt;In some cases it is desirable to send multiple commands at one time, without waiting for the response after each command. This is called pipelining. You can do this using the function &lt;code&gt;execute(_:)&lt;/code&gt;. This function takes multiple commands in the form of a parameter pack. It sends all the commands off at the same time and once it has received all the responses, returns a parameter pack containing the responses.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let (setResponse, getResponse) = await connection.execute(
    SET(key: &quot;MyKey&quot;, value: &quot;TestString&quot;),
    GET(key: &quot;MyKey&quot;)
)
let value = try getResponse.get()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Redis compatibility&lt;/h2&gt; 
&lt;p&gt;As Valkey is a fork of Redis v7.2.4, valkey-swift is compatible with Redis databases up to v7.2.4. There is a chance that v7.2.4 features will still be compatible in later versions of Redis, but these are now considered two different projects and they will diverge. valkey-swift uses the RESP3 protocol.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;User guides and reference documentation for valkey-swift can be found on the &lt;a href=&quot;https://swiftpackageindex.com/valkey-io/valkey-swift/documentation/valkey&quot;&gt;Swift Package Index&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-composable-architecture</title>
      <link>https://github.com/pointfreeco/swift-composable-architecture</link>
      <description>&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&quot;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&quot;&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&quot;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; 
&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br /&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br /&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br /&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br /&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br /&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring advanced programming topics in the Swift language, hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can watch all of the episodes &lt;a href=&quot;https://www.pointfree.co/collections/composable-architecture&quot;&gt;here&lt;/a&gt;, as well as a dedicated, &lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt;multipart tour&lt;/a&gt; of the architecture from scratch.&lt;/p&gt; 
&lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg&quot; width=&quot;600&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;&lt;img src=&quot;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&quot; alt=&quot;Screen shots of example applications&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&quot;&gt;Case Studies&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Getting started&lt;/li&gt; 
   &lt;li&gt;Effects&lt;/li&gt; 
   &lt;li&gt;Navigation&lt;/li&gt; 
   &lt;li&gt;Higher-order reducers&lt;/li&gt; 
   &lt;li&gt;Reusable components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&quot;&gt;Location manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&quot;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&quot;&gt;Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&quot;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SyncUps&quot;&gt;SyncUps app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&quot;&gt;Todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&quot;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&quot;https://github.com/pointfreeco/isowords&quot;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For a step-by-step interactive tutorial, be sure to check out &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture&quot;&gt;Meet the Composable Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; 
&lt;p&gt;As a basic example, consider a UI that shows a number along with &quot;+&quot; and &quot;−&quot; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.&lt;/p&gt; 
&lt;p&gt;To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the &lt;code&gt;@Reducer&lt;/code&gt; macro:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@Reducer
struct Feature {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In here we need to define a type for the feature&#39;s state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] We&#39;ve applied the &lt;code&gt;@ObservableState&lt;/code&gt; macro to &lt;code&gt;State&lt;/code&gt; in order to take advantage of the observation tools in the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We also need to define a type for the feature&#39;s actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we implement the &lt;code&gt;body&lt;/code&gt; property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the &lt;code&gt;Reduce&lt;/code&gt; reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer&amp;lt;State, Action&amp;gt; {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: &quot;http://numbersapi.com/\(count)/trivia&quot;)!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;StoreOf&amp;lt;Feature&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct FeatureView: View {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  var body: some View {
    Form {
      Section {
        Text(&quot;\(store.count)&quot;)
        Button(&quot;Decrement&quot;) { store.send(.decrementButtonTapped) }
        Button(&quot;Increment&quot;) { store.send(.incrementButtonTapped) }
      }

      Section {
        Button(&quot;Number fact&quot;) { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in &lt;code&gt;viewDidLoad&lt;/code&gt;, and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand!&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class FeatureViewController: UIViewController {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  init(store: StoreOf&amp;lt;Feature&amp;gt;) {
    self.store = store
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder: NSCoder) {
    fatalError(&quot;init(coder:) has not been implemented&quot;)
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    let countLabel = UILabel()
    let decrementButton = UIButton()
    let incrementButton = UIButton()
    let factLabel = UILabel()
    
    // Omitted: Add subviews and set up constraints...
    
    observe { [weak self] in
      guard let self 
      else { return }
      
      countLabel.text = &quot;\(self.store.count)&quot;
      factLabel.text = self.store.numberFact
    }
  }

  @objc private func incrementButtonTapped() {
    self.store.send(.incrementButtonTapped)
  }
  @objc private func decrementButtonTapped() {
    self.store.send(.decrementButtonTapped)
  }
  @objc private func factButtonTapped() {
    self.store.send(.numberFactButtonTapped)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Once we are ready to display this view, for example in the app&#39;s entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on testing, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;testing&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test use a &lt;code&gt;TestStore&lt;/code&gt;, which can be created with the same information as the &lt;code&gt;Store&lt;/code&gt;, but it does extra work to allow you to assert how your feature evolves as actions are sent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the &lt;code&gt;numberFact&lt;/code&gt; state to be populated:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, how do we know what fact is going to be sent back to us?&lt;/p&gt; 
&lt;p&gt;Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.&lt;/p&gt; 
&lt;p&gt;It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the &lt;code&gt;Feature&lt;/code&gt; reducer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  let numberFact: (Int) async throws -&amp;gt; String
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then we can use it in the &lt;code&gt;reduce&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { &quot;\($0) is a good number Brent&quot; })
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = &quot;0 is a good number Brent&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also improve the ergonomics of using the &lt;code&gt;numberFact&lt;/code&gt; dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to &lt;code&gt;numberFact&lt;/code&gt;, and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on dependency management, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;dependencies&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can start by wrapping the number fact functionality in a new type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct NumberFactClient {
  var fetch: (Int) async throws -&amp;gt; String
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then registering that type with the dependency management system by conforming the client to the &lt;code&gt;DependencyKey&lt;/code&gt; protocol, which requires you to specify the live value to use when running the application in simulators or devices:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the &lt;code&gt;@Dependency&lt;/code&gt; property wrapper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt; @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -&amp;gt; String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature&#39;s reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.&lt;/p&gt; 
&lt;p&gt;This means the entry point to the application no longer needs to construct dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { &quot;\($0) is a good number Brent&quot; }
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/&quot;&gt;1.17.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; Other versions &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/&quot;&gt;1.16.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/&quot;&gt;1.15.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/&quot;&gt;1.14.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/&quot;&gt;1.13.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/&quot;&gt;1.12.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/&quot;&gt;1.11.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/&quot;&gt;1.10.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/&quot;&gt;1.9.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/&quot;&gt;1.8.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/&quot;&gt;1.7.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/&quot;&gt;1.6.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/&quot;&gt;1.5.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/&quot;&gt;1.4.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/&quot;&gt;1.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/&quot;&gt;1.2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/&quot;&gt;1.1.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/&quot;&gt;1.0.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/&quot;&gt;0.59.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/&quot;&gt;0.58.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/&quot;&gt;0.57.0&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation&quot;&gt;Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate&quot;&gt;Sharing state&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings&quot;&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have a &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq&quot;&gt;dedicated article&lt;/a&gt; for all of the most frequently asked questions and comments people have concerning the library.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href=&quot;http://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/discussions&quot;&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;Point-Free Community slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Package Dependencies...&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter &quot;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture&quot;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&quot; into the package repository URL text field&lt;/li&gt; 
 &lt;li&gt;Depending on how your project is structured: 
  &lt;ul&gt; 
   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; 
   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Companion libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ryu0118/swift-composable-architecture-extras&quot;&gt;Composable Architecture Extras&lt;/a&gt;: A companion library to the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mentalflux/tca-composer&quot;&gt;TCAComposer&lt;/a&gt;: A macro framework for generating boiler-plate code in the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johnpatrickmorgan/TCACoordinators&quot;&gt;TCACoordinators&lt;/a&gt;: The coordinator pattern in the Composable Architecture.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a library, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to it!&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&quot;&gt;Arabic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&quot;&gt;French&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d&quot;&gt;Hindi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&quot;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&quot;&gt;Italian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038&quot;&gt;Korean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54&quot;&gt;Polish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8&quot;&gt;Portuguese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&quot;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942&quot;&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gokhanamal/93001244ef0c1cec58abeb1afc0de37c&quot;&gt;Turkish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8&quot;&gt;Ukrainian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&quot;https://gist.github.com&quot;&gt;Gist&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits and thanks&lt;/h2&gt; 
&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; 
&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/liscio&quot;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; 
&lt;p&gt;And thanks to &lt;a href=&quot;https://github.com/freak4pc&quot;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&quot;https://github.com/CombineCommunity/CombineExt/&quot;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; 
&lt;h2&gt;Other libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uber/RIBs&quot;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/Loop&quot;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReSwift/ReSwift&quot;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/square/workflow&quot;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactorKit/ReactorKit&quot;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/NoTests/RxFeedback.swift&quot;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/spotify/mobius.swift&quot;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;And more&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/FluxorOrg/Fluxor&quot;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/RPallas92/PromisedArchitectureKit&quot;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>quoid/userscripts</title>
      <link>https://github.com/quoid/userscripts</link>
      <description>&lt;p&gt;An open-source userscript manager for Safari&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Userscripts Safari&lt;/h1&gt; 
&lt;p&gt;An open-source userscript editor for Safari&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/etc/screenshot.png&quot; alt=&quot;Userscripts Safari&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#ui-overview&quot;&gt;UI Overview&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#browser-page&quot;&gt;Browser Page&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#settings-modal&quot;&gt;Settings Modal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#popover&quot;&gt;Popover&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#metadata&quot;&gt;Metadata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#scripts-directory&quot;&gt;Scripts Directory / Save Location&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#getting-help&quot;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#faqs&quot;&gt;FAQs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#privacy-policy&quot;&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Userscripts is available for iOS (iPadOS) and macOS. For all versions, installation is done through &lt;a href=&quot;https://itunes.apple.com/us/app/userscripts/id1463298887&quot;&gt;Apple&#39;s App Store&lt;/a&gt;. On macOS, versions prior to &lt;code&gt;4.x&lt;/code&gt; were made available to download and install directly from the repository, but due to &lt;a href=&quot;https://github.com/quoid/userscripts/issues/154&quot;&gt;changes in the way Apple allows developers to distribute apps built with the WebExtension API&lt;/a&gt;, that is no longer an option.&lt;/p&gt; 
&lt;p&gt;To run Userscripts on iOS you should be on iOS 15.1 or higher.&lt;/p&gt; 
&lt;p&gt;To run Userscripts on macOS you should running macOS 12 or higher, along with Safari 14.1 or higher.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/userscripts/id1463298887&quot;&gt;App Store Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/quoid/userscripts/projects/3&quot;&gt;Development Progress&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;It&#39;s recommend to read this documentation and, if you have time, watch the following video overviews to familiarize yourself with the app and extension.&lt;/p&gt; 
&lt;p&gt;Once the app is downloaded and installed the following steps should be taken:&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;iOS (iPadOS)&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;After installing the iOS App, you need two main steps to make the extension work:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the App and set a directory&lt;/strong&gt; (For saving and loading userscripts)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;After Userscripts for ios v1.5.0, a local default directory will be set automatically&lt;/li&gt; 
   &lt;li&gt;In earlier versions please click the &lt;code&gt;Set Userscripts Directory&lt;/code&gt; button and select the directory&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enable the extension in Safari&lt;/strong&gt; (And grant permissions)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Manage extensions from Settings App (Settings &amp;gt; Safari &amp;gt; Extensions) or Safari App (&lt;code&gt;AA&lt;/code&gt; button on iPhone, &lt;code&gt;extension-icon&lt;/code&gt; on iPad, also where you open the extension&#39;s &lt;code&gt;popup&lt;/code&gt; interface)&lt;/li&gt; 
   &lt;li&gt;For optimal experience it&#39;s recommended that you &lt;code&gt;Always Allow&lt;/code&gt; Userscripts for &lt;code&gt;All Websites&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The iOS App cannot detect whether you have enabled the extension in Safari, therefore, the App prompt will not change after you enable the extension. Currently the App interface is only used to set or change the userscripts directory.&lt;/p&gt; 
 &lt;p&gt;You could select an iCloud folder for syncing scripts between macOS and iOS, but please note that there may be delays in synchronization, and you may encounter files be evictioned due to iCloud optimization, please refer to &lt;a href=&quot;https://github.com/quoid/userscripts/issues/424&quot;&gt;#424&lt;/a&gt;. (&lt;strong&gt;Since macOS 15 / iOS 18, please set &quot;keep downloaded&quot; for the folder to avoid eviction&lt;/strong&gt;)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are two main ways to install a user script from the iOS version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visit a &lt;code&gt;.user.js&lt;/code&gt; URL in Safari, then open the extension &lt;code&gt;popup&lt;/code&gt; and you will see an installation prompt 
  &lt;ul&gt; 
   &lt;li&gt;The URL should end with &lt;code&gt;.user.js&lt;/code&gt; in &lt;code&gt;/PATH&lt;/code&gt; part, not the &lt;code&gt;?QUERY&lt;/code&gt; or &lt;code&gt;#HASH&lt;/code&gt; parts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You could also save files with the extension &lt;code&gt;.user.js&lt;/code&gt; directly to the Userscripts directory you set above&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Both of the above work equally well in the macOS version.&lt;/p&gt; 
 &lt;p&gt;The iOS version does not include the script editor provided in the macOS version, but you can always edit script files in the directory you set directly on iOS. (use any third-party code editor apps, support in-place opening and editing)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;After installing Userscripts on macOS, you &lt;strong&gt;do not&lt;/strong&gt; need to select a userscripts directory if you do not plan on syncing your userscripts between multiple devices. Instead you can choose to use the default directory, which is located at &lt;code&gt;~/User/Library/Containers/Userscripts/Data/Documents/scripts&lt;/code&gt; - again, this is default (and automatic) behavior. You only need to select a new location if you want to store your userscripts elsewhere, which is especially useful if you are using an external code editor such as Sublime Text or VSCode.&lt;/p&gt; 
&lt;p&gt;Refer to Apple&#39;s official guide page: &lt;a href=&quot;https://support.apple.com/102343&quot;&gt;Use Safari extensions on your Mac&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/x1r3-L7pdYQ?t=14&quot;&gt;&lt;strong&gt;Here&#39;s a short clip showing how to easily create/add a userscript in Safari using this extension on macOS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;UI Overview&lt;/h2&gt; 
&lt;h3&gt;Browser Page:&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/etc/ui01.png&quot; alt=&quot;Userscripts Safari Main Application Window&quot; /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Extension button&lt;/strong&gt; - click this button to open the extension interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Filter bar&lt;/strong&gt; - use this input to filter items in the sidebar, by &lt;em&gt;name&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sort button&lt;/strong&gt; - changes the order of the items in the sidebar by name or modified time&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sidebar buttons&lt;/strong&gt; - &lt;em&gt;described left to right&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;code&gt;settings&lt;/code&gt; button (represented by a &lt;a href=&quot;https://wikipedia.org/wiki/Gear&quot;&gt;cog&lt;/a&gt;) displays the settings modal (discussed below)&lt;/li&gt; 
   &lt;li&gt;The &lt;code&gt;plus&lt;/code&gt; button allows users to add new items 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;New CSS&lt;/code&gt; is a &quot;userscript&quot; that expects &lt;a href=&quot;https://www.w3schools.com/css/&quot;&gt;CSS&lt;/a&gt; code&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;New Javascript&lt;/code&gt; is a prototypical userscript that expects &lt;a href=&quot;https://www.w3schools.com/js/DEFAULT.asp&quot;&gt;Javascript&lt;/a&gt; code&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;New Remote&lt;/code&gt; allows the user to add a remote hosted userscript (or style) by inputting the web address (&lt;em&gt;ex:&lt;/em&gt; &lt;code&gt;https://www.k21p.com/example.user.js&lt;/code&gt;)&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Item toggle&lt;/strong&gt; - this toggle enables or disables an item&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Item&lt;/strong&gt; - this is the userscript (or style), clicking on it will load it&#39;s contents into the editor - &lt;em&gt;you can hide descriptions in the settings area!&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Editor buttons (top)&lt;/strong&gt; - &lt;em&gt;described left to right&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Update button&lt;/strong&gt; - this button allows you to update userscripts that meet the following conditions 
    &lt;ul&gt; 
     &lt;li&gt;metadata contains &lt;code&gt;@version&lt;/code&gt; tag&lt;/li&gt; 
     &lt;li&gt;metadata contains &lt;code&gt;@updateURL&lt;/code&gt; tag&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Download button&lt;/strong&gt; - click this button to download a copy of your userscript 
    &lt;ul&gt; 
     &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; every userscript that is displayed in the interface is already present on your local machine, at your save location - the download button offers a quick way to retrieve a copy of that file, without needing to click the settings button, and then the save location link within the settings modal&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Trash button&lt;/strong&gt; - moves the currently loaded userscript to the trash bin - it will subsequently be removed from the interface and save location&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Editor buttons (bottom)&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Discard&lt;/code&gt; - while editing, reverts any unsaved changes you&#39;ve made to a userscript&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Save&lt;/code&gt; - while editing, saves all changes you&#39;ve made to a userscript 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; is the keyboard shortcut for the action&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Settings Modal:&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/etc/settings.png&quot; alt=&quot;Userscripts Safari Settings Window&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Close Brackets&lt;/strong&gt; - toggles on/off auto closing of brackets in the editor 
  &lt;ul&gt; 
   &lt;li&gt;this affects the following characters: &lt;code&gt;() [] {} &quot;&quot; &#39;&#39;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto Hint&lt;/strong&gt; - automatically shows completion hints while editing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hide Descriptions&lt;/strong&gt; - hides the item descriptions in the sidebar&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Show Invisibles&lt;/strong&gt; - toggles the display of invisible characters in the editor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Javascript Linter&lt;/strong&gt; - toggles basic Javascript linting within the editor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tab Size&lt;/strong&gt; - the number of spaces a tab is equal to while editing, obviously defaults to &lt;code&gt;4&lt;/code&gt; because using &lt;code&gt;2&lt;/code&gt; spaces is absolute insanity&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enable Injection&lt;/strong&gt; - toggle on/off script injection for the pages you visit (this is the on/off switch)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Show Toolbar Count&lt;/strong&gt; - displays a badge on the toolbar icon with a number that represents how many enabled scripts match the url for the page you are on&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Save Location&lt;/strong&gt; - where your file are currently located and being saved to (click the blue text to open location)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change Save Location (cogs icon)&lt;/strong&gt; - this button, located directly to the right of the save location, is a shortcut for opening the host app, which will allow you to change the save location&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Global Blacklist&lt;/strong&gt; - this input accepts a comma separated list of &lt;code&gt;@match&lt;/code&gt; patterns (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns#match_pattern_structure&quot;&gt;Match pattern structure&lt;/a&gt;), a page url that matches against a pattern in this list will be ignored for script injection&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Popup:&lt;/h3&gt; 
&lt;!-- ![Userscripts Popup](/etc/popover.png)--&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/etc/popover.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; 
&lt;ol start=&quot;10&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;Open Page Link&lt;/strong&gt; - &lt;em&gt;macOS only&lt;/em&gt;, opens the extension browser page&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enable Injection toggle&lt;/strong&gt; - turns on/off page script injection (on/off switch)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Refresh View&lt;/strong&gt; - refreshes the popup view&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Available Updates View&lt;/strong&gt; - the extension periodically checks all userscripts in your save location for updates and when an update is found, it is shown in this view&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Folder Button&lt;/strong&gt; - on &lt;strong&gt;macOS&lt;/strong&gt; this button opens your save location directory in Finder, on &lt;strong&gt;iOS&lt;/strong&gt; this button displays the &quot;all scripts view&quot; where you can see every script that found in your save location directory, the &quot;all scripts view&quot; allows you to toggle individual userscript scripts on/off regardless of the current page being displayed in the browser&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Install Prompt&lt;/strong&gt; - when a userscript is displayed in the browser, this alert displays, giving the user the option to install the userscript into their save location directory, tapping the prompt will take them through the installation steps&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Matched Userscripts List&lt;/strong&gt; - this list shows the currently matched userscripts relative to the current page being displayed in the browser, all userscripts that match to the domain will be showed, whether they are active or not. Users can click/tap the userscript to the toggle them on/off. If a userscript is active for the domain through a subframe a &lt;strong&gt;sub&lt;/strong&gt; tag will be show next the to the file type indicator&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Metadata&lt;/h2&gt; 
&lt;p&gt;Userscripts Safari currently supports the following userscript metadata:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;@name&lt;/code&gt; - This will be the name that displays in the sidebar and be used as the filename - you can &lt;em&gt;not&lt;/em&gt; use the same name for multiple files of the same type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@description&lt;/code&gt;- Use this to describe what your userscript does - this will be displayed in the sidebar - there is a setting to hide descriptions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@icon&lt;/code&gt; - This doesn&#39;t have a function with this userscript manager, but the &lt;strong&gt;first value&lt;/strong&gt; provided in the metadata will be accessible in the &lt;code&gt;GM_/GM.info&lt;/code&gt; object&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@match&lt;/code&gt; - Domain match patterns - you can use several instances of this field if you&#39;d like multiple domain matches - please refer to: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns#match_pattern_structure&quot;&gt;Match pattern structure&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; this extension only supports &lt;code&gt;http/s&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@exclude-match&lt;/code&gt; - Domain patterns where you do &lt;em&gt;not&lt;/em&gt; want the script to run&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@include&lt;/code&gt; - Used to match against urls for injection, globs and regular expressions are allowed, &lt;a href=&quot;https://wiki.greasespot.net/Include_and_exclude_rules&quot;&gt;read more here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@exclude&lt;/code&gt; - Functions in a similar way as &lt;code&gt;@include&lt;/code&gt; but rather than injecting, a match against this key&#39;s value will prevent injection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@inject-into&lt;/code&gt; - allows the user to choose which context to inject the script into 
  &lt;ul&gt; 
   &lt;li&gt;allows the user to choose which context to inject the script into&lt;/li&gt; 
   &lt;li&gt;values: &lt;code&gt;auto&lt;/code&gt; (default), &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;GM&lt;/code&gt; apis are only available when using &lt;code&gt;content&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;works like &lt;a href=&quot;https://violentmonkey.github.io/api/metadata-block/#inject-into&quot;&gt;violentmonkey&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@run-at&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;allows the user to choose the injection timing&lt;/li&gt; 
   &lt;li&gt;document-start, document-end (default), document-idle&lt;/li&gt; 
   &lt;li&gt;works like &lt;a href=&quot;https://violentmonkey.github.io/api/metadata-block/#run-at&quot;&gt;violentmonkey&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;JS Only&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@weight&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;allows the user to further adjust script injection timing&lt;/li&gt; 
   &lt;li&gt;can be used to ensure one script injects before another&lt;/li&gt; 
   &lt;li&gt;ONLY accepts integers (floats, strings and everything else will be ignored)&lt;/li&gt; 
   &lt;li&gt;min value = 1, max value = 999, higher numbers (“heavier”) execute earlier&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@require&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;allows users to include remote resources in their scripts&lt;/li&gt; 
   &lt;li&gt;the value must be a valid url, currently no local file support&lt;/li&gt; 
   &lt;li&gt;must require a resource of the same file type (JS for JS, CSS for CSS)&lt;/li&gt; 
   &lt;li&gt;when a resource is required, it is downloaded and saved locally&lt;/li&gt; 
   &lt;li&gt;the resources is downloaded once at save and never checked for updates or parsed in anyway 
    &lt;ul&gt; 
     &lt;li&gt;if you want to update the require resources, and the url does not change, you must remove the resources, save, then re-input it&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;require remote resources at your own risk, the extension never validates remote resource code in any way and be aware that using remote resources from untrusted sources can jeopardize your personal security&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@version&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;used to determine the current version of a userscript&lt;/li&gt; 
   &lt;li&gt;when paired with &lt;code&gt;@updateURL&lt;/code&gt;, this will allow the user to update a userscript from a remote source, if the version on their machine is &lt;code&gt;&amp;lt;&lt;/code&gt; version at the update URL&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;@version&lt;/code&gt; does nothing by itself, it needs to be paired with&lt;code&gt; @updateURL&lt;/code&gt; for remote updating to function properly&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@updateURL&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;the remote url to check version against, the url &lt;code&gt;/PATH&lt;/code&gt; should end with &lt;code&gt;.meta.js&lt;/code&gt; and contains the Metadata block&lt;/li&gt; 
   &lt;li&gt;if the version of the file located at the update URL is &lt;code&gt;&amp;gt;&lt;/code&gt; the version on the local machine, the file will be updated&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;@updateURL&lt;/code&gt; does nothing by itself, it needs to be paired with &lt;code&gt;@version&lt;/code&gt; for remote updating to function properly&lt;/li&gt; 
   &lt;li&gt;Read this &lt;a href=&quot;https://stackoverflow.com/questions/38023717/&quot;&gt;link&lt;/a&gt; for more details&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;Note: The extension does not correctly implement the entire update process, tracking in issue &lt;a href=&quot;https://github.com/quoid/userscripts/issues/248&quot;&gt;#248&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@downloadURL&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;the url &lt;code&gt;/PATH&lt;/code&gt; should end with &lt;code&gt;.user.js&lt;/code&gt;, that is, it cannot be in &lt;code&gt;?QUERY&lt;/code&gt; or &lt;code&gt;#HASH&lt;/code&gt; parts&lt;/li&gt; 
   &lt;li&gt;optional download location for a remotely updateable file (*i.e. a file that has both &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;when paired with &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt;, if the local version is &lt;code&gt;&amp;lt;&lt;/code&gt; the version of the file that &lt;code&gt;@updateURL&lt;/code&gt; points to, the extension will attempt to update the file&#39;s code with the contents of the file located at the &lt;code&gt;@downloadURL&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;@downloadURL&lt;/code&gt; does nothing by itself, it needs &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt; to present in order to function properly&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@noframes&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;this key takes no value&lt;/li&gt; 
   &lt;li&gt;prevents code from being injected into nested frames&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@grant&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Imperative controls which special &lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/#api&quot;&gt;&lt;code&gt;APIs&lt;/code&gt;&lt;/a&gt; (if any) your script uses, one on each &lt;code&gt;@grant&lt;/code&gt; line, only those API methods will be provided.&lt;/li&gt; 
   &lt;li&gt;If no &lt;code&gt;@grant&lt;/code&gt; values are provided, &lt;code&gt;none&lt;/code&gt; will be assumed.&lt;/li&gt; 
   &lt;li&gt;If you specify &lt;code&gt;none&lt;/code&gt; and something else, &lt;code&gt;none&lt;/code&gt; takes precedence.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;All userscripts need at least 1 &lt;code&gt;@match&lt;/code&gt; or &lt;code&gt;@include&lt;/code&gt; to run!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;Userscripts currently supports the following api methods. All methods are asynchronous unless otherwise noted. Users must &lt;code&gt;@grant&lt;/code&gt; these methods in order to use them in a userscript. When using API methods, it&#39;s only possible to inject into the content script scope due to security concerns.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The following API description applies to the latest development branch, you may need to check the documentation for the corresponding version. Please switch to the version you want to check via &lt;code&gt;Branches&lt;/code&gt; or &lt;code&gt;Tags&lt;/code&gt; at the top. For example:&lt;/p&gt; 
 &lt;p&gt;For the current version of the App Store: &lt;a href=&quot;https://github.com/quoid/userscripts/tree/release/4.x.x#api&quot;&gt;https://github.com/quoid/userscripts/tree/release/4.x.x#api&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;For the v4.5.x and earlier versions: &lt;a href=&quot;https://github.com/quoid/userscripts/tree/v4.5.4#api&quot;&gt;https://github.com/quoid/userscripts/tree/v4.5.4#api&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For API type definitions, please refer to: &lt;a href=&quot;https://github.com/userscriptsup/testscripts/raw/f2fcde4b556fa436fe806a44a89afb9eb5dccd0b/userscripts/types.d.ts&quot;&gt;&lt;code&gt;types.d.ts&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GM.addStyle(css)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;css: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.setValue(key, value)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;value: Any&lt;/code&gt; - any can be JSON-serialized&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.getValue(key, defaultValue)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;defaultValue: Any&lt;/code&gt; - optional&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved with the &lt;code&gt;value&lt;/code&gt; that was set or &lt;code&gt;defaultValue&lt;/code&gt; provided or &lt;code&gt;undefined&lt;/code&gt; if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.deleteValue(key)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.listValues()&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved with an array of the key names of &lt;strong&gt;presently set&lt;/strong&gt; values if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.getTab()&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved with &lt;code&gt;Any&lt;/code&gt; data that is persistent as long as this tab is open if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.saveTab(tabObj)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;tabObj: Any&lt;/code&gt; - any can be JSON-serialized&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.openInTab(url, openInBackground)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;url: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;openInBackground: Bool&lt;/code&gt; - optional, &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/Tab&quot;&gt;tab data&lt;/a&gt; for the tab just opened if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.closeTab(tabId)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;tabId: Int&lt;/code&gt; - optional, the &lt;code&gt;caller tab&lt;/code&gt; by default&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved if succeeds, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.setClipboard(data, type)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;data: String&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;type: String&lt;/code&gt; - optional, &lt;code&gt;text/plain&lt;/code&gt; by default&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData&quot;&gt;read more here&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;, resolved with a &lt;code&gt;Bool&lt;/code&gt; value indicating succeeds or fails, rejected with error message if fails&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.info&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;GM_info&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;is available without needing to add it to &lt;code&gt;@grant&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;an object containing information about the running userscript 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;scriptHandler: String&lt;/code&gt; - returns &lt;code&gt;Userscripts&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;version: String&lt;/code&gt; - the version of Userscripts app&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;scriptMetaStr: String&lt;/code&gt; - the metablock for the currently running script&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;script: Object&lt;/code&gt; - contains data about the currently running script 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;description: String&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;exclude-match: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;excludes: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;grant: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;includes: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;inject-into: String&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;matches: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;name: String&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;namespace: String&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;noframes: Bool&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;require: [String]&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;resources: [String]&lt;/code&gt; - &lt;em&gt;currently not implemented&lt;/em&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;run-at: String&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;version: String&lt;/code&gt; - &lt;em&gt;the userscript version value&lt;/em&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM.xmlHttpRequest(details)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;details: Object&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;the &lt;code&gt;details&lt;/code&gt; object accepts the following properties 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;url: String&lt;/code&gt; - required&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;method: String&lt;/code&gt; - optional, &lt;code&gt;GET&lt;/code&gt; by default&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;user: String&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;password: String&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;headers: Object&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;overrideMimeType: String&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;timeout: Int&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;binary: Bool&lt;/code&gt; - optional (Deprecated, use binary data objects such as &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;ArrayBuffer&lt;/code&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, etc. instead.)&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;data: String | Blob | ArrayBuffer | TypedArray | DataView | FormData | URLSearchParams&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;responseType: String&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;refer to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequests&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;upload event handlers: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;upload: Object&lt;/code&gt; - optional 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;onabort: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;onerror: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;onload: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;onloadend: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;onloadstart: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;onprogress: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;ontimeout: Function&lt;/code&gt; - optional&lt;/li&gt; 
       &lt;li&gt;the progress object passed to the event handlers has the following properties: 
        &lt;ul&gt; 
         &lt;li&gt;&lt;code&gt;lengthComputable&lt;/code&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;code&gt;loaded&lt;/code&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;code&gt;total&lt;/code&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;event handlers: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;onabort: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onerror: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onload: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onloadend: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onloadstart: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onprogress: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;onreadystatechange: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;ontimeout: Function&lt;/code&gt; - optional&lt;/li&gt; 
     &lt;li&gt;the response object passed to the event handlers has the following properties: 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;readyState&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;response&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;responseURL&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;statusText&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;responseText&lt;/code&gt; (when &lt;code&gt;responseType&lt;/code&gt; is &lt;code&gt;text&lt;/code&gt;)&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;returns a custom &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; contains an additional property &lt;code&gt;abort&lt;/code&gt;, resolved with the response object. 
    &lt;ul&gt; 
     &lt;li&gt;usage: 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;const xhr = GM.xmlHttpRequest({...});&lt;/code&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;xhr.abort();&lt;/code&gt; to abort the request&lt;/li&gt; 
       &lt;li&gt;&lt;code&gt;const response = await xhr;&lt;/code&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;or just: 
      &lt;ul&gt; 
       &lt;li&gt;&lt;code&gt;const response = await GM.xmlHttpRequest({...});&lt;/code&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GM_xmlhttpRequest(details)&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Basically the same as &lt;code&gt;GM.xmlHttpRequest(details)&lt;/code&gt;, except:&lt;/li&gt; 
   &lt;li&gt;returns an object with a single property, &lt;code&gt;abort&lt;/code&gt;, which is a &lt;code&gt;Function&lt;/code&gt; 
    &lt;ul&gt; 
     &lt;li&gt;usage: &lt;code&gt;const foo = GM.xmlHttpRequest({...});&lt;/code&gt; ... &lt;code&gt;foo.abort();&lt;/code&gt; to abort the request&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Scripts Directory&lt;/h2&gt; 
&lt;p&gt;This is the directory where the app/extension will read from and write to. This directory is changed by opening the &lt;strong&gt;containing app&lt;/strong&gt; and clicking the respective &quot;change location&quot; button.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Script Directory Notes&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Close all instances of the extension UI (browser app and/or popup) before changing the scripts directory&lt;/li&gt; 
 &lt;li&gt;After files are added, removed or edited, you will need to open the popup at least 1 time to see those changes reflected in your browsing experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On macOS&lt;/strong&gt;, after a directory outside of the default is selected, if you rename or move that selected directory, the extension will continue to read/write to that directory - the only way to remove the “link” is by trashing the folder or selecting a new save location&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you encounter a problem while using this app/extension or are in need of some assistance, please open an issue here in the repository. When doing so, please provide as much detail as possible. This includes listing system specs and what website and script you are trying to execute. &lt;em&gt;Please follow the issue template!&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&quot;Refused to execute a script&quot; error(s), what should I do!?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You are seeing this error because of the website&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Content Security Policy&lt;/a&gt;. Currently there is no way to allow extension content scripts to bypass CSPs in Safari.&lt;/p&gt; 
 &lt;p&gt;Automatically, the extension will attempt to circumvent strict CSPs, but if you are still experiencing issues, trying setting the userscript metadata key/val &lt;code&gt;// @inject-into auto&lt;/code&gt; or &lt;code&gt;// @inject-into content&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;You can read more about this in &lt;a href=&quot;https://github.com/quoid/userscripts/issues/106#issuecomment-797320450&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do I need to use the extension&#39;s editor to create new userscripts or to edit existing?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You can use your own editor to update and manage your files. As long as you are saving the files to the save location, and they are properly formatted, they should be injected. However, you &lt;strong&gt;must open the extension popup&lt;/strong&gt; beforehand. That means, if you create a new or edit an existing userscript with an external editor and save it to the save location, before injection will occur properly, the extension popup must be opened and the popup must load completely.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What are the keyboard shortcuts?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Whilst using the included editor, clicking &lt;code&gt;⌘ + s&lt;/code&gt; will save the file. While working the editor, clicking &lt;code&gt;⌘ + f&lt;/code&gt; will bring up the search bar and &lt;code&gt;esc&lt;/code&gt; will hide it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;When I use &lt;code&gt;@require&lt;/code&gt;, where are the required files stored?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;All required files are saved &lt;em&gt;as Javascript files&lt;/em&gt; in the extension container folder in macOS 11.x. That folder is located in the default save location, at: &lt;code&gt;~/Library/Containers/Userscripts/Data/Documents/require/&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If you move files from the require folder or manually edit the &lt;code&gt;manifest.json&lt;/code&gt; file, you will likely break app/extension functionality.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Code level contributions please refer to &lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/docs/contributing.md&quot;&gt;contributing.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Further, any issue marked &quot;help wanted&quot; is actively seeking assistance. Please respond to those issues with feedback, guidance or offers of coding assistance.&lt;/p&gt; 
&lt;p&gt;Participating and interacting with any existing &lt;a href=&quot;https://github.com/quoid/userscripts/issues&quot;&gt;&lt;code&gt;Issues&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/quoid/userscripts/discussions&quot;&gt;&lt;code&gt;Discussions&lt;/code&gt;&lt;/a&gt; would be a great help to the project and open source communities. Thank you for your contributions.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;The quickest and easiest way to support the project is by &lt;a href=&quot;https://apps.apple.com/us/app/userscripts/id1463298887&quot;&gt;leaving a positive review on the App Store&lt;/a&gt; if you enjoy the extension and want to see future improvements. Seeing these reviews let me know I am doing something right, or wrong, and motivates me to continue working on the project.&lt;/p&gt; 
&lt;p&gt;The second best way to help out is to sign up to beta test new versions of the app. Since this extension values your privacy, and &lt;strong&gt;does not collect any data from users&lt;/strong&gt;, it is difficult to gauge how the extension is being used. By signing up to be a beta tester it not only allows you to test upcoming features, but also gives me the opportunity to elicit direct feedback from real users.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please join and test the corresponding beta version in &lt;a href=&quot;https://github.com/quoid/userscripts/releases&quot;&gt;releases&lt;/a&gt; via the TestFlight public link.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Privacy Policy&lt;/h2&gt; 
&lt;p&gt;Userscripts does not collect any data from its users nor monitor activities or actions you perform within the application and extension. This means everything that you do with the application and extension is private to you and is never shared with the developers or third parties. Since there is no data collection, there is no data retention of any kind.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2018-2025 Justin Wasack&lt;/p&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/quoid/userscripts/main/LICENSE&quot;&gt;GNU General Public License v3.0&lt;/a&gt; license for all open source applications. A commercial license is required for all other applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iina/iina</title>
      <link>https://github.com/iina/iina</link>
      <description>&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;256&quot; src=&quot;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&quot; /&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;IINA&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://iina.io/&quot;&gt;Website&lt;/a&gt; · &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;Releases&lt;/a&gt; · &lt;a href=&quot;https://t.me/IINAUsers&quot;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://crowdin.com/project/iina&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/iina/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on &lt;a href=&quot;https://github.com/mpv-player/mpv&quot;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; 
 &lt;li&gt;Designed with modern versions of macOS (10.15+) in mind&lt;/li&gt; 
 &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters…and much, much more!&lt;/li&gt; 
 &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; 
 &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; 
 &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; 
 &lt;li&gt;Video thumbnails&lt;/li&gt; 
 &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; 
 &lt;li&gt;Unlimited playback history&lt;/li&gt; 
 &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; 
 &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; 
 &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; 
 &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; 
 &lt;li&gt;In active development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloading&lt;/h2&gt; 
&lt;p&gt;You can get IINA through several sources. For the latest stable and beta releases, visit the &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;GitHub release page&lt;/a&gt; or the &lt;a href=&quot;https://iina.io/&quot;&gt;IINA official website&lt;/a&gt;. If you want to try out the latest features and improvements before they are officially released, you can download the nightly builds from our &lt;a href=&quot;https://iina.io/nightly/&quot;&gt;Nightly Download Page&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Nightly builds are generated by GitHub automatically for every commits, which might be buggy and unusable. If you find a bug, please follow the &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#Contributing&quot;&gt;contributing section&lt;/a&gt; and file an issue.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&quot;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;./other/download_libs.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Change the URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/filelist.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;If you want to build an older IINA version, make sure to download the corresponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/filelist.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Building mpv manually&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;brew tap iina/homebrew-mpv-iina
brew install mpv-iina
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port install mpv +uchardet -bundle -rubberband configure.args=&quot;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Copy the corresponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&quot;https://github.com/mpv-player/mpv/tree/master/libmpv&quot;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;other/change_lib_dependencies.rb &quot;$(brew --prefix)&quot; &quot;$(brew --prefix mpv-iina)/lib/libmpv.dylib&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open &lt;code&gt;iina.xcodeproj&lt;/code&gt; in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Remove all references to &lt;code&gt;.dylib&lt;/code&gt; files from the Frameworks group in the sidebar and add all the &lt;code&gt;.dylib&lt;/code&gt; files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &quot;Add Files to iina...&quot; in the context menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add all the imported &lt;code&gt;.dylib&lt;/code&gt; files into the &quot;Copy Dylibs&quot; phase under &quot;Build Phases&quot; tab of the iina target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the necessary &lt;code&gt;.dylib&lt;/code&gt; files are present in the &quot;Link Binary With Libraries&quot; phase under &quot;Build Phases&quot;. Xcode should have already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&quot;https://github.com/iina/iina/issues&quot;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&quot;https://github.com/iina/iina/issues/new/choose&quot;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; — it has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&quot;https://translate.iina.io/&quot;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating. Please do not send a pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not on the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>facebook/facebook-ios-sdk</title>
      <link>https://github.com/facebook/facebook-ios-sdk</link>
      <description>&lt;p&gt;Used to integrate the Facebook Platform with your iOS &amp; tvOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Facebook SDK for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/FBSDKCoreKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/FBSDKCoreKit.svg?sanitize=true&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main.svg?style=shield&quot; alt=&quot;circleci&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/FBSDKCoreKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/FBSDKCoreKit.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This open-source library allows you to integrate Facebook into your iOS app.&lt;/p&gt; 
&lt;p&gt;Learn more about the provided samples, documentation, integrating the SDK into your app, accessing source code, and more at &lt;a href=&quot;https://developers.facebook.com/docs/ios&quot;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please take a moment and &lt;a href=&quot;https://docs.github.com/en/enterprise/2.15/user/articles/watching-and-unwatching-repositories&quot;&gt;subscribe to releases&lt;/a&gt; so that you can be notified about new features, deprecations, and critical fixes. To see information about the latest release, consult our &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;span&gt;⚠&lt;/span&gt; Be Advised &lt;span&gt;⚠&lt;/span&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;p&gt;We have begun rewriting the iOS SDK in Swift in order to modernize the code base.&lt;/p&gt;&lt;p&gt;Please monitor the changelog for updates to existing interfaces but keep in mind that some interfaces will be unstable during this process. As such, updating to a minor version may introduce compilation issues related to language interoperability. Using symbols now defined in Swift may require using &lt;code&gt;@import&lt;/code&gt; syntax from Objective-C and using C++ will likely require workarounds like creating wrappers in Objective-C.&lt;/p&gt;Please bear with us as we work towards providing an improved experience for integrating with the Facebook platform.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;TRY IT OUT&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Xcode, select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency.&lt;/li&gt; 
 &lt;li&gt;Follow the prompts using the URL for this repository&lt;/li&gt; 
 &lt;li&gt;Select the &lt;code&gt;Facebook&lt;/code&gt;-prefixed libraries you want to use&lt;/li&gt; 
 &lt;li&gt;Check-out the tutorials available online at: &lt;a href=&quot;https://developers.facebook.com/docs/ios/getting-started&quot;&gt;https://developers.facebook.com/docs/ios/getting-started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Start coding! Visit &lt;a href=&quot;https://developers.facebook.com/docs/ios&quot;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt; for tutorials and reference documentation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;iOS 14 CHANGES&lt;/h2&gt; 
&lt;h3&gt;Data Disclosure&lt;/h3&gt; 
&lt;p&gt;Due to the release of iOS 14, tracking events that your app collects and sends to Facebook may require you to disclosed these data types in the App Store Connect questionnaire. It is your responsibility to ensure this is reflected in your application’s privacy policy. Visit our blogpost for information on affected Facebook SDKs, APIs, and products and the Apple App Store Privacy Details article to learn more about the data types you will need to disclose.&lt;/p&gt; 
&lt;p&gt;link to FB blogpost &lt;a href=&quot;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&quot;&gt;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;apple store details &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;https://developer.apple.com/app-store/app-privacy-details/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FEATURES&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Login - &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login&quot;&gt;https://developers.facebook.com/docs/facebook-login&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sharing - &lt;a href=&quot;https://developers.facebook.com/docs/sharing&quot;&gt;https://developers.facebook.com/docs/sharing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;App Links - &lt;a href=&quot;https://developers.facebook.com/docs/applinks&quot;&gt;https://developers.facebook.com/docs/applinks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Graph API - &lt;a href=&quot;https://developers.facebook.com/docs/ios/graph&quot;&gt;https://developers.facebook.com/docs/ios/graph&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Analytics - &lt;a href=&quot;https://developers.facebook.com/docs/analytics&quot;&gt;https://developers.facebook.com/docs/analytics&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;GIVE FEEDBACK&lt;/h2&gt; 
&lt;p&gt;Please report bugs or issues to our designated developer support team -- &lt;a href=&quot;https://developers.facebook.com/support/bugs/&quot;&gt;https://developers.facebook.com/support/bugs/&lt;/a&gt; -- as this will help us resolve them more quickly.&lt;/p&gt; 
&lt;p&gt;You can also visit our &lt;a href=&quot;https://developers.facebook.com/community/&quot;&gt;Facebook Developer Community Forum&lt;/a&gt;, join the &lt;a href=&quot;https://www.facebook.com/groups/fbdevelopers/&quot;&gt;Facebook Developers Group on Facebook&lt;/a&gt;, ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/facebook-ios-sdk&quot;&gt;Stack Overflow&lt;/a&gt;, or open an issue in this repository.&lt;/p&gt; 
&lt;h2&gt;CONTRIBUTE&lt;/h2&gt; 
&lt;p&gt;Facebook welcomes contributions to our SDKs. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Copyright © Meta Platforms, Inc&lt;/p&gt; 
&lt;h2&gt;SECURITY POLICY&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/SECURITY.md&quot;&gt;SECURITY POLICY&lt;/a&gt; for more info on our bug bounty program.&lt;/p&gt; 
&lt;h2&gt;DEVELOPER TERMS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;By enabling Facebook integrations, including through this SDK, you can share information with Facebook, including information about people’s use of your app. Facebook will use information received in accordance with our &lt;a href=&quot;https://www.facebook.com/about/privacy/&quot;&gt;Data Use Policy&lt;/a&gt;, including to provide you with insights about the effectiveness of your ads and the use of your app. These integrations also enable us and our partners to serve ads on and off Facebook.&lt;/li&gt; 
 &lt;li&gt;You may limit your sharing of information with us by updating the Insights control in the developer tool &lt;code&gt;https://developers.facebook.com/apps/{app_id}/settings/advanced&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you use a Facebook integration, including to share information with us, you agree and confirm that you have provided appropriate and sufficiently prominent notice to and obtained the appropriate consent from your users regarding such collection, use, and disclosure (including, at a minimum, through your privacy policy). You further agree that you will not share information with us about children under the age of 13.&lt;/li&gt; 
 &lt;li&gt;You agree to comply with all applicable laws and regulations and also agree to our Terms &lt;a href=&quot;https://www.facebook.com/policies/&quot;&gt;https://www.facebook.com/policies/&lt;/a&gt;, including our Platform Policies &lt;a href=&quot;https://developers.facebook.com/policy/&quot;&gt;https://developers.facebook.com/policy/&lt;/a&gt; and Advertising Guidelines, as applicable &lt;a href=&quot;https://www.facebook.com/ad_guidelines.php&quot;&gt;https://www.facebook.com/ad_guidelines.php&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By using the Facebook SDK for iOS you agree to these terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/CopilotForXcode</title>
      <link>https://github.com/github/CopilotForXcode</link>
      <description>&lt;p&gt;Xcode extension for GitHub Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;center&quot; height=&quot;70&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/AppIcon.png&quot; /&gt; GitHub Copilot for Xcode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; is an AI pair programmer tool that helps you write code faster and smarter. Copilot for Xcode is an Xcode extension that provides inline coding suggestions as you type and a chat assistant to answer your coding questions.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Chat provides suggestions to your specific coding tasks via chat. &lt;img alt=&quot;Chat of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/chat_dark.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Agent Mode&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Agent Mode provides AI-powered assistance that can understand and modify your codebase directly. With Agent Mode, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get intelligent code edits applied directly to your files&lt;/li&gt; 
 &lt;li&gt;Run terminal commands and view their output without leaving the interface&lt;/li&gt; 
 &lt;li&gt;Search through your codebase to find relevant files and code snippets&lt;/li&gt; 
 &lt;li&gt;Create new files and directories as needed for your project&lt;/li&gt; 
 &lt;li&gt;Get assistance with enhanced context awareness across multiple files and folders&lt;/li&gt; 
 &lt;li&gt;Run Model Context Protocol (MCP) tools you configured to extend the capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Agent Mode integrates with Xcode&#39;s environment, creating a seamless development experience where Copilot can help implement features, fix bugs, and refactor code with comprehensive understanding of your project.&lt;/p&gt; 
&lt;h2&gt;Code Completion&lt;/h2&gt; 
&lt;p&gt;You can receive auto-complete type suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do. &lt;img alt=&quot;Code Completion of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/demo.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12+&lt;/li&gt; 
 &lt;li&gt;Xcode 8+&lt;/li&gt; 
 &lt;li&gt;A GitHub Copilot subscription. To learn more, visit &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;https://github.com/features/copilot&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask github-copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or download the &lt;code&gt;dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/github/CopilotForXcode/releases/latest/download/GitHubCopilotForXcode.dmg&quot;&gt;the latest release&lt;/a&gt;. Drag &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; into the &lt;code&gt;Applications&lt;/code&gt; folder:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of opened dmg&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/dmg-open.png&quot; width=&quot;512&quot; /&gt; &lt;/p&gt; &lt;p&gt;Updates can be downloaded and installed by the app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application (from the &lt;code&gt;Applications&lt;/code&gt; folder). Accept the security warning.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of MacOS download permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/macos-download-open-confirm.png&quot; width=&quot;350&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A background item will be added to enable the GitHub Copilot for Xcode extension app to connect to the host app. This permission is usually automatically added when first launching the app.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of background item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/background-item.png&quot; width=&quot;370&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Three permissions are required for GitHub Copilot for Xcode to function properly: &lt;code&gt;Background&lt;/code&gt;, &lt;code&gt;Accessibility&lt;/code&gt;, and &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt;. For more details on why these permissions are required see &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/TROUBLESHOOTING.md&quot;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The first time the application is run the &lt;code&gt;Accessibility&lt;/code&gt; permission should be requested:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of accessibility permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/accessibility-permission-request.png&quot; width=&quot;529&quot; /&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt; permission needs to be enabled manually. Click &lt;code&gt;Extension Permission&lt;/code&gt; from the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application settings to open the System Preferences to the &lt;code&gt;Extensions&lt;/code&gt; panel. Select &lt;code&gt;Xcode Source Editor&lt;/code&gt; and enable &lt;code&gt;GitHub Copilot&lt;/code&gt;:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of extension permission&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/extension-permission.png&quot; width=&quot;582&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After granting the extension permission, open Xcode. Verify that the &lt;code&gt;Github Copilot&lt;/code&gt; menu is available and enabled under the Xcode &lt;code&gt;Editor&lt;/code&gt; menu. &lt;br /&gt;&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; &lt;p&gt;Keyboard shortcuts can be set for all menu items in the &lt;code&gt;Key Bindings&lt;/code&gt; section of Xcode preferences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To sign into GitHub Copilot, click the &lt;code&gt;Sign in&lt;/code&gt; button in the settings application. This will open a browser window and copy a code to the clipboard. Paste the code into the GitHub login page and authorize the application.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of sign-in popup&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/device-code.png&quot; width=&quot;372&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install updates, click &lt;code&gt;Check for Updates&lt;/code&gt; from the menu item or in the settings application.&lt;/p&gt; &lt;p&gt;After installing a new version, Xcode must be restarted to use the new version correctly.&lt;/p&gt; &lt;p&gt;New versions can also be installed from &lt;code&gt;dmg&lt;/code&gt; files downloaded from the releases page. When installing a new version via &lt;code&gt;dmg&lt;/code&gt;, the application must be run manually the first time to accept the downloaded from the internet warning.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To avoid confusion, we recommend disabling &lt;code&gt;Predictive code completion&lt;/code&gt; under &lt;code&gt;Xcode&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Text Editing&lt;/code&gt; &amp;gt; &lt;code&gt;Editing&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to use Chat&lt;/h2&gt; 
&lt;p&gt;Open Copilot Chat in GitHub Copilot.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via the Xcode menu &lt;code&gt;Xcode -&amp;gt; Editor -&amp;gt; GitHub Copilot -&amp;gt; Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu_dark.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via GitHub Copilot app menu &lt;code&gt;Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/copilot-menu_dark.png&quot; width=&quot;244&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;How to use Code Completion&lt;/h2&gt; 
&lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for the full terms.&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;We follow responsible practices in accordance with our &lt;a href=&quot;https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get the latest security fixes, please use the latest version of the GitHub Copilot for Xcode.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;We’d love to get your help in making GitHub Copilot better! If you have feedback or encounter any problems, please reach out on our &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Feedback forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thank you to @intitni for creating the original project that this is based on.&lt;/p&gt; 
&lt;p&gt;Attributions can be found under About when running the app or in &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Copilot%20for%20Xcode/Credits.rtf&quot;&gt;Credits.rtf&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/swift-sdk</title>
      <link>https://github.com/modelcontextprotocol/swift-sdk</link>
      <description>&lt;p&gt;The official Swift SDK for Model Context Protocol servers and clients.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Swift SDK&lt;/h1&gt; 
&lt;p&gt;Official Swift SDK for the &lt;a href=&quot;https://modelcontextprotocol.io&quot;&gt;Model Context Protocol&lt;/a&gt; (MCP).&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The Model Context Protocol (MCP) defines a standardized way for applications to communicate with AI and ML models. This Swift SDK implements both client and server components according to the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26&quot;&gt;2025-03-26&lt;/a&gt; (latest) version of the MCP specification.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift 6.0+ (Xcode 16+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/swift-sdk/main/#platform-availability&quot;&gt;Platform Availability&lt;/a&gt; section below for platform-specific requirements.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/modelcontextprotocol/swift-sdk.git&quot;, from: &quot;0.10.0&quot;)
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add the dependency to your target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(
    name: &quot;YourTarget&quot;,
    dependencies: [
        .product(name: &quot;MCP&quot;, package: &quot;swift-sdk&quot;)
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Client Usage&lt;/h2&gt; 
&lt;p&gt;The client component allows your application to connect to MCP servers.&lt;/p&gt; 
&lt;h3&gt;Basic Client Setup&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import MCP

// Initialize the client
let client = Client(name: &quot;MyApp&quot;, version: &quot;1.0.0&quot;)

// Create a transport and connect
let transport = StdioTransport()
let result = try await client.connect(transport: transport)

// Check server capabilities
if result.capabilities.tools != nil {
    // Server supports tools (implicitly including tool calling if the &#39;tools&#39; capability object is present)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;Client.connect(transport:)&lt;/code&gt; method returns the initialization result. This return value is discardable, so you can ignore it if you don&#39;t need to check server capabilities.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Transport Options for Clients&lt;/h3&gt; 
&lt;h4&gt;Stdio Transport&lt;/h4&gt; 
&lt;p&gt;For local subprocess communication:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Create a stdio transport (simplest option)
let transport = StdioTransport()
try await client.connect(transport: transport)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;HTTP Transport&lt;/h4&gt; 
&lt;p&gt;For remote server communication:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Create a streaming HTTP transport
let transport = HTTPClientTransport(
    endpoint: URL(string: &quot;http://localhost:8080&quot;)!,
    streaming: true  // Enable Server-Sent Events for real-time updates
)
try await client.connect(transport: transport)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;Tools represent functions that can be called by the client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// List available tools
let (tools, cursor) = try await client.listTools()
print(&quot;Available tools: \(tools.map { $0.name }.joined(separator: &quot;, &quot;))&quot;)

// Call a tool with arguments
let (content, isError) = try await client.callTool(
    name: &quot;image-generator&quot;,
    arguments: [
        &quot;prompt&quot;: &quot;A serene mountain landscape at sunset&quot;,
        &quot;style&quot;: &quot;photorealistic&quot;,
        &quot;width&quot;: 1024,
        &quot;height&quot;: 768
    ]
)

// Handle tool content
for item in content {
    switch item {
    case .text(let text):
        print(&quot;Generated text: \(text)&quot;)
    case .image(let data, let mimeType, let metadata):
        if let width = metadata?[&quot;width&quot;] as? Int,
           let height = metadata?[&quot;height&quot;] as? Int {
            print(&quot;Generated \(width)x\(height) image of type \(mimeType)&quot;)
            // Save or display the image data
        }
    case .audio(let data, let mimeType):
        print(&quot;Received audio data of type \(mimeType)&quot;)
    case .resource(let uri, let mimeType, let text):
        print(&quot;Received resource from \(uri) of type \(mimeType)&quot;)
        if let text = text {
            print(&quot;Resource text: \(text)&quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;p&gt;Resources represent data that can be accessed and potentially subscribed to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// List available resources
let (resources, nextCursor) = try await client.listResources()
print(&quot;Available resources: \(resources.map { $0.uri }.joined(separator: &quot;, &quot;))&quot;)

// Read a resource
let contents = try await client.readResource(uri: &quot;resource://example&quot;)
print(&quot;Resource content: \(contents)&quot;)

// Subscribe to resource updates if supported
if result.capabilities.resources.subscribe {
    try await client.subscribeToResource(uri: &quot;resource://example&quot;)

    // Register notification handler
    await client.onNotification(ResourceUpdatedNotification.self) { message in
        let uri = message.params.uri
        print(&quot;Resource \(uri) updated with new content&quot;)

        // Fetch the updated resource content
        let updatedContents = try await client.readResource(uri: uri)
        print(&quot;Updated resource content received&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prompts&lt;/h3&gt; 
&lt;p&gt;Prompts represent templated conversation starters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// List available prompts
let (prompts, nextCursor) = try await client.listPrompts()
print(&quot;Available prompts: \(prompts.map { $0.name }.joined(separator: &quot;, &quot;))&quot;)

// Get a prompt with arguments
let (description, messages) = try await client.getPrompt(
    name: &quot;customer-service&quot;,
    arguments: [
        &quot;customerName&quot;: &quot;Alice&quot;,
        &quot;orderNumber&quot;: &quot;ORD-12345&quot;,
        &quot;issue&quot;: &quot;delivery delay&quot;
    ]
)

// Use the prompt messages in your application
print(&quot;Prompt description: \(description)&quot;)
for message in messages {
    if case .text(text: let text) = message.content {
        print(&quot;\(message.role): \(text)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sampling&lt;/h3&gt; 
&lt;p&gt;Sampling allows servers to request LLM completions through the client, enabling agentic behaviors while maintaining human-in-the-loop control. Clients register a handler to process incoming sampling requests from servers.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Sampling requests flow from &lt;strong&gt;server to client&lt;/strong&gt;, not client to server. This enables servers to request AI assistance while clients maintain control over model access and user approval.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Register a sampling handler in the client
await client.withSamplingHandler { parameters in
    // Review the sampling request (human-in-the-loop step 1)
    print(&quot;Server requests completion for: \(parameters.messages)&quot;)
    
    // Optionally modify the request based on user input
    var messages = parameters.messages
    if let systemPrompt = parameters.systemPrompt {
        print(&quot;System prompt: \(systemPrompt)&quot;)
    }
    
    // Sample from your LLM (this is where you&#39;d call your AI service)
    let completion = try await callYourLLMService(
        messages: messages,
        maxTokens: parameters.maxTokens,
        temperature: parameters.temperature
    )
    
    // Review the completion (human-in-the-loop step 2)
    print(&quot;LLM generated: \(completion)&quot;)
    // User can approve, modify, or reject the completion here
    
    // Return the result to the server
    return CreateSamplingMessage.Result(
        model: &quot;your-model-name&quot;,
        stopReason: .endTurn,
        role: .assistant,
        content: .text(completion)
    )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The sampling flow follows these steps:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant S as MCP Server
    participant C as MCP Client
    participant U as User/Human
    participant L as LLM Service

    Note over S,L: Server-initiated sampling request
    S-&amp;gt;&amp;gt;C: sampling/createMessage request
    Note right of S: Server needs AI assistance&amp;lt;br/&amp;gt;for decision or content

    Note over C,U: Human-in-the-loop review #1
    C-&amp;gt;&amp;gt;U: Show sampling request
    U-&amp;gt;&amp;gt;U: Review &amp;amp; optionally modify&amp;lt;br/&amp;gt;messages, system prompt
    U-&amp;gt;&amp;gt;C: Approve request

    Note over C,L: Client handles LLM interaction
    C-&amp;gt;&amp;gt;L: Send messages to LLM
    L-&amp;gt;&amp;gt;C: Return completion

    Note over C,U: Human-in-the-loop review #2
    C-&amp;gt;&amp;gt;U: Show LLM completion
    U-&amp;gt;&amp;gt;U: Review &amp;amp; optionally modify&amp;lt;br/&amp;gt;or reject completion
    U-&amp;gt;&amp;gt;C: Approve completion

    Note over C,S: Return result to server
    C-&amp;gt;&amp;gt;S: sampling/createMessage response
    Note left of C: Contains model used,&amp;lt;br/&amp;gt;stop reason, final content

    Note over S: Server continues with&amp;lt;br/&amp;gt;AI-assisted result
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This human-in-the-loop design ensures that users maintain control over what the LLM sees and generates, even when servers initiate the requests.&lt;/p&gt; 
&lt;h3&gt;Error Handling&lt;/h3&gt; 
&lt;p&gt;Handle common client errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try await client.connect(transport: transport)
    // Success
} catch let error as MCPError {
    print(&quot;MCP Error: \(error.localizedDescription)&quot;)
} catch {
    print(&quot;Unexpected error: \(error)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Advanced Client Features&lt;/h3&gt; 
&lt;h4&gt;Strict vs Non-Strict Configuration&lt;/h4&gt; 
&lt;p&gt;Configure client behavior for capability checking:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Strict configuration - fail fast if a capability is missing
let strictClient = Client(
    name: &quot;StrictClient&quot;,
    version: &quot;1.0.0&quot;,
    configuration: .strict
)

// With strict configuration, calling a method for an unsupported capability
// will throw an error immediately without sending a request
do {
    // This will throw an error if resources.list capability is not available
    let resources = try await strictClient.listResources()
} catch let error as MCPError {
    print(&quot;Capability not available: \(error.localizedDescription)&quot;)
}

// Default (non-strict) configuration - attempt the request anyway
let client = Client(
    name: &quot;FlexibleClient&quot;,
    version: &quot;1.0.0&quot;,
    configuration: .default
)

// With default configuration, the client will attempt the request
// even if the capability wasn&#39;t advertised by the server
do {
    let resources = try await client.listResources()
} catch let error as MCPError {
    // Still handle the error if the server rejects the request
    print(&quot;Server rejected request: \(error.localizedDescription)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Request Batching&lt;/h4&gt; 
&lt;p&gt;Improve performance by sending multiple requests in a single batch:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Array to hold tool call tasks
var toolTasks: [Task&amp;lt;CallTool.Result, Swift.Error&amp;gt;] = []

// Send a batch of requests
try await client.withBatch { batch in
    // Add multiple tool calls to the batch
    for i in 0..&amp;lt;10 {
        toolTasks.append(
            try await batch.addRequest(
                CallTool.request(.init(name: &quot;square&quot;, arguments: [&quot;n&quot;: Value(i)]))
            )
        )
    }
}

// Process results after the batch is sent
print(&quot;Processing \(toolTasks.count) tool results...&quot;)
for (index, task) in toolTasks.enumerated() {
    do {
        let result = try await task.value
        print(&quot;\(index): \(result.content)&quot;)
    } catch {
        print(&quot;\(index) failed: \(error)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also batch different types of requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Declare task variables
var pingTask: Task&amp;lt;Ping.Result, Error&amp;gt;?
var promptTask: Task&amp;lt;GetPrompt.Result, Error&amp;gt;?

// Send a batch with different request types
try await client.withBatch { batch in
    pingTask = try await batch.addRequest(Ping.request())
    promptTask = try await batch.addRequest(
        GetPrompt.request(.init(name: &quot;greeting&quot;))
    )
}

// Process individual results
do {
    if let pingTask = pingTask {
        try await pingTask.value
        print(&quot;Ping successful&quot;)
    }

    if let promptTask = promptTask {
        let promptResult = try await promptTask.value
        print(&quot;Prompt: \(promptResult.description ?? &quot;None&quot;)&quot;)
    }
} catch {
    print(&quot;Error processing batch results: \(error)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;code&gt;Server&lt;/code&gt; automatically handles batch requests from MCP clients.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Server Usage&lt;/h2&gt; 
&lt;p&gt;The server component allows your application to host model capabilities and respond to client requests.&lt;/p&gt; 
&lt;h3&gt;Basic Server Setup&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import MCP

// Create a server with given capabilities
let server = Server(
    name: &quot;MyModelServer&quot;,
    version: &quot;1.0.0&quot;,
    capabilities: .init(
        prompts: .init(listChanged: true),
        resources: .init(subscribe: true, listChanged: true),
        tools: .init(listChanged: true)
    )
)

// Create transport and start server
let transport = StdioTransport()
try await server.start(transport: transport)

// Now register handlers for the capabilities you&#39;ve enabled
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;Register tool handlers to respond to client tool calls:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Register a tool list handler
await server.withMethodHandler(ListTools.self) { _ in
    let tools = [
        Tool(
            name: &quot;weather&quot;,
            description: &quot;Get current weather for a location&quot;,
            inputSchema: .object([
                &quot;properties&quot;: .object([
                    &quot;location&quot;: .string(&quot;City name or coordinates&quot;),
                    &quot;units&quot;: .string(&quot;Units of measurement, e.g., metric, imperial&quot;)
                ])
            ])
        ),
        Tool(
            name: &quot;calculator&quot;,
            description: &quot;Perform calculations&quot;,
            inputSchema: .object([
                &quot;properties&quot;: .object([
                    &quot;expression&quot;: .string(&quot;Mathematical expression to evaluate&quot;)
                ])
            ])
        )
    ]
    return .init(tools: tools)
}

// Register a tool call handler
await server.withMethodHandler(CallTool.self) { params in
    switch params.name {
    case &quot;weather&quot;:
        let location = params.arguments?[&quot;location&quot;]?.stringValue ?? &quot;Unknown&quot;
        let units = params.arguments?[&quot;units&quot;]?.stringValue ?? &quot;metric&quot;
        let weatherData = getWeatherData(location: location, units: units) // Your implementation
        return .init(
            content: [.text(&quot;Weather for \(location): \(weatherData.temperature)°, \(weatherData.conditions)&quot;)],
            isError: false
        )

    case &quot;calculator&quot;:
        if let expression = params.arguments?[&quot;expression&quot;]?.stringValue {
            let result = evaluateExpression(expression) // Your implementation
            return .init(content: [.text(&quot;\(result)&quot;)], isError: false)
        } else {
            return .init(content: [.text(&quot;Missing expression parameter&quot;)], isError: true)
        }

    default:
        return .init(content: [.text(&quot;Unknown tool&quot;)], isError: true)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;p&gt;Implement resource handlers for data access:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Register a resource list handler
await server.withMethodHandler(ListResources.self) { params in
    let resources = [
        Resource(
            name: &quot;Knowledge Base Articles&quot;,
            uri: &quot;resource://knowledge-base/articles&quot;,
            description: &quot;Collection of support articles and documentation&quot;
        ),
        Resource(
            name: &quot;System Status&quot;,
            uri: &quot;resource://system/status&quot;,
            description: &quot;Current system operational status&quot;
        )
    ]
    return .init(resources: resources, nextCursor: nil)
}

// Register a resource read handler
await server.withMethodHandler(ReadResource.self) { params in
    switch params.uri {
    case &quot;resource://knowledge-base/articles&quot;:
        return .init(contents: [Resource.Content.text(&quot;# Knowledge Base\n\nThis is the content of the knowledge base...&quot;, uri: params.uri)])

    case &quot;resource://system/status&quot;:
        let status = getCurrentSystemStatus() // Your implementation
        let statusJson = &quot;&quot;&quot;
            {
                &quot;status&quot;: &quot;\(status.overall)&quot;,
                &quot;components&quot;: {
                    &quot;database&quot;: &quot;\(status.database)&quot;,
                    &quot;api&quot;: &quot;\(status.api)&quot;,
                    &quot;model&quot;: &quot;\(status.model)&quot;
                },
                &quot;lastUpdated&quot;: &quot;\(status.timestamp)&quot;
            }
            &quot;&quot;&quot;
        return .init(contents: [Resource.Content.text(statusJson, uri: params.uri, mimeType: &quot;application/json&quot;)])

    default:
        throw MCPError.invalidParams(&quot;Unknown resource URI: \(params.uri)&quot;)
    }
}

// Register a resource subscribe handler
await server.withMethodHandler(ResourceSubscribe.self) { params in
    // Store subscription for later notifications.
    // Client identity for multi-client scenarios needs to be managed by the server application,
    // potentially using information from the initialize handshake if the server handles one client post-init.
    // addSubscription(clientID: /* some_client_identifier */, uri: params.uri)
    print(&quot;Client subscribed to \(params.uri). Server needs to implement logic to track this subscription.&quot;)
    return .init()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prompts&lt;/h3&gt; 
&lt;p&gt;Implement prompt handlers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Register a prompt list handler
await server.withMethodHandler(ListPrompts.self) { params in
    let prompts = [
        Prompt(
            name: &quot;interview&quot;,
            description: &quot;Job interview conversation starter&quot;,
            arguments: [
                .init(name: &quot;position&quot;, description: &quot;Job position&quot;, required: true),
                .init(name: &quot;company&quot;, description: &quot;Company name&quot;, required: true),
                .init(name: &quot;interviewee&quot;, description: &quot;Candidate name&quot;)
            ]
        ),
        Prompt(
            name: &quot;customer-support&quot;,
            description: &quot;Customer support conversation starter&quot;,
            arguments: [
                .init(name: &quot;issue&quot;, description: &quot;Customer issue&quot;, required: true),
                .init(name: &quot;product&quot;, description: &quot;Product name&quot;, required: true)
            ]
        )
    ]
    return .init(prompts: prompts, nextCursor: nil)
}

// Register a prompt get handler
await server.withMethodHandler(GetPrompt.self) { params in
    switch params.name {
    case &quot;interview&quot;:
        let position = params.arguments?[&quot;position&quot;]?.stringValue ?? &quot;Software Engineer&quot;
        let company = params.arguments?[&quot;company&quot;]?.stringValue ?? &quot;Acme Corp&quot;
        let interviewee = params.arguments?[&quot;interviewee&quot;]?.stringValue ?? &quot;Candidate&quot;

        let description = &quot;Job interview for \(position) position at \(company)&quot;
        let messages: [Prompt.Message] = [
            .user(&quot;You are an interviewer for the \(position) position at \(company).&quot;),
            .user(&quot;Hello, I&#39;m \(interviewee) and I&#39;m here for the \(position) interview.&quot;),
            .assistant(&quot;Hi \(interviewee), welcome to \(company)! I&#39;d like to start by asking about your background and experience.&quot;)
        ]

        return .init(description: description, messages: messages)

    case &quot;customer-support&quot;:
        // Similar implementation for customer support prompt

    default:
        throw MCPError.invalidParams(&quot;Unknown prompt name: \(params.name)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sampling&lt;/h3&gt; 
&lt;p&gt;Servers can request LLM completions from clients through sampling. This enables agentic behaviors where servers can ask for AI assistance while maintaining human oversight.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The current implementation provides the correct API design for sampling, but requires bidirectional communication support in the transport layer. This feature will be fully functional when bidirectional transport support is added.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Enable sampling capability in server
let server = Server(
    name: &quot;MyModelServer&quot;,
    version: &quot;1.0.0&quot;,
    capabilities: .init(
        sampling: .init(),  // Enable sampling capability
        tools: .init(listChanged: true)
    )
)

// Request sampling from the client (conceptual - requires bidirectional transport)
do {
    let result = try await server.requestSampling(
        messages: [
            .user(&quot;Analyze this data and suggest next steps&quot;)
        ],
        systemPrompt: &quot;You are a helpful data analyst&quot;,
        temperature: 0.7,
        maxTokens: 150
    )
    
    // Use the LLM completion in your server logic
    print(&quot;LLM suggested: \(result.content)&quot;)
    
} catch {
    print(&quot;Sampling request failed: \(error)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sampling enables powerful agentic workflows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Decision-making&lt;/strong&gt;: Ask the LLM to choose between options&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Content generation&lt;/strong&gt;: Request drafts for user approval&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data analysis&lt;/strong&gt;: Get AI insights on complex data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-step reasoning&lt;/strong&gt;: Chain AI completions with tool calls&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Initialize Hook&lt;/h4&gt; 
&lt;p&gt;Control client connections with an initialize hook:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Start the server with an initialize hook
try await server.start(transport: transport) { clientInfo, clientCapabilities in
    // Validate client info
    guard clientInfo.name != &quot;BlockedClient&quot; else {
        throw MCPError.invalidRequest(&quot;This client is not allowed&quot;)
    }

    // You can also inspect client capabilities
    if clientCapabilities.sampling == nil {
        print(&quot;Client does not support sampling&quot;)
    }

    // Perform any server-side setup based on client info
    print(&quot;Client \(clientInfo.name) v\(clientInfo.version) connected&quot;)

    // If the hook completes without throwing, initialization succeeds
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Graceful Shutdown&lt;/h3&gt; 
&lt;p&gt;We recommend using &lt;a href=&quot;https://github.com/swift-server/swift-service-lifecycle&quot;&gt;Swift Service Lifecycle&lt;/a&gt; for managing startup and shutdown of services.&lt;/p&gt; 
&lt;p&gt;First, add the dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/swift-server/swift-service-lifecycle.git&quot;, from: &quot;2.3.0&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then implement the MCP server as a &lt;code&gt;Service&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import MCP
import ServiceLifecycle
import Logging

struct MCPService: Service {
    let server: Server
    let transport: Transport

    init(server: Server, transport: Transport) {
        self.server = server
        self.transport = transport
    }

    func run() async throws {
        // Start the server
        try await server.start(transport: transport)

        // Keep running until external cancellation
        try await Task.sleep(for: .days(365 * 100))  // Effectively forever
    }

    func shutdown() async throws {
        // Gracefully shutdown the server
        await server.stop()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use it in your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import MCP
import ServiceLifecycle
import Logging

let logger = Logger(label: &quot;com.example.mcp-server&quot;)

// Create the MCP server
let server = Server(
    name: &quot;MyModelServer&quot;,
    version: &quot;1.0.0&quot;,
    capabilities: .init(
        prompts: .init(listChanged: true),
        resources: .init(subscribe: true, listChanged: true),
        tools: .init(listChanged: true)
    )
)

// Add handlers directly to the server
await server.withMethodHandler(ListTools.self) { _ in
    // Your implementation
    return .init(tools: [
        Tool(name: &quot;example&quot;, description: &quot;An example tool&quot;)
    ])
}

await server.withMethodHandler(CallTool.self) { params in
    // Your implementation
    return .init(content: [.text(&quot;Tool result&quot;)], isError: false)
}

// Create MCP service and other services
let transport = StdioTransport(logger: logger)
let mcpService = MCPService(server: server, transport: transport)
let databaseService = DatabaseService() // Your other services

// Create service group with signal handling
let serviceGroup = ServiceGroup(
    services: [mcpService, databaseService],
    configuration: .init(
        gracefulShutdownSignals: [.sigterm, .sigint]
    ),
    logger: logger
)

// Run the service group - this blocks until shutdown
try await serviceGroup.run()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This approach has several benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Signal handling&lt;/strong&gt;: Automatically traps SIGINT, SIGTERM and triggers graceful shutdown&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graceful shutdown&lt;/strong&gt;: Properly shuts down your MCP server and other services&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Timeout-based shutdown&lt;/strong&gt;: Configurable shutdown timeouts to prevent hanging processes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced service management&lt;/strong&gt;: &lt;a href=&quot;https://swiftpackageindex.com/swift-server/swift-service-lifecycle/documentation/servicelifecycle&quot;&gt;&lt;code&gt;ServiceLifecycle&lt;/code&gt;&lt;/a&gt; also supports service dependencies, conditional services, and other useful features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Transports&lt;/h2&gt; 
&lt;p&gt;MCP&#39;s transport layer handles communication between clients and servers. The Swift SDK provides multiple built-in transports:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Transport&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Platforms&lt;/th&gt; 
   &lt;th&gt;Best for&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/swift-sdk/main/Sources/MCP/Base/Transports/StdioTransport.swift&quot;&gt;&lt;code&gt;StdioTransport&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Implements &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#stdio&quot;&gt;stdio transport&lt;/a&gt; using standard input/output streams&lt;/td&gt; 
   &lt;td&gt;Apple platforms, Linux with glibc&lt;/td&gt; 
   &lt;td&gt;Local subprocesses, CLI tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/swift-sdk/main/Sources/MCP/Base/Transports/HTTPClientTransport.swift&quot;&gt;&lt;code&gt;HTTPClientTransport&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Implements &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#streamable-http&quot;&gt;Streamable HTTP transport&lt;/a&gt; using Foundation&#39;s URL Loading System&lt;/td&gt; 
   &lt;td&gt;All platforms with Foundation&lt;/td&gt; 
   &lt;td&gt;Remote servers, web applications&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/swift-sdk/main/Sources/MCP/Base/Transports/InMemoryTransport.swift&quot;&gt;&lt;code&gt;InMemoryTransport&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Custom in-memory transport for direct communication within the same process&lt;/td&gt; 
   &lt;td&gt;All platforms&lt;/td&gt; 
   &lt;td&gt;Testing, debugging, same-process client-server communication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/swift-sdk/main/Sources/MCP/Base/Transports/NetworkTransport.swift&quot;&gt;&lt;code&gt;NetworkTransport&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Custom transport using Apple&#39;s Network framework for TCP/UDP connections&lt;/td&gt; 
   &lt;td&gt;Apple platforms only&lt;/td&gt; 
   &lt;td&gt;Low-level networking, custom protocols&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Custom Transport Implementation&lt;/h3&gt; 
&lt;p&gt;You can implement a custom transport by conforming to the &lt;code&gt;Transport&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import MCP
import Foundation

public actor MyCustomTransport: Transport {
    public nonisolated let logger: Logger
    private var isConnected = false
    private let messageStream: AsyncThrowingStream&amp;lt;Data, any Swift.Error&amp;gt;
    private let messageContinuation: AsyncThrowingStream&amp;lt;Data, any Swift.Error&amp;gt;.Continuation

    public init(logger: Logger? = nil) {
        self.logger = logger ?? Logger(label: &quot;my.custom.transport&quot;)

        var continuation: AsyncThrowingStream&amp;lt;Data, any Swift.Error&amp;gt;.Continuation!
        self.messageStream = AsyncThrowingStream { continuation = $0 }
        self.messageContinuation = continuation
    }

    public func connect() async throws {
        // Implement your connection logic
        isConnected = true
    }

    public func disconnect() async {
        // Implement your disconnection logic
        isConnected = false
        messageContinuation.finish()
    }

    public func send(_ data: Data) async throws {
        // Implement your message sending logic
    }

    public func receive() -&amp;gt; AsyncThrowingStream&amp;lt;Data, any Swift.Error&amp;gt; {
        return messageStream
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Platform Availability&lt;/h2&gt; 
&lt;p&gt;The Swift SDK has the following platform requirements:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;13.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS / Mac Catalyst&lt;/td&gt; 
   &lt;td&gt;16.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;watchOS&lt;/td&gt; 
   &lt;td&gt;9.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tvOS&lt;/td&gt; 
   &lt;td&gt;16.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;visionOS&lt;/td&gt; 
   &lt;td&gt;1.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;Distributions with &lt;code&gt;glibc&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;While the core library works on any platform supporting Swift 6 (including Linux and Windows), running a client or server requires a compatible transport.&lt;/p&gt; 
&lt;p&gt;We&#39;re actively working to expand platform support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/swift-sdk/pull/64&quot;&gt;Alpine Linux support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/swift-sdk/pull/64&quot;&gt;Windows support&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Debugging and Logging&lt;/h2&gt; 
&lt;p&gt;Enable logging to help troubleshoot issues:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Logging
import MCP

// Configure Logger
LoggingSystem.bootstrap { label in
    var handler = StreamLogHandler.standardOutput(label: label)
    handler.logLevel = .debug
    return handler
}

// Create logger
let logger = Logger(label: &quot;com.example.mcp&quot;)

// Pass to client/server
let client = Client(name: &quot;MyApp&quot;, version: &quot;1.0.0&quot;)

// Pass to transport
let transport = StdioTransport(logger: logger)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/&quot;&gt;MCP Specification&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://modelcontextprotocol.io&quot;&gt;Protocol Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/swift-sdk&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;This project follows &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;. For pre-1.0 releases, minor version increments (0.X.0) may contain breaking changes.&lt;/p&gt; 
&lt;p&gt;For details about changes in each release, see the &lt;a href=&quot;https://github.com/modelcontextprotocol/swift-sdk/releases&quot;&gt;GitHub Releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TelegramMessenger/Telegram-iOS</title>
      <link>https://github.com/TelegramMessenger/Telegram-iOS</link>
      <description>&lt;p&gt;Telegram-iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram iOS Source Code Compilation Guide&lt;/h1&gt; 
&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; 
&lt;h1&gt;Creating your Telegram Application&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://core.telegram.org/api/obtaining_api_id&quot;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; 
 &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app — or make sure your users understand that it is unofficial.&lt;/li&gt; 
 &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; 
 &lt;li&gt;Please study our &lt;a href=&quot;https://core.telegram.org/mtproto/security_guidelines&quot;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; 
 &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Quick Compilation Guide&lt;/h1&gt; 
&lt;h2&gt;Get the Code&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup Xcode&lt;/h2&gt; 
&lt;p&gt;Install Xcode (directly from &lt;a href=&quot;https://developer.apple.com/download/applications&quot;&gt;https://developer.apple.com/download/applications&lt;/a&gt; or using the App Store).&lt;/p&gt; 
&lt;h2&gt;Adjust Configuration&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Generate a random identifier:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;openssl rand -hex 8
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Create a new Xcode project. Use &lt;code&gt;Telegram&lt;/code&gt; as the Product Name. Use &lt;code&gt;org.{identifier from step 1}&lt;/code&gt; as the Organization Identifier.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;Keychain Access&lt;/code&gt; and navigate to &lt;code&gt;Certificates&lt;/code&gt;. Locate &lt;code&gt;Apple Development: your@email.address (XXXXXXXXXX)&lt;/code&gt; and double tap the certificate. Under &lt;code&gt;Details&lt;/code&gt;, locate &lt;code&gt;Organizational Unit&lt;/code&gt;. This is the Team ID.&lt;/li&gt; 
 &lt;li&gt;Edit &lt;code&gt;build-system/template_minimal_development_configuration.json&lt;/code&gt;. Use data from the previous steps.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Generate an Xcode project&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \
    --cacheDir=&quot;$HOME/telegram-bazel-cache&quot; \
    generateProject \
    --configurationPath=build-system/template_minimal_development_configuration.json \
    --xcodeManagedCodesigning
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Advanced Compilation Guide&lt;/h1&gt; 
&lt;h2&gt;Xcode&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Copy and edit &lt;code&gt;build-system/appstore-configuration.json&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Copy &lt;code&gt;build-system/fake-codesigning&lt;/code&gt;. Create and download provisioning profiles, using the &lt;code&gt;profiles&lt;/code&gt; folder as a reference for the entitlements.&lt;/li&gt; 
 &lt;li&gt;Generate an Xcode project:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \
    --cacheDir=&quot;$HOME/telegram-bazel-cache&quot; \
    generateProject \
    --configurationPath=configuration_from_step_1.json \
    --codesigningInformationPath=directory_from_step_2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;IPA&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Repeat the steps from the previous section. Use distribution provisioning profiles.&lt;/li&gt; 
 &lt;li&gt;Run:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \
    --cacheDir=&quot;$HOME/telegram-bazel-cache&quot; \
    build \
    --configurationPath=...see previous section... \
    --codesigningInformationPath=...see previous section... \
    --buildNumber=100001 \
    --configuration=release_arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;h2&gt;Xcode is stuck at &quot;build-request.json not updated yet&quot;&lt;/h2&gt; 
&lt;p&gt;Occasionally, you might observe the following message in your build log:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&quot;/Users/xxx/Library/Developer/Xcode/DerivedData/Telegram-xxx/Build/Intermediates.noindex/XCBuildData/xxx.xcbuilddata/build-request.json&quot; not updated yet, waiting...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Should this occur, simply cancel the ongoing build and initiate a new one.&lt;/p&gt; 
&lt;h2&gt;Telegram_xcodeproj: no such package&lt;/h2&gt; 
&lt;p&gt;Following a system restart, the auto-generated Xcode project might encounter a build failure accompanied by this error:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ERROR: Skipping &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj:Telegram_xcodeproj&#39;: no such package &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj&#39;: BUILD file not found in directory &#39;generator/Telegram/Telegram_xcodeproj&#39; of external repository @rules_xcodeproj_generated. Add a BUILD file to a directory to mark it as a package.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter this issue, re-run the project generation steps in the README.&lt;/p&gt; 
&lt;h1&gt;Tips&lt;/h1&gt; 
&lt;h2&gt;Codesigning is not required for simulator-only builds&lt;/h2&gt; 
&lt;p&gt;Add &lt;code&gt;--disableProvisioningProfiles&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \
    --cacheDir=&quot;$HOME/telegram-bazel-cache&quot; \
    generateProject \
    --configurationPath=path-to-configuration.json \
    --codesigningInformationPath=path-to-provisioning-data \
    --disableProvisioningProfiles
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Versions&lt;/h2&gt; 
&lt;p&gt;Each release is built using a specific Xcode version (see &lt;code&gt;versions.json&lt;/code&gt;). The helper script checks the versions of the installed software and reports an error if they don&#39;t match the ones specified in &lt;code&gt;versions.json&lt;/code&gt;. It is possible to bypass these checks:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --overrideXcodeVersion build ... # Don&#39;t check the version of Xcode
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>vapor/vapor</title>
      <link>https://github.com/vapor/vapor</link>
      <description>&lt;p&gt;💧 A server-side Swift HTTP web framework.&lt;/p&gt;&lt;hr&gt;&lt;a href=&quot;https://discord.gg/vapor&quot;&gt; &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1342803/75634175-4876d680-5bd9-11ea-90d6-12c7b6a9ee3f.png&quot; alt=&quot;Vapor&quot; /&gt;&lt;/p&gt; &lt;/a&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://docs.vapor.codes/4.0/&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/readthedocs.svg?sanitize=true&quot; alt=&quot;Documentation&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/vapor&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/discordchat.svg?sanitize=true&quot; alt=&quot;Team Chat&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/vapor/vapor/main/LICENSE&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/mitlicense.svg?sanitize=true&quot; alt=&quot;MIT License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/vapor/vapor/actions/workflows/test.yml&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/vapor/vapor/test.yml?event=push&amp;amp;style=plastic&amp;amp;logo=github&amp;amp;label=tests&amp;amp;logoColor=%23ccc&quot; alt=&quot;Continuous Integration&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/vapor/vapor&quot;&gt; &lt;img src=&quot;https://img.shields.io/codecov/c/github/vapor/vapor?style=plastic&amp;amp;logo=codecov&amp;amp;label=codecov&quot; alt=&quot;Code Coverage&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://swift.org&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/swift57up.svg?sanitize=true&quot; alt=&quot;Swift 5.7+&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://hachyderm.io/@codevapor&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%20-@codevapor-6364f6.svg?style=plastic&amp;amp;logo=mastodon&amp;amp;labelColor=gray&amp;amp;logoColor=%239394ff&quot; alt=&quot;Mastodon&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Vapor is an HTTP web framework for Swift. It provides a beautifully expressive and easy-to-use foundation for your next website, API, or cloud project.&lt;/p&gt; 
&lt;p&gt;Take a look at some of the &lt;a href=&quot;https://github.com/vapor-community/awesome-vapor&quot;&gt;awesome stuff&lt;/a&gt; created with Vapor.&lt;/p&gt; 
&lt;h3&gt;💧 Community&lt;/h3&gt; 
&lt;p&gt;Join the welcoming community of fellow Vapor developers on &lt;a href=&quot;https://vapor.team&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🚀 Contributing&lt;/h3&gt; 
&lt;p&gt;To contribute a &lt;strong&gt;feature or idea&lt;/strong&gt; to Vapor, &lt;a href=&quot;https://github.com/vapor/vapor/issues/new&quot;&gt;create an issue&lt;/a&gt; explaining your idea or bring it up on &lt;a href=&quot;https://vapor.team&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find a &lt;strong&gt;bug&lt;/strong&gt;, please &lt;a href=&quot;https://github.com/vapor/vapor/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find a &lt;strong&gt;security vulnerability&lt;/strong&gt;, please contact &lt;a href=&quot;mailto:security@vapor.codes&quot;&gt;security@vapor.codes&lt;/a&gt; as soon as possible.&lt;/p&gt; 
&lt;h3&gt;💛 Sponsors&lt;/h3&gt; 
&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&quot;https://github.com/sponsors/vapor&quot;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;https://www.brokenhands.io&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/137103192-21f99099-6aaa-4cc1-a1a7-21ee767a72d1.png&quot; height=&quot;100px&quot; alt=&quot;Broken Hands&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://www.emergetools.com&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/265658253-cb37d2fa-3251-497f-8eeb-ba7c95af373b.svg?sanitize=true&quot; height=&quot;100px&quot; alt=&quot;Emerge Tools&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/MrLotU&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/1342803/79599312-426a8580-80b3-11ea-89b3-8b2722485e37.png&quot; height=&quot;100px&quot; alt=&quot;Jari&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/DonutDane&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/265657642-6b6b1705-9611-4547-8e2f-a3773fda87c6.png&quot; height=&quot;100px&quot; alt=&quot;Donut Dane&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://macstadium.com&quot;&gt; &lt;img src=&quot;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&quot; height=&quot;100px&quot; alt=&quot;MacStadium&quot; /&gt; &lt;/a&gt; 
&lt;h3&gt;💚 Backers&lt;/h3&gt; 
&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&quot;https://github.com/sponsors/vapor&quot;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- backers --&gt;
&lt;a href=&quot;https://github.com/slashmo&quot;&gt;&lt;img src=&quot;https://github.com/slashmo.png&quot; width=&quot;60px&quot; alt=&quot;Moritz Lang&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/maartene&quot;&gt;&lt;img src=&quot;https://github.com/maartene.png&quot; width=&quot;60px&quot; alt=&quot;Maarten Engels&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/tkrajacic&quot;&gt;&lt;img src=&quot;https://github.com/tkrajacic.png&quot; width=&quot;60px&quot; alt=&quot;Thomas Krajacic&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/jessetipton&quot;&gt;&lt;img src=&quot;https://github.com/jessetipton.png&quot; width=&quot;60px&quot; alt=&quot;Jesse Tipton&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/steve-h&quot;&gt;&lt;img src=&quot;https://github.com/steve-h.png&quot; width=&quot;60px&quot; alt=&quot;Steve Hume&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mikkelu&quot;&gt;&lt;img src=&quot;https://github.com/mikkelu.png&quot; width=&quot;60px&quot; alt=&quot;Mikkel Ulstrup&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/g-Off&quot;&gt;&lt;img src=&quot;https://github.com/g-Off.png&quot; width=&quot;60px&quot; alt=&quot;Geoffrey Foster&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/PSchmiedmayer&quot;&gt;&lt;img src=&quot;https://github.com/PSchmiedmayer.png&quot; width=&quot;60px&quot; alt=&quot;Paul Schmiedmayer&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/ScottRobbins&quot;&gt;&lt;img src=&quot;https://github.com/ScottRobbins.png&quot; width=&quot;60px&quot; alt=&quot;Scott Robbins&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/finestructure&quot;&gt;&lt;img src=&quot;https://github.com/finestructure.png&quot; width=&quot;60px&quot; alt=&quot;Sven A. Schmidt&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/SpencerCurtis&quot;&gt;&lt;img src=&quot;https://github.com/SpencerCurtis.png&quot; width=&quot;60px&quot; alt=&quot;Spencer Curtis&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/rausnitz&quot;&gt;&lt;img src=&quot;https://github.com/rausnitz.png&quot; width=&quot;60px&quot; alt=&quot;Zach Rausnitz&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/masterofinsanity&quot;&gt;&lt;img src=&quot;https://github.com/masterofinsanity.png&quot; width=&quot;60px&quot; alt=&quot;Tim „Timinator“ Kretzschmar&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/klaas&quot;&gt;&lt;img src=&quot;https://github.com/klaas.png&quot; width=&quot;60px&quot; alt=&quot;Klaas&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Andrewangeta&quot;&gt;&lt;img src=&quot;https://github.com/Andrewangeta.png&quot; width=&quot;60px&quot; alt=&quot;Andrew Edwards&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/addli&quot;&gt;&lt;img src=&quot;https://github.com/addli.png&quot; width=&quot;60px&quot; alt=&quot;+Li, Inc.&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/doozMen&quot;&gt;&lt;img src=&quot;https://github.com/doozMen.png&quot; width=&quot;60px&quot; alt=&quot;Stijn Willems&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/bitwit&quot;&gt;&lt;img src=&quot;https://github.com/bitwit.png&quot; width=&quot;60px&quot; alt=&quot;Kyle Newsome&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/viaaurelia&quot;&gt;&lt;img src=&quot;https://github.com/viaaurelia.png&quot; width=&quot;60px&quot; alt=&quot;Via Aurelia Solutions&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/kkiermasz&quot;&gt;&lt;img src=&quot;https://github.com/kkiermasz.png&quot; width=&quot;60px&quot; alt=&quot;Jakub Kiermasz&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/bdrelling&quot;&gt;&lt;img src=&quot;https://github.com/bdrelling.png&quot; width=&quot;60px&quot; alt=&quot;Brian Drelling&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mayondigital&quot;&gt;&lt;img src=&quot;https://github.com/mayondigital.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mattesmohr&quot;&gt;&lt;img src=&quot;https://github.com/mattesmohr.png&quot; width=&quot;60px&quot; alt=&quot;Mattes Mohr&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/scibidoo&quot;&gt;&lt;img src=&quot;https://github.com/scibidoo.png&quot; width=&quot;60px&quot; alt=&quot;Jamie&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/GalenRhodes&quot;&gt;&lt;img src=&quot;https://github.com/GalenRhodes.png&quot; width=&quot;60px&quot; alt=&quot;Galen Rhodes&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/litmaps&quot;&gt;&lt;img src=&quot;https://github.com/litmaps.png&quot; width=&quot;60px&quot; alt=&quot;Litmaps&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/davdroman&quot;&gt;&lt;img src=&quot;https://github.com/davdroman.png&quot; width=&quot;60px&quot; alt=&quot;David Roman&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Strobocop&quot;&gt;&lt;img src=&quot;https://github.com/Strobocop.png&quot; width=&quot;60px&quot; alt=&quot;Brian Strobach&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/kishikawakatsumi&quot;&gt;&lt;img src=&quot;https://github.com/kishikawakatsumi.png&quot; width=&quot;60px&quot; alt=&quot;Kishikawa Katsumi&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mkll&quot;&gt;&lt;img src=&quot;https://github.com/mkll.png&quot; width=&quot;60px&quot; alt=&quot;Alex Sherbakov&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/getsidetrack&quot;&gt;&lt;img src=&quot;https://github.com/getsidetrack.png&quot; width=&quot;60px&quot; alt=&quot;Sidetrack&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/GregKarpati&quot;&gt;&lt;img src=&quot;https://github.com/GregKarpati.png&quot; width=&quot;60px&quot; alt=&quot;Greg Karpati&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/fananek&quot;&gt;&lt;img src=&quot;https://github.com/fananek.png&quot; width=&quot;60px&quot; alt=&quot;František Mikš&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/jagreenwood&quot;&gt;&lt;img src=&quot;https://github.com/jagreenwood.png&quot; width=&quot;60px&quot; alt=&quot;Jeremy Greenwood&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/rayfix&quot;&gt;&lt;img src=&quot;https://github.com/rayfix.png&quot; width=&quot;60px&quot; alt=&quot;Ray Fix&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/micomiloloza&quot;&gt;&lt;img src=&quot;https://github.com/micomiloloza.png&quot; width=&quot;60px&quot; alt=&quot;Mićo Miloloža&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/awamser&quot;&gt;&lt;img src=&quot;https://github.com/awamser.png&quot; width=&quot;60px&quot; alt=&quot;Alan&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Suboptimierer&quot;&gt;&lt;img src=&quot;https://github.com/Suboptimierer.png&quot; width=&quot;60px&quot; alt=&quot;Jonas Sannewald&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/TapEnvy-us-LLC&quot;&gt;&lt;img src=&quot;https://github.com/TapEnvy-us-LLC.png&quot; width=&quot;60px&quot; alt=&quot;TapEnvy.us, LLC&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/JawadHF&quot;&gt;&lt;img src=&quot;https://github.com/JawadHF.png&quot; width=&quot;60px&quot; alt=&quot;Jawad&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/PARAIPAN9&quot;&gt;&lt;img src=&quot;https://github.com/PARAIPAN9.png&quot; width=&quot;60px&quot; alt=&quot;PARAIPAN SORIN&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/KalynDavis&quot;&gt;&lt;img src=&quot;https://github.com/KalynDavis.png&quot; width=&quot;60px&quot; alt=&quot;Kalyn Davis&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/stevapple&quot;&gt;&lt;img src=&quot;https://github.com/stevapple.png&quot; width=&quot;60px&quot; alt=&quot;YR Chen&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/roncuevas&quot;&gt;&lt;img src=&quot;https://github.com/roncuevas.png&quot; width=&quot;60px&quot; alt=&quot;Aarón Martínez Cuevas&quot; /&gt;&lt;/a&gt;
&lt;!-- backers --&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/vapor/backer/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/0/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/1/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/2/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/3/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/4/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/5/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/6/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/7/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/8/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/9/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/10/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/11/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/12/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/13/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/14/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/15/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/16/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/17/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/18/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/19/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/20/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/21/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/22/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/23/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/24/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/24/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/25/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/25/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/26/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/26/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/27/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/27/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/28/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/28/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/29/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/29/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/30/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/30/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/31/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/31/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/32/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/32/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/33/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/33/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/34/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/34/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/35/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/35/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/36/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/36/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/37/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/37/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/38/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/38/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/39/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/39/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/40/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/40/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/41/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/41/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/42/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/42/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/43/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/43/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/44/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/44/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/45/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/45/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/46/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/46/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/47/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/47/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/48/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/48/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TheWidlarzGroup/react-native-video</title>
      <link>https://github.com/TheWidlarzGroup/react-native-video</link>
      <description>&lt;p&gt;A &lt;Video /&gt; component for react-native&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://thewidlarzgroup.com/?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=banner&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheWidlarzGroup/react-native-video/master/docs/assets/baners/rnv-banner.png&quot; alt=&quot;React Native Video Component&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The most battle-tested open-source video player component for React Native with support for DRM, offline playback, HLS/DASH streaming, and more.&lt;/p&gt; 
&lt;h2&gt;🔍 Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📱 Plays all video formats natively supported by iOS/Android&lt;/li&gt; 
 &lt;li&gt;▶️ Local and remote playback&lt;/li&gt; 
 &lt;li&gt;🔁 Streaming: HLS • DASH • SmoothStreaming&lt;/li&gt; 
 &lt;li&gt;🔐 DRM: Widevine &amp;amp; FairPlay (&lt;a href=&quot;https://www.thewidlarzgroup.com/services/free-drm-token-generator-for-video?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=free-drm&quot;&gt;See free DRM stream example&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;📴 Offline playback, video download, support for side-tracks and side-captions (via &lt;a href=&quot;https://docs.thewidlarzgroup.com/offline-video-sdk?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=features-text&quot;&gt;optional SDK&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;🎚️ Fine-grained control over tracks, buffering &amp;amp; events&lt;/li&gt; 
 &lt;li&gt;🧩 Expo plugin support&lt;/li&gt; 
 &lt;li&gt;🌐 Basic Web Support&lt;/li&gt; 
 &lt;li&gt;📱 Picture in Picture&lt;/li&gt; 
 &lt;li&gt;📺 TV Support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✨ Project Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
   &lt;th&gt;State&lt;/th&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;v5 and lower&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;❌ End-of-life &lt;a href=&quot;https://www.thewidlarzgroup.com/blog/react-native-video-upgrade-challenges-custom-maintenance-support#how-we-can-help?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=upgradev5&quot;&gt;Commercial Support Available&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Old Architecture&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;v6&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;🛠 Maintained (community + TWG)&lt;/td&gt; 
   &lt;td&gt;Old + New (Interop Layer)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TheWidlarzGroup/react-native-video/tree/v7&quot;&gt;&lt;strong&gt;v7&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TheWidlarzGroup/react-native-video/tree/v7&quot;&gt;🚀 Active Development&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Old + New (Full Support)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/TheWidlarzGroup/react-native-video/tree/v7&quot;&gt;&lt;code&gt;react-native-video&lt;/code&gt; v7&lt;/a&gt; introduces full support for the new React Native architecture, unlocking better performance, improved consistency, and modern native modules.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📚 Documentation &amp;amp; Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://docs.thewidlarzgroup.com/react-native-video/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📦 &lt;a href=&quot;https://www.thewidlarzgroup.com/services/free-drm-token-generator-for-video?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=free-drm&quot;&gt;Example: Free DRM Stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📦 &lt;a href=&quot;https://docs.thewidlarzgroup.com/offline-video-sdk&quot;&gt;Example: Offline SDK integration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install dependencies
yarn add react-native-video

# Install pods
cd ios &amp;amp;&amp;amp; pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import Video from &#39;react-native-video&#39;;

export default () =&amp;gt; (
  &amp;lt;Video
    source={{ uri: &#39;https://www.w3schools.com/html/mov_bbb.mp4&#39; }}
    style={{ width: &#39;100%&#39;, aspectRatio: 16 / 9 }}
    controls
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🧩 Plugins&lt;/h2&gt; 
&lt;a href=&quot;https://www.thewidlarzgroup.com/offline-video-sdk?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=banner&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/TheWidlarzGroup/react-native-video/master/docs/assets/baners/sdk-banner.png&quot; alt=&quot;Offline SDK Preview&quot; width=&quot;40%&quot; align=&quot;right&quot; /&gt; &lt;/a&gt; 
&lt;h3&gt;1 · 📥 Offline SDK&lt;/h3&gt; 
&lt;h4&gt;Need Offline Video Playback in React Native?&lt;/h4&gt; 
&lt;p&gt;If you&#39;re building a video-first app and need to &lt;strong&gt;download HLS streams for offline playback&lt;/strong&gt;, you&#39;re in the right place.&lt;/p&gt; 
&lt;h4&gt;👉 &lt;a href=&quot;https://www.thewidlarzgroup.com/offline-video-sdk?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=check-offline-video-sdk&quot;&gt;Check Offline Video SDK for React Native&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;This SDK supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎞 Offline HLS playback&lt;/li&gt; 
 &lt;li&gt;🎧 Multi-language audio track downloads&lt;/li&gt; 
 &lt;li&gt;💬 Subtitles support&lt;/li&gt; 
 &lt;li&gt;🔐 DRM license handling&lt;/li&gt; 
 &lt;li&gt;📊 Analytics &amp;amp; state tracking&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h4&gt;🔑 How to get access?&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get a &lt;strong&gt;free trial&lt;/strong&gt; (no credit card required)&lt;/li&gt; 
 &lt;li&gt;Use our &lt;a href=&quot;https://github.com/TheWidlarzGroup/react-native-offline-video-starter&quot;&gt;starter project&lt;/a&gt; to see it in action&lt;/li&gt; 
 &lt;li&gt;Integrates with both &lt;code&gt;v6&lt;/code&gt; and &lt;code&gt;v7&lt;/code&gt; versions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;👉 &lt;strong&gt;&lt;a href=&quot;https://sdk.thewidlarzgroup.com/signup?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=start-trial-offline-video-sdk&quot;&gt;Start Free Trial on the SDK Platform →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;2 · 🧪 Architecture&lt;/h3&gt; 
&lt;p&gt;Write your own plugins to extend library logic, attach analytics or add custom workflows - &lt;strong&gt;without forking&lt;/strong&gt; the core SDK.&lt;br /&gt; → &lt;a href=&quot;https://docs.thewidlarzgroup.com/react-native-video/other/plugin?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=plugin-text&quot;&gt;Plugin documentation&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;💼 TWG Services &amp;amp; Products&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Offering&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/issue-boost?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_campaign=professional-support-packages#Contact&quot;&gt;&lt;strong&gt;Professional Support Packages&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Priority bug-fixes, guaranteed SLAs, &lt;a href=&quot;https://github.com/orgs/TheWidlarzGroup/projects/6&quot;&gt;roadmap influence&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/issue-boost?utm_source=rnv&amp;amp;utm_medium=readme&quot;&gt;&lt;strong&gt;Issue Booster&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fast-track urgent fixes with a pay‑per‑issue model&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/offline-video-sdk/?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_campaign=downloading&amp;amp;utm_id=offline-video-sdk-link&quot;&gt;&lt;strong&gt;Offline Video SDK&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Plug‑and‑play secure download solution for iOS &amp;amp; Android&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_campaign=integration-support#Contact&quot;&gt;&lt;strong&gt;Integration Support&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Hands‑on help integrating video, DRM &amp;amp; offline into your app&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/services/free-drm-token-generator-for-video?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=free-drm&quot;&gt;&lt;strong&gt;Free DRM Token Generator&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate Widevine / FairPlay tokens for testing&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/showcases?utm_source=rnv&amp;amp;utm_medium=readme&quot;&gt;&lt;strong&gt;Ready Boilerplates&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ready-to-use apps with offline HLS/DASH DRM, video frame scrubbing, TikTok-style video feed, background uploads, Skia-based frame processor (R&amp;amp;D phase), and more&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.thewidlarzgroup.com/blog/react-native-video-upgrade-challenges-custom-maintenance-support?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=upgrade-blog&amp;amp;utm_campaign=v7&quot;&gt;&lt;strong&gt;React Native Video Upgrade Guide&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Common upgrade pitfalls &amp;amp; how to solve them&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;See how &lt;a href=&quot;https://www.thewidlarzgroup.com/?utm_source=rnv&amp;amp;utm_medium=readme&amp;amp;utm_id=services-text&quot;&gt;TWG&lt;/a&gt; helped &lt;strong&gt;Learnn&lt;/strong&gt; ship a world‑class player in record time - &lt;a href=&quot;https://gitnation.com/contents/a-4-year-retrospective-lessons-learned-from-building-a-video-player-from-scratch-with-react-native&quot;&gt;case study&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Contact us at &lt;a href=&quot;mailto:hi@thewidlarzgroup.com&quot;&gt;hi@thewidlarzgroup.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🌍 Social&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐦 &lt;strong&gt;X / Twitter&lt;/strong&gt; - &lt;a href=&quot;https://x.com/TheWidlarzGroup&quot;&gt;follow product &amp;amp; release updates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 &lt;strong&gt;Discord&lt;/strong&gt; - &lt;a href=&quot;https://discord.gg/9WPq6Yx&quot;&gt;talk to the community and us&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💼 &lt;strong&gt;LinkedIn&lt;/strong&gt; - &lt;a href=&quot;https://linkedin.com/company/the-widlarz-group&quot;&gt;see TWG flexing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📰 Community &amp;amp; Media&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;🗽 &lt;strong&gt;React Summit US&lt;/strong&gt; – How TWG helped Learnn boost video performance on React Native.&lt;br /&gt; &lt;a href=&quot;https://gitnation.com/contents/a-4-year-retrospective-lessons-learned-from-building-a-video-player-from-scratch-with-react-native&quot;&gt;Watch the talk »&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🧨 &lt;strong&gt;v7 deep dive&lt;/strong&gt; – Why we’re building v7 with Nitro Modules &lt;a href=&quot;https://x.com/krzysztof_moch/status/1854162551946478051&quot;&gt;Watch on X »&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🛠️ &lt;strong&gt;Well-maintained open-source library&lt;/strong&gt; - What does it truly mean? - Bart&#39;s talk for React Native Warsaw &lt;a href=&quot;https://www.youtube.com/watch?v=RAQQwGCQNqY&quot;&gt;Watch here »&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📺 &lt;strong&gt;“Over the Top” Panel&lt;/strong&gt; - Building Streaming Apps for Mobile, Web, and Smart TVs - Bart giving his insights on the industry &lt;a href=&quot;https://youtu.be/j2b_bG-32JI&quot;&gt;Watch here »&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-collections</title>
      <link>https://github.com/apple/swift-collections</link>
      <description>&lt;p&gt;Commonly used data structures for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Collections&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Swift Collections&lt;/strong&gt; is an open-source package of data structure implementations for the Swift programming language.&lt;/p&gt; 
&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&quot;https://swift.org/blog/swift-collections&quot;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;The package currently provides the following implementations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/bitcollections/bitset&quot;&gt;&lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/bitcollections/bitarray&quot;&gt;&lt;code&gt;BitArray&lt;/code&gt;&lt;/a&gt;, dynamic bit collections.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/dequemodule/deque&quot;&gt;&lt;code&gt;Deque&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a double-ended queue backed by a ring buffer. Deques are range-replaceable, mutable, random-access collections.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/heapmodule/heap&quot;&gt;&lt;code&gt;Heap&lt;/code&gt;&lt;/a&gt;, a min-max heap backed by an array, suitable for use as a priority queue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/orderedcollections/orderedset&quot;&gt;&lt;code&gt;OrderedSet&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a variant of the standard &lt;code&gt;Set&lt;/code&gt; where the order of items is well-defined and items can be arbitrarily reordered. Uses a &lt;code&gt;ContiguousArray&lt;/code&gt; as its backing store, augmented by a separate hash table of bit packed offsets into it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/orderedcollections/ordereddictionary&quot;&gt;&lt;code&gt;OrderedDictionary&amp;lt;Key, Value&amp;gt;&lt;/code&gt;&lt;/a&gt;, an ordered variant of the standard &lt;code&gt;Dictionary&lt;/code&gt;, providing similar benefits.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/hashtreecollections/treeset&quot;&gt;&lt;code&gt;TreeSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/apple/swift-collections/documentation/hashtreecollections/treedictionary&quot;&gt;&lt;code&gt;TreeDictionary&lt;/code&gt;&lt;/a&gt;, persistent hashed collections implementing Compressed Hash-Array Mapped Prefix Trees (CHAMP). These work similar to the standard &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt;, but they excel at use cases that mutate shared copies, offering dramatic memory savings and radical time improvements.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Swift Collections uses the same modularization approach as &lt;a href=&quot;https://github.com/apple/swift-numerics&quot;&gt;&lt;strong&gt;Swift Numerics&lt;/strong&gt;&lt;/a&gt;: it provides a standalone module for each thematic group of data structures it implements. For instance, if you only need a double-ended queue type, you can pull in only that by importing &lt;code&gt;DequeModule&lt;/code&gt;. &lt;code&gt;OrderedSet&lt;/code&gt; and &lt;code&gt;OrderedDictionary&lt;/code&gt; share much of the same underlying implementation, so they are provided by a single module, called &lt;code&gt;OrderedCollections&lt;/code&gt;. However, there is also a top-level &lt;code&gt;Collections&lt;/code&gt; module that gives you every collection type with a single import statement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Collections

var deque: Deque&amp;lt;String&amp;gt; = [&quot;Ted&quot;, &quot;Rebecca&quot;]
deque.prepend(&quot;Keeley&quot;)
deque.append(&quot;Nathan&quot;)
print(deque) // [&quot;Keeley&quot;, &quot;Ted&quot;, &quot;Rebecca&quot;, &quot;Nathan&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;p&gt;The Swift Collections package is source stable. The version numbers follow &lt;a href=&quot;https://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; 
&lt;h3&gt;Public API&lt;/h3&gt; 
&lt;p&gt;The public API of version 1.2 of the &lt;code&gt;swift-collections&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;BitCollections&lt;/code&gt;, &lt;code&gt;DequeModule&lt;/code&gt;, &lt;code&gt;HeapModule&lt;/code&gt;, &lt;code&gt;OrderedCollections&lt;/code&gt; and &lt;code&gt;HashTreeCollections&lt;/code&gt; modules.&lt;/p&gt; 
&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; 
&lt;p&gt;By &quot;underscored declarations&quot; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have a use case that requires using underscored (or otherwise non-public) APIs, please &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&quot;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; 
&lt;p&gt;This source compatibility promise only applies to swift-collection when built as a Swift package. (The repository also contains unstable configurations for building swift-collections using CMake and Xcode. These configurations are provided for internal Swift project use only -- such as for building the (private) swift-collections binaries that ship within Swift toolchains.)&lt;/p&gt; 
&lt;p&gt;Note that the files in the &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Utils&lt;/code&gt;, &lt;code&gt;Documentation&lt;/code&gt;, &lt;code&gt;Xcode&lt;/code&gt;, &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;Benchmarks&lt;/code&gt; subdirectories may change at whim; they may be added, modified or removed in any new release. Do not rely on anything about them.&lt;/p&gt; 
&lt;p&gt;Future minor versions of the package may update these rules as needed.&lt;/p&gt; 
&lt;h3&gt;Minimum Required Swift Toolchain Version&lt;/h3&gt; 
&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, new versions of this package require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.) Patch (i.e., bugfix) releases will not increase the required toolchain version, but any minor (i.e., new feature) release may do so.&lt;/p&gt; 
&lt;p&gt;The following table maps package releases to their minimum required Swift toolchain release:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package version&lt;/th&gt; 
   &lt;th&gt;Swift version&lt;/th&gt; 
   &lt;th&gt;Xcode release&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.0.x&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Swift 5.3.2&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Xcode 12.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.1.x&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Swift 5.7.2&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Xcode 14.2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.2.x&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Swift 5.10.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= Xcode 15.3&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(Note: the package has no minimum deployment target, so while it does require clients to use a recent Swift toolchain to build it, the code itself is able to run on any OS release that supports running Swift code.)&lt;/p&gt; 
&lt;h2&gt;Using &lt;strong&gt;Swift Collections&lt;/strong&gt; in your project&lt;/h2&gt; 
&lt;p&gt;To use this package in a SwiftPM project, you need to set it up as a package dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:6.1
import PackageDescription

let package = Package(
  name: &quot;MyPackage&quot;,
  dependencies: [
    .package(
      url: &quot;https://github.com/apple/swift-collections.git&quot;, 
      .upToNextMinor(from: &quot;1.2.0&quot;) // or `.upToNextMajor
    )
  ],
  targets: [
    .target(
      name: &quot;MyTarget&quot;,
      dependencies: [
        .product(name: &quot;Collections&quot;, package: &quot;swift-collections&quot;)
      ]
    )
  ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing to Swift Collections&lt;/h2&gt; 
&lt;p&gt;We have a dedicated &lt;a href=&quot;https://forums.swift.org/c/related-projects/collections&quot;&gt;Swift Collections Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; 
&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&quot;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; 
&lt;h3&gt;Branching Strategy&lt;/h3&gt; 
&lt;p&gt;We maintain separate branches for each minor version of the package:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package version&lt;/th&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.0.x&lt;/td&gt; 
   &lt;td&gt;release/1.0&lt;/td&gt; 
   &lt;td&gt;Obsolete&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.1.x&lt;/td&gt; 
   &lt;td&gt;release/1.1&lt;/td&gt; 
   &lt;td&gt;Critical bugfixes only&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.2.x&lt;/td&gt; 
   &lt;td&gt;release/1.2&lt;/td&gt; 
   &lt;td&gt;Critical bugfixes only&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swift-collections 1.3.x&lt;/td&gt; 
   &lt;td&gt;main&lt;/td&gt; 
   &lt;td&gt;Feature work towards next minor release&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;n.a.&lt;/td&gt; 
   &lt;td&gt;future&lt;/td&gt; 
   &lt;td&gt;Experimental prototyping&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Changes must land on the branch corresponding to the earliest release that they will need to ship on. They are periodically propagated to subsequent branches, in the following direction:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;release/1.0&lt;/code&gt; → &lt;code&gt;release/1.1&lt;/code&gt; → &lt;code&gt;release/1.2&lt;/code&gt; → &lt;code&gt;main&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example, anything landing on &lt;code&gt;release/1.1&lt;/code&gt; will eventually appear on &lt;code&gt;release/1.2&lt;/code&gt; and then &lt;code&gt;main&lt;/code&gt; too; there is no need to file standalone PRs for each release line. Change propagation is not instantaneous, as it currently requires manual work -- it is performed by project maintainers.&lt;/p&gt; 
&lt;h3&gt;Working on the package&lt;/h3&gt; 
&lt;p&gt;We have some basic &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Internals/README.md&quot;&gt;documentation on package internals&lt;/a&gt; that will help you get started.&lt;/p&gt; 
&lt;p&gt;By submitting a pull request, you represent that you have the right to license your contribution to Apple and the community, and agree by submitting the patch that your contributions are licensed under the &lt;a href=&quot;https://swift.org/LICENSE.txt&quot;&gt;Swift License&lt;/a&gt;, a copy of which is &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt&quot;&gt;provided in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Fixing a bug or making a small improvement&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure to start by checking out the appropriate branch for the minor release you want the fix to ship in. (See above.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-collections/compare&quot;&gt;Submit a PR&lt;/a&gt; with your change. If there is an &lt;a href=&quot;https://github.com/apple/swift-collections/issues&quot;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it.&lt;/li&gt; 
 &lt;li&gt;Make sure to add tests covering whatever changes you are making.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Proposing a small enhancement&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Raise a &lt;a href=&quot;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&quot;&gt;Feature Request&lt;/a&gt;. Discuss why it would be important to implement it.&lt;/li&gt; 
 &lt;li&gt;Submit a PR with your implementation, participate in the review discussion.&lt;/li&gt; 
 &lt;li&gt;When there is a consensus that the feature is desirable, and the implementation works well, it is fully tested and documented, then it will be merged.&lt;/li&gt; 
 &lt;li&gt;Rejoice!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Proposing the addition of a new data structure&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of 2024, we are fully preoccupied with refactoring our existing data structures to support noncopyable and/or nonescapable element types; this includes designing new container protocols around them. I don&#39;t expect we&#39;ll have capacity to work on any major new data structure implementations until this effort is complete.&lt;/p&gt; 
&lt;!--

We intend this package to collect generally useful data structures -- the ones that ought to be within easy reach of every Swift engineer&#39;s basic toolbox. The implementations we ship need to be of the highest technical quality, polished to the same shine as anything that gets included in the Swift Standard Library. (The only real differences are that this package isn&#39;t under the formal Swift Evolution process, and its code isn&#39;t ABI stable.) 

Accordingly, adding a new data structure to this package is not an easy or quick process, and not all useful data structures are going to be a good fit. 

If you have an idea for a data structure that might make a good addition to this package, please start a topic on the [forum], explaining why you believe it would be important to implement it. This way we can figure out if it would be right for the package, discuss implementation strategies, and plan to allocate capacity to help.

Not all data structures will reach a high enough level of usefulness to ship in this package -- those that have a more limited audience might work better as a standalone package. Of course, reasonable people might disagree on the importance of including any particular data structure; but at the end of the day, the decision whether to take an implementation is up to the maintainers of this package.

If maintainers have agreed that your implementation would likely make a good addition, then it&#39;s time to start work on it. Submit a PR with your implementation as soon as you have something that&#39;s ready to show! We&#39;d love to get involved as early as you like. Historically, the best additions resulted from close work between the contributor and a package maintainer.

Participate in the review discussion, and adapt code accordingly. Sometimes we may need to go through several revisions over multiple months! This is fine -- it makes the end result that much better. When there is a consensus that the feature is ready, and the implementation is fully tested and documented, the PR will be merged by a maintainer. This is good time for a small celebration -- merging is a good indicator that the addition will ship at some point.

Historically, PRs adding a new data structure have typically been merged to a new feature branch rather than directly to a release branch or `main`, and there was an extended amount of time between the initial merge and the tag that shipped the new feature. Nobody likes to wait, but getting a new data structure implementation from a state that was ready to merge to a state that&#39;s ready to ship is actually quite difficult work, and it takes maintainer time and effort that needs to be scheduled in advance. The closer an implementation is to the coding conventions and performance baseline of the Standard Library, the shorter this wait is likely to become, and the fewer changes there will be between merging and shipping.

--&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;Like all Swift.org projects, we would like the Swift Collections project to foster a diverse and friendly community. We expect contributors to adhere to the &lt;a href=&quot;https://swift.org/code-of-conduct/&quot;&gt;Swift.org Code of Conduct&lt;/a&gt;. A copy of this document is &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-collections/main/CODE_OF_CONDUCT.md&quot;&gt;available in this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contact information&lt;/h3&gt; 
&lt;p&gt;The current code owner of this package is Karoy Lorentey (&lt;a href=&quot;https://github.com/lorentey&quot;&gt;@lorentey&lt;/a&gt;). You can contact him &lt;a href=&quot;https://forums.swift.org/u/lorentey/summary&quot;&gt;on the Swift forums&lt;/a&gt;, or by writing an email to klorentey at apple dot com. (Please keep it related to this project.)&lt;/p&gt; 
&lt;p&gt;In case of moderation issues, you can also directly contact a member of the &lt;a href=&quot;https://swift.org/community/#community-structure&quot;&gt;Swift Core Team&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>exelban/stats</title>
      <link>https://github.com/exelban/stats</link>
      <description>&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://github.com/exelban/stats/raw/master/Stats/Supporting%20Files/Assets.xcassets/AppIcon.appiconset/icon_256x256.png&quot; width=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/menus%3Fv2.3.2.png?v1&quot; alt=&quot;Stats&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/popups%3Fv2.3.2.png?v3&quot; alt=&quot;Stats&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You can download the latest version &lt;a href=&quot;https://github.com/exelban/stats/releases/latest/download/Stats.dmg&quot;&gt;here&lt;/a&gt;. This will download a file called &lt;code&gt;Stats.dmg&lt;/code&gt;. Open it and move the app to the application folder.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;To install it using Homebrew, open the Terminal app and type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install stats
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Legacy version&lt;/h3&gt; 
&lt;p&gt;Legacy version for older systems could be found &lt;a href=&quot;https://mac-stats.com/downloads&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Stats is supported on the released macOS version starting from macOS 10.15 (Catalina).&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Stats is an application that allows you to monitor your macOS system.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU utilization&lt;/li&gt; 
 &lt;li&gt;GPU utilization&lt;/li&gt; 
 &lt;li&gt;Memory usage&lt;/li&gt; 
 &lt;li&gt;Disk utilization&lt;/li&gt; 
 &lt;li&gt;Network usage&lt;/li&gt; 
 &lt;li&gt;Battery level&lt;/li&gt; 
 &lt;li&gt;Fan&#39;s control (not maintained)&lt;/li&gt; 
 &lt;li&gt;Sensors information (Temperature/Voltage/Power)&lt;/li&gt; 
 &lt;li&gt;Bluetooth devices&lt;/li&gt; 
 &lt;li&gt;Multiple time zone clock&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;h3&gt;How do you change the order of the menu bar icons?&lt;/h3&gt; 
&lt;p&gt;macOS decides the order of the menu bar items not &lt;code&gt;Stats&lt;/code&gt; - it may change after the first reboot after installing Stats.&lt;/p&gt; 
&lt;p&gt;To change the order of any menu bar icon - macOS Mojave (version 10.14) and up.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Hold down ⌘ (command key).&lt;/li&gt; 
 &lt;li&gt;Drag the icon to the desired position on the menu bar.&lt;/li&gt; 
 &lt;li&gt;Release ⌘ (command key)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How to reduce energy impact or CPU usage of Stats?&lt;/h3&gt; 
&lt;p&gt;Stats tries to be efficient as it&#39;s possible. But reading some data periodically is not a cheap task. Each module has its own &quot;price&quot;. So, if you want to reduce energy impact from the Stats you need to disable some Stats modules. The most inefficient modules are Sensors and Bluetooth. Disabling these modules could reduce CPU usage and power efficiency by up to 50% in some cases.&lt;/p&gt; 
&lt;h3&gt;Fan control&lt;/h3&gt; 
&lt;p&gt;Fan control is in legacy mode. It does not receive any updates or fixes. It&#39;s not dropped from the app just because in the old Macs it works pretty acceptable. I&#39;m open to accepting fixed or improvements (via PR) for this feature in case someone would like to help with that. But have no option and time to provide support for this feature.&lt;/p&gt; 
&lt;h3&gt;Sensors show incorrect CPU/GPU core count&lt;/h3&gt; 
&lt;p&gt;CPU/GPU sensors are simply thermal zones (sensors) on the CPU/GPU. They have no relation to the number of cores or specific cores. For example, a CPU is typically divided into two clusters: efficiency and performance. Each cluster contains multiple temperature sensors, and Stats simply displays these sensors. However, &quot;CPU Efficient Core 1&quot; does not represent the temperature of a single efficient core—it only indicates one of the temperature sensors within the efficiency core cluster. Additionally, with each new SoC, Apple changes the sensor keys. As a result, it takes time to determine which SMC values correspond to the appropriate sensors. If anyone knows how to accurately match the sensors for Apple Silicon, please contact me.&lt;/p&gt; 
&lt;h3&gt;App crash – what to do?&lt;/h3&gt; 
&lt;p&gt;First, ensure that you are using the latest version of Stats. There is a high chance that a fix preventing the crash has already been released. If you are already running the latest version, check the open issues. Only if none of the existing issues address your problem should you open a new issue.&lt;/p&gt; 
&lt;h3&gt;Why my issue was closed without any response?&lt;/h3&gt; 
&lt;p&gt;Most probably because it&#39;s a duplicated issue and there is an answer to the question, report, or proposition. Please use a search by closed issues to get an answer. So, if your issue was closed without any response, most probably it already has a response.&lt;/p&gt; 
&lt;h3&gt;External API&lt;/h3&gt; 
&lt;p&gt;Stats uses some external APIs, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.mac-stats.com&quot;&gt;https://api.mac-stats.com&lt;/a&gt; – For update checks and retrieving the public IP address&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.github.com&quot;&gt;https://api.github.com&lt;/a&gt; – Fallback for update checks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both of these APIs are used to check for updates. Additionally, an external request is required to obtain the public IP address. I do not want to use any third-party providers for retrieving the public IP address, so I use my own server for this purpose.&lt;/p&gt; 
&lt;p&gt;If you have concerns about these requests, you have a few options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;propose a PR that allows these features to work without an external server&lt;/li&gt; 
 &lt;li&gt;block both of these servers using any network filtering app (if you&#39;re reading this, you&#39;re likely using something like Little Snitch, so you can easily do this). In this case do not expect to receive any updates or see your public IP in the network module.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Polski&lt;/li&gt; 
 &lt;li&gt;Українська&lt;/li&gt; 
 &lt;li&gt;Русский&lt;/li&gt; 
 &lt;li&gt;中文 (简体) (thanks to &lt;a href=&quot;https://github.com/chenguokai&quot;&gt;chenguokai&lt;/a&gt;, &lt;a href=&quot;https://github.com/Tai-Zhou&quot;&gt;Tai-Zhou&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Jerry23011&quot;&gt;Jerry&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Türkçe (thanks to &lt;a href=&quot;https://github.com/yusufozgul&quot;&gt;yusufozgul&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;한국어 (thanks to &lt;a href=&quot;https://github.com/escapeanaemia&quot;&gt;escapeanaemia&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamhslee&quot;&gt;iamhslee&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;German (thanks to &lt;a href=&quot;https://github.com/natterstefan&quot;&gt;natterstefan&lt;/a&gt; and &lt;a href=&quot;https://github.com/aneitel&quot;&gt;aneitel&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;中文 (繁體) (thanks to &lt;a href=&quot;https://github.com/iamch15542&quot;&gt;iamch15542&lt;/a&gt; and &lt;a href=&quot;https://github.com/jrthsr700tmax&quot;&gt;jrthsr700tmax&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Spanish (thanks to &lt;a href=&quot;https://github.com/jcconca&quot;&gt;jcconca&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Vietnamese (thanks to &lt;a href=&quot;https://github.com/xuandung38&quot;&gt;HXD.VN&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;French (thanks to &lt;a href=&quot;https://github.com/RomainLt&quot;&gt;RomainLt&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Italian (thanks to &lt;a href=&quot;https://github.com/gmcinalli&quot;&gt;gmcinalli&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Portuguese (Brazil) (thanks to &lt;a href=&quot;https://github.com/marcelochaves95&quot;&gt;marcelochaves95&lt;/a&gt; and &lt;a href=&quot;https://github.com/pedroserigatto&quot;&gt;pedroserigatto&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Norwegian Bokmål (thanks to &lt;a href=&quot;https://github.com/rubjo&quot;&gt;rubjo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;日本語 (thanks to &lt;a href=&quot;https://github.com/treastrain&quot;&gt;treastrain&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Portuguese (Portugal) (thanks to &lt;a href=&quot;https://github.com/AdamModus&quot;&gt;AdamModus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Czech (thanks to &lt;a href=&quot;https://github.com/mpl75&quot;&gt;mpl75&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Magyar (thanks to &lt;a href=&quot;https://github.com/moriczr&quot;&gt;moriczr&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Bulgarian (thanks to &lt;a href=&quot;https://github.com/zbrox&quot;&gt;zbrox&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Romanian (thanks to &lt;a href=&quot;https://github.com/razluta&quot;&gt;razluta&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Dutch (thanks to &lt;a href=&quot;https://github.com/ngohungphuc&quot;&gt;ngohungphuc&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hrvatski (thanks to &lt;a href=&quot;https://github.com/milotype&quot;&gt;milotype&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Danish (thanks to &lt;a href=&quot;https://github.com/casperes1996&quot;&gt;casperes1996&lt;/a&gt; and &lt;a href=&quot;https://github.com/aleksanderbl29&quot;&gt;aleksanderbl29&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Catalan (thanks to &lt;a href=&quot;https://github.com/davidalonso&quot;&gt;davidalonso&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Indonesian (thanks to &lt;a href=&quot;https://github.com/yooody&quot;&gt;yooody&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hebrew (thanks to &lt;a href=&quot;https://github.com/BadSugar&quot;&gt;BadSugar&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Slovenian (thanks to &lt;a href=&quot;https://github.com/zigapovhe&quot;&gt;zigapovhe&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Greek (thanks to &lt;a href=&quot;https://github.com/sudoxcess&quot;&gt;sudoxcess&lt;/a&gt; and &lt;a href=&quot;https://github.com/vaionicle&quot;&gt;vaionicle&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Persian (thanks to &lt;a href=&quot;https://github.com/ShawnAlisson&quot;&gt;ShawnAlisson&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Slovenský (thanks to &lt;a href=&quot;https://github.com/martinbernat&quot;&gt;martinbernat&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Thai (thanks to &lt;a href=&quot;https://github.com/apiphoomchu&quot;&gt;apiphoomchu&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Estonian (thanks to &lt;a href=&quot;https://github.com/postylem&quot;&gt;postylem&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hindi (thanks to &lt;a href=&quot;https://github.com/patiljignesh&quot;&gt;patiljignesh&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Finnish (thanks to &lt;a href=&quot;https://github.com/eightscrow&quot;&gt;eightscrow&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can help by adding a new language or improving the existing translation.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/raw/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stripe/stripe-ios</title>
      <link>https://github.com/stripe/stripe-ios</link>
      <description>&lt;p&gt;Stripe iOS SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stripe iOS SDK&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/?q=author%3Astripe%20name%3Astripe&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Stripe.svg?style=flat&quot; alt=&quot;CocoaPods&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/stripe/stripe-ios/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/Stripe.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/stripe/stripe-ios#&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/Stripe.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Want to chat live with Stripe engineers? Join us on our &lt;a href=&quot;https://stripe.com/go/developer-chat&quot;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The Stripe iOS SDK makes it quick and easy to build an excellent payment experience in your iOS app. We provide powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users&#39; payment details. We also expose the low-level APIs that power those UIs so that you can build fully custom experiences.&lt;/p&gt; 
&lt;p&gt;Get started with our &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&quot;&gt;📚 integration guides&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Examples&quot;&gt;example projects&lt;/a&gt;, or &lt;a href=&quot;https://stripe.dev/stripe-ios/docs/index.html&quot;&gt;📘 browse the SDK reference&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Updating to a newer version of the SDK? See our &lt;a href=&quot;https://github.com/stripe/stripe-ios/raw/master/MIGRATING.md&quot;&gt;migration guide&lt;/a&gt; and &lt;a href=&quot;https://github.com/stripe/stripe-ios/raw/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Table of contents&lt;/h1&gt; 
&lt;!-- NOTE: Use case-sensitive anchor links for docc compatibility --&gt; 
&lt;!--ts--&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Releases&quot;&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Integration&quot;&gt;Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Building-from-source&quot;&gt;Building from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Card-scanning&quot;&gt;Card scanning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Migrating-from-older-versions&quot;&gt;Migrating&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Code-style&quot;&gt;Code Style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Licenses&quot;&gt;Licenses&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!--te--&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Simplified security&lt;/strong&gt;: We make it simple for you to collect sensitive data such as credit card numbers and remain &lt;a href=&quot;https://stripe.com/docs/security#pci-dss-guidelines&quot;&gt;PCI compliant&lt;/a&gt;. This means the sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our &lt;a href=&quot;https://stripe.com/docs/security&quot;&gt;integration security guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apple Pay&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeApplePay/README.md&quot;&gt;StripeApplePay&lt;/a&gt; provides a &lt;a href=&quot;https://stripe.com/docs/apple-pay&quot;&gt;seamless integration with Apple Pay&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SCA-ready&lt;/strong&gt;: The SDK automatically performs native &lt;a href=&quot;https://stripe.com/docs/payments/3d-secure&quot;&gt;3D Secure authentication&lt;/a&gt; if needed to comply with &lt;a href=&quot;https://stripe.com/docs/strong-customer-authentication&quot;&gt;Strong Customer Authentication&lt;/a&gt; regulation in Europe.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Native UI&lt;/strong&gt;: We provide native screens and elements to collect payment details. For example, &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&quot;&gt;PaymentSheet&lt;/a&gt; is a prebuilt UI that combines all the steps required to pay - collecting payment details, billing details, and confirming the payment - into a single sheet that displays on top of your app.&lt;/p&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/89988962/153276097-9b3369a0-e732-45c4-96ec-ff9d48ad0fb6.png&quot; alt=&quot;PaymentSheet&quot; align=&quot;center&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Stripe API&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePayments/README.md&quot;&gt;StripePayments&lt;/a&gt; provides &lt;a href=&quot;https://stripe.dev/stripe-ios/docs/Classes/STPAPIClient.html&quot;&gt;low-level APIs&lt;/a&gt; that correspond to objects and methods in the Stripe API. You can build your own entirely custom UI on top of this layer, while still taking advantage of utilities like &lt;a href=&quot;https://stripe.dev/stripe-ios/docs/Classes/STPCardValidator.html&quot;&gt;STPCardValidator&lt;/a&gt; to validate your user’s input.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Card scanning&lt;/strong&gt;: We support card scanning on iOS 13 and higher. See our &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/#Card-scanning&quot;&gt;Card scanning&lt;/a&gt; section.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App Clips&lt;/strong&gt;: The &lt;code&gt;StripeApplePay&lt;/code&gt; module provides a &lt;a href=&quot;https://stripe.com/docs/apple-pay#app-clips&quot;&gt;lightweight SDK for offering Apple Pay in an App Clip&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Localized&lt;/strong&gt;: We support the following localizations: Bulgarian, Catalan, Chinese (Hong Kong), Chinese (Simplified), Chinese (Traditional), Croatian, Czech, Danish, Dutch, English (US), English (United Kingdom), Estonian, Filipino, Finnish, French, French (Canada), German, Greek, Hungarian, Indonesian, Italian, Japanese, Korean, Latvian, Lithuanian, Malay, Maltese, Norwegian Bokmål, Norwegian Nynorsk (Norway), Polish, Portuguese, Portuguese (Brazil), Romanian, Russian, Slovak, Slovenian, Spanish, Spanish (Latin America), Swedish, Turkish, Thai and Vietnamese.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Identity&lt;/strong&gt;: Learn about our &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeIdentity/README.md&quot;&gt;Stripe Identity iOS SDK&lt;/a&gt; to verify the identity of your users.&lt;/p&gt; 
&lt;h4&gt;Recommended usage&lt;/h4&gt; 
&lt;p&gt;If you&#39;re selling digital products or services that will be consumed within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use Apple&#39;s in-app purchase APIs. See the &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/#payments&quot;&gt;App Store review guidelines&lt;/a&gt; for more information. For all other scenarios you can use this SDK to process payments via Stripe.&lt;/p&gt; 
&lt;h4&gt;Privacy&lt;/h4&gt; 
&lt;p&gt;The Stripe iOS SDK collects data to help us improve our products and prevent fraud. This data is never used for advertising and is not rented, sold, or given to advertisers. Our full privacy policy is available at &lt;a href=&quot;https://stripe.com/privacy&quot;&gt;https://stripe.com/privacy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For help with Apple&#39;s App Privacy Details form in App Store Connect, visit &lt;a href=&quot;https://support.stripe.com/questions/stripe-ios-sdk-privacy-details&quot;&gt;Stripe iOS SDK Privacy Details&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;!-- 
  EmergeTools project must be made public before adding to this table:
  https://www.emergetools.com/settings?tab=app-display-options&amp;cards=public_org_apps

  NOTE: Pad `Size` col with &amp;nbsp; to prevent table from shrinking badge images and maintain readability  
 --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Size&amp;nbsp;(&lt;a href=&quot;https://docs.emergetools.com/docs/ios-app-size#download-vs-install-size&quot;&gt;Download&amp;nbsp;→&amp;nbsp;Install&lt;/a&gt;)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePaymentSheet&quot;&gt;StripePaymentSheet&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stripe&#39;s &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;amp;ui=payment-sheet&quot;&gt;prebuilt payment UI&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripePaymentSheetSize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripePaymentSheetSize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripePaymentSheet&amp;amp;logo=apple&quot; alt=&quot;StripePaymentSheet size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeConnect&quot;&gt;StripeConnect&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Connect embedded components to add connected account dashboard functionality to your app.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripeConnectSize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripeConnectSize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripeConnect&amp;amp;logo=apple&quot; alt=&quot;StripeConnect size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeIdentity&quot;&gt;StripeIdentity&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Securely capture ID documents and selfies on iOS for use with &lt;a href=&quot;https://docs.stripe.com/identity&quot;&gt;Stripe&#39;s Identity API&lt;/a&gt; to confirm the identity of global users.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripeIdentitySize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripeIdentitySize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripeIdentity&amp;amp;logo=apple&quot; alt=&quot;StripeIdentity size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeFinancialConnections&quot;&gt;StripeFinancialConnections&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Securely connect financial accounts to Stripe&#39;s merchant account with &lt;a href=&quot;https://docs.stripe.com/financial-connections&quot;&gt;Stripe Financial Connections&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripeFinancialConnectionsSize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripeFinancialConnectionsSize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripeFinancialConnections&amp;amp;logo=apple&quot; alt=&quot;StripeFinancialConnections size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stripe&lt;/td&gt; 
   &lt;td&gt;Contains all the below frameworks, plus &lt;a href=&quot;https://stripe.com/docs/issuing/cards/digital-wallets?platform=iOS&quot;&gt;Issuing&lt;/a&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripeSize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripeSize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=Stripe&amp;amp;logo=apple&quot; alt=&quot;Stripe size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeApplePay&quot;&gt;StripeApplePay&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/docs/apple-pay&quot;&gt;Apple Pay support&lt;/a&gt;, including &lt;code&gt;STPApplePayContext&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripeApplePaySize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripeApplePaySize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripeApplePay&amp;amp;logo=apple&quot; alt=&quot;StripeApplePay size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePayments&quot;&gt;StripePayments&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bindings for the Stripe Payments API.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripePaymentsSize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripePaymentsSize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripePayments&amp;amp;logo=apple&quot; alt=&quot;StripePayments size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePaymentsUI&quot;&gt;StripePaymentsUI&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bindings for the Stripe Payments API, &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;amp;ui=custom&quot;&gt;STPPaymentCardTextField&lt;/a&gt;, STPCardFormView, and other UI elements.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.emergetools.com/app/example/ios/com.stripe.StripePaymentsUISize/release?utm_campaign=badge-data&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fwww.emergetools.com%2Fapi%2Fv2%2Fpublic_new_build%3FexampleId%3Dcom.stripe.StripePaymentsUISize%26platform%3Dios%26badgeOption%3Ddownload_and_install_size%26buildType%3Drelease&amp;amp;query=$.badgeMetadata&amp;amp;label=StripePaymentsUI&amp;amp;logo=apple&quot; alt=&quot;StripePaymentsUI size&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;We support Cocoapods and Swift Package Manager.&lt;/p&gt; 
&lt;p&gt;If you link the library manually, use a version from our &lt;a href=&quot;https://github.com/stripe/stripe-ios/releases&quot;&gt;releases&lt;/a&gt; page and make sure to embed &lt;ins&gt;all&lt;/ins&gt; of the required frameworks.&lt;/p&gt; 
&lt;p&gt;For the &lt;code&gt;Stripe&lt;/code&gt; module, link the following frameworks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Stripe.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Stripe3DS2.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;StripeApplePay.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;StripePayments.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;StripePaymentsUI.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;StripeCore.xcframework&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;StripeUICore.xcframework&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For other modules, follow the instructions below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeApplePay/README.md#manual-linking&quot;&gt;StripeApplePay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeConnect/README.md#manual-linking&quot;&gt;StripeConnect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeFinancialConnections/README.md#manual-linking&quot;&gt;StripeFinancialConnections&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripeIdentity/README.md#manual-linking&quot;&gt;StripeIdentity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePaymentSheet/README.md#manual-linking&quot;&gt;StripePaymentSheet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePayments/README.md#manual-linking&quot;&gt;StripePayments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/StripePaymentsUI/README.md#manual-linking&quot;&gt;StripePaymentsUI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;re reading this on GitHub.com, please make sure you are looking at the &lt;a href=&quot;https://github.com/stripe/stripe-ios/tags&quot;&gt;tagged version&lt;/a&gt; that corresponds to the release you have installed. Otherwise, the instructions and example code may be mismatched with your copy.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;The Stripe iOS SDK requires Xcode 15 or later and is compatible with apps targeting iOS 13 or above. We support Catalyst on macOS 11 or later.&lt;/p&gt; 
&lt;p&gt;For iOS 12 support, please use &lt;a href=&quot;https://github.com/stripe/stripe-ios/tree/v22.8.4&quot;&gt;v22.8.4&lt;/a&gt;. For iOS 11 support, please use &lt;a href=&quot;https://github.com/stripe/stripe-ios/tree/v21.13.0&quot;&gt;v21.13.0&lt;/a&gt;. For iOS 10, please use &lt;a href=&quot;https://github.com/stripe/stripe-ios/tree/v19.4.0&quot;&gt;v19.4.0&lt;/a&gt;. If you need to support iOS 9, use &lt;a href=&quot;https://github.com/stripe/stripe-ios/tree/v17.0.2&quot;&gt;v17.0.2&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Integration&lt;/h3&gt; 
&lt;p&gt;Get started with our &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&quot;&gt;📚 integration guides&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/Example&quot;&gt;example projects&lt;/a&gt;, or &lt;a href=&quot;https://stripe.dev/stripe-ios/docs/index.html&quot;&gt;📘 browse the SDK reference&lt;/a&gt; for fine-grained documentation of all the classes and methods in the SDK.&lt;/p&gt; 
&lt;h3&gt;Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/Example/PaymentSheet%20Example&quot;&gt;Prebuilt UI&lt;/a&gt; (Recommended)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;This example demonstrates how to build a payment flow using &lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&quot;&gt;&lt;code&gt;PaymentSheet&lt;/code&gt;&lt;/a&gt;, an embeddable native UI component that lets you accept &lt;a href=&quot;https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support&quot;&gt;10+ payment methods&lt;/a&gt; with a single integration.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/Example/Non-Card%20Payment%20Examples&quot;&gt;Non-Card Payment Examples&lt;/a&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;This example demonstrates how to manually accept various payment methods using the Stripe API.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Card scanning&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://stripe.com/docs/payments/accept-a-payment?platform=ios&quot;&gt;PaymentSheet&lt;/a&gt; offers built-in card scanning. To enable card scanning, you&#39;ll need to set &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; in your application&#39;s plist, and provide a reason for accessing the camera (e.g. &quot;To scan cards&quot;). Card scanning is supported on devices with iOS 13 or higher.&lt;/p&gt; 
&lt;p&gt;You can demo this feature in our &lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/Example/PaymentSheet%20Example&quot;&gt;PaymentSheet example app&lt;/a&gt;. When you run the example app on a device, you&#39;ll see a &quot;Scan Card&quot; button when adding a new card.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions of any kind including new features, bug fixes, and documentation improvements. Please first open an issue describing what you want to build if it is a major change so that we can discuss how to move forward. Otherwise, go ahead and open a pull request for minor changes such as typo fixes and one liners.&lt;/p&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the root of the repo, run &lt;code&gt;bundle install &amp;amp;&amp;amp; bundle exec fastlane stripeios_tests&lt;/code&gt;. This will install the test dependencies and run the tests.&lt;/li&gt; 
 &lt;li&gt;Once you have run this once, you can also run the tests in Xcode from the &lt;code&gt;StripeiOS&lt;/code&gt; target in &lt;code&gt;Stripe.xcworkspace&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To re-record snapshot tests, use the &lt;code&gt;bundle exec ruby ci_scripts/snapshots.rb --record&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Migrating from older versions&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/stripe/stripe-ios/raw/master/MIGRATING.md&quot;&gt;MIGRATING.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Code style&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftlint&lt;/a&gt; to enforce code style.&lt;/p&gt; 
&lt;p&gt;To install it, run &lt;code&gt;brew install swiftlint&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To lint your code before pushing you can run &lt;code&gt;ci_scripts/lint_modified_files.sh&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can also add this script as a pre-push hook by running &lt;code&gt;ln -s &quot;$(pwd)/ci_scripts/lint_modified_files.sh&quot; .git/hooks/pre-push &amp;amp;&amp;amp; chmod +x .git/hooks/pre-push&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To format modified files automatically, you can use &lt;code&gt;ci_scripts/format_modified_files.sh&lt;/code&gt; and you can add it as a pre-commit hook using &lt;code&gt;ln -s &quot;$(pwd)/ci_scripts/format_modified_files.sh&quot; .git/hooks/pre-commit &amp;amp;&amp;amp; chmod +x .git/hooks/pre-commit&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stripe/stripe-ios/master/LICENSE&quot;&gt;Stripe iOS SDK License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>altstoreio/AltStore</title>
      <link>https://github.com/altstoreio/AltStore</link>
      <description>&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltStore&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://swift.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&quot; alt=&quot;Swift Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/agpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License: AGPL v3&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt; 
&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps — primarily Delta, &lt;a href=&quot;https://github.com/rileytestut/Delta&quot;&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I&#39;m beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! 🙂).&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt; 
 &lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt; 
 &lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt; 
 &lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Minimum Project Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 15&lt;/li&gt; 
 &lt;li&gt;Swift 5.9&lt;/li&gt; 
 &lt;li&gt;iOS 14.0 (AltStore)&lt;/li&gt; 
 &lt;li&gt;macOS 11.0 (AltServer)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Overview&lt;/h2&gt; 
&lt;h3&gt;AltStore&lt;/h3&gt; 
&lt;p&gt;AltStore is a just regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore&#39;s functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Core Data&lt;/li&gt; 
 &lt;li&gt;Storyboards/Nibs&lt;/li&gt; 
 &lt;li&gt;Auto Layout&lt;/li&gt; 
 &lt;li&gt;Background App Refresh&lt;/li&gt; 
 &lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;AltServer&lt;/h3&gt; 
&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt; 
&lt;h3&gt;AltKit&lt;/h3&gt; 
&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt; 
&lt;h3&gt;AltSign&lt;/h3&gt; 
&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple&#39;s servers and resign apps. For more info, check the &lt;a href=&quot;https://github.com/rileytestut/altsign&quot;&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Roxas&lt;/h3&gt; 
&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href=&quot;https://github.com/rileytestut/roxas&quot;&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Compilation Instructions&lt;/h2&gt; 
&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you&#39;re already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Update submodules: &lt;pre&gt;&lt;code&gt;cd AltStore 
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device&#39;s UDID. Normally, AltServer embeds the device&#39;s UDID in AltStore&#39;s Info.plist during installation. When running through Xcode you&#39;ll need to set the value yourself or else AltStore won&#39;t resign (or even install) apps for the proper device.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer&#39;s serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn&#39;t strictly necessary, because if AltStore can&#39;t find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt; 
 &lt;li&gt;Build + run app! 🎉&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; 
&lt;h2&gt;Contact Me&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Email: &lt;a href=&quot;mailto:riley@altstore.io&quot;&gt;riley@altstore.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Mastodon (Preferred): &lt;a href=&quot;https://mastodon.social/@rileytestut&quot;&gt;@rileytestut@mastodon.social&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Twitter (Less active nowadays): &lt;a href=&quot;https://twitter.com/rileytestut&quot;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href=&quot;https://altstore.io/faq/&quot;&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LoopKit/Loop</title>
      <link>https://github.com/LoopKit/Loop</link>
      <description>&lt;p&gt;An automated insulin delivery app for iOS, built on LoopKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Loop for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Loop/DerivedAssetsBase.xcassets/AppIcon.appiconset/Icon-Small-40%402x.png?raw=true&quot; alt=&quot;App Icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/LoopKit/Loop&quot;&gt;&lt;img src=&quot;https://travis-ci.org/LoopKit/Loop.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://loop.zulipchat.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&quot; alt=&quot;Join the chat at https://loop.zulipchat.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.&lt;/p&gt; 
&lt;p&gt;Loop is built on top of &lt;a href=&quot;https://github.com/LoopKit/LoopKit&quot;&gt;LoopKit&lt;/a&gt;. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.&lt;/p&gt; 
&lt;p&gt;Please understand that this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is highly experimental&lt;/li&gt; 
 &lt;li&gt;Is not approved for therapy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png?raw=true&quot; alt=&quot;Screenshot of status screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png?raw=true&quot; alt=&quot;Screenshot of battery change notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png?raw=true&quot; alt=&quot;Screenshot of loop failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png?raw=true&quot; alt=&quot;Screenshot of glucose complication on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png?raw=true&quot; alt=&quot;Screenshot of carb entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png?raw=true&quot; alt=&quot;Screenshot of the app menu on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Please visit the &lt;a href=&quot;https://loopkit.github.io/loopdocs/&quot;&gt;Loop Docs&lt;/a&gt; for installation, algorithm, and other details.&lt;/p&gt; 
&lt;p&gt;For FAQs, how to contribute to open source aspects of Loop and other tips, refer to the &lt;a href=&quot;https://github.com/LoopKit/Loop/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;(Note: there is also a tab for the Wiki at the top of this page)&lt;/p&gt; 
&lt;h1&gt;License and Code of Conduct&lt;/h1&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/LICENSE.md&quot;&gt;LICENSE&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>groue/GRDB.swift</title>
      <link>https://github.com/groue/GRDB.swift</link>
      <description>&lt;p&gt;A toolkit for SQLite databases, with a focus on application development&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB~dark.png&quot; /&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&quot; /&gt; 
 &lt;img alt=&quot;GRDB: A toolkit for SQLite databases, with a focus on application development.&quot; src=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&quot; /&gt; 
&lt;/picture&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;A toolkit for SQLite databases, with a focus on application development&lt;/strong&gt;&lt;br /&gt; Proudly serving the community since 2015 &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;&lt;img alt=&quot;Swift 6&quot; src=&quot;https://img.shields.io/badge/swift-6-orange.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/groue/GRDB.swift/raw/master/LICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml&quot;&gt;&lt;img alt=&quot;CI Status&quot; src=&quot;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml/badge.svg?branch=master&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: July 23, 2025 • &lt;a href=&quot;https://github.com/groue/GRDB.swift/tree/v7.6.1&quot;&gt;version 7.6.1&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB7MigrationGuide.md&quot;&gt;Migrating From GRDB 6 to GRDB 7&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 7.0+ • SQLite 3.20.0+ • Swift 6+ / Xcode 16+&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release announcements and usage tips: follow &lt;a href=&quot;https://hachyderm.io/@groue&quot;&gt;@groue@hachyderm.io&lt;/a&gt; on Mastodon.&lt;/li&gt; 
 &lt;li&gt;Report bugs in a &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/new&quot;&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues?q=is%3Aopen&quot;&gt;existing issues&lt;/a&gt; first.&lt;/li&gt; 
 &lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href=&quot;https://github.com/groue/GRDB.swift/discussions&quot;&gt;GitHub discussions&lt;/a&gt;, or the &lt;a href=&quot;https://forums.swift.org/c/related-projects/grdb&quot;&gt;GRDB forums&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is GRDB?&lt;/h2&gt; 
&lt;p&gt;Use this library to save your application’s permanent data into SQLite databases. It comes with built-in tools that address common needs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQL Generation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Enhance your application models with persistence and fetching methods, so that you don&#39;t have to deal with SQL and raw database rows when you don&#39;t want to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database Observation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Get notifications when database values are modified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Robust Concurrency&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Multi-threaded applications can efficiently use their databases, including WAL databases that support concurrent reads and writes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Evolve the schema of your database as you ship new versions of your application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Leverage your SQLite skills&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Not all developers need advanced SQLite features. But when you do, GRDB is as sharp as you want it to be. Come with your SQL and SQLite skills, or learn new ones as you go!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&quot;&gt;Installation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Start using the database in four steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GRDB

// 1. Open a database connection
let dbQueue = try DatabaseQueue(path: &quot;/path/to/database.sqlite&quot;)

// 2. Define the database schema
try dbQueue.write { db in
    try db.create(table: &quot;player&quot;) { t in
        t.primaryKey(&quot;id&quot;, .text)
        t.column(&quot;name&quot;, .text).notNull()
        t.column(&quot;score&quot;, .integer).notNull()
    }
}

// 3. Define a record type
struct Player: Codable, Identifiable, FetchableRecord, PersistableRecord {
    var id: String
    var name: String
    var score: Int
    
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// 4. Write and read in the database
try dbQueue.write { db in
    try Player(id: &quot;1&quot;, name: &quot;Arthur&quot;, score: 100).insert(db)
    try Player(id: &quot;2&quot;, name: &quot;Barbara&quot;, score: 1000).insert(db)
}

try dbQueue.read { db in
    let player = try Player.find(db, id: &quot;1&quot;))
    
    let bestPlayers = try Player
        .order(\.score.desc)
        .limit(10)
        .fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Access to raw SQL&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL,
          score INT NOT NULL)
        &quot;&quot;&quot;)
    
    try db.execute(sql: &quot;&quot;&quot;
        INSERT INTO player (id, name, score)
        VALUES (?, ?, ?)
        &quot;&quot;&quot;, arguments: [&quot;1&quot;, &quot;Arthur&quot;, 100])
    
    // Avoid SQL injection with SQL interpolation
    let id = &quot;2&quot;
    let name = &quot;O&#39;Brien&quot;
    let score = 1000
    try db.execute(literal: &quot;&quot;&quot;
        INSERT INTO player (id, name, score)
        VALUES (\(id), \(name), \(score))
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;Executing Updates&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Access to raw database rows and values&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Fetch database rows
    let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM player&quot;)
    while let row = try rows.next() {
        let id: String = row[&quot;id&quot;]
        let name: String = row[&quot;name&quot;]
        let score: Int = row[&quot;score&quot;]
    }
    
    // Fetch values
    let playerCount = try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) FROM player&quot;)! // Int
    let playerNames = try String.fetchAll(db, sql: &quot;SELECT name FROM player&quot;) // [String]
}

let playerCount = try dbQueue.read { db in
    try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) FROM player&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Database model types aka &quot;records&quot;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, Identifiable, FetchableRecord, PersistableRecord {
    var id: String
    var name: String
    var score: Int
    
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

try dbQueue.write { db in
    // Create database table
    try db.create(table: &quot;player&quot;) { t in
        t.primaryKey(&quot;id&quot;, .text)
        t.column(&quot;name&quot;, .text).notNull()
        t.column(&quot;score&quot;, .integer).notNull()
    }
    
    // Insert a record
    var player = Player(id: &quot;1&quot;, name: &quot;Arthur&quot;, score: 100)
    try player.insert(db)
    
    // Update a record
    player.score += 10
    try score.update(db)
    
    try player.updateChanges { $0.score += 10 }
    
    // Delete a record
    try player.delete(db)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Query the database with the Swift query interface&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Player
    let player = try Player.find(db, id: &quot;1&quot;)
    
    // Player?
    let arthur = try Player.filter { $0.name == &quot;Arthur&quot; }.fetchOne(db)
    
    // [Player]
    let bestPlayers = try Player.order(\.score.desc).limit(10).fetchAll(db)
    
    // Int
    let playerCount = try Player.fetchCount(db)
    
    // SQL is always welcome
    let players = try Player.fetchAll(db, sql: &quot;SELECT * FROM player&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;Query Interface&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Database changes notifications&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Define the observed value
let observation = ValueObservation.tracking { db in
    try Player.fetchAll(db)
}

// Start observation
let cancellable = observation.start(
    in: dbQueue,
    onError: { error in ... },
    onChange: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Ready-made support for Combine and RxSwift:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Swift concurrency
for try await players in observation.values(in: dbQueue) {
    print(&quot;Fresh players: \(players)&quot;)
}

// Combine
let cancellable = observation.publisher(in: dbQueue).sink(
    receiveCompletion: { completion in ... },
    receiveValue: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) })

// RxSwift
let disposable = observation.rx.observe(in: dbQueue).subscribe(
    onNext: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) },
    onError: { error in ... })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&quot;&gt;Combine Support&lt;/a&gt;, &lt;a href=&quot;https://github.com/RxSwiftCommunity/RxGRDB&quot;&gt;RxGRDB&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href=&quot;http://www.sqlite.org/faq.html&quot;&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href=&quot;http://www.sqlite.org/docs.html&quot;&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Demo Applications &amp;amp; Frequently Asked Questions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Reference&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/&quot;&gt;GRDB Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Getting Started&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;SQLite and SQL&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQLite API&lt;/a&gt;: The low-level SQLite API • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;executing updates&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;fetch queries&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Records and the Query Interface&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL • &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;create tables, indexes, etc&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;associations between record types&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Application Tools&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/migrations&quot;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#backup&quot;&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#interrupt-a-database&quot;&gt;Interrupt a Database&lt;/a&gt;: Abort any pending database operation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesharing&quot;&gt;Sharing a Database&lt;/a&gt;: How to share an SQLite database between multiple processes - recommendations for App Group containers, App Extensions, App Sandbox, and file coordination.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to Know&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;Concurrency&lt;/a&gt;: How to access databases in a multi-threaded application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&quot;&gt;Combine&lt;/a&gt;: Access and observe the database with Combine publishers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&quot;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;Data Protection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Documentation/GRDB7MigrationGuide.md&quot;&gt;Migrating From GRDB 6 to GRDB 7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&quot;&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Companion Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/GRDBQuery&quot;&gt;GRDBQuery&lt;/a&gt;: Access and observe the database from your SwiftUI views.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/GRDBSnapshotTesting&quot;&gt;GRDBSnapshotTesting&lt;/a&gt;: Test your database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sample-code&quot;&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite.&lt;/p&gt; 
&lt;h2&gt;Swift Package Manager&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to &lt;code&gt;https://github.com/groue/GRDB.swift.git&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;GRDB offers two libraries, &lt;code&gt;GRDB&lt;/code&gt; and &lt;code&gt;GRDB-dynamic&lt;/code&gt;. Pick only one. When in doubt, prefer &lt;code&gt;GRDB&lt;/code&gt;. The &lt;code&gt;GRDB-dynamic&lt;/code&gt; library can reveal useful if you are going to link it with multiple targets within your app and only wish to link to a shared, dynamic framework once. See &lt;a href=&quot;https://forums.swift.org/t/how-to-link-a-swift-package-as-dynamic/32062&quot;&gt;How to link a Swift Package as dynamic&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Linux support is provided by contributors. It is not automatically tested, and not officially maintained. If you notice a build or runtime failure on Linux, please open a pull request with the necessary fix, thank you!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;CocoaPods&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;GRDB.swift&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important Note for CocoaPods installation&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Due to an &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/11839&quot;&gt;issue&lt;/a&gt; in CocoaPods, it is currently not possible to deploy new versions of GRDB to CocoaPods. The last version available on CocoaPods is 6.24.1. To install later versions of GRDB using CocoaPods, use one of the following workarounds:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depend on the &lt;code&gt;GRDB7&lt;/code&gt; branch. This is more or less equivalent to what &lt;code&gt;pod &#39;GRDB.swift&#39;, &#39;~&amp;gt; 7.0&#39;&lt;/code&gt; would normally do, if CocoaPods would accept new GRDB versions to be published:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Can&#39;t use semantic versioning due to https://github.com/CocoaPods/CocoaPods/issues/11839
pod &#39;GRDB.swift&#39;, git: &#39;https://github.com/groue/GRDB.swift.git&#39;, branch: &#39;GRDB7&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Depend on a specific version explicitly (Replace the tag with the version you want to use):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Can&#39;t use semantic versioning due to https://github.com/CocoaPods/CocoaPods/issues/11839
# Replace the tag with the tag that you want to use.
pod &#39;GRDB.swift&#39;, git: &#39;https://github.com/groue/GRDB.swift.git&#39;, tag: &#39;v6.29.0&#39; 
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Carthage&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/433&quot;&gt;#433&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manually&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/groue/GRDB.swift/releases&quot;&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Database Connections&lt;/h1&gt; 
&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;&lt;code&gt;DatabaseQueue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;&lt;code&gt;DatabasePool&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GRDB

// Pick one:
let dbQueue = try DatabaseQueue(path: &quot;/path/to/database.sqlite&quot;)
let dbPool = try DatabasePool(path: &quot;/path/to/database.sqlite&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The differences are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt; 
 &lt;li&gt;Database pools open your SQLite database in the &lt;a href=&quot;https://www.sqlite.org/wal.html&quot;&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt; 
 &lt;li&gt;Database queues support &lt;a href=&quot;https://www.sqlite.org/inmemorydb.html&quot;&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;If you are not sure, choose &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;&lt;code&gt;DatabaseQueue&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; You will always be able to switch to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;&lt;code&gt;DatabasePool&lt;/code&gt;&lt;/a&gt; later.&lt;/p&gt; 
&lt;p&gt;For more information and tips when opening connections, see &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;Database Connections&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;SQLite API&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;Executing Updates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;Fetch Queries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&quot;&gt;Data&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&quot;&gt;Swift enums&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt;: the protocol for custom value types&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactions&quot;&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced topics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&quot;&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschemaintrospection&quot;&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;Row Adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#raw-sqlite-pointers&quot;&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Executing Updates&lt;/h2&gt; 
&lt;p&gt;Once granted with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;, the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/execute(sql:arguments:)&quot;&gt;&lt;code&gt;execute(sql:arguments:)&lt;/code&gt;&lt;/a&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            score INT)
        &quot;&quot;&quot;)
    
    try db.execute(
        sql: &quot;INSERT INTO player (name, score) VALUES (?, ?)&quot;,
        arguments: [&quot;Barbara&quot;, 1000])
    
    try db.execute(
        sql: &quot;UPDATE player SET score = :score WHERE id = :id&quot;,
        arguments: [&quot;score&quot;: 1000, &quot;id&quot;: 1])
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; 
&lt;p&gt;You can also embed query arguments right into your SQL queries, with &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/execute(literal:)&quot;&gt;&lt;code&gt;execute(literal:)&lt;/code&gt;&lt;/a&gt;, as in the example below. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let name = &quot;O&#39;Brien&quot;
    let score = 550
    try db.execute(literal: &quot;&quot;&quot;
        INSERT INTO player (name, score) VALUES (\(name), \(score))
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WRONG: don&#39;t embed values in raw SQL strings
let id = 123
let name = textField.text
try db.execute(
    sql: &quot;UPDATE player SET name = &#39;\(name)&#39; WHERE id = \(id)&quot;)

// CORRECT: use arguments dictionary
try db.execute(
    sql: &quot;UPDATE player SET name = :name WHERE id = :id&quot;,
    arguments: [&quot;name&quot;: name, &quot;id&quot;: id])

// CORRECT: use arguments array
try db.execute(
    sql: &quot;UPDATE player SET name = ? WHERE id = ?&quot;,
    arguments: [name, id])

// CORRECT: use SQL Interpolation
try db.execute(
    literal: &quot;UPDATE player SET name = \(name) WHERE id = \(id)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(sql: &quot;&quot;&quot;
    INSERT INTO player (name, score) VALUES (?, ?);
    INSERT INTO player (name, score) VALUES (?, ?);
    &quot;&quot;&quot;, arguments: [&quot;Arthur&quot;, 750, &quot;Barbara&quot;, 1000])

try db.execute(literal: &quot;&quot;&quot;
    INSERT INTO player (name, score) VALUES (\(&quot;Arthur&quot;), \(750));
    INSERT INTO player (name, score) VALUES (\(&quot;Barbara&quot;), \(1000));
    &quot;&quot;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you want to make sure that a single statement is executed, use a prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row with &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/lastinsertedrowid&quot;&gt;&lt;code&gt;lastInsertedRowID&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(
    sql: &quot;INSERT INTO player (name, score) VALUES (?, ?)&quot;,
    arguments: [&quot;Arthur&quot;, 1000])
let playerId = db.lastInsertedRowID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Don&#39;t miss &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player = Player(name: &quot;Arthur&quot;, score: 1000)
try player.insert(db)
let playerId = player.id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fetch Queries&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka &quot;records&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    if let row = try Row.fetchOne(db, sql: &quot;SELECT * FROM wine WHERE id = ?&quot;, arguments: [1]) {
        let name: String = row[&quot;name&quot;]
        let color: Color = row[&quot;color&quot;]
        print(name, color)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    let urls = try URL.fetchCursor(db, sql: &quot;SELECT url FROM wine&quot;)
    while let url = try urls.next() {
        print(url)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let wines = try dbQueue.read { db in
    try Wine.fetchAll(db, sql: &quot;SELECT * FROM wine&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;Fetching Methods&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&quot;&gt;Cursors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Fetching Methods&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;row&lt;/a&gt;, simple &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;value&lt;/a&gt;, or custom &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;record&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Row.fetchCursor(...) // A Cursor of Row
try Row.fetchAll(...)    // [Row]
try Row.fetchSet(...)    // Set&amp;lt;Row&amp;gt;
try Row.fetchOne(...)    // Row?
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&quot;&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT ...&quot;) // A Cursor of Row
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let players = try Player.fetchAll(db, sql: &quot;SELECT ...&quot;) // [Player]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchSet&lt;/code&gt; returns a &lt;strong&gt;set&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let names = try String.fetchSet(db, sql: &quot;SELECT ...&quot;) // Set&amp;lt;String&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let count = try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) ...&quot;) // Int?
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;All those fetching methods require an SQL string that contains a single SQL statement.&lt;/strong&gt; When you want to fetch from multiple statements joined with a semicolon, iterate the multiple &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;prepared statements&lt;/a&gt; found in the SQL string.&lt;/p&gt; 
&lt;h3&gt;Cursors&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, a Set, or a Cursor&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; and &lt;code&gt;fetchSet()&lt;/code&gt; methods return regular Swift array and sets, that you iterate like all other arrays and sets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // [Player]
    let players = try Player.fetchAll(db, sql: &quot;SELECT ...&quot;)
    for player in players {
        // use player
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike arrays and sets, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Cursor of Player
    let players = try Player.fetchCursor(db, sql: &quot;SELECT ...&quot;)
    while let player = try players.next() {
        // use player
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don&#39;t extract a cursor out of a database access method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Wrong
let cursor = try dbQueue.read { db in
    try Player.fetchCursor(db, ...)
}
while let player = try cursor.next() { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversely, arrays and sets may be consumed on any thread:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// OK
let array = try dbQueue.read { db in
    try Player.fetchAll(db, ...)
}
for player in array { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays and sets can be iterated many times.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don&#39;t consume much memory. Arrays and sets contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays and sets that have to take the time to copy database values. If you look after extra performance, you may prefer cursors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can feed Swift collections.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You will most of the time use &lt;code&gt;fetchAll&lt;/code&gt; or &lt;code&gt;fetchSet&lt;/code&gt; when you want an array or a set. For more specific needs, you may prefer one of the initializers below. All of them accept an extra optional &lt;code&gt;minimumCapacity&lt;/code&gt; argument which helps optimizing your app when you have an idea of the number of elements in a cursor (the built-in &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchSet&lt;/code&gt; do not perform such an optimization).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; and all types conforming to &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// [String]
let cursor = try String.fetchCursor(db, ...)
let array = try Array(cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Set&amp;lt;Int&amp;gt;
let cursor = try Int.fetchCursor(db, ...)
let set = try Set(cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// [Int64: [Player]]
let cursor = try Player.fetchCursor(db)
let dictionary = try Dictionary(grouping: cursor, by: { $0.teamID })

// [Int64: Player]
let cursor = try Player.fetchCursor(db).map { ($0.id, $0) }
let dictionary = try Dictionary(uniqueKeysWithValues: cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/cursor&quot;&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href=&quot;https://developer.apple.com/reference/swift/lazysequenceprotocol&quot;&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all Github links
try URL
    .fetchCursor(db, sql: &quot;SELECT url FROM link&quot;)
    .filter { url in url.host == &quot;github.com&quot; }
    .forEach { url in print(url) }

// An efficient cursor of coordinates:
let locations = try Row.
    .fetchCursor(db, sql: &quot;SELECT latitude, longitude FROM place&quot;)
    .map { row in
        CLLocationCoordinate2D(latitude: row[0], longitude: row[1])
    }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That&#39;s because Swift sequences can&#39;t handle iteration errors, when reading SQLite results may fail at any time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Don&#39;t modify the results during a cursor iteration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Undefined behavior
while let player = try players.next() {
    try db.execute(sql: &quot;DELETE ...&quot;)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you don&#39;t see, or don&#39;t care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt; 
&lt;h3&gt;Row Queries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&quot;&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;Column Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rows-as-dictionaries&quot;&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Fetching Rows&lt;/h4&gt; 
&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Row.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Row
    try Row.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Row]
    try Row.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Row&amp;gt;
    try Row.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Row?
    
    let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM wine&quot;)
    while let row = try rows.next() {
        let name: String = row[&quot;name&quot;]
        let color: Color = row[&quot;color&quot;]
        print(name, color)
    }
}

let rows = try dbQueue.read { db in
    try Row.fetchAll(db, sql: &quot;SELECT * FROM player&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchAll(db,
    sql: &quot;SELECT * FROM player WHERE name = ?&quot;,
    arguments: [&quot;Arthur&quot;])

let rows = try Row.fetchAll(db,
    sql: &quot;SELECT * FROM player WHERE name = :name&quot;,
    arguments: [&quot;name&quot;: &quot;Arthur&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; 
&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;strong&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Column Values&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = row[0]      // 0 is the leftmost column
let name: String = row[&quot;name&quot;] // Leftmost matching column - lookup is case-insensitive
let name: String = row[Column(&quot;name&quot;)] // Using query interface&#39;s Column
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let bookCount: Int     = row[&quot;bookCount&quot;]
let bookCount64: Int64 = row[&quot;bookCount&quot;]
let hasBooks: Bool     = row[&quot;bookCount&quot;] // false when 0

let string: String     = row[&quot;date&quot;]      // &quot;2015-09-11 18:14:15.123&quot;
let date: Date         = row[&quot;date&quot;]      // Date
self.date = row[&quot;date&quot;] // Depends on the type of the property.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;row[...] as Int
row[...] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Throwing accessors exist as well. Their use is not encouraged, because a database decoding error is a programming error. If an application stores invalid data in the database file, that is a bug that needs to be fixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = try row.decode(String.self, atIndex: 0)
let bookCount = try row.decode(Int.self, forColumn: &quot;bookCount&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let int = row[...] as? Int { ... } // BAD - doesn&#39;t work
if let int = row[...] as Int? { ... } // GOOD
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: avoid nil-coalescing row values, and prefer the &lt;code&gt;coalesce&lt;/code&gt; method instead:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;nickname&quot;] ?? row[&quot;name&quot;]     // BAD - doesn&#39;t work
let name: String? = row.coalesce([&quot;nickname&quot;, &quot;name&quot;]) // GOOD
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt; 
   &lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt; 
   &lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT NULL&quot;)!
row[0] as Int? // nil
row[0] as Int  // fatal error: could not convert NULL to Int.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is one exception, though: the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;row[0] as DatabaseValue // DatabaseValue.null
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;foo&#39; AS foo&quot;)!
row[&quot;missing&quot;] as String? // nil
row[&quot;missing&quot;] as String  // fatal error: no such column: missing
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
row[0] as String // &quot;Mom’s birthday&quot;
row[0] as Date?  // fatal error: could not convert &quot;Mom’s birthday&quot; to Date.
row[0] as Date   // fatal error: could not convert &quot;Mom’s birthday&quot; to Date.

let row = try Row.fetchOne(db, sql: &quot;SELECT 256&quot;)!
row[0] as Int    // 256
row[0] as UInt8? // fatal error: could not convert 256 to UInt8.
row[0] as UInt8  // fatal error: could not convert 256 to UInt8.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
let dbValue: DatabaseValue = row[0]
if dbValue.isNull {
    // Handle NULL
} else if let date = Date.fromDatabaseValue(dbValue) {
    // Handle valid date
} else {
    // Handle invalid date
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href=&quot;https://www.sqlite.org/c3ref/column_blob.html&quot;&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT &#39;20 small cigars&#39;&quot;)
while let row = try rows.next() {
    row[0] as Int   // 20
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;DatabaseValue&lt;/h4&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalue&quot;&gt;&lt;code&gt;DatabaseValue&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;DatabaseValue&lt;/code&gt; is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You get &lt;code&gt;DatabaseValue&lt;/code&gt; just like other value types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[0]
let dbValue: DatabaseValue? = row[&quot;name&quot;] // nil if and only if column does not exist

// Check for NULL:
dbValue.isNull // Bool

// The stored value:
dbValue.storage.value // Int64, Double, String, Data, or nil

// All the five storage classes supported by SQLite:
switch dbValue.storage {
case .null:                 print(&quot;NULL&quot;)
case .int64(let int64):     print(&quot;Int64: \(int64)&quot;)
case .double(let double):   print(&quot;Double: \(double)&quot;)
case .string(let string):   print(&quot;String: \(string)&quot;)
case .blob(let data):       print(&quot;Data: \(data)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can extract regular &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from &lt;code&gt;DatabaseValue&lt;/code&gt; with the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible/fromdatabasevalue(_:)-21zzv&quot;&gt;fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[&quot;bookCount&quot;]
let bookCount   = Int.fromDatabaseValue(dbValue)   // Int?
let bookCount64 = Int64.fromDatabaseValue(dbValue) // Int64?
let hasBooks    = Bool.fromDatabaseValue(dbValue)  // Bool?, false when 0

let dbValue: DatabaseValue = row[&quot;date&quot;]
let string = String.fromDatabaseValue(dbValue)     // &quot;2015-09-11 18:14:15.123&quot;
let date   = Date.fromDatabaseValue(dbValue)       // Date?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
let dbValue: DatabaseValue = row[0]
let string = String.fromDatabaseValue(dbValue) // &quot;Mom’s birthday&quot;
let int    = Int.fromDatabaseValue(dbValue)    // nil
let date   = Date.fromDatabaseValue(dbValue)   // nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Rows as Dictionaries&lt;/h4&gt; 
&lt;p&gt;Row adopts the standard &lt;a href=&quot;https://developer.apple.com/documentation/swift/randomaccesscollection&quot;&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// All the (columnName, dbValue) tuples, from left to right:
for (columnName, dbValue) in row {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row: Row = [&quot;name&quot;: &quot;foo&quot;, &quot;date&quot;: nil]
let row = Row([&quot;name&quot;: &quot;foo&quot;, &quot;date&quot;: nil])
let row = Row(/* [AnyHashable: Any] */) // nil if invalid dictionary
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT 1 AS foo, 2 AS foo&quot;)!
row.columnNames    // [&quot;foo&quot;, &quot;foo&quot;]
row.databaseValues // [1, 2]
row[&quot;foo&quot;]         // 1 (leftmost matching column)
for (columnName, dbValue) in row { ... } // (&quot;foo&quot;, 1), (&quot;foo&quot;, 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(row, uniquingKeysWith: { (left, _) in left })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet&#39;s resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(
    row.map { (column, dbValue) in
        (column, dbValue.storage.value as AnyObject)
    },
    uniquingKeysWith: { (_, right) in right })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(
    row.map { (column, dbValue) in
        (column, dbValue.storage.value)
    },
    uniquingKeysWith: { (left, _) in left })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the documentation of &lt;a href=&quot;https://developer.apple.com/documentation/swift/dictionary/2892961-init&quot;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Value Queries&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Instead of rows, you can directly fetch values.&lt;/strong&gt; There are many supported &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value types&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; 
&lt;p&gt;Like rows, fetch values as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Int.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Int
    try Int.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Int]
    try Int.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Int&amp;gt;
    try Int.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Int?
    
    let maxScore = try Int.fetchOne(db, sql: &quot;SELECT MAX(score) FROM player&quot;) // Int?
    let names = try String.fetchAll(db, sql: &quot;SELECT name FROM player&quot;)       // [String]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;Int.fetchOne&lt;/code&gt; returns nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No row:
try Int.fetchOne(db, sql: &quot;SELECT 42 WHERE FALSE&quot;) // nil

// One row with a NULL value:
try Int.fetchOne(db, sql: &quot;SELECT NULL&quot;)           // nil

// One row with a non-NULL value:
try Int.fetchOne(db, sql: &quot;SELECT 42&quot;)             // 42
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For requests which may contain NULL, fetch optionals:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Optional&amp;lt;Int&amp;gt;.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Int?
    try Optional&amp;lt;Int&amp;gt;.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Int?]
    try Optional&amp;lt;Int&amp;gt;.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Int?&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: One advanced use case, when you fetch one value, is to distinguish the cases of a statement that yields no row, or one row with a NULL value. To do so, use &lt;code&gt;Optional&amp;lt;Int&amp;gt;.fetchOne&lt;/code&gt;, which returns a double optional &lt;code&gt;Int??&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No row:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT 42 WHERE FALSE&quot;) // .none
// One row with a NULL value:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT NULL&quot;)           // .some(.none)
// One row with a non-NULL value:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT 42&quot;)             // .some(.some(42))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Values&lt;/h2&gt; 
&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&quot;&gt;Swift enums&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&quot;&gt;Data&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;DateComponents&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;Decimal&lt;/a&gt;, NSNull, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&quot;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&quot;&gt;FTS3Pattern&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&quot;&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Generally speaking, all types that adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Values can be used as &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;statement arguments&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url: URL = ...
let verified: Bool = ...
try db.execute(
    sql: &quot;INSERT INTO link (url, verified) VALUES (?, ?)&quot;,
    arguments: [url, verified])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Values can be &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM link&quot;)
while let row = try rows.next() {
    let url: URL = row[&quot;url&quot;]
    let verified: Bool = row[&quot;verified&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Values can be &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;directly fetched&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let urls = try URL.fetchAll(db, sql: &quot;SELECT url FROM link&quot;)  // [URL]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use values in &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Link: FetchableRecord {
    var url: URL
    var isVerified: Bool
    
    init(row: Row) {
        url = row[&quot;url&quot;]
        isVerified = row[&quot;verified&quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use values in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url: URL = ...
let link = try Link.filter { $0.url == url }.fetchOne(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data (and Memory Savings)&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT data, ...&quot;)
while let row = try rows.next() {
    let data: Data = row[&quot;data&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;while let row = try rows.next() {
    try row.withUnsafeData(name: &quot;data&quot;) { (data: Data?) in
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt; 
&lt;h3&gt;Date and DateComponents&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&quot;&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#datecomponents&quot;&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt; 
&lt;p&gt;Here is how GRDB supports the various &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;SQLite format&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Date&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;DateComponents&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ² / Write ¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Timestamps since unix epoch&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ³&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;¹ Missing components are assumed to be zero. Dates are stored and read in the UTC time zone, unless the format is followed by a timezone indicator ⁽²⁾.&lt;/p&gt; 
&lt;p&gt;² This format may be optionally followed by a timezone indicator of the form &lt;code&gt;[+-]HH:MM&lt;/code&gt; or just &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;³ GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href=&quot;https://en.wikipedia.org/wiki/Julian_day&quot;&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date formats is 0000-9999. You will need to pick another date format when your application needs to process years outside of this range. See the following chapters.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Date&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(
    sql: &quot;INSERT INTO player (creationDate, ...) VALUES (?, ...)&quot;,
    arguments: [Date(), ...])

let row = try Row.fetchOne(db, ...)!
let creationDate: Date = row[&quot;creationDate&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dates are stored using the format &quot;YYYY-MM-DD HH:MM:SS.SSS&quot; in the UTC time zone. It is precise to the millisecond.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt; 
  &lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt; 
  &lt;li&gt;Able to feed &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Precise enough&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date format is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Some applications may prefer another date format:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Some may prefer ISO-8601, with a &lt;code&gt;T&lt;/code&gt; separator.&lt;/li&gt; 
 &lt;li&gt;Some may prefer ISO-8601, with a time zone.&lt;/li&gt; 
 &lt;li&gt;Some may need to store years beyond the 0000-9999 range.&lt;/li&gt; 
 &lt;li&gt;Some may need sub-millisecond precision.&lt;/li&gt; 
 &lt;li&gt;Some may need exact &lt;code&gt;Date&lt;/code&gt; roundtrip.&lt;/li&gt; 
 &lt;li&gt;Etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;You should think twice before choosing a different date format:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ISO-8601 is about &lt;em&gt;exchange and communication&lt;/em&gt;, when SQLite is about &lt;em&gt;storage and data manipulation&lt;/em&gt;. Sharing the same representation in your database and in JSON files only provides a superficial convenience, and should be the least of your priorities. Don&#39;t store dates as ISO-8601 without understanding what you lose. For example, ISO-8601 time zones forbid database-level date comparison.&lt;/li&gt; 
 &lt;li&gt;Sub-millisecond precision and exact &lt;code&gt;Date&lt;/code&gt; roundtrip are not as obvious needs as it seems at first sight. Dates generally don&#39;t precisely roundtrip as soon as they leave your application anyway, because the other systems your app communicates with use their own date representation (the Android version of your app, the server your application is talking to, etc.) On top of that, &lt;code&gt;Date&lt;/code&gt; comparison is at least as hard and nasty as &lt;a href=&quot;https://www.google.com/search?q=floating+point+comparison+is+hard&quot;&gt;floating point comparison&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The customization of date format is explicit. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let date = Date()
let timeInterval = date.timeIntervalSinceReferenceDate
try db.execute(
    sql: &quot;INSERT INTO player (creationDate, ...) VALUES (?, ...)&quot;,
    arguments: [timeInterval, ...])

if let row = try Row.fetchOne(db, ...) {
    let timeInterval: TimeInterval = row[&quot;creationDate&quot;]
    let creationDate = Date(timeIntervalSinceReferenceDate: timeInterval)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more date customization options, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; if you want to define a Date-wrapping type with customized database representation.&lt;/p&gt; 
&lt;h4&gt;DateComponents&lt;/h4&gt; 
&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt; 
&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&quot;&gt;Date&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let components = DateComponents()
components.year = 1973
components.month = 9
components.day = 18

// Store &quot;1973-09-18&quot;
let dbComponents = DatabaseDateComponents(components, format: .YMD)
try db.execute(
    sql: &quot;INSERT INTO player (birthDate, ...) VALUES (?, ...)&quot;,
    arguments: [dbComponents, ...])

// Read &quot;1973-09-18&quot;
let row = try Row.fetchOne(db, sql: &quot;SELECT birthDate ...&quot;)!
let dbComponents: DatabaseDateComponents = row[&quot;birthDate&quot;]
dbComponents.format         // .YMD (the actual format found in the database)
dbComponents.dateComponents // DateComponents
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; and &lt;strong&gt;Decimal&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here is how GRDB supports the various data types supported by SQLite:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Integer&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Double&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;String&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;NSNumber&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;NSDecimalNumber&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Decimal&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;All three types can decode database integers and doubles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let number = try NSNumber.fetchOne(db, sql: &quot;SELECT 10&quot;)            // NSNumber
let number = try NSDecimalNumber.fetchOne(db, sql: &quot;SELECT 1.23&quot;)   // NSDecimalNumber
let number = try Decimal.fetchOne(db, sql: &quot;SELECT -100&quot;)           // Decimal
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;All three types decode database strings as decimal numbers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let number = try NSNumber.fetchOne(db, sql: &quot;SELECT &#39;10&#39;&quot;)          // NSDecimalNumber (sic)
let number = try NSDecimalNumber.fetchOne(db, sql: &quot;SELECT &#39;1.23&#39;&quot;) // NSDecimalNumber
let number = try Decimal.fetchOne(db, sql: &quot;SELECT &#39;-100&#39;&quot;)         // Decimal
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSDecimalNumber&lt;/code&gt; send 64-bit signed integers and doubles in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO transfer VALUES (10)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSNumber(value: 10)])

// INSERT INTO transfer VALUES (10.0)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSNumber(value: 10.0)])

// INSERT INTO transfer VALUES (10)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSDecimalNumber(string: &quot;10.0&quot;)])

// INSERT INTO transfer VALUES (10.5)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSDecimalNumber(string: &quot;10.5&quot;)])
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: since SQLite does not support decimal numbers, sending a non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; can result in a loss of precision during the conversion to double.&lt;/p&gt; 
   &lt;p&gt;Instead of sending non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; to the database, you may prefer:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Send &lt;code&gt;Decimal&lt;/code&gt; instead (those store decimal strings in the database).&lt;/li&gt; 
    &lt;li&gt;Send integers instead (for example, store amounts of cents instead of amounts of Euros).&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Decimal&lt;/code&gt; sends decimal strings in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO transfer VALUES (&#39;10&#39;)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [Decimal(10)])

// INSERT INTO transfer VALUES (&#39;10.5&#39;)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [Decimal(string: &quot;10.5&quot;)!])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;UUID&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as &quot;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&quot;.&lt;/p&gt; 
&lt;h3&gt;Swift Enums&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html&quot;&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Color : Int {
    case red, white, rose
}

enum Grape : String {
    case chardonnay, merlot, riesling
}

// Declare empty DatabaseValueConvertible adoption
extension Color : DatabaseValueConvertible { }
extension Grape : DatabaseValueConvertible { }

// Store
try db.execute(
    sql: &quot;INSERT INTO wine (grape, color) VALUES (?, ?)&quot;,
    arguments: [Grape.merlot, Color.red])

// Read
let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM wine&quot;)
while let row = try rows.next() {
    let grape: Grape = row[&quot;grape&quot;]
    let color: Color = row[&quot;color&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;syrah&#39;&quot;)!

row[0] as String  // &quot;syrah&quot;
row[0] as Grape?  // fatal error: could not convert &quot;syrah&quot; to Grape.
row[0] as Grape   // fatal error: could not convert &quot;syrah&quot; to Grape.

let dbValue: DatabaseValue = row[0]
if dbValue.isNull {
    // Handle NULL
} else if let grape = Grape.fromDatabaseValue(dbValue) {
    // Handle valid grape
} else {
    // Handle unknown grape
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Custom SQL Functions and Aggregates&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT reverse(name) FROM player;   -- custom function
SELECT maxLength(name) FROM player; -- custom aggregate
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&quot;&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-aggregates&quot;&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Custom SQL Functions&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasefunction&quot;&gt;&lt;code&gt;DatabaseFunction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are &quot;pure&quot;, which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let reverse = DatabaseFunction(&quot;reverse&quot;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in
    // Extract string value, if any...
    guard let string = String.fromDatabaseValue(values[0]) else {
        return nil
    }
    // ... and return reversed string:
    return String(string.reversed())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You make a function available to a database connection through its configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.add(function: reverse)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // &quot;oof&quot;
    try String.fetchOne(db, sql: &quot;SELECT reverse(&#39;foo&#39;)&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;When you don&#39;t provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let averageOf = DatabaseFunction(&quot;averageOf&quot;, pure: true) { (values: [DatabaseValue]) in
    let doubles = values.compactMap { Double.fromDatabaseValue($0) }
    return doubles.reduce(0, +) / Double(doubles.count)
}
db.add(function: averageOf)

// 2.0
try Double.fetchOne(db, sql: &quot;SELECT averageOf(1, 2, 3)&quot;)!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let sqrt = DatabaseFunction(&quot;sqrt&quot;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in
    guard let double = Double.fromDatabaseValue(values[0]) else {
        return nil
    }
    guard double &amp;gt;= 0 else {
        throw DatabaseError(message: &quot;invalid negative number&quot;)
    }
    return sqrt(double)
}
db.add(function: sqrt)

// SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number
try Double.fetchOne(db, sql: &quot;SELECT sqrt(-1)&quot;)!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT reverseString(&quot;name&quot;) FROM player
Player.select { reverseString($0.name) }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&quot;&gt;Unicode&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Aggregates&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasefunction&quot;&gt;&lt;code&gt;DatabaseFunction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseaggregate&quot;&gt;&lt;code&gt;DatabaseAggregate&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol DatabaseAggregate {
    // Initializes an aggregate
    init()
    
    // Called at each step of the aggregation
    mutating func step(_ dbValues: [DatabaseValue]) throws
    
    // Returns the final result
    func finalize() throws -&amp;gt; DatabaseValueConvertible?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct MaxLength : DatabaseAggregate {
    var maxLength: Int = 0
    
    mutating func step(_ dbValues: [DatabaseValue]) {
        // At each step, extract string value, if any...
        guard let string = String.fromDatabaseValue(dbValues[0]) else {
            return
        }
        // ... and update the result
        let length = string.count
        if length &amp;gt; maxLength {
            maxLength = length
        }
    }
    
    func finalize() -&amp;gt; DatabaseValueConvertible? {
        maxLength
    }
}

let maxLength = DatabaseFunction(
    &quot;maxLength&quot;,
    argumentCount: 1,
    pure: true,
    aggregate: MaxLength.self)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Like &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&quot;&gt;custom SQL Functions&lt;/a&gt;, you make an aggregate function available to a database connection through its configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.add(function: maxLength)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // Some Int
    try Int.fetchOne(db, sql: &quot;SELECT maxLength(name) FROM player&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; 
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are &quot;pure&quot;, which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT maxLength(&quot;name&quot;) FROM player
let request = Player.select { maxLength($0.name) }
try Int.fetchOne(db, request) // Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Raw SQLite Pointers&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href=&quot;https://www.sqlite.org/c3ref/intro.html&quot;&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href=&quot;https://www.sqlite.org/c3ref/funclist.html&quot;&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To access the C SQLite functions from SQLCipher or the system SQLite, you need to perform an extra import:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SQLite3   // System SQLite
import SQLCipher // SQLCipher

let sqliteVersion = String(cString: sqlite3_libversion())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // The raw pointer to a database connection:
    let sqliteConnection = db.sqliteConnection

    // The raw pointer to a statement:
    let statement = try db.makeStatement(sql: &quot;SELECT ...&quot;)
    let sqliteStatement = statement.sqliteStatement
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Those pointers are owned by GRDB: don&#39;t close connections or finalize statements created by GRDB.&lt;/li&gt; 
  &lt;li&gt;GRDB opens SQLite connections in the &quot;&lt;a href=&quot;https://www.sqlite.org/threadsafe.html&quot;&gt;multi-thread mode&lt;/a&gt;&quot;, which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt; 
  &lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won&#39;t prevent you from shooting yourself in the foot.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Records&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;On top of the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQLite API&lt;/a&gt;, GRDB provides protocols&lt;/strong&gt; that help manipulating database rows as regular objects named &quot;records&quot;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    if var place = try Player.fetchOne(db, id: 1) {
        player.score += 10
        try player.update(db)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you need to open a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;create database tables&lt;/a&gt; first.&lt;/p&gt; 
&lt;p&gt;To define a record type, define a type and extend it with database protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; makes it possible to fetch instances from the database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PersistableRecord&lt;/code&gt; makes it possible to save instances into the database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Codable&lt;/code&gt; (not mandatory) provides ready-made serialization to and from database rows.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Identifiable&lt;/code&gt; (not mandatory) provides extra convenience database methods.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To make it easier to customize database requests, also nest a &lt;code&gt;Columns&lt;/code&gt; enum:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, Identifiable {
    var id: Int64
    var name: String
    var score: Int
    var team: String?
}

// Add database support
extension Player: FetchableRecord, PersistableRecord {
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
        static let team = Column(CodingKeys.team)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&quot;&gt;examples of record definitions&lt;/a&gt; below.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: if you are familiar with Core Data&#39;s NSManagedObject or Realm&#39;s Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming.&lt;/p&gt; 
 &lt;p&gt;Tip: The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt; guide provides general guidance..&lt;/p&gt; 
 &lt;p&gt;Tip: See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt; for sample apps that uses records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#inserting-records&quot;&gt;Inserting Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-records&quot;&gt;Fetching Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#updating-records&quot;&gt;Updating Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#deleting-records&quot;&gt;Deleting Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#counting-records&quot;&gt;Counting Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord Protocol&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods-and-the-returning-clause&quot;&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&quot;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordtimestamps&quot;&gt;Record Timestamps and Transaction Date&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Inserting Records&lt;/h3&gt; 
&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
try player.insert(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;insert&lt;/code&gt; is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Fetching Records&lt;/h3&gt; 
&lt;p&gt;To fetch records from the database, call a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching method&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let arthur = try Player.fetchOne(db,            // Player?
    sql: &quot;SELECT * FROM players WHERE name = ?&quot;,
    arguments: [&quot;Arthur&quot;])

let bestPlayers = try Player                    // [Player]
    .order(\.score.desc)
    .limit(10)
    .fetchAll(db)
    
let spain = try Country.fetchOne(db, id: &quot;ES&quot;)  // Country?
let italy = try Country.find(db, id: &quot;IT&quot;)      // Country
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching from raw SQL is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching without SQL, using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;, is available for types that adopt both &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Updating Records&lt;/h3&gt; 
&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player: Player = ...
player.score = 1000
try player.update(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// does not hit the database if score has not changed
try player.updateChanges(db) {
    $0.score = 1000
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; for batch updates:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player
    .filter { $0.team == &quot;red&quot; }
    .updateAll(db) { $0.score += 1 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; update methods are available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol. Batch updates are available on the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Deleting Records&lt;/h3&gt; 
&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player: Player = ...
try player.delete(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also delete by primary key, unique key, or perform batch deletes (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&quot;&gt;Delete Requests&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, id: 1)
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Country.deleteAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])
try Player
    .filter { $0.email == nil }
    .deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; delete methods are available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol. Batch deletes are available on the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Counting Records&lt;/h3&gt; 
&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let playerCount: Int = try Player.fetchCount(db)

let playerWithEmailCount: Int = try Player
    .filter { $0.email == nil }
    .fetchCount(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;Details follow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&quot;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&quot;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Record Protocols Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: FetchableRecord { ... }

let places = try dbQueue.read { db in
    try Place.fetchAll(db, sql: &quot;SELECT * FROM place&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;FetchableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Decodable&lt;/code&gt; protocol. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; can decode database rows, but it is not able to build SQL requests for you. For that, you also need &lt;code&gt;TableRecord&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord { ... }

let placeCount = try dbQueue.read { db in
    // Generates and runs `SELECT COUNT(*) FROM place`
    try Place.fetchCount(db)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a type adopts both &lt;code&gt;TableRecord&lt;/code&gt; and &lt;code&gt;FetchableRecord&lt;/code&gt;, it can load from those requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord, FetchableRecord { ... }

try dbQueue.read { db in
    let places = try Place.order(\.title).fetchAll(db)
    let paris = try Place.fetchOne(id: 1)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place : PersistableRecord { ... }

try dbQueue.write { db in
    try Place.delete(db, id: 1)
    try Place(...).insert(db)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A persistable record can also &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;PersistableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Encodable&lt;/code&gt; protocol. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FetchableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/fetchablerecord&quot;&gt;&lt;code&gt;FetchableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    /// Row initializer
    init(row: Row) throws
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place {
    var id: Int64?
    var title: String
    var coordinate: CLLocationCoordinate2D
}

extension Place: FetchableRecord {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
    
    init(row: Row) {
        id = row[Columns.id]
        title = row[Columns.title]
        coordinate = CLLocationCoordinate2D(
            latitude: row[Columns.latitude],
            longitude: row[Columns.longitude])
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt; 
&lt;p&gt;When your record type adopts the standard Decodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// That&#39;s all
struct Player: Decodable, FetchableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Place.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments:...) // A Cursor of Place
try Place.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments:...)    // [Place]
try Place.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments:...)    // Set&amp;lt;Place&amp;gt;
try Place.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments:...)    // Place?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for more information about the query arguments.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord&quot;&gt;&lt;code&gt;TableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol TableRecord {
    static var databaseTableName: String { get }
    static var databaseSelection: [any SQLSelectable] { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord { }

print(Place.databaseTableName) // prints &quot;place&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can still provide a custom table name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord {
    static let databaseTableName = &quot;location&quot;
}

print(Place.databaseTableName) // prints &quot;location&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a type adopts both TableRecord and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM place WHERE name = &#39;Paris&#39;
let paris = try Place.filter { $0.name == &quot;Paris&quot; }.fetchOne(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;TableRecord can also fetch deal with primary and unique keys: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&quot;&gt;Fetching by Key&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&quot;&gt;Testing for Record Existence&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;PersistableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/encodablerecord&quot;&gt;&lt;code&gt;EncodableRecord&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/mutablepersistablerecord&quot;&gt;&lt;code&gt;MutablePersistableRecord&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/persistablerecord&quot;&gt;&lt;code&gt;PersistableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Defines how a record encodes itself into the database
protocol EncodableRecord {
    /// Defines the values persisted in the database
    func encode(to container: inout PersistenceContainer) throws
}

// Adds persistence methods
protocol MutablePersistableRecord: TableRecord, EncodableRecord {
    /// Optional method that lets your adopting type store its rowID upon
    /// successful insertion. Don&#39;t call it directly: it is called for you.
    mutating func didInsert(_ inserted: InsertionSuccess)
}

// Adds immutability
protocol PersistableRecord: MutablePersistableRecord {
    /// Non-mutating version of the optional didInsert(_:)
    func didInsert(_ inserted: InsertionSuccess)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(_:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt; 
&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Place: MutablePersistableRecord {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
    
    /// The values persisted in the database
    func encode(to container: inout PersistenceContainer) {
        container[Columns.id] = id
        container[Columns.title] = title
        container[Columns.latitude] = coordinate.latitude
        container[Columns.longitude] = coordinate.longitude
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}

var paris = Place(
    id: nil,
    title: &quot;Paris&quot;,
    coordinate: CLLocationCoordinate2D(latitude: 48.8534100, longitude: 2.3488000))

try paris.insert(db)
paris.id   // some value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When your record type adopts the standard Encodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// That&#39;s all
struct Player: Encodable, MutablePersistableRecord {
    var id: Int64?
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Persistence Methods&lt;/h3&gt; 
&lt;p&gt;Types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol are given methods that insert, update, and delete:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT
try place.insert(db)
let insertedPlace = try place.inserted(db) // non-mutating

// UPDATE
try place.update(db)
try place.update(db, columns: [&quot;title&quot;])

// Maybe UPDATE
try place.updateChanges(db, from: otherPlace)
try place.updateChanges(db) { $0.isFavorite = true }

// INSERT or UPDATE
try place.save(db)
let savedPlace = place.saved(db) // non-mutating

// UPSERT
try place.upsert(db)
let insertedPlace = place.upsertAndFetch(db)

// DELETE
try place.delete(db)

// EXISTENCE CHECK
let exists = try place.exists(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&quot;&gt;Upsert&lt;/a&gt; below for more information about upserts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol comes with batch operations&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE
try Place.updateAll(db, ...)

// DELETE
try Place.deleteAll(db)
try Place.deleteAll(db, ids:...)
try Place.deleteAll(db, keys:...)
try Place.deleteOne(db, id:...)
try Place.deleteOne(db, key:...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information about batch updates, see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&quot;&gt;Update Requests&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;All persistence methods can throw a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&quot;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; throw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt; if the database does not contain any row for the primary key of the record.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database. It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteOne&lt;/code&gt; returns whether a database row was deleted or not. &lt;code&gt;deleteAll&lt;/code&gt; returns the number of deleted rows. &lt;code&gt;updateAll&lt;/code&gt; returns the number of updated rows. &lt;code&gt;updateChanges&lt;/code&gt; returns whether a database row was updated or not.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To customize persistence methods&lt;/strong&gt;, you provide &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;, described below. Do not attempt at overriding the ready-made persistence methods.&lt;/p&gt; 
&lt;h3&gt;Upsert&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.sqlite.org/lang_UPSERT.html&quot;&gt;UPSERT&lt;/a&gt; is an SQLite feature that causes an INSERT to behave as an UPDATE or a no-op if the INSERT would violate a uniqueness constraint (primary key or unique index).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upsert apis are available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With regard to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#available-callbacks&quot;&gt;persistence callbacks&lt;/a&gt;, an upsert behaves exactly like an insert. In particular: the &lt;code&gt;aroundInsert(_:)&lt;/code&gt; and &lt;code&gt;didInsert(_:)&lt;/code&gt; callbacks reports the rowid of the inserted or updated row; &lt;code&gt;willUpdate&lt;/code&gt;, &lt;code&gt;aroundUdate&lt;/code&gt;, &lt;code&gt;didUdate&lt;/code&gt; are not called.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; provides three upsert methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsert(_:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Inserts or updates a record.&lt;/p&gt; &lt;p&gt;The upsert behavior is triggered by a violation of any uniqueness constraint on the table (primary key or unique index). In case of conflict, all columns but the primary key are overwritten with the inserted values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Encodable, PersistableRecord {
    var id: Int64
    var name: String
    var score: Int
}

// INSERT INTO player (id, name, score)
// VALUES (1, &#39;Arthur&#39;, 1000)
// ON CONFLICT DO UPDATE SET
//   name = excluded.name,
//   score = excluded.score
let player = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
try player.upsert(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; (requires &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;Inserts or updates a record, and returns the upserted record.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;onConflict&lt;/code&gt; and &lt;code&gt;doUpdate&lt;/code&gt; arguments let you further control the upsert behavior. Make sure you check the &lt;a href=&quot;https://www.sqlite.org/lang_UPSERT.html&quot;&gt;SQLite UPSERT documentation&lt;/a&gt; for detailed information.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;onConflict&lt;/code&gt;: the &quot;conflict target&quot; is the array of columns in the uniqueness constraint (primary key or unique index) that triggers the upsert.&lt;/p&gt; &lt;p&gt;If empty (the default), all uniqueness constraint are considered.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;doUpdate&lt;/code&gt;: a closure that returns columns assignments to perform in case of conflict. Other columns are overwritten with the inserted values.&lt;/p&gt; &lt;p&gt;By default, all inserted columns but the primary key and the conflict target are overwritten.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In the example below, we upsert the new vocabulary word &quot;jovial&quot;. It is inserted if that word is not already in the dictionary. Otherwise, &lt;code&gt;count&lt;/code&gt; is incremented, &lt;code&gt;isTainted&lt;/code&gt; is not overwritten, and &lt;code&gt;kind&lt;/code&gt; is overwritten:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE vocabulary(
//   word TEXT NOT NULL PRIMARY KEY,
//   kind TEXT NOT NULL,
//   isTainted BOOLEAN DEFAULT 0,
//   count INT DEFAULT 1))
struct Vocabulary: Encodable, PersistableRecord {
    var word: String
    var kind: String
    var isTainted: Bool
}

// INSERT INTO vocabulary(word, kind, isTainted)
// VALUES(&#39;jovial&#39;, &#39;adjective&#39;, 0)
// ON CONFLICT(word) DO UPDATE SET \
//   count = count + 1,   -- on conflict, count is incremented
//   kind = excluded.kind -- on conflict, kind is overwritten
// RETURNING *
let vocabulary = Vocabulary(word: &quot;jovial&quot;, kind: &quot;adjective&quot;, isTainted: false)
let upserted = try vocabulary.upsertAndFetch(
    db, onConflict: [&quot;word&quot;],
    doUpdate: { _ in
        [Column(&quot;count&quot;) += 1,            // on conflict, count is incremented
         Column(&quot;isTainted&quot;).noOverwrite] // on conflict, isTainted is NOT overwritten
    })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;doUpdate&lt;/code&gt; closure accepts an &lt;code&gt;excluded&lt;/code&gt; TableAlias argument that refers to the inserted values that trigger the conflict. You can use it to specify an explicit overwrite, or to perform a computation. In the next example, the upsert keeps the maximum date in case of conflict:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO message(id, text, date)
// VALUES(...)
// ON CONFLICT DO UPDATE SET \
//   text = excluded.text,
//   date = MAX(date, excluded.date)
// RETURNING *
let upserted = try message.upsertAndFetch(doUpdate: { excluded in
    // keep the maximum date in case of conflict
    [Column(&quot;date&quot;).set(to: max(Column(&quot;date&quot;), excluded[&quot;date&quot;]))]
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:as:onConflict:doUpdate:)&lt;/code&gt; (does not require &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;This method is identical to &lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; described above, but you can provide a distinct &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; record type as a result, in order to specify the returned columns.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/h3&gt; 
&lt;p&gt;SQLite is able to return values from a inserted, updated, or deleted row, with the &lt;a href=&quot;https://www.sqlite.org/lang_returning.html&quot;&gt;&lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Support for the &lt;code&gt;RETURNING&lt;/code&gt; clause is available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;RETURNING&lt;/code&gt; clause helps dealing with database features such as auto-incremented ids, default values, and &lt;a href=&quot;https://sqlite.org/gencol.html&quot;&gt;generated columns&lt;/a&gt;. You can, for example, insert a few columns and fetch the default or generated ones in one step.&lt;/p&gt; 
&lt;p&gt;GRDB uses the &lt;code&gt;RETURNING&lt;/code&gt; clause in all persistence methods that contain &lt;code&gt;AndFetch&lt;/code&gt; in their name.&lt;/p&gt; 
&lt;p&gt;For example, given a database table with an auto-incremented primary key and a default score:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          score INTEGER NOT NULL DEFAULT 1000)
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can define a record type with full database information, and another partial record type that deals with a subset of columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A player with full database information
struct Player: Codable, PersistableRecord, FetchableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// A partial player
struct PartialPlayer: Encodable, PersistableRecord {
    static let databaseTableName = &quot;player&quot;
    var name: String
    
    typealias Columns = Player.Columns
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now you can get a full player by inserting a partial one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let partialPlayer = PartialPlayer(name: &quot;Alice&quot;)
    
    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING *
    let player = try partialPlayer.insertAndFetch(db, as: Player.self)
    print(player.id)    // The inserted id
    print(player.name)  // The inserted name
    print(player.score) // The default score
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For extra precision, you can select only the columns you need, and fetch the desired value from the provided prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let partialPlayer = PartialPlayer(name: &quot;Alice&quot;)
    
    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING score
    let score = try partialPlayer.insertAndFetch(db) { statement in
        try Int.fetchOne(statement)
    } select: {
        [$0.score]
    }
    print(score) // Prints 1000, the default score
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other similar persistence methods, such as &lt;code&gt;upsertAndFetch&lt;/code&gt;, &lt;code&gt;saveAndFetch&lt;/code&gt;, &lt;code&gt;updateAndFetch&lt;/code&gt;, &lt;code&gt;updateChangesAndFetch&lt;/code&gt;, etc. They all behave like &lt;code&gt;upsert&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;updateChanges&lt;/code&gt;, except that they return saved values. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Save and return the saved player
let savedPlayer = try player.saveAndFetch(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;Persistence Methods&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&quot;&gt;Upsert&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&quot;&gt;&lt;code&gt;updateChanges&lt;/code&gt; methods&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Batch operations&lt;/strong&gt; can return updated or deleted values:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Make sure you check the &lt;a href=&quot;https://www.sqlite.org/lang_returning.html#limitations_and_caveats&quot;&gt;documentation of the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;, which describes important limitations and caveats for batch operations.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter(...)...

// Fetch all deleted players
// DELETE FROM player RETURNING *
let deletedPlayers = try request.deleteAndFetchAll(db) // [Player]

// Fetch a selection of columns from the deleted rows
// DELETE FROM player RETURNING name
let statement = try request.deleteAndFetchStatement(db) { [$0.name] }
let deletedNames = try String.fetchSet(statement)

// Fetch all updated players
// UPDATE player SET score = score + 10 RETURNING *
let updatedPlayers = try request.updateAndFetchAll(db) { [$0.score += 10] } // [Player]

// Fetch a selection of columns from the updated rows
// UPDATE player SET score = score + 10 RETURNING score
let statement = try request.updateAndFetchStatement(db) {
    [$0.score += 10]
} select: {
    [$0.score]
}
let updatedScores = try Int.fetchAll(statement)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Persistence Callbacks&lt;/h3&gt; 
&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt; 
&lt;p&gt;To this end, your record type can implement &lt;strong&gt;persistence callbacks&lt;/strong&gt;. Callbacks are methods that get called at certain moments of a record&#39;s life cycle. With callbacks it is possible to write code that will run whenever an record is inserted, updated, or deleted.&lt;/p&gt; 
&lt;p&gt;In order to use a callback method, you need to provide its implementation. For example, a frequently used callback is &lt;code&gt;didInsert&lt;/code&gt;, in the case of auto-incremented database ids:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: MutablePersistableRecord {
    var id: Int64?
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}

try dbQueue.write { db in
    var player = Player(id: nil, ...)
    try player.insert(db)
    print(player.id) // didInsert was called: prints some non-nil id
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Callbacks can also help implementing record validation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Link: PersistableRecord {
    var url: URL
    
    func willSave(_ db: Database) throws {
        if url.host == nil {
            throw ValidationError(&quot;url must be absolute.&quot;)
        }
    }
}

try link.insert(db) // Calls the willSave callback
try link.update(db) // Calls the willSave callback
try link.save(db)   // Calls the willSave callback
try link.upsert(db) // Calls the willSave callback
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available Callbacks&lt;/h4&gt; 
&lt;p&gt;Here is a list with all the available &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;persistence callbacks&lt;/a&gt;, listed in the same order in which they will get called during the respective operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Inserting a record (all &lt;code&gt;record.insert&lt;/code&gt; and &lt;code&gt;record.upsert&lt;/code&gt; methods)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;willInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Updating a record (all &lt;code&gt;record.update&lt;/code&gt; methods)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;willUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Deleting a record (only the &lt;code&gt;record.delete(_:)&lt;/code&gt; method)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willDelete&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundDelete&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didDelete&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For detailed information about each callback, check the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/mutablepersistablerecord/&quot;&gt;reference&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the &lt;code&gt;MutablePersistableRecord&lt;/code&gt; protocol, &lt;code&gt;willInsert&lt;/code&gt; and &lt;code&gt;didInsert&lt;/code&gt; are mutating methods. In &lt;code&gt;PersistableRecord&lt;/code&gt;, they are not mutating.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;record.save(_:)&lt;/code&gt; method performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key. It triggers update and/or insert callbacks accordingly.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Callbacks are only invoked from persistence methods called on record instances. Callbacks are not invoked when you call a type method, perform a batch operations, or execute raw SQL.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: When a &lt;code&gt;did***&lt;/code&gt; callback is invoked, do not assume that the change is actually persisted on disk, because the database may still be inside an uncommitted transaction. When you need to handle transaction completions, use the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;afterNextTransaction(onCommit:onRollback:)&lt;/a&gt;. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct PictureFile: PersistableRecord {
    var path: String
    
    func willDelete(_ db: Database) {
        db.afterNextTransaction { _ in
            try? deleteFileOnDisk()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Identifiable Records&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;When a record type maps a table with a single-column primary key, it is recommended to have it adopt the standard &lt;a href=&quot;https://developer.apple.com/documentation/swift/identifiable&quot;&gt;Identifiable&lt;/a&gt; protocol.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Identifiable, FetchableRecord, PersistableRecord {
    var id: Int64 // fulfills the Identifiable requirement
    var name: String
    var score: Int
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; has a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;database-compatible type&lt;/a&gt; (Int64, Int, String, UUID, ...), the &lt;code&gt;Identifiable&lt;/code&gt; conformance unlocks type-safe record and request methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player = try Player.find(db, id: 1)               // Player
let player = try Player.fetchOne(db, id: 1)           // Player?
let players = try Player.fetchAll(db, ids: [1, 2, 3]) // [Player]
let players = try Player.fetchSet(db, ids: [1, 2, 3]) // Set&amp;lt;Player&amp;gt;

let request = Player.filter(id: 1)
let request = Player.filter(ids: [1, 2, 3])

try Player.deleteOne(db, id: 1)
try Player.deleteAll(db, ids: [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Not all record types can be made &lt;code&gt;Identifiable&lt;/code&gt;, and not all tables have a single-column primary key. GRDB provides other methods that deal with primary and unique keys, but they won&#39;t check the type of their arguments:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Available on non-Identifiable types
try Player.fetchOne(db, key: 1)
try Player.fetchOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Country.fetchAll(db, keys: [&quot;FR&quot;, &quot;US&quot;])
try Citizenship.fetchOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])

let request = Player.filter(key: 1)
let request = Player.filter(keys: [1, 2, 3])

try Player.deleteOne(db, key: 1)
try Player.deleteAll(db, keys: [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It is not recommended to use &lt;code&gt;Identifiable&lt;/code&gt; on record types that use an auto-incremented primary key:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// AVOID declaring Identifiable conformance when key is auto-incremented
struct Player {
    var id: Int64? // Not an id suitable for Identifiable
    var name: String
    var score: Int
}

extension Player: FetchableRecord, MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For a detailed rationale, please see &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/1435#issuecomment-1740857712&quot;&gt;issue #1435&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Some database tables have a single-column primary key which is not called &quot;id&quot;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.create(table: &quot;country&quot;) { t in
    t.primaryKey(&quot;isoCode&quot;, .text)
    t.column(&quot;name&quot;, .text).notNull()
    t.column(&quot;population&quot;, .integer).notNull()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, &lt;code&gt;Identifiable&lt;/code&gt; conformance can be achieved, for example, by returning the primary key column from the &lt;code&gt;id&lt;/code&gt; property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Country: Identifiable, FetchableRecord, PersistableRecord {
    var isoCode: String
    var name: String
    var population: Int
    
    // Fulfill the Identifiable requirement
    var id: String { isoCode }
}

let france = try dbQueue.read { db in
    try Country.fetchOne(db, id: &quot;FR&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Codable Records&lt;/h2&gt; 
&lt;p&gt;Record types that adopt an archival protocol (&lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;record protocols&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Declare a record...
struct Player: Codable, FetchableRecord, PersistableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// ...and there you go:
try dbQueue.write { db in
    try Player(id: 1, name: &quot;Arthur&quot;, score: 100).insert(db)
    let players = try Player.order(\.score.desc).fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; that adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol).&lt;/li&gt; 
 &lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt; 
 &lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about Codable records, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&quot;&gt;JSON Columns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&quot;&gt;Column Names Coding Strategies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-date-and-uuid-coding-strategies&quot;&gt;Data, Date, and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&quot;&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tip-derive-columns-from-coding-keys&quot;&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt; for sample code that uses Codable records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;JSON Columns&lt;/h3&gt; 
&lt;p&gt;When a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum AchievementColor: String, Codable {
    case bronze, silver, gold
}

struct Achievement: Codable {
    var name: String
    var color: AchievementColor
}

struct Player: Codable, FetchableRecord, PersistableRecord {
    var name: String
    var score: Int
    var achievements: [Achievement] // stored in a JSON column
}

try dbQueue.write { db in
    // INSERT INTO player (name, score, achievements)
    // VALUES (
    //   &#39;Arthur&#39;,
    //   100,
    //   &#39;[{&quot;color&quot;:&quot;gold&quot;,&quot;name&quot;:&quot;Use Codable Records&quot;}]&#39;)
    let achievement = Achievement(name: &quot;Use Codable Records&quot;, color: .gold)
    let player = Player(name: &quot;Arthur&quot;, score: 100, achievements: [achievement])
    try player.insert(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB uses the standard &lt;a href=&quot;https://developer.apple.com/documentation/foundation/jsondecoder&quot;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/foundation/jsonencoder&quot;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; 
&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder
}

protocol EncodableRecord {
    static func databaseJSONEncoder(for column: String) -&amp;gt; JSONEncoder
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option. This option makes sure that the JSON output is stable. This stability is required for &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Column Names Coding Strategies&lt;/h3&gt; 
&lt;p&gt;By default, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; store their values into database columns that match their coding keys: the &lt;code&gt;teamID&lt;/code&gt; property is stored into the &lt;code&gt;teamID&lt;/code&gt; column.&lt;/p&gt; 
&lt;p&gt;This behavior can be overridden, so that you can, for example, store the &lt;code&gt;teamID&lt;/code&gt; property into the &lt;code&gt;team_id&lt;/code&gt; column:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy { get }
}

protocol EncodableRecord {
    static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasecolumndecodingstrategy&quot;&gt;DatabaseColumnDecodingStrategy&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasecolumnencodingstrategy/&quot;&gt;DatabaseColumnEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; 
&lt;h3&gt;Data, Date, and UUID Coding Strategies&lt;/h3&gt; 
&lt;p&gt;By default, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; encode and decode their Data properties as blobs, and Date and UUID properties as described in the general &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date and DateComponents&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&quot;&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt; 
&lt;p&gt;To sum up: dates encode themselves in the &quot;YYYY-MM-DD HH:MM:SS.SSS&quot; format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as &quot;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&quot;.&lt;/p&gt; 
&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static func databaseDataDecodingStrategy(for column: String) -&amp;gt; DatabaseDataDecodingStrategy
    static func databaseDateDecodingStrategy(for column: String) -&amp;gt; DatabaseDateDecodingStrategy
}

protocol EncodableRecord {
    static func databaseDataEncodingStrategy(for column: String) -&amp;gt; DatabaseDataEncodingStrategy
    static func databaseDateEncodingStrategy(for column: String) -&amp;gt; DatabaseDateEncodingStrategy
    static func databaseUUIDEncodingStrategy(for column: String) -&amp;gt; DatabaseUUIDEncodingStrategy
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedatadecodingstrategy/&quot;&gt;DatabaseDataDecodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedatedecodingstrategy/&quot;&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedataencodingstrategy/&quot;&gt;DatabaseDataEncodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedateencodingstrategy/&quot;&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseuuidencodingstrategy/&quot;&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; 
&lt;p&gt;There is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs and uuid strings, both uppercase and lowercase).&lt;/p&gt; 
&lt;p&gt;Customized coding strategies apply:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When encoding and decoding database rows to and from records (fetching and persistence methods).&lt;/li&gt; 
 &lt;li&gt;In requests by single-column primary key: &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;filter(id:)&lt;/code&gt;, &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt;, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;They do not apply&lt;/em&gt; in other requests based on data, date, or uuid values.&lt;/p&gt; 
&lt;p&gt;So make sure that those are properly encoded in your requests. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, FetchableRecord, PersistableRecord, Identifiable {
    // UUIDs are stored as strings
    static func databaseUUIDEncodingStrategy(for column: String) -&amp;gt; DatabaseUUIDEncodingStrategy {
        .uppercaseString
    }
    
    var id: UUID
    ...
}

try dbQueue.write { db in
    let uuid = UUID()
    let player = Player(id: uuid, ...)
    
    // OK: inserts a player in the database, with a string uuid
    try player.insert(db)
    
    // OK: performs a string-based query, finds the inserted player
    _ = try Player.filter(id: uuid).fetchOne(db)

    // NOT OK: performs a blob-based query, fails to find the inserted player
    _ = try Player.filter { $0.id == uuid }.fetchOne(db)
    
    // OK: performs a string-based query, finds the inserted player
    _ = try Player.filter { $0.id == uuid.uuidString }.fetchOne(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The userInfo Dictionary&lt;/h3&gt; 
&lt;p&gt;Your &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt; 
&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] { get }
}

protocol EncodableRecord {
    static var databaseEncodingUserInfo: [CodingUserInfoKey: Any] { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A key that holds a decoder&#39;s name
let decoderName = CodingUserInfoKey(rawValue: &quot;decoderName&quot;)!

struct Player: FetchableRecord, Decodable {
    init(from decoder: Decoder) throws {
        // Print the decoder name
        let decoderName = decoder.userInfo[decoderName] as? String
        print(&quot;Decoded from \(decoderName ?? &quot;unknown decoder&quot;)&quot;)
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// prints &quot;Decoded from JSON&quot;
let decoder = JSONDecoder()
decoder.userInfo = [decoderName: &quot;JSON&quot;]
let player = try decoder.decode(Player.self, from: jsonData)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... and another one from database rows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player: FetchableRecord {
    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] {
        [decoderName: &quot;database row&quot;]
    }
}

// prints &quot;Decoded from database row&quot;
let player = try Player.fetchOne(db, ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt; 
&lt;p&gt;Codable types are granted with a &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable {
    var id: Int64
    var name: String
    var score: Int
}

extension Player: FetchableRecord, PersistableRecord {
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt; 
&lt;h2&gt;Record Comparison&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&quot;&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseequals-method&quot;&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databasechanges-and-hasdatabasechanges-methods&quot;&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you compare two records:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let oldPlayer = try Player.fetchOne(db, id: 42) {
    var newPlayer = oldPlayer
    newPlayer.score = 100
    if try newPlayer.updateChanges(db, from: oldPlayer) {
        print(&quot;player was modified, and updated in the database&quot;)
    } else {
        print(&quot;player was not modified, and database was not hit&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:modify:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you update a record in place:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if var player = try Player.fetchOne(db, id: 42) {
    let modified = try player.updateChanges(db) {
        $0.score = 100
    }
    if modified {
        print(&quot;player was modified, and updated in the database&quot;)
    } else {
        print(&quot;player was not modified, and database was not hit&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt; 
&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let oldPlayer: Player = ...
var newPlayer: Player = ...
if newPlayer.databaseEquals(oldPlayer) == false {
    try newPlayer.save(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don&#39;t need to care about Equatable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let oldPlayer = Player(id: 1, name: &quot;Arthur&quot;, score: 100)
let newPlayer = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
for (column, oldValue) in try newPlayer.databaseChanges(from: oldPlayer) {
    print(&quot;\(column) was \(oldValue)&quot;)
}
// prints &quot;score was 100&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href=&quot;https://github.com/groue/SortedDifference&quot;&gt;groue/SortedDifference&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Record Customization Options&lt;/h2&gt; 
&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;: define what happens when you call a persistence method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&quot;&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&quot;&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&quot;&gt;Column Names Coding Strategies&lt;/a&gt;: control how coding keys are turned into column names&lt;/li&gt; 
 &lt;li&gt;[Date and UUID Coding Strategies]: control the format of Date and UUID properties in your Codable records.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&quot;&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Conflict Resolution&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt; 
&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the &quot;replace&quot; policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://www.sqlite.org/lang_conflict.html&quot;&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;In the definition of the database table:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE player (
//     id INTEGER PRIMARY KEY AUTOINCREMENT,
//     email TEXT UNIQUE ON CONFLICT REPLACE
// )
try db.create(table: &quot;player&quot;) { t in
    t.autoIncrementedPrimaryKey(&quot;id&quot;)
    t.column(&quot;email&quot;, .text).unique(onConflict: .replace) // &amp;lt;--
}

// Despite the unique index on email, both inserts succeed.
// The second insert replaces the first row:
try db.execute(sql: &quot;INSERT INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
try db.execute(sql: &quot;INSERT INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In each modification query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE player (
//     id INTEGER PRIMARY KEY AUTOINCREMENT,
//     email TEXT UNIQUE
// )
try db.create(table: &quot;player&quot;) { t in
    t.autoIncrementedPrimaryKey(&quot;id&quot;)
    t.column(&quot;email&quot;, .text).unique()
}

// Again, despite the unique index on email, both inserts succeed.
try db.execute(sql: &quot;INSERT OR REPLACE INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
try db.execute(sql: &quot;INSERT OR REPLACE INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;persistence methods&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol MutablePersistableRecord {
    /// The policy that handles SQLite conflicts when records are
    /// inserted or updated.
    ///
    /// This property is optional: its default value uses the ABORT
    /// policy for both insertions and updates, so that GRDB generate
    /// regular INSERT and UPDATE queries.
    static var persistenceConflictPolicy: PersistenceConflictPolicy { get }
}

struct Player : MutablePersistableRecord {
    static let persistenceConflictPolicy = PersistenceConflictPolicy(
        insert: .replace,
        update: .replace)
}

// INSERT OR REPLACE INTO player (...) VALUES (...)
try player.insert(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you specify the &lt;code&gt;ignore&lt;/code&gt; policy for inserts, the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;&lt;code&gt;didInsert&lt;/code&gt; callback&lt;/a&gt; will be called with some random id in case of failed insert. You can detect failed insertions with &lt;code&gt;insertAndFetch&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// How to detect failed `INSERT OR IGNORE`:
// INSERT OR IGNORE INTO player ... RETURNING *
do {
    let insertedPlayer = try player.insertAndFetch(db) {
    // Succesful insertion
catch RecordError.recordNotFound {
    // Failed insertion due to IGNORE policy
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactionobserver&quot;&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Beyond FetchableRecord&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don&#39;t try to implement them on top of this protocol: you&#39;ll just fight the framework.&lt;/p&gt; 
&lt;h2&gt;Examples of Record Definitions&lt;/h2&gt; 
&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.create(table: &quot;place&quot;) { t in
        t.autoIncrementedPrimaryKey(&quot;id&quot;)
        t.column(&quot;title&quot;, .text).notNull()
        t.column(&quot;isFavorite&quot;, .boolean).notNull().defaults(to: false)
        t.column(&quot;longitude&quot;, .double).notNull()
        t.column(&quot;latitude&quot;, .double).notNull()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt; 
 &lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: Codable {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    private var latitude: CLLocationDegrees
    private var longitude: CLLocationDegrees
    
    var coordinate: CLLocationCoordinate2D {
        get {
            CLLocationCoordinate2D(
                latitude: latitude,
                longitude: longitude)
        }
        set {
            latitude = newValue.latitude
            longitude = newValue.longitude
        }
    }
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let title = Column(CodingKeys.title)
        static let isFavorite = Column(CodingKeys.isFavorite)
        static let latitude = Column(CodingKeys.latitude)
        static let longitude = Column(CodingKeys.longitude)
    }
}

// Fetching methods
extension Place: FetchableRecord { }

// Persistence methods
extension Place: MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    var coordinate: CLLocationCoordinate2D
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let isFavorite = Column(&quot;isFavorite&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
}

// Fetching methods
extension Place: FetchableRecord {
    /// Creates a record from a database row
    init(row: Row) {
        id = row[Columns.id]
        title = row[Columns.title]
        isFavorite = row[Columns.isFavorite]
        coordinate = CLLocationCoordinate2D(
            latitude: row[Columns.latitude],
            longitude: row[Columns.longitude])
    }
}

// Persistence methods
extension Place: MutablePersistableRecord {
    /// The values persisted in the database
    func encode(to container: inout PersistenceContainer) {
        container[Columns.id] = id
        container[Columns.title] = title
        container[Columns.isFavorite] = isFavorite
        container[Columns.latitude] = coordinate.latitude
        container[Columns.longitude] = coordinate.longitude
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt; 
 &lt;p&gt;This struct derives its persistence methods from the standard Encodable protocol (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: Encodable {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    private var latitude: CLLocationDegrees
    private var longitude: CLLocationDegrees
    
    var coordinate: CLLocationCoordinate2D {
        get {
            CLLocationCoordinate2D(
                latitude: latitude,
                longitude: longitude)
        }
        set {
            latitude = newValue.latitude
            longitude = newValue.longitude
        }
    }
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let title = Column(CodingKeys.title)
        static let isFavorite = Column(CodingKeys.isFavorite)
        static let latitude = Column(CodingKeys.latitude)
        static let longitude = Column(CodingKeys.longitude)
    }
    
    /// Arrange the selected columns and lock their order
    static var databaseSelection: [any SQLSelectable] {
        [
            Columns.id,
            Columns.title,
            Columns.favorite,
            Columns.latitude,
            Columns.longitude,
        ]
    }
}

// Fetching methods
extension Place: FetchableRecord {
    /// Creates a record from a database row
    init(row: Row) {
        // For high performance, use numeric indexes that match the
        // order of Place.databaseSelection
        id = row[0]
        title = row[1]
        isFavorite = row[2]
        coordinate = CLLocationCoordinate2D(
            latitude: row[3],
            longitude: row[4])
    }
}

// Persistence methods
extension Place: MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h1&gt;The Query Interface&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    // Update database schema
    try db.create(table: &quot;player&quot;) { t in ... }
    
    // Fetch records
    let bestPlayers = try Player
        .order(\.score.desc)
        .limit(10)
        .fetchAll(db)
    
    // Count
    let count = try Player
        .filter { $0.score &amp;gt;= 1000 }
        .fetchCount(db)
    
    // Batch update
    try Player
        .filter { $0.team == &quot;Reds&quot; }
        .updateAll(db) { $0.score += 100 }
    
    // Batch delete
    try Player
        .filter { $0.score == 0 }
        .deleteAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You need to open a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt; 
&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    // Update database schema (with SQL)
    try db.execute(sql: &quot;CREATE TABLE player (...)&quot;)
    
    // Fetch records (with SQL)
    let bestPlayers = try Player.fetchAll(db, sql: &quot;&quot;&quot;
        SELECT * FROM player ORDER BY score DESC LIMIT 10
        &quot;&quot;&quot;)
    
    // Count (with an SQL snippet)
    let minScore = 1000
    let count = try Player
        .filter(sql: &quot;score &amp;gt;= ?&quot;, arguments: [minScore])
        .fetchCount(db)
    
    // Update (with SQL)
    try db.execute(sql: &quot;UPDATE player SET score = score + 100 WHERE team = &#39;Reds&#39;&quot;)
    
    // Delete (with SQL)
    try db.execute(sql: &quot;DELETE FROM player WHERE score = 0&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So don&#39;t miss the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQL API&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;The Database Schema&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&quot;&gt;Expressions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&quot;&gt;SQL Operators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;SQL Functions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&quot;&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&quot;&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&quot;&gt;Testing for Record Existence&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-aggregated-values&quot;&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&quot;&gt;Delete Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&quot;&gt;Update Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&quot;&gt;Custom Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;Common Table Expressions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&quot;&gt;Query Interface Organization&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requests&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest&quot;&gt;&lt;code&gt;QueryInterfaceRequest&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/table&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter { $0.email != nil }.order(\.name)
let players = try request.fetchAll(db)  // [Player]
let count = try request.fetchCount(db)  // Int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Query interface requests usually start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }

// The request for all players:
let request = Player.all()
let players = try request.fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you can not use a record type, use &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// The request for all rows from the player table:
let table = Table(&quot;player&quot;)
let request = table.all()
let rows = try request.fetchAll(db)    // [Row]

// The request for all players from the player table:
let table = Table&amp;lt;Player&amp;gt;(&quot;player&quot;)
let request = table.all()
let players = try request.fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: all examples in the documentation below use a record type, but you can always substitute a &lt;code&gt;Table&lt;/code&gt; instead.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Next, declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting, in a nested type named &lt;code&gt;Columns&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let name = Column(&quot;name&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;Player&lt;/code&gt; is &lt;code&gt;Codable&lt;/code&gt;, you&#39;ll prefer defining columns from coding keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord/all()&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord/none()&quot;&gt;&lt;code&gt;none()&lt;/code&gt;&lt;/a&gt;: the requests for all rows, or no row.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
Player.all()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, all columns are selected. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/selectionrequest/select(_:)-ruzy&quot;&gt;&lt;code&gt;select(...)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/select(_:as:)-58954&quot;&gt;&lt;code&gt;select(..., as:)&lt;/code&gt;&lt;/a&gt; define the selected columns. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT name FROM player
Player.select(\.name, as: String.self)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/selectID()&quot;&gt;&lt;code&gt;selectID()&lt;/code&gt;&lt;/a&gt; is available on &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;. It supports all tables that have a single-column primary key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT id FROM player
Player.selectID()

// SELECT id FROM player WHERE name IS NOT NULL
Player.filter { $0.name != nil }.selectID()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/selectionrequest/annotated(with:)-1satx&quot;&gt;&lt;code&gt;annotated(with: expression...)&lt;/code&gt;&lt;/a&gt; extends the selection.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT *, (score + bonus) AS total FROM player
Player.annotated { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/annotated(with:)-74xfs&quot;&gt;&lt;code&gt;annotated(with: aggregate)&lt;/code&gt;&lt;/a&gt; extends the selection with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&quot;&gt;association aggregates&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team.*, COUNT(DISTINCT player.id) AS playerCount
// FROM team
// LEFT JOIN player ON player.teamId = team.id
// GROUP BY team.id
Team.annotated(with: Team.players.count)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/annotated(withrequired:)&quot;&gt;&lt;code&gt;annotated(withRequired: association)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/annotated(withoptional:)&quot;&gt;&lt;code&gt;annotated(withOptional: association)&lt;/code&gt;&lt;/a&gt; extends the selection with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT player.*, team.color
// FROM player
// JOIN team ON team.id = player.teamId
Player.annotated(withRequired: Player.team.select(\.color))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/distinct()&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; performs uniquing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT DISTINCT name FROM player
Player.select(\.name, as: String.self).distinct()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/filteredrequest/filter(_:)-6xr3d&quot;&gt;&lt;code&gt;filter(expression)&lt;/code&gt;&lt;/a&gt; applies conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)
Player.filter { [1,2,3].contains($0.id) }

// SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)
Player.filter { $0.name != nil &amp;amp;&amp;amp; $0.height &amp;gt; 1.75 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(id:)&quot;&gt;&lt;code&gt;filter(id:)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(ids:)&quot;&gt;&lt;code&gt;filter(ids:)&lt;/code&gt;&lt;/a&gt; are type-safe methods available on &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id = 1
Player.filter(id: 1)

// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)
Country.filter(ids: [&quot;FR&quot;, &quot;US&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(key:)-1p9sq&quot;&gt;&lt;code&gt;filter(key:)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(keys:)-6ggt1&quot;&gt;&lt;code&gt;filter(keys:)&lt;/code&gt;&lt;/a&gt; apply conditions on primary and unique keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id = 1
Player.filter(key: 1)

// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)
Country.filter(keys: [&quot;FR&quot;, &quot;US&quot;])

// SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = &#39;FR&#39;
Citizenship.filter(key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])

// SELECT * FROM player WHERE email = &#39;arthur@example.com&#39;
Player.filter(key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; (&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/matching(_:)-3s3zr&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/matching(_:)-7c1e8&quot;&gt;FTS5&lt;/a&gt;) performs &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;full-text search&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
let pattern = FTS3Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)
Document.matching(pattern)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/aggregatingrequest/group(_:)-2g7br&quot;&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt;&lt;/a&gt; groups rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT name, MAX(score) FROM player GROUP BY name
Player
    .select { [$0.name, max($0.score)] }
    .group(\.name)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/aggregatingrequest/having(_:)-2oggh&quot;&gt;&lt;code&gt;having(expression)&lt;/code&gt;&lt;/a&gt; applies conditions on grouped rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000
Player
    .select { [$0.team, max($0.score)] }
    .group(\.team)
    .having { min($0.score) &amp;gt;= 1000 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/having(_:)&quot;&gt;&lt;code&gt;having(aggregate)&lt;/code&gt;&lt;/a&gt; applies conditions on grouped rows, according to an &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&quot;&gt;association aggregate&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team.*
// FROM team
// LEFT JOIN player ON player.teamId = team.id
// GROUP BY team.id
// HAVING COUNT(DISTINCT player.id) &amp;gt;= 5
Team.having(Team.players.count &amp;gt;= 5)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/orderedrequest/order(_:)-9d0hr&quot;&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt;&lt;/a&gt; sorts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY name
Player.order(\.name)

// SELECT * FROM player ORDER BY score DESC
Player.order(\.score.desc)

// SELECT * FROM player ORDER BY score DESC, name
Player.order { [$0.score.desc, $0.name] }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ascending ordering and at the end of a descending ordering. With a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt;, this can be changed using &lt;code&gt;.ascNullsLast&lt;/code&gt; and &lt;code&gt;.descNullsFirst&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY score ASC NULLS LAST
Player.order(\.name.ascNullsLast)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY name
Player.order(\.score).order(\.name)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/orderedrequest/reversed()&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt; reverses the eventual orderings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY score ASC, name DESC
Player.order { [$0.score.desc, $0.name] }.reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
Player.all().reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/limit(_:offset:)&quot;&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt;&lt;/a&gt; limits and pages results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player LIMIT 5
Player.limit(5)

// SELECT * FROM player LIMIT 5 OFFSET 10
Player.limit(5, offset: 10)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/joining(required:)&quot;&gt;&lt;code&gt;joining(required:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/joining(optional:)&quot;&gt;&lt;code&gt;joining(optional:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(required:)&quot;&gt;&lt;code&gt;including(required:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(optional:)&quot;&gt;&lt;code&gt;including(optional:)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(all:)&quot;&gt;&lt;code&gt;including(all:)&lt;/code&gt;&lt;/a&gt; fetch and join records through &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT player.*, team.*
// FROM player
// JOIN team ON team.id = player.teamId
Player.including(required: Player.team)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/with(_:)&quot;&gt;&lt;code&gt;with(cte)&lt;/code&gt;&lt;/a&gt; embeds a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WITH ... SELECT * FROM player
let cte = CommonTableExpression(...)
Player.with(cte)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Other requests that involve the primary key:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/selectprimarykey(as:)&quot;&gt;&lt;code&gt;selectPrimaryKey(as:)&lt;/code&gt;&lt;/a&gt; selects the primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT id FROM player
Player.selectPrimaryKey(as: Int64.self)    // QueryInterfaceRequest&amp;lt;Int64&amp;gt;

// SELECT code FROM country
Country.selectPrimaryKey(as: String.self)  // QueryInterfaceRequest&amp;lt;String&amp;gt;

// SELECT citizenId, countryCode FROM citizenship
Citizenship.selectPrimaryKey(as: Row.self) // QueryInterfaceRequest&amp;lt;Row&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/orderbyprimarykey()&quot;&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt;&lt;/a&gt; sorts by primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY id
Player.orderByPrimaryKey()

// SELECT * FROM country ORDER BY code
Country.orderByPrimaryKey()

// SELECT * FROM citizenship ORDER BY citizenId, countryCode
Citizenship.orderByPrimaryKey()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/groupbyprimarykey()&quot;&gt;&lt;code&gt;groupByPrimaryKey()&lt;/code&gt;&lt;/a&gt; groups rows by primary key.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name
Player.order(\.name).filter { $0.email != nil }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player                          // SELECT * FROM player
    .filter { $0.name != nil }  // WHERE (name IS NOT NULL)
    .filter { $0.email != nil } //        AND (email IS NOT NULL)
    .order(\.name)              // - ignored -
    .reversed()                 // - ignored -
    .order(\.score)             // ORDER BY score
    .limit(20, offset: 40)      // - ignored -
    .limit(10)                  // LIMIT 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;arguments&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = &#39;Arthur&#39; GROUP BY date(creationDate)
Player
    .select(sql: &quot;DATE(creationDate), COUNT(*)&quot;)
    .filter(sql: &quot;name = ?&quot;, arguments: [&quot;Arthur&quot;])
    .group(sql: &quot;DATE(creationDate)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Columns Selected by a Request&lt;/h3&gt; 
&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
struct Player: TableRecord { ... }
let request = Player.all()

// SELECT * FROM player
let table = Table(&quot;player&quot;)
let request = table.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or in the case of record-based requests, for all requests built from this record type.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&quot;&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

let request = Player.select({ max($0.score) }, as: Int.self)
let maxScore = try request.fetchOne(db)      // Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select a limited set of columns
struct RestrictedPlayer: TableRecord {
    static let databaseTableName = &quot;player&quot;
    
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let name = Column(&quot;name&quot;)
    }
    
    static var databaseSelection: [any SQLSelectable] {
        [Columns.id, Columns.name]
    }
}

// SELECT id, name FROM player
let request = RestrictedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select all but a few columns
struct Player : TableRecord {
    static var databaseSelection: [any SQLSelectable] { 
        [.allColumns(excluding: [&quot;generatedColumn&quot;])]
    }
}

// SELECT id, name FROM player
let request = RestrictedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select all columns and more
struct ExtendedPlayer : TableRecord {
    static let databaseTableName = &quot;player&quot;
    static var databaseSelection: [any SQLSelectable] {
        [.allColumns, .rowID]
    }
}

// SELECT *, rowid FROM player
let request = ExtendedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[any SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Expressions&lt;/h2&gt; 
&lt;p&gt;Feed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt; 
&lt;h3&gt;SQL Operators&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlspecificexpressible&quot;&gt;&lt;code&gt;SQLSpecificExpressible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&quot;https://sqlite.org/lang_expr.html#operators&quot;&gt;built-in operators&lt;/a&gt;, listed below. But not all: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL operators.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (name = &#39;Arthur&#39;)
Player.filter { $0.name == &quot;Arthur&quot; }

// SELECT * FROM player WHERE (name IS NULL)
Player.filter { $0.name == nil }

// SELECT * FROM player WHERE (score IS 1000)
Player.filter { $0.score === 1000 }

// SELECT * FROM rectangle WHERE width &amp;lt; height
Rectangle.filter { $0.width &amp;lt; $0.height }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Subqueries are supported:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)
let maximumScore = Player.select { max($0.score) }
Player.filter { $0.score == maximumScore }

// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)
let maximumScore = SQLRequest(&quot;SELECT max(score) FROM player&quot;)
Player.filter { $0.score == maximumScore }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT ((temperature * 1.8) + 32) AS fahrenheit FROM planet
Planet.select { ($0.temperature * 1.8 + 32).forKey(&quot;fahrenheit&quot;) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + &quot;rrr&quot;&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation. See the &lt;code&gt;concat&lt;/code&gt; operator below.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT score + bonus + 1000 FROM player
Player.select {
    [$0.score, $0.bonus, 1000.databaseValue].joined(operator: .add)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw values: &lt;code&gt;1000.databaseValue&lt;/code&gt;. A plain &lt;code&gt;1000&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .add)&lt;/code&gt; returns 0, and &lt;code&gt;joined(operator: .multiply)&lt;/code&gt; returns 1.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Bitwise operations (bitwise and, or, not, left shift, right shift) are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT mask &amp;amp; 2 AS isRocky FROM planet
Planet.select { ($0.mask &amp;amp; 2).forKey(&quot;isRocky&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;||&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Concatenate several strings:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT firstName || &#39; &#39; || lastName FROM player
Player.select {
    [$0.firstName, &quot; &quot;.databaseValue, $0.lastName].joined(operator: .concat)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw strings: &lt;code&gt;&quot; &quot;.databaseValue&lt;/code&gt;. A plain &lt;code&gt;&quot; &quot;&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .concat)&lt;/code&gt; returns the empty string.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE ((NOT isVerified) OR (score &amp;lt; 1000))
Player.filter { !$0.isVerified || $0.score &amp;lt; 1000 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (isVerified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))
Player.filter {
    [$0.isVerified, $0.score &amp;gt;= 1000, $0.name != nil].joined(operator: .and)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check inclusion in a Swift sequence (array, set, range…), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)
Player.filter { [1, 2, 3].contains($0.id) }

// SELECT * FROM player WHERE id NOT IN (1, 2, 3)
Player.filter { ![1, 2, 3].contains($0.id) }

// SELECT * FROM player WHERE score BETWEEN 0 AND 1000
Player.filter { (0...1000).contains($0.score) }

// SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)
Player.filter { (0..&amp;lt;1000).contains($0.score) }

// SELECT * FROM player WHERE initial BETWEEN &#39;A&#39; AND &#39;N&#39;
Player.filter { (&quot;A&quot;...&quot;N&quot;).contains($0.initial) }

// SELECT * FROM player WHERE (initial &amp;gt;= &#39;A&#39;) AND (initial &amp;lt; &#39;N&#39;)
Player.filter { (&quot;A&quot;..&amp;lt;&quot;N&quot;).contains($0.initial) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a subquery, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)
let selectedPlayerIds = PlayerSelection.select(\.playerId)
Player.filter { selectedPlayerIds.contains($0.id) }

// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)
let selectedPlayerIds = SQLRequest(&quot;SELECT playerId FROM playerSelection&quot;)
Player.filter { selectedPlayerIds.contains($0.id) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WITH selectedName AS (...)
// SELECT * FROM player WHERE name IN selectedName
let cte = CommonTableExpression(named: &quot;selectedName&quot;, ...)
Player
    .with(cte)
    .filter { cte.contains($0.name) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check if a subquery would return rows, call the &lt;code&gt;exists&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Teams that have at least one other player
//
//  SELECT * FROM team
//  WHERE EXISTS (SELECT * FROM player WHERE teamId = team.id)
let teamAlias = TableAlias&amp;lt;Team&amp;gt;()
let player = Player.filter { $0.teamId == teamAlias.id }
let teams = Team.aliased(teamAlias).filter(player.exists())

// Teams that have no player
//
//  SELECT * FROM team
//  WHERE NOT EXISTS (SELECT * FROM player WHERE teamId = team.id)
let teams = Team.aliased(teamAlias).filter(!player.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, you use a &lt;code&gt;TableAlias&lt;/code&gt; in order to let a subquery refer to a column from another table.&lt;/p&gt; &lt;p&gt;In the next example, which involves the same table twice, the table alias requires an explicit disambiguation with &lt;code&gt;TableAlias(name:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Players who coach at least one other player
//
//  SELECT coach.* FROM player coach
//  WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)
let coachAlias = TableAlias&amp;lt;Player&amp;gt;(name: &quot;coach&quot;)
let coachedPlayer = Player.filter { $0.coachId == coachAlias.id }
let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, subqueries can also be expressed as SQL, with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT coach.* FROM player coach
// WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)
let coachedPlayer = SQLRequest(&quot;SELECT * FROM player WHERE coachId = \(coachAlias.id)&quot;)
let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (email LIKE &#39;%@example.com&#39;)
Player.filter { $0.email.like(&quot;%@example.com&quot;) }

// SELECT * FROM book WHERE (title LIKE &#39;%10\%%&#39; ESCAPE &#39;\&#39;)
Player.filter { $0.email.like(&quot;%10\\%%&quot;, escape: &quot;\\&quot;) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;&#39;a&#39; LIKE &#39;A&#39;&lt;/code&gt; is true but &lt;code&gt;&#39;æ&#39; LIKE &#39;Æ&#39;&lt;/code&gt; is false.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The full-text MATCH operator is available through &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&quot;&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&quot;&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt; &lt;p&gt;FTS3 and FTS4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let pattern = FTS3Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)

// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
Document.matching(pattern)

// SELECT * FROM document WHERE content MATCH &#39;sqlite database&#39;
Document.filter { $0.content.match(pattern) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FTS5:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let pattern = FTS5Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)

// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
Document.matching(pattern)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To give an alias to an expression, use the &lt;code&gt;forKey&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (score + bonus) AS total
// FROM player
Player.select { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to refer to this aliased column in another place of the request, use a detached column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (score + bonus) AS total
// FROM player 
// ORDER BY total
Player
    .select { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
    .order(Column(&quot;total&quot;).detached)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The detached column &lt;code&gt;Column(&quot;total&quot;).detached&lt;/code&gt; is not considered as a part of the &quot;player&quot; table, so it is always rendered as &lt;code&gt;total&lt;/code&gt; in the generated SQL, even when the request involves other tables via an &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;association&lt;/a&gt; or a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;SQL Functions&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlspecificexpressible&quot;&gt;&lt;code&gt;SQLSpecificExpressible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&quot;https://sqlite.org/lang_corefunc.html&quot;&gt;built-in functions&lt;/a&gt;, listed below. But not all: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COALESCE&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt;, &lt;code&gt;JULIANDAY&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;TOTAL&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;coalesce&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;dateTime&lt;/code&gt;, &lt;code&gt;julianDay&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, and &lt;code&gt;total&lt;/code&gt; Swift functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT MIN(score), MAX(score) FROM player
Player.select { [min($0.score), max($0.score)] }

// SELECT COUNT(name) FROM player
Player.select { count($0.name) }

// SELECT COUNT(DISTINCT name) FROM player
Player.select { count(distinct: $0.name) }

// SELECT JULIANDAY(date, &#39;start of year&#39;) FROM game
Game.select { julianDay($0.date, .startOfYear) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information about the functions &lt;code&gt;dateTime&lt;/code&gt; and &lt;code&gt;julianDay&lt;/code&gt;, see &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;Date And Time Functions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;CAST&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;cast&lt;/code&gt; Swift function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (CAST(wins AS REAL) / games) AS successRate FROM player
Player.select { (cast($0.wins, as: .real) / $0.games).forKey(&quot;successRate&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&quot;https://www.sqlite.org/lang_expr.html#castexpr&quot;&gt;CAST expressions&lt;/a&gt; for more information about SQLite conversions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;Anonymous&#39;) FROM player
Player.select { $0.name ?? &quot;Anonymous&quot; }

// SELECT IFNULL(name, email) FROM player
Player.select { $0.name ?? $0.email }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt; &lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player.select { $0.name.uppercased() }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you&#39;d rather use a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;collation&lt;/a&gt;:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = ...

// Not recommended
Player.filter { $0.name.uppercased() == name.uppercased() }

// Better
Player.filter { $0.name.collating(.caseInsensitiveCompare) == name }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt; &lt;p&gt;You can apply your own &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-functions-&quot;&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let myFunction = DatabaseFunction(&quot;myFunction&quot;, ...)

// SELECT myFunction(name) FROM player
Player.select { myFunction($0.name) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Embedding SQL in Query Interface Requests&lt;/h2&gt; 
&lt;p&gt;You will sometimes want to extend your query interface requests with SQL snippets. This can happen because GRDB does not provide a Swift interface for some SQL function or operator, or because you want to use an SQLite construct that GRDB does not support.&lt;/p&gt; 
&lt;p&gt;Support for extensibility is large, but not unlimited. All the SQL queries built by the query interface request have the shape below. &lt;em&gt;If you need something else, you&#39;ll have to use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;raw SQL requests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH ...     -- 1
SELECT ...   -- 2
FROM ...     -- 3
JOIN ...     -- 4
WHERE ...    -- 5
GROUP BY ... -- 6
HAVING ...   -- 7
ORDER BY ... -- 8
LIMIT ...    -- 9
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;WITH ...&lt;/code&gt;: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;Common Table Expressions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;SELECT ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The selection can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let request = Player.select(sql: &quot;IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score&quot;)

// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select(sql: &quot;IFNULL(name, ?), score&quot;, arguments: [suffix])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select(literal: &quot;IFNULL(name, \(defaultName)), score&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with a mix of Swift and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select {
    let displayName: SQL = &quot;IFNULL(\($0.name), \(defaultName)) AS displayName&quot;
    return [displayName, $0.score]
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the custom SQL snippet should behave as a full-fledged expression, with support for the &lt;code&gt;+&lt;/code&gt; Swift operator, the &lt;code&gt;forKey&lt;/code&gt; aliasing method, and all other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&quot;&gt;SQL Operators&lt;/a&gt;, build an &lt;em&gt;expression literal&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select {
    let displayName = SQL(&quot;IFNULL(\($0.name), \(defaultName))&quot;).sqlExpression
    return [displayName.forKey(&quot;displayName&quot;), $0.score]
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such expression literals allow you to build a reusable support library of SQL functions or operators that are missing from the query interface. For example, you can define a Swift &lt;code&gt;date&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func date(_ value: some SQLSpecificExpressible) -&amp;gt; SQLExpression {
    SQL(&quot;DATE(\(value))&quot;).sqlExpression
}

// SELECT * FROM &quot;player&quot; WHERE DATE(&quot;createdAt&quot;) = &#39;2020-01-23&#39;
let request = Player.filter { date($0.createdAt) == &quot;2020-01-23&quot; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&quot;&gt;Query Interface Organization&lt;/a&gt; for more information about &lt;code&gt;SQLSpecificExpressible&lt;/code&gt; and &lt;code&gt;SQLExpression&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;FROM ...&lt;/code&gt;: only one table is supported here. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN ...&lt;/code&gt;: joins are fully controlled by &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;WHERE ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The WHERE clause can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000
let request = Player.filter(sql: &quot;score &amp;gt;= 1000&quot;)

// SELECT * FROM player WHERE score &amp;gt;= 1000
let minScore = 1000
let request = Player.filter(sql: &quot;score &amp;gt;= ?&quot;, arguments: [minScore])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000
let minScore = 1000
let request = Player.filter(literal: &quot;score &amp;gt;= \(minScore)&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with a mix of Swift and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (score &amp;gt;= 1000) AND (team = &#39;red&#39;)
let minScore = 1000
let request = Player.filter { 
    let scoreCondition: SQL = &quot;\($0.score) &amp;gt;= \(minScore)&quot;
    return scoreCondition &amp;amp;&amp;amp; $0.team == &quot;red&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;code&gt;SELECT ...&lt;/code&gt; above for more SQL Interpolation examples.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;GROUP BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The GROUP BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVING ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The HAVING clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ORDER BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The ORDER BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;p&gt;In order to support the &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;asc&lt;/code&gt; query interface operators, and the &lt;code&gt;reversed()&lt;/code&gt; query interface method, you must provide your orderings as &lt;em&gt;expression literals&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM &quot;player&quot; 
// ORDER BY (score + bonus) ASC, name DESC
let request = Player
    .order {
        let total = SQL(&quot;(\($0.score) + \($0.bonus))&quot;).sqlExpression
        return [total.desc, $0.name]
    }
    .reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LIMIT ...&lt;/code&gt;: use the &lt;code&gt;limit(_:offset:)&lt;/code&gt; method. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Fetching from Requests&lt;/h2&gt; 
&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Some request based on `Player`
let request = Player.filter { ... }... // QueryInterfaceRequest&amp;lt;Player&amp;gt;

// Fetch players:
try request.fetchCursor(db) // A Cursor of Player
try request.fetchAll(db)    // [Player]
try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;
try request.fetchOne(db)    // Player?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let allPlayers = try Player.fetchAll(db)                            // [Player]
let arthur = try Player.filter { $0.name == &quot;Arthur&quot; }.fetchOne(db) // Player?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Fetch an Int
let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

// Fetch a Row
let request = Player.select { [min($0.score), max($0.score)] }
let row = try Row.fetchOne(db, request)!     // Row
let minScore = row[0] as Int?
let maxScore = row[1] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: FetchableRecord, Decodable {
    var book: Book
    var author: Author
}

// A request of BookInfo
let request = Book
    .including(required: Book.author)
    .asRequest(of: BookInfo.self)

let bookInfos = try dbQueue.read { db in
    try request.fetchAll(db) // [BookInfo]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A request of Int
let request = Player.select({ max($0.score) }, as: Int.self)

let maxScore = try dbQueue.read { db in
    try request.fetchOne(db) // Int?
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Fetching by Key&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;find(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:ids:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:ids:)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.find(db, id: 1)                   // Player
try Player.fetchOne(db, id: 1)               // Player?
try Country.fetchAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])  // [Countries]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;find(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:keys:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.find(db, key: 1)                  // Player
try Player.fetchOne(db, key: 1)              // Player?
try Country.fetchAll(db, keys: [&quot;FR&quot;, &quot;US&quot;]) // [Country]
try Player.fetchOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])            // Player?
try Citizenship.fetchOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;]) // Citizenship?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM document WHERE rowid = 1
try Document.fetchOne(db, key: 1)            // Document?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use a &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter(id: 1)
let request = Country.filter(ids: [&quot;FR&quot;, &quot;US&quot;])
let request = Player.filter(key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
let request = Citizenship.filter(key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Testing for Record Existence&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;You can check if a request has matching rows in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Some request based on `Player`
let request = Player.filter { ... }...

// Check for player existence:
let noSuchPlayer = try request.isEmpty(db) // Bool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should check for emptiness instead of counting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Correct
let noSuchPlayer = try request.fetchCount(db) == 0
// Even better
let noSuchPlayer = try request.isEmpty(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can also check if a given primary or unique key exists in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe method &lt;code&gt;exists(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.exists(db, id: 1)
try Country.exists(db, id: &quot;FR&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;exists(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; that can check primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.exists(db, key: 1)
try Country.exists(db, key: &quot;FR&quot;)
try Player.exists(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Citizenship.exists(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should check for key existence instead of fetching a record and checking for nil:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Correct
let playerExists = try Player.fetchOne(db, id: 1) != nil
// Even better
let playerExists = try Player.exists(db, id: 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fetching Aggregated Values&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT COUNT(*) FROM player
let count = try Player.fetchCount(db) // Int

// SELECT COUNT(*) FROM player WHERE email IS NOT NULL
let count = try Player.filter { $0.email != nil }.fetchCount(db)

// SELECT COUNT(DISTINCT name) FROM player
let count = try Player.select(\.name).distinct().fetchCount(db)

// SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)
let count = try Player.select { [$0.name, $0.score] }.distinct().fetchCount(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

let request = Player.select { [min($0.score), max($0.score)] }
let row = try Row.fetchOne(db, request)!     // Row
let minScore = row[0] as Int?
let maxScore = row[1] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Delete Requests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// DELETE FROM player
try Player.deleteAll(db)

// DELETE FROM player WHERE team = &#39;Reds&#39;
try Player
    .filter { $0.team == &quot;Reds&quot; }
    .deleteAll(db)

// DELETE FROM player ORDER BY score LIMIT 10
try Player
    .order(\.score)
    .limit(10)
    .deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Deletion methods are available on types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }
try Player.deleteAll(db)          // Fine
try Table(&quot;player&quot;).deleteAll(db) // Just as fine
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;deleteOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:ids:)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, id: 1)
try Country.deleteAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;deleteOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, key: 1)
try Country.deleteAll(db, keys: [&quot;FR&quot;, &quot;US&quot;])
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Citizenship.deleteOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// DELETE FROM document WHERE rowid = 1
try Document.deleteOne(db, id: 1)             // Document?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Update Requests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;set(to:)&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = 0, isHealthy = 1, bonus = NULL
try Player.updateAll(db) { [
    $0.score.set(to: 0), 
    $0.isHealthy.set(to: true), 
    $0.bonus.set(to: nil),
] }

// UPDATE player SET score = 0 WHERE team = &#39;Reds&#39;
try Player
    .filter { $0.team == &quot;Reds&quot; }
    .updateAll(db) { $0.score.set(to: 0) }

// UPDATE player SET isGreat = 1 ORDER BY score DESC LIMIT 10
try Player
    .order(\.score.desc)
    .limit(10)
    .updateAll(db) { $0.isGreat.set(to: true) }

// UPDATE country SET population = 67848156 WHERE id = &#39;FR&#39;
try Country
    .filter(id: &quot;FR&quot;)
    .updateAll(db) { $0.population.set(to: 67_848_156) }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Column assignments accept any expression:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = score + (bonus * 2)
try Player.updateAll(db) {
    $0.score.set(to: $0.score + $0.bonus * 2)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = score + (bonus * 2)
try Player.updateAll(db) { $0.score += $0.bonus * 2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&quot;&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE OR IGNORE player SET ...
try Player.updateAll(db, onConflict: .ignore) { /* assignments... */ }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is available on types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }
try Player.updateAll(db, ...)          // Fine
try Table(&quot;player&quot;).updateAll(db, ...) // Just as fine
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Requests&lt;/h2&gt; 
&lt;p&gt;Until now, we have seen &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.all()  // QueryInterfaceRequest&amp;lt;Player&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try request.fetchCursor(db) // A Cursor of Player
try request.fetchAll(db)    // [Player]
try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;
try request.fetchOne(db)    // Player?
try request.fetchCount(db)  // Int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;raw SQL&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Custom SQL is always welcome
try Player.fetchAll(db, sql: &quot;SELECT ...&quot;)   // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No custom SQL in sight
try Player.customRequest().fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests or derive requests from other requests.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlrequest&quot;&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {
        SQLRequest&amp;lt;Player&amp;gt;(
            sql: &quot;SELECT * FROM player WHERE color = ?&quot;
            arguments: [color])
    }
}

// [Player]
try Player.filter(color: .red).fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLRequest supports &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {
        &quot;SELECT * FROM player WHERE color = \(color)&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/asrequest(of:)&quot;&gt;&lt;code&gt;asRequest(of:)&lt;/code&gt;&lt;/a&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: FetchableRecord, Decodable {
    var book: Book
    var author: Author
}

let request = Book
    .including(required: Book.author)
    .asRequest(of: BookInfo.self)

// [BookInfo]
try request.fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/fetchrequest/adapted(_:)&quot;&gt;&lt;code&gt;adapted(_:)&lt;/code&gt;&lt;/a&gt; method eases the consumption of complex rows with row adapters. See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;&lt;code&gt;RowAdapter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/splittingrowadapters(columncounts:)&quot;&gt;&lt;code&gt;splittingRowAdapters(columnCounts:)&lt;/code&gt;&lt;/a&gt; for a sample code that uses &lt;code&gt;adapted(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Encryption&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href=&quot;http://sqlcipher.net&quot;&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# GRDB with SQLCipher 4
pod &#39;GRDB.swift/SQLCipher&#39;
pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 4.0&#39;

# GRDB with SQLCipher 3
pod &#39;GRDB.swift/SQLCipher&#39;
pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 3.4&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you remove any existing &lt;code&gt;pod &#39;GRDB.swift&#39;&lt;/code&gt; from your Podfile. &lt;code&gt;GRDB.swift/SQLCipher&lt;/code&gt; must be the only active GRDB pod in your whole project, or you will face linker or runtime errors, due to the conflicts between SQLCipher and the system SQLite.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#creating-or-opening-an-encrypted-database&quot;&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#changing-the-passphrase-of-an-encrypted-database&quot;&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&quot;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#security-considerations&quot;&gt;Security Considerations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Creating or Opening an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href=&quot;https://www.zetetic.net/sqlcipher/sqlcipher-api/&quot;&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
    try db.execute(sql: &quot;PRAGMA cipher_page_size = ...&quot;)
    try db.execute(sql: &quot;PRAGMA kdf_iter = ...&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Open an SQLCipher 3 database with SQLCipher 4
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
    try db.execute(sql: &quot;PRAGMA cipher_compatibility = 3&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/&quot;&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href=&quot;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&quot;&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt; 
&lt;p&gt;When you use a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.changePassphrase(&quot;newSecret&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbPool.barrierWriteWithoutTransaction { db in
    try db.changePassphrase(&quot;newSecret&quot;)
    dbPool.invalidateReadOnlyConnections()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WRONG: this won&#39;t work across a passphrase change
let passphrase = try getPassphrase()
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(passphrase)
}

// CORRECT: get the latest passphrase when it is needed
var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try getPassphrase()
    try db.usePassphrase(passphrase)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesnapshot&quot;&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase &quot;in place&quot; as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&quot;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;Providing a passphrase won&#39;t encrypt a clear-text database that already exists, though. SQLCipher can&#39;t do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted database.&lt;/p&gt; 
&lt;p&gt;The technique to do that is &lt;a href=&quot;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1&quot;&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt; 
&lt;p&gt;With GRDB, it gives:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// The existing database
let existingDBQueue = try DatabaseQueue(path: &quot;/path/to/existing.db&quot;)

// The new encrypted database, at some distinct location:
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
}
let newDBQueue = try DatabaseQueue(path: &quot;/path/to/new.db&quot;, configuration: config)

try existingDBQueue.inDatabase { db in
    try db.execute(
        sql: &quot;&quot;&quot;
            ATTACH DATABASE ? AS encrypted KEY ?;
            SELECT sqlcipher_export(&#39;encrypted&#39;);
            DETACH DATABASE encrypted;
            &quot;&quot;&quot;,
        arguments: [newDBQueue.path, &quot;secret&quot;])
}

// Now the export is completed, and the existing database can be deleted.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Security Considerations&lt;/h3&gt; 
&lt;h4&gt;Managing the lifetime of the passphrase string&lt;/h4&gt; 
&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from the &lt;code&gt;prepareDatabase&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary
let passphrase = try getPassphrase()
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(passphrase)
}

// RECOMMENDED: only load the passphrase when it is needed
var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try getPassphrase()
    try db.usePassphrase(passphrase)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This technique helps manages the lifetime of the passphrase, although keep in mind that the content of a String may remain intact in memory long after the object has been released.&lt;/p&gt; 
&lt;p&gt;For even better control over the lifetime of the passphrase in memory, use a Data object which natively provides the &lt;code&gt;resetBytes&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// RECOMMENDED: only load the passphrase when it is needed and reset its content immediately after use
var config = Configuration()
config.prepareDatabase { db in
    var passphraseData = try getPassphraseData() // Data
    defer {
        passphraseData.resetBytes(in: 0..&amp;lt;passphraseData.count)
    }
    try db.usePassphrase(passphraseData)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt; 
&lt;h4&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt; 
&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don&#39;t keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt; 
&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    ... // Carefully load passphrase bytes
    let code = sqlite3_key(db.sqliteConnection, /* passphrase bytes */)
    ... // Carefully dispose passphrase bytes
    guard code == SQLITE_OK else {
        throw DatabaseError(
            resultCode: ResultCode(rawValue: code), 
            message: db.lastErrorMessage)
    }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Passphrase availability vs. Database availability&lt;/h4&gt; 
&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessible&quot;&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt; 
&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try loadPassphraseFromSystemKeychain()
    try db.usePassphrase(passphrase)
}

// Success if and only if the passphrase is available
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the same reason, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Success if and only if the passphrase is available
let dbPool = try DatabasePool(path: dbPath, configuration: config)

// May fail if passphrase has turned unavailable
try dbPool.read { ... }

// May trigger value observation failure if passphrase has turned unavailable
try dbPool.write { ... }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt; 
&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt; 
&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy/encrypting_your_app_s_files&quot;&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt; 
&lt;h2&gt;Backup&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let source: DatabaseQueue = ...      // or DatabasePool
let destination: DatabaseQueue = ... // or DatabasePool
try source.backup(to: destination)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt; 
&lt;p&gt;When the source is a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won&#39;t trigger any error.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; has an analogous &lt;code&gt;backup&lt;/code&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let source: DatabaseQueue = ...      // or DatabasePool
let destination: DatabaseQueue = ... // or DatabasePool
try source.write { sourceDb in
    try destination.barrierWriteWithoutTransaction { destDb in
        try sourceDb.backup(to: destDb)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method allows for the choice of source and destination &lt;code&gt;Database&lt;/code&gt; handles with which to backup the database.&lt;/p&gt; 
&lt;h3&gt;Backup Progress Reporting&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; methods take optional &lt;code&gt;pagesPerStep&lt;/code&gt; and &lt;code&gt;progress&lt;/code&gt; parameters. Together these parameters can be used to track a database backup in progress and abort an incomplete backup.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;pagesPerStep&lt;/code&gt; is provided, the database backup is performed in &lt;em&gt;steps&lt;/em&gt;. At each step, no more than &lt;code&gt;pagesPerStep&lt;/code&gt; database pages are copied from the source to the destination. The backup proceeds one step at a time until all pages have been copied.&lt;/p&gt; 
&lt;p&gt;When a &lt;code&gt;progress&lt;/code&gt; callback is provided, &lt;code&gt;progress&lt;/code&gt; is called after every backup step, including the last. Even if a non-default &lt;code&gt;pagesPerStep&lt;/code&gt; is specified or the backup is otherwise completed in a single step, the &lt;code&gt;progress&lt;/code&gt; callback will be called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try source.backup(
    to: destination,
    pagesPerStep: ...)
    { backupProgress in
       print(&quot;Database backup progress:&quot;, backupProgress)
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Aborting an Incomplete Backup&lt;/h3&gt; 
&lt;p&gt;If a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == false&lt;/code&gt;, the backup will be aborted and the error rethrown. However, if a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == true&lt;/code&gt;, the backup is unaffected and the error is silently ignored.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Passing non-default values of &lt;code&gt;pagesPerStep&lt;/code&gt; or &lt;code&gt;progress&lt;/code&gt; to the backup methods is an advanced API intended to provide additional capabilities to expert users. GRDB&#39;s backup API provides a faithful, low-level wrapper to the underlying SQLite online backup API. GRDB&#39;s documentation is not a comprehensive substitute for the official SQLite &lt;a href=&quot;https://www.sqlite.org/c3ref/backup_finish.html&quot;&gt;documentation of their backup API&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Interrupt a Database&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;interrupt()&lt;/code&gt; method&lt;/strong&gt; causes any pending database operation to abort and return at its earliest opportunity.&lt;/p&gt; 
&lt;p&gt;It can be called from any thread.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dbQueue.interrupt()
dbPool.interrupt()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A call to &lt;code&gt;interrupt()&lt;/code&gt; that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after &lt;code&gt;interrupt()&lt;/code&gt; returns.&lt;/p&gt; 
&lt;p&gt;A database operation that is interrupted will throw a DatabaseError with code &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt;. If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically. If the rolled back transaction was started by a transaction-wrapping method such as &lt;code&gt;DatabaseWriter.write&lt;/code&gt; or &lt;code&gt;Database.inTransaction&lt;/code&gt;, then all database accesses will throw a DatabaseError with code &lt;code&gt;SQLITE_ABORT&lt;/code&gt; until the wrapping method returns.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try Player(...).insert(db)     // throws SQLITE_INTERRUPT
    try Player(...).insert(db)     // not executed
}                                  // throws SQLITE_INTERRUPT

try dbQueue.write { db in
    do {
        try Player(...).insert(db) // throws SQLITE_INTERRUPT
    } catch { }
}                                  // throws SQLITE_ABORT

try dbQueue.write { db in
    do {
        try Player(...).insert(db) // throws SQLITE_INTERRUPT
    } catch { }
    try Player(...).insert(db)     // throws SQLITE_ABORT
}                                  // throws SQLITE_ABORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can catch both &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt; and &lt;code&gt;SQLITE_ABORT&lt;/code&gt; errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try dbPool.write { db in ... }
} catch DatabaseError.SQLITE_INTERRUPT, DatabaseError.SQLITE_ABORT {
    // Oops, the database was interrupted.
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://www.sqlite.org/c3ref/interrupt.html&quot;&gt;Interrupt A Long-Running Query&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Avoiding SQL Injection&lt;/h2&gt; 
&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/exploits_of_a_mom.png&quot; alt=&quot;XKCD: Exploits of a Mom&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// BAD BAD BAD
let id = 1
let name = textField.text
try dbQueue.write { db in
    try db.execute(sql: &quot;UPDATE students SET name = &#39;\(name)&#39; WHERE id = \(id)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert&#39;; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE students SET name = &#39;Robert&#39;;
DROP TABLE students;
--&#39; WHERE id = 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
try dbQueue.write { db in
    // Good
    try db.execute(
        sql: &quot;UPDATE students SET name = ? WHERE id = ?&quot;,
        arguments: [name, id])
    
    // Just as good
    try db.execute(
        sql: &quot;UPDATE students SET name = :name WHERE id = :id&quot;,
        arguments: [&quot;name&quot;: name, &quot;id&quot;: id])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;records&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let id = 1
let name = textField.text
try dbQueue.write { db in
    if var student = try Student.fetchOne(db, id: id) {
        student.name = name
        try student.update(db)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Error Handling&lt;/h2&gt; 
&lt;p&gt;GRDB can throw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rowdecodingerror&quot;&gt;RowDecodingError&lt;/a&gt;, or crash your program with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;fatal error&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&quot;&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rowdecodingerror&quot;&gt;RowDecodingError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&quot;&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-log&quot;&gt;Error Log&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;DatabaseError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseerror&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try Pet(masterId: 1, name: &quot;Bobby&quot;).insert(db)
} catch let error as DatabaseError {
    // The SQLite error code: 19 (SQLITE_CONSTRAINT)
    error.resultCode
    
    // The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)
    error.extendedResultCode
    
    // The eventual SQLite message: FOREIGN KEY constraint failed
    error.message
    
    // The eventual erroneous SQL query
    // &quot;INSERT INTO pet (masterId, name) VALUES (?, ?)&quot;
    error.sql
    
    // The eventual SQL arguments
    // [1, &quot;Bobby&quot;]
    error.arguments
    
    // Full error description
    // &amp;gt; SQLite error 19: FOREIGN KEY constraint failed -
    // &amp;gt; while executing `INSERT INTO pet (masterId, name) VALUES (?, ?)`
    error.description
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments in the error description, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SQLite uses &lt;a href=&quot;https://www.sqlite.org/rescode.html&quot;&gt;results codes&lt;/a&gt; to distinguish between various errors&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;You can catch a DatabaseError and match on result codes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch let error as DatabaseError {
    switch error {
    case DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY:
        // foreign key constraint error
    case DatabaseError.SQLITE_CONSTRAINT:
        // any other constraint error
    default:
        // any other database error
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also directly match errors on result codes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY {
    // foreign key constraint error
} catch DatabaseError.SQLITE_CONSTRAINT {
    // any other constraint error
} catch {
    // any other database error
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each DatabaseError has two codes: an &lt;code&gt;extendedResultCode&lt;/code&gt; (see &lt;a href=&quot;https://www.sqlite.org/rescode.html#extended_result_code_list&quot;&gt;extended result code&lt;/a&gt;), and a less precise &lt;code&gt;resultCode&lt;/code&gt; (see &lt;a href=&quot;https://www.sqlite.org/rescode.html#primary_result_code_list&quot;&gt;primary result code&lt;/a&gt;). Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes across its versions. The &lt;a href=&quot;http://www.sqlite.org/changes.html&quot;&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;RecordError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recorderror&quot;&gt;&lt;code&gt;RecordError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is thrown by the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try player.update(db)
} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {
    print(&quot;Key \(key) was not found in table \(table).&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is also thrown by the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol when the &lt;code&gt;find&lt;/code&gt; method does not find any record:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    let player = try Player.find(db, id: 42)
} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {
    print(&quot;Key \(key) was not found in table \(table).&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RowDecodingError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowdecodingerror&quot;&gt;&lt;code&gt;RowDecodingError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RowDecodingError&lt;/strong&gt; is thrown when the application can not decode a value from a database row. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT NULL AS name&quot;)!
// RowDecodingError: could not decode String from database value NULL.
let name = try row.decode(String.self, forColumn: &quot;name&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fatal Errors&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: could not convert NULL to String.
let name: String = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, use &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/columndefinition/notnull(onconflict:)&quot;&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: could not convert &quot;Mom’s birthday&quot; to Date.
let date: Date = row[&quot;date&quot;]

// fatal error: could not convert &quot;&quot; to URL.
let url: URL = row[&quot;url&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, or use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[&quot;date&quot;]
if dbValue.isNull {
    // Handle NULL
} else if let date = Date.fromDatabaseValue(dbValue) {
    // Handle valid date
} else {
    // Handle invalid date
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;The database can&#39;t guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: table player has no unique index on column email
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.filter { $0.email == &quot;arthur@example.com&quot; }.deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: Database methods are not reentrant.
dbQueue.write { db in
    dbQueue.write { db in
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How to Deal with Untrusted Inputs&lt;/h3&gt; 
&lt;p&gt;Let&#39;s consider the code below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let sql = &quot;SELECT ...&quot;

// Some untrusted arguments for the query
let arguments: [String: Any] = ...
let rows = try Row.fetchCursor(db, sql: sql, arguments: StatementArguments(arguments))

while let row = try rows.next() {
    // Some untrusted database value:
    let date: Date? = row[0]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can&#39;t be turned into a date.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Untrusted arguments
if let arguments = StatementArguments(arguments) {
    let statement = try db.makeStatement(sql: sql)
    try statement.setArguments(arguments)
    
    var cursor = try Row.fetchCursor(statement)
    while let row = try iterator.next() {
        // Untrusted database content
        let dbValue: DatabaseValue = row[0]
        if dbValue.isNull {
            // Handle NULL
        if let date = Date.fromDatabaseValue(dbValue) {
            // Handle valid date
        } else {
            // Handle invalid date
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Error Log&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Database.logError = { (resultCode, message) in
    NSLog(&quot;%@&quot;, &quot;SQLite error \(resultCode): \(message)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See &lt;a href=&quot;https://sqlite.org/errlog.html&quot;&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Unicode&lt;/h2&gt; 
&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt; 
&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt; 
&lt;h3&gt;Unicode functions&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// &quot;JéRôME&quot;
try String.fetchOne(db, sql: &quot;SELECT UPPER(&#39;Jérôme&#39;)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB extends SQLite with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&quot;&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// &quot;JÉRÔME&quot;
let uppercased = DatabaseFunction.uppercase
try String.fetchOne(db, sql: &quot;SELECT \(uppercased.name)(&#39;Jérôme&#39;)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player.select { $0.name.uppercased }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;String Comparison&lt;/h3&gt; 
&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href=&quot;https://www.sqlite.org/datatype3.html#collation&quot;&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.create(table: &quot;player&quot;) { t in
    // Guarantees case-insensitive email unicity
    t.column(&quot;email&quot;, .text).unique().collate(.nocase)
    
    // Sort names in a localized case insensitive way
    t.column(&quot;name&quot;, .text).collate(.localizedCaseInsensitiveCompare)
}

// Players are sorted in a localized case insensitive way:
let players = try Player.order(\.name).fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you can&#39;t or don&#39;t want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let collation = DatabaseCollation.localizedCaseInsensitiveCompare
let players = try Player.fetchAll(db,
    sql: &quot;SELECT * FROM player ORDER BY name COLLATE \(collation.name))&quot;)
let players = try Player.order { $0.name.collating(collation) }.fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let collation = DatabaseCollation(&quot;customCollation&quot;) { (lhs, rhs) -&amp;gt; NSComparisonResult in
    // return the comparison of lhs and rhs strings.
}

// Make the collation available to a database connection
var config = Configuration()
config.prepareDatabase { db in
    db.add(collation: collation)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Memory Management&lt;/h2&gt; 
&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt; 
&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Release as much memory as possible.
dbQueue.releaseMemory()
dbPool.releaseMemory()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If &lt;code&gt;DatabasePool.releaseMemory()&lt;/code&gt; is called while a long read is performed concurrently, then no other read access will be possible until this long read has completed, and the memory has been released. If this does not suit your application needs, look for the asynchronous options below:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can release memory in an asynchronous way as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// On a DatabaseQueue
dbQueue.asyncWriteWithoutTransaction { db in
    db.releaseMemory()
}

// On a DatabasePool
dbPool.releaseMemoryEventually()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;DatabasePool.releaseMemoryEventually()&lt;/code&gt; does not block the current thread, and does not prevent concurrent database accesses. In exchange for this convenience, you don&#39;t know when memory has been freed.&lt;/p&gt; 
&lt;h3&gt;Memory Management on iOS&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;Database queues&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;pools&lt;/a&gt; automatically free non-essential memory when the application receives a memory warning, and when the application enters background.&lt;/p&gt; 
&lt;p&gt;You can opt out of this automatic memory management:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.automaticMemoryManagement = false
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config) // or DatabasePool
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&quot;&gt;FAQ: Opening Connections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&quot;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&quot;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&quot;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-sql&quot;&gt;FAQ: SQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-general&quot;&gt;FAQ: General&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&quot;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&quot;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&quot;&gt;FAQ: Associations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&quot;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-valueobservation&quot;&gt;FAQ: ValueObservation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&quot;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-errors&quot;&gt;FAQ: Errors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&quot;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&quot;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&quot;&gt;SQLite error 1 &quot;no such column&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&quot;&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&quot;&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ: Opening Connections&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&quot;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&quot;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&quot;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I create a database in my application?&lt;/h3&gt; 
&lt;p&gt;First choose a proper location for the database file. Document-based applications will let the user pick a location. Apps that use the database as a global storage will prefer the Application Support directory.&lt;/p&gt; 
&lt;p&gt;The sample code below creates or opens a database file inside its dedicated directory (a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;recommended practice&lt;/a&gt;). On the first run, a new empty database file is created. On subsequent runs, the database file already exists, so it just opens a connection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// HOW TO create an empty database, or open an existing database file

// Create the &quot;Application Support/MyDatabase&quot; directory
let fileManager = FileManager.default
let appSupportURL = try fileManager.url(
    for: .applicationSupportDirectory, in: .userDomainMask,
    appropriateFor: nil, create: true) 
let directoryURL = appSupportURL.appendingPathComponent(&quot;MyDatabase&quot;, isDirectory: true)
try fileManager.createDirectory(at: directoryURL, withIntermediateDirectories: true)

// Open or create the database
let databaseURL = directoryURL.appendingPathComponent(&quot;db.sqlite&quot;)
let dbQueue = try DatabaseQueue(path: databaseURL.path)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt; 
&lt;p&gt;Open a read-only connection to your resource:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// HOW TO open a read-only connection to a database resource

// Get the path to the database resource.
if let dbPath = Bundle.main.path(forResource: &quot;db&quot;, ofType: &quot;sqlite&quot;) {
    // If the resource exists, open a read-only connection.
    // Writes are disallowed because resources can not be modified. 
    var config = Configuration()
    config.readonly = true
    let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
} else {
    // The database resource can not be found.
    // Fix your setup, or report the problem to the user. 
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I close a database connection?&lt;/h3&gt; 
&lt;p&gt;Database connections are automatically closed when &lt;code&gt;DatabaseQueue&lt;/code&gt; or &lt;code&gt;DatabasePool&lt;/code&gt; instances are deinitialized.&lt;/p&gt; 
&lt;p&gt;If the correct execution of your program depends on precise database closing, perform an explicit call to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasereader/close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. This method may fail and create zombie connections, so please check its detailed documentation.&lt;/p&gt; 
&lt;h2&gt;FAQ: SQL&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I print a request as SQL?&lt;/h3&gt; 
&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt; 
&lt;p&gt;You can compile the request into a prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    let request = Player.filter { $0.email == &quot;arthur@example.com&quot; }
    let statement = try request.makePreparedRequest(db).statement
    print(statement) // SELECT * FROM player WHERE email = ?
    print(statement.arguments) // [&quot;arthur@example.com&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another option is to setup a tracing function that prints out the executed SQL requests. For example, provide a tracing function when you connect to the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all SQL statements
var config = Configuration()
config.prepareDatabase { db in
    db.trace { print($0) }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // Prints &quot;SELECT * FROM player WHERE email = ?&quot;
    let players = try Player.filter { $0.email == &quot;arthur@example.com&quot; }.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;FAQ: General&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&quot;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&quot;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I monitor the duration of database statements execution?&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;trace(options:_:)&lt;/code&gt; method, with the &lt;code&gt;.profile&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.trace(options: .profile) { event in
        // Prints all SQL statements with their duration
        print(event)
        
        // Access to detailed profiling information
        if case let .profile(statement, duration) = event, duration &amp;gt; 0.5 {
            print(&quot;Slow query: \(statement.sql)&quot;)
        }
    }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    let players = try Player.filter { $0.email == &quot;arthur@example.com&quot; }.fetchAll(db)
    // Prints &quot;0.003s SELECT * FROM player WHERE email = ?&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;What Are Experimental Features?&lt;/h3&gt; 
&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt; 
&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the &quot;&lt;strong&gt;&lt;span&gt;🔥&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&quot; badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt; 
&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues&quot;&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt; 
&lt;h3&gt;Does GRDB support library evolution and ABI stability?&lt;/h3&gt; 
&lt;p&gt;No, GRDB does not support library evolution and ABI stability. The only promise is API stability according to &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt;, with an exception for &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;experimental features&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Yet, GRDB can be built with the &quot;Build Libraries for Distribution&quot; Xcode option (&lt;code&gt;BUILD_LIBRARY_FOR_DISTRIBUTION&lt;/code&gt;), so that you can build binary frameworks at your convenience.&lt;/p&gt; 
&lt;h2&gt;FAQ: Associations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&quot;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I filter records and only keep those that are associated to another record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch books that have an author, and discard anonymous books.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: TableRecord {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and only fetch books that have an author, discarding anonymous ones:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let books: [Book] = try dbQueue.read { db in
    // SELECT book.* FROM book 
    // JOIN author ON author.id = book.authorID
    let request = Book.joining(required: Book.author)
    return try request.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how this request does not use the &lt;code&gt;filter&lt;/code&gt; method. Indeed, we don&#39;t have any condition to express on any column. Instead, we just need to &quot;require that a book can be joined to its author&quot;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt; below for the opposite question.&lt;/p&gt; 
&lt;h3&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch anonymous books that do not have any author.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: TableRecord {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and only fetch anonymous books that don&#39;t have any author:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let books: [Book] = try dbQueue.read { db in
    // SELECT book.* FROM book
    // LEFT JOIN author ON author.id = book.authorID
    // WHERE author.id IS NULL
    let authorAlias = TableAlias&amp;lt;Author&amp;gt;()
    let request = Book
        .joining(optional: Book.author.aliased(authorAlias))
        .filter(!authorAlias.exists)
    return try request.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This request uses a TableAlias in order to be able to filter on the eventual associated author. We make sure that the &lt;code&gt;Author.primaryKey&lt;/code&gt; is nil, which is another way to say it does not exist: the book has no author.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt; above for the opposite question.&lt;/p&gt; 
&lt;h3&gt;How do I select only one column of an associated record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to fetch all books with their author name, but not the full associated author records.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: Decodable, TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: Decodable, TableRecord {
    ...
    enum Columns {
        static let name = Column(CodingKeys.name)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and the ad-hoc record that decodes it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: Decodable, FetchableRecord {
    var book: Book
    var authorName: String? // nil when the book is anonymous
    
    static func all() -&amp;gt; QueryInterfaceRequest&amp;lt;BookInfo&amp;gt; {
        // SELECT book.*, author.name AS authorName
        // FROM book
        // LEFT JOIN author ON author.id = book.authorID
        return Book
            .annotated(withOptional: Book.author.select { 
                $0.name.forKey(CodingKeys.authorName)
            })
            .asRequest(of: BookInfo.self)
    }
}

let bookInfos: [BookInfo] = try dbQueue.read { db in
    BookInfo.all().fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By defining the request as a static method of BookInfo, you have access to the private &lt;code&gt;CodingKeys.authorName&lt;/code&gt;, and a compiler-checked SQL column name.&lt;/p&gt; 
&lt;p&gt;By using the &lt;code&gt;annotated(withOptional:)&lt;/code&gt; method, you append the author name to the top-level selection that can be decoded by the ad-hoc record.&lt;/p&gt; 
&lt;p&gt;By using &lt;code&gt;asRequest(of:)&lt;/code&gt;, you enhance the type-safety of your request.&lt;/p&gt; 
&lt;h2&gt;FAQ: ValueObservation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&quot;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Why is ValueObservation not publishing value changes?&lt;/h3&gt; 
&lt;p&gt;Sometimes it looks that a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; does not notify the changes you expect.&lt;/p&gt; 
&lt;p&gt;There may be four possible reasons for this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The expected changes were not committed into the database.&lt;/li&gt; 
 &lt;li&gt;The expected changes were committed into the database, but were quickly overwritten.&lt;/li&gt; 
 &lt;li&gt;The observation was stopped.&lt;/li&gt; 
 &lt;li&gt;The observation does not track the expected database region.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To answer the first two questions, look at SQL statements executed by the database. This is done when you open the database connection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all SQL statements
var config = Configuration()
config.prepareDatabase { db in
    db.trace { print(&quot;SQL: \($0)&quot;) }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If, after that, you are convinced that the expected changes were committed into the database, and not overwritten soon after, trace observation events:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let observation = ValueObservation
    .tracking { db in ... }
    .print() // &amp;lt;- trace observation events
let cancellable = observation.start(...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Look at the observation logs which start with &lt;code&gt;cancel&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;: maybe the observation was cancelled by your app, or did fail with an error.&lt;/p&gt; 
&lt;p&gt;Look at the observation logs which start with &lt;code&gt;value&lt;/code&gt;: make sure, again, that the expected value was not actually notified, then overwritten.&lt;/p&gt; 
&lt;p&gt;Finally, look at the observation logs which start with &lt;code&gt;tracked region&lt;/code&gt;. Does the printed database region cover the expected changes?&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(*),team(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;team&lt;/code&gt; tables&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you happen to use the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method and see a mismatch between the tracked region and your expectation, then change the definition of your observation by using &lt;code&gt;tracking(_:)&lt;/code&gt;. You should witness that the logs which start with &lt;code&gt;tracked region&lt;/code&gt; now evolve in order to include the expected changes, and that you get the expected notifications.&lt;/p&gt; 
&lt;p&gt;If after all those steps (thanks you!), your observation is still failing you, please &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/new&quot;&gt;open an issue&lt;/a&gt; and provide a &lt;a href=&quot;https://stackoverflow.com/help/minimal-reproducible-example&quot;&gt;minimal reproducible example&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;FAQ: Errors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&quot;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&quot;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&quot;&gt;SQLite error 1 &quot;no such column&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&quot;&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&quot;&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/h3&gt; 
&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Generic parameter &#39;T&#39; could not be inferred
let string = try dbQueue.read { db in
    let result = try String.fetchOne(db, ...)
    return result
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt; 
&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// General Workaround
let string = try dbQueue.read { db -&amp;gt; String? in
    let result = try String.fetchOne(db, ...)
    return result
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Single-line closure workaround:
let string = try dbQueue.read { db in
    try String.fetchOne(db, ...)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mutation of captured var in concurrently-executing code&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;persistence methods&lt;/a&gt; can trigger a compiler error in async contexts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player = Player(id: nil, name: &quot;Arthur&quot;)
try await dbWriter.write { db in
    // Error: Mutation of captured var &#39;player&#39; in concurrently-executing code
    try player.insert(db)
}
print(player.id) // A non-nil id
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When this happens, prefer the &lt;code&gt;inserted&lt;/code&gt; and &lt;code&gt;saved&lt;/code&gt; methods instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// OK
var player = Player(id: nil, name: &quot;Arthur&quot;)
player = try await dbWriter.write { [player] db in
    return try player.inserted(db)
}
print(player.id) // A non-nil id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SQLite error 1 &quot;no such column&quot;&lt;/h3&gt; 
&lt;p&gt;This error message is self-explanatory: do check for misspelled or non-existing column names.&lt;/p&gt; 
&lt;p&gt;However, sometimes this error only happens when an app runs on a recent operating system (iOS 14+, Big Sur+, etc.) The error does not happen with previous ones.&lt;/p&gt; 
&lt;p&gt;When this is the case, there are two possible explanations:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Maybe a column name is &lt;em&gt;really&lt;/em&gt; misspelled or missing from the database schema.&lt;/p&gt; &lt;p&gt;To find it, check the SQL statement that comes with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Maybe the application is using the character &lt;code&gt;&quot;&lt;/code&gt; instead of the single quote &lt;code&gt;&#39;&lt;/code&gt; as the delimiter for string literals in raw SQL queries. Recent versions of SQLite have learned to tell about this deviation from the SQL standard, and this is why you are seeing this error.&lt;/p&gt; &lt;p&gt;For example: this is not standard SQL: &lt;code&gt;UPDATE player SET name = &quot;Arthur&quot;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The standard version is: &lt;code&gt;UPDATE player SET name = &#39;Arthur&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It just happens that old versions of SQLite used to accept the former, non-standard version. Newer versions are able to reject it with an error.&lt;/p&gt; &lt;p&gt;The fix is to change the SQL statements run by the application: replace &lt;code&gt;&quot;&lt;/code&gt; with &lt;code&gt;&#39;&lt;/code&gt; in your string literals.&lt;/p&gt; &lt;p&gt;It may also be time to learn about statement arguments and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;SQL injection&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = ...

// NOT STANDARD (double quote)
try db.execute(sql: &quot;&quot;&quot;
    UPDATE player SET name = &quot;\(name)&quot;
    &quot;&quot;&quot;)

// STANDARD, BUT STILL NOT RECOMMENDED (single quote)
try db.execute(sql: &quot;UPDATE player SET name = &#39;\(name)&#39;&quot;)

// STANDARD, AND RECOMMENDED (statement arguments)
try db.execute(sql: &quot;UPDATE player SET name = ?&quot;, arguments: [name])

// STANDARD, AND RECOMMENDED (SQL interpolation)
try db.execute(literal: &quot;UPDATE player SET name = \(name)&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://sqlite.org/quirks.html#double_quoted_string_literals_are_accepted&quot;&gt;Double-quoted String Literals Are Accepted&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/configuration/acceptsdoublequotedstringliterals&quot;&gt;Configuration.acceptsDoubleQuotedStringLiterals&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/h3&gt; 
&lt;p&gt;Those errors may be the sign that SQLite can&#39;t access the database due to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy/encrypting_your_app_s_files&quot;&gt;data protection&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&quot;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&quot;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch DatabaseError.SQLITE_IOERR, DatabaseError.SQLITE_AUTH {
    // Handle possible data protection error
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href=&quot;https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values&quot;&gt;file protection&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/h3&gt; 
&lt;p&gt;You may get the error &quot;wrong number of statement arguments&quot; when executing a LIKE query similar to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
let players = try dbQueue.read { db in
    try Player.fetchAll(db, sql: &quot;SELECT * FROM player WHERE name LIKE &#39;%?%&#39;&quot;, arguments: [name])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The problem lies in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; pattern.&lt;/p&gt; 
&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href=&quot;https://www.sqlite.org/lang_expr.html#varparam&quot;&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt; 
&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
let players: [Player] = try dbQueue.read { db in
    let pattern = &quot;%\(name)%&quot;
    return try Player.fetchAll(db, sql: &quot;SELECT * FROM player WHERE name LIKE ?&quot;, arguments: [pattern])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Sample Code&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&quot;&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/SortedDifference&quot;&gt;groue/SortedDifference&lt;/a&gt;: How to synchronize a database table with a JSON payload&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://pierlis.com&quot;&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alextrob&quot;&gt;@alextrob&lt;/a&gt;, &lt;a href=&quot;https://github.com/alexwlchan&quot;&gt;@alexwlchan&lt;/a&gt;, &lt;a href=&quot;https://github.com/bellebethcooper&quot;&gt;@bellebethcooper&lt;/a&gt;, &lt;a href=&quot;https://github.com/bfad&quot;&gt;@bfad&lt;/a&gt;, &lt;a href=&quot;https://github.com/cfilipov&quot;&gt;@cfilipov&lt;/a&gt;, &lt;a href=&quot;https://github.com/charlesmchen-signal&quot;&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href=&quot;https://github.com/Chiliec&quot;&gt;@Chiliec&lt;/a&gt;, &lt;a href=&quot;https://github.com/chrisballinger&quot;&gt;@chrisballinger&lt;/a&gt;, &lt;a href=&quot;https://github.com/darrenclark&quot;&gt;@darrenclark&lt;/a&gt;, &lt;a href=&quot;https://github.com/davidkraus&quot;&gt;@davidkraus&lt;/a&gt;, &lt;a href=&quot;https://github.com/eburns-vmware&quot;&gt;@eburns-vmware&lt;/a&gt;, &lt;a href=&quot;https://github.com/felixscheinost&quot;&gt;@felixscheinost&lt;/a&gt;, &lt;a href=&quot;https://github.com/fpillet&quot;&gt;@fpillet&lt;/a&gt;, &lt;a href=&quot;https://github.com/gcox&quot;&gt;@gcox&lt;/a&gt;, &lt;a href=&quot;https://github.com/GetToSet&quot;&gt;@GetToSet&lt;/a&gt;, &lt;a href=&quot;https://github.com/gjeck&quot;&gt;@gjeck&lt;/a&gt;, &lt;a href=&quot;https://github.com/guidedways&quot;&gt;@guidedways&lt;/a&gt;, &lt;a href=&quot;https://github.com/gusrota&quot;&gt;@gusrota&lt;/a&gt;, &lt;a href=&quot;https://github.com/haikusw&quot;&gt;@haikusw&lt;/a&gt;, &lt;a href=&quot;https://github.com/hartbit&quot;&gt;@hartbit&lt;/a&gt;, &lt;a href=&quot;https://github.com/holsety&quot;&gt;@holsety&lt;/a&gt;, &lt;a href=&quot;https://github.com/jroselightricks&quot;&gt;@jroselightricks&lt;/a&gt;, &lt;a href=&quot;https://github.com/kdubb&quot;&gt;@kdubb&lt;/a&gt;, &lt;a href=&quot;https://github.com/kluufger&quot;&gt;@kluufger&lt;/a&gt;, &lt;a href=&quot;https://github.com/KyleLeneau&quot;&gt;@KyleLeneau&lt;/a&gt;, &lt;a href=&quot;https://github.com/layoutSubviews&quot;&gt;@layoutSubviews&lt;/a&gt;, &lt;a href=&quot;https://github.com/mallman&quot;&gt;@mallman&lt;/a&gt;, &lt;a href=&quot;https://github.com/MartinP7r&quot;&gt;@MartinP7r&lt;/a&gt;, &lt;a href=&quot;https://github.com/Marus&quot;&gt;@Marus&lt;/a&gt;, &lt;a href=&quot;https://github.com/mattgallagher&quot;&gt;@mattgallagher&lt;/a&gt;, &lt;a href=&quot;https://github.com/MaxDesiatov&quot;&gt;@MaxDesiatov&lt;/a&gt;, &lt;a href=&quot;https://github.com/michaelkirk-signal&quot;&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href=&quot;https://github.com/mtancock&quot;&gt;@mtancock&lt;/a&gt;, &lt;a href=&quot;https://github.com/pakko972&quot;&gt;@pakko972&lt;/a&gt;, &lt;a href=&quot;https://github.com/peter-ss&quot;&gt;@peter-ss&lt;/a&gt;, &lt;a href=&quot;https://github.com/pierlo&quot;&gt;@pierlo&lt;/a&gt;, &lt;a href=&quot;https://github.com/pocketpixels&quot;&gt;@pocketpixels&lt;/a&gt;, &lt;a href=&quot;https://github.com/pp5x&quot;&gt;@pp5x&lt;/a&gt;, &lt;a href=&quot;https://github.com/professordeng&quot;&gt;@professordeng&lt;/a&gt;, &lt;a href=&quot;https://github.com/robcas3&quot;&gt;@robcas3&lt;/a&gt;, &lt;a href=&quot;https://github.com/runhum&quot;&gt;@runhum&lt;/a&gt;, &lt;a href=&quot;https://github.com/sberrevoets&quot;&gt;@sberrevoets&lt;/a&gt;, &lt;a href=&quot;https://github.com/schveiguy&quot;&gt;@schveiguy&lt;/a&gt;, &lt;a href=&quot;https://github.com/SD10&quot;&gt;@SD10&lt;/a&gt;, &lt;a href=&quot;https://github.com/sobri909&quot;&gt;@sobri909&lt;/a&gt;, &lt;a href=&quot;https://github.com/sroddy&quot;&gt;@sroddy&lt;/a&gt;, &lt;a href=&quot;https://github.com/steipete&quot;&gt;@steipete&lt;/a&gt;, &lt;a href=&quot;https://github.com/swiftlyfalling&quot;&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href=&quot;https://github.com/Timac&quot;&gt;@Timac&lt;/a&gt;, &lt;a href=&quot;https://github.com/tternes&quot;&gt;@tternes&lt;/a&gt;, &lt;a href=&quot;https://github.com/valexa&quot;&gt;@valexa&lt;/a&gt;, &lt;a href=&quot;https://github.com/wuyuehyang&quot;&gt;@wuyuehyang&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZevEisenberg&quot;&gt;@ZevEisenberg&lt;/a&gt;, and &lt;a href=&quot;https://github.com/zmeyc&quot;&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aymerick&quot;&gt;@aymerick&lt;/a&gt; and &lt;a href=&quot;https://github.com/kali&quot;&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/Provider/Style/URI&quot;&gt;URIs don&#39;t change: people change them.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Adding support for missing SQL functions or operators&lt;/h4&gt; 
&lt;p&gt;This chapter was renamed to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Advanced DatabasePool&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;After Commit Hook&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Asynchronous APIs&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Changes Tracking&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Concurrency&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Custom Value Types&lt;/h4&gt; 
&lt;p&gt;Custom Value Types conform to the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h4&gt;Customized Decoding of Database Rows&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Customizing the Persistence Methods&lt;/h4&gt; 
&lt;p&gt;This chapter was replaced with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Changes Observation&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Configuration&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/configuration&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Queues&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Pools&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Snapshots&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h4&gt; 
&lt;p&gt;This chapter was removed. See the references of &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasereader&quot;&gt;DatabaseReader&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasewriter&quot;&gt;DatabaseWriter&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Date and UUID Coding Strategies&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-date-and-uuid-coding-strategies&quot;&gt;Data, Date, and UUID Coding Strategies&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Dealing with External Connections&lt;/h4&gt; 
&lt;p&gt;This chapter has been superseded by the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesharing&quot;&gt;Sharing a Database&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h4&gt;Differences between Database Queues and Pools&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Enabling FTS5 Support&lt;/h4&gt; 
&lt;p&gt;FTS5 is enabled by default since GRDB 6.7.0.&lt;/p&gt; 
&lt;h4&gt;FetchedRecordsController&lt;/h4&gt; 
&lt;p&gt;FetchedRecordsController has been removed in GRDB 5.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt; chapter describes the other ways to observe the database.&lt;/p&gt; 
&lt;h4&gt;Full-Text Search&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Guarantees and Rules&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Joined Queries Support&lt;/h4&gt; 
&lt;p&gt;This chapter was replaced with the documentation of &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/splittingrowadapters(columncounts:)&quot;&gt;splittingRowAdapters(columnCounts:)&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;List of Record Methods&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterface&quot;&gt;Records and the Query Interface&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Migrations&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/migrations&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;NSNumber and NSDecimalNumber&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Persistable Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;PersistenceError&lt;/h4&gt; 
&lt;p&gt;This error was renamed to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Prepared Statements&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Record Class&lt;/h4&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/record&quot;&gt;&lt;code&gt;Record&lt;/code&gt;&lt;/a&gt; class is a legacy GRDB type. Since GRDB 7, it is not recommended to define record types by subclassing the &lt;code&gt;Record&lt;/code&gt; class.&lt;/p&gt; 
&lt;h4&gt;Row Adapters&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RowConvertible Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;TableMapping Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;Transactions and Savepoints&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactions&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Transaction Hook&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;TransactionObserver Protocol&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactionobserver&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Unsafe Concurrency APIs&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;ValueObservation&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;ValueObservation and DatabaseRegionObservation&lt;/h4&gt; 
&lt;p&gt;This chapter has been superseded by &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseregionobservation&quot;&gt;DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

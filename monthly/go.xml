<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Go Monthly Trending</title>
    <description>Monthly Trending of Go in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:53:04 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>aquasecurity/trivy</title>
      <link>https://github.com/aquasecurity/trivy</link>
      <description>&lt;p&gt;Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/logo.png&quot; width=&quot;200&quot; /&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/aquasecurity/trivy.svg?logo=github&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aquasecurity/trivy/actions/workflows/test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/aquasecurity/trivy/actions/workflows/test.yaml/badge.svg?sanitize=true&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/aquasecurity/trivy&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/aquasecurity/trivy&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aquasecurity/trivy/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License: Apache-2.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/aquasecurity/trivy/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/aquasecurity/trivy/total?logo=github&quot; alt=&quot;GitHub Downloads&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/aquasec/trivy?logo=docker&amp;amp;label=docker%20pulls%20%2F%20trivy&quot; alt=&quot;Docker Pulls&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://trivy.dev/latest/docs/&quot;&gt;📖 Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Trivy (&lt;a href=&quot;https://raw.githubusercontent.com/aquasecurity/trivy/main/#how-to-pronounce-the-name-trivy&quot;&gt;pronunciation&lt;/a&gt;) is a comprehensive and versatile security scanner. Trivy has &lt;em&gt;scanners&lt;/em&gt; that look for security issues, and &lt;em&gt;targets&lt;/em&gt; where it can find those issues.&lt;/p&gt; 
&lt;p&gt;Targets (what Trivy can scan):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Container Image&lt;/li&gt; 
 &lt;li&gt;Filesystem&lt;/li&gt; 
 &lt;li&gt;Git Repository (remote)&lt;/li&gt; 
 &lt;li&gt;Virtual Machine Image&lt;/li&gt; 
 &lt;li&gt;Kubernetes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Scanners (what Trivy can find there):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OS packages and software dependencies in use (SBOM)&lt;/li&gt; 
 &lt;li&gt;Known vulnerabilities (CVEs)&lt;/li&gt; 
 &lt;li&gt;IaC issues and misconfigurations&lt;/li&gt; 
 &lt;li&gt;Sensitive information and secrets&lt;/li&gt; 
 &lt;li&gt;Software licenses&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy supports most popular programming languages, operating systems, and platforms. For a complete list, see the &lt;a href=&quot;https://trivy.dev/latest/docs/coverage/&quot;&gt;Scanning Coverage&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;To learn more, go to the &lt;a href=&quot;https://trivy.dev&quot;&gt;Trivy homepage&lt;/a&gt; for feature highlights, or to the &lt;a href=&quot;https://trivy.dev/latest/docs/&quot;&gt;Documentation site&lt;/a&gt; for detailed information.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Get Trivy&lt;/h3&gt; 
&lt;p&gt;Trivy is available in most common distribution channels. The full list of installation options is available in the &lt;a href=&quot;https://trivy.dev/latest/getting-started/installation/&quot;&gt;Installation&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker run aquasec/trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Download binary from &lt;a href=&quot;https://github.com/aquasecurity/trivy/releases/latest/&quot;&gt;https://github.com/aquasecurity/trivy/releases/latest/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://trivy.dev/latest/getting-started/installation/&quot;&gt;Installation&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy is integrated with many popular platforms and applications. The complete list of integrations is available in the &lt;a href=&quot;https://trivy.dev/latest/ecosystem/&quot;&gt;Ecosystem&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy-action&quot;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy-operator&quot;&gt;Kubernetes operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy-vscode-extension&quot;&gt;VS Code plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://trivy.dev/latest/ecosystem/&quot;&gt;Ecosystem&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Canary builds&lt;/h3&gt; 
&lt;p&gt;There are canary builds (&lt;a href=&quot;https://hub.docker.com/r/aquasec/trivy/tags?page=1&amp;amp;name=canary&quot;&gt;Docker Hub&lt;/a&gt;, &lt;a href=&quot;https://github.com/aquasecurity/trivy/pkgs/container/trivy/75776514?tag=canary&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://gallery.ecr.aws/aquasecurity/trivy#canary&quot;&gt;ECR&lt;/a&gt; images and &lt;a href=&quot;https://github.com/aquasecurity/trivy/actions/workflows/canary.yaml&quot;&gt;binaries&lt;/a&gt;) as generated every push to main branch.&lt;/p&gt; 
&lt;p&gt;Please be aware: canary builds might have critical bugs, it&#39;s not recommended for use in production.&lt;/p&gt; 
&lt;h3&gt;General usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;trivy &amp;lt;target&amp;gt; [--scanners &amp;lt;scanner1,scanner2&amp;gt;] &amp;lt;subject&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;trivy image python:3.4-alpine
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov&quot;&gt;https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;trivy fs --scanners vuln,secret,misconfig myproject/
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov&quot;&gt;https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;trivy k8s --report summary cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/trivy-k8s.png&quot; alt=&quot;k8s summary&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How to pronounce the name &quot;Trivy&quot;?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;tri&lt;/code&gt; is pronounced like &lt;strong&gt;tri&lt;/strong&gt;gger, &lt;code&gt;vy&lt;/code&gt; is pronounced like en&lt;strong&gt;vy&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Want more? Check out Aqua&lt;/h2&gt; 
&lt;p&gt;If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering.&lt;br /&gt; You can find a high level comparison table specific to Trivy users &lt;a href=&quot;https://trivy.dev/latest/commercial/compare/&quot;&gt;here&lt;/a&gt;. In addition check out the &lt;a href=&quot;https://aquasec.com&quot;&gt;https://aquasec.com&lt;/a&gt; website for more information about our products and services. If you&#39;d like to contact Aqua or request a demo, please use this form: &lt;a href=&quot;https://www.aquasec.com/demo&quot;&gt;https://www.aquasec.com/demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Trivy is an &lt;a href=&quot;https://aquasec.com&quot;&gt;Aqua Security&lt;/a&gt; open source project.&lt;br /&gt; Learn about our open source work and portfolio &lt;a href=&quot;https://www.aquasec.com/products/open-source-projects/&quot;&gt;here&lt;/a&gt;.&lt;br /&gt; Contact us about any matter by opening a GitHub Discussion &lt;a href=&quot;https://github.com/aquasecurity/trivy/discussions&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please ensure to abide by our &lt;a href=&quot;https://github.com/aquasecurity/community/raw/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; during all interactions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazygit</title>
      <link>https://github.com/jesseduffield/lazygit</link>
      <description>&lt;p&gt;simple terminal UI for git commands&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazygit_20231023&quot;&gt; 
  &lt;div&gt; 
   &lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/warp.png&quot; width=&quot;330&quot; alt=&quot;Warp&quot; /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href=&quot;https://www.subble.com&quot;&gt; 
  &lt;div&gt; 
   &lt;img src=&quot;https://subble-marketing-portal-media-storage.s3.amazonaws.com/images/subble-black-name-logo.svg?sanitize=true&quot; width=&quot;230&quot; alt=&quot;Subble&quot; /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by helping you manage its software subscriptions. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;536&quot; src=&quot;https://user-images.githubusercontent.com/8456633/174470852-339b5011-5800-4bb9-a628-ff230aa8cd4e.png&quot; /&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;A simple terminal UI for git commands &lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/jesseduffield/lazygit/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/jesseduffield/lazygit/total&quot; alt=&quot;GitHub Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/jesseduffield/lazygit&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/jesseduffield/lazygit&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade&quot;&gt;&lt;img src=&quot;https://app.codacy.com/project/badge/Grade/f46416b715d74622895657935fcada21&quot; alt=&quot;Codacy Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_coverage&quot;&gt;&lt;img src=&quot;https://app.codacy.com/project/badge/Coverage/f46416b715d74622895657935fcada21&quot; alt=&quot;Codacy Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://golangci-lint.run/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/linted%20by-golangci--lint-brightgreen&quot; alt=&quot;golangci-lint&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/jesseduffield/lazygit/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/jesseduffield/lazygit?color=blue&quot; alt=&quot;GitHub tag&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/lazygit&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/v/lazygit?color=blue&quot; alt=&quot;homebrew&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_and_push-compressed.gif&quot; alt=&quot;commit_and_push&quot; /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; Maintenance of this project is made possible by all the &lt;a href=&quot;https://github.com/jesseduffield/lazygit/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and &lt;a href=&quot;https://github.com/sponsors/jesseduffield&quot;&gt;sponsors&lt;/a&gt;. If you&#39;d like to sponsor this project and have your avatar or company logo appear below &lt;a href=&quot;https://github.com/sponsors/jesseduffield&quot;&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- sponsors --&gt;&lt;a href=&quot;https://github.com/intabulas&quot;&gt;&lt;img src=&quot;https://github.com/intabulas.png&quot; width=&quot;60px&quot; alt=&quot;Mark Lussier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/peppy&quot;&gt;&lt;img src=&quot;https://github.com/peppy.png&quot; width=&quot;60px&quot; alt=&quot;Dean Herbert&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/piot&quot;&gt;&lt;img src=&quot;https://github.com/piot.png&quot; width=&quot;60px&quot; alt=&quot;Peter Bjorklund&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/rgwood&quot;&gt;&lt;img src=&quot;https://github.com/rgwood.png&quot; width=&quot;60px&quot; alt=&quot;Reilly Wood&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/oliverguenther&quot;&gt;&lt;img src=&quot;https://github.com/oliverguenther.png&quot; width=&quot;60px&quot; alt=&quot;Oliver Günther&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/pawanjay176&quot;&gt;&lt;img src=&quot;https://github.com/pawanjay176.png&quot; width=&quot;60px&quot; alt=&quot;Pawan Dhananjay&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bdach&quot;&gt;&lt;img src=&quot;https://github.com/bdach.png&quot; width=&quot;60px&quot; alt=&quot;Bartłomiej Dach&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/carstengehling&quot;&gt;&lt;img src=&quot;https://github.com/carstengehling.png&quot; width=&quot;60px&quot; alt=&quot;Carsten Gehling&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ceuk&quot;&gt;&lt;img src=&quot;https://github.com/ceuk.png&quot; width=&quot;60px&quot; alt=&quot;CEUK&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Xetera&quot;&gt;&lt;img src=&quot;https://github.com/Xetera.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/HoldenLucas&quot;&gt;&lt;img src=&quot;https://github.com/HoldenLucas.png&quot; width=&quot;60px&quot; alt=&quot;Holden Lucas&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nartc&quot;&gt;&lt;img src=&quot;https://github.com/nartc.png&quot; width=&quot;60px&quot; alt=&quot;Chau Tran&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/matejcik&quot;&gt;&lt;img src=&quot;https://github.com/matejcik.png&quot; width=&quot;60px&quot; alt=&quot;matejcik&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/lucatume&quot;&gt;&lt;img src=&quot;https://github.com/lucatume.png&quot; width=&quot;60px&quot; alt=&quot;theAverageDev (Luca Tumedei)&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/IvanZuy&quot;&gt;&lt;img src=&quot;https://github.com/IvanZuy.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nicholascloud&quot;&gt;&lt;img src=&quot;https://github.com/nicholascloud.png&quot; width=&quot;60px&quot; alt=&quot;Nicholas Cloud&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ava1ar&quot;&gt;&lt;img src=&quot;https://github.com/ava1ar.png&quot; width=&quot;60px&quot; alt=&quot;Aliaksandr Stelmachonak&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/minidfx&quot;&gt;&lt;img src=&quot;https://github.com/minidfx.png&quot; width=&quot;60px&quot; alt=&quot;Burgy Benjamin&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JoeKlemmer&quot;&gt;&lt;img src=&quot;https://github.com/JoeKlemmer.png&quot; width=&quot;60px&quot; alt=&quot;Joe Klemmer&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tobi&quot;&gt;&lt;img src=&quot;https://github.com/tobi.png&quot; width=&quot;60px&quot; alt=&quot;Tobias Lütke&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/benbfortis&quot;&gt;&lt;img src=&quot;https://github.com/benbfortis.png&quot; width=&quot;60px&quot; alt=&quot;Ben Beaumont&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jakewarren&quot;&gt;&lt;img src=&quot;https://github.com/jakewarren.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tgpholly&quot;&gt;&lt;img src=&quot;https://github.com/tgpholly.png&quot; width=&quot;60px&quot; alt=&quot;Holly&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/socketbox&quot;&gt;&lt;img src=&quot;https://github.com/socketbox.png&quot; width=&quot;60px&quot; alt=&quot;Casey Boettcher&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bitprophet&quot;&gt;&lt;img src=&quot;https://github.com/bitprophet.png&quot; width=&quot;60px&quot; alt=&quot;Jeff Forcier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tayleighr&quot;&gt;&lt;img src=&quot;https://github.com/tayleighr.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Novakov&quot;&gt;&lt;img src=&quot;https://github.com/Novakov.png&quot; width=&quot;60px&quot; alt=&quot;Maciej T. Nowak&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nekhaevskiy&quot;&gt;&lt;img src=&quot;https://github.com/nekhaevskiy.png&quot; width=&quot;60px&quot; alt=&quot;Yury&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/reivilibre&quot;&gt;&lt;img src=&quot;https://github.com/reivilibre.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/andreaskurth&quot;&gt;&lt;img src=&quot;https://github.com/andreaskurth.png&quot; width=&quot;60px&quot; alt=&quot;Andreas Kurth&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/BSteffaniak&quot;&gt;&lt;img src=&quot;https://github.com/BSteffaniak.png&quot; width=&quot;60px&quot; alt=&quot;Braden Steffaniak&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jordan-gillard&quot;&gt;&lt;img src=&quot;https://github.com/jordan-gillard.png&quot; width=&quot;60px&quot; alt=&quot;Jordan Gillard&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/smangels&quot;&gt;&lt;img src=&quot;https://github.com/smangels.png&quot; width=&quot;60px&quot; alt=&quot;Sebastian&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/amslezak&quot;&gt;&lt;img src=&quot;https://github.com/amslezak.png&quot; width=&quot;60px&quot; alt=&quot;Andy Slezak&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mkock&quot;&gt;&lt;img src=&quot;https://github.com/mkock.png&quot; width=&quot;60px&quot; alt=&quot;Martin Kock&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jessealama&quot;&gt;&lt;img src=&quot;https://github.com/jessealama.png&quot; width=&quot;60px&quot; alt=&quot;Jesse Alama&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/danielkokott&quot;&gt;&lt;img src=&quot;https://github.com/danielkokott.png&quot; width=&quot;60px&quot; alt=&quot;Daniel Kokott&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/heijmans&quot;&gt;&lt;img src=&quot;https://github.com/heijmans.png&quot; width=&quot;60px&quot; alt=&quot;Jan Heijmans&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/knowald&quot;&gt;&lt;img src=&quot;https://github.com/knowald.png&quot; width=&quot;60px&quot; alt=&quot;Kevin Nowald&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/omarluq&quot;&gt;&lt;img src=&quot;https://github.com/omarluq.png&quot; width=&quot;60px&quot; alt=&quot;Omar Luq&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ethanjli&quot;&gt;&lt;img src=&quot;https://github.com/ethanjli.png&quot; width=&quot;60px&quot; alt=&quot;Ethan Li&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/phubaba&quot;&gt;&lt;img src=&quot;https://github.com/phubaba.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/canhazcodez&quot;&gt;&lt;img src=&quot;https://github.com/canhazcodez.png&quot; width=&quot;60px&quot; alt=&quot;Maxi&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/neunkasulle&quot;&gt;&lt;img src=&quot;https://github.com/neunkasulle.png&quot; width=&quot;60px&quot; alt=&quot;Jan Zenkner&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RVxLab&quot;&gt;&lt;img src=&quot;https://github.com/RVxLab.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/FrederickGeek8&quot;&gt;&lt;img src=&quot;https://github.com/FrederickGeek8.png&quot; width=&quot;60px&quot; alt=&quot;Frederick Morlock&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ezdac&quot;&gt;&lt;img src=&quot;https://github.com/ezdac.png&quot; width=&quot;60px&quot; alt=&quot;Maximilian Langenfeld&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dbuls&quot;&gt;&lt;img src=&quot;https://github.com/dbuls.png&quot; width=&quot;60px&quot; alt=&quot;Davis Buls&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/lppassos&quot;&gt;&lt;img src=&quot;https://github.com/lppassos.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/neilcode&quot;&gt;&lt;img src=&quot;https://github.com/neilcode.png&quot; width=&quot;60px&quot; alt=&quot;Neil Lambert&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dhh&quot;&gt;&lt;img src=&quot;https://github.com/dhh.png&quot; width=&quot;60px&quot; alt=&quot;David Heinemeier Hansson&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ethanfischer&quot;&gt;&lt;img src=&quot;https://github.com/ethanfischer.png&quot; width=&quot;60px&quot; alt=&quot;Ethan Fischer&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/poshboytl&quot;&gt;&lt;img src=&quot;https://github.com/poshboytl.png&quot; width=&quot;60px&quot; alt=&quot;Terry Tai&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/roesnera&quot;&gt;&lt;img src=&quot;https://github.com/roesnera.png&quot; width=&quot;60px&quot; alt=&quot;Adam Roesner&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/seven1m&quot;&gt;&lt;img src=&quot;https://github.com/seven1m.png&quot; width=&quot;60px&quot; alt=&quot;Tim Morgan&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sgoridotla1&quot;&gt;&lt;img src=&quot;https://github.com/sgoridotla1.png&quot; width=&quot;60px&quot; alt=&quot;Max Shypulniak&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ADIX7&quot;&gt;&lt;img src=&quot;https://github.com/ADIX7.png&quot; width=&quot;60px&quot; alt=&quot;Kovács Ádám&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/slowdub&quot;&gt;&lt;img src=&quot;https://github.com/slowdub.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/serranomorante&quot;&gt;&lt;img src=&quot;https://github.com/serranomorante.png&quot; width=&quot;60px&quot; alt=&quot;Patricio Serrano&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kiriDevs&quot;&gt;&lt;img src=&quot;https://github.com/kiriDevs.png&quot; width=&quot;60px&quot; alt=&quot;Kiri&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Bparsons0904&quot;&gt;&lt;img src=&quot;https://github.com/Bparsons0904.png&quot; width=&quot;60px&quot; alt=&quot;Bob Parsons&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bjornevik&quot;&gt;&lt;img src=&quot;https://github.com/bjornevik.png&quot; width=&quot;60px&quot; alt=&quot;John Even Bjørnevik&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/moberst&quot;&gt;&lt;img src=&quot;https://github.com/moberst.png&quot; width=&quot;60px&quot; alt=&quot;Michael Oberst&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/stianh&quot;&gt;&lt;img src=&quot;https://github.com/stianh.png&quot; width=&quot;60px&quot; alt=&quot;Stian Hegglund&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/adam-e-trepanier&quot;&gt;&lt;img src=&quot;https://github.com/adam-e-trepanier.png&quot; width=&quot;60px&quot; alt=&quot;Adam Trepanier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/arkalon76&quot;&gt;&lt;img src=&quot;https://github.com/arkalon76.png&quot; width=&quot;60px&quot; alt=&quot;Kenth Fagerlund&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Djuuu&quot;&gt;&lt;img src=&quot;https://github.com/Djuuu.png&quot; width=&quot;60px&quot; alt=&quot;Julien Tardot&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/antikytheraton&quot;&gt;&lt;img src=&quot;https://github.com/antikytheraton.png&quot; width=&quot;60px&quot; alt=&quot;Aaron Arredondo&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ellord&quot;&gt;&lt;img src=&quot;https://github.com/ellord.png&quot; width=&quot;60px&quot; alt=&quot;Ellord Tayag&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/EdgarPost&quot;&gt;&lt;img src=&quot;https://github.com/EdgarPost.png&quot; width=&quot;60px&quot; alt=&quot;Edgar Post-Buijs&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sbc64&quot;&gt;&lt;img src=&quot;https://github.com/sbc64.png&quot; width=&quot;60px&quot; alt=&quot;sbc64&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/caillou&quot;&gt;&lt;img src=&quot;https://github.com/caillou.png&quot; width=&quot;60px&quot; alt=&quot;Pierre Spring&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mebezac&quot;&gt;&lt;img src=&quot;https://github.com/mebezac.png&quot; width=&quot;60px&quot; alt=&quot;Zac Clay&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Tom94&quot;&gt;&lt;img src=&quot;https://github.com/Tom94.png&quot; width=&quot;60px&quot; alt=&quot;Thomas Müller&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ccssmnn&quot;&gt;&lt;img src=&quot;https://github.com/ccssmnn.png&quot; width=&quot;60px&quot; alt=&quot;Carl Assmann&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ognevsd&quot;&gt;&lt;img src=&quot;https://github.com/ognevsd.png&quot; width=&quot;60px&quot; alt=&quot;Sergey Ognev&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/moodyhunter&quot;&gt;&lt;img src=&quot;https://github.com/moodyhunter.png&quot; width=&quot;60px&quot; alt=&quot;Moody Liu&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/code-hunger&quot;&gt;&lt;img src=&quot;https://github.com/code-hunger.png&quot; width=&quot;60px&quot; alt=&quot;Alex G&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/elithper&quot;&gt;&lt;img src=&quot;https://github.com/elithper.png&quot; width=&quot;60px&quot; alt=&quot;Michael Howard&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/LasseBloch&quot;&gt;&lt;img src=&quot;https://github.com/LasseBloch.png&quot; width=&quot;60px&quot; alt=&quot;Lasse Bloch Lauritsen&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/lmarburger&quot;&gt;&lt;img src=&quot;https://github.com/lmarburger.png&quot; width=&quot;60px&quot; alt=&quot;Larry Marburger&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dbrockman&quot;&gt;&lt;img src=&quot;https://github.com/dbrockman.png&quot; width=&quot;60px&quot; alt=&quot;David Brockman&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/slavshik&quot;&gt;&lt;img src=&quot;https://github.com/slavshik.png&quot; width=&quot;60px&quot; alt=&quot;Alexander Slavschik&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/aidalgol&quot;&gt;&lt;img src=&quot;https://github.com/aidalgol.png&quot; width=&quot;60px&quot; alt=&quot;Aidan Gauland&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mbienkowsk&quot;&gt;&lt;img src=&quot;https://github.com/mbienkowsk.png&quot; width=&quot;60px&quot; alt=&quot;Maksym Bieńkowski&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/joshuawootonn&quot;&gt;&lt;img src=&quot;https://github.com/joshuawootonn.png&quot; width=&quot;60px&quot; alt=&quot;Joshua Wootonn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/I4nJ&quot;&gt;&lt;img src=&quot;https://github.com/I4nJ.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/gurbindersingh&quot;&gt;&lt;img src=&quot;https://github.com/gurbindersingh.png&quot; width=&quot;60px&quot; alt=&quot;Gurbinder Singh&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sandviklee&quot;&gt;&lt;img src=&quot;https://github.com/sandviklee.png&quot; width=&quot;60px&quot; alt=&quot;Simon Sandvik Lee&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/glagnar&quot;&gt;&lt;img src=&quot;https://github.com/glagnar.png&quot; width=&quot;60px&quot; alt=&quot;Thomas Gilbert&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/skrzepto&quot;&gt;&lt;img src=&quot;https://github.com/skrzepto.png&quot; width=&quot;60px&quot; alt=&quot;Szymon Mucha&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TimShilov&quot;&gt;&lt;img src=&quot;https://github.com/TimShilov.png&quot; width=&quot;60px&quot; alt=&quot;Tim Shilov&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/unnawut&quot;&gt;&lt;img src=&quot;https://github.com/unnawut.png&quot; width=&quot;60px&quot; alt=&quot;Unnawut Leepaisalsuwanna&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/wortmanb&quot;&gt;&lt;img src=&quot;https://github.com/wortmanb.png&quot; width=&quot;60px&quot; alt=&quot;Bret Wortman&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/andre-lameirinhas&quot;&gt;&lt;img src=&quot;https://github.com/andre-lameirinhas.png&quot; width=&quot;60px&quot; alt=&quot;André Lameirinhas&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/SVappsLAB&quot;&gt;&lt;img src=&quot;https://github.com/SVappsLAB.png&quot; width=&quot;60px&quot; alt=&quot;Scott Velez&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ooojustin&quot;&gt;&lt;img src=&quot;https://github.com/ooojustin.png&quot; width=&quot;60px&quot; alt=&quot;justin&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TakodaS&quot;&gt;&lt;img src=&quot;https://github.com/TakodaS.png&quot; width=&quot;60px&quot; alt=&quot;Austen Bolitho&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mantzu132&quot;&gt;&lt;img src=&quot;https://github.com/mantzu132.png&quot; width=&quot;60px&quot; alt=&quot;Mantas&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mayfieldiv&quot;&gt;&lt;img src=&quot;https://github.com/mayfieldiv.png&quot; width=&quot;60px&quot; alt=&quot;Mayfield&quot; /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Rant time: You&#39;ve heard it before, git is &lt;em&gt;powerful&lt;/em&gt;, but what good is that power when everything is so damn hard to do? Interactive rebasing requires you to edit a goddamn TODO file in your editor? &lt;em&gt;Are you kidding me?&lt;/em&gt; To stage part of a file you need to use a command line program to step through each hunk and if a hunk can&#39;t be split down any further but contains code you don&#39;t want to stage, you have to edit an arcane patch file &lt;em&gt;by hand&lt;/em&gt;? &lt;em&gt;Are you KIDDING me?!&lt;/em&gt; Sometimes you get asked to stash your changes when switching branches only to realise that after you switch and unstash that there weren&#39;t even any conflicts and it would have been fine to just checkout the branch directly? &lt;em&gt;YOU HAVE GOT TO BE KIDDING ME!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If you&#39;re a mere mortal like me and you&#39;re tired of hearing how powerful git is when in your daily life it&#39;s a powerful pain in your ass, lazygit might be for you.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#sponsors&quot;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#elevator-pitch&quot;&gt;Elevator Pitch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#table-of-contents&quot;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#features&quot;&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#stage-individual-lines&quot;&gt;Stage individual lines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#interactive-rebase&quot;&gt;Interactive Rebase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#cherry-pick&quot;&gt;Cherry-pick&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#bisect&quot;&gt;Bisect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#nuke-the-working-tree&quot;&gt;Nuke the working tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#amend-an-old-commit&quot;&gt;Amend an old commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#filter&quot;&gt;Filter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#invoke-a-custom-command&quot;&gt;Invoke a custom command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#worktrees&quot;&gt;Worktrees&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-magic-custom-patches&quot;&gt;Rebase magic (custom patches)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-from-marked-base-commit&quot;&gt;Rebase from marked base commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undo&quot;&gt;Undo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#commit-graph&quot;&gt;Commit graph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#compare-two-commits&quot;&gt;Compare two commits&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#tutorials&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#binary-releases&quot;&gt;Binary Releases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#homebrew&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#macports&quot;&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#void-linux&quot;&gt;Void Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#scoop-windows&quot;&gt;Scoop (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#fedora-and-rhel&quot;&gt;Fedora and RHEL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#solus-linux&quot;&gt;Solus Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debian-and-ubuntu&quot;&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#funtoo-linux&quot;&gt;Funtoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#gentoo-linux&quot;&gt;Gentoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#freebsd&quot;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#termux&quot;&gt;Termux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#conda&quot;&gt;Conda&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#go&quot;&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#chocolatey-windows&quot;&gt;Chocolatey (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#winget-windows-10-1709-or-later&quot;&gt;Winget (Windows 10 1709 or later)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#manual&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#usage&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#keybindings&quot;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#changing-directory-on-exit&quot;&gt;Changing Directory On Exit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undoredo&quot;&gt;Undo/Redo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-pagers&quot;&gt;Custom Pagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-commands&quot;&gt;Custom Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#git-flow-support&quot;&gt;Git flow support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#contributing&quot;&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debugging-locally&quot;&gt;Debugging Locally&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#donate&quot;&gt;Donate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#faq&quot;&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#what-do-the-commit-colors-represent&quot;&gt;What do the commit colors represent?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#shameless-plug&quot;&gt;Shameless Plug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/#alternatives&quot;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Lazygit is not my fulltime job but it is a hefty part time job so if you want to support the project please consider &lt;a href=&quot;https://github.com/sponsors/jesseduffield&quot;&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Stage individual lines&lt;/h3&gt; 
&lt;p&gt;Press space on the selected line to stage it, or press &lt;code&gt;v&lt;/code&gt; to start selecting a range of lines. You can also press &lt;code&gt;a&lt;/code&gt; to select the entirety of the current hunk.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/stage_lines-compressed.gif&quot; alt=&quot;stage_lines&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Interactive Rebase&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;i&lt;/code&gt; to start an interactive rebase. Then squash (&lt;code&gt;s&lt;/code&gt;), fixup (&lt;code&gt;f&lt;/code&gt;), drop (&lt;code&gt;d&lt;/code&gt;), edit (&lt;code&gt;e&lt;/code&gt;), move up (&lt;code&gt;ctrl+k&lt;/code&gt;) or move down (&lt;code&gt;ctrl+j&lt;/code&gt;) any of TODO commits, before continuing the rebase by bringing up the rebase options menu with &lt;code&gt;m&lt;/code&gt; and then selecting &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also perform any these actions as a once-off (e.g. pressing &lt;code&gt;s&lt;/code&gt; on a commit to squash it) without explicitly starting a rebase.&lt;/p&gt; 
&lt;p&gt;This demo also uses shift+down to select a range of commits to move and fixup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/interactive_rebase-compressed.gif&quot; alt=&quot;interactive_rebase&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Cherry-pick&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;shift+c&lt;/code&gt; on a commit to copy it and press &lt;code&gt;shift+v&lt;/code&gt; to paste (cherry-pick) it.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/cherry_pick-compressed.gif&quot; alt=&quot;cherry_pick&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Bisect&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;b&lt;/code&gt; in the commits view to mark a commit as good/bad in order to begin a git bisect.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/bisect-compressed.gif&quot; alt=&quot;bisect&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Nuke the working tree&lt;/h3&gt; 
&lt;p&gt;For when you really want to just get rid of anything that shows up when you run &lt;code&gt;git status&lt;/code&gt; (and yes that includes dirty submodules) &lt;a href=&quot;https://www.youtube.com/watch?v=N4E2B_k2Bss&quot;&gt;kidpix style&lt;/a&gt;, press &lt;code&gt;shift+d&lt;/code&gt; to bring up the reset options menu and then select the &#39;nuke&#39; option.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/nuke_working_tree-compressed.gif&quot; alt=&quot;Nuke working tree&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Amend an old commit&lt;/h3&gt; 
&lt;p&gt;Pressing &lt;code&gt;shift+a&lt;/code&gt; on any commit will amend that commit with the currently staged changes (running an interactive rebase in the background).&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/amend_old_commit-compressed.gif&quot; alt=&quot;amend_old_commit&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;You can filter a view with &lt;code&gt;/&lt;/code&gt;. Here we filter down our branches view and then hit &lt;code&gt;enter&lt;/code&gt; to view its commits.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/filter-compressed.gif&quot; alt=&quot;filter&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Invoke a custom command&lt;/h3&gt; 
&lt;p&gt;Lazygit has a very flexible &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md&quot;&gt;custom command system&lt;/a&gt;. In this example a custom command is defined which emulates the built-in branch checkout action.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_command-compressed.gif&quot; alt=&quot;custom_command&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Worktrees&lt;/h3&gt; 
&lt;p&gt;You can create worktrees to have multiple branches going at once without the need for stashing or creating WIP commits when switching between them. Press &lt;code&gt;w&lt;/code&gt; in the branches view to create a worktree from the selected branch and switch to it.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/worktree_create_from_branches-compressed.gif&quot; alt=&quot;worktree_create_from_branches&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase magic (custom patches)&lt;/h3&gt; 
&lt;p&gt;You can build a custom patch from an old commit and then remove the patch from the commit, split out a new commit, apply the patch in reverse to the index, and more.&lt;/p&gt; 
&lt;p&gt;In this example we have a redundant comment that we want to remove from an old commit. We hit &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on the commit to view its files, then &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on a file to focus the patch, then &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; to add the comment line to our custom patch, and then &lt;code&gt;ctrl+p&lt;/code&gt; to view the custom patch options; selecting to remove the patch from the current commit.&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href=&quot;https://youtu.be/4XaToVut_hs&quot;&gt;Rebase magic Youtube tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_patch-compressed.gif&quot; alt=&quot;custom_patch&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase from marked base commit&lt;/h3&gt; 
&lt;p&gt;Say you&#39;re on a feature branch that was itself branched off of the develop branch, and you&#39;ve decided you&#39;d rather be branching off the master branch. You need a way to rebase only the commits from your feature branch. In this demo we check to see which was the last commit on the develop branch, then press &lt;code&gt;shift+b&lt;/code&gt; to mark that commit as our base commit, then press &lt;code&gt;r&lt;/code&gt; on the master branch to rebase onto it, only bringing across the commits from our feature branch. Then we push our changes with &lt;code&gt;shift+p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/rebase_onto-compressed.gif&quot; alt=&quot;rebase_onto&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Undo&lt;/h3&gt; 
&lt;p&gt;You can undo the last action by pressing &lt;code&gt;z&lt;/code&gt; and redo with &lt;code&gt;ctrl+z&lt;/code&gt;. Here we drop a couple of commits and then undo the actions. Undo uses the reflog which is specific to commits and branches so we can&#39;t undo changes to the working tree or stash.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md&quot;&gt;More info&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/undo-compressed.gif&quot; alt=&quot;undo&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Commit graph&lt;/h3&gt; 
&lt;p&gt;When viewing the commit graph in an enlarged window (use &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; to cycle screen modes), the commit graph is shown. Colours correspond to the commit authors, and as you navigate down the graph, the parent commits of the selected commit are highlighted.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_graph-compressed.gif&quot; alt=&quot;commit_graph&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Compare two commits&lt;/h3&gt; 
&lt;p&gt;If you press &lt;code&gt;shift+w&lt;/code&gt; on a commit (or branch/ref) a menu will open that allows you to mark that commit so that any other commit you select will be diffed against it. Once you&#39;ve selected the second commit, you&#39;ll see the diff in the main view and if you press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; you&#39;ll see the files of the diff. You can press &lt;code&gt;shift+w&lt;/code&gt; to view the diff menu again to see options like reversing the diff direction or exiting diff mode. You can also exit diff mode by pressing &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/diff_commits-compressed.gif&quot; alt=&quot;diff_commits&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/CPLdltN7wgE&quot;&gt;&lt;img src=&quot;https://i.imgur.com/sVEktDn.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/CPLdltN7wgE&quot;&gt;15 Lazygit Features in 15 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/VDXvbHZYeKY&quot;&gt;Basics Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/4XaToVut_hs&quot;&gt;Rebase Magic Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/lazygit/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/lazygit.svg?columns=3&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Most of the above packages are maintained by third parties so be sure to vet them yourself and confirm that the maintainer is a trustworthy looking person who attends local sports games and gives back to their communities with barbeque fundraisers etc&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Binary Releases&lt;/h3&gt; 
&lt;p&gt;For Windows, Mac OS(10.12+) or Linux, you can download a binary release &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/releases&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;It works with Linux, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;Latest version built from github releases. Tap:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Void Linux are available in the distro repo&lt;/p&gt; 
&lt;p&gt;They follow upstream latest releases&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo xbps-install -S lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href=&quot;https://scoop.sh/&quot;&gt;scoop&lt;/a&gt;. It&#39;s in the &lt;code&gt;extras&lt;/code&gt; bucket:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Add the extras bucket
scoop bucket add extras

# Install lazygit
scoop install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Arch Linux are available via pacman and AUR (Arch User Repository).&lt;/p&gt; 
&lt;p&gt;There are two packages. The stable one which is built with the latest release and the git version which builds from the most recent commit.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stable: &lt;code&gt;sudo pacman -S lazygit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Development: &lt;a href=&quot;https://aur.archlinux.org/packages/lazygit-git/&quot;&gt;https://aur.archlinux.org/packages/lazygit-git/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instruction of how to install AUR content can be found here: &lt;a href=&quot;https://wiki.archlinux.org/index.php/Arch_User_Repository&quot;&gt;https://wiki.archlinux.org/index.php/Arch_User_Repository&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Fedora / Amazon Linux 2023 / CentOS Stream&lt;/h3&gt; 
&lt;p&gt;Packages for Fedora, Amazon Linux 2023 and CentOS Stream are available via &lt;a href=&quot;https://copr.fedorainfracloud.org/coprs/dejan/lazygit/&quot;&gt;Copr&lt;/a&gt; (Cool Other Package Repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo dnf copr enable dejan/lazygit
sudo dnf install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These packages are built using the RPM spec file located here: &lt;a href=&quot;https://codeberg.org/dejan/rpm-lazygit&quot;&gt;https://codeberg.org/dejan/rpm-lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You should be able to build RPMs for Fedora 41 or older, and other Fedora derivatives using the SRPM (Source RPM) file that you can grab from the latest COPR build.&lt;/p&gt; 
&lt;h3&gt;Solus Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo eopkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 13 &quot;Trixie&quot;, Sid&lt;/strong&gt;, and later, or &lt;strong&gt;Ubuntu 25.10 &quot;Questing Quokka&quot;&lt;/strong&gt; and later:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 12 &quot;Bookworm&quot;, Ubuntu 25.04 &quot;Plucky Puffin&quot;&lt;/strong&gt; and earlier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;LAZYGIT_VERSION=$(curl -s &quot;https://api.github.com/repos/jesseduffield/lazygit/releases/latest&quot; | \grep -Po &#39;&quot;tag_name&quot;: *&quot;v\K[^&quot;]*&#39;)
curl -Lo lazygit.tar.gz &quot;https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz&quot;
tar xf lazygit.tar.gz lazygit
sudo install lazygit -D -t /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Verify the correct installation of lazygit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;lazygit --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Funtoo Linux&lt;/h3&gt; 
&lt;p&gt;Funtoo Linux has an autogenerated lazygit package in &lt;a href=&quot;https://github.com/funtoo/dev-kit/tree/1.4-release/dev-vcs/lazygit&quot;&gt;dev-kit&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;Lazygit is not (yet) in main Gentoo portage, however an ebuild is available in &lt;a href=&quot;https://github.com/gentoo-mirror/guru/tree/master/dev-vcs/lazygit&quot;&gt;GURU overlay&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can either add the overlay to your system and install lazygit as usual:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo eselect repository enable guru
sudo emaint sync -r guru
sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE&lt;/h3&gt; 
&lt;p&gt;The lazygit package is currently built in &lt;a href=&quot;https://build.opensuse.org/package/show/devel:languages:go/lazygit&quot;&gt;devel:languages:go/lazygit&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install lazygit on openSUSE Tumbleweed run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/openSUSE_Factory/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install lazygit on openSUSE Leap run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;source /etc/os-release
sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOs&lt;/h3&gt; 
&lt;p&gt;On NixOs lazygit is packaged with nix and distributed via nixpkgs. You can try the lazygit without installing it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nix-shell -p lazygit
# or with flakes enabled
nix run nixpkgs#lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can add lazygit to you &lt;code&gt;configuration.nix&lt;/code&gt; using the &lt;code&gt;environment.systemPackages&lt;/code&gt; option. More details can be found via NixOs search &lt;a href=&quot;https://search.nixos.org/&quot;&gt;page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Flox&lt;/h3&gt; 
&lt;p&gt;Lazygit can be installed into a Flox environment as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;flox install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details about Flox can be found on &lt;a href=&quot;https://flox.dev/&quot;&gt;their website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Termux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Conda&lt;/h3&gt; 
&lt;p&gt;Released versions are available for different platforms, see &lt;a href=&quot;https://anaconda.org/conda-forge/lazygit&quot;&gt;https://anaconda.org/conda-forge/lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;conda install -c conda-forge lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;go install github.com/jesseduffield/lazygit@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note: If you get an error claiming that lazygit cannot be found or is not defined, you may need to add &lt;code&gt;~/go/bin&lt;/code&gt; to your $PATH (MacOS/Linux), or &lt;code&gt;%HOME%\go\bin&lt;/code&gt; (Windows). Not to be mistaken for &lt;code&gt;C:\Go\bin&lt;/code&gt; (which is for Go&#39;s own binaries, not apps like lazygit).&lt;/p&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;choco install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Winget (Windows 10 1709 or later)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using the &lt;code&gt;winget&lt;/code&gt; command in the Windows Terminal with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;winget install -e --id=JesseDuffield.lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You&#39;ll need to &lt;a href=&quot;https://golang.org/doc/install&quot;&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazygit.git
cd lazygit
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazygit&lt;/code&gt; in your terminal inside a git repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can also add an alias for this with &lt;code&gt;echo &quot;alias lg=&#39;lazygit&#39;&quot; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt; (or whichever rc file you&#39;re using).&lt;/p&gt; 
&lt;h3&gt;Keybindings&lt;/h3&gt; 
&lt;p&gt;You can check out the list of keybindings &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/keybindings&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Changing Directory On Exit&lt;/h3&gt; 
&lt;p&gt;If you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your &lt;code&gt;~/.zshrc&lt;/code&gt; (or other rc file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit &quot;$@&quot;

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd &quot;$(cat $LAZYGIT_NEW_DIR_FILE)&quot;
            rm -f $LAZYGIT_NEW_DIR_FILE &amp;gt; /dev/null
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;source ~/.zshrc&lt;/code&gt; and from now on when you call &lt;code&gt;lg&lt;/code&gt; and exit you&#39;ll switch directories to whatever you were in inside lazygit. To override this behaviour you can exit using &lt;code&gt;shift+Q&lt;/code&gt; rather than just &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Undo/Redo&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Config.md&quot;&gt;configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Pagers&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Pagers.md&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Commands&lt;/h3&gt; 
&lt;p&gt;If lazygit is missing a feature, there&#39;s a good chance you can implement it yourself with a custom command!&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Git flow support&lt;/h3&gt; 
&lt;p&gt;Lazygit supports &lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;Gitflow&lt;/a&gt; if you have it installed. To understand how the Gitflow model works check out Vincent Driessen&#39;s original &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;post&lt;/a&gt; explaining it. To view Gitflow options from within Lazygit, press &lt;code&gt;i&lt;/code&gt; from within the branches view.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We love your input! Please check out the &lt;a href=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the &lt;a href=&quot;https://discord.gg/ehwFt2t4wt&quot;&gt;discord channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/ehwFt2t4wt&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jesseduffield/lazygit/assets/discord.png&quot; width=&quot;75&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out this &lt;a href=&quot;https://www.youtube.com/watch?v=kNavnhzZHtk&quot;&gt;video&lt;/a&gt; walking through the creation of a small feature in lazygit if you want an idea of where to get started.&lt;/p&gt; 
&lt;h3&gt;Debugging Locally&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;lazygit --debug&lt;/code&gt; in one terminal tab and &lt;code&gt;lazygit --logs&lt;/code&gt; in another to view the program and its log output side by side&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazygit, consider &lt;a href=&quot;https://github.com/sponsors/jesseduffield&quot;&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What do the commit colors represent?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Green: the commit is included in the master branch&lt;/li&gt; 
 &lt;li&gt;Yellow: the commit is not included in the master branch&lt;/li&gt; 
 &lt;li&gt;Red: the commit has not been pushed to the upstream branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shameless Plug&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href=&quot;https://twitter.com/DuffieldJesse&quot;&gt;twitter&lt;/a&gt; or check out my &lt;a href=&quot;https://jesseduffield.com/&quot;&gt;blog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;If you find that lazygit doesn&#39;t quite satisfy your requirements, these may be a better fit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Extrawurst/gitui&quot;&gt;GitUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>alireza0/s-ui</title>
      <link>https://github.com/alireza0/s-ui</link>
      <description>&lt;p&gt;An advanced Web Panel • Built for SagerNet/Sing-Box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S-UI&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;An Advanced Web Panel • Built on SagerNet/Sing-Box&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/alireza0/s-ui.svg?sanitize=true&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/alireza7/s-ui.svg?sanitize=true&quot; alt=&quot;S-UI Docker pull&quot; /&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/alireza0/s-ui&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/alireza0/s-ui&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/github/downloads/alireza0/s-ui/total.svg&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/alireza0/s-ui/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL%20V3-blue.svg?longCache=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This project is only for personal learning and communication, please do not use it for illegal purposes, please do not use it in a production environment&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;If you think this project is helpful to you, you may wish to give a&lt;/strong&gt;&lt;span&gt;🌟&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/alireza7&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;&amp;quot;Buy Me A Coffee&amp;quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;USDT (TRC20): &lt;code&gt;TYTq73Gj6dJ67qe58JVPD9zpjW2cc9XgVz&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Overview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Features&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Enable?&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Protocol&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Language&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Client/Inbound&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Advanced Traffic Routing Interface&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Client &amp;amp; Traffic &amp;amp; System Status&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Subscription Service (link/json + info)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dark/Light Theme&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;API Interface&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/alireza0/s-ui-frontend/raw/main/media/main.png&quot; alt=&quot;&amp;quot;Main&amp;quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/alireza0/s-ui-frontend/raw/main/screenshots.md&quot;&gt;Other UI Screenshots&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/alireza0/s-ui/wiki/API-Documentation&quot;&gt;API-Documentation Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Default Installation Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Panel Port: 2095&lt;/li&gt; 
 &lt;li&gt;Panel Path: /app/&lt;/li&gt; 
 &lt;li&gt;Subscription Port: 2096&lt;/li&gt; 
 &lt;li&gt;Subscription Path: /sub/&lt;/li&gt; 
 &lt;li&gt;User/Password: admin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Upgrade to Latest Version&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/master/install.sh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install legacy Version&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; To install your desired legacy version, add the version to the end of the installation command. e.g., ver &lt;code&gt;1.0.0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;VERSION=1.0.0 &amp;amp;&amp;amp; bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/$VERSION/install.sh) $VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Get the latest version of S-UI based on your OS/Architecture from GitHub: &lt;a href=&quot;https://github.com/alireza0/s-ui/releases/latest&quot;&gt;https://github.com/alireza0/s-ui/releases/latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Get the latest version of &lt;code&gt;s-ui.sh&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh&quot;&gt;https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Copy &lt;code&gt;s-ui.sh&lt;/code&gt; to /usr/bin/ and run &lt;code&gt;chmod +x /usr/bin/s-ui&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Extract s-ui tar.gz file to a directory of your choice and navigate to the directory where you extracted the tar.gz file.&lt;/li&gt; 
 &lt;li&gt;Copy *.service files to /etc/systemd/system/ and run &lt;code&gt;systemctl daemon-reload&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Enable autostart and start S-UI service using &lt;code&gt;systemctl enable s-ui --now&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Start sing-box service using &lt;code&gt;systemctl enable sing-box --now&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Uninstall S-UI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo -i

systemctl disable s-ui  --now

rm -f /etc/systemd/system/sing-box.service
systemctl daemon-reload

rm -fr /usr/local/s-ui
rm /usr/bin/s-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install using Docker&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Docker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -fsSL https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Install S-UI&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Docker compose method&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
wget -q https://raw.githubusercontent.com/alireza0/s-ui/master/docker-compose.yml
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Use docker&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
docker run -itd \
    -p 2095:2095 -p 2096:2096 -p 443:443 -p 80:80 \
    -v $PWD/db/:/usr/local/s-ui/db/ \
    -v $PWD/cert/:/root/cert/ \
    --name s-ui --restart=unless-stopped \
    alireza7/s-ui:latest
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Build your own image&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone https://github.com/alireza0/s-ui
git submodule update --init --recursive
docker build -t s-ui .
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Manual run ( contribution )&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Build and run whole project&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./runSUI.sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Clone the repository&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# clone repository
git clone https://github.com/alireza0/s-ui
# clone submodules
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;- Frontend&lt;/h3&gt; 
 &lt;p&gt;Visit &lt;a href=&quot;https://github.com/alireza0/s-ui-frontend&quot;&gt;s-ui-frontend&lt;/a&gt; for frontend code&lt;/p&gt; 
 &lt;h3&gt;- Backend&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Please build frontend once before!&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;To build backend:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# remove old frontend compiled files
rm -fr web/html/*
# apply new frontend compiled files
cp -R frontend/dist/ web/html/
# build
go build -o sui main.go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To run backend (from root folder of repository):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./sui
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Farsi&lt;/li&gt; 
 &lt;li&gt;Vietnamese&lt;/li&gt; 
 &lt;li&gt;Chinese (Simplified)&lt;/li&gt; 
 &lt;li&gt;Chinese (Traditional)&lt;/li&gt; 
 &lt;li&gt;Russian&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported protocols: 
  &lt;ul&gt; 
   &lt;li&gt;General: Mixed, SOCKS, HTTP, HTTPS, Direct, Redirect, TProxy&lt;/li&gt; 
   &lt;li&gt;V2Ray based: VLESS, VMess, Trojan, Shadowsocks&lt;/li&gt; 
   &lt;li&gt;Other protocols: ShadowTLS, Hysteria, Hysteria2, Naive, TUIC&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports XTLS protocols&lt;/li&gt; 
 &lt;li&gt;An advanced interface for routing traffic, incorporating PROXY Protocol, External, and Transparent Proxy, SSL Certificate, and Port&lt;/li&gt; 
 &lt;li&gt;An advanced interface for inbound and outbound configuration&lt;/li&gt; 
 &lt;li&gt;Clients’ traffic cap and expiration date&lt;/li&gt; 
 &lt;li&gt;Displays online clients, inbounds and outbounds with traffic statistics, and system status monitoring&lt;/li&gt; 
 &lt;li&gt;Subscription service with ability to add external links and subscription&lt;/li&gt; 
 &lt;li&gt;HTTPS for secure access to the web panel and subscription service (self-provided domain + SSL certificate)&lt;/li&gt; 
 &lt;li&gt;Dark/Light theme&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recommended OS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu 22.04+&lt;/li&gt; 
 &lt;li&gt;Debian 12+&lt;/li&gt; 
 &lt;li&gt;CentOS 9+&lt;/li&gt; 
 &lt;li&gt;Fedora 36+&lt;/li&gt; 
 &lt;li&gt;Arch Linux&lt;/li&gt; 
 &lt;li&gt;Parch Linux&lt;/li&gt; 
 &lt;li&gt;Manjaro&lt;/li&gt; 
 &lt;li&gt;Armbian&lt;/li&gt; 
 &lt;li&gt;AlmaLinux 9.5+&lt;/li&gt; 
 &lt;li&gt;Rocky Linux 9.5+&lt;/li&gt; 
 &lt;li&gt;Oracle Linux 8+&lt;/li&gt; 
 &lt;li&gt;OpenSUSE Tubleweed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Environment Variables&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Variable&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Type&lt;/th&gt; 
    &lt;th align=&quot;left&quot;&gt;Default&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_LOG_LEVEL&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;code&gt;&quot;debug&quot;&lt;/code&gt; | &lt;code&gt;&quot;info&quot;&lt;/code&gt; | &lt;code&gt;&quot;warn&quot;&lt;/code&gt; | &lt;code&gt;&quot;error&quot;&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;&quot;info&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DEBUG&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_BIN_FOLDER&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;&quot;bin&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DB_FOLDER&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;&quot;db&quot;&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SINGBOX_API&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;SSL Certificate&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Certbot&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

certbot certonly --standalone --register-unsafely-without-email --non-interactive --agree-tos -d &amp;lt;Your Domain Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Stargazers over Time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/alireza0/s-ui&quot;&gt;&lt;img src=&quot;https://starchart.cc/alireza0/s-ui.svg?sanitize=true&quot; alt=&quot;Stargazers over time&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/go-sdk</title>
      <link>https://github.com/modelcontextprotocol/go-sdk</link>
      <description>&lt;p&gt;The official Go SDK for Model Context Protocol servers and clients. Maintained in collaboration with Google.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Go SDK v0.2.0&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://codespaces.new/modelcontextprotocol/go-sdk&quot;&gt;&lt;img src=&quot;https://github.com/codespaces/badge.svg?sanitize=true&quot; alt=&quot;Open in GitHub Codespaces&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;BREAKING CHANGES&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This version contains breaking changes. See the &lt;a href=&quot;https://github.com/modelcontextprotocol/go-sdk/releases/tag/v0.2.0&quot;&gt;release notes&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk&quot;&gt;&lt;img src=&quot;https://pkg.go.dev/badge/github.com/modelcontextprotocol/go-sdk&quot; alt=&quot;PkgGoDev&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains an unreleased implementation of the official Go software development kit (SDK) for the Model Context Protocol (MCP).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The SDK should be considered unreleased, and is currently unstable and subject to breaking changes. Please test it out and file bug reports or API proposals, but don&#39;t use it in real projects. See the issue tracker for known issues and missing features. We aim to release a stable version of the SDK in August, 2025.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;The design doc for this SDK is at &lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/design/design.md&quot;&gt;design.md&lt;/a&gt;, which was initially reviewed at &lt;a href=&quot;https://github.com/orgs/modelcontextprotocol/discussions/364&quot;&gt;modelcontextprotocol/discussions/364&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Further design discussion should occur in &lt;a href=&quot;https://github.com/modelcontextprotocol/go-sdk/issues&quot;&gt;issues&lt;/a&gt; (for concrete proposals) or &lt;a href=&quot;https://github.com/modelcontextprotocol/go-sdk/discussions&quot;&gt;discussions&lt;/a&gt; for open-ended discussion. See &lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Package documentation&lt;/h2&gt; 
&lt;p&gt;The SDK consists of three importable packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/mcp&quot;&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/mcp&lt;/code&gt;&lt;/a&gt; package defines the primary APIs for constructing and using MCP clients and servers.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonschema&quot;&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonschema&lt;/code&gt;&lt;/a&gt; package provides an implementation of &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;, used for MCP tool input and output schema.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonrpc&quot;&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonrpc&lt;/code&gt;&lt;/a&gt; package is for users implementing their own transports.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;In this example, an MCP client communicates with an MCP server running in a sidecar process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;context&quot;
	&quot;log&quot;
	&quot;os/exec&quot;

	&quot;github.com/modelcontextprotocol/go-sdk/mcp&quot;
)

func main() {
	ctx := context.Background()

	// Create a new client, with no features.
	client := mcp.NewClient(&amp;amp;mcp.Implementation{Name: &quot;mcp-client&quot;, Version: &quot;v1.0.0&quot;}, nil)

	// Connect to a server over stdin/stdout
	transport := &amp;amp;mcp.CommandTransport{Command: exec.Command(&quot;myserver&quot;)}
	session, err := client.Connect(ctx, transport, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer session.Close()

	// Call a tool on the server.
	params := &amp;amp;mcp.CallToolParams{
		Name:      &quot;greet&quot;,
		Arguments: map[string]any{&quot;name&quot;: &quot;you&quot;},
	}
	res, err := session.CallTool(ctx, params)
	if err != nil {
		log.Fatalf(&quot;CallTool failed: %v&quot;, err)
	}
	if res.IsError {
		log.Fatal(&quot;tool failed&quot;)
	}
	for _, c := range res.Content {
		log.Print(c.(*mcp.TextContent).Text)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here&#39;s an example of the corresponding server component, which communicates with its client over stdin/stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;context&quot;
	&quot;log&quot;

	&quot;github.com/modelcontextprotocol/go-sdk/mcp&quot;
)

type HiParams struct {
	Name string `json:&quot;name&quot; jsonschema:&quot;the name of the person to greet&quot;`
}

func SayHi(ctx context.Context, req *mcp.ServerRequest[*mcp.CallToolParamsFor[HiParams]]) (*mcp.CallToolResultFor[any], error) {
	return &amp;amp;mcp.CallToolResultFor[any]{
		Content: []mcp.Content{&amp;amp;mcp.TextContent{Text: &quot;Hi &quot; + req.Params.Arguments.Name}},
	}, nil
}

func main() {
	// Create a server with a single tool.
	server := mcp.NewServer(&amp;amp;mcp.Implementation{Name: &quot;greeter&quot;, Version: &quot;v1.0.0&quot;}, nil)

	mcp.AddTool(server, &amp;amp;mcp.Tool{Name: &quot;greet&quot;, Description: &quot;say hi&quot;}, SayHi)
	// Run the server over stdin/stdout, until the client disconnects
	if err := server.Run(context.Background(), &amp;amp;mcp.StdioTransport{}); err != nil {
		log.Fatal(err)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/examples/&quot;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory contains more example clients and servers.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Several existing Go MCP SDKs inspired the development and design of this official SDK, notably &lt;a href=&quot;https://github.com/mark3labs/mcp-go&quot;&gt;mcp-go&lt;/a&gt;, authored by Ed Zynda. We are grateful to Ed as well as the other contributors to mcp-go, and to authors and contributors of other SDKs such as &lt;a href=&quot;https://github.com/metoro-io/mcp-golang&quot;&gt;mcp-golang&lt;/a&gt; and &lt;a href=&quot;https://github.com/ThinkInAIXYZ/go-mcp&quot;&gt;go-mcp&lt;/a&gt;. Thanks to their work, there is a thriving ecosystem of Go MCP clients and servers.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&quot;https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>korotovsky/slack-mcp-server</title>
      <link>https://github.com/korotovsky/slack-mcp-server</link>
      <description>&lt;p&gt;The most powerful MCP Slack Server with no permission requirements, Apps support, multiple transports Stdio and SSE, DMs, Group DMs and smart history fetch logic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Slack MCP Server&lt;/h1&gt; 
&lt;p&gt;Model Context Protocol (MCP) server for Slack Workspaces. The most powerful MCP Slack server — supports Stdio and SSE transports, proxy settings, DMs, Group DMs, Smart History fetch (by date or count), may work via OAuth or in complete stealth mode with no permissions and scopes in Workspace 😏.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;br /&gt; We need your support! Each month, over 30,000 engineers visit this repository, and more than 9,000 are already using it.&lt;/p&gt; 
 &lt;p&gt;If you appreciate the work our &lt;a href=&quot;https://github.com/korotovsky/slack-mcp-server/graphs/contributors&quot;&gt;contributors&lt;/a&gt; have put into this project, please consider giving the repository a star.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This feature-rich Slack MCP Server has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Stealth and OAuth Modes&lt;/strong&gt;: Run the server without requiring additional permissions or bot installations (stealth mode), or use secure OAuth tokens for access without needing to refresh or extract tokens from the browser (OAuth mode).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Workspaces Support&lt;/strong&gt;: Possibility to integrate with Enterprise Slack setups.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Channel and Thread Support with &lt;code&gt;#Name&lt;/code&gt; &lt;code&gt;@Lookup&lt;/code&gt;&lt;/strong&gt;: Fetch messages from channels and threads, including activity messages, and retrieve channels using their names (e.g., #general) as well as their IDs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart History&lt;/strong&gt;: Fetch messages with pagination by date (d1, 7d, 1m) or message count.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search Messages&lt;/strong&gt;: Search messages in channels, threads, and DMs using various filters like date, user, and content.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safe Message Posting&lt;/strong&gt;: The &lt;code&gt;conversations_add_message&lt;/code&gt; tool is disabled by default for safety. Enable it via an environment variable, with optional channel restrictions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DM and Group DM support&lt;/strong&gt;: Retrieve direct messages and group direct messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embedded user information&lt;/strong&gt;: Embed user information in messages, for better context.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cache support&lt;/strong&gt;: Cache users and channels for faster access.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stdio/SSE Transports &amp;amp; Proxy Support&lt;/strong&gt;: Use the server with any MCP client that supports Stdio or SSE transports, and configure it to route outgoing requests through a proxy if needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Analytics Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-1.gif&quot; alt=&quot;Analytics&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Add Message Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-2.gif&quot; alt=&quot;Add Message&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;h3&gt;1. conversations_history:&lt;/h3&gt; 
&lt;p&gt;Get messages from the channel (or DM) by channel_id, the last row/column in the response is used as &#39;cursor&#39; parameter for pagination if not empty&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): - &lt;code&gt;channel_id&lt;/code&gt; (string): ID of the channel in format Cxxxxxxxxxx or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as &lt;code&gt;channel_join&lt;/code&gt; or &lt;code&gt;channel_leave&lt;/code&gt;. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: &quot;1d&quot;): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when &#39;cursor&#39; is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. conversations_replies:&lt;/h3&gt; 
&lt;p&gt;Get a thread of messages posted to a conversation by channelID and &lt;code&gt;thread_ts&lt;/code&gt;, the last row/column in the response is used as &lt;code&gt;cursor&lt;/code&gt; parameter for pagination if not empty.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, required): Unique identifier of either a thread’s parent message or a message in the thread. ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as &#39;channel_join&#39; or &#39;channel_leave&#39;. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: &quot;1d&quot;): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when &#39;cursor&#39; is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. conversations_add_message&lt;/h3&gt; 
&lt;p&gt;Add a message to a public channel, private channel, or direct message (DM, or IM) conversation by channel_id and thread_ts.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Posting messages is disabled by default for safety. To enable, set the &lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt; environment variable. If set to a comma-separated list of channel IDs, posting is enabled only for those specific channels. See the Environment Variables section below for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, optional): Unique identifier of either a thread’s parent message or a message in the thread_ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies. Optional, if not provided the message will be added to the channel itself, otherwise it will be added to the thread.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;payload&lt;/code&gt; (string, required): Message payload in specified content_type format. Example: &#39;Hello, world!&#39; for text/plain or &#39;# Hello, world!&#39; for text/markdown.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;content_type&lt;/code&gt; (string, default: &quot;text/markdown&quot;): Content type of the message. Default is &#39;text/markdown&#39;. Allowed values: &#39;text/markdown&#39;, &#39;text/plain&#39;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. conversations_search_messages&lt;/h3&gt; 
&lt;p&gt;Search messages in a public channel, private channel, or direct message (DM, or IM) conversation using filters. All filters are optional, if not provided then search_query is required.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;search_query&lt;/code&gt; (string, optional): Search query to filter messages. Example: &#39;marketing report&#39; or full URL of Slack message e.g. &#39;&lt;a href=&quot;https://slack.com/archives/C1234567890/p1234567890123456&quot;&gt;https://slack.com/archives/C1234567890/p1234567890123456&lt;/a&gt;&#39;, then the tool will return a single message matching given URL, herewith all other parameters will be ignored.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_channel&lt;/code&gt; (string, optional): Filter messages in a specific channel by its ID or name. Example: &lt;code&gt;C1234567890&lt;/code&gt; or &lt;code&gt;#general&lt;/code&gt;. If not provided, all channels will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_im_or_mpim&lt;/code&gt; (string, optional): Filter messages in a direct message (DM) or multi-person direct message (MPIM) conversation by its ID or name. Example: &lt;code&gt;D1234567890&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;. If not provided, all DMs and MPIMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_with&lt;/code&gt; (string, optional): Filter messages with a specific user by their ID or display name in threads and DMs. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all threads and DMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_from&lt;/code&gt; (string, optional): Filter messages from a specific user by their ID or display name. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all users will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_before&lt;/code&gt; (string, optional): Filter messages sent before a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_after&lt;/code&gt; (string, optional): Filter messages sent after a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_on&lt;/code&gt; (string, optional): Filter messages sent on a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_during&lt;/code&gt; (string, optional): Filter messages sent during a specific period in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_threads_only&lt;/code&gt; (boolean, default: false): If true, the response will include only messages from threads. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, default: &quot;&quot;): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 20): The maximum number of items to return. Must be an integer between 1 and 100.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. channels_list:&lt;/h3&gt; 
&lt;p&gt;Get list of channels&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_types&lt;/code&gt; (string, required): Comma-separated channel types. Allowed values: &lt;code&gt;mpim&lt;/code&gt;, &lt;code&gt;im&lt;/code&gt;, &lt;code&gt;public_channel&lt;/code&gt;, &lt;code&gt;private_channel&lt;/code&gt;. Example: &lt;code&gt;public_channel,private_channel,im&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt; (string, optional): Type of sorting. Allowed values: &lt;code&gt;popularity&lt;/code&gt; - sort by number of members/participants in each channel.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 100): The maximum number of items to return. Must be an integer between 1 and 1000 (maximum 999).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;p&gt;The Slack MCP Server exposes two special directory resources for easy access to workspace metadata:&lt;/p&gt; 
&lt;h3&gt;1. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt; — Directory of Channels&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all channels in the workspace, including public channels, private channels, DMs, and group DMs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Channel ID (e.g., &lt;code&gt;C1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Channel name (e.g., &lt;code&gt;#general&lt;/code&gt;, &lt;code&gt;@username_dm&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;topic&lt;/code&gt;: Channel topic (if any)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;purpose&lt;/code&gt;: Channel purpose/description&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;memberCount&lt;/code&gt;: Number of members in the channel&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt; — Directory of Users&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all users in the workspace.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;userID&lt;/code&gt;: User ID (e.g., &lt;code&gt;U1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;userName&lt;/code&gt;: Slack username (e.g., &lt;code&gt;john&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;realName&lt;/code&gt;: User’s real name (e.g., &lt;code&gt;John Doe&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup Guide&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/01-authentication-setup.md&quot;&gt;Authentication Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/02-installation.md&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/03-configuration-and-usage.md&quot;&gt;Configuration and Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment Variables (Quick Reference)&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Required?&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXC_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser token (&lt;code&gt;xoxc-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXD_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser cookie &lt;code&gt;d&lt;/code&gt; (&lt;code&gt;xoxd-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXP_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;User OAuth token (&lt;code&gt;xoxp-...&lt;/code&gt;) — alternative to xoxc/xoxd&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PORT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;13080&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Port for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_HOST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Host for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SSE_API_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bearer token for SSE transport&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PROXY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Proxy URL for outgoing requests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Custom User-Agent (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CUSTOM_TLS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send custom TLS-handshake to Slack servers based on &lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt; or default User-Agent. (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to CA certificate&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_TOOLKIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Inject HTTPToolkit CA certificate to root trust-store for MitM debugging&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_INSECURE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Trust all insecure requests (NOT RECOMMENDED)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable message posting via &lt;code&gt;conversations_add_message&lt;/code&gt; by setting it to true for all channels, a comma-separated list of channel IDs to whitelist specific channels, or use &lt;code&gt;!&lt;/code&gt; before a channel ID to allow all except specified ones, while an empty value disables posting by default.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_MARK&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When the &lt;code&gt;conversations_add_message&lt;/code&gt; tool is enabled, any new message sent will automatically be marked as read.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_UNFURLING&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable to let Slack unfurl posted links or set comma-separated list of domains e.g. &lt;code&gt;github.com,slack.com&lt;/code&gt; to whitelist unfurling only for them. If text contains whitelisted and unknown domain unfurling will be disabled for security reasons.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USERS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.users_cache.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the users cache file. Used to cache Slack user information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CHANNELS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.channels_cache_v2.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the channels cache file. Used to cache Slack channel information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_LOG_LEVEL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Log-level for stdout or stderr. Valid values are: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;fatal&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;*You need either &lt;code&gt;xoxp&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; both &lt;code&gt;xoxc&lt;/code&gt;/&lt;code&gt;xoxd&lt;/code&gt; tokens for authentication.&lt;/p&gt; 
&lt;h3&gt;Limitations matrix &amp;amp; Cache&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Users Cache&lt;/th&gt; 
   &lt;th&gt;Channels Cache&lt;/th&gt; 
   &lt;th&gt;Limitations&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No cache, No LLM context enhancement with user data, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won&#39;t be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won&#39;t be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No channels cache, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won&#39;t be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won&#39;t be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No limitations, fully functional Slack MCP Server.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Debugging Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run the inspector with stdio transport
npx @modelcontextprotocol/inspector go run mcp/mcp-server.go --transport stdio

# View logs
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Never share API tokens&lt;/li&gt; 
 &lt;li&gt;Keep .env files secure and private&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under MIT - see &lt;a href=&quot;https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file. This is not an official Slack product.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FiloSottile/mkcert</title>
      <link>https://github.com/FiloSottile/mkcert</link>
      <description>&lt;p&gt;A simple zero-config tool to make locally trusted development certificates with any names you&#39;d like.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mkcert&lt;/h1&gt; 
&lt;p&gt;mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ mkcert -install
Created a new local CA 💥
The local CA is now installed in the system trust store! ⚡️
The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊

$ mkcert example.com &quot;*.example.com&quot; example.test localhost 127.0.0.1 ::1

Created a new certificate valid for the following names 📜
 - &quot;example.com&quot;
 - &quot;*.example.com&quot;
 - &quot;example.test&quot;
 - &quot;localhost&quot;
 - &quot;127.0.0.1&quot;
 - &quot;::1&quot;

The certificate is at &quot;./example.com+5.pem&quot; and the key at &quot;./example.com+5-key.pem&quot; ✅
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;498&quot; alt=&quot;Chrome and Firefox screenshot&quot; src=&quot;https://user-images.githubusercontent.com/1225294/51066373-96d4aa80-15be-11e9-91e2-f4e44a3a4458.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Using certificates from real certificate authorities (CAs) for development can be dangerous or impossible (for hosts like &lt;code&gt;example.test&lt;/code&gt;, &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;), but self-signed certificates cause trust errors. Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual steps.&lt;/p&gt; 
&lt;p&gt;mkcert automatically creates and installs a local CA in the system root store, and generates locally-trusted certificates. mkcert does not automatically configure servers to use the certificates, though, that&#39;s up to you.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the &lt;code&gt;rootCA-key.pem&lt;/code&gt; file that mkcert automatically generates gives complete power to intercept secure requests from your machine. Do not share it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;On macOS, use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install mkcert
brew install nss # if you use Firefox
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or &lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port selfupdate
sudo port install mkcert
sudo port install nss # if you use Firefox
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;On Linux, first install &lt;code&gt;certutil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install libnss3-tools
    -or-
sudo yum install nss-tools
    -or-
sudo pacman -S nss
    -or-
sudo zypper install mozilla-nss-tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can install using &lt;a href=&quot;https://docs.brew.sh/Homebrew-on-Linux&quot;&gt;Homebrew on Linux&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build from source (requires Go 1.13+)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/FiloSottile/mkcert &amp;amp;&amp;amp; cd mkcert
go build -ldflags &quot;-X main.Version=$(git describe --tags)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or use &lt;a href=&quot;https://github.com/FiloSottile/mkcert/releases&quot;&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -JLO &quot;https://dl.filippo.io/mkcert/latest?for=linux/amd64&quot;
chmod +x mkcert-v*-linux-amd64
sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Arch Linux users, &lt;a href=&quot;https://archlinux.org/packages/extra/x86_64/mkcert/&quot;&gt;&lt;code&gt;mkcert&lt;/code&gt;&lt;/a&gt; is available on the official Arch Linux repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo pacman -Syu mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, use &lt;a href=&quot;https://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;choco install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or use Scoop&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;scoop bucket add extras
scoop install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build from source (requires Go 1.10+), or use &lt;a href=&quot;https://github.com/FiloSottile/mkcert/releases&quot;&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re running into permission problems try running &lt;code&gt;mkcert&lt;/code&gt; as an Administrator.&lt;/p&gt; 
&lt;h2&gt;Supported root stores&lt;/h2&gt; 
&lt;p&gt;mkcert supports the following root stores:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS system store&lt;/li&gt; 
 &lt;li&gt;Windows system store&lt;/li&gt; 
 &lt;li&gt;Linux variants that provide either 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;update-ca-trust&lt;/code&gt; (Fedora, RHEL, CentOS) or&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;update-ca-certificates&lt;/code&gt; (Ubuntu, Debian, OpenSUSE, SLES) or&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;trust&lt;/code&gt; (Arch)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Firefox (macOS and Linux only)&lt;/li&gt; 
 &lt;li&gt;Chrome and Chromium&lt;/li&gt; 
 &lt;li&gt;Java (when &lt;code&gt;JAVA_HOME&lt;/code&gt; is set)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To only install the local root CA into a subset of them, you can set the &lt;code&gt;TRUST_STORES&lt;/code&gt; environment variable to a comma-separated list. Options are: &quot;system&quot;, &quot;java&quot; and &quot;nss&quot; (includes Firefox).&lt;/p&gt; 
&lt;h2&gt;Advanced topics&lt;/h2&gt; 
&lt;h3&gt;Advanced options&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	-cert-file FILE, -key-file FILE, -p12-file FILE
	    Customize the output paths.

	-client
	    Generate a certificate for client authentication.

	-ecdsa
	    Generate a certificate with an ECDSA key.

	-pkcs12
	    Generate a &quot;.p12&quot; PKCS #12 file, also know as a &quot;.pfx&quot; file,
	    containing certificate and key for legacy applications.

	-csr CSR
	    Generate a certificate based on the supplied CSR. Conflicts with
	    all other flags and arguments except -install and -cert-file.
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; place these options before the domain names list.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Example&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;S/MIME&lt;/h3&gt; 
&lt;p&gt;mkcert automatically generates an S/MIME certificate if one of the supplied names is an email address.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkcert filippo@example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mobile devices&lt;/h3&gt; 
&lt;p&gt;For the certificates to be trusted on mobile devices, you will have to install the root CA. It&#39;s the &lt;code&gt;rootCA.pem&lt;/code&gt; file in the folder printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;On iOS, you can either use AirDrop, email the CA to yourself, or serve it from an HTTP server. After opening it, you need to &lt;a href=&quot;https://github.com/FiloSottile/mkcert/issues/233#issuecomment-690110809&quot;&gt;install the profile in Settings &amp;gt; Profile Downloaded&lt;/a&gt; and then &lt;a href=&quot;https://support.apple.com/en-nz/HT204477&quot;&gt;enable full trust in it&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For Android, you will have to install the CA and then enable user roots in the development build of your app. See &lt;a href=&quot;https://stackoverflow.com/a/22040887/749014&quot;&gt;this StackOverflow answer&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using the root with Node.js&lt;/h3&gt; 
&lt;p&gt;Node does not use the system root store, so it won&#39;t accept mkcert certificates automatically. Instead, you will have to set the &lt;a href=&quot;https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file&quot;&gt;&lt;code&gt;NODE_EXTRA_CA_CERTS&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export NODE_EXTRA_CA_CERTS=&quot;$(mkcert -CAROOT)/rootCA.pem&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Changing the location of the CA files&lt;/h3&gt; 
&lt;p&gt;The CA certificate and its key are stored in an application data folder in the user home. You usually don&#39;t have to worry about it, as installation is automated, but the location is printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to manage separate CAs, you can use the environment variable &lt;code&gt;$CAROOT&lt;/code&gt; to set the folder where mkcert will place and look for the local CA files.&lt;/p&gt; 
&lt;h3&gt;Installing the CA on other systems&lt;/h3&gt; 
&lt;p&gt;Installing in the trust store does not require the CA key, so you can export the CA certificate and use mkcert to install it in other machines.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Look for the &lt;code&gt;rootCA.pem&lt;/code&gt; file in &lt;code&gt;mkcert -CAROOT&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;copy it to a different machine&lt;/li&gt; 
 &lt;li&gt;set &lt;code&gt;$CAROOT&lt;/code&gt; to its directory&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;mkcert -install&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Remember that mkcert is meant for development purposes, not production, so it should not be used on end users&#39; machines, and that you should &lt;em&gt;not&lt;/em&gt; export or share &lt;code&gt;rootCA-key.pem&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitleaks/gitleaks</title>
      <link>https://github.com/gitleaks/gitleaks</link>
      <description>&lt;p&gt;Find secrets with Gitleaks 🔑&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;┌─○───┐
│ │╲  │
│ │ ○ │
│ ○ ░ │
└─░───┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gitleaks/gitleaks/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/gitleaks/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;GitHub Action Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/zricethezav/gitleaks&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true&quot; alt=&quot;Docker Hub&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitleaks.io/playground&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/gitleaks%20-playground-blue&quot; alt=&quot;Gitleaks Playground&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gitleaks/gitleaks-action&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/protected%20by-gitleaks-blue&quot; alt=&quot;Gitleaks Action&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pkg.go.dev/github.com/zricethezav/gitleaks/v8&quot;&gt;&lt;img src=&quot;https://pkg.go.dev/badge/github.com/gitleaks/gitleaks/v8?status&quot; alt=&quot;GoDoc&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/gitleaks/gitleaks/v8&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/gitleaks/gitleaks/v8&quot; alt=&quot;GoReportCard&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/gitleaks/gitleaks/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/gitleaks/gitleaks.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Join our Discord! &lt;a href=&quot;https://discord.gg/8Hzbrnkr7E&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1102689410522284044.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Gitleaks is a tool for &lt;strong&gt;detecting&lt;/strong&gt; secrets like passwords, API keys, and tokens in git repos, files, and whatever else you wanna throw at it via &lt;code&gt;stdin&lt;/code&gt;. If you wanna learn more about how the detection engine works check out this blog: &lt;a href=&quot;https://lookingatcomputer.substack.com/p/regex-is-almost-all-you-need&quot;&gt;Regex is (almost) all you need&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;➜  ~/code(master) gitleaks git -v

    ○
    │╲
    │ ○
    ○ ░
    ░    gitleaks


Finding:     &quot;export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef&quot;,
Secret:      cafebabe:deadbeef
RuleID:      sidekiq-secret
Entropy:     2.609850
File:        cmd/generate/config/rules/sidekiq.go
Line:        23
Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2
Author:      John
Email:       john@users.noreply.github.com
Date:        2022-08-03T12:31:40Z
Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href=&quot;https://github.com/gitleaks/gitleaks/releases&quot;&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href=&quot;https://github.com/gitleaks/gitleaks-action&quot;&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installing&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# MacOS
brew install gitleaks

# Docker (DockerHub)
docker pull zricethezav/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# Docker (ghcr.io)
docker pull ghcr.io/gitleaks/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path ghcr.io/gitleaks/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# From Source (make sure `go` is installed)
git clone https://github.com/gitleaks/gitleaks.git
cd gitleaks
make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Action&lt;/h3&gt; 
&lt;p&gt;Check out the official &lt;a href=&quot;https://github.com/gitleaks/gitleaks-action&quot;&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;name: gitleaks
on: [pull_request, push, workflow_dispatch]
jobs:
  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre-Commit&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.24.2
    hooks:
      - id: gitleaks
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href=&quot;https://github.com/gitleaks/gitleaks/releases&quot;&gt;native execution of gitleaks&lt;/a&gt; or use the &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/.pre-commit-hooks.yaml&quot;&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing gitleaks using the &lt;a href=&quot;https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker&quot;&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos&#39; versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you&#39;re all set!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;➜ git commit -m &quot;this commit contains a secret&quot;
Detect hardcoded secrets.................................................Failed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;➜ SKIP=gitleaks git commit -m &quot;skip gitleaks check&quot;
Detect hardcoded secrets................................................Skipped
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Usage:
  gitleaks [command]

Available Commands:
  dir         scan directories or files for secrets
  git         scan git repositories for secrets
  help        Help about any command
  stdin       detect secrets from stdin
  version     display gitleaks version

Flags:
  -b, --baseline-path string          path to baseline with issues that can be ignored
  -c, --config string                 config file path
                                      order of precedence:
                                      1. --config/-c
                                      2. env var GITLEAKS_CONFIG
                                      3. env var GITLEAKS_CONFIG_TOML with the file content
                                      4. (target path)/.gitleaks.toml
                                      If none of the four options are used, then gitleaks will use the default config
      --diagnostics string            enable diagnostics (comma-separated list: cpu,mem,trace). cpu=CPU profiling, mem=memory profiling, trace=execution tracing
      --diagnostics-dir string        directory to store diagnostics output files (defaults to current directory)
      --enable-rule strings           only enable specific rules by id
      --exit-code int                 exit code when leaks have been encountered (default 1)
  -i, --gitleaks-ignore-path string   path to .gitleaksignore file or folder containing one (default &quot;.&quot;)
  -h, --help                          help for gitleaks
      --ignore-gitleaks-allow         ignore gitleaks:allow comments
  -l, --log-level string              log level (trace, debug, info, warn, error, fatal) (default &quot;info&quot;)
      --max-decode-depth int          allow recursive decoding up to this depth (default &quot;0&quot;, no decoding is done)
      --max-archive-depth int         allow scanning into nested archives up to this depth (default &quot;0&quot;, no archive traversal is done)
      --max-target-megabytes int      files larger than this will be skipped
      --no-banner                     suppress banner
      --no-color                      turn off color for verbose output
      --redact uint[=100]             redact secrets from logs and stdout. To redact only parts of the secret just apply a percent value from 0..100. For example --redact=20 (default 100%)
  -f, --report-format string          output format (json, csv, junit, sarif, template)
  -r, --report-path string            report file
      --report-template string        template file used to generate the report (implies --report-format=template)
  -v, --verbose                       show verbose output from scan
      --version                       version for gitleaks

Use &quot;gitleaks [command] --help&quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;⚠️ v8.19.0 introduced a change that deprecated &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;. Those commands are still available but are hidden in the &lt;code&gt;--help&lt;/code&gt; menu. Take a look at this &lt;a href=&quot;https://gist.github.com/zricethezav/b325bb93ebf41b9c0b0507acf12810d2&quot;&gt;gist&lt;/a&gt; for easy command translations. If you find v8.19.0 broke an existing command (&lt;code&gt;detect&lt;/code&gt;/&lt;code&gt;protect&lt;/code&gt;), please open an issue.&lt;/p&gt; 
&lt;p&gt;There are three scanning modes: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, and &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Git&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;git&lt;/code&gt; command lets you scan local git repos. Under the hood, gitleaks uses the &lt;code&gt;git log -p&lt;/code&gt; command to scan patches. You can configure the behavior of &lt;code&gt;git log -p&lt;/code&gt; with the &lt;code&gt;log-opts&lt;/code&gt; option. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks git -v --log-opts=&quot;--all commitA..commitB&quot; path_to_repo&lt;/code&gt;. See the &lt;a href=&quot;https://git-scm.com/docs/git-log&quot;&gt;git log&lt;/a&gt; documentation for more information. If there is no target specified as a positional argument, then gitleaks will attempt to scan the current working directory as a git repo.&lt;/p&gt; 
&lt;h4&gt;Dir&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; (aliases include &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;) command lets you scan directories and files. Example: &lt;code&gt;gitleaks dir -v path_to_directory_or_file&lt;/code&gt;. If there is no target specified as a positional argument, then gitleaks will scan the current working directory.&lt;/p&gt; 
&lt;h4&gt;Stdin&lt;/h4&gt; 
&lt;p&gt;You can also stream data to gitleaks with the &lt;code&gt;stdin&lt;/code&gt; command. Example: &lt;code&gt;cat some_file | gitleaks -v stdin&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Creating a baseline&lt;/h3&gt; 
&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --baseline-path gitleaks-report.json --report-path findings.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; 
&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; 
&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Load Configuration&lt;/h2&gt; 
&lt;p&gt;The order of precedence is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;--config/-c&lt;/code&gt; option: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gitleaks git --config /home/dev/customgitleaks.toml .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG&lt;/code&gt; with the file path: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export GITLEAKS_CONFIG=&quot;/home/dev/customgitleaks.toml&quot;
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG_TOML&lt;/code&gt; with the file content: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export GITLEAKS_CONFIG_TOML=`cat customgitleaks.toml`
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;A &lt;code&gt;.gitleaks.toml&lt;/code&gt; file within the target path: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If none of the four options are used, then gitleaks will use the default config.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;# Title for the gitleaks configuration file.
title = &quot;Custom Gitleaks configuration&quot;

# You have basically two options for your custom configuration:
#
# 1. define your own configuration, default rules do not apply
#
#    use e.g., the default configuration as starting point:
#    https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
#
# 2. extend a configuration, the rules are overwritten or extended
#
#    When you extend a configuration the extended rules take precedence over the
#    default rules. I.e., if there are duplicate rules in both the extended
#    configuration and the default configuration the extended rules or
#    attributes of them will override the default rules.
#    Another thing to know with extending configurations is you can chain
#    together multiple configuration files to a depth of 2. Allowlist arrays are
#    appended and can contain duplicates.

# useDefault and path can NOT be used at the same time. Choose one.
[extend]
# useDefault will extend the default gitleaks config built in to the binary
# the latest version is located at:
# https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
useDefault = true
# or you can provide a path to a configuration to extend from.
# The path is relative to where gitleaks was invoked,
# not the location of the base config.
# path = &quot;common_config.toml&quot;
# If there are any rules you don&#39;t want to inherit, they can be specified here.
disabledRules = [ &quot;generic-api-key&quot;]

# An array of tables that contain information that define instructions
# on how to detect secrets
[[rules]]
# Unique identifier for this rule
id = &quot;awesome-rule-1&quot;

# Short human-readable description of the rule.
description = &quot;awesome rule 1&quot;

# Golang regular expression used to detect secrets. Note Golang&#39;s regex engine
# does not support lookaheads.
regex = &#39;&#39;&#39;one-go-style-regex-for-this-rule&#39;&#39;&#39;

# Int used to extract secret from regex match and used as the group that will have
# its entropy checked if `entropy` is set.
secretGroup = 3

# Float representing the minimum shannon entropy a regex group must have to be considered a secret.
entropy = 3.5

# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used
# in conjunction with a valid `regex` entry.
path = &#39;&#39;&#39;a-file-path-regex&#39;&#39;&#39;

# Keywords are used for pre-regex check filtering. Rules that contain
# keywords will perform a quick string compare check to make sure the
# keyword(s) are in the content being scanned. Ideally these values should
# either be part of the identiifer or unique strings specific to the rule&#39;s regex
# (introduced in v8.6.0)
keywords = [
  &quot;auth&quot;,
  &quot;password&quot;,
  &quot;token&quot;,
]

# Array of strings used for metadata and reporting purposes.
tags = [&quot;tag&quot;,&quot;another tag&quot;]

    # ⚠️ In v8.21.0 `[rules.allowlist]` was replaced with `[[rules.allowlists]]`.
    # This change was backwards-compatible: instances of `[rules.allowlist]` still  work.
    #
    # You can define multiple allowlists for a rule to reduce false positives.
    # A finding will be ignored if _ANY_ `[[rules.allowlists]]` matches.
    [[rules.allowlists]]
    description = &quot;ignore commit A&quot;
    # When multiple criteria are defined the default condition is &quot;OR&quot;.
    # e.g., this can match on |commits| OR |paths| OR |stopwords|.
    condition = &quot;OR&quot;
    commits = [ &quot;commit-A&quot;, &quot;commit-B&quot;]
    paths = [
      &#39;&#39;&#39;go\.mod&#39;&#39;&#39;,
      &#39;&#39;&#39;go\.sum&#39;&#39;&#39;
    ]
    # note: stopwords targets the extracted secret, not the entire regex match
    # like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)
    stopwords = [
      &#39;&#39;&#39;client&#39;&#39;&#39;,
      &#39;&#39;&#39;endpoint&#39;&#39;&#39;,
    ]

    [[rules.allowlists]]
    # The &quot;AND&quot; condition can be used to make sure all criteria match.
    # e.g., this matches if |regexes| AND |paths| are satisfied.
    condition = &quot;AND&quot;
    # note: |regexes| defaults to check the _Secret_ in the finding.
    # Acceptable values for |regexTarget| are &quot;secret&quot; (default), &quot;match&quot;, and &quot;line&quot;.
    regexTarget = &quot;match&quot;
    regexes = [ &#39;&#39;&#39;(?i)parseur[il]&#39;&#39;&#39; ]
    paths = [ &#39;&#39;&#39;package-lock\.json&#39;&#39;&#39; ]

# You can extend a particular rule from the default config. e.g., gitlab-pat
# if you have defined a custom token prefix on your GitLab instance
[[rules]]
id = &quot;gitlab-pat&quot;
# all the other attributes from the default rule are inherited

    [[rules.allowlists]]
    regexTarget = &quot;line&quot;
    regexes = [ &#39;&#39;&#39;MY-glpat-&#39;&#39;&#39; ]


# ⚠️ In v8.25.0 `[allowlist]` was replaced with `[[allowlists]]`.
#
# Global allowlists have a higher order of precedence than rule-specific allowlists.
# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no
# secrets will be detected for said commit. The same logic applies for regexes and paths.
[[allowlists]]
description = &quot;global allow list&quot;
commits = [ &quot;commit-A&quot;, &quot;commit-B&quot;, &quot;commit-C&quot;]
paths = [
  &#39;&#39;&#39;gitleaks\.toml&#39;&#39;&#39;,
  &#39;&#39;&#39;(.*?)(jpg|gif|doc)&#39;&#39;&#39;
]
# note: (global) regexTarget defaults to check the _Secret_ in the finding.
# Acceptable values for regexTarget are &quot;match&quot; and &quot;line&quot;
regexTarget = &quot;match&quot;
regexes = [
  &#39;&#39;&#39;219-09-9999&#39;&#39;&#39;,
  &#39;&#39;&#39;078-05-1120&#39;&#39;&#39;,
  &#39;&#39;&#39;(9[0-9]{2}|666)-\d{2}-\d{4}&#39;&#39;&#39;,
]
# note: stopwords targets the extracted secret, not the entire regex match
# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)
stopwords = [
  &#39;&#39;&#39;client&#39;&#39;&#39;,
  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,
]

# ⚠️ In v8.25.0, `[[allowlists]]` have a new field called |targetRules|.
#
# Common allowlists can be defined once and assigned to multiple rules using |targetRules|.
# This will only run on the specified rules, not globally.
[[allowlists]]
targetRules = [&quot;awesome-rule-1&quot;, &quot;awesome-rule-2&quot;]
description = &quot;Our test assets trigger false-positives in a couple rules.&quot;
paths = [&#39;&#39;&#39;tests/expected/._\.json$&#39;&#39;&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the default &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml&quot;&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href=&quot;https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf&quot;&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; 
&lt;h3&gt;Additional Configuration&lt;/h3&gt; 
&lt;h4&gt;Composite Rules (Multi-part or &lt;code&gt;required&lt;/code&gt; Rules)&lt;/h4&gt; 
&lt;p&gt;In v8.28.0 Gitleaks introduced composite rules, which are made up of a single &quot;primary&quot; rule and one or more auxiliary or &lt;code&gt;required&lt;/code&gt; rules. To create a composite rule, add a &lt;code&gt;[[rules.required]]&lt;/code&gt; table to the primary rule specifying an &lt;code&gt;id&lt;/code&gt; and optionally &lt;code&gt;withinLines&lt;/code&gt; and/or &lt;code&gt;withinColumns&lt;/code&gt; proximity constraints. A fragment is a chunk of content that Gitleaks processes at once (typically a file, part of a file, or git diff), and proximity matching instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified area of the fragment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Proximity matching:&lt;/strong&gt; Using the &lt;code&gt;withinLines&lt;/code&gt; and &lt;code&gt;withinColumns&lt;/code&gt; fields instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified proximity. You can set:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinLines: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N lines (vertically)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinColumns: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N characters (horizontally)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Both&lt;/strong&gt; - creates a rectangular search area (both constraints must be satisfied)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Neither&lt;/strong&gt; - fragment-level matching (required findings can be anywhere in the same fragment)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here are diagrams illustrating each proximity behavior:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;p = primary captured secret
a = auxiliary (required) captured secret
fragment = section of data gitleaks is looking at


    *Fragment-level proximity*               
    Any required finding in the fragment
          ┌────────┐                       
   ┌──────┤fragment├─────┐                 
   │      └──────┬─┤     │ ┌───────┐       
   │             │a│◀────┼─│✓ MATCH│       
   │          ┌─┐└─┘     │ └───────┘       
   │┌─┐       │p│        │                 
   ││a│    ┌─┐└─┘        │ ┌───────┐       
   │└─┘    │a│◀──────────┼─│✓ MATCH│       
   └─▲─────┴─┴───────────┘ └───────┘       
     │    ┌───────┐                        
     └────│✓ MATCH│                        
          └───────┘                        
                                           
                                           
   *Column bounded proximity*
   `withinColumns = 3`                    
          ┌────────┐                       
   ┌────┬─┤fragment├─┬───┐                 
   │      └──────┬─┤     │ ┌───────────┐   
   │    │        │a│◀┼───┼─│+1C ✓ MATCH│   
   │          ┌─┐└─┘     │ └───────────┘   
   │┌─┐ │     │p│    │   │                 
┌──▶│a│  ┌─┐  └─┘        │ ┌───────────┐   
│  │└─┘ ││a│◀────────┼───┼─│-2C ✓ MATCH│   
│  │       ┘             │ └───────────┘   
│  └── -3C ───0C─── +3C ─┘                 
│  ┌─────────┐                             
│  │ -4C ✗ NO│                             
└──│  MATCH  │                             
   └─────────┘                             
                                           
                                           
   *Line bounded proximity*
   `withinLines = 4`                      
         ┌────────┐                        
   ┌─────┤fragment├─────┐                  
  +4L─ ─ ┴────────┘─ ─ ─│                  
   │                    │                  
   │              ┌─┐   │ ┌────────────┐   
   │         ┌─┐  │a│◀──┼─│+1L ✓ MATCH │   
   0L  ┌─┐   │p│  └─┘   │ ├────────────┤   
   │   │a│◀──┴─┴────────┼─│-1L ✓ MATCH │   
   │   └─┘              │ └────────────┘   
   │                    │ ┌─────────┐      
  -4L─ ─ ─ ─ ─ ─ ─ ─┌─┐─│ │-5L ✗ NO │      
   │                │a│◀┼─│  MATCH  │      
   └────────────────┴─┴─┘ └─────────┘      
                                           
                                           
   *Line and column bounded proximity*
   `withinLines = 4`                      
   `withinColumns = 3`                    
         ┌────────┐                        
   ┌─────┤fragment├─────┐                  
  +4L   ┌└────────┴ ┐   │                  
   │            ┌─┐     │ ┌───────────────┐
   │    │       │a│◀┼───┼─│+2L/+1C ✓ MATCH│
   │         ┌─┐└─┘     │ └───────────────┘
   0L   │    │p│    │   │                  
   │         └─┘        │                  
   │    │           │   │ ┌────────────┐   
  -4L    ─ ─ ─ ─ ─ ─┌─┐ │ │-5L/+3C ✗ NO│   
   │                │a│◀┼─│   MATCH    │   
   └───-3C────0L───+3C┴─┘ └────────────┘   
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt;
 &lt;summary&gt;Some final quick thoughts on composite rules.&lt;/summary&gt;This is an experimental feature! It&#39;s subject to change so don&#39;t go sellin&#39; a new B2B SaaS feature built ontop of this feature. Scan type (git vs dir) based context is interesting. I&#39;m monitoring the situation. Composite rules might not be super useful for git scans because gitleaks only looks at additions in the git history. It could be useful to scan non-additions in git history for `required` rules. Oh, right this is a readme, I&#39;ll shut up now.
&lt;/details&gt; 
&lt;h4&gt;gitleaks:allow&lt;/h4&gt; 
&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class CustomClass:
    discord_client_secret = &#39;8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ&#39;  #gitleaks:allow

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;.gitleaksignore&lt;/h4&gt; 
&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks&#39; &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/.gitleaksignore&quot;&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; 
&lt;h4&gt;Decoding&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are encoded in a way that can make them difficult to find with just regex. Now you can tell gitleaks to automatically find and decode encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; enables this feature (the default value &quot;0&quot; means the feature is disabled by default).&lt;/p&gt; 
&lt;p&gt;Recursive decoding is supported since decoded text can also contain encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; sets the recursion limit. Recursion stops when there are no new segments of encoded text to decode, so setting a really high max depth doesn&#39;t mean it will make that many passes. It will only make as many as it needs to decode the text. Overall, decoding only minimally increases scan times.&lt;/p&gt; 
&lt;p&gt;The findings for encoded text differ from normal findings in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The location points the bounds of the encoded text 
  &lt;ul&gt; 
   &lt;li&gt;If the rule matches outside the encoded text, the bounds are adjusted to include that as well&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The match and secret contain the decoded value&lt;/li&gt; 
 &lt;li&gt;Two tags are added &lt;code&gt;decoded:&amp;lt;encoding&amp;gt;&lt;/code&gt; and &lt;code&gt;decode-depth:&amp;lt;depth&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently supported encodings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;percent&lt;/strong&gt; - Any printable ASCII percent encoded values&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hex&lt;/strong&gt; - Any printable ASCII hex encoded values &amp;gt;= 32 characters&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;base64&lt;/strong&gt; - Any printable ASCII base64 encoded values &amp;gt;= 16 characters&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Archive Scanning&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are packaged within archive files like zip files or tarballs, making them difficult to discover. Now you can tell gitleaks to automatically extract and scan the contents of archives. The flag &lt;code&gt;--max-archive-depth&lt;/code&gt; enables this feature for both &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; scan types. The default value of &quot;0&quot; means this feature is disabled by default.&lt;/p&gt; 
&lt;p&gt;Recursive scanning is supported since archives can also contain other archives. The &lt;code&gt;--max-archive-depth&lt;/code&gt; flag sets the recursion limit. Recursion stops when there are no new archives to extract, so setting a very high max depth just sets the potential to go that deep. It will only go as deep as it needs to.&lt;/p&gt; 
&lt;p&gt;The findings for secrets located within an archive will include the path to the file inside the archive. Inner paths are separated with &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example finding (shortened for brevity):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Finding:     DB_PASSWORD=8ae31cacf141669ddfb5da
...
File:        testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod
Line:        4
Commit:      6e6ee6596d337bb656496425fb98644eb62b4a82
...
Fingerprint: 6e6ee6596d337bb656496425fb98644eb62b4a82:testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod:generic-api-key:4
Link:        https://github.com/leaktk/gitleaks/blob/6e6ee6596d337bb656496425fb98644eb62b4a82/testdata/archives/nested.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means a secret was detected on line 4 of &lt;code&gt;files/.env.prod.&lt;/code&gt; which is in &lt;code&gt;archives/files.tar&lt;/code&gt; which is in &lt;code&gt;testdata/archives/nested.tar.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Currently supported formats:&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/mholt/archives?tab=readme-ov-file#supported-compression-formats&quot;&gt;compression&lt;/a&gt; and &lt;a href=&quot;https://github.com/mholt/archives?tab=readme-ov-file#supported-archive-formats&quot;&gt;archive&lt;/a&gt; formats supported by mholt&#39;s &lt;a href=&quot;https://github.com/mholt/archives&quot;&gt;archives package&lt;/a&gt; are supported.&lt;/p&gt; 
&lt;h4&gt;Reporting&lt;/h4&gt; 
&lt;p&gt;Gitleaks has built-in support for several report formats: &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/json_simple.json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/csv_simple.csv?plain=1&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/junit_simple.xml&quot;&gt;&lt;code&gt;junit&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/sarif_simple.sarif&quot;&gt;&lt;code&gt;sarif&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If none of these formats fit your need, you can create your own report format with a &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-templates-in-go#step-4-writing-a-template&quot;&gt;Go &lt;code&gt;text/template&lt;/code&gt; .tmpl file&lt;/a&gt; and the &lt;code&gt;--report-template&lt;/code&gt; flag. The template can use &lt;a href=&quot;https://masterminds.github.io/sprig/&quot;&gt;extended functionality from the &lt;code&gt;Masterminds/sprig&lt;/code&gt; template library&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, the following template provides a custom JSON output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-gotemplate&quot;&gt;# jsonextra.tmpl
[{{ $lastFinding := (sub (len . ) 1) }}
{{- range $i, $finding := . }}{{with $finding}}
    {
        &quot;Description&quot;: {{ quote .Description }},
        &quot;StartLine&quot;: {{ .StartLine }},
        &quot;EndLine&quot;: {{ .EndLine }},
        &quot;StartColumn&quot;: {{ .StartColumn }},
        &quot;EndColumn&quot;: {{ .EndColumn }},
        &quot;Line&quot;: {{ quote .Line }},
        &quot;Match&quot;: {{ quote .Match }},
        &quot;Secret&quot;: {{ quote .Secret }},
        &quot;File&quot;: &quot;{{ .File }}&quot;,
        &quot;SymlinkFile&quot;: {{ quote .SymlinkFile }},
        &quot;Commit&quot;: {{ quote .Commit }},
        &quot;Entropy&quot;: {{ .Entropy }},
        &quot;Author&quot;: {{ quote .Author }},
        &quot;Email&quot;: {{ quote .Email }},
        &quot;Date&quot;: {{ quote .Date }},
        &quot;Message&quot;: {{ quote .Message }},
        &quot;Tags&quot;: [{{ $lastTag := (sub (len .Tags ) 1) }}{{ range $j, $tag := .Tags }}{{ quote . }}{{ if ne $j $lastTag }},{{ end }}{{ end }}],
        &quot;RuleID&quot;: {{ quote .RuleID }},
        &quot;Fingerprint&quot;: {{ quote .Fingerprint }}
    }{{ if ne $i $lastFinding }},{{ end }}
{{- end}}{{ end }}
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ gitleaks dir ~/leaky-repo/ --report-path &quot;report.json&quot; --report-format template --report-template testdata/report/jsonextra.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sponsorships&lt;/h2&gt; 
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&quot;&gt;coderabbit.ai&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&quot;&gt; &lt;/a&gt;
&lt;a href=&quot;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&quot;&gt; &lt;img alt=&quot;CodeRabbit.ai Sponsorship&quot; src=&quot;https://github.com/gitleaks/gitleaks/assets/15034943/76c30a85-887b-47ca-9956-17a8e55c6c41&quot; width=&quot;200&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0 - no leaks present
1 - leaks or error encountered
126 - unknown flag
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>sundowndev/phoneinfoga</title>
      <link>https://github.com/sundowndev/phoneinfoga</link>
      <description>&lt;p&gt;Information gathering framework for phone numbers&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/banner.png&quot; width=&quot;500&quot; alt=&quot;project logo&quot; /&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/sundowndev/phoneinfoga/actions&quot;&gt; &lt;img src=&quot;https://github.com/sundowndev/phoneinfoga/workflows/Build/badge.svg?sanitize=true&quot; alt=&quot;build status&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://goreportcard.com/report/github.com/sundowndev/phoneinfoga/v2&quot;&gt; &lt;img src=&quot;https://goreportcard.com/badge/github.com/sundowndev/phoneinfoga/v2&quot; alt=&quot;go report&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://codeclimate.com/github/sundowndev/phoneinfoga/maintainability&quot;&gt; &lt;img src=&quot;https://api.codeclimate.com/v1/badges/3259feb1c68df1cd4f71/maintainability&quot; alt=&quot;code climate badge&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://coveralls.io/github/sundowndev/phoneinfoga&quot;&gt; &lt;img src=&quot;https://coveralls.io/repos/github/sundowndev/phoneinfoga/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/sundowndev/phoneinfoga/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/SundownDEV/phoneinfoga.svg?sanitize=true&quot; alt=&quot;Latest version&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://hub.docker.com/r/sundowndev/phoneinfoga&quot;&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/sundowndev/phoneinfoga.svg?sanitize=true&quot; alt=&quot;Docker pulls&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h4 align=&quot;center&quot;&gt;Information gathering framework for phone numbers&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://sundowndev.github.io/phoneinfoga/&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&quot;&gt;API documentation&lt;/a&gt; • &lt;a href=&quot;https://medium.com/@SundownDEV/phone-number-scanning-osint-recon-tool-6ad8f0cac27b&quot;&gt;Related blog post&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;PhoneInfoga is one of the most advanced tools to scan international phone numbers. It allows you to first gather basic information such as country, area, carrier and line type, then use various techniques to try to find the VoIP provider or identify the owner. It works with a collection of scanners that must be configured in order for the tool to be effective. PhoneInfoga doesn&#39;t automate everything, it&#39;s just there to help investigating on phone numbers.&lt;/p&gt; 
&lt;h2&gt;Current status&lt;/h2&gt; 
&lt;p&gt;This project is stable and production-ready.&lt;/p&gt; 
&lt;h4&gt;Demo instance termination&lt;/h4&gt; 
&lt;p&gt;The demo instance has been terminated on December 21th, 2023. It&#39;s been expensive to maintain this instance throughout the years given the number of requests it received (~20K/month), without bringing much value to users compared to using it locally. Use it locally with your own API keys for a better experience.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if phone number exists&lt;/li&gt; 
 &lt;li&gt;Gather basic information such as country, line type and carrier&lt;/li&gt; 
 &lt;li&gt;OSINT footprinting using external APIs, phone books &amp;amp; search engines&lt;/li&gt; 
 &lt;li&gt;Check for reputation reports, social media, disposable numbers and more&lt;/li&gt; 
 &lt;li&gt;Use the graphical user interface to run scans from the browser&lt;/li&gt; 
 &lt;li&gt;Programmatic usage with the &lt;a href=&quot;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&quot;&gt;REST API&lt;/a&gt; and &lt;a href=&quot;https://pkg.go.dev/github.com/sundowndev/phoneinfoga/v2&quot;&gt;Go modules&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Anti-features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Does not claim to provide relevant or verified data, it&#39;s just a tool !&lt;/li&gt; 
 &lt;li&gt;Does not allow to &quot;track&quot; a phone or its owner in real time&lt;/li&gt; 
 &lt;li&gt;Does not allow to get the precise phone location&lt;/li&gt; 
 &lt;li&gt;Does not allow to hack a phone&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga.svg?type=shield&quot; alt=&quot;FOSSA Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This tool is licensed under the GNU General Public License v3.0.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.flaticon.com/free-icon/fingerprint-search-symbol-of-secret-service-investigation_48838&quot;&gt;Icon&lt;/a&gt; made by &lt;a href=&quot;https://www.freepik.com/&quot; title=&quot;Freepik&quot;&gt;Freepik&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot; title=&quot;Flaticon&quot;&gt;flaticon.com&lt;/a&gt; is licensed by &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot; title=&quot;Creative Commons BY 3.0&quot; target=&quot;_blank&quot;&gt;CC 3.0 BY&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Support me by signing up to DigitalOcean using my link ($200 free credits)&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/?refcode=31f5ef768eb3&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge&quot;&gt;&lt;img src=&quot;https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%203.svg?sanitize=true&quot; alt=&quot;DigitalOcean Referral Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://github.com/sundowndev/static/raw/main/sponsors.svg?v=c68eba9&quot; width=&quot;100%&quot; heigh=&quot;auto&quot; /&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>github/github-mcp-server</title>
      <link>https://github.com/github/github-mcp-server</link>
      <description>&lt;p&gt;GitHub&#39;s official MCP Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub MCP Server&lt;/h1&gt; 
&lt;p&gt;The GitHub MCP Server connects AI tools directly to GitHub&#39;s platform. This gives AI agents, assistants, and chatbots the ability to read repositories and code files, manage issues and PRs, analyze code, and automate workflows. All through natural language interactions.&lt;/p&gt; 
&lt;h3&gt;Use Cases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Repository Management: Browse and query code, search files, analyze commits, and understand project structure across any repository you have access to.&lt;/li&gt; 
 &lt;li&gt;Issue &amp;amp; PR Automation: Create, update, and manage issues and pull requests. Let AI help triage bugs, review code changes, and maintain project boards.&lt;/li&gt; 
 &lt;li&gt;CI/CD &amp;amp; Workflow Intelligence: Monitor GitHub Actions workflow runs, analyze build failures, manage releases, and get insights into your development pipeline.&lt;/li&gt; 
 &lt;li&gt;Code Analysis: Examine security findings, review Dependabot alerts, understand code patterns, and get comprehensive insights into your codebase.&lt;/li&gt; 
 &lt;li&gt;Team Collaboration: Access discussions, manage notifications, analyze team activity, and streamline processes for your team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built for developers who want to connect their AI tools to GitHub context and capabilities, from simple natural language queries to complex multi-step agent workflows.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Remote GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&quot; alt=&quot;Install in VS Code&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&amp;amp;quality=insiders&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&quot; alt=&quot;Install in VS Code Insiders&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The remote GitHub MCP Server is hosted by GitHub and provides the easiest method for getting up and running. If your MCP host does not support remote MCP servers, don&#39;t worry! You can use the &lt;a href=&quot;https://github.com/github/github-mcp-server?tab=readme-ov-file#local-github-mcp-server&quot;&gt;local version of the GitHub MCP Server&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;A compatible MCP host with remote server support (VS Code 1.101+, Claude Desktop, Cursor, Windsurf, etc.)&lt;/li&gt; 
 &lt;li&gt;Any applicable &lt;a href=&quot;https://github.com/github/github-mcp-server/raw/main/docs/policies-and-governance.md&quot;&gt;policies enabled&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install in VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start. Make sure you&#39;re using &lt;a href=&quot;https://code.visualstudio.com/updates/v1_101&quot;&gt;VS Code 1.101&lt;/a&gt; or &lt;a href=&quot;https://code.visualstudio.com/updates&quot;&gt;later&lt;/a&gt; for remote MCP and OAuth support.&lt;/p&gt; 
&lt;p&gt;Alternatively, to manually configure VS Code, choose the appropriate JSON block from the examples below and add it to your host configuration:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;th&gt;Using OAuth&lt;/th&gt;
   &lt;th&gt;Using a GitHub PAT&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;th align=&quot;left&quot; colspan=&quot;2&quot;&gt;VS Code (version 1.101 or greater)&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr valign=&quot;top&quot;&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;servers&quot;: {
    &quot;github&quot;: {
      &quot;type&quot;: &quot;http&quot;,
      &quot;url&quot;: &quot;https://api.githubcopilot.com/mcp/&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;servers&quot;: {
    &quot;github&quot;: {
      &quot;type&quot;: &quot;http&quot;,
      &quot;url&quot;: &quot;https://api.githubcopilot.com/mcp/&quot;,
      &quot;headers&quot;: {
        &quot;Authorization&quot;: &quot;Bearer ${input:github_mcp_pat}&quot;
      }
    }
  },
  &quot;inputs&quot;: [
    {
      &quot;type&quot;: &quot;promptString&quot;,
      &quot;id&quot;: &quot;github_mcp_pat&quot;,
      &quot;description&quot;: &quot;GitHub Personal Access Token&quot;,
      &quot;password&quot;: true
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Install in other MCP hosts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md&quot;&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md&quot;&gt;Claude Applications&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Web, Claude Desktop and Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md&quot;&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md&quot;&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each MCP host application needs to configure a GitHub App or OAuth App to support remote access via OAuth. Any host application that supports remote MCP servers should support the remote GitHub server with PAT authentication. Configuration details and support levels vary by host. Make sure to refer to the host application&#39;s documentation for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;Public Preview Status:&lt;/strong&gt; The &lt;strong&gt;remote&lt;/strong&gt; GitHub MCP Server is currently in Public Preview. During preview, access may be gated depending on authentication type and surface:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;OAuth: Subject to GitHub Copilot Editor Preview Policy until GA&lt;/li&gt; 
  &lt;li&gt;PAT: Controlled via your organization&#39;s PAT policies&lt;/li&gt; 
  &lt;li&gt;MCP Servers in Copilot policy: Enables/disables access to all MCP servers in VS Code, with other Copilot editors migrating to this policy in the coming months.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/remote-server.md&quot;&gt;Remote Server Documentation&lt;/a&gt; on how to pass additional configuration settings to the remote GitHub MCP Server.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Local GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&quot; alt=&quot;Install with Docker in VS Code&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&amp;amp;quality=insiders&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&quot; alt=&quot;Install with Docker in VS Code Insiders&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;To run the server in a container, you will need to have &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; installed.&lt;/li&gt; 
 &lt;li&gt;Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to &lt;code&gt;docker logout ghcr.io&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Lastly you will need to &lt;a href=&quot;https://github.com/settings/personal-access-tokens/new&quot;&gt;Create a GitHub Personal Access Token&lt;/a&gt;. The MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the &lt;a href=&quot;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&quot;&gt;documentation&lt;/a&gt;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Handling PATs Securely&lt;/b&gt;&lt;/summary&gt; 
 &lt;h3&gt;Environment Variables (Recommended)&lt;/h3&gt; 
 &lt;p&gt;To keep your GitHub PAT secure and reusable across different MCP hosts:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Store your PAT in environment variables&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or create a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-env&quot;&gt;GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Protect your &lt;code&gt;.env&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Add to .gitignore to prevent accidental commits
echo &quot;.env&quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reference the token in configurations&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# CLI usage
claude mcp update github -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PAT

# In config files (where supported)
&quot;env&quot;: {
  &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;$GITHUB_PAT&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Environment variable support varies by host app and IDE. Some applications (like Windsurf) require hardcoded tokens in config files.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Token Security Best Practices&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Minimum scopes&lt;/strong&gt;: Only grant necessary permissions 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - Repository operations&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;read:packages&lt;/code&gt; - Docker image access&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Separate tokens&lt;/strong&gt;: Use different PATs for different projects/environments&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Regular rotation&lt;/strong&gt;: Update tokens periodically&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Never commit&lt;/strong&gt;: Keep tokens out of version control&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;File permissions&lt;/strong&gt;: Restrict access to config files containing tokens &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chmod 600 ~/.your-app/config.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install in GitHub Copilot on VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.&lt;/p&gt; 
&lt;p&gt;More about using MCP server tools in VS Code&#39;s &lt;a href=&quot;https://code.visualstudio.com/docs/copilot/chat/mcp-servers&quot;&gt;agent mode documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Install in GitHub Copilot on other IDEs (JetBrains, Visual Studio, Eclipse, etc.)&lt;/p&gt; 
&lt;p&gt;Add the following JSON block to your IDE&#39;s MCP settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;mcp&quot;: {
    &quot;inputs&quot;: [
      {
        &quot;type&quot;: &quot;promptString&quot;,
        &quot;id&quot;: &quot;github_token&quot;,
        &quot;description&quot;: &quot;GitHub Personal Access Token&quot;,
        &quot;password&quot;: true
      }
    ],
    &quot;servers&quot;: {
      &quot;github&quot;: {
        &quot;command&quot;: &quot;docker&quot;,
        &quot;args&quot;: [
          &quot;run&quot;,
          &quot;-i&quot;,
          &quot;--rm&quot;,
          &quot;-e&quot;,
          &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;,
          &quot;ghcr.io/github/github-mcp-server&quot;
        ],
        &quot;env&quot;: {
          &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;${input:github_token}&quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, you can add a similar example (i.e. without the mcp key) to a file called &lt;code&gt;.vscode/mcp.json&lt;/code&gt; in your workspace. This will allow you to share the configuration with other host applications that accept the same format.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Example JSON block without the MCP key included&lt;/b&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;inputs&quot;: [
    {
      &quot;type&quot;: &quot;promptString&quot;,
      &quot;id&quot;: &quot;github_token&quot;,
      &quot;description&quot;: &quot;GitHub Personal Access Token&quot;,
      &quot;password&quot;: true
    }
  ],
  &quot;servers&quot;: {
    &quot;github&quot;: {
      &quot;command&quot;: &quot;docker&quot;,
      &quot;args&quot;: [
        &quot;run&quot;,
        &quot;-i&quot;,
        &quot;--rm&quot;,
        &quot;-e&quot;,
        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;,
        &quot;ghcr.io/github/github-mcp-server&quot;
      ],
      &quot;env&quot;: {
        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;${input:github_token}&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Install in Other MCP Hosts&lt;/h3&gt; 
&lt;p&gt;For other MCP host applications, please refer to our installation guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md&quot;&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md&quot;&gt;Claude Code &amp;amp; Claude Desktop&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Code and Claude Desktop&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md&quot;&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md&quot;&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a complete overview of all installation options, see our &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/installation-guides.md&quot;&gt;Installation Guides Index&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any host application that supports local MCP servers should be able to access the local GitHub MCP server. However, the specific configuration process, syntax and stability of the integration will vary by host application. While many may follow a similar format to the examples above, this is not guaranteed. Please refer to your host application&#39;s documentation for the correct MCP configuration syntax and setup process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;p&gt;If you don&#39;t have Docker, you can use &lt;code&gt;go build&lt;/code&gt; to build the binary in the &lt;code&gt;cmd/github-mcp-server&lt;/code&gt; directory, and use the &lt;code&gt;github-mcp-server stdio&lt;/code&gt; command with the &lt;code&gt;GITHUB_PERSONAL_ACCESS_TOKEN&lt;/code&gt; environment variable set to your token. To specify the output location of the build, use the &lt;code&gt;-o&lt;/code&gt; flag. You should configure your server to use the built executable as its &lt;code&gt;command&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{
  &quot;mcp&quot;: {
    &quot;servers&quot;: {
      &quot;github&quot;: {
        &quot;command&quot;: &quot;/path/to/github-mcp-server&quot;,
        &quot;args&quot;: [&quot;stdio&quot;],
        &quot;env&quot;: {
          &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;&amp;lt;YOUR_TOKEN&amp;gt;&quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tool Configuration&lt;/h2&gt; 
&lt;p&gt;The GitHub MCP Server supports enabling or disabling specific groups of functionalities via the &lt;code&gt;--toolsets&lt;/code&gt; flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Toolsets are not limited to Tools. Relevant MCP Resources and Prompts are also included where applicable.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Available Toolsets&lt;/h3&gt; 
&lt;p&gt;The following sets of tools are available (all are on by default):&lt;/p&gt; 
&lt;!-- START AUTOMATED TOOLSETS --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Toolset&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;context&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Strongly recommended&lt;/strong&gt;: Tools that provide context about the current user and GitHub context you are operating in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Actions workflows and CI/CD operations&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;code_security&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Code security related tools, such as GitHub Code Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dependabot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dependabot tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;discussions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Discussions related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;experiments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Experimental features that are not considered stable yet&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Gist related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;issues&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Issues related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Notifications related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;orgs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Organization related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pull_requests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Pull Request related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;repos&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Repository related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;secret_protection&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Secret protection related tools, such as GitHub Secret Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;users&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub User related tools&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- END AUTOMATED TOOLSETS --&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;!-- START AUTOMATED TOOLS --&gt; 
&lt;details&gt; 
 &lt;summary&gt;Actions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;cancel_workflow_run&lt;/strong&gt; - Cancel workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_workflow_run_logs&lt;/strong&gt; - Delete workflow logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;download_workflow_run_artifact&lt;/strong&gt; - Download workflow artifact&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;artifact_id&lt;/code&gt;: The unique identifier of the artifact (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_job_logs&lt;/strong&gt; - Get job logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;failed_only&lt;/code&gt;: When true, gets logs for all failed jobs in run_id (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;job_id&lt;/code&gt;: The unique identifier of the workflow job (required for single job logs) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;return_content&lt;/code&gt;: Returns actual log content instead of URLs (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (required when using failed_only) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tail_lines&lt;/code&gt;: Number of lines to return from the end of the log (number, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run&lt;/strong&gt; - Get workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_logs&lt;/strong&gt; - Get workflow run logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_usage&lt;/strong&gt; - Get workflow usage&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_jobs&lt;/strong&gt; - List workflow jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filters jobs by their completed_at timestamp (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_run_artifacts&lt;/strong&gt; - List workflow artifacts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_runs&lt;/strong&gt; - List workflow runs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;actor&lt;/code&gt;: Returns someone&#39;s workflow runs. Use the login for the user who created the workflow run. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Returns workflow runs associated with a branch. Use the name of the branch. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Returns workflow runs for a specific event type (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Returns workflow runs with the check run status (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID or workflow file name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflows&lt;/strong&gt; - List workflows&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_failed_jobs&lt;/strong&gt; - Rerun failed jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_workflow_run&lt;/strong&gt; - Rerun workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;run_workflow&lt;/strong&gt; - Run workflow&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;inputs&lt;/code&gt;: Inputs the workflow accepts (object, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The git reference for the workflow. The reference can be a branch or tag name. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID (numeric) or workflow file name (e.g., main.yml, ci.yaml) (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Code Security&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_code_scanning_alert&lt;/strong&gt; - Get code scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_code_scanning_alerts&lt;/strong&gt; - List code scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The Git reference for the results you want to list. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter code scanning alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter code scanning alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tool_name&lt;/code&gt;: The name of the tool used for code scanning. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Context&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;get_me&lt;/strong&gt; - Get my user profile 
   &lt;ul&gt; 
    &lt;li&gt;No parameters required&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Dependabot&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_dependabot_alert&lt;/strong&gt; - Get dependabot alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_dependabot_alerts&lt;/strong&gt; - List dependabot alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter dependabot alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter dependabot alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Discussions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion&lt;/strong&gt; - Get discussion&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion_comments&lt;/strong&gt; - Get discussion comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page&#39;s PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussion_categories&lt;/strong&gt; - List discussion categories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussion categories will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussions&lt;/strong&gt; - List discussions&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page&#39;s PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;category&lt;/code&gt;: Optional filter by discussion category ID. If provided, only discussions with this category are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order discussions by field. If provided, the &#39;direction&#39; also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussions will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Gists&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_gist&lt;/strong&gt; - Create Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;public&lt;/code&gt;: Whether the gist is public (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_gists&lt;/strong&gt; - List Gists&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only gists updated after this time (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;username&lt;/code&gt;: GitHub username (omit for authenticated user&#39;s gists) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_gist&lt;/strong&gt; - Update Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Updated description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename to update or create (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;gist_id&lt;/code&gt;: ID of the gist to update (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Issues&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_issue_comment&lt;/strong&gt; - Add comment to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Comment content (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to comment on (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_sub_issue&lt;/strong&gt; - Add sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;replace_parent&lt;/code&gt;: When true, replaces the sub-issue&#39;s current parent issue (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to add. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;assign_copilot_to_issue&lt;/strong&gt; - Assign Copilot to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issueNumber&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_issue&lt;/strong&gt; - Open new issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: Usernames to assign to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Issue body content (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Labels to apply to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: Milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Issue title (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue&lt;/strong&gt; - Get issue details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue_comments&lt;/strong&gt; - Get issue comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issue_types&lt;/strong&gt; - List available issue types&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The organization owner of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issues&lt;/strong&gt; - List issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page&#39;s PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. If provided, the &#39;orderBy&#39; also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Filter by labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order issues by field. If provided, the &#39;direction&#39; also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Filter by date (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state, by default both open and closed issues are returned when not provided (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_sub_issues&lt;/strong&gt; - List sub-issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (default: 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;remove_sub_issue&lt;/strong&gt; - Remove sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to remove. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;reprioritize_sub_issue&lt;/strong&gt; - Reprioritize sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after_id&lt;/code&gt;: The ID of the sub-issue to be prioritized after (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;before_id&lt;/code&gt;: The ID of the sub-issue to be prioritized before (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to reprioritize. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_issues&lt;/strong&gt; - Search issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub issues search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_issue&lt;/strong&gt; - Edit issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: New assignees (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: New labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: New milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Notifications&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;dismiss_notification&lt;/strong&gt; - Dismiss notification&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: The new state of the notification (read/done) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;threadID&lt;/code&gt;: The ID of the notification thread (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_notification_details&lt;/strong&gt; - Get notification details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_notifications&lt;/strong&gt; - List notifications&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;before&lt;/code&gt;: Only show notifications updated before the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filter notifications to, use default unless specified. Read notifications are ones that have already been acknowledged by the user. Participating notifications are those that the user is directly involved in, such as issues or pull requests they have commented on or created. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only show notifications updated after the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_notification_subscription&lt;/strong&gt; - Manage notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification thread. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_repository_notification_subscription&lt;/strong&gt; - Manage repository notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the repository notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The account owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;mark_all_notifications_read&lt;/strong&gt; - Mark all notifications as read&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;lastReadAt&lt;/code&gt;: Describes the last point that notifications were checked (optional). Default: Now (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Organizations&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_orgs&lt;/strong&gt; - Search organizations 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Organization search query. Examples: &#39;microsoft&#39;, &#39;location:california&#39;, &#39;created:&amp;gt;=2025-01-01&#39;. Search is automatically scoped to type:org. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by category (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pull Requests&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_comment_to_pending_review&lt;/strong&gt; - Add review comment to the requester&#39;s latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;line&lt;/code&gt;: The line of the blob in the pull request diff that the comment applies to. For multi-line comments, the last line of the range (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The relative path to the file that necessitates a comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;side&lt;/code&gt;: The side of the diff to comment on. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startLine&lt;/code&gt;: For multi-line comments, the first line of the range that the comment applies to (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startSide&lt;/code&gt;: For multi-line comments, the starting side of the diff that the comment applies to. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;subjectType&lt;/code&gt;: The level at which the comment is targeted (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_and_submit_pull_request_review&lt;/strong&gt; - Create and submit a pull request review without comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Review comment text (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Review action to perform (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pending_pull_request_review&lt;/strong&gt; - Create pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pull_request&lt;/strong&gt; - Open new pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Branch to merge into (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: PR description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Create as draft PR (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Branch containing changes (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: PR title (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_pending_pull_request_review&lt;/strong&gt; - Delete the requester&#39;s latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request&lt;/strong&gt; - Get pull request details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_comments&lt;/strong&gt; - Get pull request comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_diff&lt;/strong&gt; - Get pull request diff&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_files&lt;/strong&gt; - Get pull request files&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_reviews&lt;/strong&gt; - Get pull request reviews&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_status&lt;/strong&gt; - Get pull request status checks&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_pull_requests&lt;/strong&gt; - List pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Filter by base branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Filter by head user/org and branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;merge_pull_request&lt;/strong&gt; - Merge pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;commit_message&lt;/code&gt;: Extra detail for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commit_title&lt;/code&gt;: Title for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;merge_method&lt;/code&gt;: Merge method (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;request_copilot_review&lt;/strong&gt; - Request Copilot review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_pull_requests&lt;/strong&gt; - Search pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub pull request search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;submit_pending_pull_request_review&lt;/strong&gt; - Submit the requester&#39;s latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: The event to perform (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request&lt;/strong&gt; - Edit pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: New base branch name (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Mark pull request as draft (true) or ready for review (false) (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;reviewers&lt;/code&gt;: GitHub usernames to request reviews from (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request_branch&lt;/strong&gt; - Update pull request branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;expectedHeadSha&lt;/code&gt;: The expected SHA of the pull request&#39;s HEAD ref (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Repositories&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_branch&lt;/strong&gt; - Create branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Name for new branch (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;from_branch&lt;/code&gt;: Source branch (defaults to repo default) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_or_update_file&lt;/strong&gt; - Create or update file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to create/update the file in (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content of the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path where to create/update the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Required if updating an existing file. The blob SHA of the file being replaced. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_repository&lt;/strong&gt; - Create repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;autoInit&lt;/code&gt;: Initialize with README (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Repository description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;private&lt;/code&gt;: Whether repo should be private (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_file&lt;/strong&gt; - Delete file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to delete the file from (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to the file to delete (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;fork_repository&lt;/strong&gt; - Fork repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;organization&lt;/code&gt;: Organization to fork to (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_commit&lt;/strong&gt; - Get commit details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch name, or tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_file_contents&lt;/strong&gt; - Get file or directory contents&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to file/directory (directories must end with a slash &#39;/&#39;) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Accepts optional git refs such as &lt;code&gt;refs/tags/{tag}&lt;/code&gt;, &lt;code&gt;refs/heads/{branch}&lt;/code&gt; or &lt;code&gt;refs/pull/{pr_number}/head&lt;/code&gt; (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Accepts optional commit SHA. If specified, it will be used instead of ref (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_latest_release&lt;/strong&gt; - Get latest release&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_tag&lt;/strong&gt; - Get tag details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_branches&lt;/strong&gt; - List branches&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_commits&lt;/strong&gt; - List commits&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;author&lt;/code&gt;: Author username or email address to filter commits by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch or tag name to list commits of. If not provided, uses the default branch of the repository. If a commit SHA is provided, will list commits up to that SHA. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_releases&lt;/strong&gt; - List releases&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_tags&lt;/strong&gt; - List tags&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;push_files&lt;/strong&gt; - Push files to repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to push to (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: Array of file objects to push, each object with path (string) and content (string) (object[], required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_code&lt;/strong&gt; - Search code&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order for results (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub&#39;s powerful code search syntax. Examples: &#39;content:Skill language:Java org:github&#39;, &#39;NOT is:archived language:Python OR language:go&#39;, &#39;repo:github/github-mcp-server&#39;. Supports exact matching, language filters, path filters, and more. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (&#39;indexed&#39; only) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_repositories&lt;/strong&gt; - Search repositories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Repository search query. Examples: &#39;machine learning in:name stars:&amp;gt;1000 language:python&#39;, &#39;topic:react&#39;, &#39;user:facebook&#39;. Supports advanced search syntax for precise filtering. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Secret Protection&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_secret_scanning_alert&lt;/strong&gt; - Get secret scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_secret_scanning_alerts&lt;/strong&gt; - List secret scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;resolution&lt;/code&gt;: Filter by resolution (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;secret_type&lt;/code&gt;: A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Users&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_users&lt;/strong&gt; - Search users 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: User search query. Examples: &#39;john smith&#39;, &#39;location:seattle&#39;, &#39;followers:&amp;gt;100&#39;. Search is automatically scoped to type:user. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort users by number of followers or repositories, or when the person joined GitHub. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!-- END AUTOMATED TOOLS --&gt; 
&lt;h3&gt;Additional Tools in Remote Github MCP Server&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Copilot coding agent&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;create_pull_request_with_copilot&lt;/strong&gt; - Perform task with GitHub Copilot coding agent 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner. You can guess the owner, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. You can guess the repository name, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;problem_statement&lt;/code&gt;: Detailed description of the task to be performed (e.g., &#39;Implement a feature that does X&#39;, &#39;Fix bug Y&#39;, etc.) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Title for the pull request that will be created (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;base_ref&lt;/code&gt;: Git reference (e.g., branch) that the agent will start its work from. If not specified, defaults to the repository&#39;s default branch (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h4&gt;Specifying Toolsets&lt;/h4&gt; 
&lt;p&gt;To specify toolsets you want available to the LLM, you can pass an allow-list in two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Command Line Argument&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;github-mcp-server --toolsets repos,issues,pull_requests,actions,code_security
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Environment Variable&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;GITHUB_TOOLSETS=&quot;repos,issues,pull_requests,actions,code_security&quot; ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The environment variable &lt;code&gt;GITHUB_TOOLSETS&lt;/code&gt; takes precedence over the command line argument if both are provided.&lt;/p&gt; 
&lt;h3&gt;Using Toolsets With Docker&lt;/h3&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_TOOLSETS=&quot;repos,issues,pull_requests,actions,code_security,experiments&quot; \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The &quot;all&quot; Toolset&lt;/h3&gt; 
&lt;p&gt;The special toolset &lt;code&gt;all&lt;/code&gt; can be provided to enable all available toolsets regardless of any other configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./github-mcp-server --toolsets all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;GITHUB_TOOLSETS=&quot;all&quot; ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dynamic Tool Discovery&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.&lt;/p&gt; 
&lt;p&gt;Instead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the sheer number of tools available.&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Tool Discovery&lt;/h3&gt; 
&lt;p&gt;When using the binary, you can pass the &lt;code&gt;--dynamic-toolsets&lt;/code&gt; flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./github-mcp-server --dynamic-toolsets
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_DYNAMIC_TOOLSETS=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Read-Only Mode&lt;/h2&gt; 
&lt;p&gt;To run the server in read-only mode, you can use the &lt;code&gt;--read-only&lt;/code&gt; flag. This will only offer read-only tools, preventing any modifications to repositories, issues, pull requests, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./github-mcp-server --read-only
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the read-only mode as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_READ_ONLY=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;GitHub Enterprise Server and Enterprise Cloud with data residency (ghe.com)&lt;/h2&gt; 
&lt;p&gt;The flag &lt;code&gt;--gh-host&lt;/code&gt; and the environment variable &lt;code&gt;GITHUB_HOST&lt;/code&gt; can be used to set the hostname for GitHub Enterprise Server or GitHub Enterprise Cloud with data residency.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For GitHub Enterprise Server, prefix the hostname with the &lt;code&gt;https://&lt;/code&gt; URI scheme, as it otherwise defaults to &lt;code&gt;http://&lt;/code&gt;, which GitHub Enterprise Server does not support.&lt;/li&gt; 
 &lt;li&gt;For GitHub Enterprise Cloud with data residency, use &lt;code&gt;https://YOURSUBDOMAIN.ghe.com&lt;/code&gt; as the hostname.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;github&quot;: {
    &quot;command&quot;: &quot;docker&quot;,
    &quot;args&quot;: [
    &quot;run&quot;,
    &quot;-i&quot;,
    &quot;--rm&quot;,
    &quot;-e&quot;,
    &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;,
    &quot;-e&quot;,
    &quot;GITHUB_HOST&quot;,
    &quot;ghcr.io/github/github-mcp-server&quot;
    ],
    &quot;env&quot;: {
        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;${input:github_token}&quot;,
        &quot;GITHUB_HOST&quot;: &quot;https://&amp;lt;your GHES or ghe.com domain name&amp;gt;&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;i18n / Overriding Descriptions&lt;/h2&gt; 
&lt;p&gt;The descriptions of the tools can be overridden by creating a &lt;code&gt;github-mcp-server-config.json&lt;/code&gt; file in the same directory as the binary.&lt;/p&gt; 
&lt;p&gt;The file should contain a JSON object with the tool names as keys and the new descriptions as values. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&quot;: &quot;an alternative description&quot;,
  &quot;TOOL_CREATE_BRANCH_DESCRIPTION&quot;: &quot;Create a new branch in a GitHub repository&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can create an export of the current translations by running the binary with the &lt;code&gt;--export-translations&lt;/code&gt; flag.&lt;/p&gt; 
&lt;p&gt;This flag will preserve any translations/overrides you have made, while adding any new translations that have been added to the binary since the last time you exported.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./github-mcp-server --export-translations
cat github-mcp-server-config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use ENV vars to override the descriptions. The environment variable names are the same as the keys in the JSON file, prefixed with &lt;code&gt;GITHUB_MCP_&lt;/code&gt; and all uppercase.&lt;/p&gt; 
&lt;p&gt;For example, to override the &lt;code&gt;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&lt;/code&gt; tool, you can set the following environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=&quot;an alternative description&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Library Usage&lt;/h2&gt; 
&lt;p&gt;The exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/github-mcp-server/main/LICENSE&quot;&gt;MIT&lt;/a&gt; for the full terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ollama/ollama</title>
      <link>https://github.com/ollama/ollama</link>
      <description>&lt;p&gt;Get up and running with OpenAI gpt-oss, DeepSeek-R1, Gemma 3 and other models.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt;
  &amp;nbsp; 
 &lt;a href=&quot;https://ollama.com&quot;&gt; &lt;img alt=&quot;ollama&quot; width=&quot;240&quot; src=&quot;https://github.com/ollama/ollama/assets/3325447/0d0b44e2-8f4a-4e99-9b52-a5c1c741c8f7&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Ollama&lt;/h1&gt; 
&lt;p&gt;Get up and running with large language models.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://ollama.com/download/Ollama.dmg&quot;&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://ollama.com/download/OllamaSetup.exe&quot;&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -fsSL https://ollama.com/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ollama/ollama/raw/main/docs/linux.md&quot;&gt;Manual install instructions&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;The official &lt;a href=&quot;https://hub.docker.com/r/ollama/ollama&quot;&gt;Ollama Docker image&lt;/a&gt; &lt;code&gt;ollama/ollama&lt;/code&gt; is available on Docker Hub.&lt;/p&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ollama/ollama-python&quot;&gt;ollama-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ollama/ollama-js&quot;&gt;ollama-js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/ollama&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reddit.com/r/ollama&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To run and chat with &lt;a href=&quot;https://ollama.com/library/gemma3&quot;&gt;Gemma 3&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama run gemma3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Model library&lt;/h2&gt; 
&lt;p&gt;Ollama supports a list of models available on &lt;a href=&quot;https://ollama.com/library&quot; title=&quot;ollama model library&quot;&gt;ollama.com/library&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Here are some example models that can be downloaded:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Parameters&lt;/th&gt; 
   &lt;th&gt;Size&lt;/th&gt; 
   &lt;th&gt;Download&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;815MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;4B&lt;/td&gt; 
   &lt;td&gt;3.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;12B&lt;/td&gt; 
   &lt;td&gt;8.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:12b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;27B&lt;/td&gt; 
   &lt;td&gt;17GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:27b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;QwQ&lt;/td&gt; 
   &lt;td&gt;32B&lt;/td&gt; 
   &lt;td&gt;20GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run qwq&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;671B&lt;/td&gt; 
   &lt;td&gt;404GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1:671b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;109B&lt;/td&gt; 
   &lt;td&gt;67GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:scout&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;400B&lt;/td&gt; 
   &lt;td&gt;245GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:maverick&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.3&lt;/td&gt; 
   &lt;td&gt;70B&lt;/td&gt; 
   &lt;td&gt;43GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;3B&lt;/td&gt; 
   &lt;td&gt;2.0GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;1.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;11B&lt;/td&gt; 
   &lt;td&gt;7.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;90B&lt;/td&gt; 
   &lt;td&gt;55GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision:90b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;405B&lt;/td&gt; 
   &lt;td&gt;231GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1:405b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4&lt;/td&gt; 
   &lt;td&gt;14B&lt;/td&gt; 
   &lt;td&gt;9.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4 Mini&lt;/td&gt; 
   &lt;td&gt;3.8B&lt;/td&gt; 
   &lt;td&gt;2.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4-mini&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mistral&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run mistral&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Moondream 2&lt;/td&gt; 
   &lt;td&gt;1.4B&lt;/td&gt; 
   &lt;td&gt;829MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run moondream&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Neural Chat&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run neural-chat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Starling&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run starling-lm&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Code Llama&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run codellama&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 2 Uncensored&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama2-uncensored&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LLaVA&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llava&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Granite-3.3&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run granite3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You should have at least 8 GB of RAM available to run the 7B models, 16 GB to run the 13B models, and 32 GB to run the 33B models.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Customize a model&lt;/h2&gt; 
&lt;h3&gt;Import from GGUF&lt;/h3&gt; 
&lt;p&gt;Ollama supports importing GGUF models in the Modelfile:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;Modelfile&lt;/code&gt;, with a &lt;code&gt;FROM&lt;/code&gt; instruction with the local filepath to the model you want to import.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;FROM ./vicuna-33b.Q4_0.gguf
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create the model in Ollama&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama create example -f Modelfile
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the model&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama run example
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Import from Safetensors&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/ollama/ollama/main/docs/import.md&quot;&gt;guide&lt;/a&gt; on importing models for more information.&lt;/p&gt; 
&lt;h3&gt;Customize a prompt&lt;/h3&gt; 
&lt;p&gt;Models from the Ollama library can be customized with a prompt. For example, to customize the &lt;code&gt;llama3.2&lt;/code&gt; model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a &lt;code&gt;Modelfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM llama3.2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system message
SYSTEM &quot;&quot;&quot;
You are Mario from Super Mario Bros. Answer as Mario, the assistant, only.
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, create and run the model:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ollama create mario -f ./Modelfile
ollama run mario
&amp;gt;&amp;gt;&amp;gt; hi
Hello! It&#39;s your friend Mario.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on working with a Modelfile, see the &lt;a href=&quot;https://raw.githubusercontent.com/ollama/ollama/main/docs/modelfile.md&quot;&gt;Modelfile&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;CLI Reference&lt;/h2&gt; 
&lt;h3&gt;Create a model&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama create&lt;/code&gt; is used to create a model from a Modelfile.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama create mymodel -f ./Modelfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pull a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This command can also be used to update a local model. Only the diff will be pulled.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Remove a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama rm llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Copy a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama cp llama3.2 my-model
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multiline input&lt;/h3&gt; 
&lt;p&gt;For multiline input, you can wrap text with &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &quot;&quot;&quot;Hello,
... world!
... &quot;&quot;&quot;
I&#39;m a basic program that prints the famous &quot;Hello, world!&quot; message to the console.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multimodal models&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ollama run llava &quot;What&#39;s in this image? /Users/jmorgan/Desktop/smile.png&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: The image features a yellow smiley face, which is likely the central focus of the picture.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Pass the prompt as an argument&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama run llama3.2 &quot;Summarize this file: $(cat README.md)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: Ollama is a lightweight, extensible framework for building and running language models on the local machine. It provides a simple API for creating, running, and managing models, as well as a library of pre-built models that can be easily used in a variety of applications.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Show model information&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama show llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List models on your computer&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List which models are currently loaded&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama ps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stop a model which is currently running&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ollama stop llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start Ollama&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama serve&lt;/code&gt; is used when you want to start ollama without running the desktop application.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/ollama/ollama/raw/main/docs/development.md&quot;&gt;developer guide&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Running local builds&lt;/h3&gt; 
&lt;p&gt;Next, start the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./ollama serve
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, in a separate shell, run a model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./ollama run llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;REST API&lt;/h2&gt; 
&lt;p&gt;Ollama has a REST API for running and managing models.&lt;/p&gt; 
&lt;h3&gt;Generate a response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl http://localhost:11434/api/generate -d &#39;{
  &quot;model&quot;: &quot;llama3.2&quot;,
  &quot;prompt&quot;:&quot;Why is the sky blue?&quot;
}&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chat with a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl http://localhost:11434/api/chat -d &#39;{
  &quot;model&quot;: &quot;llama3.2&quot;,
  &quot;messages&quot;: [
    { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;why is the sky blue?&quot; }
  ]
}&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/ollama/ollama/main/docs/api.md&quot;&gt;API documentation&lt;/a&gt; for all endpoints.&lt;/p&gt; 
&lt;h2&gt;Community Integrations&lt;/h2&gt; 
&lt;h3&gt;Web &amp;amp; Desktop&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/open-webui/open-webui&quot;&gt;Open WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aws-samples/swift-chat&quot;&gt;SwiftChat (macOS with ReactNative)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AugustDev/enchanted&quot;&gt;Enchanted (macOS native)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fmaclen/hollama&quot;&gt;Hollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ParisNeo/lollms-webui&quot;&gt;Lollms-Webui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danny-avila/LibreChat&quot;&gt;LibreChat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bionic-gpt/bionic-gpt&quot;&gt;Bionic GPT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rtcfirefly/ollama-ui&quot;&gt;HTML UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jikkuatwork/saddle&quot;&gt;Saddle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.tagspaces.org&quot;&gt;TagSpaces&lt;/a&gt; (A platform for file-based apps, &lt;a href=&quot;https://docs.tagspaces.org/ai/&quot;&gt;utilizing Ollama&lt;/a&gt; for the generation of tags and descriptions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ivanfioravanti/chatbot-ollama&quot;&gt;Chatbot UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mckaywrigley/chatbot-ui&quot;&gt;Chatbot UI v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ollama-interface/Ollama-Gui?tab=readme-ov-file&quot;&gt;Typescript UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/richawo/minimal-llm-ui&quot;&gt;Minimalistic React UI for Ollama Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhermawan/Ollamac&quot;&gt;Ollamac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/enricoros/big-AGI&quot;&gt;big-AGI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cheshire-cat-ai/core&quot;&gt;Cheshire Cat assistant framework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/semperai/amica&quot;&gt;Amica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BruceMacD/chatd&quot;&gt;chatd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kghandour/Ollama-SwiftUI&quot;&gt;Ollama-SwiftUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/langgenius/dify&quot;&gt;Dify.AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mindmac.app&quot;&gt;MindMac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakobhoeg/nextjs-ollama-llm-ui&quot;&gt;NextJS Web Interface for Ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://msty.app&quot;&gt;Msty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bin-Huang/Chatbox&quot;&gt;Chatbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tgraupmann/WinForm_Ollama_Copilot&quot;&gt;WinForm Ollama Copilot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web&quot;&gt;NextChat&lt;/a&gt; with &lt;a href=&quot;https://docs.nextchat.dev/models/ollama&quot;&gt;Get Started Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mmo80/alpaca-webui&quot;&gt;Alpaca WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/enoch1118/ollamaGUI&quot;&gt;OllamaGUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/InternLM/OpenAOE&quot;&gt;OpenAOE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/leonid20000/OdinRunes&quot;&gt;Odin Runes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrdjohnson/llm-x&quot;&gt;LLM-X&lt;/a&gt; (Progressive Web App)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Mintplex-Labs/anything-llm&quot;&gt;AnythingLLM (Docker + MacOs/Windows/Linux native app)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/ollama_basic_chat&quot;&gt;Ollama Basic Chat: Uses HyperDiv Reactive UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/drazdra/ollama-chats&quot;&gt;Ollama-chats RPG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://intellibar.app/&quot;&gt;IntelliBar&lt;/a&gt; (AI-powered assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AliAhmedNada/jirapt&quot;&gt;Jirapt&lt;/a&gt; (Jira Integration to generate issues, tasks, epics)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AliAhmedNada/ojira&quot;&gt;ojira&lt;/a&gt; (Jira chrome plugin to easily generate descriptions for tasks)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reid41/QA-Pilot&quot;&gt;QA-Pilot&lt;/a&gt; (Interactive chat tool that can leverage Ollama models for rapid understanding and navigation of GitHub code repositories)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sugarforever/chat-ollama&quot;&gt;ChatOllama&lt;/a&gt; (Open Source Chatbot based on Ollama with Knowledge Bases)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Nagi-ovo/CRAG-Ollama-Chat&quot;&gt;CRAG Ollama Chat&lt;/a&gt; (Simple Web Search with Corrective RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/infiniflow/ragflow&quot;&gt;RAGFlow&lt;/a&gt; (Open-source Retrieval-Augmented Generation engine based on deep document understanding)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/StreamDeploy-DevRel/streamdeploy-llm-app-scaffold&quot;&gt;StreamDeploy&lt;/a&gt; (LLM Application Scaffold)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swuecho/chat&quot;&gt;chat&lt;/a&gt; (chat web app for teams)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lobehub/lobe-chat&quot;&gt;Lobe Chat&lt;/a&gt; with &lt;a href=&quot;https://lobehub.com/docs/self-hosting/examples/ollama&quot;&gt;Integrating Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/datvodinh/rag-chatbot.git&quot;&gt;Ollama RAG Chatbot&lt;/a&gt; (Local Chat with multiple PDFs using Ollama and RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nurgo-software.com/products/brainsoup&quot;&gt;BrainSoup&lt;/a&gt; (Flexible native client with RAG &amp;amp; multi-agent automation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Renset/macai&quot;&gt;macai&lt;/a&gt; (macOS client for Ollama, ChatGPT, and other compatible API back-ends)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/josStorer/RWKV-Runner&quot;&gt;RWKV-Runner&lt;/a&gt; (RWKV offline LLM deployment tool, also usable as a client for ChatGPT and Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dezoito/ollama-grid-search&quot;&gt;Ollama Grid Search&lt;/a&gt; (app to evaluate and compare models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Otacon/olpaka&quot;&gt;Olpaka&lt;/a&gt; (User-friendly Flutter Web App for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://casibase.org&quot;&gt;Casibase&lt;/a&gt; (An open source AI knowledge base and dialogue system combining the latest RAG, SSO, ollama support, and multiple large language models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CrazyNeil/OllamaSpring&quot;&gt;OllamaSpring&lt;/a&gt; (Ollama Client for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kartikm7/llocal&quot;&gt;LLocal.in&lt;/a&gt; (Easy to use Electron Desktop Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dcSpark/shinkai-apps&quot;&gt;Shinkai Desktop&lt;/a&gt; (Two click install Local AI using Ollama + Files + RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zeyoyt/ailama&quot;&gt;AiLama&lt;/a&gt; (A Discord User App that allows you to interact with Ollama anywhere in Discord)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/ollama_mesop/&quot;&gt;Ollama with Google Mesop&lt;/a&gt; (Mesop Chat Client implementation with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SciPhi-AI/R2R&quot;&gt;R2R&lt;/a&gt; (Open-source RAG engine)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elearningshow/ollama-kis&quot;&gt;Ollama-Kis&lt;/a&gt; (A simple easy-to-use GUI with sample custom LLM for Drivers Education)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opengpa.org&quot;&gt;OpenGPA&lt;/a&gt; (Open-source offline-first Enterprise Agentic Application)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mateuszmigas/painting-droid&quot;&gt;Painting Droid&lt;/a&gt; (Painting app with AI integrations)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.kerlig.com/&quot;&gt;Kerlig AI&lt;/a&gt; (AI writing assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MindWorkAI/AI-Studio&quot;&gt;AI Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gyopak/sidellama&quot;&gt;Sidellama&lt;/a&gt; (browser-based LLM client)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/trypromptly/LLMStack&quot;&gt;LLMStack&lt;/a&gt; (No-code multi-agent framework to build LLM agents and workflows)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://boltai.com&quot;&gt;BoltAI for Mac&lt;/a&gt; (AI Chat Client for Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/av/harbor&quot;&gt;Harbor&lt;/a&gt; (Containerized LLM Toolkit with Ollama as default backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/szczyglis-dev/py-gpt&quot;&gt;PyGPT&lt;/a&gt; (AI desktop assistant for Linux, Windows, and Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Jeffser/Alpaca&quot;&gt;Alpaca&lt;/a&gt; (An Ollama client application for Linux and macOS made with GTK4 and Adwaita)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Significant-Gravitas/AutoGPT/raw/master/docs/content/platform/ollama.md&quot;&gt;AutoGPT&lt;/a&gt; (AutoGPT Ollama integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.jonathanhecl.com/go-crew/&quot;&gt;Go-CREW&lt;/a&gt; (Powerful Offline RAG in Golang)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openvmp/partcad/&quot;&gt;PartCAD&lt;/a&gt; (CAD model generation with OpenSCAD and CadQuery)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ollama4j/ollama4j-web-ui&quot;&gt;Ollama4j Web UI&lt;/a&gt; - Java-based Web UI for Ollama built with Vaadin, Spring Boot, and Ollama4j&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kspviswa/pyOllaMx&quot;&gt;PyOllaMx&lt;/a&gt; - macOS application capable of chatting with both Ollama and Apple MLX models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cline/cline&quot;&gt;Cline&lt;/a&gt; - Formerly known as Claude Dev is a VSCode extension for multi-file/whole-repo coding&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kangfenmao/cherry-studio&quot;&gt;Cherry Studio&lt;/a&gt; (Desktop client with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/1runeberg/confichat&quot;&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nickthecook/archyve&quot;&gt;Archyve&lt;/a&gt; (RAG-enabling document library)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/ollama-crew-mesop&quot;&gt;crewAI with Mesop&lt;/a&gt; (Mesop Web Interface to run crewAI with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chyok/ollama-gui&quot;&gt;Tkinter-based client&lt;/a&gt; (Python tkinter-based Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/trendy-design/llmchat&quot;&gt;LLMChat&lt;/a&gt; (Privacy focused, 100% local, intuitive all-in-one chat interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Leon-Sander/Local-Multimodal-AI-Chat&quot;&gt;Local Multimodal AI Chat&lt;/a&gt; (Ollama-based LLM Chat with support for multiple features, including PDF RAG, voice chat, image-based interactions, and integration with OpenAI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xark-argo/argo&quot;&gt;ARGO&lt;/a&gt; (Locally download and run Ollama and Huggingface models with RAG and deep research on Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EliasPereirah/OrionChat&quot;&gt;OrionChat&lt;/a&gt; - OrionChat is a web interface for chatting with different AI providers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bklieger-groq/g1&quot;&gt;G1&lt;/a&gt; (Prototype of using prompting strategies to improve the LLM&#39;s reasoning through o1-like reasoning chains.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lemonit-eric-mao/ollama-web-management&quot;&gt;Web management&lt;/a&gt; (Web management page)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/promptery/promptery&quot;&gt;Promptery&lt;/a&gt; (desktop client for Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JHubi1/ollama-app&quot;&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/annilq/chat-ollama&quot;&gt;chat-ollama&lt;/a&gt; (a React Native client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tcsenpai/spacellama&quot;&gt;SpaceLlama&lt;/a&gt; (Firefox and Chrome extension to quickly summarize web pages with ollama in a sidebar)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tcsenpai/youlama&quot;&gt;YouLama&lt;/a&gt; (Webapp to quickly summarize any YouTube video, supporting Invidious as well)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tcsenpai/dualmind&quot;&gt;DualMind&lt;/a&gt; (Experimental app allowing two models to talk to each other in the terminal or in a web interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/h1ddenpr0cess20/ollamarama-matrix&quot;&gt;ollamarama-matrix&lt;/a&gt; (Ollama chatbot for the Matrix chat protocol)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anan1213095357/ollama-chat-app&quot;&gt;ollama-chat-app&lt;/a&gt; (Flutter-based chat app)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.perfectmemory.ai/&quot;&gt;Perfect Memory AI&lt;/a&gt; (Productivity AI assists personalized by what you have seen on your screen, heard, and said in the meetings)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hexastack/hexabot&quot;&gt;Hexabot&lt;/a&gt; (A conversational AI builder)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/reddit_analyzer&quot;&gt;Reddit Rate&lt;/a&gt; (Search and Rate Reddit topics with a weighted summation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adarshM84/OpenTalkGpt&quot;&gt;OpenTalkGpt&lt;/a&gt; (Chrome Extension to manage open-source models supported by Ollama, create custom models, and chat with models from a user-friendly UI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vinhnx/vt.ai&quot;&gt;VT&lt;/a&gt; (A minimal multimodal AI chat app, with dynamic conversation routing. Supports local models via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nosia-ai/nosia&quot;&gt;Nosia&lt;/a&gt; (Easy to install and use RAG platform based on Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nbonamy/witsy&quot;&gt;Witsy&lt;/a&gt; (An AI Desktop application available for Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/US-Artificial-Intelligence/abbey&quot;&gt;Abbey&lt;/a&gt; (A configurable AI interface server with notebooks, document storage, and YouTube support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dmayboroda/minima&quot;&gt;Minima&lt;/a&gt; (RAG with on-premises or fully local workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AidfulAI/aidful-ollama-model-delete&quot;&gt;aidful-ollama-model-delete&lt;/a&gt; (User interface for simplified model cleanup)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ItzCrazyKns/Perplexica&quot;&gt;Perplexica&lt;/a&gt; (An AI-powered search engine &amp;amp; an open-source alternative to Perplexity AI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oslook/ollama-webui&quot;&gt;Ollama Chat WebUI for Docker &lt;/a&gt; (Support for local docker deployment, lightweight ollama webui)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://aka.ms/ai-tooklit/ollama-docs&quot;&gt;AI Toolkit for Visual Studio Code&lt;/a&gt; (Microsoft-official VSCode extension to chat, test, evaluate models with Ollama support, and use them in your AI applications.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anilkay/MinimalNextOllamaChat&quot;&gt;MinimalNextOllamaChat&lt;/a&gt; (Minimal Web UI for Chat and Model Control)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TilmanGriesel/chipper&quot;&gt;Chipper&lt;/a&gt; AI interface for tinkerers (Ollama, Haystack RAG, Python)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CosmicEventHorizon/ChibiChat&quot;&gt;ChibiChat&lt;/a&gt; (Kotlin-based Android app to chat with Ollama and Koboldcpp API endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qusaismael/localllm&quot;&gt;LocalLLM&lt;/a&gt; (Minimal Web-App to run ollama models on it with a GUI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/buiducnhat/ollamazing&quot;&gt;Ollamazing&lt;/a&gt; (Web extension to run Ollama models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/benhaotang/OpenDeepResearcher-via-searxng&quot;&gt;OpenDeepResearcher-via-searxng&lt;/a&gt; (A Deep Research equivalent endpoint with Ollama support for running locally)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AIDotNet/AntSK&quot;&gt;AntSK&lt;/a&gt; (Out-of-the-box &amp;amp; Adaptable RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/1Panel-dev/MaxKB/&quot;&gt;MaxKB&lt;/a&gt; (Ready-to-use &amp;amp; flexible RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danielekp/yla&quot;&gt;yla&lt;/a&gt; (Web interface to freely interact with your customized models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RockChinQ/LangBot&quot;&gt;LangBot&lt;/a&gt; (LLM-based instant messaging bots platform, with Agents, RAG features, supports multiple platforms)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/1Panel-dev/1Panel/&quot;&gt;1Panel&lt;/a&gt; (Web-based Linux Server Management Tool)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Soulter/AstrBot/&quot;&gt;AstrBot&lt;/a&gt; (User-friendly LLM-based multi-platform chatbot with a WebUI, supporting RAG, LLM agents, and plugins integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibrahimcetin/reins&quot;&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Aharon-Bensadoun/Flufy&quot;&gt;Flufy&lt;/a&gt; (A beautiful chat interface for interacting with Ollama&#39;s API. Built with React, TypeScript, and Material-UI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zeozeozeo/ellama&quot;&gt;Ellama&lt;/a&gt; (Friendly native app to chat with an Ollama instance)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mediar-ai/screenpipe&quot;&gt;screenpipe&lt;/a&gt; Build agents powered by your screen history&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hengkysteen/ollamb&quot;&gt;Ollamb&lt;/a&gt; (Simple yet rich in features, cross-platform built with Flutter and designed for Ollama. Try the &lt;a href=&quot;https://hengkysteen.github.io/demo/ollamb/&quot;&gt;web demo&lt;/a&gt;.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Writeopia/Writeopia&quot;&gt;Writeopia&lt;/a&gt; (Text editor with integration with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AppFlowy-IO/AppFlowy&quot;&gt;AppFlowy&lt;/a&gt; (AI collaborative workspace with Ollama, cross-platform and self-hostable)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cushydigit/lumina.git&quot;&gt;Lumina&lt;/a&gt; (A lightweight, minimal React.js frontend for interacting with Ollama servers)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/tiny-notepad&quot;&gt;Tiny Notepad&lt;/a&gt; (A lightweight, notepad-like interface to chat with ollama available on PyPI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellotunamayo/macLlama&quot;&gt;macLlama (macOS native)&lt;/a&gt; (A native macOS GUI application for interacting with Ollama models, featuring a chat interface.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/philberndt/GPTranslate&quot;&gt;GPTranslate&lt;/a&gt; (A fast and lightweight, AI powered desktop translation application written with Rust and Tauri. Features real-time translation with OpenAI/Azure/Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NGC13009/ollama-launcher&quot;&gt;ollama launcher&lt;/a&gt; (A launcher for Ollama, aiming to provide users with convenient functions such as ollama server launching, management, or configuration.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Aj-Seven/ai-hub&quot;&gt;ai-hub&lt;/a&gt; (AI Hub supports multiple models via API keys and Chat support via Ollama API.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/mayan-edms/mayan-edms&quot;&gt;Mayan EDMS&lt;/a&gt; (Open source document management system to organize, tag, search, and automate your files with powerful Ollama driven workflows.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/run/docs/tutorials/gpu-gemma2-with-ollama&quot;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fly.io/docs/python/do-more/add-ollama/&quot;&gt;Fly.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.koyeb.com/deploy/ollama&quot;&gt;Koyeb&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Terminal&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggozad/oterm&quot;&gt;oterm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/s-kostyaev/ellama&quot;&gt;Ellama Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zweifisch/ollama&quot;&gt;Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paradoxical-dev/neollama&quot;&gt;neollama&lt;/a&gt; UI client for interacting with models from within Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/David-Kunz/gen.nvim&quot;&gt;gen.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nomnivore/ollama.nvim&quot;&gt;ollama.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marco-souza/ollero.nvim&quot;&gt;ollero.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gerazov/ollama-chat.nvim&quot;&gt;ollama-chat.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/huynle/ogpt.nvim&quot;&gt;ogpt.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/karthink/gptel&quot;&gt;gptel Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dustinblackman/oatmeal&quot;&gt;Oatmeal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pgibler/cmdh&quot;&gt;cmdh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/npahlfer/ooo&quot;&gt;ooo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reid41/shell-pilot&quot;&gt;shell-pilot&lt;/a&gt;(Interact with models via pure shell scripts on Linux or macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pythops/tenere&quot;&gt;tenere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/taketwo/llm-ollama&quot;&gt;llm-ollama&lt;/a&gt; for &lt;a href=&quot;https://llm.datasette.io/en/stable/&quot;&gt;Datasette&#39;s LLM CLI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anaisbetts/typechat-cli&quot;&gt;typechat-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/djcopley/ShellOracle&quot;&gt;ShellOracle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yusufcanb/tlm&quot;&gt;tlm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ericcurtin/podman-ollama&quot;&gt;podman-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sammcj/gollama&quot;&gt;gollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paulrobello/parllama&quot;&gt;ParLlama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cognitivetech/ollama-ebook-summary/&quot;&gt;Ollama eBook Summary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/ollama_moe&quot;&gt;Ollama Mixture of Experts (MOE) in 50 lines of code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pepo-ec/vim-intelligence-bridge&quot;&gt;vim-intelligence-bridge&lt;/a&gt; Simple interaction of &quot;Ollama&quot; with the Vim editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://x-cmd.com/mod/ollama&quot;&gt;x-cmd ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/drunkwcodes/bb7&quot;&gt;bb7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcusziade/Swollama&quot;&gt;SwollamaCLI&lt;/a&gt; bundled with the Swollama Swift package. &lt;a href=&quot;https://github.com/marcusziade/Swollama?tab=readme-ov-file#cli-usage&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sigoden/aichat&quot;&gt;aichat&lt;/a&gt; All-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI tools &amp;amp; agents, with access to OpenAI, Claude, Gemini, Ollama, Groq, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rrg92/powershai&quot;&gt;PowershAI&lt;/a&gt; PowerShell module that brings AI to terminal on Windows, including support for Ollama&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Abyss-c0re/deepshell&quot;&gt;DeepShell&lt;/a&gt; Your self-hosted AI assistant. Interactive Shell, Files and Folders analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xyproto/orbiton&quot;&gt;orbiton&lt;/a&gt; Configuration-free text editor and IDE with support for tab completion with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/molbal/orca-cli&quot;&gt;orca-cli&lt;/a&gt; Ollama Registry CLI Application - Browse, pull, and download models from Ollama Registry in your terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonathanhecl/gguf-to-ollama&quot;&gt;GGUF-to-Ollama&lt;/a&gt; - Importing GGUF to Ollama made easy (multiplatform)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapidarchitect/ollama_strands&quot;&gt;AWS-Strands-With-Ollama&lt;/a&gt; - AWS Strands Agents with Ollama Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/attogram/ollama-multirun&quot;&gt;ollama-multirun&lt;/a&gt; - A bash shell script to run a single prompt against any or all of your locally installed ollama models, saving the output and performance statistics as easily navigable web pages. (&lt;a href=&quot;https://attogram.github.io/ai_test_zone/&quot;&gt;Demo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/attogram/ollama-bash-toolshed&quot;&gt;ollama-bash-toolshed&lt;/a&gt; - Bash scripts to chat with tool using models. Add new tools to your shed with ease. Runs on Ollama.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Apple Vision Pro&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aws-samples/swift-chat&quot;&gt;SwiftChat&lt;/a&gt; (Cross-platform AI chat app supporting Apple Vision Pro via &quot;Designed for iPad&quot;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AugustDev/enchanted&quot;&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/timescale/pgai&quot;&gt;pgai&lt;/a&gt; - PostgreSQL as a vector database (Create and search embeddings from Ollama models using pgvector) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/timescale/pgai/raw/main/docs/vectorizer-quick-start.md&quot;&gt;Get started guide&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mindsdb/mindsdb/raw/staging/mindsdb/integrations/handlers/ollama_handler/README.md&quot;&gt;MindsDB&lt;/a&gt; (Connects Ollama models with nearly 200 data platforms and apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/philippgille/chromem-go/raw/v0.5.0/embed_ollama.go&quot;&gt;chromem-go&lt;/a&gt; with &lt;a href=&quot;https://github.com/philippgille/chromem-go/tree/v0.5.0/examples/rag-wikipedia-ollama&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dbkangaroo/kangaroo&quot;&gt;Kangaroo&lt;/a&gt; (AI-powered SQL client and admin tool for popular databases)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package managers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://archlinux.org/packages/extra/x86_64/ollama/&quot;&gt;Pacman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gentoo/guru/tree/master/app-misc/ollama&quot;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://formulae.brew.sh/formula/ollama&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://artifacthub.io/packages/helm/ollama-helm/ollama&quot;&gt;Helm Chart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeberg.org/tusharhero/ollama-guix&quot;&gt;Guix channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://search.nixos.org/packages?show=ollama&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=ollama&quot;&gt;Nix package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://flox.dev/blog/ollama-part-one&quot;&gt;Flox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://python.langchain.com/docs/integrations/chat/ollama/&quot;&gt;LangChain&lt;/a&gt; and &lt;a href=&quot;https://js.langchain.com/docs/integrations/chat/ollama/&quot;&gt;LangChain.js&lt;/a&gt; with &lt;a href=&quot;https://js.langchain.com/docs/tutorials/local_rag/&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/genkit/plugins/ollama&quot;&gt;Firebase Genkit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/crewAIInc/crewAI&quot;&gt;crewAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://remembersoftwares.github.io/yacana/&quot;&gt;Yacana&lt;/a&gt; (User-friendly multi-agent framework for brainstorming and executing predetermined flows with built-in tool integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-ai&quot;&gt;Spring AI&lt;/a&gt; with &lt;a href=&quot;https://docs.spring.io/spring-ai/reference/api/chat/ollama-chat.html&quot;&gt;reference&lt;/a&gt; and &lt;a href=&quot;https://github.com/tzolov/ollama-tools&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tmc/langchaingo/&quot;&gt;LangChainGo&lt;/a&gt; with &lt;a href=&quot;https://github.com/tmc/langchaingo/tree/main/examples/ollama-completion-example&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/langchain4j/langchain4j&quot;&gt;LangChain4j&lt;/a&gt; with &lt;a href=&quot;https://github.com/langchain4j/langchain4j-examples/tree/main/ollama-examples/src/main/java&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Abraxas-365/langchain-rust&quot;&gt;LangChainRust&lt;/a&gt; with &lt;a href=&quot;https://github.com/Abraxas-365/langchain-rust/raw/main/examples/llm_ollama.rs&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tryAGI/LangChain&quot;&gt;LangChain for .NET&lt;/a&gt; with &lt;a href=&quot;https://github.com/tryAGI/LangChain/raw/main/examples/LangChain.Samples.OpenAI/Program.cs&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/theodo-group/LLPhant?tab=readme-ov-file#ollama&quot;&gt;LLPhant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.llamaindex.ai/en/stable/examples/llm/ollama/&quot;&gt;LlamaIndex&lt;/a&gt; and &lt;a href=&quot;https://ts.llamaindex.ai/modules/llms/available_llms/ollama&quot;&gt;LlamaIndexTS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BerriAI/litellm&quot;&gt;LiteLLM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/presbrey/ollamafarm&quot;&gt;OllamaFarm for Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/awaescher/OllamaSharp&quot;&gt;OllamaSharp for .NET&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gbaptista/ollama-ai&quot;&gt;Ollama for Ruby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pepperoni21/ollama-rs&quot;&gt;Ollama-rs for Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jmont-dev/ollama-hpp&quot;&gt;Ollama-hpp for C++&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ollama4j/ollama4j&quot;&gt;Ollama4j for Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://modelfusion.dev/integration/model-provider/ollama&quot;&gt;ModelFusion Typescript Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhermawan/OllamaKit&quot;&gt;OllamaKit for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/breitburg/dart-ollama&quot;&gt;Ollama for Dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cloudstudio/ollama-laravel&quot;&gt;Ollama for Laravel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/davidmigloz/langchain_dart&quot;&gt;LangChainDart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/semantic-kernel/tree/main/python/semantic_kernel/connectors/ai/ollama&quot;&gt;Semantic Kernel - Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/deepset-ai/haystack-integrations/raw/main/integrations/ollama.md&quot;&gt;Haystack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brainlid/langchain&quot;&gt;Elixir LangChain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JBGruber/rollama&quot;&gt;Ollama for R - rollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hauselin/ollama-r&quot;&gt;Ollama for R - ollama-r&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lebrunel/ollama-ex&quot;&gt;Ollama-ex for Elixir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/b-tocs/abap_btocs_ollama&quot;&gt;Ollama Connector for SAP ABAP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testcontainers.com/modules/ollama/&quot;&gt;Testcontainers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portkey.ai/docs/welcome/integration-guides/ollama&quot;&gt;Portkey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/svilupp/PromptingTools.jl&quot;&gt;PromptingTools.jl&lt;/a&gt; with an &lt;a href=&quot;https://svilupp.github.io/PromptingTools.jl/dev/examples/working_with_ollama&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Project-Llama/llamascript&quot;&gt;LlamaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emirsahin1/llm-axe&quot;&gt;llm-axe&lt;/a&gt; (Python Toolkit for Building LLM Powered Apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.gollm.co/examples/ollama-example&quot;&gt;Gollm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonathanhecl/gollama&quot;&gt;Gollama for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xyproto/ollamaclient&quot;&gt;Ollamaclient for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/tozd/go/fun&quot;&gt;High-level function abstraction in Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ArdaGnsrn/ollama-php&quot;&gt;Ollama PHP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/agents-flex/agents-flex&quot;&gt;Agents-Flex for Java&lt;/a&gt; with &lt;a href=&quot;https://github.com/agents-flex/agents-flex/tree/main/agents-flex-llm/agents-flex-llm-ollama/src/test/java/com/agentsflex/llm/ollama&quot;&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/parakeet-nest/parakeet&quot;&gt;Parakeet&lt;/a&gt; is a GoLang library, made to simplify the development of small generative AI applications with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andygill/haverscript&quot;&gt;Haverscript&lt;/a&gt; with &lt;a href=&quot;https://github.com/andygill/haverscript/tree/main/examples&quot;&gt;examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattt/ollama-swift&quot;&gt;Ollama for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcusziade/Swollama&quot;&gt;Swollama for Swift&lt;/a&gt; with &lt;a href=&quot;https://marcusziade.github.io/Swollama/documentation/swollama/&quot;&gt;DocC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/prasad89/golamify&quot;&gt;GoLamify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tusharad/ollama-haskell&quot;&gt;Ollama for Haskell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nbonamy/multi-llm-ts&quot;&gt;multi-llm-ts&lt;/a&gt; (A Typescript/JavaScript library allowing access to different LLM in a unified API)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lofcz/llmtornado&quot;&gt;LlmTornado&lt;/a&gt; (C# library providing a unified interface for major FOSS &amp;amp; Commercial inference APIs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dravenk/ollama-zig&quot;&gt;Ollama for Zig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lunary-ai/abso&quot;&gt;Abso&lt;/a&gt; (OpenAI-compatible TypeScript SDK for any LLM provider)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/goodreasonai/nichey&quot;&gt;Nichey&lt;/a&gt; is a Python package for generating custom wikis for your research topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kassane/ollama-d&quot;&gt;Ollama for D&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HardCodeDev777/OllamaPlusPlus&quot;&gt;OllamaPlusPlus&lt;/a&gt; (Very simple C++ library for Ollama)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aws-samples/swift-chat&quot;&gt;SwiftChat&lt;/a&gt; (Lightning-fast Cross-platform AI chat app with native UI for Android, iOS, and iPad)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AugustDev/enchanted&quot;&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Mobile-Artificial-Intelligence/maid&quot;&gt;Maid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JHubi1/ollama-app&quot;&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/1runeberg/confichat&quot;&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sunshine0523/OllamaServer&quot;&gt;Ollama Android Chat&lt;/a&gt; (No need for Termux, start the Ollama service with one click on an Android device)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibrahimcetin/reins&quot;&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions &amp;amp; Plugins&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MassimilianoPasquini97/raycast_ollama&quot;&gt;Raycast extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mxyng/discollama&quot;&gt;Discollama&lt;/a&gt; (Discord bot inside the Ollama discord channel)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/continuedev/continue&quot;&gt;Continue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thewh1teagle/vibe&quot;&gt;Vibe&lt;/a&gt; (Transcribe and analyze meetings with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hinterdupfinger/obsidian-ollama&quot;&gt;Obsidian Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/omagdy7/ollama-logseq&quot;&gt;Logseq Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andersrex/notesollama&quot;&gt;NotesOllama&lt;/a&gt; (Apple Notes Ollama plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/samalba/dagger-chatbot&quot;&gt;Dagger Chatbot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mekb-turtle/discord-ai-bot&quot;&gt;Discord AI Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ruecat/ollama-telegram&quot;&gt;Ollama Telegram Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ej52/hass-ollama-conversation&quot;&gt;Hass Ollama Conversation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abrenneke/rivet-plugin-ollama&quot;&gt;Rivet plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/longy2k/obsidian-bmo-chatbot&quot;&gt;Obsidian BMO Chatbot plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/herval/cliobot&quot;&gt;Cliobot&lt;/a&gt; (Telegram bot with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/logancyang/obsidian-copilot&quot;&gt;Copilot for Obsidian plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pfrankov/obsidian-local-gpt&quot;&gt;Obsidian Local GPT plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openinterpreter.com/language-model-setup/local-models/ollama&quot;&gt;Open Interpreter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ex3ndr/llama-coder&quot;&gt;Llama Coder&lt;/a&gt; (Copilot alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bernardo-bruning/ollama-copilot&quot;&gt;Ollama Copilot&lt;/a&gt; (Proxy that allows you to use Ollama as a copilot like GitHub Copilot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjmacarthy/twinny&quot;&gt;twinny&lt;/a&gt; (Copilot and Copilot chat alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RussellCanfield/wingman-ai&quot;&gt;Wingman-AI&lt;/a&gt; (Copilot code and chat alternative using Ollama and Hugging Face)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/n4ze3m/page-assist&quot;&gt;Page Assist&lt;/a&gt; (Chrome Extension)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/imoize/plasmoid-ollamacontrol&quot;&gt;Plasmoid Ollama Control&lt;/a&gt; (KDE Plasma extension that allows you to quickly manage/control Ollama model)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tusharhero/aitelegrambot&quot;&gt;AI Telegram Bot&lt;/a&gt; (Telegram bot using Ollama in backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yaroslavyaroslav/OpenAI-sublime-text&quot;&gt;AI ST Completion&lt;/a&gt; (Sublime Text 4 AI assistant plugin with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinthedang/discord-ollama&quot;&gt;Discord-Ollama Chat Bot&lt;/a&gt; (Generalized TypeScript Discord Bot w/ Tuning Documentation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/josStorer/chatGPTBox&quot;&gt;ChatGPTBox: All in one browser extension&lt;/a&gt; with &lt;a href=&quot;https://github.com/josStorer/chatGPTBox/issues/616#issuecomment-1975186467&quot;&gt;Integrating Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapmd73/Companion&quot;&gt;Discord AI chat/moderation bot&lt;/a&gt; Chat/moderation bot written in python. Uses Ollama to create personalities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nischalj10/headless-ollama&quot;&gt;Headless Ollama&lt;/a&gt; (Scripts to automatically install ollama client &amp;amp; models on any OS for apps that depend on ollama server)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xuyangbocn/terraform-aws-self-host-llm&quot;&gt;Terraform AWS Ollama &amp;amp; Open WebUI&lt;/a&gt; (A Terraform module to deploy on AWS a ready-to-use Ollama service, together with its front-end Open WebUI service.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakubburkiewicz/node-red-contrib-ollama&quot;&gt;node-red-contrib-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ivostoykov/localAI&quot;&gt;Local AI Helper&lt;/a&gt; (Chrome and Firefox extensions that enable interactions with the active tab and customisable API endpoints. Includes secure storage for user prompts.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jake83741/vnc-lm&quot;&gt;vnc-lm&lt;/a&gt; (Discord bot for messaging with LLMs through Ollama and LiteLLM. Seamlessly move between local and flagship models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SilasMarvin/lsp-ai&quot;&gt;LSP-AI&lt;/a&gt; (Open-source language server for AI-powered functionality)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Palm1r/QodeAssist&quot;&gt;QodeAssist&lt;/a&gt; (AI-powered coding assistant plugin for Qt Creator)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ECuiDev/obsidian-quiz-generator&quot;&gt;Obsidian Quiz Generator plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/philffm/ai-summary-helper&quot;&gt;AI Summmary Helper plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/suncloudsmoon/TextCraft&quot;&gt;TextCraft&lt;/a&gt; (Copilot in Word alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zeitlings/alfred-ollama&quot;&gt;Alfred Ollama&lt;/a&gt; (Alfred Workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adarshM84/TextLLaMA&quot;&gt;TextLLaMA&lt;/a&gt; A Chrome Extension that helps you write emails, correct grammar, and translate into any language&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zyphixor/simple-discord-ai&quot;&gt;Simple-Discord-AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/innightwolfsleep/llm_telegram_bot&quot;&gt;LLM Telegram Bot&lt;/a&gt; (telegram bot, primary for RP. Oobabooga-like buttons, &lt;a href=&quot;https://github.com/AUTOMATIC1111/stable-diffusion-webui&quot;&gt;A1111&lt;/a&gt; API integration e.t.c)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sammcj/mcp-llm&quot;&gt;mcp-llm&lt;/a&gt; (MCP Server to allow LLMs to call other LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HardCodeDev777/SimpleOllamaUnity&quot;&gt;SimpleOllamaUnity&lt;/a&gt; (Unity Engine extension for communicating with Ollama in a few lines of code. Also works at runtime)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HardCodeDev777/UnityCodeLama&quot;&gt;UnityCodeLama&lt;/a&gt; (Unity Edtior tool to analyze scripts via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NativeMindBrowser/NativeMindExtension&quot;&gt;NativeMind&lt;/a&gt; (Private, on-device AI Assistant, no cloud dependencies)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gmai.premex.se/&quot;&gt;GMAI - Gradle Managed AI&lt;/a&gt; (Gradle plugin for automated Ollama lifecycle management during build phases)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported backends&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggml-org/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt; project founded by Georgi Gerganov.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.comet.com/docs/opik/cookbook/ollama&quot;&gt;Opik&lt;/a&gt; is an open-source platform to debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards. Opik supports native intergration to Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lunary.ai/docs/integrations/ollama&quot;&gt;Lunary&lt;/a&gt; is the leading open-source LLM observability platform. It provides a variety of enterprise-grade features such as real-time analytics, prompt templates management, PII masking, and comprehensive agent tracing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/openlit/openlit&quot;&gt;OpenLIT&lt;/a&gt; is an OpenTelemetry-native tool for monitoring Ollama Applications &amp;amp; GPUs using traces and metrics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.honeyhive.ai/integrations/ollama&quot;&gt;HoneyHive&lt;/a&gt; is an AI observability and evaluation platform for AI agents. Use HoneyHive to evaluate agent performance, interrogate failures, and monitor quality in production.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://langfuse.com/docs/integrations/ollama&quot;&gt;Langfuse&lt;/a&gt; is an open source LLM observability platform that enables teams to collaboratively monitor, evaluate and debug AI applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mlflow.org/docs/latest/llms/tracing/index.html#automatic-tracing&quot;&gt;MLflow Tracing&lt;/a&gt; is an open source LLM observability tool with a convenient API to log and visualize traces, making it easy to debug and evaluate GenAI applications.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nats-io/nats-server</title>
      <link>https://github.com/nats-io/nats-server</link>
      <description>&lt;p&gt;High-Performance server for NATS.io, the cloud and edge native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nats-io/nats-server/main/logos/nats-horizontal-color.png&quot; width=&quot;300&quot; alt=&quot;NATS Logo&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://nats.io&quot;&gt;NATS&lt;/a&gt; is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (&lt;a href=&quot;https://cncf.io&quot;&gt;CNCF&lt;/a&gt;). NATS has over &lt;a href=&quot;https://nats.io/download/&quot;&gt;40 client language implementations&lt;/a&gt;, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nats-io/nats-server/actions/workflows/tests.yaml&quot;&gt;&lt;img src=&quot;https://github.com/nats-io/nats-server/actions/workflows/tests.yaml/badge.svg?branch=main&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nats-io/nats-server/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/nats-io/nats-server&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://slack.nats.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20slack-green&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/nats-io/nats-server?branch=main&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/nats-io/nats-server/badge.svg?branch=main&quot; alt=&quot;Coverage&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/_/nats&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/_/nats.svg?sanitize=true&quot; alt=&quot;Docker Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://somsubhra.github.io/github-release-stats/?username=nats-io&amp;amp;repository=nats-server&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/nats-io/nats-server/total.svg?logo=github&quot; alt=&quot;GitHub Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/1895&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/1895/badge&quot; alt=&quot;CII Best Practices&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://artifacthub.io/packages/helm/nats/nats&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/nats&quot; alt=&quot;Artifact Hub&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nats.io&quot;&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nats.io&quot;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nats.io/reference/faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href=&quot;https://rethink.synadia.com/episodes/1/&quot;&gt;a video overview&lt;/a&gt; of NATS.&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href=&quot;https://www.youtube.com/watch?v=sm63oAVPqAM&quot;&gt;this video from SCALE 13x&lt;/a&gt; to learn more about its origin story and design philosophy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/nats_io&quot;&gt;Twitter&lt;/a&gt;: Follow us on Twitter!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/natsio&quot;&gt;Google Groups&lt;/a&gt;: Where you can ask questions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://natsio.slack.com&quot;&gt;Slack&lt;/a&gt;: Click &lt;a href=&quot;https://slack.nats.io&quot;&gt;here&lt;/a&gt; to join. You can ask questions to our maintainers and to the rich and active community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to NATS, read about our...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nats-io/nats-server/main/CONTRIBUTING.md&quot;&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nats-io&quot;&gt;Report issues or propose Pull Requests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The NATS product roadmap can be found &lt;a href=&quot;https://nats.io/about/#roadmap&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Who uses NATS? See our &lt;a href=&quot;https://nats.io/#who-uses-nats&quot;&gt;list of users&lt;/a&gt; on &lt;a href=&quot;https://nats.io&quot;&gt;https://nats.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Trail of Bits following engagement by the Open Source Technology Improvement Fund (OSTIF). You can see the &lt;a href=&quot;https://github.com/trailofbits/publications/raw/master/reviews/2025-04-ostif-nats-securityreview.pdf&quot;&gt;full report from April 2025 here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you&#39;ve found a vulnerability or a potential vulnerability in the NATS server, please let us know at &lt;a href=&quot;mailto:security@nats.io&quot;&gt;nats-security&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>steveiliop56/tinyauth</title>
      <link>https://github.com/steveiliop56/tinyauth</link>
      <description>&lt;p&gt;The simplest way to protect your apps with a login screen.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;Tinyauth&quot; title=&quot;Tinyauth&quot; width=&quot;96&quot; src=&quot;https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/logo-rounded.png&quot; /&gt; 
 &lt;h1&gt;Tinyauth&lt;/h1&gt; 
 &lt;p&gt;The easiest way to secure your apps with a login screen.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/steveiliop56/tinyauth&quot; /&gt; 
 &lt;img alt=&quot;Release&quot; src=&quot;https://img.shields.io/github/v/release/steveiliop56/tinyauth&quot; /&gt; 
 &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/steveiliop56/tinyauth&quot; /&gt; 
 &lt;img alt=&quot;Tinyauth CI&quot; src=&quot;https://github.com/steveiliop56/tinyauth/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; /&gt; 
 &lt;a title=&quot;Crowdin&quot; target=&quot;_blank&quot; href=&quot;https://crowdin.com/project/tinyauth&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/tinyauth/localized.svg?sanitize=true&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;Tinyauth is a simple authentication middleware that adds a simple login screen or OAuth with Google, Github and any provider to all of your docker apps. It supports all the popular proxies like Traefik, Nginx and Caddy.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Tinyauth is in active development and configuration may change often. Please make sure to carefully read the release notes before updating.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can easily get started with Tinyauth by following the guide in the &lt;a href=&quot;https://tinyauth.app/docs/getting-started.html&quot;&gt;documentation&lt;/a&gt;. There is also an available &lt;a href=&quot;https://raw.githubusercontent.com/steveiliop56/tinyauth/main/docker-compose.example.yml&quot;&gt;docker compose&lt;/a&gt; file that has Traefik, Whoami and Tinyauth to demonstrate its capabilities.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;If you are still not sure if Tinyauth suits your needs you can try out the &lt;a href=&quot;https://demo.tinyauth.app&quot;&gt;demo&lt;/a&gt;. The default username is &lt;code&gt;user&lt;/code&gt; and the default password is &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find documentation and guides on all of the available configuration of Tinyauth in the &lt;a href=&quot;https://tinyauth.app&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Discord&lt;/h2&gt; 
&lt;p&gt;Tinyauth has a &lt;a href=&quot;https://discord.gg/eHzVaCzRRd&quot;&gt;discord&lt;/a&gt; server. Feel free to hop in to chat about self-hosting, homelabs and of course Tinyauth. See you there!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All contributions to the codebase are welcome! If you have any free time feel free to pick up an &lt;a href=&quot;https://github.com/steveiliop56/tinyauth/issues&quot;&gt;issue&lt;/a&gt; or add your own missing features. Make sure to check out the &lt;a href=&quot;https://raw.githubusercontent.com/steveiliop56/tinyauth/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; for instructions on how to get the development server up and running.&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;If you would like to help translate Tinyauth into more languages, visit the &lt;a href=&quot;https://crowdin.com/project/tinyauth&quot;&gt;Crowdin&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Tinyauth is licensed under the GNU General Public License v3.0. TL;DR — You may copy, distribute and modify the software as long as you track changes/dates in source files. Any modifications to or software including (via compiler) GPL-licensed code must also be made available under the GPL along with build &amp;amp; install instructions. For more information about the license check the &lt;a href=&quot;https://raw.githubusercontent.com/steveiliop56/tinyauth/main/LICENSE&quot;&gt;license&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;A big thank you to the following people for providing me with more coffee:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href=&quot;https://github.com/erwinkramer&quot;&gt;&lt;img src=&quot;https://github.com/erwinkramer.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: erwinkramer&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/nicotsx&quot;&gt;&lt;img src=&quot;https://github.com/nicotsx.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: nicotsx&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/SimpleHomelab&quot;&gt;&lt;img src=&quot;https://github.com/SimpleHomelab.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: SimpleHomelab&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/jmadden91&quot;&gt;&lt;img src=&quot;https://github.com/jmadden91.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: jmadden91&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/tribor&quot;&gt;&lt;img src=&quot;https://github.com/tribor.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: tribor&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/eliasbenb&quot;&gt;&lt;img src=&quot;https://github.com/eliasbenb.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: eliasbenb&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href=&quot;https://github.com/afunworm&quot;&gt;&lt;img src=&quot;https://github.com/afunworm.png&quot; width=&quot;64px&quot; alt=&quot;User avatar: afunworm&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;!-- sponsors --&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Freepik&lt;/strong&gt; for providing the police hat and badge.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Renee French&lt;/strong&gt; for the original gopher logo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Coderabbit AI&lt;/strong&gt; for providing free AI code reviews.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Syrhu&lt;/strong&gt; for providing the background image of the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.star-history.com/#steveiliop56/tinyauth&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=steveiliop56/tinyauth&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudwego/eino</title>
      <link>https://github.com/cloudwego/eino</link>
      <description>&lt;p&gt;The ultimate LLM/AI application development framework in Golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/badges/.badges/main/coverage.svg?sanitize=true&quot; alt=&quot;coverage&quot; /&gt; &lt;a href=&quot;https://github.com/cloudwego/eino/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/cloudwego/eino&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.cloudwego.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/website?up_message=cloudwego&amp;amp;url=https%3A%2F%2Fwww.cloudwego.io%2F&quot; alt=&quot;WebSite&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/cloudwego/eino/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/cloudwego/eino&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/cloudwego/eino&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/cloudwego/eino&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/cloudwego/kitex/eino&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/cloudwego/eino&quot; alt=&quot;OpenIssue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/cloudwego/eino/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-closed/cloudwego/eino&quot; alt=&quot;ClosedIssue&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/cloudwego/eino&quot; alt=&quot;Stars&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/forks/cloudwego/eino&quot; alt=&quot;Forks&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;English | &lt;a href=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/README.zh_CN.md&quot;&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Eino[&#39;aino]&lt;/strong&gt; (pronounced similarly to &quot;I know&quot;) aims to be the ultimate LLM application development framework in Golang. Drawing inspirations from many excellent LLM application development frameworks in the open-source community such as LangChain &amp;amp; LlamaIndex, etc., as well as learning from cutting-edge research and real world applications, Eino offers an LLM application development framework that emphasizes on simplicity, scalability, reliability and effectiveness that better aligns with Golang programming conventions.&lt;/p&gt; 
&lt;p&gt;What Eino provides are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a carefully curated list of &lt;strong&gt;component&lt;/strong&gt; abstractions and implementations that can be easily reused and combined to build LLM applications&lt;/li&gt; 
 &lt;li&gt;a powerful &lt;strong&gt;composition&lt;/strong&gt; framework that does the heavy lifting of strong type checking, stream processing, concurrency management, aspect injection, option assignment, etc. for the user.&lt;/li&gt; 
 &lt;li&gt;a set of meticulously designed &lt;strong&gt;API&lt;/strong&gt; that obsesses on simplicity and clarity.&lt;/li&gt; 
 &lt;li&gt;an ever-growing collection of best practices in the form of bundled &lt;strong&gt;flows&lt;/strong&gt; and &lt;strong&gt;examples&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;a useful set of tools that covers the entire development cycle, from visualized development and debugging to online tracing and evaluation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the above arsenal, Eino can standardize, simplify, and improve efficiency at different stages of the AI application development cycle: &lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_concept.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;A quick walkthrough&lt;/h1&gt; 
&lt;p&gt;Use a component directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;model, _ := openai.NewChatModel(ctx, config) // create an invokable LLM instance
message, _ := model.Generate(ctx, []*Message{
    SystemMessage(&quot;you are a helpful assistant.&quot;),
    UserMessage(&quot;what does the future AI App look like?&quot;)})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you can do that, Eino provides lots of useful components to use out of the box. But you can do more by using orchestration, for three reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;orchestration encapsulates common patterns of LLM application.&lt;/li&gt; 
 &lt;li&gt;orchestration solves the difficult problem of processing stream response by the LLM.&lt;/li&gt; 
 &lt;li&gt;orchestration handles type safety, concurrency management, aspect injection and option assignment for you.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Eino provides three set of APIs for orchestration&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;API&lt;/th&gt; 
   &lt;th&gt;Characteristics and usage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chain&lt;/td&gt; 
   &lt;td&gt;Simple chained directed graph that can only go forward.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Graph&lt;/td&gt; 
   &lt;td&gt;Cyclic or Acyclic directed graph. Powerful and flexible.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Workflow&lt;/td&gt; 
   &lt;td&gt;Acyclic graph that supports data mapping at struct field level.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Let&#39;s create a simple chain: a ChatTemplate followed by a ChatModel.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_chain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;chain, _ := NewChain[map[string]any, *Message]().
           AppendChatTemplate(prompt).
           AppendChatModel(model).
           Compile(ctx)

chain.Invoke(ctx, map[string]any{&quot;query&quot;: &quot;what&#39;s your name?&quot;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let&#39;s create a graph that uses a ChatModel to generate answer or tool calls, then uses a ToolsNode to execute those tools if needed.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/tool_call_graph.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;graph := NewGraph[map[string]any, *schema.Message]()

_ = graph.AddChatTemplateNode(&quot;node_template&quot;, chatTpl)
_ = graph.AddChatModelNode(&quot;node_model&quot;, chatModel)
_ = graph.AddToolsNode(&quot;node_tools&quot;, toolsNode)
_ = graph.AddLambdaNode(&quot;node_converter&quot;, takeOne)

_ = graph.AddEdge(START, &quot;node_template&quot;)
_ = graph.AddEdge(&quot;node_template&quot;, &quot;node_model&quot;)
_ = graph.AddBranch(&quot;node_model&quot;, branch)
_ = graph.AddEdge(&quot;node_tools&quot;, &quot;node_converter&quot;)
_ = graph.AddEdge(&quot;node_converter&quot;, END)

compiledGraph, err := graph.Compile(ctx)
if err != nil {
return err
}
out, err := r.Invoke(ctx, map[string]any{&quot;query&quot;:&quot;Beijing&#39;s weather this weekend&quot;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let&#39;s create a workflow that flexibly maps input &amp;amp; output at the field level:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_workflow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Input1 struct {
    Input string
}

type Output1 struct {
    Output string
}

type Input2 struct {
    Role schema.RoleType
}

type Output2 struct {
    Output string
}

type Input3 struct {
    Query string
    MetaData string
}

var (
    ctx context.Context
    m model.BaseChatModel
    lambda1 func(context.Context, Input1) (Output1, error)
    lambda2 func(context.Context, Input2) (Output2, error)
    lambda3 func(context.Context, Input3) (*schema.Message, error)
)

wf := NewWorkflow[[]*schema.Message, *schema.Message]()
wf.AddChatModelNode(&quot;model&quot;, m).AddInput(START)
wf.AddLambdaNode(&quot;lambda1&quot;, InvokableLambda(lambda1)).
    AddInput(&quot;model&quot;, MapFields(&quot;Content&quot;, &quot;Input&quot;))
wf.AddLambdaNode(&quot;lambda2&quot;, InvokableLambda(lambda2)).
    AddInput(&quot;model&quot;, MapFields(&quot;Role&quot;, &quot;Role&quot;))
wf.AddLambdaNode(&quot;lambda3&quot;, InvokableLambda(lambda3)).
    AddInput(&quot;lambda1&quot;, MapFields(&quot;Output&quot;, &quot;Query&quot;)).
    AddInput(&quot;lambda2&quot;, MapFields(&quot;Output&quot;, &quot;MetaData&quot;))
wf.End().AddInput(&quot;lambda3&quot;)
runnable, err := wf.Compile(ctx)
if err != nil {
    return err
}
our, err := runnable.Invoke(ctx, []*schema.Message{
    schema.UserMessage(&quot;kick start this workflow!&quot;),
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let&#39;s create a &#39;ReAct&#39; agent: A ChatModel binds to Tools. It receives input Messages and decides independently whether to call the Tool or output the final result. The execution result of the Tool will again become the input Message for the ChatModel and serve as the context for the next round of independent judgment.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/react.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;We provide a complete implementation for ReAct Agent out of the box in the &lt;code&gt;flow&lt;/code&gt; package. Check out the code here: &lt;a href=&quot;https://github.com/cloudwego/eino/raw/main/flow/agent/react/react.go&quot;&gt;flow/agent/react&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Our implementation of ReAct Agent uses Eino&#39;s &lt;strong&gt;graph orchestration&lt;/strong&gt; exclusively, which provides the following benefits out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type checking: it makes sure the two nodes&#39; input and output types match at compile time.&lt;/li&gt; 
 &lt;li&gt;Stream processing: concatenates message stream before passing to chatModel and toolsNode if needed, and copies the stream into callback handlers.&lt;/li&gt; 
 &lt;li&gt;Concurrency management: the shared state can be safely read and written because the StatePreHandler is concurrency safe.&lt;/li&gt; 
 &lt;li&gt;Aspect injection: injects callback aspects before and after the execution of ChatModel if the specified ChatModel implementation hasn&#39;t injected itself.&lt;/li&gt; 
 &lt;li&gt;Option assignment: call options are assigned either globally, to specific component type or to specific node.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, you could easily extend the compiled graph with callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;handler := NewHandlerBuilder().
  OnStartFn(
    func(ctx context.Context, info *RunInfo, input CallbackInput) context.Context) {
        log.Infof(&quot;onStart, runInfo: %v, input: %v&quot;, info, input)
    }).
  OnEndFn(
    func(ctx context.Context, info *RunInfo, output CallbackOutput) context.Context) {
        log.Infof(&quot;onEnd, runInfo: %v, out: %v&quot;, info, output)
    }).
  Build()
  
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you could easily assign options to different nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;// assign to All nodes
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))

// assign only to ChatModel nodes
compiledGraph.Invoke(ctx, input, WithChatModelOption(WithTemperature(0.5))

// assign only to node_1
compiledGraph.Invoke(ctx, input, WithCallbacks(handler).DesignateNode(&quot;node_1&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Key Features&lt;/h1&gt; 
&lt;h2&gt;Rich Components&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Encapsulates common building blocks into &lt;strong&gt;component abstractions&lt;/strong&gt;, each have multiple &lt;strong&gt;component implementations&lt;/strong&gt; that are ready to be used out of the box.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;component abstractions such as ChatModel, Tool, ChatTemplate, Retriever, Document Loader, Lambda, etc.&lt;/li&gt; 
   &lt;li&gt;each component type has an interface of its own: defined Input &amp;amp; Output Type, defined Option type, and streaming paradigms that make sense.&lt;/li&gt; 
   &lt;li&gt;implementations are transparent. Abstractions are all you care about when orchestrating components together.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implementations can be nested and captures complex business logic.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ReAct Agent, MultiQueryRetriever, Host MultiAgent, etc. They consist of multiple components and non-trivial business logic.&lt;/li&gt; 
   &lt;li&gt;They are still transparent from the outside. A MultiQueryRetriever can be used anywhere that accepts a Retriever.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Powerful Orchestration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Data flows from Retriever / Document Loaders / ChatTemplate to ChatModel, then flows to Tools and parsed as Final Answer. This directed, controlled flow of data through multiple components can be implemented through &lt;strong&gt;graph orchestration&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Component instances are graph nodes, and edges are data flow channels.&lt;/li&gt; 
 &lt;li&gt;Graph orchestration is powerful and flexible enough to implement complex business logic: 
  &lt;ul&gt; 
   &lt;li&gt;type checking, stream processing, concurrency management, aspect injection and option assignment are handled by the framework.&lt;/li&gt; 
   &lt;li&gt;branch out execution at runtime, read and write global state, or do field level data mapping using workflow(currently in alpha stage).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Complete Stream Processing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stream processing is important because ChatModel outputs chunks of messages in real time as it generates them. It&#39;s especially important with orchestration because more components need to handle streaming data.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;concatenates&lt;/strong&gt; stream chunks for downstream nodes that only accepts non-stream input, such as ToolsNode.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;boxes&lt;/strong&gt; non stream into stream when stream is needed during graph execution.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;merges&lt;/strong&gt; multiple streams as they converge into a single downward node.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;copies&lt;/strong&gt; stream as they fan out to different downward node, or is passed to callback handlers.&lt;/li&gt; 
 &lt;li&gt;Orchestration elements such as &lt;strong&gt;branch&lt;/strong&gt; and &lt;strong&gt;state handlers&lt;/strong&gt; are also stream aware.&lt;/li&gt; 
 &lt;li&gt;With these streaming processing abilities, the streaming paradigms of components themselves become transparent to the user.&lt;/li&gt; 
 &lt;li&gt;A compiled Graph can run with 4 different streaming paradigms:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Streaming Paradigm&lt;/th&gt; 
   &lt;th&gt;Explanation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Invoke&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stream&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Collect&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Transform&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highly Extensible Aspects (Callbacks)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Aspects handle cross-cutting concerns such as logging, tracing, metrics, etc., as well as exposing internal details of component implementations.&lt;/li&gt; 
 &lt;li&gt;Five aspects are supported: &lt;strong&gt;OnStart, OnEnd, OnError, OnStartWithStreamInput, OnEndWithStreamOutput&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Developers can easily create custom callback handlers, add them during graph run via options, and they will be invoked during graph run.&lt;/li&gt; 
 &lt;li&gt;Graph can also inject aspects to those component implementations that do not support callbacks on their own.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Eino Framework Structure&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_framework.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The Eino framework consists of several parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Eino(this repo): Contains Eino&#39;s type definitions, streaming mechanism, component abstractions, orchestration capabilities, aspect mechanisms, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/cloudwego/eino-ext&quot;&gt;EinoExt&lt;/a&gt;: Component implementations, callback handlers implementations, component usage examples, and various tools such as evaluators, prompt optimizers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/cloudwego/eino-ext/tree/main/devops&quot;&gt;Eino Devops&lt;/a&gt;: visualized developing, visualized debugging etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/cloudwego/eino-examples&quot;&gt;EinoExamples&lt;/a&gt; is the repo containing example applications and best practices for Eino.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Detailed Documentation&lt;/h2&gt; 
&lt;p&gt;For learning and using Eino, we provide a comprehensive Eino User Manual to help you quickly understand the concepts in Eino and master the skills of developing AI applications based on Eino. Start exploring through the &lt;a href=&quot;https://www.cloudwego.io/zh/docs/eino/&quot;&gt;Eino User Manual&lt;/a&gt; now!&lt;/p&gt; 
&lt;p&gt;For a quick introduction to building AI applications with Eino, we recommend starting with &lt;a href=&quot;https://www.cloudwego.io/zh/docs/eino/quick_start/&quot;&gt;Eino: Quick Start&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go 1.18 and above.&lt;/li&gt; 
 &lt;li&gt;Eino relies on &lt;a href=&quot;https://github.com/getkin/kin-openapi&quot;&gt;kin-openapi&lt;/a&gt; &#39;s OpenAPI JSONSchema implementation. In order to remain compatible with Go 1.18, we have fixed kin-openapi&#39;s version to be v0.118.0.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href=&quot;https://security.bytedance.com/src&quot;&gt;security center&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/sec@bytedance.com&quot;&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h2&gt;Contact US&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;How to become a member: &lt;a href=&quot;https://github.com/cloudwego/community/raw/main/COMMUNITY_MEMBERSHIP.md&quot;&gt;COMMUNITY MEMBERSHIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issues: &lt;a href=&quot;https://github.com/cloudwego/eino/issues&quot;&gt;Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lark: Scan the QR code below with &lt;a href=&quot;https://www.feishu.cn/en/&quot;&gt;Register Feishu&lt;/a&gt; to join our CloudWeGo/eino user group.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/lark_group_zh.png&quot; alt=&quot;LarkGroup&quot; width=&quot;200&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/cloudwego/eino/main/LICENSE-APACHE&quot;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bluenviron/mediamtx</title>
      <link>https://github.com/bluenviron/mediamtx</link>
      <description>&lt;p&gt;Ready-to-use SRT / WebRTC / RTSP / RTMP / LL-HLS media server and media proxy that allows to read, publish, proxy, record and playback video and audio streams.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/logo.png&quot; alt=&quot;MediaMTX / rtsp-simple-server&quot; /&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml&quot;&gt;&lt;img src=&quot;https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml/badge.svg?sanitize=true&quot; alt=&quot;Lint&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codecov.io/gh/bluenviron/mediamtx/tree/main&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/bluenviron/mediamtx/branch/main/graph/badge.svg?sanitize=true&quot; alt=&quot;CodeCov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bluenviron/mediamtx/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/bluenviron/mediamtx&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/bluenviron/mediamtx&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docker-bluenviron/mediamtx-blue&quot; alt=&quot;Docker Hub&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bluenviron.github.io/mediamtx&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/api-documentation-blue&quot; alt=&quot;API Documentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;em&gt;MediaMTX&lt;/em&gt; is a ready-to-use and zero-dependency real-time media server and media proxy that allows to publish, read, proxy, record and playback video and audio streams. It has been conceived as a &quot;media router&quot; that routes media streams from one end to the other.&lt;/p&gt; 
&lt;p&gt;Live streams can be published to the server with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;variants&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-clients&quot;&gt;SRT clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-cameras-and-servers&quot;&gt;SRT cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-clients&quot;&gt;WebRTC clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHIP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers&quot;&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-servers&quot;&gt;WebRTC servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHEP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers&quot;&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients&quot;&gt;RTSP clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-cameras-and-servers&quot;&gt;RTSP cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, UDP-Multicast, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients&quot;&gt;RTMP clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-cameras-and-servers&quot;&gt;RTMP cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-cameras-and-servers&quot;&gt;HLS cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Low-Latency HLS, MP4-based HLS, legacy HLS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1&quot;&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#mpeg-ts&quot;&gt;MPEG-TS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MPEG-TS over UDP, MPEG-TS over Unix sockets&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtp&quot;&gt;RTP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTP over UDP, RTP over Unix sockets&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#raspberry-pi-cameras&quot;&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H264&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Live streams can be read from the server with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;variants&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt&quot;&gt;SRT&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHEP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers&quot;&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp&quot;&gt;RTSP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, UDP-Multicast, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp&quot;&gt;RTMP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;H264&lt;/td&gt; 
   &lt;td&gt;MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls&quot;&gt;HLS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Low-Latency HLS, MP4-based HLS, legacy HLS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1&quot;&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Live streams be recorded and played back with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;format&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk&quot;&gt;fMP4&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk&quot;&gt;MPEG-TS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Publish live streams to the server&lt;/li&gt; 
 &lt;li&gt;Read live streams from the server&lt;/li&gt; 
 &lt;li&gt;Streams are automatically converted from a protocol to another&lt;/li&gt; 
 &lt;li&gt;Serve several streams at once in separate paths&lt;/li&gt; 
 &lt;li&gt;Record streams to disk&lt;/li&gt; 
 &lt;li&gt;Playback recorded streams&lt;/li&gt; 
 &lt;li&gt;Authenticate users&lt;/li&gt; 
 &lt;li&gt;Redirect readers to other RTSP servers (load balancing)&lt;/li&gt; 
 &lt;li&gt;Control the server through the Control API&lt;/li&gt; 
 &lt;li&gt;Reload the configuration without disconnecting existing clients (hot reloading)&lt;/li&gt; 
 &lt;li&gt;Read Prometheus-compatible metrics&lt;/li&gt; 
 &lt;li&gt;Run hooks (external commands) when clients connect, disconnect, read or publish streams&lt;/li&gt; 
 &lt;li&gt;Compatible with Linux, Windows and macOS, does not require any dependency or interpreter, it&#39;s a single executable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note about rtsp-simple-server&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;rtsp-simple-server&lt;/em&gt; has been rebranded as &lt;em&gt;MediaMTX&lt;/em&gt;. The reason is pretty obvious: this project started as a RTSP server but has evolved into a much more versatile product that is not tied to the RTSP protocol anymore. Nothing will change regarding license, features and backward compatibility.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standalone-binary&quot;&gt;Standalone binary&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#docker-image&quot;&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#arch-linux-package&quot;&gt;Arch Linux package&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#freebsd&quot;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-binary&quot;&gt;OpenWrt binary&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#basic-usage&quot;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#publish-to-the-server&quot;&gt;Publish to the server&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-software&quot;&gt;By software&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio&quot;&gt;OBS Studio&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#opencv&quot;&gt;OpenCV&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity&quot;&gt;Unity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers&quot;&gt;Web browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-device&quot;&gt;By device&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#generic-webcam&quot;&gt;Generic webcam&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#raspberry-pi-cameras&quot;&gt;Raspberry Pi Cameras&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#adding-audio&quot;&gt;Adding audio&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#secondary-stream&quot;&gt;Secondary stream&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-protocol&quot;&gt;By protocol&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-clients&quot;&gt;SRT clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-cameras-and-servers&quot;&gt;SRT cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-clients&quot;&gt;WebRTC clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-servers&quot;&gt;WebRTC servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients&quot;&gt;RTSP clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-cameras-and-servers&quot;&gt;RTSP cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients&quot;&gt;RTMP clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-cameras-and-servers&quot;&gt;RTMP cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-cameras-and-servers&quot;&gt;HLS cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#mpeg-ts&quot;&gt;MPEG-TS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtp&quot;&gt;RTP&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#read-from-the-server&quot;&gt;Read from the server&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-software-1&quot;&gt;By software&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc&quot;&gt;VLC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity-1&quot;&gt;Unity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1&quot;&gt;Web browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-protocol-1&quot;&gt;By protocol&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt&quot;&gt;SRT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp&quot;&gt;RTSP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp&quot;&gt;RTMP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls&quot;&gt;HLS&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#other-features&quot;&gt;Other features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authentication&quot;&gt;Authentication&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#internal&quot;&gt;Internal&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#http-based&quot;&gt;HTTP-based&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#jwt-based&quot;&gt;JWT-based&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encrypt-the-configuration&quot;&gt;Encrypt the configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#remuxing-re-encoding-compression&quot;&gt;Remuxing, re-encoding, compression&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk&quot;&gt;Record streams to disk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#playback-recorded-streams&quot;&gt;Playback recorded streams&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#forward-streams-to-other-servers&quot;&gt;Forward streams to other servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#proxy-requests-to-other-servers&quot;&gt;Proxy requests to other servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#on-demand-publishing&quot;&gt;On-demand publishing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#route-absolute-timestamps&quot;&gt;Route absolute timestamps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#expose-the-server-in-a-subfolder&quot;&gt;Expose the server in a subfolder&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#start-on-boot&quot;&gt;Start on boot&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#linux&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt&quot;&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hooks&quot;&gt;Hooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#control-api&quot;&gt;Control API&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#pprof&quot;&gt;pprof&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-specific-features&quot;&gt;SRT-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax&quot;&gt;Standard stream ID syntax&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-specific-features&quot;&gt;WebRTC-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep&quot;&gt;Authenticating with WHIP/WHEP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues&quot;&gt;Solving WebRTC connectivity issues&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers&quot;&gt;Supported browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-specific-features&quot;&gt;HLS-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1&quot;&gt;Supported browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#transport-protocols&quot;&gt;Transport protocols&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encryption&quot;&gt;Encryption&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#corrupted-frames&quot;&gt;Corrupted frames&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-specific-features&quot;&gt;RTMP-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encryption-1&quot;&gt;Encryption&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#compile-from-source&quot;&gt;Compile from source&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard&quot;&gt;Standard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-1&quot;&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#custom-libcamera&quot;&gt;Custom libcamera&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#cross-compile&quot;&gt;Cross compile&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#compile-for-all-supported-platforms&quot;&gt;Compile for all supported platforms&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#docker-image-1&quot;&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#specifications&quot;&gt;Specifications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#related-projects&quot;&gt;Related projects&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are several installation methods available: standalone binary, Docker image, Arch Linux package, FreeBSD Ports Collection or package and OpenWrt binary.&lt;/p&gt; 
&lt;h3&gt;Standalone binary&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download and extract a standalone binary from the &lt;a href=&quot;https://github.com/bluenviron/mediamtx/releases&quot;&gt;release page&lt;/a&gt; that corresponds to your operating system and architecture.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Start the server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Docker image&lt;/h3&gt; 
&lt;p&gt;Download and launch the image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host bluenviron/mediamtx:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available images:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;FFmpeg included&lt;/th&gt; 
   &lt;th&gt;RPI Camera support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-ffmpeg&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-rpi&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-ffmpeg-rpi&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;code&gt;--network=host&lt;/code&gt; flag is mandatory for RTSP to work, since Docker can change the source port of UDP packets for routing reasons, and this doesn&#39;t allow the server to identify the senders of the packets.&lt;/p&gt; 
&lt;p&gt;If the &lt;code&gt;--network=host&lt;/code&gt; cannot be used (for instance, it is not compatible with Windows or Kubernetes), you can disable the RTSP UDP transport protocol, add the server IP to &lt;code&gt;MTX_WEBRTCADDITIONALHOSTS&lt;/code&gt; and expose ports manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it \
-e MTX_RTSPTRANSPORTS=tcp \
-e MTX_WEBRTCADDITIONALHOSTS=192.168.x.x \
-p 8554:8554 \
-p 1935:1935 \
-p 8888:8888 \
-p 8889:8889 \
-p 8890:8890/udp \
-p 8189:8189/udp \
bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux package&lt;/h3&gt; 
&lt;p&gt;If you are running the Arch Linux distribution, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://aur.archlinux.org/mediamtx.git
cd mediamtx
makepkg -si
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;p&gt;Available via ports tree or using packages (2025Q2 and later) as listed below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd /usr/ports/multimedia/mediamtx &amp;amp;&amp;amp; make install clean
pkg install mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenWrt binary&lt;/h3&gt; 
&lt;p&gt;If the architecture of the OpenWrt device is amd64, armv6, armv7 or arm64, use the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standalone-binary&quot;&gt;standalone binary method&lt;/a&gt; and download a Linux binary that corresponds to your architecture.&lt;/p&gt; 
&lt;p&gt;Otherwise, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-1&quot;&gt;compile the server from source&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Basic usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Publish a stream. For instance, you can publish a video/audio file with &lt;em&gt;FFmpeg&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;GStreamer&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream filesrc location=file.mp4 \
! qtdemux name=d d.video_0 ! queue ! s.sink_0 d.audio_0 ! queue ! s.sink_1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the stream. For instance, you can open the stream with &lt;em&gt;VLC&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;GStreamer&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-play-1.0 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;FFmpeg&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Publish to the server&lt;/h2&gt; 
&lt;h3&gt;By software&lt;/h3&gt; 
&lt;h4&gt;FFmpeg&lt;/h4&gt; 
&lt;p&gt;FFmpeg can publish a stream to the server in several ways (SRT client, SRT server, RTSP client, RTMP client, MPEG-TS over UDP, MPEG-TS over Unix sockets, WebRTC with WHIP, RTP over UDP, rtp over Unix sockets). The recommended one consists in publishing as a &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients&quot;&gt;RTSP client&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;rtsp_transport&lt;/code&gt; flag, for instance, in order to use TCP:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp -rtsp_transport tcp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;GStreamer&lt;/h4&gt; 
&lt;p&gt;GStreamer can publish a stream to the server in several ways (SRT client, SRT server, RTSP client, RTMP client, MPEG-TS over UDP, WebRTC with WHIP, RTP over UDP). The recommended one consists in publishing as a &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients&quot;&gt;RTSP client&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream \
filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! queue ! s.sink_0 \
d.audio_0 ! queue ! s.sink_1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the stream is video only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;protocols&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream protocols=tcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If encryption is enabled, the &lt;code&gt;tls-validation-flags&lt;/code&gt; and &lt;code&gt;profiles&lt;/code&gt; options must be specified too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream tls-validation-flags=0 profiles=GST_RTSP_PROFILE_SAVP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;GStreamer can also publish a stream by using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC / WHIP protocol&lt;/a&gt;. Make sure that GStreamer version is at least 1.22, and that if the codec is H264, the profile is baseline. Use the &lt;code&gt;whipclientsink&lt;/code&gt; element:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gst-launch-1.0 videotestsrc \
! video/x-raw,width=1920,height=1080,format=I420 \
! x264enc speed-preset=ultrafast bitrate=2000 \
! video/x-h264,profile=baseline \
! whipclientsink signaller::whip-endpoint=http://localhost:8889/mystream/whip
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;OBS Studio&lt;/h4&gt; 
&lt;p&gt;OBS Studio can publish to the server in several ways (SRT client, RTMP client, WebRTC client). The recommended one consists in publishing as a &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients&quot;&gt;RTMP client&lt;/a&gt;. In &lt;code&gt;Settings -&amp;gt; Stream&lt;/code&gt; (or in the Auto-configuration Wizard), use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;Custom...&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;rtmp://localhost/mystream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stream key: (empty)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If credentials are in use, use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;Custom...&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stream key: (empty)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save the configuration and click &lt;code&gt;Start streaming&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to generate a stream that can be read with WebRTC, open &lt;code&gt;Settings -&amp;gt; Output -&amp;gt; Recording&lt;/code&gt; and use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FFmpeg output type: &lt;code&gt;Output to URL&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;File path or URL: &lt;code&gt;rtsp://localhost:8554/mystream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Container format: &lt;code&gt;rtsp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Check &lt;code&gt;show all codecs (even if potentically incompatible)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Video encoder: &lt;code&gt;h264_nvenc (libx264)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Video encoder settings (if any): &lt;code&gt;bf=0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Audio track: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Audio encoder: &lt;code&gt;libopus&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then use the button &lt;code&gt;Start Recording&lt;/code&gt; (instead of &lt;code&gt;Start Streaming&lt;/code&gt;) to start streaming.&lt;/p&gt; 
&lt;p&gt;Recent versions of OBS Studio can also publish to the server with the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC / WHIP protocol&lt;/a&gt;. Use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;WHIP&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;http://localhost:8889/mystream/whip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Bearer Token: &lt;code&gt;myuser:mypass&lt;/code&gt; (when internal authentication is enabled) or &lt;code&gt;JWT&lt;/code&gt; (when JWT-based authentication is enabled)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save the configuration and click &lt;code&gt;Start streaming&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;OpenCV&lt;/h4&gt; 
&lt;p&gt;Software which uses the OpenCV library can publish to the server through its GStreamer plugin, as a &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients&quot;&gt;RTSP client&lt;/a&gt;. It must be compiled with GStreamer support, by following this procedure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-ugly gstreamer1.0-rtsp python3-dev python3-numpy
git clone --depth=1 -b 4.5.4 https://github.com/opencv/opencv
cd opencv
mkdir build &amp;amp;&amp;amp; cd build
cmake -D CMAKE_INSTALL_PREFIX=/usr -D WITH_GSTREAMER=ON ..
make -j$(nproc)
sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check that OpenCV has been installed correctly by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;python3 -c &#39;import cv2; print(cv2.getBuildInformation())&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check that the output contains &lt;code&gt;GStreamer: YES&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Videos can be published with &lt;code&gt;cv2.VideoWriter&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from datetime import datetime
from time import sleep, time

import cv2
import numpy as np

fps = 15
width = 800
height = 600
colors = [
    (0, 0, 255),
    (255, 0, 0),
    (0, 255, 0),
]

out = cv2.VideoWriter(&#39;appsrc ! videoconvert&#39; + \
    &#39; ! video/x-raw,format=I420&#39; + \
    &#39; ! x264enc speed-preset=ultrafast bitrate=600 key-int-max=&#39; + str(fps * 2) + \
    &#39; ! video/x-h264,profile=baseline&#39; + \
    &#39; ! rtspclientsink location=rtsp://localhost:8554/mystream&#39;,
    cv2.CAP_GSTREAMER, 0, fps, (width, height), True)
if not out.isOpened():
    raise Exception(&quot;can&#39;t open video writer&quot;)

curcolor = 0
start = time()

while True:
    frame = np.zeros((height, width, 3), np.uint8)

    # create a rectangle
    color = colors[curcolor]
    curcolor += 1
    curcolor %= len(colors)
    for y in range(0, int(frame.shape[0] / 2)):
        for x in range(0, int(frame.shape[1] / 2)):
            frame[y][x] = color

    out.write(frame)
    print(&quot;%s frame written to the server&quot; % datetime.now())

    now = time()
    diff = (1 / fps) - now - start
    if diff &amp;gt; 0:
        sleep(diff)
    start = now
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Unity&lt;/h4&gt; 
&lt;p&gt;Software written with the Unity Engine can publish a stream to the server by using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Create a new Unity project or open an existing open.&lt;/p&gt; 
&lt;p&gt;Open &lt;em&gt;Window -&amp;gt; Package Manager&lt;/em&gt;, click on the plus sign, &lt;em&gt;Add Package by name...&lt;/em&gt; and insert &lt;code&gt;com.unity.webrtc&lt;/code&gt;. Wait for the package to be installed.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Project&lt;/em&gt; window, under &lt;code&gt;Assets&lt;/code&gt;, create a new C# Script called &lt;code&gt;WebRTCPublisher.cs&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cs&quot;&gt;using System.Collections;
using UnityEngine;
using Unity.WebRTC;
using UnityEngine.Networking;

public class WebRTCPublisher : MonoBehaviour
{
    public string url = &quot;http://localhost:8889/unity/whip&quot;;
    public int videoWidth = 1280;
    public int videoHeight = 720;

    private RTCPeerConnection pc;
    private MediaStream videoStream;

    void Start()
    {
        pc = new RTCPeerConnection();
        Camera sourceCamera = gameObject.GetComponent&amp;lt;Camera&amp;gt;();
        videoStream = sourceCamera.CaptureStream(videoWidth, videoHeight);
        foreach (var track in videoStream.GetTracks())
        {
            pc.AddTrack(track);
        }

        StartCoroutine(WebRTC.Update());
        StartCoroutine(createOffer());
    }

    private IEnumerator createOffer()
    {
        var op = pc.CreateOffer();
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;CreateOffer() failed&quot;);
            yield break;
        }

        yield return setLocalDescription(op.Desc);
    }

    private IEnumerator setLocalDescription(RTCSessionDescription offer)
    {
        var op = pc.SetLocalDescription(ref offer);
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;SetLocalDescription() failed&quot;);
            yield break;
        }

        yield return postOffer(offer);
    }

    private IEnumerator postOffer(RTCSessionDescription offer)
    {
        var content = new System.Net.Http.StringContent(offer.sdp);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(&quot;application/sdp&quot;);
        var client = new System.Net.Http.HttpClient();

        var task = System.Threading.Tasks.Task.Run(async () =&amp;gt; {
            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);
            res.EnsureSuccessStatusCode();
            return await res.Content.ReadAsStringAsync();
        });
        yield return new WaitUntil(() =&amp;gt; task.IsCompleted);
        if (task.Exception != null) {
            Debug.LogError(task.Exception);
            yield break;
        }

        yield return setRemoteDescription(task.Result);
    }

    private IEnumerator setRemoteDescription(string answer)
    {
        RTCSessionDescription desc = new RTCSessionDescription();
        desc.type = RTCSdpType.Answer;
        desc.sdp = answer;
        var op = pc.SetRemoteDescription(ref desc);
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;SetRemoteDescription() failed&quot;);
            yield break;
        }

        yield break;
    }

    void OnDestroy()
    {
        pc?.Close();
        pc?.Dispose();
        videoStream?.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the &lt;em&gt;Hierarchy&lt;/em&gt; window, find or create a scene and a camera, then add the &lt;code&gt;WebRTCPublisher.cs&lt;/code&gt; script as component of the camera, by dragging it inside the &lt;em&gt;Inspector&lt;/em&gt; window. then Press the &lt;em&gt;Play&lt;/em&gt; button at the top of the page.&lt;/p&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/unity&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Web browsers&lt;/h4&gt; 
&lt;p&gt;Web browsers can publish a stream to the server by using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC protocol&lt;/a&gt;. Start the server and open the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;iframe src=&quot;http://mediamtx-ip:8889/mystream/publish&quot; scrolling=&quot;no&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/publish_index.html&quot;&gt;source code of the WebRTC publish page&lt;/a&gt;. In particular, there&#39;s a ready-to-use, standalone JavaScript class for publishing streams with WebRTC, available in &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/publisher.js&quot;&gt;publisher.js&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;By device&lt;/h3&gt; 
&lt;h4&gt;Generic webcam&lt;/h4&gt; 
&lt;p&gt;If the operating system is Linux-based, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  cam:
    runOnInit: ffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the operating system is Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  cam:
    runOnInit: ffmpeg -f dshow -i video=&quot;USB2.0 HD UVC WebCam&quot; -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;USB2.0 HD UVC WebCam&lt;/code&gt; is the name of a webcam, that can be obtained with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -list_devices true -f dshow -i dummy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Raspberry Pi Cameras&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;MediaMTX&lt;/em&gt; natively supports most of the Raspberry Pi Camera models, enabling high-quality and low-latency video streaming from the camera to any user, for any purpose. There are a couple of requirements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The server must run on a Raspberry Pi, with one of the following operating systems:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Raspberry Pi OS Bookworm&lt;/li&gt; 
   &lt;li&gt;Raspberry Pi OS Bullseye&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Both 32 bit and 64 bit architectures are supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you are using Raspberry Pi OS Bullseye, make sure that the legacy camera stack is disabled. Type &lt;code&gt;sudo raspi-config&lt;/code&gt;, then go to &lt;code&gt;Interfacing options&lt;/code&gt;, &lt;code&gt;enable/disable legacy camera support&lt;/code&gt;, choose &lt;code&gt;no&lt;/code&gt;. Reboot the system.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If you want to run the standard (non-Docker) version of the server:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the server executable. If you&#39;re using 64-bit version of the operative system, make sure to pick the &lt;code&gt;arm64&lt;/code&gt; variant.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  cam:
    source: rpiCamera
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to run the server inside Docker, you need to use the &lt;code&gt;latest-rpi&lt;/code&gt; image and launch the container with some additional flags:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --rm -it \
--network=host \
--privileged \
--tmpfs /dev/shm:exec \
-v /run/udev:/run/udev:ro \
-e MTX_PATHS_CAM_SOURCE=rpiCamera \
bluenviron/mediamtx:latest-rpi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be aware that precompiled binaries and Docker images are not compatible with cameras that require a custom &lt;code&gt;libcamera&lt;/code&gt; (like some ArduCam products), since they come with a bundled &lt;code&gt;libcamera&lt;/code&gt;. If you want to use a custom one, you can &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#custom-libcamera&quot;&gt;compile from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Camera settings can be changed by using the &lt;code&gt;rpiCamera*&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  cam:
    source: rpiCamera
    rpiCameraWidth: 1920
    rpiCameraHeight: 1080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All available parameters are listed in the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml&quot;&gt;sample configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;Adding audio&lt;/h5&gt; 
&lt;p&gt;In order to add audio from a USB microfone, install GStreamer and alsa-utils:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install -y gstreamer1.0-tools gstreamer1.0-rtsp gstreamer1.0-alsa alsa-utils
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;list available audio cards with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;arecord -L
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sample output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;surround51:CARD=ICH5,DEV=0
    Intel ICH5, Intel ICH5
    5.1 Surround output to Front, Center, Rear and Subwoofer speakers
default:CARD=U0x46d0x809
    USB Device 0x46d:0x809, USB Audio
    Default Audio Device
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find the audio card of the microfone and take note of its name, for instance &lt;code&gt;default:CARD=U0x46d0x809&lt;/code&gt;. Then create a new path that takes the video stream from the camera and audio from the microphone:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  cam:
    source: rpiCamera

  cam_with_audio:
    runOnInit: &amp;gt;
      gst-launch-1.0
      rtspclientsink name=s location=rtsp://localhost:$RTSP_PORT/cam_with_audio
      rtspsrc location=rtsp://127.0.0.1:$RTSP_PORT/cam latency=0 ! rtph264depay ! s.
      alsasrc device=default:CARD=U0x46d0x809 ! opusenc bitrate=16000 ! s.
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam_with_audio&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Secondary stream&lt;/h5&gt; 
&lt;p&gt;It is possible to enable a secondary stream from the same camera, with a different resolution, FPS and codec. Configuration is the same of a primary stream, with &lt;code&gt;rpiCameraSecondary&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and parameters adjusted accordingly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  # primary stream
  rpi:
    source: rpiCamera
    # Width of frames.
    rpiCameraWidth: 1920
    # Height of frames.
    rpiCameraHeight: 1080
    # FPS.
    rpiCameraFPS: 30

  # secondary stream
  secondary:
    source: rpiCamera
    # This is a secondary stream.
    rpiCameraSecondary: true
    # Width of frames.
    rpiCameraWidth: 640
    # Height of frames.
    rpiCameraHeight: 480
    # FPS.
    rpiCameraFPS: 10
    # Codec. in case of secondary streams, it defaults to M-JPEG.
    rpiCameraCodec: auto
    # JPEG quality.
    rpiCameraMJPEGQuality: 60
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The secondary stream is available in path &lt;code&gt;/secondary&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;By protocol&lt;/h3&gt; 
&lt;h4&gt;SRT clients&lt;/h4&gt; 
&lt;p&gt;SRT is a protocol that allows to publish and read live data stream, providing encryption, integrity and a retransmission mechanism. It is usually used to transfer media streams encoded with MPEG-TS. In order to publish a stream to the server with the SRT protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=publish:mystream&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;mystream&lt;/code&gt; with any name you want. The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If credentials are enabled, append username and password to &lt;code&gt;streamid&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=publish:mystream:user:pass&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to use the standard stream ID syntax instead of the custom one in use by this server, see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax&quot;&gt;Standard stream ID syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to publish a stream by using a client in listening mode (i.e. with &lt;code&gt;mode=listener&lt;/code&gt; appended to the URL), read the next section.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with SRT are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio&quot;&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;SRT cameras and servers&lt;/h4&gt; 
&lt;p&gt;In order to ingest into the server a SRT stream from an existing server, camera or client in listening mode (i.e. with &lt;code&gt;mode=listener&lt;/code&gt; appended to the URL), add the corresponding URL into the &lt;code&gt;source&lt;/code&gt; parameter of a path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied:
    # url of the source stream, in the format srt://host:port?streamid=streamid&amp;amp;other_parameters
    source: srt://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;WebRTC clients&lt;/h4&gt; 
&lt;p&gt;WebRTC is an API that makes use of a set of protocols and methods to connect two clients together and allow them to exchange real-time media or data streams. You can publish a stream with WebRTC and a web browser by visiting:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;WHIP is a WebRTC extensions that allows to publish streams by using a URL, without passing through a web page. This allows to use WebRTC as a general purpose streaming protocol. If you are using a software that supports WHIP (for instance, latest versions of OBS Studio), you can publish a stream to the server by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/whip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding authentication, read &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep&quot;&gt;Authenticating with WHIP/WHEP&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Depending on the network it may be difficult to establish a connection between server and clients, read &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues&quot;&gt;Solving WebRTC connectivity issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with WebRTC and WHIP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio&quot;&gt;OBS Studio&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity&quot;&gt;Unity&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers&quot;&gt;Web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;WebRTC servers&lt;/h4&gt; 
&lt;p&gt;In order to ingest into the server a WebRTC stream from an existing server, add the corresponding WHEP URL into the &lt;code&gt;source&lt;/code&gt; parameter of a path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied:
    # url of the source stream, in the format whep://host:port/path (HTTP) or wheps:// (HTTPS)
    source: wheps://host:port/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTSP clients&lt;/h4&gt; 
&lt;p&gt;RTSP is a protocol that allows to publish and read streams. It supports different underlying transport protocols and allows to encrypt streams in transit (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). In order to publish a stream to the server with the RTSP protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with RTSP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio&quot;&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTSP cameras and servers&lt;/h4&gt; 
&lt;p&gt;Most IP cameras expose their video stream by using a RTSP server that is embedded into the camera itself. In particular, cameras that are compliant with ONVIF profile S or T meet this requirement. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing RTSP servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied:
    # url of the source stream, in the format rtsp://user:pass@host:port/path
    source: rtsp://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The server supports any number of source streams (count is just limited by available hardware resources) it&#39;s enough to add additional entries to the paths section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied1:
    source: rtsp://url1

  proxied2:
    source: rtsp://url1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTMP clients&lt;/h4&gt; 
&lt;p&gt;RTMP is a protocol that allows to read and publish streams, but is less versatile and less efficient than RTSP and WebRTC (doesn&#39;t support UDP, doesn&#39;t support most RTSP codecs, doesn&#39;t support feedback mechanism). Streams can be published to the server by using the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In case authentication is enabled, credentials can be passed to the server by using the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt; query parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can publish with RTMP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio&quot;&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTMP cameras and servers&lt;/h4&gt; 
&lt;p&gt;You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing RTMP servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied:
    # url of the source stream, in the format rtmp://user:pass@host:port/path
    source: rtmp://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;HLS cameras and servers&lt;/h4&gt; 
&lt;p&gt;HLS is a streaming protocol that works by splitting streams into segments, and by serving these segments and a playlist with the HTTP protocol. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing HLS servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  proxied:
    # url of the playlist of the stream, in the format http://user:pass@host:port/path
    source: http://original-url/stream/index.m3u8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;MPEG-TS&lt;/h4&gt; 
&lt;p&gt;The server supports ingesting MPEG-TS streams, shipped in two different ways (UDP packets or Unix sockets).&lt;/p&gt; 
&lt;p&gt;In order to read a UDP MPEG-TS stream, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: udp+mpegts://238.0.0.1:1234
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;238.0.0.1&lt;/code&gt; is the IP for listening packets, in this case a multicast IP.&lt;/p&gt; 
&lt;p&gt;You can generate a UDP multicast MPEG-TS stream with GStreamer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 -v mpegtsmux name=mux alignment=1 ! udpsink host=238.0.0.1 port=1234 \
videotestsrc ! video/x-raw,width=1280,height=720,format=I420 ! x264enc speed-preset=ultrafast bitrate=3000 key-int-max=60 ! video/x-h264,profile=high ! mux. \
audiotestsrc ! audioconvert ! avenc_aac ! mux.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f mpegts udp://238.0.0.1:1234?pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mypath&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If the listening IP is a multicast IP, &lt;em&gt;MediaMTX&lt;/em&gt; will listen for incoming packets on the default multicast interface, picked by the operating system. It is possible to specify the interface manually by using the &lt;code&gt;interface&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: udp+mpegts://238.0.0.1:1234?interface=eth0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to restrict who can send packets by using the &lt;code&gt;source&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: udp+mpegts://0.0.0.0:1234?source=192.168.3.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can publish with UDP and MPEG-TS are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unix sockets are more efficient than UDP packets and can be used as transport by specifying the &lt;code&gt;unix+mpegts&lt;/code&gt; scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: unix+mpegts:///tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FFmpeg can generate such streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f mpegts unix:/tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTP&lt;/h4&gt; 
&lt;p&gt;The server supports ingesting RTP streams, shipped in two different ways (UDP packets or Unix sockets).&lt;/p&gt; 
&lt;p&gt;In order to read a UDP RTP stream, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: udp+rtp://238.0.0.1:1234
    rtpSDP: |
      v=0
      o=- 123456789 123456789 IN IP4 192.168.1.100
      s=H264 Video Stream
      c=IN IP4 192.168.1.100
      t=0 0
      m=video 5004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e01e;packetization-mode=1;sprop-parameter-sets=Z0LAHtkDxWhAAAADAEAAAAwDxYuS,aMuMsg==
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;rtpSDP&lt;/code&gt; must contain a valid SDP, that is a description of the RTP session.&lt;/p&gt; 
&lt;p&gt;FFmpeg can generate a RTP over UDP stream:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f rtp udp://238.0.0.1:1234?pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The stream is available on path &lt;code&gt;/mypath&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with UDP and MPEG-TS are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg&quot;&gt;FFmpeg&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer&quot;&gt;GStreamer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unix sockets are more efficient than UDP packets and can be used as transport by specifying the &lt;code&gt;unix+rtp&lt;/code&gt; scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    source: unix+rtp:///tmp/socket.sock
    rtpSDP: |
      v=0
      o=- 123456789 123456789 IN IP4 192.168.1.100
      s=H264 Video Stream
      c=IN IP4 192.168.1.100
      t=0 0
      m=video 5004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e01e;packetization-mode=1;sprop-parameter-sets=Z0LAHtkDxWhAAAADAEAAAAwDxYuS,aMuMsg==
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FFmpeg can generate such streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f rtp unix:/tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Read from the server&lt;/h2&gt; 
&lt;h3&gt;By software&lt;/h3&gt; 
&lt;h4&gt;FFmpeg&lt;/h4&gt; 
&lt;p&gt;FFmpeg can read a stream from the server in several ways (RTSP, RTMP, HLS, WebRTC with WHEP, SRT). The recommended one consists in reading with &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp&quot;&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;rtsp_transport&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -rtsp_transport tcp -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;GStreamer&lt;/h4&gt; 
&lt;p&gt;GStreamer can read a stream from the server in several ways (RTSP, RTMP, HLS, WebRTC with WHEP, SRT). The recommended one consists in reading with &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp&quot;&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 rtspsrc location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). You can change the transport protocol by using the &lt;code&gt;protocols&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 rtspsrc protocols=tcp location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If encryption is enabled, set &lt;code&gt;tls-validation-flags&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 rtspsrc tls-validation-flags=0 location=rtsps://ip:8322/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GStreamer also supports reading streams with WebRTC/WHEP, although track codecs must be specified in advance through the &lt;code&gt;video-caps&lt;/code&gt; and &lt;code&gt;audio-caps&lt;/code&gt; parameters. Furthermore, if audio is not present, &lt;code&gt;audio-caps&lt;/code&gt; must be set anyway and must point to a PCMU codec. For instance, the command for reading a video-only H264 stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \
video-caps=&quot;application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000&quot; \
audio-caps=&quot;application/x-rtp,media=audio,encoding-name=PCMU,payload=0,clock-rate=8000&quot; \
! rtph264depay ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the command for reading an audio-only Opus stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 whepsrc whep-endpoint=&quot;http://127.0.0.1:8889/stream/whep&quot; use-link-headers=true \
audio-caps=&quot;application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2&quot; \
! rtpopusdepay ! decodebin ! autoaudiosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the command for reading a H264 and Opus stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \
video-caps=&quot;application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000&quot; \
audio-caps=&quot;application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2&quot; \
! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;VLC&lt;/h4&gt; 
&lt;p&gt;VLC can read a stream from the server in several ways (RTSP, RTMP, HLS, SRT). The recommended one consists in reading with &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp&quot;&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In order to use the TCP transport protocol, use the &lt;code&gt;--rtsp_tcp&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vlc --network-caching=50 --rtsp-tcp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to use the UDP-multicast transport protocol, append &lt;code&gt;?vlcmulticast&lt;/code&gt; to the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream?vlcmulticast
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Ubuntu bug&lt;/h5&gt; 
&lt;p&gt;The VLC shipped with Ubuntu 21.10 doesn&#39;t support playing RTSP due to a license issue (see &lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=982299&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/69766748/cvlc-cannot-play-rtsp-omxplayer-instead-can&quot;&gt;here&lt;/a&gt;). To fix the issue, remove the default VLC instance and install the snap version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt purge -y vlc
snap install vlc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Encrypted streams&lt;/h5&gt; 
&lt;p&gt;At the moment VLC doesn&#39;t support reading encrypted RTSP streams. However, you can use a proxy like &lt;a href=&quot;https://www.stunnel.org&quot;&gt;stunnel&lt;/a&gt; or &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; or a local &lt;em&gt;MediaMTX&lt;/em&gt; instance to decrypt streams before reading them.&lt;/p&gt; 
&lt;h4&gt;Unity&lt;/h4&gt; 
&lt;p&gt;Software written with the Unity Engine can read a stream from the server by using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc&quot;&gt;WebRTC protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Create a new Unity project or open an existing open.&lt;/p&gt; 
&lt;p&gt;Open &lt;em&gt;Window -&amp;gt; Package Manager&lt;/em&gt;, click on the plus sign, &lt;em&gt;Add Package by name...&lt;/em&gt; and insert &lt;code&gt;com.unity.webrtc&lt;/code&gt;. Wait for the package to be installed.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Project&lt;/em&gt; window, under &lt;code&gt;Assets&lt;/code&gt;, create a new C# Script called &lt;code&gt;WebRTCReader.cs&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cs&quot;&gt;using System.Collections;
using UnityEngine;
using Unity.WebRTC;

public class WebRTCReader : MonoBehaviour
{
    public string url = &quot;http://localhost:8889/stream/whep&quot;;

    private RTCPeerConnection pc;
    private MediaStream receiveStream;

    void Start()
    {
        UnityEngine.UI.RawImage rawImage = gameObject.GetComponentInChildren&amp;lt;UnityEngine.UI.RawImage&amp;gt;();
        AudioSource audioSource = gameObject.GetComponentInChildren&amp;lt;AudioSource&amp;gt;();
        pc = new RTCPeerConnection();
        receiveStream = new MediaStream();

        pc.OnTrack = e =&amp;gt;
        {
            receiveStream.AddTrack(e.Track);
        };

        receiveStream.OnAddTrack = e =&amp;gt;
        {
            if (e.Track is VideoStreamTrack videoTrack)
            {
                videoTrack.OnVideoReceived += (tex) =&amp;gt;
                {
                    rawImage.texture = tex;
                };
            }
            else if (e.Track is AudioStreamTrack audioTrack)
            {
                audioSource.SetTrack(audioTrack);
                audioSource.loop = true;
                audioSource.Play();
            }
        };

        RTCRtpTransceiverInit init = new RTCRtpTransceiverInit();
        init.direction = RTCRtpTransceiverDirection.RecvOnly;
        pc.AddTransceiver(TrackKind.Audio, init);
        pc.AddTransceiver(TrackKind.Video, init);

        StartCoroutine(WebRTC.Update());
        StartCoroutine(createOffer());
    }

    private IEnumerator createOffer()
    {
        var op = pc.CreateOffer();
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;CreateOffer() failed&quot;);
            yield break;
        }

        yield return setLocalDescription(op.Desc);
    }

    private IEnumerator setLocalDescription(RTCSessionDescription offer)
    {
        var op = pc.SetLocalDescription(ref offer);
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;SetLocalDescription() failed&quot;);
            yield break;
        }

        yield return postOffer(offer);
    }

    private IEnumerator postOffer(RTCSessionDescription offer)
    {
        var content = new System.Net.Http.StringContent(offer.sdp);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(&quot;application/sdp&quot;);
        var client = new System.Net.Http.HttpClient();

        var task = System.Threading.Tasks.Task.Run(async () =&amp;gt; {
            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);
            res.EnsureSuccessStatusCode();
            return await res.Content.ReadAsStringAsync();
        });
        yield return new WaitUntil(() =&amp;gt; task.IsCompleted);
        if (task.Exception != null) {
            Debug.LogError(task.Exception);
            yield break;
        }

        yield return setRemoteDescription(task.Result);
    }

    private IEnumerator setRemoteDescription(string answer)
    {
        RTCSessionDescription desc = new RTCSessionDescription();
        desc.type = RTCSdpType.Answer;
        desc.sdp = answer;
        var op = pc.SetRemoteDescription(ref desc);
        yield return op;
        if (op.IsError) {
            Debug.LogError(&quot;SetRemoteDescription() failed&quot;);
            yield break;
        }

        yield break;
    }

    void OnDestroy()
    {
        pc?.Close();
        pc?.Dispose();
        receiveStream?.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit the &lt;code&gt;url&lt;/code&gt; variable according to your needs.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Hierarchy&lt;/em&gt; window, find or create a scene. Inside the scene, add a &lt;em&gt;Canvas&lt;/em&gt;. Inside the Canvas, add a &lt;em&gt;Raw Image&lt;/em&gt; and an &lt;em&gt;Audio Source&lt;/em&gt;. Then add the &lt;code&gt;WebRTCReader.cs&lt;/code&gt; script as component of the canvas, by dragging it inside the &lt;em&gt;Inspector&lt;/em&gt; window. then Press the &lt;em&gt;Play&lt;/em&gt; button at the top of the page.&lt;/p&gt; 
&lt;h4&gt;Web browsers&lt;/h4&gt; 
&lt;p&gt;Web browsers can read a stream from the server in several ways (WebRTC or HLS).&lt;/p&gt; 
&lt;p&gt;You can read a stream by using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-1&quot;&gt;WebRTC protocol&lt;/a&gt; by visiting the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;iframe src=&quot;http://mediamtx-ip:8889/mystream&quot; scrolling=&quot;no&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/read_index.html&quot;&gt;source code of the WebRTC read page&lt;/a&gt;. In particular, there&#39;s a ready-to-use, standalone JavaScript class for reading streams with WebRTC, available in &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/reader.js&quot;&gt;reader.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Web browsers can also read a stream with the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls&quot;&gt;HLS protocol&lt;/a&gt;. Latency is higher but there are less problems related to connectivity between server and clients, furthermore the server load can be balanced by using a common HTTP CDN (like CloudFront or Cloudflare), and this allows to handle readers in the order of millions. Visit the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;iframe src=&quot;http://mediamtx-ip:8888/mystream&quot; scrolling=&quot;no&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/hls/index.html&quot;&gt;source code of the HLS read page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;By protocol&lt;/h3&gt; 
&lt;h4&gt;SRT&lt;/h4&gt; 
&lt;p&gt;SRT is a protocol that allows to publish and read live data stream, providing encryption, integrity and a retransmission mechanism. It is usually used to transfer media streams encoded with MPEG-TS. In order to read a stream from the server with the SRT protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=read:mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;mystream&lt;/code&gt; with the path name.&lt;/p&gt; 
&lt;p&gt;If credentials are enabled, append username and password to &lt;code&gt;streamid&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=read:mystream:user:pass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to use the standard stream ID syntax instead of the custom one in use by this server, see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax&quot;&gt;Standard stream ID syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can read with SRT are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc&quot;&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;WebRTC&lt;/h4&gt; 
&lt;p&gt;WebRTC is an API that makes use of a set of protocols and methods to connect two clients together and allow them to exchange real-time media or data streams. You can read a stream with WebRTC and a web browser by visiting:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;WHEP is a WebRTC extensions that allows to read streams by using a URL, without passing through a web page. This allows to use WebRTC as a general purpose streaming protocol. If you are using a software that supports WHEP, you can read a stream from the server by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/whep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding authentication, read &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep&quot;&gt;Authenticating with WHIP/WHEP&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Depending on the network it may be difficult to establish a connection between server and clients, read &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues&quot;&gt;Solving WebRTC connectivity issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can read with WebRTC and WHEP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity-1&quot;&gt;Unity&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1&quot;&gt;web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTSP&lt;/h4&gt; 
&lt;p&gt;RTSP is a protocol that allows to publish and read streams. It supports different underlying transport protocols and allows to encrypt streams in transit (see &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features&quot;&gt;RTSP-specific features&lt;/a&gt;). In order to read a stream with the RTSP protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with RTSP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc&quot;&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;Latency&lt;/h5&gt; 
&lt;p&gt;The RTSP protocol doesn&#39;t introduce any latency by itself. Latency is usually introduced by clients, that put frames in a buffer to compensate network fluctuations. In order to decrease latency, the best way consists in tuning the client. For instance, in VLC, latency can be decreased by decreasing the &lt;em&gt;Network caching&lt;/em&gt; parameter, that is available in the &lt;em&gt;Open network stream&lt;/em&gt; dialog or alternatively can be set with the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vlc --network-caching=50 rtsp://...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTMP&lt;/h4&gt; 
&lt;p&gt;RTMP is a protocol that allows to read and publish streams, but is less versatile and less efficient than RTSP and WebRTC (doesn&#39;t support UDP, doesn&#39;t support most RTSP codecs, doesn&#39;t support feedback mechanism). Streams can be read from the server by using the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case authentication is enabled, credentials can be passed to the server by using the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt; query parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with RTMP are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc&quot;&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;HLS&lt;/h4&gt; 
&lt;p&gt;HLS is a protocol that works by splitting streams into segments, and by serving these segments and a playlist with the HTTP protocol. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to generate a HLS stream, that is accessible through a web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and can also be accessed without using the browsers, by software that supports the HLS protocol (for instance VLC or &lt;em&gt;MediaMTX&lt;/em&gt; itself) by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream/index.m3u8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with HLS are &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1&quot;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1&quot;&gt;GStreamer&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc&quot;&gt;VLC&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1&quot;&gt;web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;LL-HLS&lt;/h5&gt; 
&lt;p&gt;Low-Latency HLS is a recently standardized variant of the protocol that allows to greatly reduce playback latency. It works by splitting segments into parts, that are served before the segment is complete. LL-HLS is enabled by default. If the stream is not shown correctly, try tuning the hlsPartDuration parameter, for instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;hlsPartDuration: 500ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Compatibility with Apple devices&lt;/h5&gt; 
&lt;p&gt;In order to correctly display Low-Latency HLS streams in Safari running on Apple devices (iOS or macOS), a TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set the &lt;code&gt;hlsEncryption&lt;/code&gt;, &lt;code&gt;hlsServerKey&lt;/code&gt; and &lt;code&gt;hlsServerCert&lt;/code&gt; parameters in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;hlsEncryption: yes
hlsServerKey: server.key
hlsServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep also in mind that not all H264 video streams can be played on Apple Devices due to some intrinsic properties (distance between I-Frames, profile). If the video can&#39;t be played correctly, you can either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;re-encode it by following instructions in this README&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;disable the Low-latency variant of HLS and go back to the legacy variant:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;  hlsVariant: mpegts
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Latency&lt;/h5&gt; 
&lt;p&gt;in HLS, latency is introduced since a client must wait for the server to generate segments before downloading them. This latency amounts to 500ms-3s when the low-latency HLS variant is enabled (and it is by default), otherwise amounts to 1-15secs.&lt;/p&gt; 
&lt;p&gt;To decrease the latency, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;try decreasing the hlsPartDuration parameter&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;try decreasing the hlsSegmentDuration parameter&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The segment duration is influenced by the interval between the IDR frames of the video track. An IDR frame is a frame that can be decoded independently from the others. The server changes the segment duration in order to include at least one IDR frame into each segment. Therefore, you need to decrease the interval between the IDR frames. This can be done in two ways:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;if the stream is being hardware-generated (i.e. by a camera), there&#39;s usually a setting called Key-Frame Interval in the camera configuration page&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;otherwise, the stream must be re-encoded. It&#39;s possible to tune the IDR frame interval by using ffmpeg&#39;s -g option:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -i rtsp://original-stream -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -max_muxing_queue_size 1024 -g 30 -f rtsp rtsp://localhost:$RTSP_PORT/compressed
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other features&lt;/h2&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;All the configuration parameters are listed and commented in the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml&quot;&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are 3 ways to change the configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;By editing the &lt;code&gt;mediamtx.yml&lt;/code&gt; file, that is&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;included into the release bundle&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;available in the root folder of the Docker image (&lt;code&gt;/mediamtx.yml&lt;/code&gt;); it can be overridden in this way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host -v &quot;$PWD/mediamtx.yml:/mediamtx.yml:ro&quot; bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The configuration can be changed dynamically when the server is running (hot reloading) by writing to the configuration file. Changes are detected and applied without disconnecting existing clients, whenever it&#39;s possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By overriding configuration parameters with environment variables, in the format &lt;code&gt;MTX_PARAMNAME&lt;/code&gt;, where &lt;code&gt;PARAMNAME&lt;/code&gt; is the uppercase name of a parameter. For instance, the &lt;code&gt;rtspAddress&lt;/code&gt; parameter can be overridden in the following way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_RTSPADDRESS=&quot;127.0.0.1:8554&quot; ./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Parameters that have array as value can be overridden by setting a comma-separated list. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_RTSPTRANSPORTS=&quot;tcp,udp&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Parameters in maps can be overridden by using underscores, in the following way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_PATHS_TEST_SOURCE=rtsp://myurl ./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method is particularly useful when using Docker; any configuration parameter can be changed by passing environment variables with the &lt;code&gt;-e&lt;/code&gt; flag:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host -e MTX_PATHS_TEST_SOURCE=rtsp://myurl bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By using the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#control-api&quot;&gt;Control API&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;h4&gt;Internal&lt;/h4&gt; 
&lt;p&gt;The server provides three methods to authenticate users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Internal: users are stored in the configuration file&lt;/li&gt; 
 &lt;li&gt;HTTP-based: an external HTTP URL is contacted to perform authentication&lt;/li&gt; 
 &lt;li&gt;JWT: an external identity server provides authentication through JWTs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The internal authentication method is the default one. Users are stored inside the configuration file, in this format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authInternalUsers:
  # Username. &#39;any&#39; means any user, including anonymous ones.
- user: any
  # Password. Not used in case of &#39;any&#39; user.
  pass:
  # IPs or networks allowed to use this user. An empty list means any IP.
  ips: []
  # List of permissions.
  permissions:
    # Available actions are: publish, read, playback, api, metrics, pprof.
  - action: publish
    # Paths can be set to further restrict access to a specific path.
    # An empty path means any path.
    # Regular expressions can be used by using a tilde as prefix.
    path:
  - action: read
    path:
  - action: playback
    path:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Only clients that provide username and passwords will be able to perform a certain action:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://myuser:mypass@localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If storing plain credentials in the configuration file is a security problem, username and passwords can be stored as hashed strings. The Argon2 and SHA256 hashing algorithms are supported. To use Argon2, the string must be hashed using Argon2id (recommended) or Argon2i:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo -n &quot;mypass&quot; | argon2 saltItWithSalt -id -l 32 -e
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then stored with the &lt;code&gt;argon2:&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authInternalUsers:
- user: argon2:$argon2id$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$OGGO0eCMN0ievb4YGSzvS/H+Vajx1pcbUmtLp2tRqRU
  pass: argon2:$argon2i$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$oct3kOiFywTdDdt19kT07hdvmsPTvt9zxAUho2DLqZw
  permissions:
  - action: publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use SHA256, the string must be hashed with SHA256 and encoded with base64:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo -n &quot;mypass&quot; | openssl dgst -binary -sha256 | openssl base64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then stored with the &lt;code&gt;sha256:&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authInternalUsers:
- user: sha256:j1tsRqDEw9xvq/D7/9tMx6Jh/jMhk3UfjwIB2f1zgMo=
  pass: sha256:BdSWkrdV+ZxFBLUQQY7+7uv9RmiSVA8nrPmjGjJtZQQ=
  permissions:
  - action: publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: enable encryption or use a VPN to ensure that no one is intercepting the credentials in transit.&lt;/p&gt; 
&lt;h4&gt;HTTP-based&lt;/h4&gt; 
&lt;p&gt;Authentication can be delegated to an external HTTP server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authMethod: http
authHTTPAddress: http://myauthserver/auth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each time a user needs to be authenticated, the specified URL will be requested with the POST method and this payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;user&quot;: &quot;user&quot;,
  &quot;password&quot;: &quot;password&quot;,
  &quot;token&quot;: &quot;token&quot;,
  &quot;ip&quot;: &quot;ip&quot;,
  &quot;action&quot;: &quot;publish|read|playback|api|metrics|pprof&quot;,
  &quot;path&quot;: &quot;path&quot;,
  &quot;protocol&quot;: &quot;rtsp|rtmp|hls|webrtc|srt&quot;,
  &quot;id&quot;: &quot;id&quot;,
  &quot;query&quot;: &quot;query&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the URL returns a status code that begins with &lt;code&gt;20&lt;/code&gt; (i.e. &lt;code&gt;200&lt;/code&gt;), authentication is successful, otherwise it fails. Be aware that it&#39;s perfectly normal for the authentication server to receive requests with empty users and passwords, i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;user&quot;: &quot;&quot;,
  &quot;password&quot;: &quot;&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This happens because RTSP clients don&#39;t provide credentials until they are asked to. In order to receive the credentials, the authentication server must reply with status code &lt;code&gt;401&lt;/code&gt;, then the client will send credentials.&lt;/p&gt; 
&lt;p&gt;Some actions can be excluded from the process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# Actions to exclude from HTTP-based authentication.
# Format is the same as the one of user permissions.
authHTTPExclude:
- action: api
- action: metrics
- action: pprof
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JWT-based&lt;/h4&gt; 
&lt;p&gt;Authentication can be delegated to an external identity server, that is capable of generating JWTs and provides a JWKS endpoint. With respect to the HTTP-based method, this has the advantage that the external server is contacted once, and not for every request, greatly improving performance. In order to use the JWT-based authentication method, set &lt;code&gt;authMethod&lt;/code&gt; and &lt;code&gt;authJWTJWKS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authMethod: jwt
authJWTJWKS: http://my_identity_server/jwks_endpoint
authJWTClaimKey: mediamtx_permissions
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The JWT is expected to contain a claim, with a list of permissions in the same format as the one of user permissions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
 &quot;mediamtx_permissions&quot;: [
    {
      &quot;action&quot;: &quot;publish&quot;,
      &quot;path&quot;: &quot;&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clients are expected to pass the JWT in one of the following ways (from best to worst):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; HTTP header. This is possible if the protocol or feature is based on HTTP, like HLS, WebRTC, API, Metrics, pprof.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;As password. Username is arbitrary.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;As query parameter in the URL, with the &lt;code&gt;jwt&lt;/code&gt; key. This method is discouraged since the JWT is publicly shared when the URL is shared, causing a security issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;These are the recommended methods for each client:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;client&lt;/th&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;method&lt;/th&gt; 
   &lt;th&gt;notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web browsers&lt;/td&gt; 
   &lt;td&gt;HLS&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web browsers&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OBS Studio&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OBS Studio&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;FFmpeg&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;password is truncated and cannot be used&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;FFmpeg&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;unsupported&lt;/td&gt; 
   &lt;td&gt;Passwords and query parameters are currently truncated to 1024 characters by FFmpeg, so it&#39;s impossible to use FFMPEG+RTMP+JWT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GStreamer&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
   &lt;td&gt;Password&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GStreamer&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;any&lt;/td&gt; 
   &lt;td&gt;SRT&lt;/td&gt; 
   &lt;td&gt;unsupported&lt;/td&gt; 
   &lt;td&gt;SRT truncates passwords and query parameters to 512 characters, so it&#39;s impossible to use SRT+JWT. See &lt;a href=&quot;https://github.com/bluenviron/mediamtx/issues/3430&quot;&gt;#3430&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here&#39;s a tutorial on how to setup the &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak identity server&lt;/a&gt; in order to provide JWTs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Start Keycloak:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --name=keycloak -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:23.0.7 start-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the Keycloak administration console on &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;, click on &lt;em&gt;master&lt;/em&gt; in the top left corner, &lt;em&gt;create realm&lt;/em&gt;, set realm name to &lt;code&gt;mediamtx&lt;/code&gt;, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Client scopes&lt;/em&gt;, &lt;em&gt;create client scope&lt;/em&gt;, set name to &lt;code&gt;mediamtx&lt;/code&gt;, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Mappers&lt;/em&gt;, &lt;em&gt;Configure a new Mapper&lt;/em&gt;, &lt;em&gt;User Attribute&lt;/em&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Name: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;User Attribute: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Token Claim Name: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Claim JSON Type: &lt;code&gt;JSON&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Multivalued: &lt;code&gt;On&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Clients&lt;/em&gt;, &lt;em&gt;Create client&lt;/em&gt;, set Client ID to &lt;code&gt;mediamtx&lt;/code&gt;, Next, Client authentication &lt;code&gt;On&lt;/code&gt;, Next, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Credentials&lt;/em&gt;, copy client secret somewhere&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Client scopes&lt;/em&gt;, &lt;em&gt;Add client scope&lt;/em&gt;, Select &lt;code&gt;mediamtx&lt;/code&gt;, Add, Default&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Users&lt;/em&gt;, &lt;em&gt;Add user&lt;/em&gt;, Username &lt;code&gt;testuser&lt;/code&gt;, Tab credentials, &lt;em&gt;Set password&lt;/em&gt;, pick a password, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Attributes&lt;/em&gt;, &lt;em&gt;Add an attribute&lt;/em&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Key: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Value: &lt;code&gt;{&quot;action&quot;:&quot;publish&quot;, &quot;path&quot;: &quot;&quot;}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can add as many attributes with key &lt;code&gt;mediamtx_permissions&lt;/code&gt; as you want, each with a single permission in it&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In MediaMTX, use the following URL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;authJWTJWKS: http://localhost:8080/realms/mediamtx/protocol/openid-connect/certs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Perform authentication on Keycloak:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;curl \
-d &quot;client_id=mediamtx&quot; \
-d &quot;client_secret=$CLIENT_SECRET&quot; \
-d &quot;username=$USER&quot; \
-d &quot;password=$PASS&quot; \
-d &quot;grant_type=password&quot; \
http://localhost:8080/realms/mediamtx/protocol/openid-connect/token
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The JWT is inside the &lt;code&gt;access_token&lt;/code&gt; key of the response:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{&quot;access_token&quot;:&quot;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyNzVjX3ptOVlOdHQ0TkhwWVk4Und6ZndUclVGSzRBRmQwY3lsM2wtY3pzIn0.eyJleHAiOjE3MDk1NTUwOTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMzE3ZTQ1NGUtNzczMi00OTM1LWExNzAtOTNhYzQ2ODhhYWIxIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZWRpYW10eCIsInNlc3Npb25fc3RhdGUiOiJjYzJkNDhjYy1kMmU5LTQ0YjAtODkzZS0wYTdhNjJiZDI1YmQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIi8qIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1tZWRpYW10eCJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoibWVkaWFtdHggcHJvZmlsZSBlbWFpbCIsInNpZCI6ImNjMmQ0OGNjLWQyZTktNDRiMC04OTNlLTBhN2E2MmJkMjViZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibWVkaWFtdHhfcGVybWlzc2lvbnMiOlt7ImFjdGlvbiI6InB1Ymxpc2giLCJwYXRocyI6ImFsbCJ9XSwicHJlZmVycmVkX3VzZXJuYW1lIjoidGVzdHVzZXIifQ.Gevz7rf1qHqFg7cqtSfSP31v_NS0VH7MYfwAdra1t6Yt5rTr9vJzqUeGfjYLQWR3fr4XC58DrPOhNnILCpo7jWRdimCnbPmuuCJ0AYM-Aoi3PAsWZNxgmtopq24_JokbFArY9Y1wSGFvF8puU64lt1jyOOyxf2M4cBHCs_EarCKOwuQmEZxSf8Z-QV9nlfkoTUszDCQTiKyeIkLRHL2Iy7Fw7_T3UI7sxJjVIt0c6HCNJhBBazGsYzmcSQ_GrmhbUteMTg00o6FicqkMBe99uZFnx9wIBm_QbO9hbAkkzF923I-DTAQrFLxT08ESMepDwmzFrmnwWYBLE3u8zuUlCA&quot;,&quot;expires_in&quot;:300,&quot;refresh_expires_in&quot;:1800,&quot;refresh_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3OTI3Zjg4Zi05YWM4LTRlNmEtYWE1OC1kZmY0MDQzZDRhNGUifQ.eyJleHAiOjE3MDk1NTY1OTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMGVhZWFhMWItYzNhMC00M2YxLWJkZjAtZjI2NTRiODlkOTE3IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWFsbXMvbWVkaWFtdHgiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoibWVkaWFtdHgiLCJzZXNzaW9uX3N0YXRlIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIiwic2NvcGUiOiJtZWRpYW10eCBwcm9maWxlIGVtYWlsIiwic2lkIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIn0.yuXV8_JU0TQLuosNdp5xlYMjn7eO5Xq-PusdHzE7bsQ&quot;,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;not-before-policy&quot;:0,&quot;session_state&quot;:&quot;cc2d48cc-d2e9-44b0-893e-0a7a62bd25bd&quot;,&quot;scope&quot;:&quot;mediamtx profile email&quot;}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Encrypt the configuration&lt;/h3&gt; 
&lt;p&gt;The configuration file can be entirely encrypted for security purposes by using the &lt;code&gt;crypto_secretbox&lt;/code&gt; function of the NaCL function. An online tool for performing this operation is &lt;a href=&quot;https://play.golang.org/p/rX29jwObNe4&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After performing the encryption, put the base64-encoded result into the configuration file, and launch the server with the &lt;code&gt;MTX_CONFKEY&lt;/code&gt; variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MTX_CONFKEY=mykey ./mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remuxing, re-encoding, compression&lt;/h3&gt; 
&lt;p&gt;To change the format, codec or compression of a stream, use &lt;em&gt;FFmpeg&lt;/em&gt; or &lt;em&gt;GStreamer&lt;/em&gt; together with &lt;em&gt;MediaMTX&lt;/em&gt;. For instance, to re-encode an existing stream, that is available in the &lt;code&gt;/original&lt;/code&gt; path, and publish the resulting stream in the &lt;code&gt;/compressed&lt;/code&gt; path, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  compressed:
  original:
    runOnReady: &amp;gt;
      ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH
        -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k
        -max_muxing_queue_size 1024 -f rtsp rtsp://localhost:$RTSP_PORT/compressed
    runOnReadyRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Record streams to disk&lt;/h3&gt; 
&lt;p&gt;To save available streams to disk, set the &lt;code&gt;record&lt;/code&gt; and the &lt;code&gt;recordPath&lt;/code&gt; parameter in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Record streams to disk.
  record: yes
  # Path of recording segments.
  # Extension is added automatically.
  # Available variables are %path (path name), %Y %m %d (year, month, day),
  # %H %M %S (hours, minutes, seconds), %f (microseconds), %z (time zone), %s (unix epoch).
  recordPath: ./recordings/%path/%Y-%m-%d_%H-%M-%S-%f
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All available recording parameters are listed in the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml&quot;&gt;sample configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Be aware that not all codecs can be saved with all formats, as described in the compatibility matrix at the beginning of the README.&lt;/p&gt; 
&lt;p&gt;To upload recordings to a remote location, you can use &lt;em&gt;MediaMTX&lt;/em&gt; together with &lt;a href=&quot;https://github.com/rclone/rclone&quot;&gt;rclone&lt;/a&gt;, a command line tool that provides file synchronization capabilities with a huge variety of services (including S3, FTP, SMB, Google Drive):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download and install &lt;a href=&quot;https://github.com/rclone/rclone&quot;&gt;rclone&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Configure &lt;em&gt;rclone&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rclone config
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Place &lt;code&gt;rclone&lt;/code&gt; into the &lt;code&gt;runOnInit&lt;/code&gt; and &lt;code&gt;runOnRecordSegmentComplete&lt;/code&gt; hooks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # this is needed to sync segments after a crash.
  # replace myconfig with the name of the rclone config.
  runOnInit: rclone sync -v ./recordings myconfig:/my-path/recordings

  # this is called when a segment has been finalized.
  # replace myconfig with the name of the rclone config.
  runOnRecordSegmentComplete: rclone sync -v --min-age=1ms ./recordings myconfig:/my-path/recordings
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to delete local segments after they are uploaded, replace &lt;code&gt;rclone sync&lt;/code&gt; with &lt;code&gt;rclone move&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Playback recorded streams&lt;/h3&gt; 
&lt;p&gt;Existing recordings can be served to users through a dedicated HTTP server, that can be enabled inside the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;playback: yes
playbackAddress: :9996
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server provides an endpoint to list recorded timespans:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/list?path=[mypath]&amp;amp;start=[start]&amp;amp;end=[end]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[mypath] is the name of a path&lt;/li&gt; 
 &lt;li&gt;[start] (optional) is the start date in &lt;a href=&quot;https://www.utctime.net/&quot;&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[end] (optional) is the end date in &lt;a href=&quot;https://www.utctime.net/&quot;&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The server will return a list of timespans in JSON format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[
  {
    &quot;start&quot;: &quot;2006-01-02T15:04:05Z07:00&quot;,
    &quot;duration&quot;: 60.0,
    &quot;url&quot;: &quot;http://localhost:9996/get?path=[mypath]&amp;amp;start=2006-01-02T15%3A04%3A05Z07%3A00&amp;amp;duration=60.0&quot;
  },
  {
    &quot;start&quot;: &quot;2006-01-02T15:07:05Z07:00&quot;,
    &quot;duration&quot;: 32.33,
    &quot;url&quot;: &quot;http://localhost:9996/get?path=[mypath]&amp;amp;start=2006-01-02T15%3A07%3A05Z07%3A00&amp;amp;duration=32.33&quot;
  }
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server provides an endpoint to download recordings:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=[mypath]&amp;amp;start=[start]&amp;amp;duration=[duration]&amp;amp;format=[format]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[mypath] is the path name&lt;/li&gt; 
 &lt;li&gt;[start] is the start date in &lt;a href=&quot;https://www.utctime.net/&quot;&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[duration] is the maximum duration of the recording in seconds&lt;/li&gt; 
 &lt;li&gt;[format] (optional) is the output format of the stream. Available values are &quot;fmp4&quot; (default) and &quot;mp4&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All parameters must be &lt;a href=&quot;https://www.urlencoder.org/&quot;&gt;url-encoded&lt;/a&gt;. For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=mypath&amp;amp;start=2024-01-14T16%3A33%3A17%2B00%3A00&amp;amp;duration=200.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream uses the fMP4 format, that is natively compatible with any browser, therefore its URL can be directly inserted into a &amp;lt;video&amp;gt; tag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;video controls&amp;gt;
  &amp;lt;source src=&quot;http://localhost:9996/get?path=[mypath]&amp;amp;start=[start_date]&amp;amp;duration=[duration]&quot; type=&quot;video/mp4&quot; /&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The fMP4 format may offer limited compatibility with some players. To fix the issue, it&#39;s possible to use the standard MP4 format, by adding &lt;code&gt;format=mp4&lt;/code&gt; to a &lt;code&gt;/get&lt;/code&gt; request:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=[mypath]&amp;amp;start=[start_date]&amp;amp;duration=[duration]&amp;amp;format=mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Forward streams to other servers&lt;/h3&gt; 
&lt;p&gt;To forward incoming streams to another server, use &lt;em&gt;FFmpeg&lt;/em&gt; inside the &lt;code&gt;runOnReady&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  runOnReady: &amp;gt;
    ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH
    -c copy
    -f rtsp rtsp://other-server:8554/another-path
  runOnReadyRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Proxy requests to other servers&lt;/h3&gt; 
&lt;p&gt;The server allows to proxy incoming requests to other servers or cameras. This is useful to expose servers or cameras behind a NAT. Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  &quot;~^proxy_(.+)$&quot;:
    # If path name is a regular expression, $G1, G2, etc will be replaced
    # with regular expression groups.
    source: rtsp://other-server:8554/$G1
    sourceOnDemand: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All requests addressed to &lt;code&gt;rtsp://server:8854/proxy_a&lt;/code&gt; will be forwarded to &lt;code&gt;rtsp://other-server:8854/a&lt;/code&gt; and so on.&lt;/p&gt; 
&lt;h3&gt;On-demand publishing&lt;/h3&gt; 
&lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  ondemand:
    runOnDemand: ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnDemandRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command inserted into &lt;code&gt;runOnDemand&lt;/code&gt; will start only when a client requests the path &lt;code&gt;ondemand&lt;/code&gt;, therefore the file will start streaming only when requested.&lt;/p&gt; 
&lt;h3&gt;Route absolute timestamps&lt;/h3&gt; 
&lt;p&gt;Some streaming protocols allow to route absolute timestamps, associated with each frame, that are useful for synchronizing several video or data streams together. In particular, &lt;em&gt;MediaMTX&lt;/em&gt; supports receiving absolute timestamps with the following protocols and devices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS (through the &lt;code&gt;EXT-X-PROGRAM-DATE-TIME&lt;/code&gt; tag in playlists)&lt;/li&gt; 
 &lt;li&gt;RTSP (through RTCP reports, when &lt;code&gt;useAbsoluteTimestamp&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in settings)&lt;/li&gt; 
 &lt;li&gt;WebRTC (through RTCP reports, when &lt;code&gt;useAbsoluteTimestamp&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in settings)&lt;/li&gt; 
 &lt;li&gt;Raspberry Pi Camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;and supports sending absolute timestamps with the following protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS (through the &lt;code&gt;EXT-X-PROGRAM-DATE-TIME&lt;/code&gt; tag in playlists)&lt;/li&gt; 
 &lt;li&gt;RTSP (through RTCP reports)&lt;/li&gt; 
 &lt;li&gt;WebRTC (through RTCP reports)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A library that can read absolute timestamps with HLS is &lt;a href=&quot;https://github.com/bluenviron/gohlslib&quot;&gt;gohlslib&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A library that can read absolute timestamps with RTSP is &lt;a href=&quot;https://github.com/bluenviron/gortsplib&quot;&gt;gortsplib&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A browser can read read absolute timestamps with WebRTC if it exposes the &lt;a href=&quot;https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-estimatedplayouttimestamp&quot;&gt;estimatedPlayoutTimestamp&lt;/a&gt; statistic.&lt;/p&gt; 
&lt;h3&gt;Expose the server in a subfolder&lt;/h3&gt; 
&lt;p&gt;HTTP-based services (WebRTC, HLS, Control API, Playback Server, Metrics, pprof) can be exposed in a subfolder of an existing HTTP server or reverse proxy. The reverse proxy must be able to intercept HTTP requests addressed to MediaMTX and corresponding responses, and perform the following changes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The subfolder path must be stripped from request paths. For instance, if the server is exposed behind &lt;code&gt;/subpath&lt;/code&gt; and the reverse proxy receives a request with path &lt;code&gt;/subpath/mystream/index.m3u8&lt;/code&gt;, this has to be changed into &lt;code&gt;/mystream/index.m3u8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Any &lt;code&gt;Location&lt;/code&gt; header in responses must be prefixed with the subfolder path. For instance, if the server is exposed behind &lt;code&gt;/subpath&lt;/code&gt; and the server sends a response with &lt;code&gt;Location: /mystream/index.m3u8&lt;/code&gt;, this has to be changed into &lt;code&gt;Location: /subfolder/mystream/index.m3u8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;em&gt;nginx&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;location /subpath/ {
    proxy_pass http://mediamtx-ip:8889/;
    proxy_redirect / /subpath/;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;em&gt;Apache HTTP Server&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;Location /subpath&amp;gt;
    ProxyPass http://mediamtx-ip:8889
    ProxyPassReverse http://mediamtx-ip:8889
    Header edit Location ^(.*)$ &quot;/subpath$1&quot;
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;em&gt;Caddy&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:80 {
    handle_path /subpath/* {
        reverse_proxy {
            to mediamtx-ip:8889
            header_down Location ^/ /subpath/
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start on boot&lt;/h3&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;p&gt;On most Linux distributions (including Ubuntu and Debian, but not OpenWrt), &lt;em&gt;systemd&lt;/em&gt; is in charge of managing services and starting them on boot.&lt;/p&gt; 
&lt;p&gt;Move the server executable and configuration in global folders:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo mv mediamtx /usr/local/bin/
sudo mv mediamtx.yml /usr/local/etc/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a &lt;em&gt;systemd&lt;/em&gt; service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo tee /etc/systemd/system/mediamtx.service &amp;gt;/dev/null &amp;lt;&amp;lt; EOF
[Unit]
Wants=network.target
[Service]
ExecStart=/usr/local/bin/mediamtx /usr/local/etc/mediamtx.yml
[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If SELinux is enabled (for instance in case of RedHat, Rocky, CentOS++), add correct security context:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;semanage fcontext -a -t bin_t /usr/local/bin/mediamtx
restorecon -Fv /usr/local/bin/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enable and start the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo systemctl daemon-reload
sudo systemctl enable mediamtx
sudo systemctl start mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;OpenWrt&lt;/h4&gt; 
&lt;p&gt;Move the server executable and configuration in global folders:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv mediamtx /usr/bin/
mkdir -p /usr/etc &amp;amp;&amp;amp; mv mediamtx.yml /usr/etc/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a procd service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;tee /etc/init.d/mediamtx &amp;gt;/dev/null &amp;lt;&amp;lt; EOF
#!/bin/sh /etc/rc.common
USE_PROCD=1
START=95
STOP=01
start_service() {
    procd_open_instance
    procd_set_param command /usr/bin/mediamtx
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_close_instance
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enable and start the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;chmod +x /etc/init.d/mediamtx
/etc/init.d/mediamtx enable
/etc/init.d/mediamtx start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read the server logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;logread
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;Download the &lt;a href=&quot;https://github.com/winsw/winsw/releases/download/v2.11.0/WinSW-x64.exe&quot;&gt;WinSW v2 executable&lt;/a&gt; and place it into the same folder of &lt;code&gt;mediamtx.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the same folder, create a file named &lt;code&gt;WinSW-x64.xml&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;service&amp;gt;
  &amp;lt;id&amp;gt;mediamtx&amp;lt;/id&amp;gt;
  &amp;lt;name&amp;gt;mediamtx&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
  &amp;lt;executable&amp;gt;%BASE%/mediamtx.exe&amp;lt;/executable&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open a terminal, navigate to the folder and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;WinSW-x64 install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server is now installed as a system service and will start at boot time.&lt;/p&gt; 
&lt;h3&gt;Hooks&lt;/h3&gt; 
&lt;p&gt;The server allows to specify commands that are executed when a certain event happens, allowing the propagation of events to external software.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;runOnConnect&lt;/code&gt; allows to run a command when a client connects to the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# Command to run when a client connects to the server.
# This is terminated with SIGINT when a client disconnects from the server.
# The following environment variables are available:
# * MTX_CONN_TYPE: connection type
# * MTX_CONN_ID: connection ID
# * RTSP_PORT: RTSP server port
runOnConnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&amp;amp;conn_id=$MTX_CONN_ID
# Restart the command if it exits.
runOnConnectRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnDisconnect&lt;/code&gt; allows to run a command when a client disconnects from the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# Command to run when a client disconnects from the server.
# Environment variables are the same of runOnConnect.
runOnDisconnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&amp;amp;conn_id=$MTX_CONN_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnInit&lt;/code&gt; allows to run a command when a path is initialized. This can be used to publish a stream when the server is launched:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  mypath:
    # Command to run when this path is initialized.
    # This can be used to publish a stream when the server is launched.
    # The following environment variables are available:
    # * MTX_PATH: path name
    # * RTSP_PORT: RTSP server port
    # * G1, G2, ...: regular expression groups, if path name is
    #   a regular expression.
    runOnInit: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath
    # Restart the command if it exits.
    runOnInitRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnDemand&lt;/code&gt; allows to run a command when a path is requested by a reader. This can be used to publish a stream on demand:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when this path is requested by a reader
  # and no one is publishing to this path yet.
  # This is terminated with SIGINT when there are no readers anymore.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by first reader)
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnDemand: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath
  # Restart the command if it exits.
  runOnDemandRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnUnDemand&lt;/code&gt; allows to run a command when there are no readers anymore:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when there are no readers anymore.
  # Environment variables are the same of runOnDemand.
  runOnUnDemand:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnReady&lt;/code&gt; allows to run a command when a stream is ready to be read:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when the stream is ready to be read, whenever it is
  # published by a client or pulled from a server / camera.
  # This is terminated with SIGINT when the stream is not ready anymore.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by publisher)
  # * MTX_SOURCE_TYPE: source type
  # * MTX_SOURCE_ID: source ID
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnReady: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;source_type=$MTX_SOURCE_TYPE&amp;amp;source_id=$MTX_SOURCE_ID
  # Restart the command if it exits.
  runOnReadyRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnNotReady&lt;/code&gt; allows to run a command when a stream is not available anymore:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when the stream is not available anymore.
  # Environment variables are the same of runOnReady.
  runOnNotReady: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;source_type=$MTX_SOURCE_TYPE&amp;amp;source_id=$MTX_SOURCE_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRead&lt;/code&gt; allows to run a command when a client starts reading:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when a client starts reading.
  # This is terminated with SIGINT when a client stops reading.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by reader)
  # * MTX_READER_TYPE: reader type
  # * MTX_READER_ID: reader ID
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRead: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;reader_type=$MTX_READER_TYPE&amp;amp;reader_id=$MTX_READER_ID
  # Restart the command if it exits.
  runOnReadRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnUnread&lt;/code&gt; allows to run a command when a client stops reading:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when a client stops reading.
  # Environment variables are the same of runOnRead.
  runOnUnread: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;reader_type=$MTX_READER_TYPE&amp;amp;reader_id=$MTX_READER_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRecordSegmentCreate&lt;/code&gt; allows to run a command when a recording segment is created:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when a recording segment is created.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_SEGMENT_PATH: segment file path
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRecordSegmentCreate: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;segment_path=$MTX_SEGMENT_PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRecordSegmentComplete&lt;/code&gt; allows to run a command when a recording segment is complete:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;pathDefaults:
  # Command to run when a recording segment is complete.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_SEGMENT_PATH: segment file path
  # * MTX_SEGMENT_DURATION: segment duration
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRecordSegmentComplete: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;segment_path=$MTX_SEGMENT_PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Control API&lt;/h3&gt; 
&lt;p&gt;The server can be queried and controlled with an API, that can be enabled by setting the &lt;code&gt;api&lt;/code&gt; parameter in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;api: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a list of of active paths, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9997/v3/paths/list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The control API is documented in the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/api/openapi.yaml&quot;&gt;OpenAPI / Swagger file&lt;/a&gt; and in a &lt;a href=&quot;https://bluenviron.github.io/mediamtx/&quot;&gt;dedicated site&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Be aware that by default the Control API is accessible by localhost only; to increase visibility or add authentication, check &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authentication&quot;&gt;Authentication&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Metrics&lt;/h3&gt; 
&lt;p&gt;A metrics exporter, compatible with &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;, can be enabled with the parameter &lt;code&gt;metrics: yes&lt;/code&gt;; then the server can be queried for metrics with Prometheus or with a simple HTTP request:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl localhost:9998/metrics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Obtaining:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# metrics of every path
paths{name=&quot;[path_name]&quot;,state=&quot;[state]&quot;} 1
paths_bytes_received{name=&quot;[path_name]&quot;,state=&quot;[state]&quot;} 1234
paths_bytes_sent{name=&quot;[path_name]&quot;,state=&quot;[state]&quot;} 1234
paths_readers{name=&quot;[path_name]&quot;,state=&quot;[state]&quot;} 1234

# metrics of every HLS muxer
hls_muxers{name=&quot;[name]&quot;} 1
hls_muxers_bytes_sent{name=&quot;[name]&quot;} 187

# metrics of every RTSP connection
rtsp_conns{id=&quot;[id]&quot;} 1
rtsp_conns_bytes_received{id=&quot;[id]&quot;} 1234
rtsp_conns_bytes_sent{id=&quot;[id]&quot;} 187

# metrics of every RTSP session
rtsp_sessions{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
rtsp_sessions_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
rtsp_sessions_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187
rtsp_sessions_rtp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtp_packets_lost{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtp_packets_in_error{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtp_packets_jitter{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtcp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtcp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsp_sessions_rtcp_packets_in_error{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123

# metrics of every RTSPS connection
rtsps_conns{id=&quot;[id]&quot;} 1
rtsps_conns_bytes_received{id=&quot;[id]&quot;} 1234
rtsps_conns_bytes_sent{id=&quot;[id]&quot;} 187

# metrics of every RTSPS session
rtsps_sessions{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
rtsps_sessions_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
rtsps_sessions_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187
rtsps_sessions_rtp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtp_packets_lost{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtp_packets_in_error{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtp_packets_jitter{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtcp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtcp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
rtsps_sessions_rtcp_packets_in_error{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123

# metrics of every RTMP connection
rtmp_conns{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
rtmp_conns_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
rtmp_conns_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187

# metrics of every RTMPS connection
rtmps_conns{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
rtmps_conns_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
rtmps_conns_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187

# metrics of every SRT connection
srt_conns{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
srt_conns_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_sent_unique{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_unique{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_send_loss{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_loss{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_retrans{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_retrans{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_sent_ack{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_ack{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_sent_nak{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_nak{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_sent_km{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_km{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_us_snd_duration{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_send_drop{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_drop{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_undecrypt{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187
srt_conns_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
srt_conns_bytes_sent_unique{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_received_unique{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_received_loss{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_retrans{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_received_retrans{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_send_drop{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_received_drop{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_received_undecrypt{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_us_packets_send_period{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123.123
srt_conns_packets_flow_window{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_flight_size{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_ms_rtt{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123.123
srt_conns_mbps_send_rate{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_mbps_receive_rate{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123.123
srt_conns_mbps_link_capacity{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123.123
srt_conns_bytes_avail_send_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_avail_receive_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_mbps_max_bw{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} -123
srt_conns_bytes_mss{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_send_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_send_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_ms_send_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_ms_send_tsb_pd_delay{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_receive_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_bytes_receive_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_ms_receive_buf{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_ms_receive_tsb_pd_delay{iid=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_reorder_tolerance{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_avg_belated_time{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_send_loss_rate{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
srt_conns_packets_received_loss_rate{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123

# metrics of every WebRTC session
webrtc_sessions{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1
webrtc_sessions_bytes_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 1234
webrtc_sessions_bytes_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 187
webrtc_sessions_rtp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
webrtc_sessions_rtp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
webrtc_sessions_rtp_packets_lost{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
webrtc_sessions_rtp_packets_jitter{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
webrtc_sessions_rtcp_packets_received{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
webrtc_sessions_rtcp_packets_sent{id=&quot;[id]&quot;,path=&quot;[path]&quot;,remoteAddr=&quot;[remoteAddr]&quot;,state=&quot;[state]&quot;} 123
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Metrics can be tuned and filtered by using query parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;type=[TYPE]&lt;/code&gt;: show metrics of a certain type only (where TYPE can be &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;hls_muxers&lt;/code&gt;, &lt;code&gt;rtsp_conns&lt;/code&gt;, &lt;code&gt;rtsp_sessions&lt;/code&gt;, &lt;code&gt;rtsps_conns&lt;/code&gt;, &lt;code&gt;rtsps_sessions&lt;/code&gt;, &lt;code&gt;rtmp_conns&lt;/code&gt;, &lt;code&gt;rtmps_conns&lt;/code&gt;, &lt;code&gt;srt_conns&lt;/code&gt;, &lt;code&gt;webrtc_sessions&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;path=[PATH]&lt;/code&gt;: show metrics belonging to a specific path only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hls_muxer=[PATH]&lt;/code&gt;: show metrics belonging to a specific HLS muxer only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTSP connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp_session=[SESSION]&lt;/code&gt;: show metrics belonging to a specific RTSP session only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsps_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTSPS connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsps_session=[SESSION]&lt;/code&gt;: show metrics belonging to a specific RTSPS session only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtmp_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTMP connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtmps_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTMPS connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;srt_conn=[ID]&lt;/code&gt; show metrics belonging to a specific SRT connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webrtc_session=[ID]&lt;/code&gt; show metrics belonging to a specific WebRTC session only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;pprof&lt;/h3&gt; 
&lt;p&gt;A performance monitor, compatible with pprof, can be enabled with the parameter &lt;code&gt;pprof: yes&lt;/code&gt;; then the server can be queried for metrics with pprof-compatible tools, like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go tool pprof -text http://localhost:9999/debug/pprof/goroutine
go tool pprof -text http://localhost:9999/debug/pprof/heap
go tool pprof -text http://localhost:9999/debug/pprof/profile?seconds=30
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SRT-specific features&lt;/h3&gt; 
&lt;h4&gt;Standard stream ID syntax&lt;/h4&gt; 
&lt;p&gt;In SRT, the stream ID is a string that is sent to the remote part in order to advertise what action the caller is gonna do (publish or read), the path and the credentials. All these informations have to be encoded into a single string. This server supports two stream ID syntaxes, a custom one (that is the one reported in rest of the README) and also a &lt;a href=&quot;https://github.com/Haivision/srt/raw/master/docs/features/access-control.md&quot;&gt;standard one&lt;/a&gt; proposed by the authors of the protocol and enforced by some hardware. The standard syntax can be used in this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=#!::m=publish,r=mypath,u=myuser,s=mypass&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;key &lt;code&gt;m&lt;/code&gt; contains the action (&lt;code&gt;publish&lt;/code&gt; or &lt;code&gt;request&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;r&lt;/code&gt; contains the path&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;u&lt;/code&gt; contains the username&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;s&lt;/code&gt; contains the password&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;WebRTC-specific features&lt;/h3&gt; 
&lt;h4&gt;Authenticating with WHIP/WHEP&lt;/h4&gt; 
&lt;p&gt;When using WHIP or WHEP to establish a WebRTC connection, there are several ways to provide credentials.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If internal authentication or HTTP-based authentication is in use, username and password can be passed through the &lt;code&gt;Authorization: Basic&lt;/code&gt; HTTP header:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Basic base64(user:pass)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;base64(user:pass)&lt;/code&gt; is the base64 encoding of &quot;user:pass&quot;.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;Authorization: Basic&lt;/code&gt; header cannot be used (for instance, in software like OBS Studio), credentials can be passed through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; header, where value is the concatenation of username and password, separated by a colon:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Bearer username:password
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If JWT-based authentication is in use, the JWT can be passed through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; header:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Bearer MY_JWT
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Solving WebRTC connectivity issues&lt;/h4&gt; 
&lt;p&gt;If the server is hosted inside a container or is behind a NAT, additional configuration is required in order to allow the two WebRTC parts (server and client) to establish a connection.&lt;/p&gt; 
&lt;p&gt;Make sure that &lt;code&gt;webrtcAdditionalHosts&lt;/code&gt; includes your public IPs, that are IPs that can be used by clients to reach the server. If clients are on the same LAN as the server, add the LAN address of the server. If clients are coming from the internet, add the public IP address of the server, or alternatively a DNS name, if you have one. You can add several values to support all scenarios:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcAdditionalHosts: [192.168.x.x, 1.2.3.4, my-dns.example.org, ...]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there&#39;s a NAT / container between server and clients, it must be configured to route all incoming UDP packets on port 8189 to the server. If you&#39;re using Docker, this can be achieved with the flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --rm -it \
-p 8189:8189/udp
....
bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you still have problems, the UDP protocol might be blocked by a firewall. Enable the TCP protocol by enabling the local TCP listener:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcLocalTCPAddress: :8189
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there&#39;s a NAT / container between server and clients, it must be configured to route all incoming TCP packets on port 8189 to the server.&lt;/p&gt; 
&lt;p&gt;If you still have problems, add a STUN server. When a STUN server is in use, server IP is obtained automatically and connections are established with the &quot;UDP hole punching&quot; technique, that uses a random UDP port that does not need to be open. For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcICEServers2:
  - url: stun:stun.l.google.com:19302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you really still have problems, you can force all WebRTC/ICE connections to pass through a TURN server, like &lt;a href=&quot;https://github.com/coturn/coturn&quot;&gt;coturn&lt;/a&gt;, that must be configured externally. The server address and credentials must be set in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcICEServers2:
- url: turn:host:port
  username: user
  password: password
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where user and pass are the username and password of the server. Note that port is not optional.&lt;/p&gt; 
&lt;p&gt;If the server uses a secret-based authentication (for instance, coturn with the use-auth-secret option), it must be configured by using AUTH_SECRET as username, and the secret as password:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcICEServers2:
- url: turn:host:port
  username: AUTH_SECRET
  password: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where secret is the secret of the TURN server. MediaMTX will generate a set of credentials by using the secret, and credentials will be sent to clients before the WebRTC/ICE connection is established.&lt;/p&gt; 
&lt;p&gt;In some cases you may want the browser to connect using TURN servers but have mediamtx not using TURN (for example if the TURN server is on the same network as mediamtx). To allow this you can configure the TURN server to be client only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;webrtcICEServers2:
- url: turn:host:port
  username: user
  password: password
  clientOnly: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supported browsers&lt;/h4&gt; 
&lt;p&gt;The server can ingest and broadcast with WebRTC a wide variety of video and audio codecs (that are listed at the beginning of the README), but not all browsers can publish and read all codecs due to internal limitations that cannot be overcome by this or any other server.&lt;/p&gt; 
&lt;p&gt;In particular, reading and publishing H265 tracks with WebRTC was not possible until some time ago due to lack of browser support. The situation improved recently and can be described as following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Safari on iOS and macOS fully supports publishing and reading H265 tracks&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Chrome on Windows supports publishing and reading H265 tracks when a GPU is present and when the browser is launched with the following flags:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;chrome.exe --enable-features=PlatformHEVCEncoderSupport,WebRtcAllowH265Receive,WebRtcAllowH265Send --force-fieldtrials=WebRTC-Video-H26xPacketBuffer/Enabled
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We are expecting these flags to become redundant in the future and the feature to be turned on by default.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can check what codecs your browser can publish or read with WebRTC by &lt;a href=&quot;https://jsfiddle.net/v24s8q1f/&quot;&gt;using this tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to support most browsers, you can to re-encode the stream by using H264 and Opus codecs, for instance by using FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -i rtsp://original-source \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-c:a libopus -b:a 64K -async 50 \
-f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HLS-specific features&lt;/h3&gt; 
&lt;h4&gt;Supported browsers&lt;/h4&gt; 
&lt;p&gt;The server can produce HLS streams with a variety of video and audio codecs (that are listed at the beginning of the README), but not all browsers can read all codecs due to internal limitations that cannot be overcome by this or any other server.&lt;/p&gt; 
&lt;p&gt;You can check what codecs your browser can read with HLS by &lt;a href=&quot;https://jsfiddle.net/tjcyv5aw/&quot;&gt;using this tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to support most browsers, you can to re-encode the stream by using H264 and AAC codecs, for instance by using FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ffmpeg -i rtsp://original-source \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-c:a aac -b:a 160k \
-f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RTSP-specific features&lt;/h3&gt; 
&lt;h4&gt;Transport protocols&lt;/h4&gt; 
&lt;p&gt;The RTSP protocol supports different underlying transport protocols, that are chosen by clients during the handshake with the server:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP: the most performant, but doesn&#39;t work when there&#39;s a NAT/firewall between server and clients.&lt;/li&gt; 
 &lt;li&gt;UDP-multicast: allows to save bandwidth when clients are all in the same LAN, by sending packets once to a fixed multicast IP.&lt;/li&gt; 
 &lt;li&gt;TCP: the most versatile.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default transport protocol is UDP. To change the transport protocol, you have to tune the configuration of your client of choice.&lt;/p&gt; 
&lt;h4&gt;Encryption&lt;/h4&gt; 
&lt;p&gt;Incoming and outgoing RTSP streams can be encrypted with TLS, obtaining the RTSPS protocol. A TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and set the &lt;code&gt;encryption&lt;/code&gt;, &lt;code&gt;serverKey&lt;/code&gt; and serverCert parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;rtspEncryption: optional
rtspServerKey: server.key
rtspServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Streams can be published and read with the &lt;code&gt;rtsps&lt;/code&gt; scheme and the &lt;code&gt;8322&lt;/code&gt; port:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsps://localhost:8322/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Corrupted frames&lt;/h4&gt; 
&lt;p&gt;In some scenarios, when publishing or reading from the server with RTSP, frames can get corrupted. This can be caused by several reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When the transport protocol is UDP (which is default one), packets sent to the server might get discarded because the UDP read buffer size is too small. This can be noticed in logs through the &quot;RTP packets lost&quot; message. Try increasing the UDP read buffer size:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;rtspUDPReadBufferSize: 1000000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the source of the stream is a camera:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  test:
    source: rtsp://..
    rtspUDPReadBufferSize: 1000000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Both these options require the &lt;code&gt;net.core.rmem_max&lt;/code&gt; system parameter to be equal or greater than &lt;code&gt;rtspUDPReadBufferSize&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo sysctl net.core.rmem_max=100000000
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When the transport protocol is UDP (which is the default one), packets sent from the server to readers might get discarded because the write queue is too small. This can be noticed in logs through the &quot;reader is too slow&quot; message. Try increasing the write queue:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;writeQueueSize: 1024
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The stream is too big and it can&#39;t be transmitted correctly with the UDP transport protocol. UDP is more performant, faster and more efficient than TCP, but doesn&#39;t have a retransmission mechanism, that is needed in case of streams that need a large bandwidth. A solution consists in switching to TCP:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;rtspTransports: [tcp]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case the source is a camera:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;paths:
  test:
    source: rtsp://..
    rtspTransport: tcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The stream throughput is too big to be handled by the network between server and readers. Upgrade the network or decrease the stream bitrate by re-encoding it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;RTMP-specific features&lt;/h3&gt; 
&lt;h4&gt;Encryption&lt;/h4&gt; 
&lt;p&gt;RTMP connections can be encrypted with TLS, obtaining the RTMPS protocol. A TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit mediamtx.yml and set the &lt;code&gt;rtmpEncryption&lt;/code&gt;, &lt;code&gt;rtmpServerKey&lt;/code&gt; and &lt;code&gt;rtmpServerCert&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;rtmpEncryption: optional
rtmpServerKey: server.key
rtmpServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Streams can be published and read with the rtmps scheme and the 1937 port:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmps://localhost:1937/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be aware that RTMPS is currently unsupported by all major players. However, you can use a proxy like &lt;a href=&quot;https://www.stunnel.org&quot;&gt;stunnel&lt;/a&gt; or &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; or a dedicated &lt;em&gt;MediaMTX&lt;/em&gt; instance to decrypt streams before reading them.&lt;/p&gt; 
&lt;h2&gt;Compile from source&lt;/h2&gt; 
&lt;h3&gt;Standard&lt;/h3&gt; 
&lt;p&gt;Install git and Go ≥ 1.24. Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;h3&gt;OpenWrt&lt;/h3&gt; 
&lt;p&gt;The compilation procedure is the same as the standard one. On the OpenWrt device, install git and Go:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;opkg update
opkg install golang git git-http
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;If the OpenWrt device doesn&#39;t have enough resources to compile, you can &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/#cross-compile&quot;&gt;cross compile&lt;/a&gt; from another machine.&lt;/p&gt; 
&lt;h3&gt;Custom libcamera&lt;/h3&gt; 
&lt;p&gt;If you need to use a custom or external libcamera when interacting with the Raspberry Pi Camera, you have to compile &lt;a href=&quot;https://github.com/bluenviron/mediamtx-rpicamera&quot;&gt;mediamtx-rpicamera&lt;/a&gt; before compiling the server. Instructions are present in the &lt;code&gt;mediamtx-rpicamera&lt;/code&gt; repository.&lt;/p&gt; 
&lt;h3&gt;Cross compile&lt;/h3&gt; 
&lt;p&gt;Cross compilation allows to build an executable for a target machine from another machine with different operating system or architecture. This is useful in case the target machine doesn&#39;t have enough resources for compilation or if you don&#39;t want to install the compilation dependencies on it.&lt;/p&gt; 
&lt;p&gt;On the machine you want to use to compile, install git and Go ≥ 1.24. Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 GOOS=my_os GOARCH=my_arch go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;my_os&lt;/code&gt; and &lt;code&gt;my_arch&lt;/code&gt; with the operating system and architecture of your target machine. A list of all supported combinations can be obtained with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;go tool dist list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case of the &lt;code&gt;arm&lt;/code&gt; architecture, there&#39;s an additional flag available, &lt;code&gt;GOARM&lt;/code&gt;, that allows to set the ARM version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=7 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case of the &lt;code&gt;mips&lt;/code&gt; architecture, there&#39;s an additional flag available, &lt;code&gt;GOMIPS&lt;/code&gt;, that allows to set additional parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=mips GOMIPS=softfloat go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;h3&gt;Compile for all supported platforms&lt;/h3&gt; 
&lt;p&gt;Install Docker and launch:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make binaries
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce tarballs in folder &lt;code&gt;binaries/&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker image&lt;/h3&gt; 
&lt;p&gt;The official Docker image can be recompiled by following these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build binaries for all supported platforms:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make binaries
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the image by using one of the Dockerfiles inside the &lt;code&gt;docker/&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker build . -f docker/standard.Dockerfile -t my-mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A Dockerfile is available for each image variant (&lt;code&gt;standard.Dockerfile&lt;/code&gt;, &lt;code&gt;ffmpeg.Dockerfile&lt;/code&gt;, &lt;code&gt;rpi.Dockerfile&lt;/code&gt;, &lt;code&gt;ffmpeg-rpi.Dockerfile&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All the code in this repository is released under the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;. Compiled binaries include some third-party dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;all the Golang-based dependencies listed into the &lt;a href=&quot;https://raw.githubusercontent.com/bluenviron/mediamtx/main/go.mod&quot;&gt;go.mod file&lt;/a&gt;, which are all released under either the MIT license, BSD 3-Clause license or Apache License 2.0.&lt;/li&gt; 
 &lt;li&gt;hls.js, released under the &lt;a href=&quot;https://github.com/video-dev/hls.js/raw/master/LICENSE&quot;&gt;Apache License 2.0&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;mediamtx-rpicamera, which is released under the same license of &lt;em&gt;MediaMTX&lt;/em&gt; but includes some &lt;a href=&quot;https://github.com/bluenviron/mediamtx-rpicamera?tab=readme-ov-file#license&quot;&gt;third-party dependencies&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Specifications&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;area&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bluenviron/gortsplib#specifications&quot;&gt;RTSP / RTP / RTCP specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bluenviron/gohlslib#specifications&quot;&gt;HLS specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;HLS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://veovera.org/docs/legacy/amf0-file-format-spec.pdf&quot;&gt;Action Message Format - AMF 0&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://veovera.org/docs/legacy/video-file-format-v10-1-spec.pdf&quot;&gt;FLV&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://veovera.org/docs/legacy/rtmp-v1-0-spec.pdf&quot;&gt;RTMP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://veovera.org/docs/enhanced/enhanced-rtmp-v2.pdf&quot;&gt;Enhanced RTMP v2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.w3.org/TR/webrtc/&quot;&gt;WebRTC: Real-Time Communication in Browsers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8835&quot;&gt;RFC8835, Transports for WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7742&quot;&gt;RFC7742, WebRTC Video Processing and Codec Requirements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7874&quot;&gt;RFC7847, WebRTC Audio Codec and Processing Requirements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7875&quot;&gt;RFC7875, Additional WebRTC Audio Codecs for Interoperability&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-avtcore-hevc-webrtc/&quot;&gt;H.265 Profile for WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-wish-whip/&quot;&gt;WebRTC HTTP Ingestion Protocol (WHIP)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-murillo-whep/&quot;&gt;WebRTC HTTP Egress Protocol (WHEP)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html&quot;&gt;The SRT Protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;SRT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bluenviron/mediacommon#specifications&quot;&gt;Codec specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;codecs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/golang-standards/project-layout&quot;&gt;Golang project layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;project layout&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bluenviron/gortsplib&quot;&gt;gortsplib (RTSP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bluenviron/gohlslib&quot;&gt;gohlslib (HLS library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bluenviron/mediacommon&quot;&gt;mediacommon (codecs and formats library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bluenviron/mediamtx-rpicamera&quot;&gt;mediamtx-rpicamera (Raspberry Pi Camera component)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/datarhei/gosrt&quot;&gt;datarhei/gosrt (SRT library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pion/webrtc&quot;&gt;pion/webrtc (WebRTC library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pion/sdp&quot;&gt;pion/sdp (SDP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pion/rtp&quot;&gt;pion/rtp (RTP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pion/rtcp&quot;&gt;pion/rtcp (RTCP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asticode/go-astits&quot;&gt;go-astits (MPEG-TS library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abema/go-mp4&quot;&gt;go-mp4 (MP4 library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/video-dev/hls.js&quot;&gt;hls.js (browser-side HLS library used internally)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>1Panel-dev/1Panel</title>
      <link>https://github.com/1Panel-dev/1Panel</link>
      <description>&lt;p&gt;🔥 1Panel provides an intuitive web interface and MCP Server to manage websites, files, containers, databases, and LLMs on a Linux server.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://1panel.pro&quot;&gt;&lt;img src=&quot;https://resource.1panel.pro/img/1panel-logo.png&quot; alt=&quot;1Panel&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Top-Rated Web-based Linux Server Management Tool&lt;/b&gt;&lt;br /&gt;Best VPS control panel&lt;br /&gt;新一代的 Linux 服务器运维管理面板&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://trendshift.io/repositories/2462&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/2462&quot; alt=&quot;1Panel-dev%2F1Panel | Trendshift&quot; style=&quot;width: 240px; height: auto;&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot;&gt;&lt;img src=&quot;https://shields.io/github/license/1Panel-dev/1Panel?color=%231890FF&quot; alt=&quot;License: GPL v3&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codacy.com/gh/1Panel-dev/1Panel?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=1Panel-dev/1Panel&amp;amp;utm_campaign=Badge_Grade_Dashboard&quot;&gt;&lt;img src=&quot;https://app.codacy.com/project/badge/Grade/da67574fd82b473992781d1386b937ef&quot; alt=&quot;Codacy&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/bUpUqWqdRr&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1318846410149335080?logo=discord&amp;amp;labelColor=%20%235462eb&amp;amp;logoColor=%20%23f5f5f5&amp;amp;color=%20%235462eb&quot; alt=&quot;chat on Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/1Panel-dev/1Panel/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/1Panel-dev/1Panel&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/1Panel-dev/1Panel&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/1Panel-dev/1Panel?color=%231890FF&amp;amp;style=flat-square&quot; alt=&quot;Stars&quot; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/README.md&quot;&gt;&lt;img alt=&quot;English&quot; src=&quot;https://img.shields.io/badge/English-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.zh-Hans.md&quot;&gt;&lt;img alt=&quot;中文(简体)&quot; src=&quot;https://img.shields.io/badge/中文(简体)-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.ja.md&quot;&gt;&lt;img alt=&quot;日本語&quot; src=&quot;https://img.shields.io/badge/日本語-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.pt-br.md&quot;&gt;&lt;img alt=&quot;Português (Brasil)&quot; src=&quot;https://img.shields.io/badge/Português (Brasil)-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.ar.md&quot;&gt;&lt;img alt=&quot;العربية&quot; src=&quot;https://img.shields.io/badge/العربية-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.de.md&quot;&gt;&lt;img alt=&quot;Deutsch&quot; src=&quot;https://img.shields.io/badge/Deutsch-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.es.md&quot;&gt;&lt;img alt=&quot;Español&quot; src=&quot;https://img.shields.io/badge/Español-d9d9d9&quot; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.fr.md&quot;&gt;&lt;img alt=&quot;français&quot; src=&quot;https://img.shields.io/badge/français-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.ko.md&quot;&gt;&lt;img alt=&quot;한국어&quot; src=&quot;https://img.shields.io/badge/한국어-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.id.md&quot;&gt;&lt;img alt=&quot;Bahasa Indonesia&quot; src=&quot;https://img.shields.io/badge/Bahasa Indonesia-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.zh-Hant.md&quot;&gt;&lt;img alt=&quot;中文(繁體)&quot; src=&quot;https://img.shields.io/badge/中文(繁體)-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.tr.md&quot;&gt;&lt;img alt=&quot;Türkçe&quot; src=&quot;https://img.shields.io/badge/Türkçe-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.ru.md&quot;&gt;&lt;img alt=&quot;Русский&quot; src=&quot;https://img.shields.io/badge/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/docs/README.ms.md&quot;&gt;&lt;img alt=&quot;Bahasa Melayu&quot; src=&quot;https://img.shields.io/badge/Bahasa Melayu-d9d9d9&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;1Panel is an open-source, modern web-based control panel for Linux server management.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Efficient Management&lt;/strong&gt;: Through a user-friendly web graphical interface, 1Panel enables users to effortlessly manage their Linux servers. Key features include host monitoring, file management, database administration, container management, LLMs management.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rapid Website Deployment&lt;/strong&gt;: With deep integration of the popular open-source website building software WordPress, 1Panel streamlines the process of domain binding and SSL certificate configuration, all achievable with just one click.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Application Store&lt;/strong&gt;: 1Panel curates a wide range of high-quality open-source tools and applications, facilitating easy installation and updates for its users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security and Reliability&lt;/strong&gt;: By leveraging containerization and secure application deployment practices, 1Panel minimizes vulnerability exposure. It further enhances security through integrated firewall management and log auditing capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One-Click Backup &amp;amp; Restore&lt;/strong&gt;: Data protection is made simple with 1Panel&#39;s one-click backup and restore functionality, supporting various cloud storage solutions to ensure data integrity and availability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Execute the script below and follow the prompts to install 1Panel:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -sSL https://resource.1panel.pro/quick_start.sh -o quick_start.sh &amp;amp;&amp;amp; bash quick_start.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to our &lt;a href=&quot;https://docs.1panel.pro/quick_start/&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;中国用户请使用这个 &lt;a href=&quot;https://1panel.cn/docs/installation/online_installation/&quot;&gt;安装脚本&lt;/a&gt;，其应用数量比国际版本更丰富。&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://resource.1panel.pro/img/1panel.png&quot; alt=&quot;UI Display&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://star-history.com/#1Panel-dev/1Panel&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=1Panel-dev/1Panel&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Pro Edition&lt;/h2&gt; 
&lt;p&gt;Compared to the OSS Edition, 1Panel Pro Edition provides users with a wealth of enhanced features and technical support services. Enhanced features include WAF enhancement, website tamper protection, website monitoring, GPU monitoring, custom logo and theme color, etc. &lt;a href=&quot;https://1panel.pro/pricing&quot;&gt;Click to view the detailed introduction of the Pro Edition&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security Information&lt;/h2&gt; 
&lt;p&gt;If you discover any security issues, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev-v2/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under The GNU General Public License version 3 (GPLv3) (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>moby/moby</title>
      <link>https://github.com/moby/moby</link>
      <description>&lt;p&gt;The Moby Project - a collaborative project for the container ecosystem to assemble container-based systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Moby Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://pkg.go.dev/github.com/moby/moby/v2&quot;&gt;&lt;img src=&quot;https://pkg.go.dev/badge/github.com/moby/moby/v2&quot; alt=&quot;PkgGoDev&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/license/moby/moby&quot; alt=&quot;GitHub License&quot; /&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/moby/moby/v2&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/moby/moby/v2&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://scorecard.dev/viewer/?uri=github.com/moby/moby&quot;&gt;&lt;img src=&quot;https://api.scorecard.dev/projects/github.com/moby/moby/badge&quot; alt=&quot;OpenSSF Scorecard&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.bestpractices.dev/projects/10989&quot;&gt;&lt;img src=&quot;https://www.bestpractices.dev/projects/10989/badge&quot; alt=&quot;OpenSSF Best Practices&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/moby/moby/master/docs/static_files/moby-project-logo.png&quot; alt=&quot;Moby Project logo&quot; title=&quot;The Moby Project&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Moby is an open-source project created by Docker to enable and accelerate software containerization.&lt;/p&gt; 
&lt;p&gt;It provides a &quot;Lego set&quot; of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas. Components include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.&lt;/p&gt; 
&lt;h2&gt;Principles&lt;/h2&gt; 
&lt;p&gt;Moby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience. It is open to the community to help set its direction.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modular: the project includes lots of components that have well-defined functions and APIs that work together.&lt;/li&gt; 
 &lt;li&gt;Batteries included but swappable: Moby includes enough components to build fully featured container systems, but its modular architecture ensures that most of the components can be swapped by different implementations.&lt;/li&gt; 
 &lt;li&gt;Usable security: Moby provides secure defaults without compromising usability.&lt;/li&gt; 
 &lt;li&gt;Developer focused: The APIs are intended to be functional and useful to build powerful tools. They are not necessarily intended as end user tools but as components aimed at developers. Documentation and UX is aimed at developers not end users.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Audience&lt;/h2&gt; 
&lt;p&gt;The Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers. It is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.&lt;/p&gt; 
&lt;h2&gt;Relationship with Docker&lt;/h2&gt; 
&lt;p&gt;The components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project. New projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product. However, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.&lt;/p&gt; 
&lt;p&gt;The Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful. The releases are supported by the maintainers, community and users, on a best efforts basis only. For customers who want enterprise or commercial support, &lt;a href=&quot;https://www.docker.com/products/docker-desktop/&quot;&gt;Docker Desktop&lt;/a&gt; and &lt;a href=&quot;https://www.mirantis.com/software/mirantis-container-runtime/&quot;&gt;Mirantis Container Runtime&lt;/a&gt; are the appropriate products for these use cases.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Legal&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Brought to you courtesy of our legal counsel. For more context, please see the &lt;a href=&quot;https://github.com/moby/moby/raw/master/NOTICE&quot;&gt;NOTICE&lt;/a&gt; document in this repo.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use and transfer of Moby may be subject to certain restrictions by the United States and other governments.&lt;/p&gt; 
&lt;p&gt;It is your responsibility to ensure that your use and/or transfer does not violate applicable laws.&lt;/p&gt; 
&lt;p&gt;For more information, please see &lt;a href=&quot;https://www.bis.doc.gov&quot;&gt;https://www.bis.doc.gov&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Licensing&lt;/h1&gt; 
&lt;p&gt;Moby is licensed under the Apache License, Version 2.0. See &lt;a href=&quot;https://github.com/moby/moby/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slackhq/nebula</title>
      <link>https://github.com/slackhq/nebula</link>
      <description>&lt;p&gt;A scalable overlay networking tool with a focus on performance, simplicity and security&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Nebula?&lt;/h2&gt; 
&lt;p&gt;Nebula is a scalable overlay networking tool with a focus on performance, simplicity and security. It lets you seamlessly connect computers anywhere in the world. Nebula is portable, and runs on Linux, OSX, Windows, iOS, and Android. It can be used to connect a small number of computers, but is also able to connect tens of thousands of computers.&lt;/p&gt; 
&lt;p&gt;Nebula incorporates a number of existing concepts like encryption, security groups, certificates, and tunneling. What makes Nebula different to existing offerings is that it brings all of these ideas together, resulting in a sum that is greater than its individual parts.&lt;/p&gt; 
&lt;p&gt;Further documentation can be found &lt;a href=&quot;https://nebula.defined.net/docs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can read more about Nebula &lt;a href=&quot;https://medium.com/p/884110a5579&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also join the NebulaOSS Slack group &lt;a href=&quot;https://join.slack.com/t/nebulaoss/shared_invite/zt-39pk4xopc-CUKlGcb5Z39dQ0cK1v7ehA&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;h4&gt;Desktop and Server&lt;/h4&gt; 
&lt;p&gt;Check the &lt;a href=&quot;https://github.com/slackhq/nebula/releases/latest&quot;&gt;releases&lt;/a&gt; page for downloads or see the &lt;a href=&quot;https://github.com/slackhq/nebula#distribution-packages&quot;&gt;Distribution Packages&lt;/a&gt; section.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux - 64 and 32 bit, arm, and others&lt;/li&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
 &lt;li&gt;MacOS&lt;/li&gt; 
 &lt;li&gt;Freebsd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Distribution Packages&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://archlinux.org/packages/extra/x86_64/nebula/&quot;&gt;Arch Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pacman -S nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://src.fedoraproject.org/rpms/nebula&quot;&gt;Fedora Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo dnf install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://packages.debian.org/source/stable/nebula&quot;&gt;Debian Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://pkgs.alpinelinux.org/packages?name=nebula&quot;&gt;Alpine Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apk add nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-core/raw/HEAD/Formula/n/nebula.rb&quot;&gt;macOS Homebrew&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/nebulaoss/nebula&quot;&gt;Docker&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker pull nebulaoss/nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Mobile&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/us/app/mobile-nebula/id1509587936?itsct=apps_box&amp;amp;itscg=30200&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=net.defined.mobile_nebula&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Technical Overview&lt;/h2&gt; 
&lt;p&gt;Nebula is a mutually authenticated peer-to-peer software-defined network based on the &lt;a href=&quot;https://noiseprotocol.org/&quot;&gt;Noise Protocol Framework&lt;/a&gt;. Nebula uses certificates to assert a node&#39;s IP address, name, and membership within user-defined groups. Nebula&#39;s user-defined groups allow for provider agnostic traffic filtering between nodes. Discovery nodes (aka lighthouses) allow individual peers to find each other and optionally use UDP hole punching to establish connections from behind most firewalls or NATs. Users can move data between nodes in any number of cloud service providers, datacenters, and endpoints, without needing to maintain a particular addressing scheme.&lt;/p&gt; 
&lt;p&gt;Nebula uses Elliptic-curve Diffie-Hellman (&lt;code&gt;ECDH&lt;/code&gt;) key exchange and &lt;code&gt;AES-256-GCM&lt;/code&gt; in its default configuration.&lt;/p&gt; 
&lt;p&gt;Nebula was created to provide a mechanism for groups of hosts to communicate securely, even across the internet, while enabling expressive firewall definitions similar in style to cloud security groups.&lt;/p&gt; 
&lt;h2&gt;Getting started (quickly)&lt;/h2&gt; 
&lt;p&gt;To set up a Nebula network, you&#39;ll need:&lt;/p&gt; 
&lt;h4&gt;1. The &lt;a href=&quot;https://github.com/slackhq/nebula/releases&quot;&gt;Nebula binaries&lt;/a&gt; or &lt;a href=&quot;https://github.com/slackhq/nebula#distribution-packages&quot;&gt;Distribution Packages&lt;/a&gt; for your specific platform. Specifically you&#39;ll need &lt;code&gt;nebula-cert&lt;/code&gt; and the specific nebula binary for each platform you use.&lt;/h4&gt; 
&lt;h4&gt;2. (Optional, but you really should..) At least one discovery node with a routable IP address, which we call a lighthouse.&lt;/h4&gt; 
&lt;p&gt;Nebula lighthouses allow nodes to find each other, anywhere in the world. A lighthouse is the only node in a Nebula network whose IP should not change. Running a lighthouse requires very few compute resources, and you can easily use the least expensive option from a cloud hosting provider. If you&#39;re not sure which provider to use, a number of us have used $6/mo &lt;a href=&quot;https://digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt; droplets as lighthouses.&lt;/p&gt; 
&lt;p&gt;Once you have launched an instance, ensure that Nebula udp traffic (default port udp/4242) can reach it over the internet.&lt;/p&gt; 
&lt;h4&gt;3. A Nebula certificate authority, which will be the root of trust for a particular Nebula network.&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./nebula-cert ca -name &quot;Myorganization, Inc&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create files named &lt;code&gt;ca.key&lt;/code&gt; and &lt;code&gt;ca.cert&lt;/code&gt; in the current directory. The &lt;code&gt;ca.key&lt;/code&gt; file is the most sensitive file you&#39;ll create, because it is the key used to sign the certificates for individual nebula nodes/hosts. Please store this file somewhere safe, preferably with strong encryption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Be aware!&lt;/strong&gt; By default, certificate authorities have a 1-year lifetime before expiration. See &lt;a href=&quot;https://nebula.defined.net/docs/guides/rotating-certificate-authority/&quot;&gt;this guide&lt;/a&gt; for details on rotating a CA.&lt;/p&gt; 
&lt;h4&gt;4. Nebula host keys and certificates generated from that certificate authority&lt;/h4&gt; 
&lt;p&gt;This assumes you have four nodes, named lighthouse1, laptop, server1, host3. You can name the nodes any way you&#39;d like, including FQDN. You&#39;ll also need to choose IP addresses and the associated subnet. In this example, we are creating a nebula network that will use 192.168.100.x/24 as its network range. This example also demonstrates nebula groups, which can later be used to define traffic rules in a nebula network.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./nebula-cert sign -name &quot;lighthouse1&quot; -ip &quot;192.168.100.1/24&quot;
./nebula-cert sign -name &quot;laptop&quot; -ip &quot;192.168.100.2/24&quot; -groups &quot;laptop,home,ssh&quot;
./nebula-cert sign -name &quot;server1&quot; -ip &quot;192.168.100.9/24&quot; -groups &quot;servers&quot;
./nebula-cert sign -name &quot;host3&quot; -ip &quot;192.168.100.10/24&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, host certificates will expire 1 second before the CA expires. Use the &lt;code&gt;-duration&lt;/code&gt; flag to specify a shorter lifetime.&lt;/p&gt; 
&lt;h4&gt;5. Configuration files for each host&lt;/h4&gt; 
&lt;p&gt;Download a copy of the nebula &lt;a href=&quot;https://github.com/slackhq/nebula/raw/master/examples/config.yml&quot;&gt;example configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;On the lighthouse node, you&#39;ll need to ensure &lt;code&gt;am_lighthouse: true&lt;/code&gt; is set.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On the individual hosts, ensure the lighthouse is defined properly in the &lt;code&gt;static_host_map&lt;/code&gt; section, and is added to the lighthouse &lt;code&gt;hosts&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;6. Copy nebula credentials, configuration, and binaries to each host&lt;/h4&gt; 
&lt;p&gt;For each host, copy the nebula binary to the host, along with &lt;code&gt;config.yml&lt;/code&gt; from step 5, and the files &lt;code&gt;ca.crt&lt;/code&gt;, &lt;code&gt;{host}.crt&lt;/code&gt;, and &lt;code&gt;{host}.key&lt;/code&gt; from step 4.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DO NOT COPY &lt;code&gt;ca.key&lt;/code&gt; TO INDIVIDUAL NODES.&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;7. Run nebula on each host&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./nebula -config /path/to/config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more detailed instructions, &lt;a href=&quot;https://nebula.defined.net/docs/&quot;&gt;find the full documentation here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Nebula from source&lt;/h2&gt; 
&lt;p&gt;Make sure you have &lt;a href=&quot;https://go.dev/doc/install&quot;&gt;go&lt;/a&gt; installed and clone this repo. Change to the nebula directory.&lt;/p&gt; 
&lt;p&gt;To build nebula for all platforms: &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To build nebula for a specific platform (ex, Windows): &lt;code&gt;make bin-windows&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/slackhq/nebula/master/Makefile&quot;&gt;Makefile&lt;/a&gt; for more details on build targets&lt;/p&gt; 
&lt;h2&gt;Curve P256 and BoringCrypto&lt;/h2&gt; 
&lt;p&gt;The default curve used for cryptographic handshakes and signatures is Curve25519. This is the recommended setting for most users. If your deployment has certain compliance requirements, you have the option of creating your CA using &lt;code&gt;nebula-cert ca -curve P256&lt;/code&gt; to use NIST Curve P256. The CA will then sign certificates using ECDSA P256, and any hosts using these certificates will use P256 for ECDH handshakes.&lt;/p&gt; 
&lt;p&gt;In addition, Nebula can be built using the &lt;a href=&quot;https://github.com/golang/go/raw/go1.20/src/crypto/internal/boring/README.md&quot;&gt;BoringCrypto GOEXPERIMENT&lt;/a&gt; by running either of the following make targets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make bin-boringcrypto
make release-boringcrypto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not the recommended default deployment, but may be useful based on your compliance requirements.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Nebula was created at Slack Technologies, Inc by Nate Brown and Ryan Huber, with contributions from Oliver Fross, Alan Lam, Wade Simmons, and Lining Wang.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>safing/portmaster</title>
      <link>https://github.com/safing/portmaster</link>
      <description>&lt;p&gt;🏔 Love Freedom - ❌ Block Mass Surveillance&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Get Peace of Mind &lt;br /&gt; with &lt;a href=&quot;https://safing.io/&quot;&gt;Easy Privacy&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Portmaster is a free and open-source application firewall that does the heavy lifting for you. Restore privacy and take back control over all your computer&#39;s network activity.&lt;/p&gt; 
&lt;p&gt;With great defaults your privacy improves without any effort. And if you want to configure and control everything down to the last detail - Portmaster has you covered too. Developed in the EU 🇪🇺, Austria.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://safing.io/download/&quot;&gt;Download for Free&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://safing.io/about/&quot;&gt;About Us&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://safing.io/assets/img/page-specific/landing/portmaster-thumbnail.png?&quot; alt=&quot;Portmaster User Interface&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;seen on:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.heise.de/tests/Datenschutz-Firewall-Portmaster-im-Test-9611687.html&quot;&gt;&lt;img src=&quot;https://safing.io/assets/img/external/heise_online.svg?sanitize=true&quot; height=&quot;35&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://www.ghacks.net/2022/11/08/portmaster-1-0-released-open-source-application-firewall/&quot;&gt;&lt;img src=&quot;https://safing.io/assets/img/external/ghacks.png&quot; alt=&quot;ghacks.net&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://www.youtube.com/watch?v=E8cTRhGtmcM&quot;&gt;&lt;img src=&quot;https://safing.io/assets/img/external/techlore.png&quot; alt=&quot;Techlore&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://lifehacker.com/the-lesser-known-apps-everyone-should-install-on-a-new-1850223434&quot;&gt;&lt;img src=&quot;https://safing.io/assets/img/external/logos/lifehacker.webp&quot; alt=&quot;Lifehacker&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://safing.io/features/&quot;&gt;Features&lt;/a&gt;&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Monitor All Network Activity&lt;/li&gt; 
 &lt;li&gt;Full Control: Block Anything&lt;/li&gt; 
 &lt;li&gt;Automatically Block Trackers &amp;amp; Malware&lt;/li&gt; 
 &lt;li&gt;Set Global &amp;amp; Per‑App Settings&lt;/li&gt; 
 &lt;li&gt;Secure DNS (Doh/DoT)&lt;/li&gt; 
 &lt;li&gt;Record and Search Network Activity (&lt;a href=&quot;https://safing.io/pricing/&quot;&gt;$&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Per-App Bandwidth Usage (&lt;a href=&quot;https://safing.io/pricing/&quot;&gt;$&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://safing.io/spn/&quot;&gt;SPN, our Next-Gen Privacy Network&lt;/a&gt; (&lt;a href=&quot;https://safing.io/pricing/&quot;&gt;$$&lt;/a&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Technical Introduction&lt;/h1&gt; 
&lt;p&gt;Portmaster is a privacy suite for your Windows and Linux desktop.&lt;/p&gt; 
&lt;h3&gt;Base Technology&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Portmaster integrates into network stack using nfqueue on Linux and a kernel driver (WFP) on Windows.&lt;/li&gt; 
 &lt;li&gt;Packets are intercepted at the raw packet level - every packet is seen and can be stopped.&lt;/li&gt; 
 &lt;li&gt;Ownership of connections is found using eBPF and &lt;code&gt;/proc&lt;/code&gt; on Linux and a kernel driver and the IP Helper API (&lt;code&gt;iphlpapi.dll&lt;/code&gt;) on Windows.&lt;/li&gt; 
 &lt;li&gt;Most settings can be defined per app, which can be matched in different ways.&lt;/li&gt; 
 &lt;li&gt;Support for special processes with weird or concealed paths/actors: 
  &lt;ul&gt; 
   &lt;li&gt;Snap, AppImage and Script support on Linux&lt;/li&gt; 
   &lt;li&gt;Windows Store apps and svchost.exe system services support on Windows&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Everything is 100% local on your device. (except the SPN, naturally) 
  &lt;ul&gt; 
   &lt;li&gt;Updates are fully signed and downloaded automatically.&lt;/li&gt; 
   &lt;li&gt;Intelligence data (block lists, geoip) is downloaded and applied automatically.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The Portmaster Core Service runs as a system service, the UI elements (App, Notifier) run in user context.&lt;/li&gt; 
 &lt;li&gt;The main UI still uses electron as a wrapper :/ - but this will change in the future. You can also open the UI in the browser&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature: Secure DNS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Portmaster intercepts &quot;astray&quot; DNS queries and reroutes them to itself for seamless integration.&lt;/li&gt; 
 &lt;li&gt;DNS queries are resolved by the default or configured DoT/DoH resolvers.&lt;/li&gt; 
 &lt;li&gt;Full support for split horizon and horizon validation to defend against rebinding attacks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature: Privacy Filter&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Define allowed network scopes: Localhost, LAN, Internet, P2P, Inbound.&lt;/li&gt; 
 &lt;li&gt;Easy rules based on Internet entities: Domain, IP, Country and more.&lt;/li&gt; 
 &lt;li&gt;Filter Lists block common malware, ad, tracker domains etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature: Network History ($)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Record connections and their details in a local database and search all of it later&lt;/li&gt; 
 &lt;li&gt;Auto-delete old history or delete on demand&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature: Bandwidth Visibility ($)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Monitor bandwidth usage per connection and app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature: SPN - Safing Privacy Network ($$)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Privacy Network aimed at use cases &quot;between&quot; VPN and Tor.&lt;/li&gt; 
 &lt;li&gt;Uses onion encryption over multiple hops just like Tor.&lt;/li&gt; 
 &lt;li&gt;Routes are chosen to cover most distance within the network to increase privacy.&lt;/li&gt; 
 &lt;li&gt;Exits are chosen near the destination server. This automatically geo-unblocks in many cases.&lt;/li&gt; 
 &lt;li&gt;Exclude apps and domains/entities from using SPN.&lt;/li&gt; 
 &lt;li&gt;Change routing algorithm and focus per app.&lt;/li&gt; 
 &lt;li&gt;Nodes are hosted by Safing (company behind Portmaster) and the community.&lt;/li&gt; 
 &lt;li&gt;Speeds are pretty decent (&amp;gt;100MBit/s).&lt;/li&gt; 
 &lt;li&gt;Further Reading: &lt;a href=&quot;https://safing.io/files/whitepaper/Gate17.pdf&quot;&gt;SPN Whitepaper&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;All details and guides in the dedicated &lt;a href=&quot;https://wiki.safing.io/&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/App&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/Install/Windows&quot;&gt;on Windows&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/Install/Linux&quot;&gt;on Linux&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/App/Compatibility#vpn-compatibly&quot;&gt;VPN Compatibility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/App/Compatibility&quot;&gt;Software Compatibility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wiki.safing.io/en/Portmaster/Architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.safing.io/portmaster/settings&quot;&gt;Settings Handbook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.safing.io/portmaster/api&quot;&gt;Portmaster Developer API&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Build Portmaster Yourself (WIP)&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://earthly.dev/get-earthly&quot;&gt;Install Earthly CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Install Docker Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;earthly +release&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Find artifacts in &lt;code&gt;./dist&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>kopia/kopia</title>
      <link>https://github.com/kopia/kopia</link>
      <description>&lt;p&gt;Cross-platform backup tool for Windows, macOS &amp; Linux with fast, incremental backups, client-side end-to-end encryption, compression and data deduplication. CLI and GUI included.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kopia&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kopia/kopia/master/icons/kopia.svg?sanitize=true&quot; alt=&quot;Kopia&quot; /&gt; &lt;a href=&quot;https://github.com/kopia/kopia/actions?query=workflow%3ABuild&quot;&gt;&lt;img src=&quot;https://github.com/kopia/kopia/workflows/Build/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://slack.kopia.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/discuss-slack-blue.svg?sanitize=true&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://godoc.org/github.com/kopia/kopia/repo&quot;&gt;&lt;img src=&quot;https://godoc.org/github.com/kopia/kopia/repo?status.svg?sanitize=true&quot; alt=&quot;GoDoc&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/kopia/kopia&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/kopia/kopia/branch/master/graph/badge.svg?token=CRK4RMRFSH&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://goreportcard.com/report/github.com/kopia/kopia&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/kopia/kopia&quot; alt=&quot;Go Report Card&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/kopia/kopia/master/CODE_OF_CONDUCT.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&quot; alt=&quot;Contributor Covenant&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/kopia/kopia/tags?page=1&amp;amp;ordering=name&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/kopia/kopia&quot; alt=&quot;Docker Pulls&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kopia/kopia/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/kopia/kopia/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gurubase.io/g/kopia&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gurubase-Ask%20Kopia%20Guru-006BFF&quot; alt=&quot;Gurubase&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;n.&lt;/em&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Replica&quot;&gt;copy, replica&lt;/a&gt; (Polish)&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kopia&quot;&gt;lance, spear&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://kopia.io&quot;&gt;fast and secure backup tool&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Kopia is a fast and secure open-source backup/restore tool that allows you to create &lt;a href=&quot;https://kopia.io/docs/features/#end-to-end-zero-knowledge-encryption&quot;&gt;encrypted&lt;/a&gt; snapshots of your data and save the snapshots to &lt;a href=&quot;https://kopia.io/docs/features/#save-snapshots-to-cloud-network-or-local-storage&quot;&gt;remote or cloud storage&lt;/a&gt; of your choice, &lt;a href=&quot;https://kopia.io/docs/features/#save-snapshots-to-cloud-network-or-local-storage&quot;&gt;to network-attached storage or server&lt;/a&gt;, or &lt;a href=&quot;https://kopia.io/docs/features/#save-snapshots-to-cloud-network-or-local-storage&quot;&gt;locally on your machine&lt;/a&gt;. Kopia does not &#39;image&#39; your whole machine. Rather, Kopia allows you to backup/restore any and all files/directories that you deem are important or critical.&lt;/p&gt; 
&lt;p&gt;Kopia has both &lt;a href=&quot;https://kopia.io/docs/features/#both-command-line-and-graphical-user-interfaces&quot;&gt;CLI (command-line interface)&lt;/a&gt; and &lt;a href=&quot;https://kopia.io/docs/features/#both-command-line-and-graphical-user-interfaces&quot;&gt;GUI (graphical user interface)&lt;/a&gt; versions, making it the perfect tool for both advanced and regular users. You can read more about Kopia&#39;s unique &lt;a href=&quot;https://kopia.io/docs/features/&quot;&gt;features&lt;/a&gt; -- which include &lt;a href=&quot;https://kopia.io/docs/features/#compression&quot;&gt;compression&lt;/a&gt;, &lt;a href=&quot;https://kopia.io/docs/features/#backup-files-and-directories-using-snapshots&quot;&gt;deduplication&lt;/a&gt;, &lt;a href=&quot;https://kopia.io/docs/features/#end-to-end-zero-knowledge-encryption&quot;&gt;end-to-end &#39;zero knowledge&#39; encryption&lt;/a&gt;, and &lt;a href=&quot;https://kopia.io/docs/features/#error-correction&quot;&gt;error correction&lt;/a&gt; -- to get a better understanding of how Kopia works.&lt;/p&gt; 
&lt;p&gt;When ready, head to the &lt;a href=&quot;https://kopia.io/docs/installation/&quot;&gt;installation&lt;/a&gt; page to download and install Kopia, and make sure to read the &lt;a href=&quot;https://kopia.io/docs/getting-started/&quot;&gt;Getting Started Guide&lt;/a&gt; for a step-by-step walkthrough of how to use Kopia.&lt;/p&gt; 
&lt;h2&gt;Pick the Cloud Storage Provider You Want&lt;/h2&gt; 
&lt;p&gt;Kopia supports saving your &lt;a href=&quot;https://kopia.io/docs/features/#end-to-end-zero-knowledge-encryption&quot;&gt;encrypted&lt;/a&gt; and &lt;a href=&quot;https://kopia.io/docs/features/#compression&quot;&gt;compressed&lt;/a&gt; snapshots to all of the following &lt;a href=&quot;https://kopia.io/docs/features/#save-snapshots-to-cloud-network-or-local-storage&quot;&gt;storage locations&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Amazon S3&lt;/strong&gt; and any &lt;strong&gt;cloud storage that is compatible with S3&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Azure Blob Storage&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backblaze B2&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Google Cloud Storage&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Any remote server or cloud storage that supports &lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Any remote server or cloud storage that supports &lt;strong&gt;SFTP&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Some of the cloud storage options supported by &lt;strong&gt;Rclone&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Requires you to download and setup Rclone in addition to Kopia, but after that Kopia manages/runs Rclone for you&lt;/li&gt; 
   &lt;li&gt;Rclone support is experimental: not all the cloud storage products supported by Rclone have been tested to work with Kopia, and some may not work with Kopia; Kopia has been tested to work with &lt;strong&gt;Dropbox&lt;/strong&gt;, &lt;strong&gt;OneDrive&lt;/strong&gt;, and &lt;strong&gt;Google Drive&lt;/strong&gt; through Rclone&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Your local machine and any network-attached storage or server&lt;/li&gt; 
 &lt;li&gt;Your own server by setting up a &lt;a href=&quot;https://kopia.io/docs/repository-server/&quot;&gt;Kopia Repository Server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And Kopia uses &lt;a href=&quot;https://kopia.io/docs/features/#backup-files-and-directories-using-snapshots&quot;&gt;data deduplication&lt;/a&gt; to save you money! Read the &lt;a href=&quot;https://kopia.io/docs/repositories/&quot;&gt;repositories help page&lt;/a&gt; for more information on supported storage locations.&lt;/p&gt; 
&lt;p&gt;With Kopia you are in full control of where to store your snapshots, that is, you pick the storage provider you want to use. You must provision and pay for the storage provider for whatever storage locations you want to use, and then tell Kopia what those storage locations are. You can even use multiple storage locations for different backup repositories if you want. Kopia also supports backing up multiple machines to the same storage location.&lt;/p&gt; 
&lt;h2&gt;Kopia in Action&lt;/h2&gt; 
&lt;p&gt;Using Kopia via command-line interface:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/ykx6uzEhKY3451fWEnX9nm9uo&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/ykx6uzEhKY3451fWEnX9nm9uo.svg?sanitize=true&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using Kopia via graphical user interface (note: the video is of an older version of Kopia and the interface is different in the current version of Kopia, but the main principles of the interface are the same):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sHJjSpasWIo&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/sHJjSpasWIo/0.jpg&quot; alt=&quot;Kopia UI Tutorial&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://kopia.io/docs/&quot;&gt;Kopia Documentation&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Building Kopia&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/kopia/kopia/master/BUILD.md&quot;&gt;Build Infrastructure&lt;/a&gt; for more information on building Kopia and working with the source code.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;Kopia is licensed under the Apache License, Version 2.0. See &lt;a href=&quot;https://raw.githubusercontent.com/kopia/kopia/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt; 
&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; 
&lt;p&gt;Kopia is open source and contributions are welcome. For more information on how to contribute see the &lt;a href=&quot;https://kopia.io/docs/contribution-guidelines/&quot;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reporting Security Issues&lt;/h2&gt; 
&lt;p&gt;If you find a security issue you&#39;d like to disclose privately, please contact &lt;code&gt;security@kopia.io&lt;/code&gt; or via direct message to maintainers on &lt;a href=&quot;https://slack.kopia.io&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.netlify.com/sites/kopia/deploys&quot;&gt;&lt;img src=&quot;https://api.netlify.com/api/v1/badges/6b5c1fe4-a0da-4e7e-939b-ff1105251985/deploy-status&quot; alt=&quot;Netlify Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>charmbracelet/bubbletea</title>
      <link>https://github.com/charmbracelet/bubbletea</link>
      <description>&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png&quot; width=&quot;308&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://stuff.charm.sh/bubbletea/bubble-tea-v2-dark.png&quot; width=&quot;312&quot; /&gt; 
  &lt;img src=&quot;https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png&quot; width=&quot;308&quot; /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true&quot; alt=&quot;Latest Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&quot;&gt;&lt;img src=&quot;https://godoc.org/github.com/charmbracelet/bubbletea?status.svg?sanitize=true&quot; alt=&quot;GoDoc&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/actions&quot;&gt;&lt;img src=&quot;https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; 
&lt;p&gt; &lt;img src=&quot;https://stuff.charm.sh/bubbletea/bubbletea-example.gif&quot; width=&quot;100%&quot; alt=&quot;Bubble Tea Example&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a framerate-based renderer, mouse support, focus reporting and more.&lt;/p&gt; 
&lt;p&gt;To get started, see the tutorial below, the &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/tree/main/examples&quot;&gt;examples&lt;/a&gt;, the &lt;a href=&quot;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&quot;&gt;docs&lt;/a&gt;, the &lt;a href=&quot;https://charm.sh/yt&quot;&gt;video tutorials&lt;/a&gt; and some common &lt;a href=&quot;https://raw.githubusercontent.com/charmbracelet/bubbletea/main/#libraries-we-use-with-bubble-tea&quot;&gt;resources&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;By the way&lt;/h2&gt; 
&lt;p&gt;Be sure to check out &lt;a href=&quot;https://github.com/charmbracelet/bubbles&quot;&gt;Bubbles&lt;/a&gt;, a library of common UI components for Bubble Tea.&lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;https://github.com/charmbracelet/bubbles&quot;&gt;&lt;img src=&quot;https://stuff.charm.sh/bubbles/bubbles-badge.png&quot; width=&quot;174&quot; alt=&quot;Bubbles Badge&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://github.com/charmbracelet/bubbles&quot;&gt;&lt;img src=&quot;https://stuff.charm.sh/bubbles-examples/textinput.gif&quot; width=&quot;400&quot; alt=&quot;Text Input Example from Bubbles&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Tutorial&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the functional design paradigms of &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt;, which happens to work nicely with Go. It&#39;s a delightful way to build applications.&lt;/p&gt; 
&lt;p&gt;This tutorial assumes you have a working knowledge of Go.&lt;/p&gt; 
&lt;p&gt;By the way, the non-annotated source code for this program is available &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Enough! Let&#39;s get to it.&lt;/h3&gt; 
&lt;p&gt;For this tutorial, we&#39;re making a shopping list.&lt;/p&gt; 
&lt;p&gt;To start we&#39;ll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we&#39;ll call &lt;code&gt;tea&lt;/code&gt; for short.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

// These imports will be used later on the tutorial. If you save the file
// now, Go might complain they are unused, but that&#39;s fine.
// You may also need to run `go mod tidy` to download bubbletea and its
// dependencies.
import (
    &quot;fmt&quot;
    &quot;os&quot;

    tea &quot;github.com/charmbracelet/bubbletea&quot;
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bubble Tea programs are comprised of a &lt;strong&gt;model&lt;/strong&gt; that describes the application state and three simple methods on that model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;, a function that returns an initial command for the application to run.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;, a function that handles incoming events and updates the model accordingly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;, a function that renders the UI based on the data in the model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The Model&lt;/h3&gt; 
&lt;p&gt;So let&#39;s start by defining our model which will store our application&#39;s state. It can be any type, but a &lt;code&gt;struct&lt;/code&gt; usually makes the most sense.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type model struct {
    choices  []string           // items on the to-do list
    cursor   int                // which to-do list item our cursor is pointing at
    selected map[int]struct{}   // which to-do items are selected
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;p&gt;Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func initialModel() model {
	return model{
		// Our to-do list is a grocery list
		choices:  []string{&quot;Buy carrots&quot;, &quot;Buy celery&quot;, &quot;Buy kohlrabi&quot;},

		// A map which indicates which choices are selected. We&#39;re using
		// the  map like a mathematical set. The keys refer to the indexes
		// of the `choices` slice, above.
		selected: make(map[int]struct{}),
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we define the &lt;code&gt;Init&lt;/code&gt; method. &lt;code&gt;Init&lt;/code&gt; can return a &lt;code&gt;Cmd&lt;/code&gt; that could perform some initial I/O. For now, we don&#39;t need to do any I/O, so for the command, we&#39;ll just return &lt;code&gt;nil&lt;/code&gt;, which translates to &quot;no command.&quot;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func (m model) Init() tea.Cmd {
    // Just return `nil`, which means &quot;no I/O right now, please.&quot;
    return nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The Update Method&lt;/h3&gt; 
&lt;p&gt;Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a &lt;code&gt;Cmd&lt;/code&gt; to make more things happen, but for now don&#39;t worry about that part.&lt;/p&gt; 
&lt;p&gt;In our case, when a user presses the down arrow, &lt;code&gt;Update&lt;/code&gt;’s job is to notice that the down arrow was pressed and move the cursor accordingly (or not).&lt;/p&gt; 
&lt;p&gt;The “something happened” comes in the form of a &lt;code&gt;Msg&lt;/code&gt;, which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server.&lt;/p&gt; 
&lt;p&gt;We usually figure out which type of &lt;code&gt;Msg&lt;/code&gt; we received with a type switch, but you could also use a type assertion.&lt;/p&gt; 
&lt;p&gt;For now, we&#39;ll just deal with &lt;code&gt;tea.KeyMsg&lt;/code&gt; messages, which are automatically sent to the update function when keys are pressed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {

    // Is it a key press?
    case tea.KeyMsg:

        // Cool, what was the actual key pressed?
        switch msg.String() {

        // These keys should exit the program.
        case &quot;ctrl+c&quot;, &quot;q&quot;:
            return m, tea.Quit

        // The &quot;up&quot; and &quot;k&quot; keys move the cursor up
        case &quot;up&quot;, &quot;k&quot;:
            if m.cursor &amp;gt; 0 {
                m.cursor--
            }

        // The &quot;down&quot; and &quot;j&quot; keys move the cursor down
        case &quot;down&quot;, &quot;j&quot;:
            if m.cursor &amp;lt; len(m.choices)-1 {
                m.cursor++
            }

        // The &quot;enter&quot; key and the spacebar (a literal space) toggle
        // the selected state for the item that the cursor is pointing at.
        case &quot;enter&quot;, &quot; &quot;:
            _, ok := m.selected[m.cursor]
            if ok {
                delete(m.selected, m.cursor)
            } else {
                m.selected[m.cursor] = struct{}{}
            }
        }
    }

    // Return the updated model to the Bubble Tea runtime for processing.
    // Note that we&#39;re not returning a command.
    return m, nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may have noticed that &lt;kbd&gt;ctrl+c&lt;/kbd&gt; and &lt;kbd&gt;q&lt;/kbd&gt; above return a &lt;code&gt;tea.Quit&lt;/code&gt; command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program.&lt;/p&gt; 
&lt;h3&gt;The View Method&lt;/h3&gt; 
&lt;p&gt;At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a &lt;code&gt;string&lt;/code&gt;. That string is our UI!&lt;/p&gt; 
&lt;p&gt;Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func (m model) View() string {
    // The header
    s := &quot;What should we buy at the market?\n\n&quot;

    // Iterate over our choices
    for i, choice := range m.choices {

        // Is the cursor pointing at this choice?
        cursor := &quot; &quot; // no cursor
        if m.cursor == i {
            cursor = &quot;&amp;gt;&quot; // cursor!
        }

        // Is this choice selected?
        checked := &quot; &quot; // not selected
        if _, ok := m.selected[i]; ok {
            checked = &quot;x&quot; // selected!
        }

        // Render the row
        s += fmt.Sprintf(&quot;%s [%s] %s\n&quot;, cursor, checked, choice)
    }

    // The footer
    s += &quot;\nPress q to quit.\n&quot;

    // Send the UI for rendering
    return s
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;All Together Now&lt;/h3&gt; 
&lt;p&gt;The last step is to simply run our program. We pass our initial model to &lt;code&gt;tea.NewProgram&lt;/code&gt; and let it rip:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func main() {
    p := tea.NewProgram(initialModel())
    if _, err := p.Run(); err != nil {
        fmt.Printf(&quot;Alas, there&#39;s been an error: %v&quot;, err)
        os.Exit(1)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What’s Next?&lt;/h2&gt; 
&lt;p&gt;This tutorial covers the basics of building an interactive terminal UI, but in the real world you&#39;ll also need to perform I/O. To learn about that have a look at the &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/&quot;&gt;Command Tutorial&lt;/a&gt;. It&#39;s pretty simple.&lt;/p&gt; 
&lt;p&gt;There are also several &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/tree/main/examples&quot;&gt;Bubble Tea examples&lt;/a&gt; available and, of course, there are &lt;a href=&quot;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&quot;&gt;Go Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;h3&gt;Debugging with Delve&lt;/h3&gt; 
&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Start the debugger
$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .
API server listening at: 127.0.0.1:43000

# Connect to it from another terminal
$ dlv connect 127.0.0.1:43000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not explicitly supply the &lt;code&gt;--listen&lt;/code&gt; flag, the port used will vary per run, so passing this in makes the debugger easier to use from a script or your IDE of choice.&lt;/p&gt; 
&lt;p&gt;Additionally, we pass in &lt;code&gt;--api-version=2&lt;/code&gt; because delve defaults to version 1 for backwards compatibility reasons. However, delve recommends using version 2 for all new development and some clients may no longer work with version 1. For more information, see the &lt;a href=&quot;https://github.com/go-delve/delve/tree/master/Documentation/api&quot;&gt;Delve documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Logging Stuff&lt;/h3&gt; 
&lt;p&gt;You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;if len(os.Getenv(&quot;DEBUG&quot;)) &amp;gt; 0 {
	f, err := tea.LogToFile(&quot;debug.log&quot;, &quot;debug&quot;)
	if err != nil {
		fmt.Println(&quot;fatal:&quot;, err)
		os.Exit(1)
	}
	defer f.Close()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see what’s being logged in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; 
&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/bubbles&quot;&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/lipgloss&quot;&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/harmonica&quot;&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lrstanley/bubblezone&quot;&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NimbleMarkets/ntcharts&quot;&gt;ntcharts&lt;/a&gt;: A terminal charting library built for Bubble Tea and &lt;a href=&quot;https://github.com/charmbracelet/lipgloss&quot;&gt;Lip Gloss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; 
&lt;p&gt;There are over &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/network/dependents&quot;&gt;10,000 applications&lt;/a&gt; built with Bubble Tea! Here are a handful of ’em.&lt;/p&gt; 
&lt;h3&gt;Staff favourites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/twpayne/chezmoi&quot;&gt;chezmoi&lt;/a&gt;: securely manage your dotfiles across multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bensadeh/circumflex&quot;&gt;circumflex&lt;/a&gt;: read Hacker News in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.github.com/dlvhdr/gh-dash&quot;&gt;gh-dash&lt;/a&gt;: a GitHub CLI extension for PRs and issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Broderick-Westrope/tetrigo&quot;&gt;Tetrigo&lt;/a&gt;: Tetris in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emprcl/signls&quot;&gt;Signls&lt;/a&gt;: a generative midi sequencer designed for composition and live performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yorukot/superfile&quot;&gt;Superfile&lt;/a&gt;: a super file manager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;In Industry&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Microsoft Azure –&amp;nbsp;&lt;a href=&quot;https://github.com/Azure/aztfy&quot;&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; 
 &lt;li&gt;Daytona –&amp;nbsp;&lt;a href=&quot;https://github.com/daytonaio/daytona&quot;&gt;Daytona&lt;/a&gt;: open source dev environment manager&lt;/li&gt; 
 &lt;li&gt;Cockroach Labs – &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;CockroachDB&lt;/a&gt;: a cloud-native, high-availability distributed SQL database&lt;/li&gt; 
 &lt;li&gt;Truffle Security Co. –&amp;nbsp;&lt;a href=&quot;https://github.com/trufflesecurity/trufflehog&quot;&gt;Trufflehog&lt;/a&gt;: find leaked credentials&lt;/li&gt; 
 &lt;li&gt;NVIDIA –&amp;nbsp;&lt;a href=&quot;https://github.com/NVIDIA/container-canary&quot;&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; 
 &lt;li&gt;AWS –&amp;nbsp;&lt;a href=&quot;https://github.com/awslabs/eks-node-viewer&quot;&gt;eks-node-viewer&lt;/a&gt;: a tool for visualizing dynamic node usage within an EKS cluster&lt;/li&gt; 
 &lt;li&gt;MinIO –&amp;nbsp;&lt;a href=&quot;https://github.com/minio/mc&quot;&gt;mc&lt;/a&gt;: the official &lt;a href=&quot;https://min.io&quot;&gt;MinIO&lt;/a&gt; client&lt;/li&gt; 
 &lt;li&gt;Ubuntu –&amp;nbsp;&lt;a href=&quot;https://github.com/ubuntu/authd&quot;&gt;Authd&lt;/a&gt;: an authentication daemon for cloud-based identity providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Charm stuff&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/glow&quot;&gt;Glow&lt;/a&gt;: a markdown reader, browser, and online markdown stash&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/huh&quot;&gt;Huh?&lt;/a&gt;: an interactive prompt and form toolkit&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/mods&quot;&gt;Mods&lt;/a&gt;: AI on the CLI, built for pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/charmbracelet/wishlist&quot;&gt;Wishlist&lt;/a&gt;: an SSH directory (and bastion!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;There’s so much more where that came from&lt;/h3&gt; 
&lt;p&gt;For more applications built with Bubble Tea see &lt;a href=&quot;https://github.com/charm-and-friends/charm-in-the-wild&quot;&gt;Charm &amp;amp; Friends&lt;/a&gt;. Is there something cool you made with Bubble Tea you want to share? &lt;a href=&quot;https://github.com/charm-and-friends/charm-in-the-wild&quot;&gt;PRs&lt;/a&gt; are welcome!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/charmbracelet/bubbletea/contribute&quot;&gt;contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/charmcli&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mastodon.social/@charmcli&quot;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://charm.sh/chat&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href=&quot;https://github.com/tj/go-tea&quot;&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href=&quot;https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle&quot;&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/charmbracelet/bubbletea/raw/main/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Part of &lt;a href=&quot;https://charm.sh&quot;&gt;Charm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://charm.sh/&quot;&gt;&lt;img alt=&quot;The Charm logo&quot; src=&quot;https://stuff.charm.sh/charm-badge.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>m1k1o/neko</title>
      <link>https://github.com/m1k1o/neko</link>
      <description>&lt;p&gt;A self hosted virtual browser that runs in docker and uses WebRTC.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/m1k1o/neko&quot; title=&quot;Neko&#39;s Github repository.&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/logo.png&quot; width=&quot;400&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/m1k1o/neko/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/m1k1o/neko&quot; alt=&quot;release&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/m1k1o/neko/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/m1k1o/neko&quot; alt=&quot;license&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/m1k1o/neko&quot;&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/m1k1o/neko&quot; alt=&quot;pulls&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/m1k1o/neko/issues&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/issues/m1k1o/neko&quot; alt=&quot;issues&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/m1k1o&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/-sponsor-red&quot; alt=&quot;issues&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/3U6hWpC&quot;&gt; &lt;img src=&quot;https://discordapp.com/api/guilds/665851821906067466/widget.png&quot; alt=&quot;Chat on discord&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://hellogithub.com/repository/4536d4546af24196af3f08a023dfa007&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=4536d4546af24196af3f08a023dfa007&amp;amp;claim_uid=0x19e4dJwD83aW2&amp;amp;theme=small&quot; alt=&quot;Featured｜HelloGitHub&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/m1k1o/neko/actions&quot;&gt; &lt;img src=&quot;https://github.com/m1k1o/neko/actions/workflows/ghcr.yml/badge.svg?sanitize=true&quot; alt=&quot;build&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
 &lt;img src=&quot;https://neko.m1k1o.net/img/intro.gif&quot; width=&quot;650&quot; height=&quot;auto&quot; /&gt; 
&lt;/div&gt; 
&lt;h1&gt;n.eko&lt;/h1&gt; 
&lt;p&gt;Welcome to Neko, a self-hosted virtual browser that runs in Docker and uses WebRTC technology. Neko is a powerful tool that allows you to &lt;strong&gt;run a fully-functional browser in a virtual environment&lt;/strong&gt;, giving you the ability to &lt;strong&gt;access the internet securely and privately from anywhere&lt;/strong&gt;. With Neko, you can browse the web, &lt;strong&gt;run applications&lt;/strong&gt;, and perform other tasks just as you would on a regular browser, all within a &lt;strong&gt;secure and isolated environment&lt;/strong&gt;. Whether you are a developer looking to test web applications, a &lt;strong&gt;privacy-conscious user seeking a secure browsing experience&lt;/strong&gt;, or simply someone who wants to take advantage of the &lt;strong&gt;convenience and flexibility of a virtual browser&lt;/strong&gt;, Neko is the perfect solution.&lt;/p&gt; 
&lt;p&gt;In addition to its security and privacy features, Neko offers the &lt;strong&gt;ability for multiple users to access it simultaneously&lt;/strong&gt;. This makes it an ideal solution for teams or organizations that need to share access to a browser, as well as for individuals who want to use &lt;strong&gt;multiple devices to access the same virtual environment&lt;/strong&gt;. With Neko, you can &lt;strong&gt;easily and securely share access to a browser with others&lt;/strong&gt;, without having to worry about maintaining separate configurations or settings. Whether you need to &lt;strong&gt;collaborate on a project&lt;/strong&gt;, access shared resources, or simply want to &lt;strong&gt;share access to a browser with friends or family&lt;/strong&gt;, Neko makes it easy to do so.&lt;/p&gt; 
&lt;p&gt;Neko is also a great tool for &lt;strong&gt;hosting watch parties&lt;/strong&gt; and interactive presentations. With its virtual browser capabilities, Neko allows you to host watch parties and presentations that are &lt;strong&gt;accessible from anywhere&lt;/strong&gt;, without the need for in-person gatherings. This makes it easy to &lt;strong&gt;stay connected with friends and colleagues&lt;/strong&gt;, even when you are unable to meet in person. With Neko, you can easily host a watch party or give an &lt;strong&gt;interactive presentation&lt;/strong&gt;, whether it&#39;s for leisure or work. Simply invite your guests to join the virtual environment, and you can share the screen and &lt;strong&gt;interact with them in real-time&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This app uses WebRTC to stream a desktop inside of a docker container, original author made this because &lt;a href=&quot;https://en.wikipedia.org/wiki/Rabb.it&quot;&gt;rabb.it&lt;/a&gt; went under and his internet could not handle streaming and discord kept crashing when his friend attempted to. He just wanted to watch anime with his friends ლ(ಠ益ಠლ) so he started digging throughout the internet and found a few &lt;em&gt;kinda&lt;/em&gt; clones, but none of them had the virtual browser, then he found &lt;a href=&quot;https://github.com/Khauri/Turtus&quot;&gt;Turtus&lt;/a&gt; and he was able to figure out the rest.&lt;/p&gt; 
&lt;p&gt;Then I found &lt;a href=&quot;https://github.com/nurdism/neko&quot;&gt;this&lt;/a&gt; project and started to dig into it. I really liked the idea of having collaborative browser browsing together with multiple people, so I created a fork. Initially, I wanted to merge my changes to the upstream repository, but the original author did not have time for this project anymore and it got eventually archived.&lt;/p&gt; 
&lt;h2&gt;Use-cases and comparison&lt;/h2&gt; 
&lt;p&gt;Neko started as a virtual browser that is streamed using WebRTC to multiple users.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is &lt;strong&gt;not only limited to a browser&lt;/strong&gt;; it can run anything that runs on linux (e.g. VLC). Browser only happens to be the most popular and widely used use-case.&lt;/li&gt; 
 &lt;li&gt;In fact, it is not limited to a single program either; you can install a full desktop environment (e.g. XFCE, KDE).&lt;/li&gt; 
 &lt;li&gt;Speaking of limits, it does not need to run in a container; you could install neko on your host, connect to your X server and control your whole VM.&lt;/li&gt; 
 &lt;li&gt;Theoretically it is not limited to only X server, anything that can be controlled and scraped periodically for images could be used instead. 
  &lt;ul&gt; 
   &lt;li&gt;Like implementing RDP or VNC protocol, where neko would only act as WebRTC relay server. This is currently only future.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Primary use case is connecting with multiple people, leveraging real time synchronization and interactivity:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Watch party&lt;/strong&gt; - watching video content together with multiple people and reacting to it (chat, emotes) - open source alternative to &lt;a href=&quot;https://giggl.app/&quot;&gt;giggl.app&lt;/a&gt; or &lt;a href=&quot;https://watch.hyperbeam.com&quot;&gt;hyperbeam&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive presentation&lt;/strong&gt; - not only screen sharing, but others can control the screen.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaborative tool&lt;/strong&gt; - brainstorming ideas, cobrowsing, code debugging together.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support/Teaching&lt;/strong&gt; - interactively guiding people in controlled environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embed anything&lt;/strong&gt; - embed virtual browser in your web app - open source alternative to &lt;a href=&quot;https://hyperbeam.com/&quot;&gt;hyperbeam API&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;open any third-party website or application, synchronize audio and video flawlessly among multiple participants.&lt;/li&gt; 
   &lt;li&gt;request rooms using API with &lt;a href=&quot;https://github.com/m1k1o/neko-rooms&quot;&gt;neko-rooms&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other use cases that benefit from single-user:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Personal workspace&lt;/strong&gt; - streaming containerized apps and desktops to end-users - similar to &lt;a href=&quot;https://www.kasmweb.com/&quot;&gt;kasm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Persistent browser&lt;/strong&gt; - own browser with persistent cookies available anywhere - similar to &lt;a href=&quot;https://www.mightyapp.com/&quot;&gt;mightyapp&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;no state is left on the host browser after terminating the connection.&lt;/li&gt; 
   &lt;li&gt;sensitive data like cookies are not transferred - only video is shared.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Throwaway browser&lt;/strong&gt; - a better solution for planning secret parties and buying birthday gifts off the internet. 
  &lt;ul&gt; 
   &lt;li&gt;use Tor Browser and &lt;a href=&quot;https://github.com/m1k1o/neko-vpn&quot;&gt;VPN&lt;/a&gt; for additional anonymity.&lt;/li&gt; 
   &lt;li&gt;mitigates risk of OS fingerprinting and browser vulnerabilities by running in container.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session broadcasting&lt;/strong&gt; - broadcast room content using RTMP (to e.g. twitch or youtube...).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session recording&lt;/strong&gt; - broadcast RTMP can be saved to a file using e.g. &lt;a href=&quot;https://www.nginx.com/products/nginx/modules/rtmp-media-streaming/&quot;&gt;nginx-rtmp&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;have clean environment when recording tutorials.&lt;/li&gt; 
   &lt;li&gt;no need to hide bookmarks or use incognito mode.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jump host&lt;/strong&gt; - access your internal applications securely without the need for VPN.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated browser&lt;/strong&gt; - you can install &lt;a href=&quot;https://playwright.dev/&quot;&gt;playwright&lt;/a&gt; or &lt;a href=&quot;https://pptr.dev/&quot;&gt;puppeteer&lt;/a&gt; and automate tasks while being able to actively intercept them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compared to clientless remote desktop gateway (e.g. &lt;a href=&quot;https://guacamole.apache.org/&quot;&gt;Apache Guacamole&lt;/a&gt; or &lt;a href=&quot;https://github.com/novnc/websockify&quot;&gt;websockify&lt;/a&gt; with &lt;a href=&quot;https://novnc.com/&quot;&gt;noVNC&lt;/a&gt;), installed with remote desktop server along with desired program (e.g. &lt;a href=&quot;https://docs.linuxserver.io/images/docker-firefox&quot;&gt;linuxserver/firefox&lt;/a&gt;) provides neko additionally:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Smooth video&lt;/strong&gt; because it uses WebRTC and not images sent over WebSockets.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built in audio&lt;/strong&gt; support, what is not part of Apache Guacamole or noVNC.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-participant control&lt;/strong&gt;, what is not natively supported by Apache Guacamole or noVNC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported browsers&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#firefox&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/firefox.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/firefox&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#tor-browser&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/tor-browser.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/tor-browser&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#waterfox&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/waterfox.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/waterfox&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#chromium&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/chromium.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/chromium&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#google-chrome&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/google-chrome.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/google-chrome&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#ungoogled-chromium&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/ungoogled-chromium.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/google-chrome&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#microsoft-edge&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/microsoft-edge.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/microsoft-edge&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#brave&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/brave.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/brave&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#vivaldi&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/vivaldi.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/vivaldi&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#opera&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/opera.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/opera&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;p&gt;... see &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images&quot;&gt;all available images&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;Other applications&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#xfce&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/xfce.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/xfce&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#kde&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/kde.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/kde&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#remmina&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/remmina.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/remmina&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/docker-images#vlc&quot;&gt; &lt;img src=&quot;https://neko.m1k1o.net/img/icons/vlc.svg?sanitize=true&quot; title=&quot;ghcr.io/m1k1o/neko/vlc&quot; width=&quot;60&quot; height=&quot;auto&quot; /&gt; &lt;/a&gt; 
 &lt;p&gt;... others in &lt;a href=&quot;https://github.com/m1k1o/neko-apps&quot;&gt;m1k1o/neko-apps&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;Why neko?&lt;/h3&gt; 
&lt;p&gt;I like cats 🐱 (&lt;code&gt;Neko&lt;/code&gt; is the Japanese word for cat), I&#39;m a weeb/nerd.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;But why the cat butt?&lt;/strong&gt;&lt;/em&gt; Because cats are &lt;em&gt;assholes&lt;/em&gt;, but you love them anyways.&lt;/p&gt; 
&lt;h2&gt;Multiple rooms&lt;/h2&gt; 
&lt;p&gt;For neko room management software, visit &lt;a href=&quot;https://github.com/m1k1o/neko-rooms&quot;&gt;neko-rooms&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It also offers &lt;a href=&quot;https://github.com/m1k1o/neko-rooms/?tab=readme-ov-file#zero-knowledge-installation-with-https&quot;&gt;Zero-knowledge installation (with HTTPS)&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full documentation is available at &lt;a href=&quot;https://neko.m1k1o.net/&quot;&gt;neko.m1k1o.net&lt;/a&gt;. Key sections include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/migration-from-v2&quot;&gt;Migration from V2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/quick-start&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/installation/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/faq&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neko.m1k1o.net/docs/v3/troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Check the &lt;a href=&quot;https://neko.m1k1o.net/contributing&quot;&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you find Neko useful, consider supporting the project via &lt;a href=&quot;https://github.com/sponsors/m1k1o&quot;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-go</title>
      <link>https://github.com/openai/openai-go</link>
      <description>&lt;p&gt;The official Go library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Go API Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://pkg.go.dev/github.com/openai/openai-go/v2&quot;&gt;&lt;img src=&quot;https://pkg.go.dev/badge/github.com/openai/openai-go.svg?sanitize=true&quot; alt=&quot;Go Reference&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The OpenAI Go library provides convenient access to the &lt;a href=&quot;https://platform.openai.com/docs&quot;&gt;OpenAI REST API&lt;/a&gt; from applications written in Go.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The latest version of this package has small and limited breaking changes. See the &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
	&quot;github.com/openai/openai-go/v2&quot; // imported as openai
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;p&gt;Or to pin the version:&lt;/p&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;go get -u &#39;github.com/openai/openai-go@v2.0.2&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;This library requires Go 1.21+.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The full API of this library can be found in &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/api.md&quot;&gt;api.md&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;context&quot;
	&quot;fmt&quot;

	&quot;github.com/openai/openai-go/v2&quot;
	&quot;github.com/openai/openai-go/v2/option&quot;
	&quot;github.com/openai/openai-go/v2/shared&quot;
)

func main() {
	client := openai.NewClient(
		option.WithAPIKey(&quot;My API Key&quot;), // defaults to os.LookupEnv(&quot;OPENAI_API_KEY&quot;)
	)
	chatCompletion, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{
			openai.UserMessage(&quot;Say this is a test&quot;),
		},
		Model: openai.ChatModelGPT4o,
	})
	if err != nil {
		panic(err.Error())
	}
	println(chatCompletion.Choices[0].Message.Content)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Conversations&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;param := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(&quot;What kind of houseplant is easy to take care of?&quot;),
	},
	Seed:     openai.Int(1),
	Model:    openai.ChatModelGPT4o,
}

completion, err := client.Chat.Completions.New(ctx, param)

param.Messages = append(param.Messages, completion.Choices[0].Message.ToParam())
param.Messages = append(param.Messages, openai.UserMessage(&quot;How big are those?&quot;))

// continue the conversation
completion, err = client.Chat.Completions.New(ctx, param)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Streaming responses&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;question := &quot;Write an epic&quot;

stream := client.Chat.Completions.NewStreaming(ctx, openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Seed:  openai.Int(0),
	Model: openai.ChatModelGPT4o,
})

// optionally, an accumulator helper can be used
acc := openai.ChatCompletionAccumulator{}

for stream.Next() {
	chunk := stream.Current()
	acc.AddChunk(chunk)

	if content, ok := acc.JustFinishedContent(); ok {
		println(&quot;Content stream finished:&quot;, content)
	}

	// if using tool calls
	if tool, ok := acc.JustFinishedToolCall(); ok {
		println(&quot;Tool call stream finished:&quot;, tool.Index, tool.Name, tool.Arguments)
	}

	if refusal, ok := acc.JustFinishedRefusal(); ok {
		println(&quot;Refusal stream finished:&quot;, refusal)
	}

	// it&#39;s best to use chunks after handling JustFinished events
	if len(chunk.Choices) &amp;gt; 0 {
		println(chunk.Choices[0].Delta.Content)
	}
}

if stream.Err() != nil {
	panic(stream.Err())
}

// After the stream is finished, acc can be used like a ChatCompletion
_ = acc.Choices[0].Message.Content
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-accumulating/main.go&quot;&gt;full streaming and accumulation example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tool calling&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
	&quot;encoding/json&quot;
	// ...
)

// ...

question := &quot;What is the weather in New York City?&quot;

params := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Tools: []openai.ChatCompletionToolParam{
		{
			Function: openai.FunctionDefinitionParam{
				Name:        &quot;get_weather&quot;,
				Description: openai.String(&quot;Get weather at the given location&quot;),
				Parameters: openai.FunctionParameters{
					&quot;type&quot;: &quot;object&quot;,
					&quot;properties&quot;: map[string]interface{}{
						&quot;location&quot;: map[string]string{
							&quot;type&quot;: &quot;string&quot;,
						},
					},
					&quot;required&quot;: []string{&quot;location&quot;},
				},
			},
		},
	},
	Model: openai.ChatModelGPT4o,
}

// If there is a was a function call, continue the conversation
params.Messages = append(params.Messages, completion.Choices[0].Message.ToParam())
for _, toolCall := range toolCalls {
	if toolCall.Function.Name == &quot;get_weather&quot; {
		// Extract the location from the function call arguments
		var args map[string]interface{}
		err := json.Unmarshal([]byte(toolCall.Function.Arguments), &amp;amp;args)
		if err != nil {
			panic(err)
		}
		location := args[&quot;location&quot;].(string)

		// Simulate getting weather data
		weatherData := getWeather(location)

		// Print the weather data
		fmt.Printf(&quot;Weather in %s: %s\n&quot;, location, weatherData)

		params.Messages = append(params.Messages, openai.ToolMessage(weatherData, toolCall.ID))
	}
}

// ... continue the conversation with the information provided by the tool
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-tool-calling/main.go&quot;&gt;full tool calling example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Structured outputs&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
	&quot;encoding/json&quot;
	&quot;github.com/invopop/jsonschema&quot;
	// ...
)

// A struct that will be converted to a Structured Outputs response schema
type HistoricalComputer struct {
	Origin       Origin   `json:&quot;origin&quot; jsonschema_description:&quot;The origin of the computer&quot;`
	Name         string   `json:&quot;full_name&quot; jsonschema_description:&quot;The name of the device model&quot;`
	Legacy       string   `json:&quot;legacy&quot; jsonschema:&quot;enum=positive,enum=neutral,enum=negative&quot; jsonschema_description:&quot;Its influence on the field of computing&quot;`
	NotableFacts []string `json:&quot;notable_facts&quot; jsonschema_description:&quot;A few key facts about the computer&quot;`
}

type Origin struct {
	YearBuilt    int64  `json:&quot;year_of_construction&quot; jsonschema_description:&quot;The year it was made&quot;`
	Organization string `json:&quot;organization&quot; jsonschema_description:&quot;The organization that was in charge of its development&quot;`
}

func GenerateSchema[T any]() interface{} {
	// Structured Outputs uses a subset of JSON schema
	// These flags are necessary to comply with the subset
	reflector := jsonschema.Reflector{
		AllowAdditionalProperties: false,
		DoNotReference:            true,
	}
	var v T
	schema := reflector.Reflect(v)
	return schema
}

// Generate the JSON schema at initialization time
var HistoricalComputerResponseSchema = GenerateSchema[HistoricalComputer]()

func main() {

	// ...

	question := &quot;What computer ran the first neural network?&quot;

	schemaParam := openai.ResponseFormatJSONSchemaJSONSchemaParam{
		Name:        &quot;historical_computer&quot;,
		Description: openai.String(&quot;Notable information about a computer&quot;),
		Schema:      HistoricalComputerResponseSchema,
		Strict:      openai.Bool(true),
	}

	chat, _ := client.Chat.Completions.New(ctx, openai.ChatCompletionNewParams{
		// ...
		ResponseFormat: openai.ChatCompletionNewParamsResponseFormatUnion{
			OfJSONSchema: &amp;amp;openai.ResponseFormatJSONSchemaParam{
				JSONSchema: schemaParam,
			},
		},
		// only certain models can perform structured outputs
		Model: openai.ChatModelGPT4o2024_08_06,
	})

	// extract into a well-typed struct
	var historicalComputer HistoricalComputer
	_ = json.Unmarshal([]byte(chat.Choices[0].Message.Content), &amp;amp;historicalComputer)

	historicalComputer.Name
	historicalComputer.Origin.YearBuilt
	historicalComputer.Origin.Organization
	for i, fact := range historicalComputer.NotableFacts {
		// ...
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/examples/structured-outputs/main.go&quot;&gt;full structured outputs example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;Request fields&lt;/h3&gt; 
&lt;p&gt;The openai library uses the &lt;a href=&quot;https://tip.golang.org/doc/go1.24#encodingjsonpkgencodingjson&quot;&gt;&lt;code&gt;omitzero&lt;/code&gt;&lt;/a&gt; semantics from the Go 1.24+ &lt;code&gt;encoding/json&lt;/code&gt; release for request fields.&lt;/p&gt; 
&lt;p&gt;Required primitive fields (&lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.) feature the tag &lt;code&gt;`json:&quot;...,required&quot;`&lt;/code&gt;. These fields are always serialized, even their zero values.&lt;/p&gt; 
&lt;p&gt;Optional primitive types are wrapped in a &lt;code&gt;param.Opt[T]&lt;/code&gt;. These fields can be set with the provided constructors, &lt;code&gt;openai.String(string)&lt;/code&gt;, &lt;code&gt;openai.Int(int64)&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Any &lt;code&gt;param.Opt[T]&lt;/code&gt;, map, slice, struct or string enum uses the tag &lt;code&gt;`json:&quot;...,omitzero&quot;`&lt;/code&gt;. Its zero value is considered omitted.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;param.IsOmitted(any)&lt;/code&gt; function can confirm the presence of any &lt;code&gt;omitzero&lt;/code&gt; field.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;p := openai.ExampleParams{
	ID:   &quot;id_xxx&quot;,             // required property
	Name: openai.String(&quot;...&quot;), // optional property

	Point: openai.Point{
		X: 0,             // required field will serialize as 0
		Y: openai.Int(1), // optional field will serialize as 1
		// ... omitted non-required fields will not be serialized
	},

	Origin: openai.Origin{}, // the zero value of [Origin] is considered omitted
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To send &lt;code&gt;null&lt;/code&gt; instead of a &lt;code&gt;param.Opt[T]&lt;/code&gt;, use &lt;code&gt;param.Null[T]()&lt;/code&gt;. To send &lt;code&gt;null&lt;/code&gt; instead of a struct &lt;code&gt;T&lt;/code&gt;, use &lt;code&gt;param.NullStruct[T]()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;p.Name = param.Null[string]()       // &#39;null&#39; instead of string
p.Point = param.NullStruct[Point]() // &#39;null&#39; instead of struct

param.IsNull(p.Name)  // true
param.IsNull(p.Point) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Request structs contain a &lt;code&gt;.SetExtraFields(map[string]any)&lt;/code&gt; method which can send non-conforming fields in the request body. Extra fields overwrite any struct fields with a matching key. For security reasons, only use &lt;code&gt;SetExtraFields&lt;/code&gt; with trusted data.&lt;/p&gt; 
&lt;p&gt;To send a custom value instead of a struct, use &lt;code&gt;param.Override[T](value)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// In cases where the API specifies a given type,
// but you want to send something else, use [SetExtraFields]:
p.SetExtraFields(map[string]any{
	&quot;x&quot;: 0.01, // send &quot;x&quot; as a float instead of int
})

// Send a number instead of an object
custom := param.Override[openai.FooParams](12)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request unions&lt;/h3&gt; 
&lt;p&gt;Unions are represented as a struct with fields prefixed by &quot;Of&quot; for each of it&#39;s variants, only one field can be non-zero. The non-zero field will be serialized.&lt;/p&gt; 
&lt;p&gt;Sub-properties of the union can be accessed via methods on the union struct. These methods return a mutable pointer to the underlying data, if present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// Only one field can be non-zero, use param.IsOmitted() to check if a field is set
type AnimalUnionParam struct {
	OfCat *Cat `json:&quot;,omitzero,inline`
	OfDog *Dog `json:&quot;,omitzero,inline`
}

animal := AnimalUnionParam{
	OfCat: &amp;amp;Cat{
		Name: &quot;Whiskers&quot;,
		Owner: PersonParam{
			Address: AddressParam{Street: &quot;3333 Coyote Hill Rd&quot;, Zip: 0},
		},
	},
}

// Mutating a field
if address := animal.GetOwner().GetAddress(); address != nil {
	address.ZipCode = 94304
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response objects&lt;/h3&gt; 
&lt;p&gt;All fields in response structs are ordinary value types (not pointers or wrappers). Response structs also include a special &lt;code&gt;JSON&lt;/code&gt; field containing metadata about each property.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type Animal struct {
	Name   string `json:&quot;name,nullable&quot;`
	Owners int    `json:&quot;owners&quot;`
	Age    int    `json:&quot;age&quot;`
	JSON   struct {
		Name        respjson.Field
		Owner       respjson.Field
		Age         respjson.Field
		ExtraFields map[string]respjson.Field
	} `json:&quot;-&quot;`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To handle optional data, use the &lt;code&gt;.Valid()&lt;/code&gt; method on the JSON field. &lt;code&gt;.Valid()&lt;/code&gt; returns true if a field is not &lt;code&gt;null&lt;/code&gt;, not present, or couldn&#39;t be marshaled.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;.Valid()&lt;/code&gt; is false, the corresponding field will simply be its zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;raw := `{&quot;owners&quot;: 1, &quot;name&quot;: null}`

var res Animal
json.Unmarshal([]byte(raw), &amp;amp;res)

// Accessing regular fields

res.Owners // 1
res.Name   // &quot;&quot;
res.Age    // 0

// Optional field checks

res.JSON.Owners.Valid() // true
res.JSON.Name.Valid()   // false
res.JSON.Age.Valid()    // false

// Raw JSON values

res.JSON.Owners.Raw()                  // &quot;1&quot;
res.JSON.Name.Raw() == &quot;null&quot;          // true
res.JSON.Name.Raw() == respjson.Null   // true
res.JSON.Age.Raw() == &quot;&quot;               // true
res.JSON.Age.Raw() == respjson.Omitted // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These &lt;code&gt;.JSON&lt;/code&gt; structs also include an &lt;code&gt;ExtraFields&lt;/code&gt; map containing any properties in the json response that were not specified in the struct. This can be useful for API features not yet present in the SDK.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;body := res.JSON.ExtraFields[&quot;my_unexpected_field&quot;].Raw()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response Unions&lt;/h3&gt; 
&lt;p&gt;In responses, unions are represented by a flattened struct containing all possible fields from each of the object variants. To convert it to a variant use the &lt;code&gt;.AsFooVariant()&lt;/code&gt; method or the &lt;code&gt;.AsAny()&lt;/code&gt; method if present.&lt;/p&gt; 
&lt;p&gt;If a response value union contains primitive values, primitive fields will be alongside the properties but prefixed with &lt;code&gt;Of&lt;/code&gt; and feature the tag &lt;code&gt;json:&quot;...,inline&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type AnimalUnion struct {
	// From variants [Dog], [Cat]
	Owner Person `json:&quot;owner&quot;`
	// From variant [Dog]
	DogBreed string `json:&quot;dog_breed&quot;`
	// From variant [Cat]
	CatBreed string `json:&quot;cat_breed&quot;`
	// ...

	JSON struct {
		Owner respjson.Field
		// ...
	} `json:&quot;-&quot;`
}

// If animal variant
if animal.Owner.Address.ZipCode == &quot;&quot; {
	panic(&quot;missing zip code&quot;)
}

// Switch on the variant
switch variant := animal.AsAny().(type) {
case Dog:
case Cat:
default:
	panic(&quot;unexpected type&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RequestOptions&lt;/h3&gt; 
&lt;p&gt;This library uses the functional options pattern. Functions defined in the &lt;code&gt;option&lt;/code&gt; package return a &lt;code&gt;RequestOption&lt;/code&gt;, which is a closure that mutates a &lt;code&gt;RequestConfig&lt;/code&gt;. These options can be supplied to the client or at individual requests. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;client := openai.NewClient(
	// Adds a header to every request made by the client
	option.WithHeader(&quot;X-Some-Header&quot;, &quot;custom_header_info&quot;),
)

client.Chat.Completions.New(context.TODO(), ...,
	// Override the header
	option.WithHeader(&quot;X-Some-Header&quot;, &quot;some_other_custom_header_info&quot;),
	// Add an undocumented field to the request body, using sjson syntax
	option.WithJSONSet(&quot;some.json.path&quot;, map[string]string{&quot;my&quot;: &quot;object&quot;}),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The request option &lt;code&gt;option.WithDebugLog(nil)&lt;/code&gt; may be helpful while debugging.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://pkg.go.dev/github.com/openai/openai-go/option&quot;&gt;full list of request options&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Pagination&lt;/h3&gt; 
&lt;p&gt;This library provides some conveniences for working with paginated list endpoints.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;.ListAutoPaging()&lt;/code&gt; methods to iterate through items across all pages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;iter := client.FineTuning.Jobs.ListAutoPaging(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
// Automatically fetches more pages as needed.
for iter.Next() {
	fineTuningJob := iter.Current()
	fmt.Printf(&quot;%+v\n&quot;, fineTuningJob)
}
if err := iter.Err(); err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use simple &lt;code&gt;.List()&lt;/code&gt; methods to fetch a single page and receive a standard response object with additional helper methods like &lt;code&gt;.GetNextPage()&lt;/code&gt;, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;page, err := client.FineTuning.Jobs.List(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
for page != nil {
	for _, job := range page.Data {
		fmt.Printf(&quot;%+v\n&quot;, job)
	}
	page, err = page.GetNextPage()
}
if err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Errors&lt;/h3&gt; 
&lt;p&gt;When the API returns a non-success status code, we return an error with type &lt;code&gt;*openai.Error&lt;/code&gt;. This contains the &lt;code&gt;StatusCode&lt;/code&gt;, &lt;code&gt;*http.Request&lt;/code&gt;, and &lt;code&gt;*http.Response&lt;/code&gt; values of the request, as well as the JSON of the error body (much like other response objects in the SDK).&lt;/p&gt; 
&lt;p&gt;To handle errors, we recommend that you use the &lt;code&gt;errors.As&lt;/code&gt; pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;_, err := client.FineTuning.Jobs.New(context.TODO(), openai.FineTuningJobNewParams{
	Model:        openai.FineTuningJobNewParamsModelBabbage002,
	TrainingFile: &quot;file-abc123&quot;,
})
if err != nil {
	var apierr *openai.Error
	if errors.As(err, &amp;amp;apierr) {
		println(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request
		println(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response
	}
	panic(err.Error()) // GET &quot;/fine_tuning/jobs&quot;: 400 Bad Request { ... }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When other errors occur, they are returned unwrapped; for example, if HTTP transport fails, you might receive &lt;code&gt;*url.Error&lt;/code&gt; wrapping &lt;code&gt;*net.OpError&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Timeouts&lt;/h3&gt; 
&lt;p&gt;Requests do not time out by default; use context to configure a timeout for a request lifecycle.&lt;/p&gt; 
&lt;p&gt;Note that if a request is &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/#retries&quot;&gt;retried&lt;/a&gt;, the context timeout does not start over. To set a per-retry timeout, use &lt;code&gt;option.WithRequestTimeout()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// This sets the timeout for the request, including all the retries.
ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
defer cancel()
client.Chat.Completions.New(
	ctx,
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String(&quot;How can I list all files in a directory using Python?&quot;),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	// This sets the per-retry timeout
	option.WithRequestTimeout(20*time.Second),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;File uploads&lt;/h3&gt; 
&lt;p&gt;Request parameters that correspond to file uploads in multipart requests are typed as &lt;code&gt;io.Reader&lt;/code&gt;. The contents of the &lt;code&gt;io.Reader&lt;/code&gt; will by default be sent as a multipart form part with the file name of &quot;anonymous_file&quot; and content-type of &quot;application/octet-stream&quot;.&lt;/p&gt; 
&lt;p&gt;The file name and content-type can be customized by implementing &lt;code&gt;Name() string&lt;/code&gt; or &lt;code&gt;ContentType() string&lt;/code&gt; on the run-time type of &lt;code&gt;io.Reader&lt;/code&gt;. Note that &lt;code&gt;os.File&lt;/code&gt; implements &lt;code&gt;Name() string&lt;/code&gt;, so a file returned by &lt;code&gt;os.Open&lt;/code&gt; will be sent with the file name on disk.&lt;/p&gt; 
&lt;p&gt;We also provide a helper &lt;code&gt;openai.File(reader io.Reader, filename string, contentType string)&lt;/code&gt; which can be used to wrap any &lt;code&gt;io.Reader&lt;/code&gt; with the appropriate file name and content type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// A file from the file system
file, err := os.Open(&quot;input.jsonl&quot;)
openai.FileNewParams{
	File:    file,
	Purpose: openai.FilePurposeFineTune,
}

// A file from a string
openai.FileNewParams{
	File:    strings.NewReader(&quot;my file contents&quot;),
	Purpose: openai.FilePurposeFineTune,
}

// With a custom filename and contentType
openai.FileNewParams{
	File:    openai.File(strings.NewReader(`{&quot;hello&quot;: &quot;foo&quot;}`), &quot;file.go&quot;, &quot;application/json&quot;),
	Purpose: openai.FilePurposeFineTune,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Webhook Verification&lt;/h2&gt; 
&lt;p&gt;Verifying webhook signatures is &lt;em&gt;optional but encouraged&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For more information about webhooks, see &lt;a href=&quot;https://platform.openai.com/docs/guides/webhooks&quot;&gt;the API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Parsing webhook payloads&lt;/h3&gt; 
&lt;p&gt;For most use cases, you will likely want to verify the webhook and parse the payload at the same time. To achieve this, we provide the method &lt;code&gt;client.Webhooks.Unwrap()&lt;/code&gt;, which parses a webhook request and verifies that it was sent by OpenAI. This method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). The &lt;code&gt;Unwrap()&lt;/code&gt; method will parse this JSON for you into an event object after verifying the webhook was sent from OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;io&quot;
	&quot;log&quot;
	&quot;net/http&quot;
	&quot;os&quot;

	&quot;github.com/gin-gonic/gin&quot;
	&quot;github.com/openai/openai-go/v2&quot;
	&quot;github.com/openai/openai-go/v2/option&quot;
	&quot;github.com/openai/openai-go/v2/webhooks&quot;
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv(&quot;OPENAI_WEBHOOK_SECRET&quot;)), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST(&quot;/webhook&quot;, func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{&quot;error&quot;: &quot;Error reading request body&quot;})
			return
		}
		defer c.Request.Body.Close()

		webhookEvent, err := client.Webhooks.Unwrap(body, c.Request.Header)
		if err != nil {
			log.Printf(&quot;Invalid webhook signature: %v&quot;, err)
			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: &quot;invalid signature&quot;})
			return
		}

		switch event := webhookEvent.AsAny().(type) {
		case webhooks.ResponseCompletedWebhookEvent:
			log.Printf(&quot;Response completed: %+v&quot;, event.Data)
		case webhooks.ResponseFailedWebhookEvent:
			log.Printf(&quot;Response failed: %+v&quot;, event.Data)
		default:
			log.Printf(&quot;Unhandled event type: %T&quot;, event)
		}

		c.JSON(http.StatusOK, gin.H{&quot;message&quot;: &quot;ok&quot;})
	})

	r.Run(&quot;:8000&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Verifying webhook payloads directly&lt;/h3&gt; 
&lt;p&gt;In some cases, you may want to verify the webhook separately from parsing the payload. If you prefer to handle these steps separately, we provide the method &lt;code&gt;client.Webhooks.VerifySignature()&lt;/code&gt; to &lt;em&gt;only verify&lt;/em&gt; the signature of a webhook request. Like &lt;code&gt;Unwrap()&lt;/code&gt;, this method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). You will then need to parse the body after verifying the signature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;encoding/json&quot;
	&quot;io&quot;
	&quot;log&quot;
	&quot;net/http&quot;
	&quot;os&quot;

	&quot;github.com/gin-gonic/gin&quot;
	&quot;github.com/openai/openai-go/v2&quot;
	&quot;github.com/openai/openai-go/v2/option&quot;
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv(&quot;OPENAI_WEBHOOK_SECRET&quot;)), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST(&quot;/webhook&quot;, func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{&quot;error&quot;: &quot;Error reading request body&quot;})
			return
		}
		defer c.Request.Body.Close()

		err = client.Webhooks.VerifySignature(body, c.Request.Header)
		if err != nil {
			log.Printf(&quot;Invalid webhook signature: %v&quot;, err)
			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: &quot;invalid signature&quot;})
			return
		}

		c.JSON(http.StatusOK, gin.H{&quot;message&quot;: &quot;ok&quot;})
	})

	r.Run(&quot;:8000&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Retries&lt;/h3&gt; 
&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. We retry by default all connection errors, 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;WithMaxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// Configure the default for all requests:
client := openai.NewClient(
	option.WithMaxRetries(0), // default is 2
)

// Override per-request:
client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String(&quot;How can I get the name of the current day in JavaScript?&quot;),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithMaxRetries(5),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Accessing raw response data (e.g. response headers)&lt;/h3&gt; 
&lt;p&gt;You can access the raw HTTP response data by using the &lt;code&gt;option.WithResponseInto()&lt;/code&gt; request option. This is useful when you need to examine response headers, status codes, or other details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// Create a variable to store the HTTP response
var response *http.Response
chatCompletion, err := client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String(&quot;Say this is a test&quot;),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithResponseInto(&amp;amp;response),
)
if err != nil {
	// handle error
}
fmt.Printf(&quot;%+v\n&quot;, chatCompletion)

fmt.Printf(&quot;Status Code: %d\n&quot;, response.StatusCode)
fmt.Printf(&quot;Headers: %+#v\n&quot;, response.Header)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; 
&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; 
&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; 
&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.Get&lt;/code&gt;, &lt;code&gt;client.Post&lt;/code&gt;, and other HTTP verbs. &lt;code&gt;RequestOptions&lt;/code&gt; on the client, such as retries, will be respected when making these requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;var (
    // params can be an io.Reader, a []byte, an encoding/json serializable object,
    // or a &quot;…Params&quot; struct defined in this library.
    params map[string]any

    // result can be an []byte, *http.Response, a encoding/json deserializable object,
    // or a model defined in this library.
    result *http.Response
)
err := client.Post(context.Background(), &quot;/unspecified&quot;, params, &amp;amp;result)
if err != nil {
    …
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented request params&lt;/h4&gt; 
&lt;p&gt;To make requests using undocumented parameters, you may use either the &lt;code&gt;option.WithQuerySet()&lt;/code&gt; or the &lt;code&gt;option.WithJSONSet()&lt;/code&gt; methods.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;params := FooNewParams{
    ID:   &quot;id_xxxx&quot;,
    Data: FooNewParamsData{
        FirstName: openai.String(&quot;John&quot;),
    },
}
client.Foo.New(context.Background(), params, option.WithJSONSet(&quot;data.last_name&quot;, &quot;Doe&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented response properties&lt;/h4&gt; 
&lt;p&gt;To access undocumented response properties, you may either access the raw JSON of the response as a string with &lt;code&gt;result.JSON.RawJSON()&lt;/code&gt;, or get the raw JSON of a particular field on the result with &lt;code&gt;result.JSON.Foo.Raw()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Any fields that are not present on the response struct will be saved and can be accessed by &lt;code&gt;result.JSON.ExtraFields()&lt;/code&gt; which returns the extra fields as a &lt;code&gt;map[string]Field&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Middleware&lt;/h3&gt; 
&lt;p&gt;We provide &lt;code&gt;option.WithMiddleware&lt;/code&gt; which applies the given middleware to requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {
	// Before the request
	start := time.Now()
	LogReq(req)

	// Forward the request to the next handler
	res, err = next(req)

	// Handle stuff after the request
	end := time.Now()
	LogRes(res, err, start - end)

    return res, err
}

client := openai.NewClient(
	option.WithMiddleware(Logger),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When multiple middlewares are provided as variadic arguments, the middlewares are applied left to right. If &lt;code&gt;option.WithMiddleware&lt;/code&gt; is given multiple times, for example first in the client then the method, the middleware in the client will run first and the middleware given in the method will run next.&lt;/p&gt; 
&lt;p&gt;You may also replace the default &lt;code&gt;http.Client&lt;/code&gt; with &lt;code&gt;option.WithHTTPClient(client)&lt;/code&gt;. Only one http client is accepted (this overwrites any previous client) and receives requests after any middleware has been applied.&lt;/p&gt; 
&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;To use this library with [Azure OpenAI]&lt;a href=&quot;https://learn.microsoft.com/azure/ai-services/openai/overview&quot;&gt;https://learn.microsoft.com/azure/ai-services/openai/overview&lt;/a&gt;), use the option.RequestOption functions in the &lt;code&gt;azure&lt;/code&gt; package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
	&quot;github.com/Azure/azure-sdk-for-go/sdk/azidentity&quot;
	&quot;github.com/openai/openai-go/v2&quot;
	&quot;github.com/openai/openai-go/v2/azure&quot;
)

func main() {
	const azureOpenAIEndpoint = &quot;https://&amp;lt;azure-openai-resource&amp;gt;.openai.azure.com&quot;

	// The latest API versions, including previews, can be found here:
	// ttps://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versionng
	const azureOpenAIAPIVersion = &quot;2024-06-01&quot;

	tokenCredential, err := azidentity.NewDefaultAzureCredential(nil)

	if err != nil {
		fmt.Printf(&quot;Failed to create the DefaultAzureCredential: %s&quot;, err)
		os.Exit(1)
	}

	client := openai.NewClient(
		azure.WithEndpoint(azureOpenAIEndpoint, azureOpenAIAPIVersion),

		// Choose between authenticating using a TokenCredential or an API Key
		azure.WithTokenCredential(tokenCredential),
		// or azure.WithAPIKey(azureOpenAIAPIKey),
	)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semantic versioning&lt;/h2&gt; 
&lt;p&gt;This package generally follows &lt;a href=&quot;https://semver.org/spec/v2.0.0.html&quot;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; 
&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&quot;https://www.github.com/openai/openai-go/issues&quot;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/openai/openai-go/main/CONTRIBUTING.md&quot;&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IceWhaleTech/CasaOS</title>
      <link>https://github.com/IceWhaleTech/CasaOS</link>
      <description>&lt;p&gt;CasaOS - A simple, easy-to-use, elegant open-source Personal Cloud system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CasaOS - Your Personal Cloud&lt;/h1&gt; 
&lt;!-- Readme i18n links --&gt; 
&lt;!-- &gt; English | [中文](#) | [Français](#) --&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- CasaOS Banner --&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800x300.png&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800x300.png&quot; /&gt; 
  &lt;img alt=&quot;CasaOS&quot; src=&quot;https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800x300.png&quot; /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;i&gt;Connect with the community, establish autonomy, reduce the cost of SaaS, and MAXIMIZE the potential for a personalized copilot.&lt;/i&gt; &lt;br /&gt; &lt;br /&gt; 
 &lt;!-- CasaOS Badges --&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS Version&quot; src=&quot;https://img.shields.io/github/v/release/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=CasaOS&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/raw/main/LICENSE&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS License&quot; src=&quot;https://img.shields.io/github/license/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/pulls&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS Pull Requests&quot; src=&quot;https://img.shields.io/github/issues-pr/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=PRs&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/issues&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS Issues&quot; src=&quot;https://img.shields.io/github/issues/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=Issues&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/IceWhaleTech/CasaOS&quot;&gt; &lt;img src=&quot;https://codecov.io/gh/IceWhaleTech/CasaOS/branch/main/graph/badge.svg?token=l9uMKGlkxM&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/stargazers&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS Stargazers&quot; src=&quot;https://img.shields.io/github/stars/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=Stars&quot; /&gt; &lt;/a&gt; 
 &lt;!-- &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/releases&quot; target=&quot;_blank&quot;&gt;
    &lt;img alt=&quot;CasaOS Downloads&quot; src=&quot;https://img.shields.io/github/downloads/IceWhaleTech/CasaOS/total?color=162453&amp;style=flat-square&quot; /&gt;
    &lt;/a&gt; --&gt; &lt;br /&gt; 
 &lt;!-- CasaOS Community --&gt; &lt;a href=&quot;https://discord.gg/knqAbbBbeX&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;IceWhale Discord&quot; src=&quot;https://img.shields.io/discord/884667213326463016?color=162453&amp;amp;style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=fff&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/discussions&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;CasaOS GitHub Discussions&quot; src=&quot;https://img.shields.io/github/discussions/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&amp;amp;label=Discussions&amp;amp;logo=github&quot; /&gt; &lt;/a&gt; 
 &lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#credits&quot;&gt; &lt;img alt=&quot;All Contributors&quot; src=&quot;https://img.shields.io/static/v1?label=All%20Contributors&amp;amp;message=15&amp;amp;color=162453&amp;amp;style=flat-square&amp;amp;logo=Handshake&amp;amp;logoColor=fff&quot; /&gt; &lt;/a&gt; 
 &lt;!-- CasaOS YouTube --&gt; &lt;a href=&quot;https://www.youtube.com/channel/UC2zMrUYT17AJhIl9XWZzT8g&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;YouTube Tutorial Views&quot; src=&quot;https://img.shields.io/youtube/channel/views/UC2zMrUYT17AJhIl9XWZzT8g?style=flat-square&amp;amp;logo=youtube&amp;amp;logoColor=red&amp;amp;label=YouTube%20Tutorial%20Views&quot; /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;http://bit.ly/45JQIiL&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;twitter ZimaSpace&quot; src=&quot;https://img.shields.io/twitter/follow/ZimaSpace?style=flat-square&amp;amp;logo=X&amp;amp;label=Contact%20Us%20%40%20ZimaSpace&amp;amp;labelColor=555&amp;amp;color=555&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;http://bit.ly/4lgHj7V&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;facebook ZimaSpace&quot; src=&quot;https://img.shields.io/badge/ZimaSpace-1877F2?style=flat-square&amp;amp;logo=Facebook&amp;amp;logoColor=fff&amp;amp;label=Contact%20Us&amp;amp;labelColor=555&amp;amp;color=162453&quot; /&gt; &lt;/a&gt; &lt;br /&gt; 
 &lt;!-- CasaOS Links --&gt; &lt;a href=&quot;https://www.casaos.io&quot; target=&quot;_blank&quot;&gt;Website&lt;/a&gt; | &lt;a href=&quot;http://demo.casaos.io&quot; target=&quot;_blank&quot;&gt;Demo&lt;/a&gt; | &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; 
 &lt;!-- CasaOS Snapshots --&gt; &lt;kbd&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;snapshot-dark.jpg&quot; /&gt; 
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;snapshot-light.jpg&quot; /&gt; 
   &lt;img alt=&quot;CasaOS Snapshot&quot; src=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/snapshot-light.jpg&quot; /&gt; 
  &lt;/picture&gt; &lt;/kbd&gt; &lt;/p&gt; 
&lt;h2&gt;Why do you need Personal Cloud?&lt;/h2&gt; 
&lt;p&gt;In 2020, the team noticed three important trends:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The cost of computing power and storage was decreasing fast.&lt;/li&gt; 
 &lt;li&gt;A part of cloud computing was moving towards edge computing.&lt;/li&gt; 
 &lt;li&gt;The issue of consumer data asset ownership and attribution had been ignored.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Based on these trends, the team proposed a thought experiment internally: what if personal clouds were available under $100 in next five years? This personal cloud would provide a low-cost data collaboration solution as a personal data center, storing and managing data for creators and small organizations. A distributed collaborative computing network can be formed by personal servers located around the world. It could also control and connect all smart devices, providing cross-ecosystem local intelligent services.&lt;/p&gt; 
&lt;p&gt;Furthermore, the personal cloud could combine personal data to train personalized AI assistants. The idea is that this technology would be an effective way to solve the issue of consumer data asset ownership and , as well as provide a more affordable and efficient computing solution for individuals and small organizations.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you think what we are doing is valuable. Please &lt;strong&gt;give us a star ⭐&lt;/strong&gt; and &lt;strong&gt;fork it 🤞&lt;/strong&gt;!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Friendly UI designed for home scenarios 
  &lt;ul&gt; 
   &lt;li&gt;No code, no forms, intuitive, design for humanity&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Multiple hardware and base system support 
  &lt;ul&gt; 
   &lt;li&gt;ZimaBoard, NUC, RPi, old computers, whatever is available.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Selected apps in the app store, one-click installation 
  &lt;ul&gt; 
   &lt;li&gt;Nextcloud, HomeAssistant, AdGuard, Jellyfin, *arr and more!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Easily install numerous Docker apps 
  &lt;ul&gt; 
   &lt;li&gt;Over 100,000 apps from the Docker ecosystem can be easily installed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Elegant drive and file management 
  &lt;ul&gt; 
   &lt;li&gt;What you see is what you get. No technical background required.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Well-designed system/app widgets 
  &lt;ul&gt; 
   &lt;li&gt;What you care about, at a glance. Resource usage, app status, and more!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;CasaOS fully supports ZimaBoard, Intel NUC, and Raspberry Pi. Also, more computers and development boards and fully compatible with Ubuntu, Debian, Raspberry Pi OS, and CentOS with one-liner installation.&lt;/p&gt; 
&lt;h3&gt;Hardware Compatibility&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;amd64 / x86-64&lt;/li&gt; 
 &lt;li&gt;arm64&lt;/li&gt; 
 &lt;li&gt;armv7&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System Compatibility&lt;/h3&gt; 
&lt;p&gt;Official Support&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Debian 12 (✅ Tested, Recommended)&lt;/li&gt; 
 &lt;li&gt;Ubuntu Server 20.04 (✅ Tested)&lt;/li&gt; 
 &lt;li&gt;Raspberry Pi OS (✅ Tested)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Community Support&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Elementary 6.1 (✅ Tested)&lt;/li&gt; 
 &lt;li&gt;Armbian 22.04 (✅ Tested)&lt;/li&gt; 
 &lt;li&gt;Alpine (🚧 Not Fully Tested Yet)&lt;/li&gt; 
 &lt;li&gt;OpenWrt (🚧 Not Fully Tested Yet)&lt;/li&gt; 
 &lt;li&gt;ArchLinux (🚧 Not Fully Tested Yet)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quick Setup CasaOS&lt;/h3&gt; 
&lt;p&gt;Freshly install a system from the list above and run this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;wget -qO- https://get.casaos.io | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl -fsSL https://get.casaos.io | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update CasaOS&lt;/h3&gt; 
&lt;p&gt;CasaOS can be updated from the User Interface (UI), via &lt;code&gt;Settings ... Update&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively it can be updated from a terminal session. To update from a terminal session, it must be done either from a secure shell (ssh) session to the device or from a directly attached terminal and keyboard to the device running CasaOS, this cannot be done from the terminal via the CasaOS User Interface (UI). To update to the latest release of CasaOS from a terminal session run this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;wget -qO- https://get.casaos.io/update | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl -fsSL https://get.casaos.io/update | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To determine version of CasaOS from a terminal session run this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;casaos -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Uninstall CasaOS&lt;/h3&gt; 
&lt;p&gt;v0.3.3 or newer&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;casaos-uninstall
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before v0.3.3&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;curl -fsSL https://get.icewhale.io/casaos-uninstall.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The word Casa comes from the Spanish word for &quot;home&quot;. Project CasaOS originated as a pre-installed system for the crowdfunded product &lt;a href=&quot;https://www.zimaboard.com&quot;&gt;ZimaBoard&lt;/a&gt; on Kickstarter.&lt;/p&gt; 
&lt;p&gt;After looking at many systems and software on the market, the team found no server system designed for home scenarios, sadly true.&lt;/p&gt; 
&lt;p&gt;So, we set out to build this open-source project to develop CasaOS with our own hands, everyone in the community, and you.&lt;/p&gt; 
&lt;p&gt;We believe that through community-driven collaborative innovation and open communication with global developers, we can reshape the digital home experience like never before.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A warm welcome for you to get help or share great ideas in the &lt;a href=&quot;https://discord.gg/knqAbbBbeX&quot;&gt;Discord&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/knqAbbBbeX&quot;&gt;&lt;img src=&quot;https://discordapp.com/api/guilds/884667213326463016/widget.png?style=banner2&quot; alt=&quot;Discord Card&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;CasaOS is a community-driven open source project and the people involved are CasaOS users. That means CasaOS will always need contributions from community members just like you!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://wiki.casaos.io/en/contribute&quot;&gt;https://wiki.casaos.io/en/contribute&lt;/a&gt; for ways of contributing to CasaOS&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://wiki.casaos.io/en/contribute/development&quot;&gt;https://wiki.casaos.io/en/contribute/development&lt;/a&gt; if you want to be involved in code contribution specifically&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Many thanks to everyone who has helped CasaOS so far!&lt;/p&gt; 
&lt;p&gt;Everyone&#39;s contribution is greatly appreciated. (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;Emoji Key&lt;/a&gt;)&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jerrykuku&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9485680?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;老竭力&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=jerrykuku&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=jerrykuku&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-jerrykuku&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#infra-jerrykuku&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#maintenance-jerrykuku&quot; title=&quot;Maintenance&quot;&gt;🚧&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#platform-jerrykuku&quot; title=&quot;Packaging/porting to new platform&quot;&gt;📦&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-jerrykuku&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/pulls?q=is%3Apr+reviewed-by%3Ajerrykuku&quot; title=&quot;Reviewed Pull Requests&quot;&gt;👀&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/LinkLeong&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13556972?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;link&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=LinkLeong&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=LinkLeong&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-LinkLeong&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#infra-LinkLeong&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#maintenance-LinkLeong&quot; title=&quot;Maintenance&quot;&gt;🚧&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-LinkLeong&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/pulls?q=is%3Apr+reviewed-by%3ALinkLeong&quot; title=&quot;Reviewed Pull Requests&quot;&gt;👀&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tigerinus&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7172560?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;太戈&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=tigerinus&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=tigerinus&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-tigerinus&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#infra-tigerinus&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#maintenance-tigerinus&quot; title=&quot;Maintenance&quot;&gt;🚧&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#mentoring-tigerinus&quot; title=&quot;Mentoring&quot;&gt;🧑‍🏫&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#security-tigerinus&quot; title=&quot;Security&quot;&gt;🛡️&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-tigerinus&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/pulls?q=is%3Apr+reviewed-by%3Atigerinus&quot; title=&quot;Reviewed Pull Requests&quot;&gt;👀&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Lauren-ED209&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8243355?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lauren&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-Lauren-ED209&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#fundingFinding-Lauren-ED209&quot; title=&quot;Funding Finding&quot;&gt;🔍&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#projectManagement-Lauren-ED209&quot; title=&quot;Project Management&quot;&gt;📆&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-Lauren-ED209&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=Lauren-ED209&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://JohnGuan.Cn&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3358477?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;John Guan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#blog-JohnGuan&quot; title=&quot;Blogposts&quot;&gt;📝&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#content-JohnGuan&quot; title=&quot;Content&quot;&gt;🖋&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=JohnGuan&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-JohnGuan&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#eventOrganizing-JohnGuan&quot; title=&quot;Event Organizing&quot;&gt;📋&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#mentoring-JohnGuan&quot; title=&quot;Mentoring&quot;&gt;🧑‍🏫&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-JohnGuan&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/pulls?q=is%3Apr+reviewed-by%3AJohnGuan&quot; title=&quot;Reviewed Pull Requests&quot;&gt;👀&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://blog.tippybits.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17506770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;David Tippett&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=dtaivpp&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-dtaivpp&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-dtaivpp&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/zarevskaya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/60230221?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Skaya&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#mentoring-zarevskaya&quot; title=&quot;Mentoring&quot;&gt;🧑‍🏫&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-zarevskaya&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#tutorial-zarevskaya&quot; title=&quot;Tutorials&quot;&gt;✅&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#translation-zarevskaya&quot; title=&quot;Translation&quot;&gt;🌍&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AuthorShin&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4959043?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;AuthorShin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=AuthorShin&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/issues?q=author%3AAuthorShin&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-AuthorShin&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-AuthorShin&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/baptiste313&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/93325157?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;baptiste313&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#translation-baptiste313&quot; title=&quot;Translation&quot;&gt;🌍&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/DrMxrcy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58747968?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;DrMxrcy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=DrMxrcy&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-DrMxrcy&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-DrMxrcy&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Joooost&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12090673?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joooost&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-Joooost&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://potyarkin.ml&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/334908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vitaly Potyarkin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-sio&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/bearfrieze&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1023813?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Bjørn Friese&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-bearfrieze&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Protektor-Desura&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1195496?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Protektor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/issues?q=author%3AProtektor-Desura&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#ideas-Protektor-Desura&quot; title=&quot;Ideas, Planning, &amp;amp; Feedback&quot;&gt;🤔&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#question-Protektor-Desura&quot; title=&quot;Answering Questions&quot;&gt;💬&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/llwaini&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59589857?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;llwaini&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#projectManagement-llwaini&quot; title=&quot;Project Management&quot;&gt;📆&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=llwaini&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/#tutorial-llwaini&quot; title=&quot;Tutorials&quot;&gt;✅&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/CorrectRoadH&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/29306285?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;CorrectRoadH&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=correctroadh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=correctroadh&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/zhanghengxin&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/24197448?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;zhanghengxin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=zhanghengxin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/commits?author=zhanghengxin&quot; title=&quot;Documentation&quot;&gt;📖&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&quot;https://github.com/IceWhaleTech/CasaOS/releases&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://dashboard.trackgit.com/token/l5q8egi92tfhlxd70l2l&quot;&gt; &lt;img src=&quot;https://us-central1-trackgit-analytics.cloudfunctions.net/token/ping/l5q8egi92tfhlxd70l2l&quot; alt=&quot;trackgit-views&quot; /&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

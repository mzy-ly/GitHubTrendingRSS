<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Monthly Trending</title>
    <description>Monthly Trending of Emacs Lisp in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:52:31 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>emacs-evil/evil-collection</title>
      <link>https://github.com/emacs-evil/evil-collection</link>
      <description>&lt;p&gt;A set of keybindings for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Evil Collection #+STARTUP: noindent&lt;/p&gt; 
&lt;p&gt;[[https://github.com/emacs-evil/evil-collection/actions][file:https://github.com/emacs-evil/evil-collection/workflows/CI/badge.svg?branch=master]] [[https://melpa.org/#/evil-collection][file:https://melpa.org/packages/evil-collection-badge.svg]] [[https://stable.melpa.org/#/evil-collection][file:https://stable.melpa.org/packages/evil-collection-badge.svg]]&lt;/p&gt; 
&lt;p&gt;This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings for /the parts of Emacs/ that Evil does not cover properly by default, such as &lt;del&gt;help-mode&lt;/del&gt;, &lt;del&gt;M-x calendar&lt;/del&gt;, Eshell and more.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; Expect some default bindings to change in the future.&lt;/p&gt; 
&lt;p&gt;** Preliminaries&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;del&gt;evil-overriding-maps&lt;/del&gt; is assumed as &lt;del&gt;nil&lt;/del&gt; to reduce redundant &lt;del&gt;w/W/l/f/t&lt;/del&gt; etc evil bindings. See [[https://github.com/emacs-evil/evil-collection/pull/501][Fixup Info-mode]] for example.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Goals&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Reduce context switching: As soon as &quot;moving around&quot; gets hardwired to &lt;del&gt;
    &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, it becomes frustratingly inefficient not to have it everywhere.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Community work: setting up bindings is tremendous work and joining force can only save hours for all of Evil users out there. While not everyone may agree on the chosen bindings, it helps to have something to start with rather than nothing at all. In the end, users are free to override a subset of the proposed bindings to best fit their needs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Consistency: Having all bindings defined in one place allows for enforcing consistency across special modes and coordinating the community work to define a reference implementation.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Get the package, either from MELPA:&lt;/p&gt; &lt;p&gt;: M-x package-install RET evil-collection RET&lt;/p&gt; &lt;p&gt;Or clone / download this repository and modify your &lt;del&gt;load-path&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (add-to-list &#39;load-path (expand-file-name &quot;/path/to/evil-collection/&quot; user-emacs-directory))&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Register the bindings, either all at once with&lt;/p&gt; &lt;p&gt;: (evil-collection-init)&lt;/p&gt; &lt;p&gt;or mode-by-mode, for instance:&lt;/p&gt; &lt;p&gt;: (with-eval-after-load &#39;calendar (evil-collection-calendar-setup))&lt;/p&gt; &lt;p&gt;or by providing an argument to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;calendar)&lt;/p&gt; &lt;p&gt;a list can also be provided to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;(calendar dired calc ediff))&lt;/p&gt; &lt;p&gt;The list of supported modes is configured by &lt;del&gt;evil-collection-mode-list&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; assumes &lt;del&gt;evil-want-keybinding&lt;/del&gt; is set to &lt;del&gt;nil&lt;/del&gt; and &lt;del&gt;evil-want-integration&lt;/del&gt; is set to &lt;del&gt;t&lt;/del&gt; before loading &lt;del&gt;evil&lt;/del&gt; and &lt;del&gt;evil-collection&lt;/del&gt;. Note some other packages may load evil (e.g. evil-leader) so bear that in mind when determining when to set the variables.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/issues/60&quot;&gt;https://github.com/emacs-evil/evil-collection/issues/60&lt;/a&gt; and &lt;a href=&quot;https://github.com/emacs-evil/evil/pull/1087&quot;&gt;https://github.com/emacs-evil/evil/pull/1087&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) (require &#39;evil) (when (require &#39;evil-collection nil t) (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;Here&#39;s another full TLDR &lt;del&gt;use-package&lt;/del&gt; example.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil :ensure t :init (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; 
&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;NOTE: If you don&#39;t like surprises but still want to use &lt;del&gt;evil-collection-init&lt;/del&gt;, setting &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to nil and adding each mode manually might be a better option.&lt;/p&gt; 
&lt;p&gt;** Configuration Modify &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to disable or add any modes that should be evilified by &lt;del&gt;evil-collection&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;| Variable | Default | Description | |--------------------------------------------+---------+-------------------------------------------------------------------| | evil-collection-calendar-want-org-bindings | nil | Set up Org functions in calendar keymap. | | evil-collection-outline-bind-tab-p | nil | Enable 
 &lt;tab&gt;
  -based bindings in Outline mode. | | evil-collection-term-sync-state-and-mode-p | t | Synchronize insert/normal state with char/line-mode in term-mode. | | evil-collection-setup-minibuffer | nil | Set up Vim style bindings in the minibuffer. | | evil-collection-setup-debugger-keys | t | Set up debugger keys for certain modes. | | evil-collection-want-unimpaired-p | t | Set up unimpaired bindings globally. | | evil-collection-want-find-usages-bindings | t | Bind -find references-, etc to various modes. | | evil-collection-config | * | List of mode specific configurations. | | evil-collection-key-whitelist | nil | List of keys Evil Collection is allowed to bind to. | | evil-collection-key-blacklist | nil | List of keys Evil Collection is not allowed to bind to. | | evil-collection-state-passlist | nil | List of Evil States Evil Collection is allowed to bind to. | | evil-collection-state-denylist | nil | List of Evil States Evil Collection is not allowed to bind to. |
 &lt;/tab&gt;&lt;/p&gt; 
&lt;p&gt;For example, if you want to enable Evil in the minibuffer, you&#39;ll have to turn it on explicitly by customizing &lt;del&gt;evil-collection-setup-minibuffer&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. Some minibuffer-related packages such as Helm rely on this option.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;use-package&lt;/del&gt; example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil-collection :custom (evil-collection-setup-minibuffer t) :init (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-config&lt;/del&gt; can also be modified to configure specific modes. At the moment, it can be used to defer binding keys to those specific modes in order to improve startup time.&lt;/p&gt; 
&lt;p&gt;** Guidelines&lt;/p&gt; 
&lt;p&gt;The following rules serve as guiding principles to define the set of standard Evil bindings for various modes. Since special modes are by definition structurally incomparable, those rules cannot be expected to be applied universally.&lt;/p&gt; 
&lt;p&gt;The rules are more-or-less sorted by priority.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Don&#39;t bind anything to &lt;del&gt;:&lt;/del&gt; nor &lt;del&gt;
    &lt;escape&gt;&lt;/escape&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the movement keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;h&lt;/del&gt;, &lt;del&gt;j&lt;/del&gt;, &lt;del&gt;k&lt;/del&gt;, &lt;del&gt;l&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;w&lt;/del&gt;, &lt;del&gt;W&lt;/del&gt;, &lt;del&gt;b&lt;/del&gt;, &lt;del&gt;B&lt;/del&gt;, &lt;del&gt;e&lt;/del&gt;, &lt;del&gt;E&lt;/del&gt;, &lt;del&gt;ge&lt;/del&gt;, &lt;del&gt;gE&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;f&lt;/del&gt;, &lt;del&gt;F&lt;/del&gt;, &lt;del&gt;t&lt;/del&gt;, &lt;del&gt;T&lt;/del&gt;, &lt;del&gt;;&lt;/del&gt;, =,=&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;gg&lt;/del&gt;, &lt;del&gt;G&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;|&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;%&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;, &lt;del&gt;^&lt;/del&gt;, &lt;del&gt;$&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt;, &lt;del&gt;C-o&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the yanking and register keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;y&lt;/del&gt;, &lt;del&gt;Y&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=&quot;=&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the search keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;/&lt;/del&gt;, &lt;del&gt;?&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;#&lt;/del&gt;, &lt;del&gt;*&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the mark keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;m&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=&#39;=, =~=&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the windowing keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;H&lt;/del&gt;, &lt;del&gt;L&lt;/del&gt;, &lt;del&gt;M&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-e&lt;/del&gt;, &lt;del&gt;C-y&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-f&lt;/del&gt;, &lt;del&gt;C-b&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-d&lt;/del&gt;, &lt;del&gt;C-u&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-w&lt;/del&gt;-prefixed bindings.&lt;/li&gt; 
   &lt;li&gt;Some &lt;del&gt;z&lt;/del&gt;-prefixed bindings (see below).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The following keys are free when insert state does not make sense in the current mode:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;a&lt;/del&gt;, &lt;del&gt;A&lt;/del&gt;, &lt;del&gt;i&lt;/del&gt;, &lt;del&gt;I&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;c&lt;/del&gt;, &lt;del&gt;C&lt;/del&gt;, &lt;del&gt;r&lt;/del&gt;, &lt;del&gt;R&lt;/del&gt;, &lt;del&gt;s&lt;/del&gt;, &lt;del&gt;S&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;d&lt;/del&gt;, &lt;del&gt;D&lt;/del&gt;, &lt;del&gt;x&lt;/del&gt;, &lt;del&gt;X&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;o&lt;/del&gt;, &lt;del&gt;O&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;p&lt;/del&gt;, &lt;del&gt;P&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;=&lt;/del&gt;, &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;J&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=~=&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Any of those keys can be set to be a prefix key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prefix keys: &lt;del&gt;g&lt;/del&gt; and &lt;del&gt;z&lt;/del&gt; are the ubiquitous prefix keys.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;g&lt;/del&gt; generally stands for &quot;go&quot; and is best used for movements.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;z&lt;/del&gt; is used for scrolling, folding, spell-checking and more.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Macro and action keys&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;@&lt;/del&gt;, &lt;del&gt;q&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;.&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure terminal compatibility without sacrificing GUI key bindings.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tab key 
    &lt;ul&gt; 
     &lt;li&gt;Tab key is recognized as &lt;del&gt;
       &lt;tab&gt;&lt;/tab&gt;&lt;/del&gt; in GUI and &lt;del&gt;TAB&lt;/del&gt; in terminal. &lt;del&gt;TAB&lt;/del&gt; equals &lt;del&gt;C-i&lt;/del&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt; is bound to jumping forward for vim compatibility. If Shift+Tab is not relevant, just bind &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to. If Shift+Tab is relevant, bind &lt;del&gt;g]&lt;/del&gt; and &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to, and bind &lt;del&gt;g[&lt;/del&gt; to the function that Shift+Tab is bound to for terminal compatibility.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Enter key 
    &lt;ul&gt; 
     &lt;li&gt;Enter key is recognized as &lt;del&gt;
       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; in GUI and &lt;del&gt;RET&lt;/del&gt; in terminal. &lt;del&gt;RET&lt;/del&gt; equals &lt;del&gt;Ctrl+m&lt;/del&gt;.&lt;/li&gt; 
     &lt;li&gt;Bind only &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt;. Or, bind &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; to the same functions &lt;del&gt;
       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; and &lt;del&gt;
       &lt;m-return&gt;&lt;/m-return&gt;&lt;/del&gt; are bound to.&lt;/li&gt; 
     &lt;li&gt;&lt;del&gt;S-RET&lt;/del&gt; is impossible on terminal. Bind &lt;del&gt;
       &lt;s-return&gt;&lt;/s-return&gt;&lt;/del&gt; and a vacant key to the same function for terminal compatibility.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Rationale&lt;/p&gt; 
&lt;p&gt;Many special modes share the same set of similar actions. Those actions should share the same bindings across all modes whenever feasible.&lt;/p&gt; 
&lt;p&gt;*** Motion (&lt;del&gt;[&lt;/del&gt;, &lt;del&gt;]&lt;/del&gt;, &lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;, &lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;, &lt;del&gt;gj&lt;/del&gt;, &lt;del&gt;gk&lt;/del&gt;, &lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;: Use &lt;del&gt;[-&lt;/del&gt; and &lt;del&gt;]-&lt;/del&gt; prefixed keys for navigation between sections.&lt;/p&gt; &lt;p&gt;If the mode makes no difference between the end of a section and the beginning of the next, use &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gj&lt;/del&gt; and &lt;del&gt;gk&lt;/del&gt;: synonym for &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;. That&#39;s what [[evilmagit][evil-magit]] does.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Question:&lt;/em&gt; Should &lt;del&gt;gj&lt;/del&gt; / &lt;del&gt;gk&lt;/del&gt; rather be synonyms for &lt;del&gt;C-j&lt;/del&gt; / &lt;del&gt;C-k&lt;/del&gt;? They cannot emulate the behaviour of &lt;del&gt;[]&lt;/del&gt; or &lt;del&gt;][&lt;/del&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;: If there is granularity, i.e. subsections, use &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; to browse them. This reflects [[evilmagit][evil-magit]] and [[evilmu4e][evil-mu4e]] default bindings.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;: If there is no paragraph structure, &lt;del&gt;{&lt;/del&gt; and &lt;del&gt;}&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;: If there is no sentence structure, &lt;del&gt;(&lt;/del&gt; and &lt;del&gt;)&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;HJKL&lt;/del&gt;: &lt;del&gt;hjkl&lt;/del&gt; can be used for atomic movements, but &lt;del&gt;HJKL&lt;/del&gt; can usually not be used because &lt;del&gt;H&lt;/del&gt;, &lt;del&gt;K&lt;/del&gt; and &lt;del&gt;L&lt;/del&gt; are all universal (&lt;del&gt;J&lt;/del&gt; is &lt;del&gt;evil-join&lt;/del&gt; and usually does not make sense in special modes).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-h&lt;/del&gt; should not be remapped: Since we have &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; for vertical motion, it would make sense to use &lt;del&gt;C-h&lt;/del&gt; and &lt;del&gt;C-l&lt;/del&gt; for horizontal motion. There are some shortcomings though:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;In Vim, &lt;del&gt;C-h&lt;/del&gt; works as backspace, but Evil does not follow that behaviour.&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;In Emacs, it is a prefix key for all help-related commands, and so is &lt;del&gt;
        &lt;f1&gt;&lt;/f1&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Most importantly, &lt;del&gt;C-h&lt;/del&gt; is too widespread and ubiquitous to be replaced. So we don&#39;t.&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt;: As a consequence of the former point, &lt;del&gt;C-l&lt;/del&gt; is available.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-
      &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;: Those keys are usually free in Evil but still bound to their Emacs default (e.g. &lt;del&gt;M-l&lt;/del&gt; is &lt;del&gt;downcase-word&lt;/del&gt;). Besides, if &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; are already used, having &lt;del&gt;M-j&lt;/del&gt; and &lt;del&gt;M-k&lt;/del&gt; might add up to the confusion.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Quitting (&lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZQ&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;In Vim, &lt;del&gt;q&lt;/del&gt; is for recording macros. Vim quits with &lt;del&gt;ZZ&lt;/del&gt; or &lt;del&gt;ZQ&lt;/del&gt;. In most Emacs special modes, it stands for quitting while macros are recorded/played with &lt;del&gt;
  &lt;f3&gt;&lt;/f3&gt;&lt;/del&gt; and &lt;del&gt;
  &lt;f4&gt;&lt;/f4&gt;&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;A good rule of thumb would be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Always bind &lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt; and &lt;del&gt;ZQ&lt;/del&gt; to the mode specific quitting functions. If there is none,&lt;/li&gt; 
 &lt;li&gt;Bind &lt;del&gt;q&lt;/del&gt; and &lt;del&gt;ZZ&lt;/del&gt; to &lt;del&gt;quit-window&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;Bind &lt;del&gt;ZQ&lt;/del&gt; to &lt;del&gt;evil-quit&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;If macros don&#39;t make sense in current mode, then &lt;del&gt;@&lt;/del&gt; is available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Refreshing / Reverting (&lt;del&gt;gr&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt; is used for refreshing in [[evilmagit][evil-magit]], [[evilmu4e][evil-mu4e]], and some Spacemacs configurations (org-agenda and neotree among others).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt; is traditionally used to refresh the terminal screen. Since there does not seem to be any existing use of it, we leave the binding free for other uses.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Marking&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;m&lt;/del&gt; defaults to &lt;del&gt;evil-set-marker&lt;/del&gt; which might not be very useful in special modes. =&#39;= can still be used as it can jump to other buffers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;m&lt;/del&gt;: Mark or toggle mark, depending on what the mode offers. In visual mode, always mark. With a numeric argument, toggle mark on that many following lines.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;u&lt;/del&gt;: Unmark current selection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;U&lt;/del&gt;: Unmark all.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=&lt;del&gt;=: Toggle all marks. This mirrors the &quot;invert-char&quot; Vim command bound to =&lt;/del&gt;= by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;M&lt;/del&gt;: Mark all, if available. Otherwise use =U~=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;*&lt;/del&gt;: Mark-prefix or mark all if current mode has no prefix. &lt;del&gt;*&lt;/del&gt; is traditionally a wildcard.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;%&lt;/del&gt;: Mark regexp.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;x&lt;/del&gt;: Execute action on marks. This mirrors Dired&#39;s binding of &lt;del&gt;x&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;del&gt;*&lt;/del&gt; is used for marking, then &lt;del&gt;#&lt;/del&gt; is free.&lt;/p&gt; 
&lt;p&gt;Also note that Emacs inconsistently uses &lt;del&gt;u&lt;/del&gt; and &lt;del&gt;U&lt;/del&gt; to unmark.&lt;/p&gt; 
&lt;p&gt;*** Selecting / Filtering / Narrowing / Searching&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;s&lt;/del&gt; and &lt;del&gt;S&lt;/del&gt; seem to be used in some places like [[mu4e][mu4e]].&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;s&lt;/del&gt;: [s]elect/[s]earch/filter candidates according to a pattern.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;S&lt;/del&gt;: Remove filter and select all.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;=&lt;/del&gt; is usually free and its significance is obvious. It&#39;s taken for zooming though.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;|&lt;/del&gt; is not free but the pipe symbolic is very tantalizing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Sorting&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;o&lt;/del&gt;: Change the sort [o]rder.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;O&lt;/del&gt;: Sort in reverse order.&lt;/p&gt; &lt;p&gt;There is no real consensus around which key to bind to sorting. What others do by default:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;package-menu&lt;/del&gt; uses &lt;del&gt;S&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-x proced&lt;/del&gt; and Dired use &lt;del&gt;s&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;profiler&lt;/del&gt; uses &lt;del&gt;A&lt;/del&gt; and &lt;del&gt;D&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;[[mu4e][mu4e]] uses &lt;del&gt;O&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;[[http://www.nongnu.org/ranger/][ranger]] uses &lt;del&gt;o&lt;/del&gt;, inspired from [[http://mutt.org][Mutt]].&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to definition (&lt;del&gt;gd&lt;/del&gt;, &lt;del&gt;gD&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;gd&lt;/del&gt;: [g]o to [d]efinition. This is mostly for programming modes. If there&#39;s a corresponding &#39;pop&#39; action, use &lt;del&gt;C-t&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to references, etc (&lt;del&gt;gr&lt;/del&gt;, &lt;del&gt;gA&lt;/del&gt;) When &lt;del&gt;evil-collection-want-find-usages-bindings&lt;/del&gt; is set to t:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt;: [g] to [r]eferences. This binding is also used for refresh/reverting modes in non programming modes but is usually empty for programming modes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gA&lt;/del&gt;: [g]o to [A]ssignments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Additional bindings: There may be additional binds under this category. Please file a Pull Request if so.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to current entity&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;.&lt;/del&gt;: go to current entity (day for calendar, playing track for [[EMMS][EMMS]]). Bind only if more relevant than &lt;del&gt;evil-repeat&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Open thing at point (&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;, &lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;: Open thing at point in current window, open in other window and display in other window respectively. The latter is like the former with the focus remaining on the current window.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;: When available, same as &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; respectively. This is useful in terminals where &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; might not work.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Emacs-style jumping (&lt;del&gt;J&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;J&lt;/del&gt;: [[mu4e][mu4e]] has &lt;del&gt;j&lt;/del&gt; and [[evil-mu4e][evil-mu4e]] uses &lt;del&gt;J&lt;/del&gt;, so we use &lt;del&gt;J&lt;/del&gt; too.&lt;/p&gt; &lt;p&gt;Some special modes like [[mu4e][mu4e]] and ibuffer offer to &quot;jump&quot; to a different buffer. This sometimes depends on the thing at point.&lt;/p&gt; &lt;p&gt;This is not related to Evil jumps like &lt;del&gt;C-i&lt;/del&gt; and &lt;del&gt;C-o&lt;/del&gt;, nor to &quot;go to definition&quot;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Browse URL (&lt;del&gt;gx&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;gx&lt;/del&gt;: go to URL. This is a default Vim binding.&lt;/p&gt; 
&lt;p&gt;*** Help (&lt;del&gt;?&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : is the standard key for help related commands.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;?&lt;/del&gt; in places where backward search is not very useful.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** History browsing (&lt;del&gt;C-n&lt;/del&gt;, &lt;del&gt;C-p&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;C-n&lt;/del&gt; and &lt;del&gt;C-p&lt;/del&gt; are standard bindings to browse the history elements.&lt;/p&gt; 
&lt;p&gt;*** Bookmarking&lt;/p&gt; 
&lt;p&gt;?&lt;/p&gt; 
&lt;p&gt;*** REPL (&lt;del&gt;gz&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;If the mode has a Go To REPL-type command, set it to &lt;del&gt;gz&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;*** Zooming (&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; have obvious meanings.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;0&lt;/del&gt; has a somewhat intuitive meaning, plus it is next to &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; on QWERTY.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;=&lt;/del&gt; is useful as a synonym for &lt;del&gt;+&lt;/del&gt; because it is the unshifted key of &lt;del&gt;+&lt;/del&gt; on QWERTY.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Debugging&lt;/p&gt; 
&lt;p&gt;When debugging is on, debugger keys takes the most precedence.&lt;/p&gt; 
&lt;p&gt;These keys will be set when there&#39;s an available command for them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;n&lt;/del&gt; : Step Over&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;i&lt;/del&gt; : Step Into&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;o&lt;/del&gt; : Step Out&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;c&lt;/del&gt; : Continue/Resume Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;L&lt;/del&gt; : Locals&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;t&lt;/del&gt; : Tracing&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;q&lt;/del&gt; : Quit Debugging&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;H&lt;/del&gt; : Continue until Point&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;e&lt;/del&gt; : Evaluate Expression&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;b&lt;/del&gt; : Set Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;u&lt;/del&gt; : Unset Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&amp;gt;&lt;/del&gt; : Navigate to Next Frame&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&amp;lt;&lt;/del&gt; : Navigate to Previous Frame&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : Help&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;J&lt;/del&gt; : Jump to debugger location&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;R&lt;/del&gt; : Restart&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For debugging outside of debugger being on (e.g. setting initial breakpoints), we use similar keys to [[https://github.com/realgud/realgud][realgud]].&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;f5&lt;/del&gt; Start/Continue/Resume Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;S-f5&lt;/del&gt; Continue Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Mouse-1&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f9&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f10&lt;/del&gt; Step Over&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f11&lt;/del&gt; Step Into&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;S-f11&lt;/del&gt; Step Out&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Editable Buffers&lt;/p&gt; 
&lt;p&gt;For buffers where insert-state doesn&#39;t make sense but buffer can be edited, (e.g. wdired or wgrep), pressing &lt;del&gt;i&lt;/del&gt; will change into editable state.&lt;/p&gt; 
&lt;p&gt;When this editable state is turned on,&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;ZQ&lt;/del&gt; will abort and clear any changes. &lt;del&gt;ZZ&lt;/del&gt; will finish and save any changes. &lt;del&gt;ESC&lt;/del&gt; will exit editable state.&lt;/p&gt; 
&lt;p&gt;*** :q/:wq/etc&lt;/p&gt; 
&lt;p&gt;Modes with commands that can be bound to :q/:wq/etc will have those keys remapped.&lt;/p&gt; 
&lt;p&gt;** Key Translation&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how Vim&#39;s keybindings work). Its arguments are the &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;del&gt;:destructive&lt;/del&gt;) and key/replacement pairs. &lt;del&gt;states&lt;/del&gt; should be nil for non-evil keymaps, and both &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; can be a single symbol or a list of symbols.&lt;/p&gt; 
&lt;p&gt;This function can be useful for making key swaps/cycles en masse. For example, someone who uses an alternate keyboard layout may want to retain the &lt;del&gt;hjkl&lt;/del&gt; positions for directional movement in dired, the calendar, etc.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example for Colemak of making swaps in a single keymap:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-translate-key nil &#39;evil-motion-state-map ;; colemak hnei is qwerty hjkl &quot;n&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;i&quot; &quot;l&quot; ;; add back nei &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;n&quot; &quot;l&quot; &quot;i&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example of using &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; to cycle the keys for all modes in &lt;del&gt;evil-collection-mode-list&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-hjkl-rotation (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &quot;n&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;i&quot; &quot;l&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;n&quot; &quot;l&quot; &quot;i&quot;))&lt;/p&gt; 
&lt;p&gt;;; called after evil-collection makes its keybindings (add-hook &#39;evil-collection-setup-hook #&#39;my-hjkl-rotation)&lt;/p&gt; 
&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; 
&lt;p&gt;A more common use case of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; would be for keeping the functionality of some keys that users may bind globally. For example, &lt;del&gt;SPC&lt;/del&gt;, &lt;del&gt;[&lt;/del&gt;, and &lt;del&gt;]&lt;/del&gt; are bound in some modes. If you use these keys as global prefix keys that you never want to be overridden, you&#39;ll want to give them higher priority than other evil keybindings (e.g. those made by &lt;del&gt;(evil-define-key &#39;normal some-map ...)&lt;/del&gt;). To do this, you can create an &quot;intercept&quot; map and bind your prefix keys in it instead of in &lt;del&gt;evil-normal-state-map&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defvar my-intercept-mode-map (make-sparse-keymap) &quot;High precedence keymap.&quot;)&lt;/p&gt; 
&lt;p&gt;(define-minor-mode my-intercept-mode &quot;Global minor mode for higher precedence evil keybindings.&quot; :global t)&lt;/p&gt; 
&lt;p&gt;(my-intercept-mode)&lt;/p&gt; 
&lt;p&gt;(dolist (state &#39;(normal visual insert)) (evil-make-intercept-map ;; NOTE: This requires an evil version from 2018-03-20 or later (evil-get-auxiliary-keymap my-intercept-mode-map state t t) state))&lt;/p&gt; 
&lt;p&gt;(evil-define-key &#39;normal my-intercept-mode-map (kbd &quot;SPC f&quot;) &#39;find-file) ;; ... #+end_src&lt;/p&gt; 
&lt;p&gt;You can then define replacement keys:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-prefix-translations (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &quot;C-SPC&quot; &quot;SPC&quot; ;; these need to be unbound first; this needs to be in same statement &quot;[&quot; nil &quot;]&quot; nil &quot;[[&quot; &quot;[&quot; &quot;]]&quot; &quot;]&quot;))&lt;/p&gt; 
&lt;p&gt;(add-hook &#39;evil-collection-setup-hook #&#39;my-prefix-translations)&lt;/p&gt; 
&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; 
&lt;p&gt;By default, the first invocation of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When &lt;del&gt;:destructive t&lt;/del&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;del&gt;:destructive t&lt;/del&gt; is used, all cycles/swaps must be done within a single call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt;. To make a comparison to Vim keybindings, &lt;del&gt;:destructive t&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;map&lt;/del&gt;, and &lt;del&gt;:destructive nil&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &quot;original&quot; keybindings are those that existed in the keymap when &lt;del&gt;evil-collection-translate-key&lt;/del&gt; was first called). You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;del&gt;:destructive nil&lt;/del&gt; is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so &lt;del&gt;:destructive t&lt;/del&gt; may be useful for interactive experimentation.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-swap-key&lt;/del&gt; is also provided as a wrapper around &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that allows swapping keys:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-key nil &#39;evil-motion-state-map &quot;;&quot; &quot;:&quot;) ;; is equivalent to (evil-collection-translate-key nil &#39;evil-motion-state-map &quot;;&quot; &quot;:&quot; &quot;:&quot; &quot;;&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;In some cases, keys are bound through &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; and may need to be translated using &lt;del&gt;evil-collection-translate-minor-mode-key&lt;/del&gt; and/or &lt;del&gt;evil-collection-swap-minor-mode-key&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &quot;k&quot; &quot;s&quot; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil)&lt;/p&gt; 
&lt;p&gt;(evil-collection-translate-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &quot;k&quot; &quot;s&quot; &quot;s&quot; &quot;k&quot; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil) #+end_src&lt;/p&gt; 
&lt;p&gt;** Third-party packages&lt;/p&gt; 
&lt;p&gt;Third-party packages are provided by several parties:&lt;/p&gt; 
&lt;p&gt;| Major mode | Evil bindings | |------------+--------------------------| | ledger | [[https://github.com/atheriel/evil-ledger][evil-ledger]] | | lispy | [[https://github.com/noctuid/lispyville][lispyville]] or [[https://github.com/sp3ctum/evil-lispy][evil-lispy]] | | org | [[https://github.com/GuiltyDolphin/org-evil][org-evil]] or [[https://github.com/Somelauw/evil-org-mode][evil-org]] | | markdown | [[https://github.com/Somelauw/evil-markdown][evil-markdown]] |&lt;/p&gt; 
&lt;p&gt;Also &lt;del&gt;evil-collection&lt;/del&gt; has minimal support (&lt;del&gt;TAB&lt;/del&gt;, &lt;del&gt;S-TAB&lt;/del&gt; and sentence/paragraph forwarding) for &lt;del&gt;markdown&lt;/del&gt; and &lt;del&gt;org&lt;/del&gt; if you prefer less packages installed.&lt;/p&gt; 
&lt;p&gt;Should you know any suitable package not mentioned in this list, let us know and file an issue.&lt;/p&gt; 
&lt;p&gt;Other references:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions][Spacemacs]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/doomemacs/doomemacs/tree/master/modules/editor/evil][Doom Emacs]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** FAQ&lt;/p&gt; 
&lt;p&gt;*** Making SPC work similarly to [[https://github.com/syl20bnr/spacemacs][spacemacs]].&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; binds over SPC in many packages. To use SPC as a leader key with the [[https://github.com/noctuid/general.el][general]] library:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package general :ensure t :init (setq general-override-states &#39;(insert emacs hybrid normal visual motion operator replace)) :config (general-define-key :states &#39;(normal visual motion) :keymaps &#39;override &quot;SPC&quot; &#39;hydra-space/body)) ;; Replace &#39;hydra-space/body with your leader function. #+end_src&lt;/p&gt; 
&lt;p&gt;See [[https://github.com/noctuid/evil-guide][noctuid&#39;s evil guide]] for other approaches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unintialized mode maps in &lt;del&gt;evil-collection-setup-hook&lt;/del&gt;. &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; is ran with a list of keymaps passed into it. Some misconfigured modes may not have yet initialized their keymap at this time so the value of the variable may be nil. In that case, an alternative is to use a mode-hook to do any custom settings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (add-hook &#39;evil-collection-setup-hook (lambda (_mode keymaps) (add-hook &#39;ediff-mode-hook (lambda () (... keymaps ...))))) #+end_src&lt;/p&gt; 
&lt;p&gt;View [[https://github.com/emacs-evil/evil-collection/issues/196][196]] for more info. *** Don&#39;t allow Evil-Collection to bind some keys. Look into &lt;del&gt;evil-collection-key-whitelist&lt;/del&gt; and &lt;del&gt;evil-collection-key-blacklist&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;; Don&#39;t allow Evil Collection to bind to gfu and gfp. (setq evil-collection-key-blacklist &#39;(&quot;gfu&quot; &quot;gfp&quot;)) #+end_src *** Modes left behind&lt;/p&gt; 
&lt;p&gt;Some modes might still remain unsupported by this package. Should you be missing your &lt;del&gt;
  &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, please feel free to do a pull request.&lt;/p&gt; 
&lt;p&gt;*** Writing a new binding&lt;/p&gt; 
&lt;p&gt;This [[template][yasnippet template]] can be used to bootstrap a new binding.&lt;/p&gt; 
&lt;p&gt;For example, if we were to want to add &lt;del&gt;evil-collection&lt;/del&gt; support to &lt;del&gt;eldoc&lt;/del&gt;. (e.g.) There is a package that contains:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (provide &#39;eldoc) #+end_src&lt;/p&gt; 
&lt;p&gt;Create a directory named eldoc under [[modes-directory][modes/]]. Create a file named evil-collection-eldoc.el under the newly created eldoc directory. Then use the above template as an example or, using [[yasnippet][yasnippet]], &lt;del&gt;yas-expand&lt;/del&gt; the above template which will result in something like below:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;;; evil-collection-eldoc.el --- Bindings for `eldoc&#39; -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&lt;/p&gt; 
&lt;p&gt;;; Copyright (C) 2022 James Nguyen&lt;/p&gt; 
&lt;p&gt;;; Author: James Nguyen &lt;a href=&quot;mailto:james@jojojames.com&quot;&gt;james@jojojames.com&lt;/a&gt; ;; Maintainer: James Nguyen &lt;a href=&quot;mailto:james@jojojames.com&quot;&gt;james@jojojames.com&lt;/a&gt; ;; URL: &lt;a href=&quot;https://github.com/emacs-evil/evil-collection&quot;&gt;https://github.com/emacs-evil/evil-collection&lt;/a&gt; ;; Version: 0.0.2 ;; Package-Requires: ((emacs &quot;27.1&quot;)) ;; Keywords: evil, emacs, convenience, tools&lt;/p&gt; 
&lt;p&gt;;; This program is free software; you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published by ;; the Free Software Foundation, either version 3 of the License, or ;; (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;;; This program is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this program. If not, see &lt;a href=&quot;http://www.gnu.org/licenses/&quot;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;;;; Commentary: ;;; Bindings for eldoc.&lt;/p&gt; 
&lt;p&gt;;;; Code: (require &#39;evil-collection) (require &#39;eldoc nil t)&lt;/p&gt; 
&lt;p&gt;(defvar eldoc-mode-map) (defconst evil-collection-eldoc-maps &#39;(eldoc-mode-map))&lt;/p&gt; 
&lt;p&gt;(defun evil-collection-eldoc-setup () &quot;Set up `evil&#39; bindings for eldoc.&quot; (evil-collection-define-key &#39;normal &#39;eldoc-mode-map ))&lt;/p&gt; 
&lt;p&gt;(provide &#39;evil-collection-eldoc) ;;; evil-collection-eldoc.el ends here #+end_src&lt;/p&gt; 
&lt;p&gt;Finally, add &lt;del&gt;eldoc&lt;/del&gt; to &lt;del&gt;evil-collection--supported-modes&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (defvar evil-collection--supported-modes &lt;code&gt;( ;; ... eldoc ;; ... ) &quot;List of modes supported by evil-collection. Elements are either target mode symbols or lists which &lt;/code&gt;car&#39; is the mode symbol and `cdr&#39; the packages to register.&quot;) #+end_src ** Submitting Issues&lt;/p&gt; 
&lt;p&gt;When reproducing issues, you can use this emacs -Q recipe.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq user-emacs-directory &quot;~/.emacs.1.d&quot;) (setq package-user-dir (format &quot;%s/elpa/%s/&quot; user-emacs-directory emacs-major-version))&lt;/p&gt; 
&lt;p&gt;(setq package-enable-at-startup nil package-archives &#39;((&quot;melpa&quot; . &quot;&lt;a href=&quot;https://melpa.org/packages/&quot;&gt;https://melpa.org/packages/&lt;/a&gt;&quot;) (&quot;gnu&quot; . &quot;&lt;a href=&quot;http://elpa.gnu.org/packages/&quot;&gt;http://elpa.gnu.org/packages/&lt;/a&gt;&quot;)))&lt;/p&gt; 
&lt;p&gt;(require &#39;package) (package-initialize) (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) (require &#39;use-package) (setq use-package-always-ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package evil :ensure t :init (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; 
&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;** Contributing We welcome any additional modes that are not already supported.&lt;/p&gt; 
&lt;p&gt;All bindings in &lt;del&gt;evil-collection&lt;/del&gt; are open to change so if there&#39;s a better or more consistent binding, please [[https://github.com/emacs-evil/evil-collection/issues][open an issue]] or [[https://github.com/emacs-evil/evil-collection/pulls][submit a pull request]].&lt;/p&gt; 
&lt;p&gt;Follow [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]] for coding conventions.&lt;/p&gt; 
&lt;p&gt;[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Erlang/OTP]] has a good read for helpful commit messages.&lt;/p&gt; 
&lt;p&gt;#+LINK: EMMS &lt;a href=&quot;https://www.gnu.org/software/emms/&quot;&gt;https://www.gnu.org/software/emms/&lt;/a&gt; #+LINK: evilmagit &lt;a href=&quot;https://github.com/emacs-evil/evil-magit&quot;&gt;https://github.com/emacs-evil/evil-magit&lt;/a&gt; #+LINK: evilmu4e &lt;a href=&quot;https://github.com/JorisE/evil-mu4e&quot;&gt;https://github.com/JorisE/evil-mu4e&lt;/a&gt; #+LINK: mu4e &lt;a href=&quot;https://www.djcbsoftware.nl/code/mu/mu4e.html&quot;&gt;https://www.djcbsoftware.nl/code/mu/mu4e.html&lt;/a&gt; #+LINK: yasnippet &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot;&gt;https://github.com/joaotavora/yasnippet&lt;/a&gt; #+LINK: template &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/raw/master/yasnippet_evil-collection&quot;&gt;https://github.com/emacs-evil/evil-collection/blob/master/yasnippet_evil-collection&lt;/a&gt; #+LINK: modes-directory &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/tree/master/modes&quot;&gt;https://github.com/emacs-evil/evil-collection/tree/master/modes&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alexander-Miller/treemacs</title>
      <link>https://github.com/Alexander-Miller/treemacs</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- fill-column: 120 org-list-indent-offset: 1 toc-org-max-depth: 2 org-hide-emphasis-markers: nil -&lt;/em&gt;-&lt;/h1&gt; 
&lt;p&gt;#+STARTUP: noinlineimages&lt;/p&gt; 
&lt;p&gt;[[https://gitter.im/treemacs/community][file:https://badges.gitter.im/Alexander-Miller/treemacs.png]] [[https://melpa.org/#/treemacs][file:https://melpa.org/packages/treemacs-badge.svg]] [[https://stable.melpa.org/#/treemacs][file:https://stable.melpa.org/packages/treemacs-badge.svg]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Treemacs - a tree layout file explorer for Emacs :noexport:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[[file:screenshots/screenshot.png]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Content :TOC:noexport:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#state-of-development][State of Development]]&lt;/li&gt; 
 &lt;li&gt;[[#quick-feature-overview][Quick Feature Overview]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#fancy-gifs][Fancy Gifs!]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#quick-start][Quick Start]]&lt;/li&gt; 
 &lt;li&gt;[[#detailed-feature-list][Detailed Feature List]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#projects-and-workspaces][Projects and Workspaces]]&lt;/li&gt; 
   &lt;li&gt;[[#conveniently-editing-your-projects-and-workspaces][Conveniently Editing Your Projects and Workspaces]]&lt;/li&gt; 
   &lt;li&gt;[[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspaces]]&lt;/li&gt; 
   &lt;li&gt;[[#frame-locality][Frame Locality]]&lt;/li&gt; 
   &lt;li&gt;[[#mouse-interface][Mouse Interface]]&lt;/li&gt; 
   &lt;li&gt;[[#follow-mode][Follow-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#tag-follow-mode][Tag-follow-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#fringe-indicator-mode][Fringe-indicator-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#git-mode][Git-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#filewatch-mode][Filewatch-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#file-management][File Management]]&lt;/li&gt; 
   &lt;li&gt;[[#indent-guide-mode][Indent-guide-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#git-commit-diff-mode][Git-commit-diff-mode]]&lt;/li&gt; 
   &lt;li&gt;[[#session-persistence][Session Persistence]]&lt;/li&gt; 
   &lt;li&gt;[[#terminal-compatibility][Terminal Compatibility]]&lt;/li&gt; 
   &lt;li&gt;[[#tag-view][Tag View]]&lt;/li&gt; 
   &lt;li&gt;[[#current-directory-awareness][Current-Directory Awareness]]&lt;/li&gt; 
   &lt;li&gt;[[#tramp-support][Tramp Support]]&lt;/li&gt; 
   &lt;li&gt;[[#org-support][Org Support]]&lt;/li&gt; 
   &lt;li&gt;[[#theme-support][Theme Support]]&lt;/li&gt; 
   &lt;li&gt;[[#peeking][Peeking]]&lt;/li&gt; 
   &lt;li&gt;[[#additional-packages][Additional Packages]]&lt;/li&gt; 
   &lt;li&gt;[[#treemacs-as-a-framework][Treemacs as a Framework]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; 
 &lt;li&gt;[[#configuration][Configuration]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; 
   &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; 
   &lt;li&gt;[[#evil-compatibility][Evil compatibility]]&lt;/li&gt; 
   &lt;li&gt;[[#customizing-themes-and-icons][Customizing Themes and Icons]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#keymap][Keymap]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#unbound-functions][Unbound functions]]&lt;/li&gt; 
   &lt;li&gt;[[#default-keymaps][Default keymaps]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#compatibility][Compatibility]]&lt;/li&gt; 
 &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; 
 &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; 
 &lt;li&gt;[[#working-with-the-code-base][Working With The Code Base]]&lt;/li&gt; 
 &lt;li&gt;[[#dependencies][Dependencies]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;State of Development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Treemacs is currently in an active - but low intensity - state of development. New features are worked on, PRs will be looked at and issues answered - eventually. My time budget is limited, so looking for new work just means looking at whatever is currently at the top of my inbox. If you feel like the ticket you&#39;ve opened has gone unanswered for a while feel free to give it a bump - you are explicitly encouraged to do so.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Quick Feature Overview Treemacs is a file and project explorer similar to NeoTree or vim&#39;s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing &lt;em&gt;basic&lt;/em&gt; file management utilities. Specifically a quick feature overview looks as follows:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Project management :: Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them, and groups projects in workspaces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Easy navigation :: quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Versatile file access :: decide exactly how and where a file will be opened, including using &lt;del&gt;ace-window&lt;/del&gt; to choose a window or launching an external application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Understanding of frames :: every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finding of files and tags :: Treemacs can follow along and keep in focus the currently selected file or even the tag at point, either manually or automatically using either &lt;del&gt;treemacs-follow-mode&lt;/del&gt; or &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Git Integration :: Treemacs can use different faces for files and directories based on their git status. The git process is run asynchronously, minimizing its performance impact.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[[https://github.com/deb0ch/emacs-winum][Winum]] &amp;amp; [[https://github.com/abo-abo/ace-window][ace-window]] compatibility :: The presence of treemacs will not interfere with winum&#39;s and ace-window&#39;s usual layouts.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[[https://github.com/bbatsov/projectile][Projectile/project.el]] integration :: the &lt;del&gt;treemacs-projectile&lt;/del&gt; package lets you quickly add your projectile projects to the treemacs workspace. &lt;del&gt;project.el&lt;/del&gt; compatibility is built-in.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Simple mouse interface :: Left clicks will work the same as you&#39;re used to from with graphical applications&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Session persistence :: Treemacs automatically saves and restores your workspaces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Dashing good looks :: Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons. When run in a terminal a simple fallback is used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tag view :: Treemacs can display files&#39; tags. All file types that Emacs can generate a (semantic) imenu index for are supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Visual feedback :: When it would otherwise be difficult to see the message in the minibuffer success/failure is indicated with pulse.el.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Theming support :: Treemacs supports using multiple icon themes that can be changed at will.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ease of use :: Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run treemacs and 2) If you use evil: requiring &lt;del&gt;treemacs-evil&lt;/del&gt; to integrate treemacs with evil and enable j/k navigation. More on both below. You can also summon helpful hydras with &lt;del&gt;?&lt;/del&gt; and &lt;del&gt;C-?&lt;/del&gt; that will remind you of treemacs&#39; many keybindings and features.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bookmark integration :: Running &lt;del&gt;bookmark-set&lt;/del&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Fancy Gifs!&lt;/p&gt; 
&lt;p&gt;(The font used in the gifs is Fantasque Sans Mono)&lt;/p&gt; 
&lt;p&gt;Various ways to open files: [[file:screenshots/open-files.gif]]&lt;/p&gt; 
&lt;p&gt;Workspace administration with org-mode: [[file:screenshots/workspace-edit.gif]]&lt;/p&gt; 
&lt;p&gt;Automatic reaction to changes in the file system: [[file:screenshots/filewatch.gif]]&lt;/p&gt; 
&lt;p&gt;Automatic reaction to changes in git: [[file:screenshots/git.gif]]&lt;/p&gt; 
&lt;p&gt;Full-featured mouse interface: [[file:screenshots/mouse-interface.gif]]&lt;/p&gt; 
&lt;p&gt;Including moving and opening files via mouse drag: [[file:screenshots/mouse-drag.gif]]&lt;/p&gt; 
&lt;p&gt;Resizable icons: [[file:screenshots/icon-resize.gif]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Quick Start If you don&#39;t care about reading the full readme here&#39;s a list of some bare bones basics to get you started:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;First of all: press &lt;del&gt;?&lt;/del&gt; to summon the helpful hydra: [[file:screenshots/hydra.png]]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you use evil don&#39;t forget to also install &lt;del&gt;treemacs-evil&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you use projectile you can install &lt;del&gt;treemacs-projectile&lt;/del&gt; to allow quickly add your projectile projects to treemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Treemacs doesn&#39;t bind any global keys, you need to use whatever fits you best. A full install setup can be found [[#installation][below]]. Otherwise just add a keybind for &lt;del&gt;treemacs&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour, u to go to parent, and C-j/C-k to move between projects.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There&#39;s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TAB and RET are particularly configurable. See &lt;del&gt;treemacs-TAB/RET-actions-config&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Projects administration is bound under the &lt;del&gt;C-c C-p&lt;/del&gt; prefix.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Detailed Feature List ** Projects and Workspaces If you&#39;ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its location in the file system and its name. This is the info that you need to provide when you want to add a new project to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt; 
&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to &quot;free roam&quot; in the file system with treemacs, i.e. you can no longer arbitrarily switch the single file tree&#39;s root to the directory at point or the current root&#39;s parent. Another restriction is that the same part of the file system may not appear more than once as part of the workspace. For example, it is not possible to have both /Documents and /Documents/ProjectX as projects in the same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path. Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any combination concern/buffer separating frameworks, be it persp/perspective, eyebrowse, tab-bar-mode, or project.el/projectile. It also opens the potential for concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt; 
&lt;p&gt;*** Workspace Selection When a workspace is first needed, treemacs will select a workspace in the following manner:&lt;/p&gt; 
&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing that file. If that fails treemacs will resort to using the /fallback workspace/ which is defined as simply the /first/ element in the list of all workspace.&lt;/p&gt; 
&lt;p&gt;The order of workspaces is the same that you see when calling &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; (see next chapter). You can interactively set the fallback workspace by calling &lt;del&gt;treemacs-set-fallback-workspace&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;This selection will happen when treemacs is first started (with a command like &lt;del&gt;treemacs-select-window&lt;/del&gt;) or when a function that requires the current workspace to be known is used (like adding or removing a project). *** Disabling workspaces &amp;amp; projects It is possible to disable a workspace or project so it won&#39;t appear in treemacs, but still remains a part of your loadout, keeping it visible when you go edit your workspaces. To do so simply start the name of the workspace or project with &quot;COMMENT&quot;:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/disable-project.png]]&lt;/p&gt; 
&lt;p&gt;** Conveniently Editing Your Projects and Workspaces There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either the &lt;del&gt;C-c C-p&lt;/del&gt; or &lt;del&gt;C-c C-w&lt;/del&gt; prefix, or call &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; and edit your entire layout in the form of a single org-mode buffer.&lt;/p&gt; 
&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects in a workspace, and every project&#39;s path is given as a description list, starting with a &lt;del&gt;-&lt;/del&gt; (and an optional leading space). Empty lines and lines starting with &lt;del&gt;#&lt;/del&gt; are ignored, and everything else leads to an error.&lt;/p&gt; 
&lt;p&gt;You needn&#39;t worry about making mistakes either. If there&#39;s something wrong when you call &lt;del&gt;treemacs-finish-edit&lt;/del&gt; (C-c C-c) then treemacs will point you at the incorrect line and tell you what&#39;s missing:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/workspace-edit.png]]&lt;/p&gt; 
&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible indentation is caused by &lt;del&gt;org-indent-mode&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;** Navigation without Projects and Workspaces&lt;/p&gt; 
&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case there are multiple other ways to use treemacs in a more &quot;free-form&quot; style:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use &lt;del&gt;treemacs-display-current-project-exclusively&lt;/del&gt; to display only the current project (removing all other projects from the workspace).&lt;/li&gt; 
 &lt;li&gt;You can enable &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; to make treemacs automatically switch to the project for the current buffer.&lt;/li&gt; 
 &lt;li&gt;As long as there is exactly /a single project/ in your workspace you can also use &lt;del&gt;M-H&lt;/del&gt; and &lt;del&gt;M-L&lt;/del&gt; (or &lt;del&gt;treemacs-root-up&lt;/del&gt; and &lt;del&gt;treemacs-root-down&lt;/del&gt;) to arbitrarily change the project&#39;s root and freely navigate through your your file system, similar to dired. &lt;del&gt;M-H&lt;/del&gt; will navigate one level upward in the file system, &lt;del&gt;M-L&lt;/del&gt; will move into the directory at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Frame Locality Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;del&gt;treemacs&lt;/del&gt; while inside a new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt; 
&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list. This would break various assumptions in treemacs&#39; code base and effectively falls under undefined behaviour - a bad idea all around.&lt;/p&gt; 
&lt;p&gt;** Mouse Interface Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt; 
&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt; 
&lt;p&gt;If you prefer to expand/collapse nodes with a single mouse click you can also use &lt;del&gt;treemacs-single-click-expand-action&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs (define-key treemacs-mode-map [mouse-1] #&#39;treemacs-single-click-expand-action)) #+END_SRC&lt;/p&gt; 
&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/right-click.png]]&lt;/p&gt; 
&lt;p&gt;You can move and open files by dragging them with the mouse.&lt;/p&gt; 
&lt;p&gt;** Follow-mode &lt;del&gt;treemacs-follow-mode&lt;/del&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;** Tag-follow-mode &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; is a global minor mode which extends and effectively replaces &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. When activated it follows not just the current file, but also the current tag. This works alongside treemacs&#39; integration with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt; 
&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer&#39;s window needs to be temporarily selected, which will reset &lt;del&gt;blink-cursor-mode&lt;/del&gt;&#39;s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt; 
&lt;p&gt;** Fringe-indicator-mode &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor. It can make the selected line more visible if &lt;del&gt;hl-line-mode&lt;/del&gt; doesn&#39;t stand out with your theme.&lt;/p&gt; 
&lt;p&gt;The indicator can either be permanently visible, or be only shown when the treemacs window is selected by calling it either with the &lt;del&gt;always&lt;/del&gt; or &lt;del&gt;only-when-focused&lt;/del&gt; argument. ** Git-mode &lt;del&gt;treemacs-git-mode&lt;/del&gt; is a global minor mode which enables treemacs to check for files&#39; and directories&#39; git status information and highlight them accordingly (see also the &lt;del&gt;treemacs-git-...&lt;/del&gt; faces). The mode is available in 3 variants: &lt;del&gt;simple&lt;/del&gt;, &lt;del&gt;extended&lt;/del&gt; and &lt;del&gt;deferred&lt;/del&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple, so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt; 
 &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended variant requires python3 to work.&lt;/li&gt; 
 &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are separated. The former happens immediately, the latter after &lt;del&gt;treemacs-deferred-git-apply-delay&lt;/del&gt; seconds of idle time. This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this effect is largely mitigated due to the use of a caching layer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When called interactively &lt;del&gt;treemacs-git-mode&lt;/del&gt; will ask for the variant to use. In lisp code an appropriate symbol can be directly passed to the minor mode function:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-git-mode &#39;deferred) #+END_SRC&lt;/p&gt; 
&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where this is not the case &lt;del&gt;treemacs-max-git-entries&lt;/del&gt; (default value 5000) will limit the number of git status entries treemacs will process before ignoring the rest.&lt;/p&gt; 
&lt;p&gt;** Filewatch-mode &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt; 
&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and &lt;del&gt;treemacs-git-mode&lt;/del&gt; is enabled. Events caused by files that are ignored as per &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; are likewise counted as not relevant.&lt;/p&gt; 
&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;del&gt;treemacs-file-event-delay&lt;/del&gt; ms to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs will not refresh the entire view to make the detected changes visible, but will instead only make updates to the directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on every change and save.&lt;/p&gt; 
&lt;p&gt;The mode only applies to directories opened &lt;em&gt;after&lt;/em&gt; this mode has been activated. This means that to enable file watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh actions.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Known limitations&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Staging and committing changes does not produce any file change events of its own, if you use &lt;del&gt;treemacs-git-mode&lt;/del&gt; you still need to do a manual refresh to see your files&#39; faces go from &#39;changed&#39; and &#39;untracked&#39; to &#39;unchanged&#39; after a commit. The &lt;del&gt;treemacs-magit&lt;/del&gt; package provides the necessary hooks to fill this gap.&lt;/li&gt; 
 &lt;li&gt;Filewatch-mode may not be able to track file modifications on MacOS, making git-mode miss potential changes, see also [[https://github.com/Alexander-Miller/treemacs/issues/152#issuecomment-941093929][this comment]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** File Management Treemacs is no dired, but it supports the basic file management facilities of creating, deleting, moving, copying and renaming files.&lt;/p&gt; 
&lt;p&gt;It is also possible to mark multiple files to act on them. &lt;del&gt;M-m&lt;/del&gt; will summon a hydra for bulk file actions. &lt;em&gt;NOTE:&lt;/em&gt; The bulk action implementation is using treemacs&#39; (yet to be documented) annotation api, which is set up to provide /permanent/ annotations like colouring based on flycheck&#39;s error/warning/info output. This means that marking files will likewise be permanent, even if you collapse the directories containing those files and they are no longer visible. ** Indent-guide-mode&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;treemacs-indent-guide-mode&lt;/del&gt; is a simple visual helper based on the options provided by the &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; settings. Its appearance is dictated by &lt;del&gt;treemacs-indent-guide-style&lt;/del&gt;, the options are either &lt;del&gt;line&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/indent-guide-line.png]]&lt;/p&gt; 
&lt;p&gt;or &lt;del&gt;block&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/indent-guide-block.png]] ** Git-commit-diff-mode &lt;del&gt;treemacs-git-commit-diff-mode&lt;/del&gt; will annotate git-tracked project to show how many commits the local repo is ahead or behind its remote counterpart:&lt;/p&gt; 
&lt;p&gt;[[file:screenshots/git-commit-diff.png]] ** Session Persistence Treemacs&#39; sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when treemacs is first loaded. This persistence process is fully automatic and independent, and should therefore be fully compatible with &lt;del&gt;desktop-save-mode&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;The persisted state is saved under &lt;del&gt;user-emacs-directory/.cache/treemacs-persist&lt;/del&gt; by default. The exact file location is saved in the variable &lt;del&gt;treemacs-persist-file&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;del&gt;treemacs-last-error-persist-file&lt;/del&gt; for debugging.&lt;/p&gt; 
&lt;p&gt;** Terminal Compatibility When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and using simple &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; characters instead. The exact characters used are [[#custom-icons][highly customizable]].&lt;/p&gt; 
&lt;p&gt;** Tag View Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced using emacs&#39; builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt; 
&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;del&gt;imenu-auto-rescan&lt;/del&gt; to t is recommended. Tags generated with the help of &lt;del&gt;semantic-mode&lt;/del&gt; are likewise supported.&lt;/p&gt; 
&lt;p&gt;*** ggtags&lt;/p&gt; 
&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer&#39;s imenu index function to use ggtags:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index) #+END_SRC&lt;/p&gt; 
&lt;p&gt;** Current-Directory Awareness Treemacs always sets the &lt;del&gt;default-directory&lt;/del&gt; variable based on the (nearest) path at the current node, falling back to your home directory when there is no node or path at point. That means that various commands like &lt;del&gt;find-file&lt;/del&gt;, &lt;del&gt;ediff&lt;/del&gt; &lt;del&gt;magit-status&lt;/del&gt; or &lt;del&gt;helm-projectile-ag&lt;/del&gt; will correctly act based on the current directory or project context. ** Tramp Support Treemacs supports projects on remote directories, e.g. &lt;del&gt;/scp:remote-server:path/to/directory&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;However tramp support has some restrictions: &lt;del&gt;treemacs-use-collapsed-directories&lt;/del&gt; has no effect on remote directories. ** Org Support Treemacs supports storing links to its file nodes by means of &lt;del&gt;org-store-link&lt;/del&gt;. ** Theme Support Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;del&gt;treemacs-load-theme&lt;/del&gt;, either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like this:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-load-theme &quot;Default&quot;) #+END_SRC&lt;/p&gt; 
&lt;p&gt;Do keep in mind that by default treemacs&#39; theme support is all theory: the standard installation includes only the default theme; this feature is meant to easily allow &lt;em&gt;others&lt;/em&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt; 
&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the [[#customizing-themes-and-icons][Configuration]] section. ** Peeking If you want to look at files from within treemacs, without opening them with &lt;del&gt;RET&lt;/del&gt; and switching to another window, you can do so with &lt;del&gt;P&lt;/del&gt; which activates &lt;del&gt;treemacs-peek-mode&lt;/del&gt;. When peek-mode is active treemacs will automatically preview the file at point.&lt;/p&gt; 
&lt;p&gt;To quit peek-mode either press &lt;del&gt;P&lt;/del&gt; again to disable it or open a file with &lt;del&gt;RET&lt;/del&gt;. Either way upon exiting peek-mode all files that have been opened due to peeking will be closed again (with the exception of the one that you opened with &lt;del&gt;RET&lt;/del&gt;, of course).&lt;/p&gt; 
&lt;p&gt;You can scroll the window being peeked (and in general &lt;del&gt;other-window&lt;/del&gt; when you are in treemacs) with &lt;del&gt;M-N/P&lt;/del&gt; or &lt;del&gt;M-J/K&lt;/del&gt; if you use &lt;del&gt;treemacs-evil&lt;/del&gt;. ** Additional Packages Next to treemacs itself you can optionally install:&lt;/p&gt; 
&lt;p&gt;*** treemacs-evil Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It&#39;ll also enable navigation with j/k instead of n/p. *** treemacs-projectile Allows to quickly add your projectile projects to the treemacs workspace. *** treemacs-magit A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it will inform treemacs about (un)staging of files and commits happening in magit. *** treemacs-icons-dired Allows you to use treemacs icons in dired buffers with &lt;del&gt;treemacs-icons-dired-mode&lt;/del&gt;: [[file:screenshots/dired-icons.png]] *** treemacs-persp/treemacs-perspective Integration with persp-mode or perspective.el that allows treemacs buffers to be unique inside the active perspective instead of the default frame-based buffer scope. *** treemacs-tab-bar Integration with tab-bar-mode that allows treemacs buffers to be unique inside the active tab instead of the default frame-based buffer scope. *** treemacs-all-the-icons Provides a theme using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]. ** Treemacs as a Framework Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like structures. [[file:Extensions.org][See here]] for an extended tutorial and demonstration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of Spacemacs you can simply add treemacs to &lt;del&gt;dotspacemacs-configuration-layers&lt;/del&gt; to replace the default NeoTree. Check &lt;del&gt;SPC h SPC treemacs&lt;/del&gt; for details. Otherwise you will need to add treemacs to &lt;del&gt;dotspacemacs-additional-packages&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;del&gt;use-package&lt;/del&gt; example below, and customize it as needed (remove &lt;del&gt;treemacs-evil&lt;/del&gt; if you don&#39;t use it, customize the keybindings to you taste, etc).&lt;/p&gt; 
&lt;p&gt;Either way keep in mind that treemacs has /no default keybindings/ for its globally callable initialization functions. Each user is supposed to select keybindings for functions like &lt;del&gt;treemacs-find-file&lt;/del&gt; based on whatever they find convenient.&lt;/p&gt; 
&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself [[#keymap][below]].&lt;/p&gt; 
&lt;p&gt;The following &lt;del&gt;use-package&lt;/del&gt; snippet includes a list of /all/ of treemacs&#39; configuration options in their default setting. Setting them, or activating the minor modes yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package treemacs :ensure t :defer t :init (with-eval-after-load &#39;winum (define-key winum-keymap (kbd &quot;M-0&quot;) #&#39;treemacs-select-window)) :config (progn (setq treemacs-buffer-name-function #&#39;treemacs-default-buffer-name treemacs-buffer-name-prefix &quot; *Treemacs-Buffer-&quot; treemacs-collapse-dirs (if treemacs-python-executable 3 0) treemacs-deferred-git-apply-delay 0.5 treemacs-directory-name-transformer #&#39;identity treemacs-display-in-side-window t treemacs-eldoc-display &#39;simple treemacs-file-event-delay 2000 treemacs-file-extension-regex treemacs-last-period-regex-value treemacs-file-follow-delay 0.2 treemacs-file-name-transformer #&#39;identity treemacs-follow-after-init t treemacs-expand-after-init t treemacs-find-workspace-method &#39;find-for-file-or-pick-first treemacs-git-command-pipe &quot;&quot; treemacs-goto-tag-strategy &#39;refetch-index treemacs-header-scroll-indicators &#39;(nil . &quot;^^^^^^&quot;) treemacs-hide-dot-git-directory t treemacs-indentation 2 treemacs-indentation-string &quot; &quot; treemacs-is-never-other-window nil treemacs-max-git-entries 5000 treemacs-missing-project-action &#39;ask treemacs-move-files-by-mouse-dragging t treemacs-move-forward-on-expand nil treemacs-no-png-images nil treemacs-no-delete-other-windows t treemacs-project-follow-cleanup nil treemacs-persist-file (expand-file-name &quot;.cache/treemacs-persist&quot; user-emacs-directory) treemacs-position &#39;left treemacs-read-string-input &#39;from-child-frame treemacs-recenter-distance 0.1 treemacs-recenter-after-file-follow nil treemacs-recenter-after-tag-follow nil treemacs-recenter-after-project-jump &#39;always treemacs-recenter-after-project-expand &#39;on-distance treemacs-litter-directories &#39;(&quot;/node_modules&quot; &quot;/.venv&quot; &quot;/.cask&quot;) treemacs-project-follow-into-home nil treemacs-show-cursor nil treemacs-show-hidden-files t treemacs-silent-filewatch nil treemacs-silent-refresh nil treemacs-sorting &#39;alphabetic-asc treemacs-select-when-already-in-treemacs &#39;move-back treemacs-space-between-root-nodes t treemacs-tag-follow-cleanup t treemacs-tag-follow-delay 1.5 treemacs-text-scale nil treemacs-user-mode-line-format nil treemacs-user-header-line-format nil treemacs-wide-toggle-width 70 treemacs-width 35 treemacs-width-increment 1 treemacs-width-is-initially-locked t treemacs-workspace-switch-cleanup nil)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode &#39;always)
  (when treemacs-python-executable
    (treemacs-git-commit-diff-mode t))

  (pcase (cons (not (null (executable-find &quot;git&quot;)))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode &#39;deferred))
    (`(t . _)
     (treemacs-git-mode &#39;simple)))

  (treemacs-hide-gitignored-files-mode nil))
:bind
(:map global-map
      (&quot;M-0&quot;       . treemacs-select-window)
      (&quot;C-x t 1&quot;   . treemacs-delete-other-windows)
      (&quot;C-x t t&quot;   . treemacs)
      (&quot;C-x t d&quot;   . treemacs-select-directory)
      (&quot;C-x t B&quot;   . treemacs-bookmark)
      (&quot;C-x t C-t&quot; . treemacs-find-file)
      (&quot;C-x t M-t&quot; . treemacs-find-tag)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(use-package treemacs-evil :after (treemacs evil) :ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package treemacs-projectile :after (treemacs projectile) :ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package treemacs-magit :after (treemacs magit) :ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode :after (treemacs persp-mode) ;;or perspective vs. persp-mode :ensure t :config (treemacs-set-scope-type &#39;Perspectives))&lt;/p&gt; 
&lt;p&gt;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode :after (treemacs) :ensure t :config (treemacs-set-scope-type &#39;Tabs))&lt;/p&gt; 
&lt;p&gt;(treemacs-start-on-boot) #+END_SRC&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configuration ** Variables Treemacs offers the following configuration options (&lt;del&gt;describe-variable&lt;/del&gt; will usually offers more details):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| Variable | Default | Description | |------------------------------------------+--------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | treemacs-indentation | 2 | The number of times each level is indented in the file tree. If specified as &#39;(INTEGER px), indentation will be a single INTEGER pixels wide space. | | treemacs-indentation-string | &quot; &quot; | The string that is used to create indentation when &lt;del&gt;treemacs-indentation&lt;/del&gt; is not specified as pixels. | | treemacs-width | 35 | Width of the treemacs window. | | treemacs-wide-toggle-width | 70 | Width of the treemacs window when using &lt;del&gt;treemacs-extra-wide-toggle&lt;/del&gt;. | | treemacs-width-increment | 1 | When resizing, this value is added or substracted from the window width. | | treemacs-show-hidden-files | t | Dotfiles will be shown if this is set to t and be hidden otherwise. | | treemacs-follow-after-init | t | When non-nil follow the currently selected file after initializing the treemacs buffer, regardless of &lt;del&gt;treemacs-follow-mode&lt;/del&gt; setting. | | treemacs-expand-after-init | t | When non-nil expand the first project after treemacs is first initialsed. | | treemacs-sorting | alphabetic-asc | Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.) | | treemacs-ignored-file-predicates | (treemacs--std-ignore-file-predicate) | List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;em&gt;never&lt;/em&gt; be shown in the treemacs buffer. | | treemacs-pre-file-insert-predicates | nil | List of predicates to test for files and directories not to be rendered. Unlike &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; these predicates apply when files&#39; git status information is available. | | treemacs-file-event-delay | 2000 | How long (in milliseconds) to collect file events before refreshing. See also &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | treemacs-goto-tag-strategy | refetch-index | Indicates how to move to a tag when its buffer is dead. | | treemacs-default-visit-action | treemacs-visit-node-no-split | Default action for opening a node (e.g. file, directory, tag). &lt;del&gt;treemacs-visit-file-default&lt;/del&gt; action in &lt;del&gt;treemacs-*-actions-config&lt;/del&gt; calls this function. | | treemacs-RET-actions-config | Prefers visiting nodes over closing/opening | Alist defining the behaviour of &lt;del&gt;treemacs-RET-action&lt;/del&gt;. | | treemacs-TAB-actions-config | Prefers closing/opening nodes over visiting | Alist defining the behaviour of &lt;del&gt;treemacs-TAB-action&lt;/del&gt;. | | treemacs-doubleclick-actions-config | Closes/opens tags and visits files | Alist defining the behaviour of &lt;del&gt;treemacs-doubleclick-action&lt;/del&gt;. | | treemacs-collapse-dirs | 0 | Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory. | | treemacs-silent-refresh | nil | When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;). | | treemacs-silent-filewatch | nil | When non-nil a refresh due to &lt;del&gt;filewatch-mode&lt;/del&gt; will cause no log message. | | treemacs-is-never-other-window | nil | Prevents treemacs from being selected with &lt;del&gt;other-window&lt;/del&gt;. | | treemacs-position | left | Position of treemacs buffer. Valid values are &lt;del&gt;left&lt;/del&gt;, &lt;del&gt;right&lt;/del&gt;. | | treemacs-tag-follow-delay | 1.5 | Delay in seconds of inactivity for &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; to trigger. | | treemacs-tag-follow-cleanup | t | When non-nil &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; will keep only the current file&#39;s tags visible. | | treemacs-project-follow-cleanup | nil | When non-nil &lt;del&gt;treemacs-follow-mode&lt;/del&gt; will keep only the current project expanded and all others closed. | | treemacs-no-png-images | nil | When non-nil treemacs will use TUI string icons even when running in a GUI. | | treemacs-python-executable | (treemacs--find-python3) | Python 3 binary used by treemacs. | | treemacs-git-executable | &quot;git&quot; | The git binary used by treemacs. | | treemacs-recenter-after-file-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-follow-mode&lt;/del&gt; moves to a new file. | | treemacs-recenter-after-tag-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; moves to a new tag. | | treemacs-recenter-after-project-jump | &#39;always | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when navigating between projects. | | treemacs-recenter-after-project-expand | &#39;on-distance | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when expanding a project node. | | treemacs-recenter-distance | 0.1 | Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;del&gt;recenter&lt;/del&gt; in tag/file-follow-mode. | | treemacs-pulse-on-success | t | When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file. | | treemacs-pulse-on-failure | t | When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file&#39;s tags. | | treemacs-elisp-imenu-expression | [too large to list] | The imenu expression treemacs uses in elisp buffers. | | treemacs-persist-file | ~/.emacs.d/.cache/treemacs-persist | Path to the file treemacs uses to persist its state. | | treemacs-last-error-persist-file | ~/.emacs.d/.cache/treemacs-persist-at-last-error | Path to the file treemacs uses to persist its state. | | treemacs-space-between-root-nodes | t | When non-nil treemacs will separate root nodes with an empty line. | | treemacs-wrap-around | t | When non-nil treemacs will wrap around at the buffer edges when moving between lines. | | treemacs--fringe-indicator-bitmap | [vertical bar] | The fringe bitmap used by the fringe-indicator minor mode. | | treemacs-deferred-git-apply-delay | 0.5 | Seconds of idle time for git highlighting to apply when using the deferred &lt;del&gt;treemacs-git-mode&lt;/del&gt;. | | treemacs-file-follow-delay | 0.2 | Delay in seconds of idle time for treemacs to follow the selected window. | | treemacs-display-in-side-window | t | When non-nil treemacs will use a dedicated [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html][side-window]]. | | treemacs-max-git-entries | 5000 | Maximum number of git status entries treemacs will process. Anything above that number will be ignored. | | treemacs-missing-project-action | ask | When a persisted project is missing from filesystem, &lt;del&gt;ask&lt;/del&gt; will prompt for action, &lt;del&gt;keep&lt;/del&gt; will keep the project in the project list, and &lt;del&gt;remove&lt;/del&gt; will remove it from it without prompt. | | treemacs-show-cursor | nil | When non-nil the cursor will stay visible in the treemacs buffer. | | treemacs-git-command-pipe | &quot;&quot; | Text to be appended to treemacs&#39; git command. Useful for filtering with something like grep. | | treemacs-no-delete-other-windows | t | Prevents the treemacs window from being deleted by commands like &lt;del&gt;delete-other-windows&lt;/del&gt; and &lt;del&gt;magit-status&lt;/del&gt;. | | treemacs-eldoc-display | &#39;simple | Enables eldoc display of the file path at point. Requires &lt;del&gt;eldoc-mode&lt;/del&gt;. | | treemacs-bookmark-title-template | &quot;Treemacs - ${project}: ${label}&quot; | When using &lt;del&gt;bookmark-set&lt;/del&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: &quot;${project}&quot;, &quot;${label}&quot;, &quot;${label:N}&quot;, ${label-path}&quot;, &quot;${label-path:N}&quot;, &quot;${file-path}&quot;, &quot;${file-path:N}&quot;. | | treemacs-file-extension-regex | Text after last period | Determines how treemacs detects a file extension. Can be set to use text after first or last period. | | treemacs-directory-name-transformer | identity | Transformer function that is applied to directory names before rendering for any sort of cosmetic effect. | | treemacs-file-name-transformer | identity | Transformer function that is applied to file names before rendering for any sort of cosmetic effect. | | treemacs-user-mode-line-format | nil | When non-nil treemacs will use it as a mode line format (otherwise format provided by &lt;del&gt;spaceline&lt;/del&gt;, &lt;del&gt;moody-mode-line&lt;/del&gt; and &lt;del&gt;doom-modeline&lt;/del&gt; will be used or, finally, &quot;Treemacs&quot; text will be displayed) | | treemacs-user-header-line-format | nil | When non-nil treemacs will use it as a header line format | | treemacs-move-forward-on-expand | nil | When non-nil treemacs will move to the first child of an expanded node. | | treemacs-workspace-switch-cleanup | nil | Indicates which, if any, buffers should be deleted on a workspace switch. Valid values are &lt;del&gt;nil&lt;/del&gt;, &lt;del&gt;files&lt;/del&gt;, &lt;del&gt;all&lt;/del&gt;. | | treemacs-read-string-input | &#39;from-child-frame | Indicates whether simple string input like project names should be read from a child frame or the minibuffer. | | treemacs-expand-added-projects | t | Indicates whether newly added projects should be expanded. | | treemacs-imenu-scope | &#39;everything | Determines which items treemacs&#39; imenu function will collect. | | treemacs-litter-directories | (&quot;/node_modules&quot; &quot;/.venv&quot; &quot;/.cask&quot;) | List of directories affected by &lt;del&gt;treemacs-cleanup-litter&lt;/del&gt;. | | treemacs-width-is-initially-locked | t | Indicates whether the treemacs windows starts with a locked width or not. | | treemacs-select-when-already-in-treemacs | &#39;move-back | Indicates how &lt;del&gt;treemacs-select-window&lt;/del&gt; behaves when treemacs is already selected. | | treemacs-text-scale | nil | Scaling for text in treemacs, used via &lt;del&gt;text-scale-increase&lt;/del&gt;. | | treemacs-indent-guide-style | line | Appearance option for &lt;del&gt;treemacs-indent-guide&lt;/del&gt;, either a thin line or a thick block. | | treemacs-find-workspace-method | &#39;find-for-file-or-pick-first | Determines how treemacs selects the workspace when it first starts. | | treemacs-header-scroll-indicators | &#39;(nil . &quot;^^^^^^&quot;) | Indicators used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt;. | | treemacs-hide-dot-git-directory | t | Indicates whether &lt;del&gt;.git&lt;/del&gt; directories should always be hidden. | | treemacs-project-follow-into-home | nil | Indicates whether &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; can follow into the $HOME directory. | | treemacs-move-files-by-mouse-dragging | t | When non-nil treemacs will move files by dragging with your mouse inside treemacs. | | treemacs-buffer-name-function | #&#39;treemacs-default-buffer-name | Determines the names of treemacs buffers. | | treemacs-file-follow-ignore-functions | nil | Functions to determine which files shold not be followed. | | treemacs-buffer-name-prefix | &quot; *Treemacs-Buffer-&quot; | Static prefix for all treemacs buffer names. |&lt;/p&gt; 
&lt;p&gt;** Faces Treemacs defines and uses the following faces: | Face | Based on | Description | |----------------------------------------+--------------------------------------------------+------------------------------------------------------------------------------| | treemacs-directory-face | font-lock-function-name-face | Face used for directories. | | treemacs-directory-collapsed-face | treemacs-directory-face | Face used for collapsed part of directories. | | treemacs-file-face | default | Face used for files. | | treemacs-root-face | font-lock-constant-face | Face used for project roots. | | treemacs-root-unreadable-face | treemacs-root-face | Face used for local unreadable project roots. | | treemacs-root-remote-face | font-lock-function-name-face, treemacs-root-face | Face used for readable remote (Tramp) project roots. | | treemacs-root-remote-unreadable-face | treemacs-root-unreadable-face | Face used for unreadable remote (Tramp) project roots. | | treemacs-root-remote-disconnected-face | warning, treemacs-root-face | Face used for disconnected remote (Tramp) project roots. | | treemacs-tags-face | font-lock-builtin-face | Face used for tags. | | treemacs-help-title-face | font-lock-constant-face | Face used for the title of the helpful hydra. | | treemacs-help-column-face | font-lock-keyword-face | Face used for the column headers of the helpful hydra. | | treemacs-git-*-face | various font lock faces | Faces used by treemacs for various git states. | | treemacs-term-node-face | font-lock-string-face | Face for directory node symbols used by treemacs when it runs in a terminal. | | treemacs-on-success-pulse-face | :fg #111111 :bg #669966 | Pulse face used when pulsing on a successful action. | | treemacs-on-failure-puse-face | :fg #111111 :bg #ab3737 | Pulse face used when pulsing on a failed action. | | treemacs-marked-file-face | :fg #f0c674 :bg #ab3737 | Face for files marked for bulk file management. | | treemacs-fringe-indicator-face | cursor | Face for the fringe indicator. | | treemacs-header-button-face | font-lock-keyword-face | Face for header buttons. | | treemacs-git-commit-diff-face | font-lock-comment-face | Face used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt; annotations. | | treemacs-window-background-face | default | Face used for the background of the treemacs window. | | treemacs-hl-line-face | hl-line | Face used for hl-line overlay inside the treemacs buffer. |&lt;/p&gt; 
&lt;p&gt;** Evil compatibility To make treemacs get along with evil-mode you need to install and load &lt;del&gt;treemacs-evil&lt;/del&gt;. It does not define any functions or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt; 
&lt;p&gt;** Customizing Themes and Icons *** Creating and Modifying Themes Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt; 
&lt;p&gt;To create a theme use &lt;del&gt;treemacs-create-theme&lt;/del&gt;. It requires the name of the theme and accepts 3 optional keyword arguments: the directory the theme&#39;s icons are stored in (if it&#39;s using png icons), the name of the theme it&#39;s extending and the config, a final form that&#39;s responsible for creating all the theme&#39;s icons. A config will typically consist of nothing but calls to &lt;del&gt;treemacs-create-icon&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-create-theme &quot;Default&quot; :icon-directory (treemacs-join-path treemacs-dir &quot;icons/default&quot;) :config (progn (treemacs-create-icon :file &quot;root-open.png&quot; :fallback &quot;&quot; :extensions (root-open)) (treemacs-create-icon :file &quot;root-closed.png&quot; :fallback &quot;&quot; :extensions (root-closed)) (treemacs-create-icon :file &quot;emacs.png&quot; :fallback &quot;🗏 &quot; :extensions (&quot;el&quot; &quot;elc&quot;)) (treemacs-create-icon :file &quot;readme.png&quot; :fallback &quot;🗏 &quot; :extensions (&quot;readme.md&quot;)) (treemacs-create-icon :file &quot;src-closed.png&quot; :fallback &quot;📁 &quot; :extensions (&quot;src-closed&quot;)) (treemacs-create-icon :file &quot;src-open.png&quot; :fallback &quot;📂 &quot; :extensions (&quot;src-open&quot;)) (treemacs-create-icon :icon (all-the-icons-icon-for-file &quot;yaml&quot;) :extensions (&quot;yml&quot; &quot;yaml&quot;)))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;The &lt;del&gt;:file&lt;/del&gt; argument is relative to the icon directory of the theme being created. When not using image icons the &lt;del&gt;:icon-directory&lt;/del&gt; argument can be omitted and the &lt;del&gt;:file&lt;/del&gt; argument can be switched for &lt;del&gt;:icon&lt;/del&gt; to supply the icon string directly. The TUI fallback is also optional, &quot; &quot; is used by default. Finally the list of extensions determines which file extensions the icon should be used for.&lt;/p&gt; 
&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless &lt;del&gt;treemacs-file-extension-regex&lt;/del&gt; is customized). This means it can match normal file names like &quot;init.el&quot;, extensionless file names like &quot;Makefile&quot;. Because the full name is checked first it is possible to give special files their own icon, for example &quot;Readme.md&quot; can use a different icon than normal markdown files.&lt;/p&gt; 
&lt;p&gt;Directories can likewise have their own icons. In that case you just need to give the directory&#39;s name and the suffix &quot;-open&quot; or &quot;-closed&quot;, like the &quot;src&quot; directory in the example above.&lt;/p&gt; 
&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon named &lt;del&gt;treemacs-icon-$symbol&lt;/del&gt;. Treemacs uses several such icon variables and any new theme should define their own versions (it&#39;s not extending the default theme). The following icons are used:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;root-open&lt;/li&gt; 
 &lt;li&gt;root-closed&lt;/li&gt; 
 &lt;li&gt;dir-closed&lt;/li&gt; 
 &lt;li&gt;dir-open&lt;/li&gt; 
 &lt;li&gt;fallback&lt;/li&gt; 
 &lt;li&gt;tag-open&lt;/li&gt; 
 &lt;li&gt;tag-closed&lt;/li&gt; 
 &lt;li&gt;tag-leaf&lt;/li&gt; 
 &lt;li&gt;error&lt;/li&gt; 
 &lt;li&gt;info&lt;/li&gt; 
 &lt;li&gt;warning&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Analogous to creating a new theme &lt;del&gt;treemacs-modify-theme&lt;/del&gt; can be used to change, or add to, an existing theme:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-modify-theme &quot;Default&quot; :icon-directory &quot;/other/icons/dir&quot; :config (progn (treemacs-create-icon :icon &quot;+&quot; :extensions (dir-closed)) (treemacs-create-icon :icon &quot;-&quot; :extensions (dir-open)))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;Finally keep in mind that treemacs&#39; icons are all buffer-local values, and will most likely not be defined when trying to access their values directly. When you need to programmatically access some of treemacs&#39; icons you should use &lt;del&gt;treemacs-get-icon-value&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-get-icon-value &#39;root-closed nil &quot;Default&quot;) (treemacs-get-icon-value &quot;org&quot; t) #+END_SRC&lt;/p&gt; 
&lt;p&gt;*** Custom Icons&lt;/p&gt; 
&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring for its name or declaring icon directories:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar treemacs-custom-html-icon (all-the-icons-icon-for-file &quot;name.html&quot;)) (treemacs-define-custom-icon treemacs-custom-html-icon &quot;html&quot; &quot;htm&quot;) #+END_SRC&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: There is a restriction that all icons must must be exactly 2 characters long. That&#39;s including the space that will separate an icon from the filename.&lt;/p&gt; 
&lt;p&gt;If you want to create an icon based on an image you can use &lt;del&gt;treemacs-define-custom-image-icon&lt;/del&gt; instead:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-image-icon &quot;/path/to/icon.png&quot; &quot;htm&quot; &quot;html&quot;) #+END_SRC&lt;/p&gt; 
&lt;p&gt;For icons of directories two icon variants are needed: one for an open and one for a closed directory state. These can be indicated with a simple &lt;del&gt;&quot;-open&quot;&lt;/del&gt; and &lt;del&gt;&quot;-closed&quot;&lt;/del&gt; suffix. For example the following lines will add special icons for directories named &quot;scripts&quot;:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-icon &quot;X &quot; &quot;scripts-closed&quot;) (treemacs-define-custom-icon &quot;Y &quot; &quot;scripts-open&quot;) #+END_SRC&lt;/p&gt; 
&lt;p&gt;**** Icons according to &lt;del&gt;auto-mode-alist&lt;/del&gt; For some file extensions, like &quot;.cc&quot; or &quot;.hh&quot;, it is not immediately obvious which major mode will open these files, and thus which icon they should be assigned. Treemacs offers the option that automate this decision based on &lt;del&gt;auto-mode-alist&lt;/del&gt;. You can use the function &lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; to change the assigned icons for a list of file extensions based on the major mode the icons are mapped to in &lt;del&gt;auto-mode-alist&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; takes 2 arguments: first a list of file extensions, then an alist that decides which icon should be used for which mapped major mode. For example, the code to decide the icons for &quot;.hh&quot; and &quot;.cc&quot; files with &lt;del&gt;auto-mode-alist&lt;/del&gt; would look like this:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-map-icons-with-auto-mode-alist &#39;(&quot;.cc&quot; &quot;.hh&quot;) `((c-mode . ,(treemacs-get-icon-value &quot;c&quot;)) (c++-mode . ,(treemacs-get-icon-value &quot;cpp&quot;)))) #+END_SRC&lt;/p&gt; 
&lt;p&gt;**** GUI vs TUI It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;del&gt;treemacs-no-png-images&lt;/del&gt; to t.&lt;/p&gt; 
&lt;p&gt;**** Resizing Icons If your emacs has been compiled with Imagemagick support, or you&#39;re using Emacs &amp;gt;= 27.1, you can arbitrarily change the size of treemacs&#39; icons by (interactively or programmatically) calling &lt;del&gt;treemacs-resize-icons&lt;/del&gt;. *** all-the-icons indent issues Depending on your font you may experience the problem of treemacs&#39; icons seemingly jumping around left and right when they are expanded and collapsed when using the all-the-icons theme. The straighforward solution is to use a different font. You may also try a workaround of using a different font that applies only to the TAB characters used to align treemacs&#39; all-the-icons-based icons. To do that do not load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; with &lt;del&gt;require&lt;/del&gt;. Instead use the following alternative provided by treemacs itself:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC elisp (treemacs-load-all-the-icons-with-workaround-font &quot;Hermit&quot;) #+END_SRC&lt;/p&gt; 
&lt;p&gt;The Hermit font used here is just an example - you will need to pick a font that is available on your system and does not suffer from the tab width issue.&lt;/p&gt; 
&lt;p&gt;This line will load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; (&lt;em&gt;it must not have been loaded previously&lt;/em&gt;) and enable the all-the-icons theme. The given font argument will be used as the font for the alignment tabs used for the icons, hopefully alleviating the indentation problem. In addition &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; will be set to 1 and a (font-changed) TAB character respectively, so customizing them is (probably) not possible.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keymap ** Unbound functions These functions are not bound to any keys by default. It&#39;s left up to users to find the most convenient key binds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| Action | Description | |------------------------------------------------------+----------------------------------------------------------------------------| | treemacs | Show/Hide/Initialize treemacs. | | treemacs-bookmark | Find a bookmark in treemacs. | | treemacs-find-file | Find and focus the current file in treemacs. | | treemacs-find-tag | Find and focus the current tag in treemacs. | | treemacs-select-window | Select the treemacs window if it is visible. Call &lt;del&gt;treemacs&lt;/del&gt; if it is not. | | treemacs-select-directory | Select a single directory | | treemacs-delete-other-windows | Same as &lt;del&gt;delete-other-windows&lt;/del&gt;, but will not delete the treemacs window. | | treemacs-show-changelog | Opens a buffer showing the changelog. | | treemacs-load-theme | Load a different icon theme. | | treemacs-icon-catalogue | Showcases all themes and their icons. | | treemacs-narrow-to-current-file | Close everything except the view on the current file. | | treemacs-create-workspace-from-project | Create a new workspace containing only the current project. | |------------------------------------------------------+----------------------------------------------------------------------------| | treemacs-projectile | Add a project from projectile to treemacs. | | treemacs-add-and-display-current-project | Add current project to treemacs and open it. | | treemacs-add-and-display-current-project-exclusively | Add current project to treemacs and open it, deleting all others. | | treemacs-select-scope-type | Select the scope of treemacs buffers in which they are unique |&lt;/p&gt; 
&lt;p&gt;** Default keymaps&lt;/p&gt; 
&lt;p&gt;Treemacs&#39; keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt; 
&lt;p&gt;*** Project Keybinds (Prefix &lt;del&gt;C-c C-p&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |-------------------+----------------------------------------+--------------------------------------------------------| | C-c C-p a | treemacs-add-project-to-workspace | Select a new project to add to the treemacs workspace. | | C-c C-p p | treemacs-projectile | Select a projectile project to add to the workspace. | | C-c C-p d | treemacs-remove-project-from-workspace | Remove project at point from the workspace. | | C-c C-p r | treemacs-rename-project | Rename project at point. | | C-c C-p c c | treemacs-collapse-project | Collapse project at point. | | C-c C-p c o/S-TAB | treemacs-collapse-all-projects | Collapse all projects. | | C-c C-p c o | treemacs-collapse-all-projects | Collapse all projects except the project at point. |&lt;/p&gt; 
&lt;p&gt;*** Workspaces Keybinds (Prefix &lt;del&gt;C-c C-w&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |-----------+---------------------------------+----------------------------------------| | C-c C-w r | treemacs-rename-workspace | Rename a workspace. | | C-c C-w a | treemacs-create-workspace | Create a new workspace. | | C-c C-w d | treemacs-remove-workspace | Delete a workspace. | | C-c C-w s | treemacs-switch-workspace | Switch the current workspace. | | C-c C-w e | treemacs-edit-workspaces | Edit workspace layout via org-mode. | | C-c C-w n | treemacs-next-workspace | Switch to the next workspace. | | C-c C-w f | treemacs-set-fallback-workspace | Select the default fallback workspace. |&lt;/p&gt; 
&lt;p&gt;*** Node Visit Keybinds (Prefix &lt;del&gt;o&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |--------+--------------------------------------------------+----------------------------------------------------------------------------------------------------------------| | ov | treemacs-visit-node-vertical-split | Open current file or tag by vertically splitting &lt;del&gt;next-window&lt;/del&gt;. | | oh | treemacs-visit-node-horizontal-split | Open current file or tag by horizontally splitting &lt;del&gt;next-window&lt;/del&gt;. | | oo/RET | treemacs-visit-node-no-split | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly. | | oc | treemacs-visit-node-close-treemacs | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly, and close treemacs. | | oaa | treemacs-visit-node-ace | Open current file or tag, using ace-window to decide which window to open the file in. | | oah | treemacs-visit-node-ace-horizontal-split | Open current file or tag by horizontally splitting a window selected by ace-window. | | oav | treemacs-visit-node-ace-vertical-split | Open current file or tag by vertically splitting a window selected by ace-window. | | or | treemacs-visit-node-in-most-recently-used-window | Open current file or tag in the most recently used window. | | ox | treemacs-visit-node-in-external-application | Open current file according to its mime type in an external application. Linux, Windows and Mac are supported. |&lt;/p&gt; 
&lt;p&gt;*** Toggle Keybinds (Prefix &lt;del&gt;t&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |-----+-------------------------------------+----------------------------------------------------------------------------------------| | th | treemacs-toggle-show-dotfiles | Toggle the hiding and displaying of dotfiles. | | ti | treemacs-hide-gitignored-files-mode | Toggle the hiding and displaying of gitignored files. | | tw | treemacs-toggle-fixed-width | Toggle whether the treemacs window should have a fixed width. See also treemacs-width. | | tf | treemacs-follow-mode | Toggle &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. | | ta | treemacs-filewatch-mode | Toggle &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | tv | treemacs-fringe-indicator-mode | Toggle &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt;. | | td | treemacs-git-commit-diff-mode | Toggle &lt;del&gt;treemacs-git-commit-diff-mode&lt;/del&gt;. |&lt;/p&gt; 
&lt;p&gt;*** Copy Keybinds (Prefix &lt;del&gt;y&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |-----+--------------------------------------+-------------------------------------------------------------------| | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yn | treemacs-copy-filename-at-point | Copy the filename for the node at point. | | yf | treemacs-copy-file | Copy the file at point. |&lt;/p&gt; 
&lt;p&gt;*** General Keybinds&lt;/p&gt; 
&lt;p&gt;| Key | Action | Description | |----------+---------------------------------------------+--------------------------------------------------------------------------------------------------------| | ? | treemacs-common-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; most commonly used keybinds. | | C-? | treemacs-advanced-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; rarely used, advanced keybinds. | | j/n | treemacs-next-line | Go to the next line. | | k/p | treemacs-previous-line | Go to the previous line. | | M-J/N | treemacs-next-line-other-window | Go to the next line in &lt;del&gt;next-window&lt;/del&gt;. | | M-K/P | treemacs-previous-line-other-window | Go to the previous line in &lt;del&gt;next-window&lt;/del&gt;.. | | 
 &lt;pgup&gt;
   | treemacs-next-page-other-window | Go to the next page in 
  &lt;del&gt;next-window&lt;/del&gt;. | | 
  &lt;pgdn&gt;
    | treemacs-previous-page-other-window | Go to the previous page in 
   &lt;del&gt;next-window&lt;/del&gt;.. | | M-j/M-n | treemacs-next-neighbour | Go to the next same-level neighbour of the current node. | | M-k/M-p | treemacs-previous-neighbour | Go to the previous same-level neighbour of the current node. | | u | treemacs-goto-parent-node | Go to parent of node at point, if possible. | | 
   &lt;m-up&gt;
     | treemacs-move-project-up | Switch positions of project at point and the one above it. | | 
    &lt;m-down&gt;
      | treemacs-move-project-down | Switch positions of project at point and the one below it. | | w | treemacs-set-width | Set a new value for the width of the treemacs window. | | &amp;lt; | treemacs-decrement-width | Decrease the width of the treemacs window. | | &amp;gt; | treemacs-increment-width | Increase the width of the treemacs window. | | RET | treemacs-RET-action | Run the action defined in 
     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | TAB | treemacs-TAB-action | Run the action defined in 
     &lt;del&gt;treemacs-TAB-actions-config&lt;/del&gt; for the current node. | | g/r/gr | treemacs-refresh | Refresh the project at point. | | d | treemacs-delete-file | Delete node at point. | | R | treemacs-rename-file | Rename node at point. | | cf | treemacs-create-file | Create a file. | | cd | treemacs-create-dir | Create a directory. | | q | treemacs-quit | Hide the treemacs window. | | Q | treemacs-kill-buffer | Delete the treemacs buffer. | | P | treemacs-peek-mode | Peek at the files at point without fully opening them. | | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. | | m | treemacs-move-file | Move the file at point. | | s | treemacs-resort | Set a new value for 
     &lt;del&gt;treemacs-sorting&lt;/del&gt;. | | b | treemacs-add-bookmark | Bookmark the currently selected files&#39;s, dir&#39;s or tag&#39;s location. | | h/M-h | treemacs-COLLAPSE-action | Run the action defined in 
     &lt;del&gt;treemacs-COLLAPSE-actions-config&lt;/del&gt; for the current node. | | l/M-l | treemacs-RET-action | Run the action defined in 
     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | M-H | treemacs-root-up | Move treemacs&#39; root one level upward. Only works with a single project in the workspace. | | M-L | treemacs-root-down | Move treemacs&#39; root into the directory at point. Only works with a single project in the workspace. | | H | treemacs-collapse-parent-node | Collapse the parent of the node at point. | | ! | treemacs-run-shell-command-for-current-node | Run an asynchronous shell command on the current node, replacing &quot;$path&quot; with its path. | | M-! | treemacs-run-shell-command-in-project-root | Run an asynchronous shell command in the root of the current project, replacing &quot;$path&quot; with its path. | | C | treemacs-cleanup-litter | Close all directories matching any of 
     &lt;del&gt;treemacs-litter-directories&lt;/del&gt;. | | = | treemacs-fit-window-width | Adjust the width of the treemacs window to that of the longsest line. | | W | treemacs-extra-wide-toggle | Toggle between normal and extra wide display for the treemacs window. |
    &lt;/m-down&gt;
   &lt;/m-up&gt;
  &lt;/pgdn&gt;
 &lt;/pgup&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compatibility The correctness of treemacs&#39; display behaviour is, to a large degree, ensured through window properties and reacting to changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that interfere with Emacs&#39; buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in Spacemacs, namely [[https://github.com/Bad-ptr/persp-mode.el][persp]]/[[https://github.com/nex3/perspective-el][perspective]], [[https://github.com/wasamasa/eyebrowse][eyebrowse]], [[https://github.com/m2ym/popwin-el][popwin]] and [[https://github.com/bmag/emacs-purpose][window-purpose]], as well as [[https://github.com/wasamasa/shackle][shackle]]. For everything else there may be issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Any package invoking &lt;del&gt;font-lock-ensure&lt;/del&gt; in the treemacs buffer. This will reset the faces of treemacs&#39; buttons (once) and is a known [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599][emacs bug]].&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A possible cause of this issue using an old version of swiper.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as part of &lt;del&gt;special-mode-hook&lt;/del&gt;, since this is the mode &lt;del&gt;treemacs-mode&lt;/del&gt; is derived from.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FAQ&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;I don&#39;t need multiple projects, can treemacs just always show me the current project I&#39;m in?&lt;/p&gt; &lt;p&gt;Yes, see the section about [[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspace]].&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How do I hide files I don&#39;t want to see?&lt;/p&gt; &lt;p&gt;You need to define a predicate function and add it to &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt;. This function accepts two arguments, a file&#39;s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt; &lt;p&gt;For example, the code to ignore files either called &quot;foo&quot; or located in &quot;/x/y/z/&quot; would look like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs&lt;/p&gt; &lt;pre&gt;&lt;code&gt; (defun treemacs-ignore-example (filename absolute-path)
   (or (string-equal filename &quot;foo&quot;)
       (string-prefix-p &quot;/x/y/z/&quot; absolute-path)))

 (add-to-list &#39;treemacs-ignored-file-predicates #&#39;treemacs-ignore-example))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How do I keep treemacs from showing files that are ignored by git?&lt;/p&gt; &lt;p&gt;You can use &lt;del&gt;treemacs-hide-gitignored-files-mode&lt;/del&gt; (bound to &lt;del&gt;ti&lt;/del&gt;) to switch between hiding and displaying of gitignored files. Git-mode /must/ be enabled for this feature to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why am I seeing no file icons and only +/- for directories?&lt;/p&gt; &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot create images. You can test this by evaluating &lt;del&gt;(create-image &quot;&quot; &#39;png)&lt;/del&gt;. If this code returns an error like &quot;Invalid image type ´png´&quot; your emacs does not support images.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How do I get treemacs to stop telling me when it&#39;s been refreshed, especially with filewatch-mode?&lt;/p&gt; &lt;p&gt;See &lt;del&gt;treemacs-silent-refresh&lt;/del&gt; and &lt;del&gt;treemacs-silent-filewatch&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ENOSPC / No space left on device / no file descriptor left&lt;/p&gt; &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user watches, as described [[https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc][here for Linux]] and [[https://wilsonmar.github.io/maximum-limits/][here for Mac]].&lt;/p&gt; &lt;p&gt;You will also want to see what&#39;s responsible for setting all those file watches in the first place, since treemacs only watches the expanded directories it is displaying and so won&#39;t produce more than a couple dozen watches at best.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?&lt;/p&gt; &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png images&#39; backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time hl-line&#39;s overlay is moved. To make that correction work it needs to know two colors: the current theme&#39;s &lt;del&gt;default&lt;/del&gt; background, and its &lt;del&gt;hl-line&lt;/del&gt; background color. If treemacs cannot find hl-lines&#39;s background color it falls back to the default background color. If it cannot even find the default background it will fall back to #2d2d31. The warnings serve to inform you of that fallback.&lt;/p&gt; &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-face-attribute &#39;hl-line nil :background &quot;#333333&quot;) #+END_SRC&lt;/p&gt; &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;del&gt;treemacs-no-load-time-warnings&lt;/del&gt;. Its exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is first being loaded the variable must be defined &lt;em&gt;before&lt;/em&gt; treemacs is initialized. This is best achieved by adding the line &lt;del&gt;(defvar treemacs-no-load-time-warnings t)&lt;/del&gt; to treemacs&#39; use-package &lt;del&gt;:init&lt;/del&gt; block.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Can I expand &lt;em&gt;everything&lt;/em&gt; under a node?&lt;/p&gt; &lt;p&gt;Yes, you just need to expand it with a [[https://www.emacswiki.org/emacs/PrefixArgument][prefix argument]]. Closing nodes with a prefix argument works as well. In this case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Broken display of CJK characters&lt;/p&gt; &lt;p&gt;If you are seeing raw bytes like &lt;del&gt;\316&lt;/del&gt; instead of proper CJK characters like [[https://github.com/Alexander-Miller/treemacs/issues/863][in this issue]] you have to set the proper language environment, e.g.:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-language-environment &#39;Chinese-GB18030) #+END_SRC&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributing Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of guidelines that should be met (exceptions confirm the rule):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;There should be one commit per feature.&lt;/li&gt; 
 &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for example &lt;del&gt;[Icons]&lt;/del&gt; if you add an icon.&lt;/li&gt; 
 &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt; 
 &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the [[#variables][Config Table]]).&lt;/li&gt; 
 &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt; 
 &lt;li&gt;The test suite must pass.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the codebase. First run &lt;del&gt;cask install&lt;/del&gt; to locally pull treemacs&#39; dependencies. Then you can use the following Makefile targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;make prepare :: Downloads and updates Cask&#39;s dependencies. Is a dependency of the &lt;del&gt;test&lt;/del&gt; and &lt;del&gt;compile&lt;/del&gt; targets.&lt;/li&gt; 
 &lt;li&gt;make compile :: Compiles the code base (and treats compiler warnings as errors).&lt;/li&gt; 
 &lt;li&gt;make clean :: Removes the generated .elc files.&lt;/li&gt; 
 &lt;li&gt;make lint :: Runs first &lt;del&gt;compile&lt;/del&gt; then &lt;del&gt;clean&lt;/del&gt;, even if the former fails.&lt;/li&gt; 
 &lt;li&gt;make test :: Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Finally if you want to just add an icon you can take [[https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be][this commit]] as an example (though the icons have since been moved into their own module in &lt;del&gt;treemacs-icons.el&lt;/del&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Working With The Code Base&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to delve into the treemacs&#39; code base, check out [[https://github.com/Alexander-Miller/treemacs/wiki][the wiki]] for some general pointers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;emacs &amp;gt;= 26.1 (&amp;gt;= 27.1 for tab-bar)&lt;/li&gt; 
 &lt;li&gt;s&lt;/li&gt; 
 &lt;li&gt;dash&lt;/li&gt; 
 &lt;li&gt;cl-lib&lt;/li&gt; 
 &lt;li&gt;ace-window&lt;/li&gt; 
 &lt;li&gt;pfuture&lt;/li&gt; 
 &lt;li&gt;ht&lt;/li&gt; 
 &lt;li&gt;cfrs&lt;/li&gt; 
 &lt;li&gt;hydra&lt;/li&gt; 
 &lt;li&gt;(optionally) evil&lt;/li&gt; 
 &lt;li&gt;(optionally) projectile&lt;/li&gt; 
 &lt;li&gt;(optionally) winum&lt;/li&gt; 
 &lt;li&gt;(optionally) magit&lt;/li&gt; 
 &lt;li&gt;(optionally) perspective/persp&lt;/li&gt; 
 &lt;li&gt;(optionally) all-the-icons&lt;/li&gt; 
 &lt;li&gt;(optionally) python(3)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>emacs-mirror/emacs</title>
      <link>https://github.com/emacs-mirror/emacs</link>
      <description>&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2025 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; 
&lt;p&gt;This directory tree holds version 31.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; 
&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; 
&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; 
&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; 
&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; 
&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&quot;mailto:bug-gnu-emacs@gnu.org&quot;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; 
&lt;p&gt;See the &quot;Bugs&quot; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&quot;https://savannah.gnu.org/mail/?group=emacs&quot;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&quot;https://lists.gnu.org/&quot;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; 
&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; 
&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; 
&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; 
&lt;p&gt;There are several subdirectories:&lt;/p&gt; 
&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script. &#39;java&#39; holds the Java code for the Emacs port to Android. &#39;cross&#39; holds Makefiles and an additional copy of gnulib used to build Emacs for Android devices. &#39;exec&#39; holds the source code to several helper executables used to run user-installed programs on Android.&lt;/p&gt; 
&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; 
&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; 
&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; 
&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seagle0128/doom-modeline</title>
      <link>https://github.com/seagle0128/doom-modeline</link>
      <description>&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;doom-modeline&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/seagle0128/doom-modeline/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/seagle0128/doom-modeline/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/release&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/tag/seagle0128/doom-modeline.svg?label=Release&quot; alt=&quot;Release Tag&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/License&quot;&gt;&lt;img src=&quot;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/doom-modeline&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/doom-modeline-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/doom-modeline&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/doom-modeline-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#feature&quot;&gt;Feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#install&quot;&gt;Install&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#manual&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#use-package&quot;&gt;Use-package&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#customize&quot;&gt;Customize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#donate&quot;&gt;Donate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt; 
&lt;p&gt;It&#39;s integrated into &lt;a href=&quot;https://github.com/seagle0128/.emacs.d&quot;&gt;Centaur Emacs&lt;/a&gt;, &lt;a href=&quot;https://github.com/hlissner/doom-emacs&quot;&gt;Doom Emacs&lt;/a&gt; and &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot;&gt;Spacemacs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;doom-modeline&lt;/code&gt; was designed for minimalism, and offers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A match count panel (for &lt;code&gt;anzu&lt;/code&gt;, &lt;code&gt;visual-replace&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;symbol-overlay&lt;/code&gt;, and &lt;code&gt;evil-search&lt;/code&gt;, etc.)&lt;/li&gt; 
 &lt;li&gt;An indicator for recording a macro&lt;/li&gt; 
 &lt;li&gt;Current environment version (e.g. &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) in the major-mode&lt;/li&gt; 
 &lt;li&gt;A customizable mode-line height (see &lt;code&gt;doom-modeline-height&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A minor modes segment which is compatible with &lt;code&gt;minions&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An error/warning count segment for &lt;code&gt;flymake&lt;/code&gt;/&lt;code&gt;flycheck&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A workspace number/name segment for &lt;code&gt;eyebrowse&lt;/code&gt; or &lt;code&gt;tab-bar-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A perspective name segment for &lt;code&gt;persp-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A window number segment for &lt;code&gt;ace-window&lt;/code&gt;, &lt;code&gt;winum&lt;/code&gt; and &lt;code&gt;window-numbering&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for modal editing state, including &lt;code&gt;evil&lt;/code&gt;, &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;god&lt;/code&gt;, &lt;code&gt;ryo&lt;/code&gt; and &lt;code&gt;xah-fly-keys&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;An indicator for &lt;code&gt;battery&lt;/code&gt; status&lt;/li&gt; 
 &lt;li&gt;An indicator for current input method&lt;/li&gt; 
 &lt;li&gt;An indicator for debug state&lt;/li&gt; 
 &lt;li&gt;An indicator for remote host&lt;/li&gt; 
 &lt;li&gt;An indicator for Kubernetes state with &lt;a href=&quot;https://github.com/jinnovation/kele.el&quot;&gt;&lt;code&gt;kele.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for LSP state with &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for GitHub notifications&lt;/li&gt; 
 &lt;li&gt;An indicator for unread emails with &lt;code&gt;mu4e-alert&lt;/code&gt; and &lt;code&gt;gnus&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for IRC notifications with &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;rcirc&lt;/code&gt; or &lt;code&gt;erc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for buffer position which is compatible with &lt;code&gt;nyan-mode&lt;/code&gt; or &lt;code&gt;poke-line&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for party &lt;code&gt;parrot&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for PDF page number with &lt;code&gt;pdf-tools&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for markdown/org preview with &lt;code&gt;grip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Truncated file name, file icon, buffer state and project name in buffer information segment, which is compatible with &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;find-file-in-project&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;Info-mode&lt;/code&gt; buffers&lt;/li&gt; 
 &lt;li&gt;New package mode-line for &lt;code&gt;paradox&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;helm&lt;/code&gt; buffers&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;git-timemachine&lt;/code&gt; buffers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694177-10dcd280-fbc0-11e8-8d21-971ede6afdb5.png&quot; alt=&quot;modeline&quot; title=&quot;Mode-line&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png&quot; alt=&quot;search_replace&quot; title=&quot;Search and Replace&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/162925065-0ffe40fd-1efd-469b-bf09-c62fe2d22fd2.png&quot; alt=&quot;evil_search&quot; title=&quot;Evil Search&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694199-cc056b80-fbc0-11e8-9bb1-533b1e64da66.png&quot; alt=&quot;macro&quot; title=&quot;Macro&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/51301117-0805d900-1a69-11e9-957d-b4c7a70a1cf8.png&quot; alt=&quot;no_icons&quot; title=&quot;No Icons&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50414928-3c63ec00-0853-11e9-9b26-6a1df278d332.png&quot; alt=&quot;color_icon_cpp&quot; title=&quot;Color C++ icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50415081-1428bd00-0854-11e9-9ae5-91805290c524.png&quot; alt=&quot;color_icon_java&quot; title=&quot;Color Java icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50415381-9f568280-0855-11e9-9478-34a6dd614d96.png&quot; alt=&quot;color_icon_elisp&quot; title=&quot;Color Elisp icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/68990534-332aa600-088f-11ea-920f-20c9527a6466.png&quot; alt=&quot;evil_normal_state_icon&quot; title=&quot;Evil Normal State icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/68990540-4dfd1a80-088f-11ea-8e53-ab77af4c58c2.png&quot; alt=&quot;evil_insert_state_icon&quot; title=&quot;Evil Insert State icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694476-b8103880-fbc5-11e8-9c18-91f5e9258333.png&quot; alt=&quot;evil_normal_state&quot; title=&quot;Evil Normal State&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694461-8b5c2100-fbc5-11e8-993e-d97baa9f01af.png&quot; alt=&quot;evil_insert_state&quot; title=&quot;Evil Insert State&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53592864-c751c180-3bc9-11e9-9914-493007c013d5.png&quot; alt=&quot;lsp_version&quot; title=&quot;Perspective, LSP, Version, VCS and Flycheck&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694481-e0983280-fbc5-11e8-8cb2-c8d2e782bcdb.png&quot; alt=&quot;perspective&quot; title=&quot;Perspective, LSP, Version and VCS&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53592683-64602a80-3bc9-11e9-8054-91f79aa930b9.png&quot; alt=&quot;notifications&quot; title=&quot;Notifications&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50301291-de857c00-04c1-11e9-84c5-bfbc8de8295f.png&quot; alt=&quot;minions&quot; title=&quot;Minions and minor modes&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50302008-c57dca80-04c3-11e9-8578-50154ef4f9f0.png&quot; alt=&quot;debug&quot; title=&quot;Debug state&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/51301061-da209480-1a68-11e9-9f64-905d889df9d6.png&quot; alt=&quot;nyan_parrot&quot; title=&quot;Nyan and Parrot&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/69004814-20c67000-0954-11ea-8489-f5a527a80574.png&quot; alt=&quot;irc&quot; title=&quot;IRC Notifications&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53593622-ba35d200-3bcb-11e9-85b3-38d64d05c127.png&quot; alt=&quot;battery&quot; title=&quot;Battery&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57503916-e769d380-7324-11e9-906d-44c79f7408a3.png&quot; alt=&quot;package&quot; title=&quot;Package&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57506248-d96c8080-732d-11e9-8167-644c8fc4e0db.png&quot; alt=&quot;info&quot; title=&quot;Info&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57506112-6531dd00-732d-11e9-8a5e-22166f42dd4c.png&quot; alt=&quot;helm&quot; title=&quot;Helm&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;From melpa, &lt;code&gt;M-x package-install RET doom-modeline RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;init.el&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(require &#39;doom-modeline)
(doom-modeline-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;after-init-hook #&#39;doom-modeline-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Use-package&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This package is able to display icons if &lt;code&gt;nerd-icons&lt;/code&gt; package and required fonts are installed. Run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the necessary fonts. Please refer to the &lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el#installing-fonts&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Strongly recommend to use &lt;a href=&quot;https://github.com/hlissner/emacs-doom-themes&quot;&gt;doom-themes&lt;/a&gt; at the same time.&lt;/p&gt; 
&lt;h2&gt;Customize&lt;/h2&gt; 
&lt;p&gt;Run &lt;code&gt;M-x customize-group RET doom-modeline RET&lt;/code&gt; or set the variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; If non-nil, cause imenu to see `doom-modeline&#39; declarations.
;; This is done by adjusting `lisp-imenu-generic-expression&#39; to
;; include support for finding `doom-modeline-def-*&#39; forms.
;; Must be set before loading doom-modeline.
(setq doom-modeline-support-imenu t)

;; How tall the mode-line should be. It&#39;s only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It&#39;s only respected in GUI.
(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It&#39;s only respected in GUI.
(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width&#39; is smaller than the limit, some information won&#39;t be
;; displayed. It can be an integer or a float number. `nil&#39; means no limit.&quot;
(setq doom-modeline-window-width-limit 85)

;; Override attributes of the face used for padding.
;; If the space character is very thin in the modeline, for example if a
;; variable pitch font is used there, then segments may appear unusually close.
;; To use the space character from the `fixed-pitch&#39; font family instead, set
;; this variable to `(list :family (face-attribute &#39;fixed-pitch :family))&#39;.
(setq doom-modeline-spc-face-overrides nil)

;; How to detect the project root.
;; nil means to use `default-directory&#39;.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile&#39; doesn&#39;t handle symlink folders well, while `project&#39; is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection &#39;auto)

;; Determines the style used by `doom-modeline-buffer-file-name&#39;.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto =&amp;gt; emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project =&amp;gt; ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project =&amp;gt; ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project =&amp;gt; emacs/l/comint.el
;;   truncate-except-project =&amp;gt; ~/P/F/emacs/l/comint.el
;;   truncate-upto-root =&amp;gt; ~/P/F/e/lisp/comint.el
;;   truncate-all =&amp;gt; ~/P/F/e/l/comint.el
;;   truncate-nil =&amp;gt; ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project =&amp;gt; emacs/lisp/comint.el
;;   relative-to-project =&amp;gt; lisp/comint.el
;;   file-name =&amp;gt; comint.el
;;   file-name-with-project =&amp;gt; FOSS|comint.el
;;   buffer-name =&amp;gt; comint.el&amp;lt;2&amp;gt; (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name&#39; style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style &#39;auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode&#39;. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode&#39;.
;; It respects `nerd-icons-color-icons&#39;.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-buffer-state-icon&#39;.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the lsp icon. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-lsp-icon t)

;; Whether display the time icon. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-time-icon t)

;; Whether display the live icons of time.
;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-time-icon&#39;.
(setq doom-modeline-time-live-icon t)

;; Whether to use an analogue clock svg as the live time icon.
;; It respects options `doom-modeline-icon&#39;, `doom-modeline-time-icon&#39;, and `doom-modeline-time-live-icon&#39;.
(setq doom-modeline-time-analogue-clock t)

;; The scaling factor used when drawing the analogue clock.
(setq doom-modeline-time-clock-size 0.7)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)

;; Whether highlight the modified buffer name.
(setq doom-modeline-highlight-modified-buffer-name t)

;; When non-nil, mode line displays column numbers zero-based.
;; See `column-number-indicator-zero-based&#39;.
(setq doom-modeline-column-zero-based t)

;; Specification of \&quot;percentage offset\&quot; of window through buffer.
;; See `mode-line-percent-position&#39;.
(setq doom-modeline-percent-position &#39;(-3 &quot;%p&quot;))

;; Format used to display line numbers in the mode line.
;; See `mode-line-position-line-format&#39;.
(setq doom-modeline-position-line-format &#39;(&quot;L%l&quot;))

;; Format used to display column numbers in the mode line.
;; See `mode-line-position-column-format&#39;.
(setq doom-modeline-position-column-format &#39;(&quot;C%c&quot;))

;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format&#39;.
(setq doom-modeline-position-column-line-format &#39;(&quot;%l:%c&quot;))

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count&#39;.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count&#39; or
;; remove the modes from `doom-modeline-continuous-word-count-modes&#39;.
(setq doom-modeline-continuous-word-count-modes &#39;(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
(setq doom-modeline-indent-info nil)

;; Whether display the total line number。
(setq doom-modeline-total-line-number nil)

;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon&#39;.&quot;
(setq doom-modeline-vcs-icon t)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 15)

;; The function to display the branch name.
(setq doom-modeline-vcs-display-function #&#39;doom-modeline-vcs-name)

;; Alist mapping VCS states to their corresponding faces.
;; See `vc-state&#39; for possible values of the state.
;; For states not explicitly listed, the `doom-modeline-vcs-default&#39; face is used.
(setq doom-modeline-vcs-state-faces-alist
      &#39;((needs-update . (doom-modeline-warning bold))
        (removed . (doom-modeline-urgent bold))
        (conflict . (doom-modeline-urgent bold))
        (unregistered . (doom-modeline-urgent bold))))

;; Whether display the icon of check segment. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-check-icon t)

;; If non-nil, only display one number for check information if applicable.
(setq doom-modeline-check-simple-format nil)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; Whether display the project name. Non-nil to display in the mode-line.
(setq doom-modeline-project-name t)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp&#39; state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub&#39; package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state.
;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.
(setq doom-modeline-modal t)

;; Whether display the modal state icon.
;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.
(setq doom-modeline-modal-icon t)

;; Whether display the modern icons for modals.
(setq doom-modeline-modal-modern-icon t)

;; When non-nil, always show the register name when recording an evil macro.
(setq doom-modeline-always-show-macro-register nil)

;; Whether display the mu4e notifications. It requires `mu4e-alert&#39; package.
(setq doom-modeline-mu4e nil)
;; also enable the start of mu4e-alert
(mu4e-alert-enable-mode-line-display)

;; Whether display the gnus notifications.
(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
(setq doom-modeline-gnus-excluded-groups &#39;(&quot;dummy.group&quot;))

;; Whether display the IRC notifications. It requires `circe&#39; or `erc&#39; package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize &#39;identity)

;; Whether display the battery status. It respects `display-battery-mode&#39;.
(setq doom-modeline-battery t)

;; Whether display the time. It respects `display-time-mode&#39;.
(setq doom-modeline-time t)

;; Whether display the misc segment on all mode lines.
;; If nil, display only if the mode line is active.
(setq doom-modeline-display-misc-in-all-mode-lines t)

;; The function to handle `buffer-file-name&#39;.
(setq doom-modeline-buffer-file-name-function #&#39;identity)

;; The function to handle `buffer-file-truename&#39;.
(setq doom-modeline-buffer-file-truename-function #&#39;identity)

;; Whether display the environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable &quot;python&quot;) ; or `python-shell-interpreter&#39;
(setq doom-modeline-env-ruby-executable &quot;ruby&quot;)
(setq doom-modeline-env-perl-executable &quot;perl&quot;)
(setq doom-modeline-env-go-executable &quot;go&quot;)
(setq doom-modeline-env-elixir-executable &quot;iex&quot;)
(setq doom-modeline-env-rust-executable &quot;rustc&quot;)

;; What to display as the version while a new one is being loaded
(setq doom-modeline-env-load-string &quot;...&quot;)

;; By default, almost all segments are displayed only in the active window. To
;; display such segments in all windows, specify e.g.
(setq doom-modeline-always-visible-segments &#39;(mu4e irc))

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;How to display icons correctly?&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el&quot;&gt;nerd-icons&lt;/a&gt; are necessary. Then run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;nerd-icons&lt;/code&gt; supports both GUI and TUI.&lt;/p&gt; &lt;p&gt;If you don&#39;t like color icons, &lt;code&gt;(setq nerd-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el&quot;&gt;nerd-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If you prefer &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el&quot;&gt;all-the-icons&lt;/a&gt;, please use release &lt;code&gt;3.4.0&lt;/code&gt;. It hasn&#39;t been supported since &lt;code&gt;4.0.0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I am experiencing the laggy issue, how to resolve it?&lt;/p&gt; &lt;p&gt;Add this configuration into your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A ridiculous path is displayed on the mode-line while visiting a symbolink.&lt;/p&gt; &lt;p&gt;It&#39;s the default behaviors of Vanilla Emacs. If you want to display the real names, please put this into your init file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq find-file-visit-truename t)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the file is controlled by vc, refer to the documentation of &lt;code&gt;vc-follow-symlinks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why doesn&#39;t change of branch reflect in modeline?&lt;/p&gt; &lt;p&gt;Actually it&#39;s related to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;vc-mode&lt;/code&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Workaround: 
    &lt;ul&gt; 
     &lt;li&gt;Revert the buffers manually.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;(setq auto-revert-check-vc-info t)&lt;/code&gt; brings the performance issue.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Refer to: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html&quot;&gt;The mode-line information isn’t always up-to-date&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/magit/magit/issues/2687&quot;&gt;Maybe provide an alternative to VC&#39;s mode-line information&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Can I add my mode-line segments myself? How to do that? How can I define my own mode-line?&lt;/p&gt; &lt;p&gt;There are two methods.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;If the information is simple, just add to &lt;code&gt;mode-line-misc-info&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;doom-modeline-def-modeline&lt;/code&gt; to define your own mode-line and set it as default.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Define your custom doom-modeline
(doom-modeline-def-modeline &#39;my-simple-line
  &#39;(bar matches buffer-info remote-host buffer-position parrot selection-info)
  &#39;(misc-info minor-modes input-method buffer-encoding major-mode process vcs check))

;; Set default mode-line
(add-hook &#39;doom-modeline-mode-hook
          (lambda ()
            (doom-modeline-set-modeline &#39;my-simple-line &#39;default)))

;; Configure other mode-lines based on major modes
(add-to-list &#39;doom-modeline-mode-alist &#39;(my-mode . my-simple-line))

;; Or disable other mode-lines
(setq &#39;doom-modeline-mode-alist nil)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to specify font family and size in modeline?&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq doom-modeline-height 1) ; optional
(if (facep &#39;mode-line-active)
    (set-face-attribute &#39;mode-line-active nil :family &quot;Noto Sans&quot; :height 100) ; For 29+
  (set-face-attribute &#39;mode-line nil :family &quot;Noto Sans&quot; :height 100))
(set-face-attribute &#39;mode-line-inactive nil :family &quot;Noto Sans&quot; :height 100)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq doom-modeline-height 1) ; optional
(custom-set-faces
  &#39;(mode-line ((t (:family &quot;Noto Sans&quot; :height 0.9))))
  &#39;(mode-line-active ((t (:family &quot;Noto Sans&quot; :height 0.9)))) ; For 29+
  &#39;(mode-line-inactive ((t (:family &quot;Noto Sans&quot; :height 0.9)))))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/189&quot;&gt;#189&lt;/a&gt; and &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/301&quot;&gt;#301&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The right side of the modeline is cut off. How to fix it?&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tweak &lt;code&gt;nerd-icons-scale-factor&lt;/code&gt;. e.g. &lt;code&gt;(setq nerd-icons-scale-factor 1.1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Use another font family or size. See above.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to disable symbolic links expanding in mode-line?&lt;/p&gt; &lt;p&gt;If you encounter the issue like this&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9449246/62822565-c3f93380-bb74-11e9-95f6-f9c24a6cbd14.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; &lt;p&gt;please try this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; built-in `project&#39; on 26+
(setq doom-modeline-project-detection &#39;project)
;; or `find-in-project&#39; if it&#39;s installed
(setq doom-modeline-project-detection &#39;ffip)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more details, refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/209&quot;&gt;#209&lt;/a&gt; and &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/224&quot;&gt;#224&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Is &lt;code&gt;doom-modeline&lt;/code&gt; able to show match count while search with &lt;code&gt;evil-search&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Yes. For better experience, should enable &lt;code&gt;anzu-mode&lt;/code&gt; and load &lt;code&gt;evil-anzu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to show that the R is running in inferior ess R mode?&lt;/p&gt; &lt;p&gt;The ess R mode modifies &lt;code&gt;mode-line-buffer-identification&lt;/code&gt; directly to display the status. To display the status in &lt;code&gt;doom-modeline&lt;/code&gt;, you can add the status to &lt;code&gt;mode-line-process&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt; as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;inferior-ess-mode-hook
      (lambda ()
        (add-to-list &#39;mode-line-process &#39;(:eval (nth ess--busy-count ess-busy-strings)))))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display company mode-line information?&lt;/p&gt; &lt;p&gt;Enable &lt;code&gt;doom-modeline-minor-modes&lt;/code&gt; or &lt;code&gt;(add-to-list &#39;global-mode-string company-lighter)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display LaTeX compilation information in the mode line?&lt;/p&gt; &lt;p&gt;Use &lt;a href=&quot;https://github.com/haji-ali/procress&quot;&gt;process&lt;/a&gt; package. Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/387&quot;&gt;#387&lt;/a&gt; for more details.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(require &#39;procress)
(procress-load-default-svg-images)
(add-hook &#39;LaTeX-mode-hook #&#39;procress-auctex-mode)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to prevent mode-line aligning with fill column in &lt;code&gt;visual-fill-column-mode&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;(setq mode-line-right-align-edge &#39;right-fringe)&lt;/code&gt;. Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/672&quot;&gt;#672&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display match counts in &lt;code&gt;visual-replace&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;It respects &lt;code&gt;visual-replace-display-total&lt;/code&gt;, so you should use &lt;code&gt;(setq visual-replace-display-total t)&lt;/code&gt; to display.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why am I unable to get the GitHub notifications even thogh I enable &lt;code&gt;doom-modeline-github&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;The functionality requires the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;ghub&lt;/code&gt; packages, and make sure the token has permission to access the Github repositories.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you think it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&quot; alt=&quot;Alipay&quot; width=&quot;120&quot; /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&quot; alt=&quot;Wechat Pay&quot; width=&quot;120&quot; /&gt;&lt;/p&gt; 
&lt;a href=&quot;https://paypal.me/seagle0128&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&quot; alt=&quot;PayPal&quot; width=&quot;120&quot; /&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.buymeacoffee.com/s9giES1&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; width=&quot;160&quot; /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>akermu/emacs-libvterm</title>
      <link>https://github.com/akermu/emacs-libvterm</link>
      <description>&lt;p&gt;Emacs libvterm integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/vterm&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/vterm-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Emacs-libvterm (&lt;em&gt;vterm&lt;/em&gt;) is fully-fledged terminal emulator inside GNU Emacs based on &lt;a href=&quot;https://github.com/neovim/libvterm&quot;&gt;libvterm&lt;/a&gt;, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.&lt;/p&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;This package is in active development and, while being stable enough to be used as a daily-driver, it is currently in &lt;strong&gt;alpha&lt;/strong&gt; stage. This means that occasionally the public interface will change (for example names of options or functions). A list of recent breaking changes is in &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#breaking-changes&quot;&gt;appendix&lt;/a&gt;. Moreover, emacs-libvterm deals directly with some low-level operations, hence, bugs can lead to segmentation faults and crashes. If that happens, please &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/new&quot;&gt;report the problem&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Given that eshell, shell, and (ansi-)term are Emacs built-in, why should I use vterm?&lt;/h2&gt; 
&lt;p&gt;The short answer is: unparalleled performance and compatibility with standard command-line tools.&lt;/p&gt; 
&lt;p&gt;For the long answer, let us discuss the differences between &lt;code&gt;eshell&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;vterm&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;eshell&lt;/code&gt;: it is a shell completely implemented in Emacs Lisp. It is well-integrated in Emacs and it runs on Windows. It does not support command line tools that require terminal manipulation capabilities (e.g., &lt;code&gt;ncdu&lt;/code&gt;, &lt;code&gt;nmtui&lt;/code&gt;, ...).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shell&lt;/code&gt;: it interfaces with a standard shell (e.g., &lt;code&gt;bash&lt;/code&gt;). It reads an input from Emacs, sends it to the shell, and reports back the output from the shell. As such, like &lt;code&gt;eshell&lt;/code&gt;, it does not support interactive commands, especially those that directly handle how the output should be displayed (e.g., &lt;code&gt;htop&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;term&lt;/code&gt;: it is a terminal emulator written in elisp. &lt;code&gt;term&lt;/code&gt; runs a shell (similarly to other terminal emulators like Gnome Terminal) and programs can directly manipulate the output using escape codes. Hence, many interactive applications (like the one aforementioned) work with &lt;code&gt;term&lt;/code&gt;. However, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;ansi-term&lt;/code&gt; do not implement all the escapes codes needed, so some programs do not work properly. Moreover, &lt;code&gt;term&lt;/code&gt; has inferior performance compared to standalone terminals, especially with large bursts of output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm&lt;/code&gt;: like &lt;code&gt;term&lt;/code&gt; it is a terminal emulator. Unlike &lt;code&gt;term&lt;/code&gt;, the core of &lt;code&gt;vterm&lt;/code&gt; is an external library written in C, &lt;code&gt;libvterm&lt;/code&gt;. For this reason, &lt;code&gt;vterm&lt;/code&gt; outperforms &lt;code&gt;term&lt;/code&gt; and has a nearly universal compatibility with terminal applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Vterm is not for you &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/12&quot;&gt;if you are using Windows&lt;/a&gt;, or if you cannot set up Emacs with support for modules. Otherwise, you should try vterm, as it provides a superior terminal experience in Emacs.&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; is like using Gnome Terminal inside Emacs: Vterm is fully-featured and fast, but is not as well integrated in Emacs as &lt;code&gt;eshell&lt;/code&gt; (yet), so some of the editing keybinding you are used to using may not work. For example, &lt;code&gt;evil-mode&lt;/code&gt; is currently not supported (though, users can enable VI emulation in their shells). This is because keys are sent directly to the shell. We are constantly working to improve this.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Before installing emacs-libvterm, you need to make sure you have installed&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;GNU Emacs (&amp;gt;= 25.1) with &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html&quot;&gt;module support&lt;/a&gt;. You can check that, by verifying that &lt;code&gt;module-file-suffix&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;cmake (&amp;gt;= 3.11)&lt;/li&gt; 
 &lt;li&gt;libtool-bin (related issues: &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/66&quot;&gt;#66&lt;/a&gt; &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/85#issuecomment-491845136&quot;&gt;#85&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;OPTIONAL: &lt;a href=&quot;https://github.com/Sbozzolo/libvterm-mirror.git&quot;&gt;libvterm&lt;/a&gt; (&amp;gt;= 0.2). This library can be found in the official repositories of most distributions (e.g., Arch, Debian, Fedora, Gentoo, openSUSE, Ubuntu). Typical names are &lt;code&gt;libvterm&lt;/code&gt; (Arch, Fedora, Gentoo, openSUSE), or &lt;code&gt;libvterm-dev&lt;/code&gt; (Debian, Ubuntu). If not available, &lt;code&gt;libvterm&lt;/code&gt; will be downloaded during the compilation process. Some distributions (e.g. Ubuntu &amp;lt; 20.04, Debian &amp;lt; 11) have versions of &lt;code&gt;libvterm&lt;/code&gt; that are too old. If you find compilation errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;, you should not use your system libvterm. See &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&quot;&gt;FAQ&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;From MELPA&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; is available on &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt;, and it can be installed as a normal package. If the requirements are satisfied (mainly, Emacs was built with support for modules), &lt;code&gt;vterm&lt;/code&gt; will compile the module the first time it is run. This is the recommended way to install &lt;code&gt;vterm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can be install from MELPA with &lt;code&gt;use-package&lt;/code&gt; by adding the following lines to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package vterm
    :ensure t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To take full advantage of the capabilities of &lt;code&gt;vterm&lt;/code&gt;, you should configure your shell too. Read about this in the section &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&quot;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;p&gt;Clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/akermu/emacs-libvterm.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, vterm will try to find if libvterm is installed. If it is not found, emacs-libvterm will download the latest version available of libvterm (from &lt;a href=&quot;https://github.com/neovim/libvterm&quot;&gt;here&lt;/a&gt;), compile it, and use it. If you always want to use the vendored version as opposed to the one on you system, set &lt;code&gt;USE_SYSTEM_LIBVTERM&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt;. To do this, change &lt;code&gt;cmake ..&lt;/code&gt; with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt; in the following instructions.&lt;/p&gt; 
&lt;p&gt;Build the module with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd emacs-libvterm
mkdir -p build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;path/to/emacs-libvterm&quot;)
(require &#39;vterm)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(use-package vterm
  :load-path  &quot;path/to/emacs-libvterm/&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;vterm and Ubuntu&lt;/h2&gt; 
&lt;h3&gt;20.04&lt;/h3&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu requires additional steps. The latest LTS version (20.04) ships without CMake installed and Emacs27 is not yet available from Ubuntu&#39;s package repository.&lt;/p&gt; 
&lt;p&gt;The basic steps for getting vterm to work on Ubuntu 20.04 are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure Emacs27 is installed&lt;/li&gt; 
 &lt;li&gt;Install cmake, libtool, and libtool-bin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a few options for installing Emacs27 on Ubuntu 20.04:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compile Emacs27 from source&lt;/li&gt; 
 &lt;li&gt;Install Emacs27 from Snap&lt;/li&gt; 
 &lt;li&gt;Install Emacs27 from Kevin Kelley&#39;s PPA&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In any case, if you have an older Emacs version you will need to purge it before proceeding:&lt;/p&gt; 
&lt;h4&gt;Purge Emacs&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt --purge remove emacs
sudo apt autoremove
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing Emacs27 from Kevin Kelley PPA&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo add-apt-repository ppa:kelleyk/emacs
sudo apt install emacs27
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;If you get an error about emacs27_common during the install process:&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Errors were encountered while processing:
 /tmp/apt-dpkg-install-RVK8CA/064-emacs27-common_27.1~1.git86d8d76aa3-kk2+20.04_all.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;run&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt --purge remove emacs-common
sudo apt --fix-broken install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing Emacs27 from Snap&lt;/h4&gt; 
&lt;p&gt;I hesitate to include SNAP here, because I ran into a number of GTK Theme parsing errors, and Fontconfig errors when I tested it, and reverted to installing from Kevin Kelley&#39;s PPA. YMMV&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo snap install emacs --classic
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Install CMake and Libtool&lt;/h4&gt; 
&lt;p&gt;In Ubuntu 20.04 CMake (v3.16.3-1ubuntu1) and Libtool can be installed with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install cmake
sudo apt install libtool
sudo apt install libtool-bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;18.04&lt;/h3&gt; 
&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu 18.04 requires additional steps. 18.04 ships with a version of CMake that is too old for &lt;code&gt;vterm&lt;/code&gt; and GNU Emacs is not compiled with support for dynamical module loading.&lt;/p&gt; 
&lt;p&gt;It is possible to install GNU Emacs with module support from Kevin Kelley&#39;s PPA. The binary in Ubuntu Emacs Lisp PPA is currently broken and leads to segmentation faults (see &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/185#issuecomment-562237077&quot;&gt;#185&lt;/a&gt;). In case Emacs is already on the system, you need to purge it before proceeding with the following commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo add-apt-repository ppa:kelleyk/emacs
sudo apt update
sudo apt-get install emacs26
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A way to install a recent version of CMake (&amp;gt;= 3.11) is with linuxbrew.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install cmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In some cases, &lt;code&gt;/bin/sh&lt;/code&gt; needs to be relinked to &lt;code&gt;/bin/bash&lt;/code&gt; for the compilation to work (see, &lt;a href=&quot;https://github.com/akermu/emacs-libvterm/issues/216#issuecomment-575934593&quot;&gt;#216&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Pull requests to improve support for Ubuntu are welcome (e.g., simplifying the installation).&lt;/p&gt; 
&lt;p&gt;Some releases of Ubuntu (e.g., 18.04) ship with a old version of libvterm that can lead to compilation errors. If you have this problem, see the &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&quot;&gt;FAQ&lt;/a&gt; for a solution.&lt;/p&gt; 
&lt;h2&gt;GNU Guix&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; and its dependencies are available in GNU Guix as &lt;a href=&quot;https://guix.gnu.org/packages/emacs-vterm-0-1.7d7381f/&quot;&gt;emacs-vterm&lt;/a&gt;. The package can be installed with &lt;code&gt;guix package -i emacs-vterm&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Shell-side configuration&lt;/h2&gt; 
&lt;p&gt;Some of the most useful features in &lt;code&gt;vterm&lt;/code&gt; (e.g., &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#directory-tracking-and-prompt-tracking&quot;&gt;directory-tracking and prompt-tracking&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#message-passing&quot;&gt;message passing&lt;/a&gt;) require shell-side configurations. The main goal of these additional functions is to enable the shell to send information to &lt;code&gt;vterm&lt;/code&gt; via properly escaped sequences. A function that helps in this task, &lt;code&gt;vterm_printf&lt;/code&gt;, is defined below. This function is widely used throughout this readme.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_printf() {
    if [ -n &quot;$TMUX&quot; ] \
        &amp;amp;&amp;amp; { [ &quot;${TERM%%-*}&quot; = &quot;tmux&quot; ] \
            || [ &quot;${TERM%%-*}&quot; = &quot;screen&quot; ]; }; then
        # Tell tmux to pass the escape sequences through
        printf &quot;\ePtmux;\e\e]%s\007\e\\&quot; &quot;$1&quot;
    elif [ &quot;${TERM%%-*}&quot; = &quot;screen&quot; ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf &quot;\eP\e]%s\007\e\\&quot; &quot;$1&quot;
    else
        printf &quot;\e]%s\e\\&quot; &quot;$1&quot;
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This works also for &lt;code&gt;dash&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt; put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_printf;
    if begin; [  -n &quot;$TMUX&quot; ]  ; and  string match -q -r &quot;screen|tmux&quot; &quot;$TERM&quot;; end
        # tell tmux to pass the escape sequences through
        printf &quot;\ePtmux;\e\e]%s\007\e\\&quot; &quot;$argv&quot;
    else if string match -q -- &quot;screen*&quot; &quot;$TERM&quot;
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf &quot;\eP\e]%s\007\e\\&quot; &quot;$argv&quot;
    else
        printf &quot;\e]%s\e\\&quot; &quot;$argv&quot;
    end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Debugging and testing&lt;/h1&gt; 
&lt;p&gt;If you have successfully built the module, you can test it by executing the following command in the &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;vterm&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Open a terminal in the current window.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-other-window&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Open a terminal in another window.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-mode&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When you enable &lt;code&gt;vterm-copy-mode&lt;/code&gt;, the terminal buffer behaves like a normal &lt;code&gt;read-only&lt;/code&gt; text buffer: you can search, copy text, etc. The default keybinding to toggle &lt;code&gt;vterm-copy-mode&lt;/code&gt; is &lt;code&gt;C-c C-t&lt;/code&gt;. When a region is selected, it is possible to copy the text and leave &lt;code&gt;vterm-copy-mode&lt;/code&gt; with the enter key.&lt;/p&gt; 
&lt;p&gt;If no region is selected when the enter key is pressed it will copy the current line from start to end. If &lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt; is true it will skip the prompt and not include it in the copy.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; does exactly what the name suggests: it clears the current buffer from the data that it is not currently visible. &lt;code&gt;vterm-clear-scrollback&lt;/code&gt; is bound to &lt;code&gt;C-c C-l&lt;/code&gt;. This function is typically used with the &lt;code&gt;clear&lt;/code&gt; function provided by the shell to clear both screen and scrollback. In order to achieve this behavior, you need to add a new shell alias.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;if [[ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]]; then
    alias clear=&#39;vterm_printf &quot;51;Evterm-clear-scrollback&quot;;tput clear&#39;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]; then
    clear() {
        vterm_printf &quot;51;Evterm-clear-scrollback&quot;;
        tput clear;
    }
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;if [ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]
    function clear
        vterm_printf &quot;51;Evterm-clear-scrollback&quot;;
        tput clear;
    end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These aliases take advantage of the fact that &lt;code&gt;vterm&lt;/code&gt; can execute &lt;code&gt;elisp&lt;/code&gt; commands, as explained below.&lt;/p&gt; 
&lt;p&gt;If it possible to automatically clear the scrollback when the screen is cleared by setting the variable &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt;: When &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt; is non nil, &lt;code&gt;C-l&lt;/code&gt; clears both the screen and the scrollback. When is nil, &lt;code&gt;C-l&lt;/code&gt; only clears the screen. The opposite behavior can be achieved by using the universal prefix (i.e., calling &lt;code&gt;C-u C-l&lt;/code&gt;).&lt;/p&gt; 
&lt;h1&gt;Customization&lt;/h1&gt; 
&lt;h2&gt;&lt;code&gt;vterm-shell&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Shell to run in a new vterm. It defaults to &lt;code&gt;$SHELL&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-environment&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;to add more environment variables there is the custom vterm-environment which has a similar format than the internal Emacs variable process-environment. You can check the documentation with C-h v process-environment for more details.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-term-environment-variable&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Value for the &lt;code&gt;TERM&lt;/code&gt; environment variable. It defaults to &lt;code&gt;xterm-256color&lt;/code&gt;. If &lt;a href=&quot;https://github.com/dieggsy/eterm-256color&quot;&gt;eterm-256color&lt;/a&gt; is installed, setting &lt;code&gt;vterm-term-environment-variable&lt;/code&gt; to &lt;code&gt;eterm-color&lt;/code&gt; improves the rendering of colors in some systems.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;If set to &lt;code&gt;t&lt;/code&gt;, buffers are killed when the associated process is terminated (for example, by logging out the shell). Keeping buffers around it is useful if you need to copy or manipulate the content.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-module-cmake-args&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Compilation flags and arguments to be given to CMake when compiling the module. This string is directly passed to CMake, so it uses the same syntax. At the moment, it main use is for compiling vterm using the system libvterm instead of the one downloaded from GitHub. You can find all the arguments and flags available with &lt;code&gt;cmake -LA&lt;/code&gt; in the build directory.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Controls whether or not to exclude the prompt when copying a line in &lt;code&gt;vterm-copy-mode&lt;/code&gt;. Using the universal prefix before calling &lt;code&gt;vterm-copy-mode-done&lt;/code&gt; will invert the value for that call, allowing you to temporarily override the setting. When a prompt is not found, the whole line is copied.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The variable &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt; determines whether to use the vterm prompt tracking, if false it use the regexp in &lt;code&gt;vterm-copy-prompt-regexp&lt;/code&gt; to search for the prompt.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-enable-manipulate-selection-data-by-osc52&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Vterm support copy text to Emacs kill ring and system clipboard by using OSC 52. See &lt;a href=&quot;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&quot;&gt;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&lt;/a&gt; for more info about OSC 52. For example: send &#39;blabla&#39; to kill ring: printf &quot;\033]52;c;$(printf &quot;%s&quot; &quot;blabla&quot; | base64)\a&quot;&lt;/p&gt; 
&lt;p&gt;tmux can share its copy buffer to terminals by supporting osc52(like iterm2 xterm), you can enable this feature for tmux by : set -g set-clipboard on #osc 52 copy paste share with iterm set -ga terminal-overrides &#39;,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39; set -ga terminal-overrides &#39;,screen*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39;&lt;/p&gt; 
&lt;p&gt;The clipboard querying/clearing functionality offered by OSC 52 is not implemented here, And for security reason, this feature is disabled by default.&quot;&lt;/p&gt; 
&lt;p&gt;This feature need the new way of handling strings with a struct &lt;code&gt;VTermStringFragment&lt;/code&gt; in libvterm. You&#39;d better compile emacs-libvterm with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt;. If you don&#39;t do that, when the content you want to copied is too long, it would be truncated by bug of libvterm.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-buffer-name-string&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is not nil, vterm renames automatically its own buffers with &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. This string can contain the character &lt;code&gt;%s&lt;/code&gt;, which is substituted with the &lt;em&gt;title&lt;/em&gt; (as defined by the shell, see below). A possible value for &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is &lt;code&gt;vterm %s&lt;/code&gt;, according to which all the vterm buffers will be named &quot;vterm TITLE&quot;.&lt;/p&gt; 
&lt;p&gt;This requires some shell-side configuration to print the title. For example to set the name &quot;HOSTNAME:PWD&quot;, use can you the following:&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ print -Pn &quot;\e]2;%m:%2~\a&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;PROMPT_COMMAND=&quot;${PROMPT_COMMAND:+$PROMPT_COMMAND; }&quot;&#39;echo -ne &quot;\033]0;${HOSTNAME}:${PWD}\007&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function fish_title
    hostname
    echo &quot;:&quot;
    prompt_pwd
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;http://tldp.org/HOWTO/Xterm-Title-4.html&quot;&gt;zsh and bash&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#programmable-title&quot;&gt;fish documentations&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-always-compile-module&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Vterm needs &lt;code&gt;vterm-module&lt;/code&gt; to work. This can be compiled externally, or &lt;code&gt;vterm&lt;/code&gt; will ask the user whether to build the module when &lt;code&gt;vterm&lt;/code&gt; is first called. To avoid this question and always compile the module, set &lt;code&gt;vterm-always-compile-module&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-copy-mode-remove-fake-newlines&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;When not-nil fake newlines are removed on entering copy mode. vterm inserts fake-newlines purely for rendering. When using &lt;code&gt;vterm-copy-mode&lt;/code&gt; these are in conflict with many emacs functions like isearch-forward. if this varialbe is not-nil the fake-newlines are removed on entering copy-mode and re-inserted on leaving copy mode. Also truncate-lines is set to t on entering copy-mode and set to nil on leaving.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;vterm-tramp-shells&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The shell that gets run in the vterm for tramp.&lt;/p&gt; 
&lt;p&gt;This has to be a list of pairs of the format: &lt;code&gt;(TRAMP-METHOD SHELL)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;TRAMP-METHOD&lt;/code&gt; is a method string as used by tramp (e.g., &lt;code&gt;&quot;ssh&quot;&lt;/code&gt;). Use t as &lt;code&gt;TRAMP-METHOD&lt;/code&gt; to specify a default shell for all methods. Specific methods always take precedence over &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Set SHELL to &lt;code&gt;&#39;login-shell&lt;/code&gt; to use the user&#39;s login shell on the remote host. The login-shell detection currently works for POSIX-compliant remote hosts that have the &lt;code&gt;getent&lt;/code&gt; command (regular GNU/Linux distros, *BSDs, but not MacOS X unfortunately). You can specify an additional second &lt;code&gt;SHELL&lt;/code&gt; command as a fallback that is used when the login-shell detection fails, e.g., &lt;code&gt;&#39;((&quot;ssh&quot; login-shell &quot;/bin/bash&quot;) ...)&lt;/code&gt; If no second &lt;code&gt;SHELL&lt;/code&gt; command is specified with &lt;code&gt;&#39;login-shell&lt;/code&gt;, vterm will fall back to tramp&#39;s shell.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usee the default login shell for all methods, except for docker. &lt;code&gt;&#39;((t login-shell) (&quot;docker&quot; &quot;/bin/sh&quot;))&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Use the default login shell for ssh and scp, fall back to &quot;/bin/bash&quot;. Use tramp&#39;s default shell for all other methods. &lt;code&gt;&#39;((&quot;ssh&quot; login-shell &quot;/bin/bash&quot;) (&quot;scp&quot; login-shell &quot;/bin/bash&quot;))&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Keybindings&lt;/h2&gt; 
&lt;p&gt;If you want a key to be sent to the terminal, bind it to &lt;code&gt;vterm--self-insert&lt;/code&gt;, or remove it from &lt;code&gt;vterm-mode-map&lt;/code&gt;. By default, &lt;code&gt;vterm.el&lt;/code&gt; binds most of the &lt;code&gt;C-&amp;lt;char&amp;gt;&lt;/code&gt; and &lt;code&gt;M-&amp;lt;char&amp;gt;&lt;/code&gt; keys, &lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;f12&amp;gt;&lt;/code&gt; and some special keys like &lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;. Sending a keyboard interrupt is bound to &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to send a keypress that is already recognized by Emacs, such as &lt;code&gt;C-g&lt;/code&gt;, use the interactive function &lt;code&gt;vterm-send-next-key&lt;/code&gt;. This can be bound to a key in the &lt;code&gt;vterm-mode-map&lt;/code&gt; like &lt;code&gt;C-q&lt;/code&gt;, in which case pressing &lt;code&gt;C-q C-g&lt;/code&gt; will send a &lt;code&gt;C-g&lt;/code&gt; key to the terminal, and so on for other modified keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key vterm-mode-map (kbd &quot;C-q&quot;) #&#39;vterm-send-next-key)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be useful for controlling an application running in the terminal, such as Emacs or Nano.&lt;/p&gt; 
&lt;h2&gt;Fonts&lt;/h2&gt; 
&lt;p&gt;You can change the font (the &lt;em&gt;face&lt;/em&gt;) used in a vterm with the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;vterm-mode-hook
          (lambda ()
            (set (make-local-variable &#39;buffer-face-mode-face) &#39;fixed-pitch)
                 (buffer-face-mode t)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where instead of &lt;code&gt;&#39;fixed-pitch&lt;/code&gt; you specify the face you want to use. The example reported here can be used to force vterm to use a mono-spaced font (the &lt;code&gt;fixed-pitch&lt;/code&gt; face). This is useful when your default font in Emacs is a proportional font.&lt;/p&gt; 
&lt;p&gt;In addition to that, you can disable some text properties (bold, underline, reverse video) setting the relative option to &lt;code&gt;t&lt;/code&gt; (&lt;code&gt;vterm-disable-bold&lt;/code&gt;, &lt;code&gt;vterm-disable-underline&lt;/code&gt;, or &lt;code&gt;vterm-disable-inverse-video&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;You can use another font for vterm buffer&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;vterm-mode-hook
          (lambda ()
               (set (make-local-variable &#39;buffer-face-mode-face) &#39;(:family &quot;IosevkaTerm Nerd Font&quot;))
               (buffer-face-mode t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Blink cursor&lt;/h2&gt; 
&lt;p&gt;When &lt;code&gt;vterm-ignore-blink-cursor&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, vterm will ignore request from application to turn on or off cursor blink.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt;, cursor in any window may begin to blink or not blink because &lt;code&gt;blink-cursor-mode&lt;/code&gt; is a global minor mode in Emacs, you can use &lt;code&gt;M-x blink-cursor-mode&lt;/code&gt; to toggle.&lt;/p&gt; 
&lt;h2&gt;Colors&lt;/h2&gt; 
&lt;p&gt;Customize the following faces to your liking. It is possible to specify different colors for foreground and background via the &lt;code&gt;:foreground&lt;/code&gt; and &lt;code&gt;:background&lt;/code&gt; attributes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vterm-color-black&lt;/li&gt; 
 &lt;li&gt;vterm-color-red&lt;/li&gt; 
 &lt;li&gt;vterm-color-green&lt;/li&gt; 
 &lt;li&gt;vterm-color-yellow&lt;/li&gt; 
 &lt;li&gt;vterm-color-blue&lt;/li&gt; 
 &lt;li&gt;vterm-color-magenta&lt;/li&gt; 
 &lt;li&gt;vterm-color-cyan&lt;/li&gt; 
 &lt;li&gt;vterm-color-white&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-black&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-red&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-green&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-yellow&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-blue&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-magenta&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-cyan&lt;/li&gt; 
 &lt;li&gt;vterm-color-bright-white&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Directory tracking and Prompt tracking&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;directory tracking&lt;/em&gt;. If this feature is enabled, the default directory in Emacs and the current working directory in &lt;code&gt;vterm&lt;/code&gt; are synced. As a result, interactive functions that ask for a path or a file (e.g., &lt;code&gt;dired&lt;/code&gt; or &lt;code&gt;find-file&lt;/code&gt;) will do so starting from the current location.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;prompt tracking&lt;/em&gt;. If this feature is enabled, Emacs knows where the prompt ends, you needn&#39;t customize &lt;code&gt;term-prompt-regexp&lt;/code&gt; any more. Then you can use &lt;code&gt;vterm-next-prompt&lt;/code&gt; and &lt;code&gt;vterm-previous-prompt&lt;/code&gt; moving to end of next/previous prompt. The default keybinding is &lt;code&gt;C-c C-n&lt;/code&gt; and &lt;code&gt;C-c C-p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm-beginning-of-line&lt;/code&gt; would move the point to the first character after the shell prompt on this line. If the point is already there, move to the beginning of the line. The default keybinding is &lt;code&gt;C-a&lt;/code&gt; in &lt;code&gt;vterm-copy-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;And &lt;code&gt;vterm--at-prompt-p&lt;/code&gt; would check whether the cursor is at the point just after the shell prompt.&lt;/p&gt; 
&lt;p&gt;Directory tracking and Prompt tracking requires some configuration, as the shell has to be instructed to share the relevant information with Emacs. The following pieces of code assume that you have the function &lt;code&gt;vterm_printf&lt;/code&gt; as defined in section &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&quot;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this at the end of your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;vterm_prompt_end() {
    vterm_printf &quot;51;A$(whoami)@$(hostname):$(pwd)&quot;
}
setopt PROMPT_SUBST
PROMPT=$PROMPT&#39;%{$(vterm_prompt_end)%}&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this at the end of your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vterm_prompt_end(){
    vterm_printf &quot;51;A$(whoami)@$(hostname):$(pwd)&quot;
}
PS1=$PS1&#39;\[$(vterm_prompt_end)\]&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_prompt_end;
    vterm_printf &#39;51;A&#39;(whoami)&#39;@&#39;(hostname)&#39;:&#39;(pwd)
end
functions --copy fish_prompt vterm_old_fish_prompt
function fish_prompt --description &#39;Write out the prompt; do not replace this. Instead, put this at end of your file.&#39;
    # Remove the trailing newline from the original prompt. This is done
    # using the string builtin from fish, but to make sure any escape codes
    # are correctly interpreted, use %b for printf.
    printf &quot;%b&quot; (string join &quot;\n&quot; (vterm_old_fish_prompt))
    vterm_prompt_end
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we are using the function &lt;code&gt;vterm_printf&lt;/code&gt; that we have discussed above, so make sure that this function is defined in your configuration file.&lt;/p&gt; 
&lt;p&gt;Directory tracking works on remote servers too. In case the hostname of your remote machine does not match the actual hostname needed to connect to that server, change &lt;code&gt;$(hostname)&lt;/code&gt; with the correct one. For example, if the correct hostname is &lt;code&gt;foo&lt;/code&gt; and the username is &lt;code&gt;bar&lt;/code&gt;, you should have something like&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;HOSTNAME=foo
USER=baz
vterm_printf &quot;51;A$USER@$HOSTNAME:$(pwd)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Message passing&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can read and execute commands. At the moment, a command is passed by providing a specific escape sequence. For example, to evaluate&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(message &quot;Hello!&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;printf &quot;\e]51;Emessage \&quot;Hello\!\&quot;\e\\&quot;
# or
vterm_printf &quot;51;Emessage \&quot;Hello\!\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The commands that are understood are defined in the setting &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As &lt;code&gt;split-string-and-unquote&lt;/code&gt; is used the parse the passed string, double quotes and backslashes need to be escaped via backslash. A convenient shell function to automate the substitution is&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_cmd() {
    local vterm_elisp
    vterm_elisp=&quot;&quot;
    while [ $# -gt 0 ]; do
        vterm_elisp=&quot;$vterm_elisp&quot;&quot;$(printf &#39;&quot;%s&quot; &#39; &quot;$(printf &quot;%s&quot; &quot;$1&quot; | sed -e &#39;s|\\|\\\\|g&#39; -e &#39;s|&quot;|\\&quot;|g&#39;)&quot;)&quot;
        shift
    done
    vterm_printf &quot;51;E$vterm_elisp&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function vterm_cmd --description &#39;Run an Emacs command among the ones been defined in vterm-eval-cmds.&#39;
    set -l vterm_elisp ()
    for arg in $argv
        set -a vterm_elisp (printf &#39;&quot;%s&quot; &#39; (string replace -a -r &#39;([\\\\&quot;])&#39; &#39;\\\\\\\\$1&#39; $arg))
    end
    vterm_printf &#39;51;E&#39;(string join &#39;&#39; $vterm_elisp)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we can write shell functions to call the ones defined in &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;find_file() {
    vterm_cmd find-file &quot;$(realpath &quot;${@:-.}&quot;)&quot;
}

say() {
    vterm_cmd message &quot;%s&quot; &quot;$*&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or for &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function find_file
    set -q argv[1]; or set argv[1] &quot;.&quot;
    vterm_cmd find-file (realpath &quot;$argv&quot;)
end

function say
    vterm_cmd message &quot;%s&quot; &quot;$argv&quot;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This newly defined &lt;code&gt;find_file&lt;/code&gt; function can now be used inside &lt;code&gt;vterm&lt;/code&gt; as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;find_file name_of_file_in_local_directory
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you call &lt;code&gt;find_file&lt;/code&gt; without specifying any file (you just execute &lt;code&gt;find_file&lt;/code&gt; in your shell), &lt;code&gt;dired&lt;/code&gt; will open with the current directory.&lt;/p&gt; 
&lt;p&gt;As an example, say you like having files opened below the current window. You could add the command to do it on the lisp side like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(push (list &quot;find-file-below&quot;
            (lambda (path)
              (if-let* ((buf (find-file-noselect path))
                        (window (display-buffer-below-selected buf nil)))
                  (select-window window)
                (message &quot;Failed to open file: %s&quot; path))))
      vterm-eval-cmds)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add the command in your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;open_file_below() {
    vterm_cmd find-file-below &quot;$(realpath &quot;${@:-.}&quot;)&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can open any file from inside your shell.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;open_file_below ~/Documents
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Shell-side configuration files&lt;/h2&gt; 
&lt;p&gt;The configurations described in earlier sections are combined in &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/etc/&quot;&gt;&lt;code&gt;etc/&lt;/code&gt;&lt;/a&gt;. These can be appended to or loaded into your user configuration file. Alternatively, they can be installed system-wide, for example in &lt;code&gt;/etc/bash/bashrc.d/&lt;/code&gt;, &lt;code&gt;/etc/profile.d/&lt;/code&gt; (for &lt;code&gt;zsh&lt;/code&gt;), or &lt;code&gt;/etc/fish/conf.d/&lt;/code&gt; for &lt;code&gt;fish&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When using vterm Emacs sets the environment variable INSIDE_EMACS in the subshell to ‘vterm’. Usually the programs check this variable to determine whether they are running inside Emacs.&lt;/p&gt; 
&lt;p&gt;Vterm also sets an extra variable EMACS_VTERM_PATH to the place where the vterm library is installed. This is very useful because when vterm is installed from melpa the Shell-side configuration files are in the EMACS_VTERM_PATH inside the /etc sub-directory. After a package update, the directory name changes, so, a code like this in your bashrc could be enough to load always the latest version of the file from the right location without coping any file manually.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;if [[ &quot;$INSIDE_EMACS&quot; = &#39;vterm&#39; ]] \
    &amp;amp;&amp;amp; [[ -n ${EMACS_VTERM_PATH} ]] \
    &amp;amp;&amp;amp; [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions and Problems&lt;/h2&gt; 
&lt;h3&gt;How can I increase the size of the scrollback?&lt;/h3&gt; 
&lt;p&gt;By default, the scrollback can contain up to 1000 lines per each vterm buffer. You can increase this up to 100000 by changing the variable &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. If you want to increase it further, you have to edit the file &lt;code&gt;vterm-module.h&lt;/code&gt;, change the variable &lt;code&gt;SB_MAX&lt;/code&gt;, and set the new value for &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. The potential maximum memory consumption of vterm buffers increases with &lt;code&gt;vterm-max-scrollback&lt;/code&gt;, so setting &lt;code&gt;SB_MAX&lt;/code&gt; to extreme values may lead to system instabilities and crashes.&lt;/p&gt; 
&lt;h3&gt;How can I automatically close vterm buffers when the process is terminated?&lt;/h3&gt; 
&lt;p&gt;There is an option for that: set &lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;The package does not compile, I have errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;.&lt;/h3&gt; 
&lt;p&gt;The version of &lt;code&gt;libvterm&lt;/code&gt; installed on your system is too old. You should let &lt;code&gt;emacs-libvterm&lt;/code&gt; download &lt;code&gt;libvterm&lt;/code&gt; for you. You can either uninstall your libvterm, or instruct Emacs to ignore the system libvterm. If you are compiling from Emacs, you can do this by setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq vterm-module-cmake-args &quot;-DUSE_SYSTEM_LIBVTERM=no&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and compile again. If you are compiling with CMake, use the flag &lt;code&gt;-DUSE_SYSTEM_LIBVTERM=no&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;&amp;lt;C-backspace&amp;gt;&lt;/code&gt; doesn&#39;t kill previous word.&lt;/h3&gt; 
&lt;p&gt;This can be fixed by rebinding the key to what &lt;code&gt;C-w&lt;/code&gt; does:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(define-key vterm-mode-map (kbd &quot;&amp;lt;C-backspace&amp;gt;&quot;)
    (lambda () (interactive) (vterm-send-key (kbd &quot;C-w&quot;))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt; doesn&#39;t work.&lt;/h3&gt; 
&lt;p&gt;Add this piece of code to your configuration file to make &lt;code&gt;counsel&lt;/code&gt; use the correct function to yank in vterm buffers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun vterm-counsel-yank-pop-action (orig-fun &amp;amp;rest args)
  (if (equal major-mode &#39;vterm-mode)
      (let ((inhibit-read-only t)
            (yank-undo-function (lambda (_start _end) (vterm-undo))))
        (cl-letf (((symbol-function &#39;insert-for-yank)
               (lambda (str) (vterm-send-string str t))))
            (apply orig-fun args)))
    (apply orig-fun args)))

(advice-add &#39;counsel-yank-pop-action :around #&#39;vterm-counsel-yank-pop-action)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How can I get the local directory without shell-side configuration?&lt;/h3&gt; 
&lt;p&gt;We recommend that you set up shell-side configuration for reliable directory tracking. If you cannot do it, a possible workaround is the following.&lt;/p&gt; 
&lt;p&gt;On most GNU/Linux systems, you can read current directory from &lt;code&gt;/proc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun vterm-directory-sync ()
  &quot;Synchronize current working directory.&quot;
  (interactive)
  (when vterm--process
    (let* ((pid (process-id vterm--process))
           (dir (file-truename (format &quot;/proc/%d/cwd/&quot; pid))))
      (setq default-directory dir))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A possible application of this function is in combination with &lt;code&gt;find-file&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(advice-add #&#39;find-file :before #&#39;vterm-directory-sync)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method does not work on remote machines.&lt;/p&gt; 
&lt;h3&gt;How can I get the directory tracking in a more understandable way?&lt;/h3&gt; 
&lt;p&gt;If you looked at the recommended way to set-up directory tracking, you will have noticed that it requires printing obscure code like &lt;code&gt;\e]2;%m:%2~\a&lt;/code&gt; (unless you are using &lt;code&gt;fish&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;There is another way to achieve this behavior. Define a shell function, on a local host you can simply use&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_set_directory() {
    vterm_cmd update-pwd &quot;$PWD/&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On a remote one, use instead&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;vterm_set_directory() {
    vterm_cmd update-pwd &quot;/-:&quot;&quot;$USER&quot;&quot;@&quot;&quot;$HOSTNAME&quot;&quot;:&quot;&quot;$PWD/&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, for &lt;code&gt;zsh&lt;/code&gt;, add this function to the &lt;code&gt;chpwd&lt;/code&gt; hook:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ vterm_set_directory }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, append it to the prompt:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;PROMPT_COMMAND=&quot;${PROMPT_COMMAND:+$PROMPT_COMMAND; }vterm_set_directory&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, add &lt;code&gt;update-pwd&lt;/code&gt; to the list of commands that Emacs is allowed to execute from vterm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;vterm-eval-cmds &#39;(&quot;update-pwd&quot; (lambda (path) (setq default-directory path))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;When evil-mode is enabled, the cursor moves back in normal state, and this messes directory tracking&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; provides a solution for this problem. If you do not want to use &lt;code&gt;evil-collection&lt;/code&gt;, you can add the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun evil-collection-vterm-escape-stay ()
&quot;Go back to normal state but don&#39;t move
cursor backwards. Moving cursor backwards is the default vim behavior but it is
not appropriate in some cases like terminals.&quot;
(setq-local evil-move-cursor-back nil))

(add-hook &#39;vterm-mode-hook #&#39;evil-collection-vterm-escape-stay)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Related packages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jixiuf/vterm-toggle&quot;&gt;vterm-toggle&lt;/a&gt;: Toggles between a vterm and the current buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/suonlight/multi-libvterm&quot;&gt;multi-libvterm&lt;/a&gt;: Multiterm for emacs-libvterm&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Appendix&lt;/h2&gt; 
&lt;h3&gt;Breaking changes&lt;/h3&gt; 
&lt;p&gt;Obsolete variables will be removed in version 0.1.&lt;/p&gt; 
&lt;h4&gt;August 2022&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-send-C-[a-z]&lt;/code&gt; &lt;code&gt;vterm-send-M-[a-z]&lt;/code&gt; &lt;code&gt;vterm-define-key&lt;/code&gt; &lt;code&gt;vterm-send-{up/down/left/right/prior/next/meta-dot/meta-comma/ctrl-slash}&lt;/code&gt; were obsolete, please use &lt;code&gt;vterm-send&lt;/code&gt; or &lt;code&gt;vterm-send-key&lt;/code&gt; or &lt;code&gt;vterm--self-insert&lt;/code&gt; instead.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;October 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-disable-bold-font&lt;/code&gt; was renamed to &lt;code&gt;vterm-disable-bold&lt;/code&gt; to uniform it with the other similar options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;July 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-use-vterm-prompt&lt;/code&gt; was renamed to &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; is set to &lt;code&gt;t&lt;/code&gt; by default.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;April 2020&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; was renamed to &lt;code&gt;vterm-clear-scrollback-when-clearning&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vterm-set-title-functions&lt;/code&gt; was removed. In its place, there is a new custom option &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/vterm-buffer-name-string&quot;&gt;vterm-buffer-name-string&lt;/a&gt; for documentation.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.1&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot; /&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doomemacs.org/discuss&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/doomemacs/community?label=Discussions&amp;amp;logo=github&amp;amp;style=flat-square&quot; alt=&quot;Discussions board&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot; /&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git 2.23+&lt;/li&gt; 
 &lt;li&gt;Emacs 27.1–30.1 (&lt;strong&gt;Recommended: 30.1 + &lt;a href=&quot;https://www.emacswiki.org/emacs/GccEmacs&quot;&gt;native-comp&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; 
 &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/roadmap&quot;&gt;Development Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/packages-under-review&quot;&gt;Packages under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://github.com/doomemacs/community?tab=readme-ov-file#frequently-asked-questions&quot;&gt;Community FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>yoshiki/yaml-mode</title>
      <link>https://github.com/yoshiki/yaml-mode</link>
      <description>&lt;p&gt;The emacs major mode for editing files in the YAML data serialization format.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RECRUITMENTS I have not used emacs and this library for a long time, so I recruit maintainers or collaborators for all yaml-mode users. If you are interested in maintaining or collaborating with this library, please contact me.&lt;/p&gt; 
&lt;p&gt;NAME yaml-mode - Simple major mode to edit YAML file for emacs&lt;/p&gt; 
&lt;p&gt;REQUIREMENTS Emacs 24.1&lt;/p&gt; 
&lt;p&gt;SYNOPSIS To install, just drop this file into a directory in your `load-path&#39; and (optionally) byte-compile it. To automatically handle files ending in &#39;.yml&#39;, add something like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;yaml-mode)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.yml\\&#39;&quot; . yaml-mode))

to your .emacs file.

Unlike python-mode, this mode follows the Emacs convention of not
binding the ENTER key to `newline-and-indent&#39;.  To get this
behavior, add the key definition to `yaml-mode-hook&#39;:

(add-hook &#39;yaml-mode-hook
  &#39;(lambda ()
    (define-key yaml-mode-map &quot;\C-m&quot; &#39;newline-and-indent)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;DESCRIPTION yaml-mode is major mode for emacs.&lt;/p&gt; 
&lt;p&gt;INSTALL You can install yaml-mode typing below.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    % make
    % make install

    or

    % make PREFIX=/your/home/dir
    % make install PREFIX=/your/home/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SETTING see SYNOPSIS.&lt;/p&gt; 
&lt;p&gt;AUTHOR Yoshiki Kurihara &lt;a href=&quot;mailto:kurihara@cpan.org&quot;&gt;kurihara@cpan.org&lt;/a&gt; Copyright (C) 2010 by Free Software Foundation, Inc.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This file is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>org-roam/org-roam</title>
      <link>https://github.com/org-roam/org-roam</link>
      <description>&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&quot;https://github.com/org-roam/org-roam/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/org-roam/org-roam&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/org-roam&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&quot; alt=&quot;License GPL 3&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;img src=&quot;https://www.orgroam.com/img/logo.svg?sanitize=true&quot; align=&quot;right&quot; alt=&quot;Org-roam Logo&quot; width=&quot;240&quot; /&gt; 
&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&quot;https://www.roamresearch.com/&quot;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&quot;https://orgmode.org/&quot;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; 
&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://www.orgroam.com/img/screenshot.png&quot; alt=&quot;Org-roam Screenshot&quot; width=&quot;738&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.orgroam.com/manual.html&quot;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.orgroam.com/manual.html#FAQ&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&quot;https://www.orgroam.com/manual.html&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; or &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight t
  ...)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight (:host github :repo &quot;org-roam/org-roam&quot;
             :files (:defaults &quot;extensions/*&quot;))
  ...)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight (:local-repo &quot;/path/to/org-roam-fork&quot;
             :files (:defaults &quot;extensions/*&quot;)
             :build (:not compile))
  ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; 
 &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(unpin! org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can pass &lt;code&gt;:pin &quot;commit hash&quot;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; 
 &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam
  :recipe (:host github :repo &quot;org-roam/org-roam&quot;
           :files (:defaults &quot;extensions/*&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam
  :recipe (:local-repo &quot;/path/to/org-roam-fork&quot;
           :files (:defaults &quot;extensions/*&quot;)
           :build (:not compile)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Without a package manager&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; 
  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&quot;https://github.com/org-roam/org-roam/releases&quot;&gt;release version&lt;/a&gt;.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;dash&lt;/li&gt; 
  &lt;li&gt;f&lt;/li&gt; 
  &lt;li&gt;s&lt;/li&gt; 
  &lt;li&gt;org (9.6 is the minimum required version!)&lt;/li&gt; 
  &lt;li&gt;emacsql&lt;/li&gt; 
  &lt;li&gt;magit-section&lt;/li&gt; 
  &lt;li&gt;filenotify-recursive&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/org-roam/&quot;)
(add-to-list &#39;load-path &quot;/path/to-org-roam/extensions/&quot;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; 
 &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename &quot;/path/to/org-files/&quot;))
  :bind ((&quot;C-c n l&quot; . org-roam-buffer-toggle)
         (&quot;C-c n f&quot; . org-roam-node-find)
         (&quot;C-c n g&quot; . org-roam-graph)
         (&quot;C-c n i&quot; . org-roam-node-insert)
         (&quot;C-c n c&quot; . org-roam-capture)
         ;; Dailies
         (&quot;C-c n j&quot; . org-roam-dailies-capture-today))
  :config
  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat &quot;${title:*} &quot; (propertize &quot;${tags:10}&quot; &#39;face &#39;org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require &#39;org-roam-protocol))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/daviwil&quot;&gt;David Wilson&lt;/a&gt; of &lt;a href=&quot;https://www.youtube.com/c/SystemCrafters&quot;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AyhPmypHDEw&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&quot; alt=&quot;Getting Started with Org Roam - Build a Second Brain in Emacs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&quot;https://github.com/org-roam/org-roam/issues&quot;&gt;GitHub&lt;/a&gt; or on &lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For quick questions, please ask them on &lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&quot;https://github.com/org-roam/org-roam/issues&quot;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braindump.jethro.dev/&quot;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&quot;https://github.com/jethrokuan/braindump/tree/master/org&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.alexeyshmalko.com/&quot;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sidhartharya.github.io/braindump/index.html&quot;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://edstrom.dev/&quot;&gt;Martin Edström&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&quot;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>konrad1977/flyover</title>
      <link>https://github.com/konrad1977/flyover</link>
      <description>&lt;p&gt;A beautiful inline overlay for Emacs (Flycheck | Flymake)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flyover&lt;/h1&gt; 
&lt;p&gt;❤️ &lt;a href=&quot;https://github.com/sponsors/konrad1977&quot;&gt;Please sponsor me if you like this package&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/flyover&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/flyover-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;picture&gt; 
 &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/flyover_logo.png&quot; alt=&quot;Flyover logo&quot; height=&quot;300&quot; width=&quot;300&quot; /&gt; 
&lt;/picture&gt; 
&lt;p&gt;A modern, aesthetic overlay display for &lt;em&gt;Flycheck&lt;/em&gt; and &lt;em&gt;Flymake&lt;/em&gt; in Emacs. Flyover is a full featured package with tons of features for you to customize.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎨 Beautiful, customizable overlays for error display and theme aware&lt;/li&gt; 
 &lt;li&gt;🚦 Different styles for errors, warnings, and info messages&lt;/li&gt; 
 &lt;li&gt;🔄 Real-time overlay updates while editing&lt;/li&gt; 
 &lt;li&gt;💡 Smart positioning and formatting of error messages&lt;/li&gt; 
 &lt;li&gt;🎯 Efficient overlay management&lt;/li&gt; 
 &lt;li&gt;📝 Markdown-style syntax highlighting in messages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/overlay_1.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/overlay_2.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Manual Installation&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download &lt;code&gt;flyover.el&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add to your load path:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/flyover&quot;)
(require &#39;flyover)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;h3&gt;Basic Setup&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Enable flyover-mode globally
(add-hook &#39;flycheck-mode-hook #&#39;flyover-mode)

;; Configure which error levels to display
;; Possible values: error, warning, info
(setq flyover-levels &#39;(error warning info))  ; Show all levels
;; (setq flyover-levels &#39;(error warning))    ; Show only errors and warnings
;; (setq flyover-levels &#39;(error))            ; Show only errors
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Theme Integration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Use theme colors for error/warning/info faces
(setq flyover-use-theme-colors t)

;; Adjust background lightness (lower values = darker)
(setq flyover-background-lightness 45)

;; Make icon background darker than foreground
(setq flyover-percent-darker 40)

(setq flyover-text-tint &#39;lighter) ;; or &#39;darker or nil

;; &quot;Percentage to lighten or darken the text when tinting is enabled.&quot;
(setq flyover-text-tint-percent 50)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing Faces&lt;/h3&gt; 
&lt;p&gt;You can customize the appearance of overlays by modifying these faces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(custom-set-faces
 &#39;(flyover-error
   ((t :background &quot;#453246&quot;
       :foreground &quot;#ea8faa&quot;
       :height 0.9
       :weight normal)))
 
 &#39;(flyover-warning
   ((t :background &quot;#331100&quot;
       :foreground &quot;#DCA561&quot;
       :height 0.9
       :weight normal)))
 
 &#39;(flyover-info
   ((t :background &quot;#374243&quot;
       :foreground &quot;#a8e3a9&quot;
       :height 0.9
       :weight normal))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once enabled, &lt;code&gt;flyover&lt;/code&gt; will automatically display error messages as overlays below the corresponding line. The overlays will:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Show errors in red with appropriate background&lt;/li&gt; 
 &lt;li&gt;Display warnings in yellow/orange&lt;/li&gt; 
 &lt;li&gt;Show information messages in green&lt;/li&gt; 
 &lt;li&gt;Highlight code snippets and symbols in messages&lt;/li&gt; 
 &lt;li&gt;Update in real-time as you type&lt;/li&gt; 
 &lt;li&gt;Clear automatically when errors are fixed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Checker Configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Choose which checkers to use (flycheck, flymake, or both)
(setq flyover-checkers &#39;(flycheck flymake))

;; Enable debug messages
(setq flyover-debug nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optimization settings&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Time in seconds to wait before checking and displaying errors after a change
(setq flyover-debounce-interval 0.2) 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Positioning settings&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Number of lines below the error line to display the overlay
;; Default is 1 (next line), set to 0 for same line, 2 for two lines below, etc.
(setq flyover-line-position-offset 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Message wrapping settings&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Enable wrapping of long error messages across multiple lines
(setq flyover-wrap-messages t)

;; Maximum length of each line when wrapping messages
(setq flyover-max-line-length 80)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/flycheck_overlay_multiline.png&quot; alt=&quot;Display text on multiple lines&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Flycheck Overlay Icons&lt;/h2&gt; 
&lt;p&gt;You can customize the icons used for different types of Flycheck messages in the overlay display. These settings allow you to define custom icons for information, warning, and error messages.&lt;/p&gt; 
&lt;h3&gt;Icon settings&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;;; Icons
(setq flyover-info-icon &quot;🛈&quot;)
(setq flyover-warning-icon &quot;⚠&quot;)
(setq flyover-error-icon &quot;✘&quot;)

;;; Icon padding

;;; You might want to adjust this setting if you icons are not centererd or if you more or less space.fs
(setq flyover-icon-left-padding 0.9)
(setq flyover-icon-right-padding 0.9)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing Error Indicators&lt;/h3&gt; 
&lt;p&gt;You can customize the appearance of the error indicators using various line and arrow styles through the &lt;code&gt;flyover-virtual-line-type&lt;/code&gt; variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq flyover-virtual-line-type &#39;curved-dotted-arrow)

;;; Overide virtual-line-type with your own
(setq flyover-virtual-line-icon &quot;╰──&quot;) ;;; default its nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Style Name&lt;/th&gt; 
   &lt;th&gt;Display&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;No indicator&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;line-no-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;└──&lt;/td&gt; 
   &lt;td&gt;Straight line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curved-line-no-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╰──&lt;/td&gt; 
   &lt;td&gt;Curved line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;double-line-no-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╚══&lt;/td&gt; 
   &lt;td&gt;Double line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bol&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;┗━━&lt;/td&gt; 
   &lt;td&gt;Bold line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotted-line-no-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;└┈┈&lt;/td&gt; 
   &lt;td&gt;Dotted line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;straight-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;└──►&lt;/td&gt; 
   &lt;td&gt;Straight line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;double-line-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╚══►&lt;/td&gt; 
   &lt;td&gt;Double line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bold-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;┗━━►&lt;/td&gt; 
   &lt;td&gt;Bold line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotted-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;└┈┈►&lt;/td&gt; 
   &lt;td&gt;Dotted line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curved-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╰──►&lt;/td&gt; 
   &lt;td&gt;Curved line with arrow (default)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curved-bold-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╰━━►&lt;/td&gt; 
   &lt;td&gt;Curved bold line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curved-double-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╰══►&lt;/td&gt; 
   &lt;td&gt;Curved double line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curved-dotted-arrow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;╰┈┈►&lt;/td&gt; 
   &lt;td&gt;Curved dotted line with arrow&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Visibility settings&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;;; Hide checker name for a cleaner UI
(setq flyover-hide-checker-name t) 

;;; show at end of the line instead.
(setq flyover-show-at-eol t) 

;;; Hide overlay when cursor is at same line, good for show-at-eol.
(setq flyover-hide-when-cursor-is-on-same-line t) 

;;; Show an arrow (or icon of your choice) before the error to highlight the error a bit more.
(setq flyover-show-virtual-line t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/flycheck_hide_overlay_cursor.gif&quot; alt=&quot;Gif of showing hide cursor is on same line&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Show or hide checker name&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/checker_name.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/no_checker_name.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Show under or after the faulty code&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/eol.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;img src=&quot;https://github.com/konrad1977/flycheck-overlay/raw/main/screenshots/under.png&quot; alt=&quot;Screenshot of overlay-usage for Emacs.&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The package includes comprehensive tests for the message wrapping functionality:&lt;/p&gt; 
&lt;h3&gt;Running Tests&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run core wrapping tests (no dependencies required)
emacs -batch -l test-wrapping.el

# Run full test suite (requires flycheck)
emacs -batch -l flyover.el -l flycheck-overlay-test.el -f ert-run-tests-batch-and-exit

# Interactive testing
# In Emacs: M-x load-file RET flyover-test.el RET
# Then: M-x flyover-run-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test Coverage&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Message wrapping with various lengths&lt;/li&gt; 
 &lt;li&gt;Multi-line display functionality&lt;/li&gt; 
 &lt;li&gt;Line position offset behavior&lt;/li&gt; 
 &lt;li&gt;Edge cases (empty messages, single words, exact lengths)&lt;/li&gt; 
 &lt;li&gt;Integration with flycheck error objects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b feature/amazing-feature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Add tests for new functionality in &lt;code&gt;flyover-test.el&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Commit your changes (&lt;code&gt;git commit -m &#39;Add some amazing feature&#39;&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Push to the branch (&lt;code&gt;git push origin feature/amazing-feature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Open a Pull Request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks to the Flycheck team for the excellent error checking framework&lt;/li&gt; 
 &lt;li&gt;Inspired by various overlay-based error display implementations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;Mikael Konradsson &lt;a href=&quot;mailto:mikael.konradsson@outlook.com&quot;&gt;mikael.konradsson@outlook.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-lsp/lsp-mode</title>
      <link>https://github.com/emacs-lsp/lsp-mode</link>
      <description>&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/lsp-mode&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/swuxy5AAgT&quot;&gt;&lt;img src=&quot;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/emacs-lsp/lsp-mode/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&quot; width=&quot;240&quot; align=&quot;right&quot; /&gt; 
&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&quot; alt=&quot;LSP mode&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/installation&quot;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/languages&quot;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&quot;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&quot;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&quot;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/gallery&quot;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/faq&quot;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;❤️&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/performance&quot;&gt;performance section&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🌟&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;⚙&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Client for &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; 
 &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; 
 &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&quot;https://github.com/tigersoldier/company-lsp&quot;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; 
 &lt;li&gt;Hovers - using &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&quot;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; 
 &lt;li&gt;Code outline - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&quot;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Code navigation - using builtin &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&quot;&gt;xref&lt;/a&gt;, &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&quot;https://emacs-lsp.github.io/lsp-ui&quot;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; 
 &lt;li&gt;Code lens&lt;/li&gt; 
 &lt;li&gt;Symbol highlights&lt;/li&gt; 
 &lt;li&gt;Formatting&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&quot;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; 
 &lt;li&gt;Debugger - &lt;a href=&quot;https://emacs-lsp.github.io/dap-mode/&quot;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&quot;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Helm integration - &lt;a href=&quot;https://github.com/emacs-lsp/helm-lsp/&quot;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ivy integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-ivy/&quot;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Consult integration - &lt;a href=&quot;https://github.com/gagbo/consult-lsp&quot;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Treemacs integration - &lt;a href=&quot;https://github.com/emacs-lsp/lsp-treemacs&quot;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&quot;&gt;iedit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&quot;&gt;dired&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&quot;&gt;ido&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Presentations/demos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/SystemCrafters&quot;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&quot;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&quot;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skybert&quot;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&quot;https://media.emacsconf.org/2019/19.html&quot;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thatwist&quot;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&quot;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&quot;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;See also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/lsp-docker/&quot;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sebastiencs/company-box/&quot;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emacs-lsp/dap-mode&quot;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/eglot/&quot;&gt;eglot&lt;/a&gt; - A minimal LSP implementation built in to Emacs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justbur/emacs-which-key/&quot;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bbatsov/projectile/&quot;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ubolonton/emacs-tree-sitter&quot;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://akrl.sdf.org/gccemacs.html&quot;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&quot;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&quot;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; 
&lt;h2&gt;Support the project&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; 
&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&quot;https://github.com/sponsors/emacs-lsp&quot;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/emacs-lsp&quot;&gt;&lt;img src=&quot;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Members&lt;/h3&gt; 
&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; 
&lt;table id=&quot;emacs-lsp-members&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/totbwf&quot;&gt; &lt;img src=&quot;https://github.com/totbwf.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;totbwf&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/brotzeit&quot;&gt; &lt;img src=&quot;https://github.com/brotzeit.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;brotzeit&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/dsyzling&quot;&gt; &lt;img src=&quot;https://github.com/dsyzling.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;dsyzling&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Scala 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kurnevsky&quot;&gt; &lt;img src=&quot;https://github.com/kurnevsky.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kurnevsky&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Scala | Rust 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/seagle0128&quot;&gt; &lt;img src=&quot;https://github.com/seagle0128.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;seagle0128&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Go | Python MS 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/sebastiansturm&quot;&gt; &lt;img src=&quot;https://github.com/sebastiansturm.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;sebastiansturm&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; lsp-mode core | C++ 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/vibhavp&quot;&gt; &lt;img src=&quot;https://github.com/vibhavp.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;vibhavp&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/yyoncho&quot;&gt; &lt;img src=&quot;https://github.com/yyoncho.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;yyoncho&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; lsp-mode core | Java 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/ericdallo&quot;&gt; &lt;img src=&quot;https://github.com/ericdallo.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;ericdallo&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Dart/Flutter | Clojure 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/danielmartin&quot;&gt; &lt;img src=&quot;https://github.com/danielmartin.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;danielmartin&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; C++ | Swift 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/kiennq&quot;&gt; &lt;img src=&quot;https://github.com/kiennq.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;kiennq&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; completions | pwsh 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/nbfalcon&quot;&gt; &lt;img src=&quot;https://github.com/nbfalcon.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;nbfalcon&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; lsp-mode core | iedit 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/psibi&quot;&gt; &lt;img src=&quot;https://github.com/psibi.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;psibi&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; Terraform | Nix 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/razzmatazz&quot;&gt; &lt;img src=&quot;https://github.com/razzmatazz.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;razzmatazz&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;razzmatazz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; C# | F# 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; 
    &lt;div&gt; 
     &lt;a href=&quot;https://github.com/jcs090218&quot;&gt; &lt;img src=&quot;https://github.com/jcs090218.png&quot; width=&quot;100px;&quot; style=&quot;border-radius: 50%;&quot; alt=&quot;jcs090218&quot; /&gt; &lt;br /&gt; &lt;sub&gt;&lt;b&gt;jcs090218&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; 
     &lt;br /&gt; lsp-mode core 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>justbur/emacs-which-key</title>
      <link>https://github.com/justbur/emacs-which-key</link>
      <description>&lt;p&gt;Emacs package that displays available keybindings in popup&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;which-key [[https://elpa.gnu.org/packages/which-key.html][https://elpa.gnu.org/packages/which-key.svg]] [[http://melpa.org/#/which-key][http://melpa.org/packages/which-key-badge.svg]] [[http://stable.melpa.org/#/which-key][file:http://stable.melpa.org/packages/which-key-badge.svg]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** ARCHIVE NOTICE&lt;/p&gt; 
&lt;p&gt;which-key is now included in the master branch of Emacs and will likely be released with Emacs v30. Bug reports and contributions to which-key will now be considered through standard Emacs channels, and this repository is being archived.&lt;/p&gt; 
&lt;p&gt;** Introduction =which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter =C-x= and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow =C-x= (or as many as space allows given your settings). This includes prefixes like =C-x 8= which are shown in a different face. Screenshots of what the popup will look like are included below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature sets have diverged to a certain extent.&lt;/p&gt; 
&lt;p&gt;** Table of Contents :TOC_3:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#which-key][which-key]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#archive-notice][ARCHIVE NOTICE]]&lt;/li&gt; 
   &lt;li&gt;[[#introduction][Introduction]]&lt;/li&gt; 
   &lt;li&gt;[[#install][Install]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#melpa][MELPA]]&lt;/li&gt; 
     &lt;li&gt;[[#manually][Manually]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#initial-setup][Initial Setup]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#side-window-bottom-option][Side Window Bottom Option]]&lt;/li&gt; 
     &lt;li&gt;[[#side-window-right-option][Side Window Right Option]]&lt;/li&gt; 
     &lt;li&gt;[[#side-window-right-then-bottom][Side Window Right then Bottom]]&lt;/li&gt; 
     &lt;li&gt;[[#minibuffer-option][Minibuffer Option]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#manual-activation][Manual Activation]]&lt;/li&gt; 
   &lt;li&gt;[[#additional-commands][Additional Commands]]&lt;/li&gt; 
   &lt;li&gt;[[#special-features-and-configuration-options][Special Features and Configuration Options]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#popup-type-options][Popup Type Options]]&lt;/li&gt; 
     &lt;li&gt;[[#custom-string-replacement-options][Custom String Replacement Options]]&lt;/li&gt; 
     &lt;li&gt;[[#sorting-options][Sorting Options]]&lt;/li&gt; 
     &lt;li&gt;[[#paging-options][Paging Options]]&lt;/li&gt; 
     &lt;li&gt;[[#face-customization-options][Face Customization Options]]&lt;/li&gt; 
     &lt;li&gt;[[#other-options][Other Options]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#support-for-third-party-libraries][Support for Third-Party Libraries]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#key-chord][Key-chord]]&lt;/li&gt; 
     &lt;li&gt;[[#evil-operators][Evil operators]]&lt;/li&gt; 
     &lt;li&gt;[[#god-mode][God-mode]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#more-examples][More Examples]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#nice-display-with-split-frame][Nice Display with Split Frame]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#known-issues][Known Issues]]&lt;/li&gt; 
   &lt;li&gt;[[#thanks][Thanks]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Install *** MELPA After setting up [[http://melpa.org][MELPA]] as a repository, use =M-x package-install which-key= or your preferred method. You will need to call =which-key-mode= to enable the minor mode of course.&lt;/p&gt; 
&lt;p&gt;*** Manually Add which-key.el to your =load-path= and require. Something like #+BEGIN_SRC emacs-lisp (add-to-list &#39;load-path &quot;path/to/which-key.el&quot;) (require &#39;which-key) (which-key-mode) #+END_SRC&lt;/p&gt; 
&lt;p&gt;** Initial Setup No further setup is required if you are happy with the default setup. To try other options, there are 3 choices of default configs that are preconfigured (then customize to your liking). The main choice is where you want the which-key buffer to display. Screenshots of the default options are shown in the next sections.&lt;/p&gt; 
&lt;p&gt;In each case, we show as many key bindings as we can fit in the buffer within the constraints. The constraints are determined by several factors, including your Emacs settings, the size of the current Emacs frame, and the which-key settings, most of which are described below.&lt;/p&gt; 
&lt;p&gt;There are many substitution abilities included, which are quite flexible (ability to use regexp for example). This makes which-key very customizable.&lt;/p&gt; 
&lt;p&gt;*** Side Window Bottom Option Popup side window on bottom. This is the current default. To restore this setup use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(which-key-setup-side-window-bottom) #+END_SRC&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[[./img/which-key-bottom.png]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Side Window Right Option Popup side window on right. For defaults use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(which-key-setup-side-window-right) #+END_SRC&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Note the defaults are fairly conservative and will tend to not display on
narrower frames. If you get a message saying which-key can&#39;t display the
keys, try making your frame wider or adjusting the defaults related to the
maximum width (see =M-x customize-group which-key=).

[[./img/which-key-right.png]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Side Window Right then Bottom This is a combination of the previous two choices. It will try to use the right side, but if there is no room it will switch to using the bottom, which is usually easier to fit keys into. This setting can be helpful if the size of the Emacs frame changes frequently, which might be the case if you are using a dynamic/tiling window manager.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
(which-key-setup-side-window-right-bottom)
#+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Minibuffer Option Take over the minibuffer. For the recommended configuration use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
(which-key-setup-minibuffer)
#+END_SRC

[[./img/which-key-minibuffer.png]]

Note the maximum height of the minibuffer is controlled through the built-in
variable =max-mini-window-height=. Also, the paging commands do not work
reliably with the minibuffer option. Use the side window on the bottom
option if you need paging.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;** Manual Activation #+NAME: #manual-activation If you only want the =which-key= popup when you need it, you can try a setup along the following lines&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Allow C-h to trigger which-key before it is done automatically (setq which-key-show-early-on-C-h t) ;; make sure which-key doesn&#39;t show normally but refreshes quickly after it is ;; triggered. (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05) (which-key-mode) #+END_SRC&lt;/p&gt; 
&lt;p&gt;This will prevent which-key from showing automatically, and allow you to use =C-h= in the middle of a key sequence to show the =which-key= buffer and keep it open for the remainder of the key sequence.&lt;/p&gt; 
&lt;p&gt;** Additional Commands&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=which-key-show-top-level= will show most key bindings without a prefix. It is most and not all, because many are probably not interesting to most users.&lt;/li&gt; 
 &lt;li&gt;=which-key-show-major-mode= will show the currently active major-mode bindings. It&#39;s similar to =C-h m= but in a which-key format. It is also aware of evil commands defined using =evil-define-key=.&lt;/li&gt; 
 &lt;li&gt;=which-key-show-next-page-cycle= / =which-key-show-previous-page-cycle= will flip pages in a circle.&lt;/li&gt; 
 &lt;li&gt;=which-key-show-next-page-no-cycle= / =which-key-show-previous-page-no-cycle= will flip pages and stop at first/last page.&lt;/li&gt; 
 &lt;li&gt;=which-key-undo= can be used to undo the last keypress when in the middle of a key sequence.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Special Features and Configuration Options There are more options than the ones described here. All of the configurable variables are available through =M-x customize-group which-key=. *** Popup Type Options There are three different popup types that which-key can use by default to display the available keys. The variable =which-key-popup-type= decides which one is used. **** minibuffer #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;minibuffer) #+END_SRC Show keys in the minibuffer. **** side window #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;side-window) #+END_SRC Show keys in a side window. This popup type has further options: #+BEGIN_SRC emacs-lisp ;; location of which-key window. valid values: top, bottom, left, right, ;; or a list of any of the two. If it&#39;s a list, which-key will always try ;; the first location first. It will go to the second location if there is ;; not enough room to display any keys in the first location (setq which-key-side-window-location &#39;bottom)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; ;; max width of which-key window, when displayed at left or right.
 ;; valid values: number of columns (integer), or percentage out of current
 ;; frame&#39;s width (float larger than 0 and smaller than 1)
 (setq which-key-side-window-max-width 0.33)

 ;; max height of which-key window, when displayed at top or bottom.
 ;; valid values: number of lines (integer), or percentage out of current
 ;; frame&#39;s height (float larger than 0 and smaller than 1)
 (setq which-key-side-window-max-height 0.25)
 #+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**** frame&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp
 (setq which-key-popup-type &#39;frame)
 #+END_SRC
 Show keys in a popup frame. This popup won&#39;t work very well in a terminal,
 where only one frame can be shown at any given moment. This popup type has
 further options:
 #+BEGIN_SRC emacs-lisp
 ;; max width of which-key frame: number of columns (an integer)
 (setq which-key-frame-max-width 60)

 ;; max height of which-key frame: number of lines (an integer)
 (setq which-key-frame-max-height 20)
 #+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**** custom Write your own display functions! This requires you to write three functions, =which-key-custom-popup-max-dimensions-function=, =which-key-custom-show-popup-function=, and =which-key-custom-hide-popup-function=. Refer to the documentation for those variables for more information, but here is a working example (this is the current implementation of side-window bottom).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp
   (setq which-key-popup-type &#39;custom)
   (defun which-key-custom-popup-max-dimensions-function (ignore)
     (cons
      (which-key-height-or-percentage-to-height
       which-key-side-window-max-height)
      (frame-width)))
   (defun fit-horizonatally ()
     (let ((fit-window-to-buffer-horizontally t))
       (fit-window-to-buffer)))
   (defun which-key-custom-show-popup-function (act-popup-dim)
     (let* ((alist &#39;((window-width . fit-horizontally)
                     (window-height . fit-window-to-buffer))))
       (if (get-buffer-window which-key--buffer)
           (display-buffer-reuse-window which-key--buffer alist)
         (display-buffer-in-major-side-window which-key--buffer
                                              &#39;bottom 0 alist))))
   (defun which-key-custom-hide-popup-function ()
     (when (buffer-live-p which-key--buffer)
       (quit-windows-on which-key--buffer)))
 #+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Custom String Replacement Options #+NAME: #custom-string-replacement-options You can customize the way the keys show in the buffer using three different replacement methods. The first, keymap-based replacement, is preferred and will take precedence over the others. The remaining methods are still available, because they pre-date the first and are more flexible in what they can accomplish.&lt;/p&gt; 
&lt;p&gt;**** Keymap-based replacement Using this method, which-key can display a custom string for a key definition in some keymap. There are two ways to define a keymap-based replacement. The preferred way is to use =define-key= (or a command that uses =define-key= internally) with a cons cell as the definition. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp
   (define-key some-map &quot;f&quot; &#39;(&quot;foo&quot; . command-foo))
   (define-key some-map &quot;b&quot; &#39;(&quot;bar-prefix&quot; . (keymap)))
   (setq my-map (make-sparse-keymap))
   (define-key some-map &quot;b&quot; (cons &quot;bar-prefix&quot; my-map))
 #+END_SRC

 binds =command-foo= to =f= in =some-map=, but also stores the string &quot;foo&quot;
 which which-key will extract to use to describe this command. The second
 example binds an empty keymap to =b= in =some-map= and uses &quot;bar-prefix&quot; to
 describe it. The last two lines replicate the functionality of the second
 line, while assigning the new keymap to the symbol =my-map= (note the use
 of =cons= to ensure that =my-map= is evaluated for =define-key=). These
 bindings are accepted by =define-key= natively (i.e., with or without
 which-key being loaded). Since many key-binding utilities use =define-key=
 internally, this functionality should be available with your favorite
 method of defining keys as well.

 The second method is to use =which-key-add-keymap-based-replacements=. The
 statement

 #+BEGIN_SRC emacs-lisp
   (define-key some-map &quot;f&quot; &#39;long-command-name-foo)
   (define-key some-map &quot;b&quot; some-prefix-map)
   (which-key-add-keymap-based-replacements some-map
     &quot;f&quot; &#39;(&quot;foo&quot; . long-command-name-foo)
     &quot;b&quot; &#39;(&quot;bar-prefix&quot; . (keymap)))
 #+END_SRC

 uses =define-key= to add two bindings and tells which-key to use the string
 &quot;foo&quot; in place of &quot;command-foo&quot; and the string &quot;bar-prefix&quot; for an empty
 prefix map. =which-key-add-keymap-based-replacements= just uses
 =define-key= to bind (or rebind) the command.

 There are other methods of telling which-key to replace command names,
 which are described next. The keymap-based replacements should be the most
 performant since they use built-in functionality of emacs. However, the
 alternatives can be more flexible in telling which-key how and when to
 replace text. They can be used simultaneously, but which-key will give
 precedence to the keymap-based replacement when it exists.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**** Key-Based replacement Using this method, the description of a key is replaced using a string that you provide. Here&#39;s an example&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp
 (which-key-add-key-based-replacements
   &quot;C-x C-f&quot; &quot;find files&quot;)
 #+END_SRC

 where the first string is the key combination whose description you want to
 replace, in a form suitable for =kbd=. For that key combination, which-key
 overwrites the description with the second string, &quot;find files&quot;. In the
 second type of entry you can restrict the replacements to a major-mode. For
 example,

 #+BEGIN_SRC emacs-lisp
 (which-key-add-major-mode-key-based-replacements &#39;org-mode
   &quot;C-c C-c&quot; &quot;Org C-c C-c&quot;
   &quot;C-c C-a&quot; &quot;Org Attach&quot;)
 #+END_SRC

 Here the first entry is the major-mode followed by a list of the first type
 of entries. In case the same key combination is listed under a major-mode
 and by itself, the major-mode version takes precedence.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**** Key and Description replacement&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; The second and third methods target the text used for the keys and the
 descriptions directly. The relevant variable is
 =which-key-replacement-alist=.  Here&#39;s an example of one of the default key
 replacements

 #+BEGIN_SRC emacs-lisp
 (push &#39;((&quot;&amp;lt;\\([[:alnum:]-]+\\)&amp;gt;&quot; . nil) . (&quot;\\1&quot; . nil))
       which-key-replacement-alist)
 #+END_SRC

 Each element of the outer cons cell is a cons cell of the form =(KEY
 . BINDING)=. The =car= of the outer cons determines how to match key
 bindings while the =cdr= determines how those matches are replaced. See the
 docstring of =which-key-replacement-alist= for more information.

 The next example shows how to replace the description.

 #+BEGIN_SRC emacs-lisp
 (push &#39;((nil . &quot;left&quot;) . (nil . &quot;lft&quot;)) which-key-replacement-alist)
 #+END_SRC

 Here is an example of using key replacement to include Unicode characters
 in the results. Unfortunately, using Unicode characters may upset the
 alignment of the which-key buffer, because Unicode characters can have
 different widths even in a monospace font and alignment is based on
 character width.

 #+BEGIN_SRC emacs-lisp
 (add-to-list &#39;which-key-replacement-alist &#39;((&quot;TAB&quot; . nil) . (&quot;↹&quot; . nil)))
 (add-to-list &#39;which-key-replacement-alist &#39;((&quot;RET&quot; . nil) . (&quot;⏎&quot; . nil)))
 (add-to-list &#39;which-key-replacement-alist &#39;((&quot;DEL&quot; . nil) . (&quot;⇤&quot; . nil)))
 (add-to-list &#39;which-key-replacement-alist &#39;((&quot;SPC&quot; . nil) . (&quot;␣&quot; . nil)))
 #+END_SRC

 The =cdr= may also be a function that receives a =cons= of the form =(KEY
 . BINDING)= and produces a =cons= of the same form. This allows for
 interesting ideas like this one suggested by [[https://github.com/pdcawley][@pdcawley]] in [[https://github.com/justbur/emacs-which-key/pull/147][PR #147]].

 #+BEGIN_SRC emacs-lisp
 (push (cons &#39;(nil . &quot;paredit-mode&quot;)
             (lambda (kb)
               (cons (car kb)
                     (if paredit-mode
                         &quot;[x] paredit-mode&quot;
                       &quot;[ ] paredit-mode&quot;))))
       which-key-replacement-alist)
 #+END_SRC

 The box will be checked if =paredit-mode= is currently active.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Sorting Options By default the output is sorted by the key in a custom order. The default order is to sort lexicographically within each &quot;class&quot; of key, where the classes and their order are&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=Special (SPC, TAB, ...) &amp;lt; Single Character (ASCII) (a, ...) &amp;lt; Modifier (C-, M-, ...) &amp;lt; Other=

You can control the order by setting this variable. This also shows the
other available options.

#+BEGIN_SRC emacs-lisp
;; default
(setq which-key-sort-order &#39;which-key-key-order)
;; same as default, except single characters are sorted alphabetically
;; (setq which-key-sort-order &#39;which-key-key-order-alpha)
;; same as default, except all prefix keys are grouped together at the end
;; (setq which-key-sort-order &#39;which-key-prefix-then-key-order)
;; same as default, except all keys from local maps shown first
;; (setq which-key-sort-order &#39;which-key-local-then-key-order)
;; sort based on the key description ignoring case
;; (setq which-key-sort-order &#39;which-key-description-order)
#+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Paging Options&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;There are at least several prefixes that have many keys bound to them, like
=C-x=. which-key displays as many keys as it can given your settings, but
for these prefixes this may not be enough. The paging feature gives you the
ability to bind a key to the function =which-key-C-h-dispatch= which will
allow you to cycle through the pages without changing the key sequence you
were in the middle of typing. There are two slightly different ways of doing
this.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**** Method 1 (default): Using C-h (or =help-char=) This is the easiest way, and is turned on by default. Use #+BEGIN_SRC emacs-lisp (setq which-key-use-C-h-commands nil) #+END_SRC to disable the behavior (this will only take effect after toggling which-key-mode if it is already enabled). =C-h= can be used with any prefix to switch pages when there are multiple pages of keys. This changes the default behavior of Emacs which is to show a list of key bindings that apply to a prefix. For example, if you were to type =C-x C-h= you would get a list of commands that follow =C-x=. This uses which-key instead to show those keys, and unlike the Emacs default saves the incomplete prefix that you just entered so that the next keystroke can complete the command.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; The commands are:
 - Cycle through the pages forward with =n= (or =C-n=)
 - Cycle backwards with =p= (or =C-p=)
 - Undo the last entered key (!) with =u= (or =C-u=)
 - Call the default command bound to =C-h=, usually
   =describe-prefix-bindings=, with =h= (or =C-h=)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is especially useful for those who like =helm-descbinds= but also want to use =C-h= as their which-key paging key.&lt;/p&gt; 
&lt;p&gt;Note =C-h= is by default equivalent to =?= in this context.&lt;/p&gt; 
&lt;p&gt;Note also that using =C-h= will not work with the =C-h= prefix, unless you make further adjustments. See Issues [[https://github.com/justbur/emacs-which-key/issues/93][#93]] and [[https://github.com/justbur/emacs-which-key/issues/175][#175]] for example.&lt;/p&gt; 
&lt;p&gt;**** Method 2: Bind your own keys&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; Essentially, all you need to do for a prefix like =C-x= is the following
 which will bind =&amp;lt;f5&amp;gt;= to the relevant command.

 #+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(define-key which-key-mode-map (kbd &quot;C-x 
 &lt;f5&gt;
  &quot;) &#39;which-key-C-h-dispatch) #+END_SRC
 &lt;/f5&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; This is completely equivalent to

 #+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(setq which-key-paging-prefixes &#39;(&quot;C-x&quot;)) (setq which-key-paging-key &quot;
 &lt;f5&gt;
  &quot;) #+END_SRC
 &lt;/f5&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; where the latter are provided for convenience if you have a lot of
 prefixes.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Face Customization Options The faces that which-key uses are | Face | Applied To | Default Definition | |----------------------------------------+-------------------------------+-------------------------------------------------------------| | =which-key-key-face= | Every key sequence | =:inherit font-lock-constant-face= | | =which-key-separator-face= | The separator (→) | =:inherit font-lock-comment-face= | | =which-key-note-face= | Hints and notes | =:inherit which-key-separator-face= | | =which-key-special-key-face= | User-defined special keys | =:inherit which-key-key-face :inverse-video t :weight bold= | | =which-key-group-description-face= | Command groups (i.e, keymaps) | =:inherit font-lock-keyword-face= | | =which-key-command-description-face= | Commands not in local-map | =:inherit font-lock-function-name-face= | | =which-key-local-map-description-face= | Commands in local-map | =:inherit which-key-command-description-face= |&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;The last two deserve some explanation. A command lives in one of many possible
keymaps. You can distinguish between local maps, which depend on the buffer you
are in, which modes are active, etc., and the global map which applies
everywhere. It might be useful for you to distinguish between the two. One way
to do this is to remove the default face from
=which-key-command-description-face= like this

#+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(set-face-attribute &#39;which-key-command-description-face nil :inherit nil) #+END_SRC&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;another is to make the local map keys appear in bold

#+BEGIN_SRC emacs-lisp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(set-face-attribute &#39;which-key-local-map-description-face nil :weight &#39;bold) #+END_SRC&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;You can also use =M-x customize-face= to customize any of the above faces to
your liking.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;*** Other Options #+NAME: #other-options The options below are also available through customize. Their defaults are shown.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
  ;; Set the time delay (in seconds) for the which-key popup to appear. A value of
  ;; zero might cause issues so a non-zero value is recommended.
  (setq which-key-idle-delay 1.0)

  ;; Set the maximum length (in characters) for key descriptions (commands or
  ;; prefixes). Descriptions that are longer are truncated and have &quot;..&quot; added.
  ;; This can also be a float (fraction of available width) or a function.
  (setq which-key-max-description-length 27)

  ;; Use additional padding between columns of keys. This variable specifies the
  ;; number of spaces to add to the left of each column.
  (setq which-key-add-column-padding 0)

  ;; The maximum number of columns to display in the which-key buffer. nil means
  ;; don&#39;t impose a maximum.
  (setq which-key-max-display-columns nil)

  ;; Set the separator used between keys and descriptions. Change this setting to
  ;; an ASCII character if your font does not show the default arrow. The second
  ;; setting here allows for extra padding for Unicode characters. which-key uses
  ;; characters as a means of width measurement, so wide Unicode characters can
  ;; throw off the calculation.
  (setq which-key-separator &quot; → &quot; )
  (setq which-key-unicode-correction 3)

  ;; Set the prefix string that will be inserted in front of prefix commands
  ;; (i.e., commands that represent a sub-map).
  (setq which-key-prefix-prefix &quot;+&quot; )

  ;; Set the special keys. These are automatically truncated to one character and
  ;; have which-key-special-key-face applied. Disabled by default. An example
  ;; setting is
  ;; (setq which-key-special-keys &#39;(&quot;SPC&quot; &quot;TAB&quot; &quot;RET&quot; &quot;ESC&quot; &quot;DEL&quot;))
  (setq which-key-special-keys nil)

  ;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).
  ;; The prefix consists of the keys you have typed so far. which-key also shows
  ;; the page information along with the prefix.
  (setq which-key-show-prefix &#39;left)

  ;; Set to t to show the count of keys shown vs. total keys in the mode line.
  (setq which-key-show-remaining-keys nil)
#+END_SRC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;** Support for Third-Party Libraries Some support is provided for third-party libraries which don&#39;t use standard methods of looking up commands. Some of these need to be enabled explicitly. This code includes some hacks, so please report any problems. *** Key-chord Enabled by default. *** Evil operators Evil motions and text objects following an operator like =d= are not all looked up in a standard way. Support is controlled through =which-key-allow-evil-operators= which should be non-nil if evil is loaded before which-key and through =which-key-show-operator-state-maps= which needs to be enabled explicitly because it is more of a hack. The former allows for the inner and outer text object maps to show, while the latter shows motions as well. *** God-mode Call =(which-key-enable-god-mode-support)= after loading god-mode to enable support for god-mode key sequences. This is new and experimental, so please report any issues. ** More Examples *** Nice Display with Split Frame Unlike guide-key, which-key looks good even if the frame is split into several windows. #+CAPTION: which-key in a frame with 3 horizontal splits [[./img/which-key-right-split.png]]&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#+CAPTION: which-key in a frame with 2 vertical splits
[[./img/which-key-bottom-split.png]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;** Known Issues&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A few users have reported crashes related to which-key popups when quitting a key sequence with =C-g=. A possible fix is discussed in [[https://github.com/justbur/emacs-which-key/issues/130][this issue]]. ** Thanks Special thanks to&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/bmag][@bmag]] for helping with the initial development and finding many bugs.&lt;/li&gt; 
 &lt;li&gt;[[https://github/iqbalansari][@iqbalansari]] who among other things adapted the code to make =which-key-show-top-level= possible.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>oantolin/embark</title>
      <link>https://github.com/oantolin/embark</link>
      <description>&lt;p&gt;Emacs Mini-Buffer Actions Rooted in Keymaps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Embark: Emacs Mini-Buffer Actions Rooted in Keymaps #+OPTIONS: d:nil #+EXPORT_FILE_NAME: embark.texi #+TEXINFO_DIR_CATEGORY: Emacs misc features #+TEXINFO_DIR_TITLE: Embark: (embark). #+TEXINFO_DIR_DESC: Emacs Mini-Buffer Actions Rooted in Keymaps&lt;/p&gt; 
&lt;p&gt;#+html: &lt;a href=&quot;http://elpa.gnu.org/packages/embark.html&quot;&gt;&lt;img alt=&quot;GNU ELPA&quot; src=&quot;https://elpa.gnu.org/packages/embark.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;http://elpa.gnu.org/devel/embark.html&quot;&gt;&lt;img alt=&quot;GNU-devel ELPA&quot; src=&quot;https://elpa.gnu.org/devel/embark.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://melpa.org/#/embark&quot;&gt;&lt;img alt=&quot;MELPA&quot; src=&quot;https://melpa.org/packages/embark-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://stable.melpa.org/#/embark&quot;&gt;&lt;img alt=&quot;MELPA Stable&quot; src=&quot;https://stable.melpa.org/packages/embark-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Overview&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers. Bind the command =embark-act= to a key and it acts like prefix-key for a keymap of /actions/ (commands) relevant to the /target/ around point. With point on an URL in a buffer you can open the URL in a browser or eww or download the file it points to. If while switching buffers you spot an old one, you can kill it right there and continue to select another. Embark comes preconfigured with over a hundred actions for common types of targets such as files, buffers, identifiers, s-expressions, sentences; and it is easy to add more actions and more target types. Embark can also collect all the candidates in a minibuffer to an occur-like buffer or export them to a buffer in a major-mode specific to the type of candidates, such as dired for a set of files, ibuffer for a set of buffers, or customize for a set of variables.&lt;/p&gt; 
&lt;p&gt;** Acting on targets&lt;/p&gt; 
&lt;p&gt;You can think of =embark-act= as a keyboard-based version of a right-click contextual menu. The =embark-act= command (which you should bind to a convenient key), acts as a prefix for a keymap offering you relevant /actions/ to use on a /target/ determined by the context:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In the minibuffer, the target is the current top completion candidate.&lt;/li&gt; 
 &lt;li&gt;In the =&lt;em&gt;Completions&lt;/em&gt;= buffer the target is the completion at point.&lt;/li&gt; 
 &lt;li&gt;In a regular buffer, the target is the region if active, or else the file, symbol, URL, s-expression or defun at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Multiple targets can be present at the same location and you can cycle between them by repeating the =embark-act= key binding. The type of actions offered depend on the type of the target. Here is a sample of a few of the actions offered in the default configuration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For files you get offered actions like deleting, copying, renaming, visiting in another window, running a shell command on the file, etc.&lt;/li&gt; 
 &lt;li&gt;For buffers the actions include switching to or killing the buffer.&lt;/li&gt; 
 &lt;li&gt;For package names the actions include installing, removing or visiting the homepage.&lt;/li&gt; 
 &lt;li&gt;For Emacs Lisp symbols the actions include finding the definition, looking up documentation, evaluating (which for a variable immediately shows the value, but for a function lets you pass it some arguments first). There are some actions specific to variables, such as setting the value directly or though the customize system, and some actions specific to commands, such as binding it to a key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default when you use =embark-act= if you don&#39;t immediately select an action, after a short delay Embark will pop up a buffer showing a list of actions and their corresponding key bindings. If you are using =embark-act= outside the minibuffer, Embark will also highlight the current target. These behaviors are configurable via the variable =embark-indicators=. Instead of selecting an action via its key binding, you can select it by name with completion by typing =C-h= after =embark-act=.&lt;/p&gt; 
&lt;p&gt;Everything is easily configurable: determining the current target, classifying it, and deciding which actions are offered for each type in the classification. The above introduction just mentions part of the default configuration.&lt;/p&gt; 
&lt;p&gt;Configuring which actions are offered for a type is particularly easy and requires no programming: the variable =embark-keymap-alist= associates target types with variables containing keymaps, and those keymaps containing bindings for the actions. (To examine the available categories and their associated keymaps, you can use =C-h v embark-keymap-alist= or customize that variable.) For example, in the default configuration the type =file= is associated with the symbol =embark-file-map=. That symbol names a keymap with single-letter key bindings for common Emacs file commands, for instance =c= is bound to =copy-file=. This means that if you are in the minibuffer after running a command that prompts for a file, such as =find-file= or =rename-file=, you can copy a file by running =embark-act= and then pressing =c=.&lt;/p&gt; 
&lt;p&gt;These action keymaps are very convenient but not strictly necessary when using =embark-act=: you can use any command that reads from the minibuffer as an action and the target of the action will be inserted at the first minibuffer prompt. After running =embark-act= all of your key bindings and even =execute-extended-command= can be used to run a command. For example, if you want to replace all occurrences of the symbol at point, just use =M-%= as the action, there is no need to bind =query-replace= in one of Embark&#39;s keymaps. Also, those action keymaps are normal Emacs keymaps and you should feel free to bind in them whatever commands you find useful as actions and want to be available through convenient bindings.&lt;/p&gt; 
&lt;p&gt;The actions in =embark-general-map= are available no matter what type of completion you are in the middle of. By default this includes bindings to save the current candidate in the kill ring and to insert the current candidate in the previously selected buffer (the buffer that was current when you executed a command that opened up the minibuffer).&lt;/p&gt; 
&lt;p&gt;Emacs&#39;s minibuffer completion system includes metadata indicating the /category/ of what is being completed. For example, =find-file=&#39;s metadata indicates a category of =file= and =switch-to-buffer=&#39;s metadata indicates a category of =buffer=. Embark has the related notion of the /type/ of a target for actions, and by default when category metadata is present it is taken to be the type of minibuffer completion candidates when used as targets. Emacs commands often do not set useful category metadata so the [[https://github.com/minad/marginalia][Marginalia]] package, which supplies this missing metadata, is highly recommended for use with Embark.&lt;/p&gt; 
&lt;p&gt;Embark&#39;s default configuration has actions for the following target types: files, buffers, symbols, packages, URLs, bookmarks, and as a somewhat special case, actions for when the region is active. You can read about the [[https://github.com/oantolin/embark/wiki/Default-Actions][default actions and their key bindings]] on the GitHub project wiki.&lt;/p&gt; 
&lt;p&gt;** The default action on a target&lt;/p&gt; 
&lt;p&gt;Embark has a notion of default action for a target:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If the target is a minibuffer completion candidate, then the default action is whatever command opened the minibuffer in the first place. For example if you run =kill-buffer=, then the default action will be to kill buffers.&lt;/li&gt; 
 &lt;li&gt;If the target comes from a regular buffer (i.e., not a minibuffer), then the default action is whatever is bound to =RET= in the keymap of actions for that type of target. For example, in Embark&#39;s default configuration for a URL found at point the default action is =browse-url=, because =RET= is bound to =browse-url= in the =embark-url-map= keymap.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To run the default action you can press =RET= after running =embark-act=. Note that if there are several different targets at a given location, each has its own default action, so first cycle to the target you want and then press =RET= to run the corresponding default action.&lt;/p&gt; 
&lt;p&gt;There is also =embark-dwim= which runs the default action for the first target found. It&#39;s pretty handy in non-minibuffer buffers: with Embark&#39;s default configuration it will:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open the file at point.&lt;/li&gt; 
 &lt;li&gt;Open the URL at point in a web browser (using the =browse-url= command).&lt;/li&gt; 
 &lt;li&gt;Compose a new email to the email address at point.&lt;/li&gt; 
 &lt;li&gt;In an Emacs Lisp buffer, if point is on an opening parenthesis or right after a closing one, it will evaluate the corresponding expression.&lt;/li&gt; 
 &lt;li&gt;Go to the definition of an Emacs Lisp function, variable or macro at point.&lt;/li&gt; 
 &lt;li&gt;Find the file corresponding to an Emacs Lisp library at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Working with sets of possible targets&lt;/p&gt; 
&lt;p&gt;Besides acting individually on targets, Embark lets you work collectively on a set of target /candidates/. For example, while you are in the minibuffer the candidates are simply the possible completions of your input. Embark provides three main commands to work on candidate sets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The =embark-act-all= command runs the same action on each of the current candidates. It is just like using =embark-act= on each candidate in turn. (Because you can easily act on many more candidates than you meant to, by default Embark asks you to confirm uses of =embark-act-all=; you can turn this off by setting the user option =embark-confirm-act-all= to =nil=.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The =embark-collect= command produces a buffer listing all the current candidates, for you to peruse and run actions on at your leisure. The candidates are displayed as a list showing additional annotations. If any of the candidates contain newlines, then horizontal lines are used to separate candidates.&lt;/p&gt; &lt;p&gt;The Embark Collect buffer is somewhat &quot;dired-like&quot;: you can select and deselect candidates through =embark-select= (available as an action in =embark-act=, bound to =SPC=; but you could also give it a global key binding). In an Embark Collect buffer =embark-act= is bound to =a= and =embark-act-all= is bound to =A=; =embark-act-all= will act on all currently marked candidates if there any, and will act on all candidates if none are marked. In particular, this means that =a SPC= will toggle whether the candidate at point is selected, and =A SPC= will select all candidates if none are selected, or deselect all selected candidates if there are some.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The =embark-export= command tries to open a buffer in an appropriate major mode for the set of candidates. If the candidates are files export produces a Dired buffer; if they are buffers, you get an Ibuffer buffer; and if they are packages you get a buffer in package menu mode.&lt;/p&gt; &lt;p&gt;If you use the grepping commands from the [[https://github.com/minad/consult/][Consult]] package, =consult-grep=, =consult-git-grep= or =consult-ripgrep=, then you should install the =embark-consult= package, which adds support for exporting a list of grep results to an honest grep-mode buffer, on which you can even use [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] if you wish.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When in doubt choosing between exporting and collecting, a good rule of thumb is to always prefer =embark-export= since when an exporter to a special major mode is available for a given type of target, it will be more featureful than an Embark collect buffer, and if no such exporter is configured the =embark-export= command falls back to the generic =embark-collect=.&lt;/p&gt; 
&lt;p&gt;These commands are always available as &quot;actions&quot; (although they do not act on just the current target but on all candidates) for =embark-act= and are bound to =A=, =S= (for &quot;snapshot&quot;), and =E=, respectively, in =embark-general-map=. This means that you do not have to bind your own key bindings for these (although you can, of course!), just a key binding for =embark-act=.&lt;/p&gt; 
&lt;p&gt;In Embark Collect or Embark Export buffers that were obtained by running =embark-collect= or =embark-export= from within a minibuffer completion session, =g= is bound to a command that restarts the completion session, that is, the command that opened the minibuffer is run again and the minibuffer contents restored. You can then interact normally with the command, perhaps editing the minibuffer contents, and, if you wish, you can rerun =embark-collect= or =embark-export= to get an updated buffer.&lt;/p&gt; 
&lt;p&gt;*** Selecting some targets to make an ad hoc candidate set&lt;/p&gt; 
&lt;p&gt;The commands for working with sets of candidates just described, namely =embark-act-all=, =embark-export= and =embark-collect= by default work with all candidates defined in the current context. For example, in the minibuffer they operate on all currently completion candidates, or in a dired buffer they work on all marked files (or all files if none are marked). Embark also has a notion of /selection/, where you can accumulate an ad hoc list of targets for these commands to work on.&lt;/p&gt; 
&lt;p&gt;The selection is controlled by using the =embark-select= action, bound to =SPC= in =embark-general-map= so that it is always available (you can also give =embark-select= a global key binding if you wish; when called directly, not as an action for =embark-act=, it will select the first target at point). Calling this action on a target toggles its membership in the current buffer&#39;s Embark selection; that is, it adds it to selection if not selected and removes it from the selection if it was selected. Whenever the selection for a buffer is non-empty, the commands =embark-act-all=, =embark-export= and =embark-collect= will act on the selection.&lt;/p&gt; 
&lt;p&gt;To deselect all selected targets, you can use the =embark-select= action through =embark-act-all=, since this will run =embark-select= on each member of the current selection. Similarly if no targets are selected and you are in a minibuffer completion session, running =embark-select= from =embark-act-all= will select all the current completion candidates.&lt;/p&gt; 
&lt;p&gt;By default, whenever some targets are selected in the current buffer, a count of selected targets appears in the mode line. This can be turned off or customized through the =embark-selection-indicator= user option.&lt;/p&gt; 
&lt;p&gt;The selection functionality is supported in every buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In the minibuffer this gives a convenient way to act on several completion candidates that don&#39;t follow any simple pattern: just go through the completions selecting the ones you want, then use =embark-act-all=. For example, you could attach several files at once to an email.&lt;/li&gt; 
 &lt;li&gt;For Embark Collect buffers this functionality enables a dired-like workflow, in which you mark various candidates and apply an action to all at once. (It supersedes a previous ad hoc dired-like interface that was implemented only in Embark Collect buffers, with a slightly different interface.)&lt;/li&gt; 
 &lt;li&gt;In a eww buffer you could use this to select various links you wish to follow up on, and then collect them into a buffer. Similarly, while reading Emacs&#39;s info manual you could select some symbols you want to read more about and export them to an =apropos-mode= buffer.&lt;/li&gt; 
 &lt;li&gt;You can use selections in regular text or programming buffers to do complex editing operations. For example, if you have three paragraphs scattered over a file and you want to bring them together, you can select each one, insert them all somewhere and finally delete all of them (from their original locations).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** =embark-live= a live-updating variant of =embark-collect=&lt;/p&gt; 
&lt;p&gt;Finally, there is also an =embark-live= variant of the =embark-collect= command which automatically updates the collection after each change in the source buffer. Users of a completion UI that automatically updates and displays the candidate list (such as Vertico, Icomplete, Fido-mode, or MCT) will probably not want to use =embark-live= from the minibuffer as they will then have two live updating displays of the completion candidates!&lt;/p&gt; 
&lt;p&gt;A more likely use of =embark-live= is to be called from a regular buffer to display a sort of live updating &quot;table of contents&quot; for the buffer. This depends on having appropriate candidate collectors configured in =embark-candidate-collectors=. There are not many in Embark&#39;s default configuration, but you can try this experiment: open a dired buffer in a directory that has very many files, mark a few, and run =embark-live=. You&#39;ll get an Embark Collect buffer containing only the marked files, which updates as you mark or unmark files in dired. To make =embark-live= genuinely useful other candidate collectors are required. The =embark-consult= package (documented near the end of this manual) contains a few: one for imenu items and one for outline headings as used by =outline-minor-mode=. Those collectors really do give =embark-live= a table-of-contents feel.&lt;/p&gt; 
&lt;p&gt;** Switching to a different command without losing what you&#39;ve typed&lt;/p&gt; 
&lt;p&gt;Embark also has the =embark-become= command which is useful for when you run a command, start typing at the minibuffer and realize you meant a different command. The most common case for me is that I run =switch-to-buffer=, start typing a buffer name and realize I haven&#39;t opened the file I had in mind yet! I&#39;ll use this situation as a running example to illustrate =embark-become=. When this happens I can, of course, press =C-g= and then run =find-file= and open the file, but this requires retyping the portion of the file name you already typed. This process can be streamlined with =embark-become=: while still in the =switch-to-buffer= you can run =embark-become= and effectively make the =switch-to-buffer= command become =find-file= for this run.&lt;/p&gt; 
&lt;p&gt;You can bind =embark-become= to a key in =minibuffer-local-map=, but it is also available as an action under the letter =B= (uppercase), so you don&#39;t need a binding if you already have one for =embark-act=. So, assuming I have =embark-act= bound to, say, =C-.=, once I realize I haven&#39;t open the file I can type =C-. B C-x C-f= to have =switch-to-buffer= become =find-file= without losing what I have already typed in the minibuffer.&lt;/p&gt; 
&lt;p&gt;But for even more convenience, =embark-become= offers shorter key bindings for commands you are likely to want the current command to become. When you use =embark-become= it looks for the current command in all keymaps named in the list =embark-become-keymaps= and then activates all keymaps that contain it. For example, the default value of =embark-become-keymaps= contains a keymap =embark-become-file+buffer-map= with bindings for several commands related to files and buffers, in particular, it binds =switch-to-buffer= to =b= and =find-file= to =f=. So when I accidentally try to switch to a buffer for a file I haven&#39;t opened yet, =embark-become= finds that the command I ran, =switch-to-buffer=, is in the keymap =embark-become-file+buffer-map=, so it activates that keymap (and any others that also contain a binding for =switch-to-buffer=). The end result is that I can type =C-. B f= to switch to =find-file=.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quick start&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The easiest way to install Embark is from GNU ELPA, just run =M-x package-install RET embark RET=. (It is also available on MELPA.) It is highly recommended to also install [[https://github.com/minad/marginalia][Marginalia]] (also available on GNU ELPA), so that Embark can offer you preconfigured actions in more contexts. For =use-package= users, the following is a very reasonable starting configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package marginalia :ensure t :config (marginalia-mode))&lt;/p&gt; 
&lt;p&gt;(use-package embark :ensure t&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:bind
((&quot;C-.&quot; . embark-act)         ;; pick some comfortable binding
 (&quot;C-;&quot; . embark-dwim)        ;; good alternative: M-.
 (&quot;C-h B&quot; . embark-bindings)) ;; alternative for `describe-bindings&#39;

:init

;; Optionally replace the key help with a completing-read interface
(setq prefix-help-command #&#39;embark-prefix-help-command)

;; Show the Embark target at point via Eldoc. You may adjust the
;; Eldoc strategy, if you want to see the documentation from
;; multiple providers. Beware that using this can be a little
;; jarring since the message shown in the minibuffer can be more
;; than one line, causing the modeline to move up and down:

;; (add-hook &#39;eldoc-documentation-functions #&#39;embark-eldoc-first-target)
;; (setq eldoc-documentation-strategy #&#39;eldoc-documentation-compose-eagerly)

;; Add Embark to the mouse context menu. Also enable `context-menu-mode&#39;.
;; (context-menu-mode 1)
;; (add-hook &#39;context-menu-functions #&#39;embark-context-menu 100)

:config

;; Hide the mode line of the Embark live/completions buffers
(add-to-list &#39;display-buffer-alist
             &#39;(&quot;\\`\\*Embark Collect \\(Live\\|Completions\\)\\*&quot;
               nil
               (window-parameters (mode-line-format . none)))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;;; Consult users will also want the embark-consult package. (use-package embark-consult :ensure t ; only need to install it, embark loads it after consult if found :hook (embark-collect-mode . consult-preview-at-point-mode)) #+end_src&lt;/p&gt; 
&lt;p&gt;About the suggested key bindings for =embark-act= and =embark-dwim=:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Those key bindings are unlikely to work in the terminal, but terminal users are probably well aware of this and will know to select different bindings.&lt;/li&gt; 
 &lt;li&gt;The suggested =C-.= binding is used by default in (at least some installations of) GNOME to input emojis, and Emacs doesn&#39;t even get a chance to respond to the binding. You can select a different key binding for =embark-act= or use =ibus-setup= to change the shortcut for emoji insertion (Emacs 29 uses =C-x 8 e e=, in case you want to set the same one system-wide).&lt;/li&gt; 
 &lt;li&gt;The suggested alternative of =M-.= for =embark-dwim= is bound by default to =xref-find-definitions=. That is a very useful command but overwriting it with =embark-dwim= is sensible since in Embark&#39;s default configuration, =embark-dwim= will also find the definition of the identifier at point. (Note that =xref-find-definitions= with a prefix argument prompts you for an identifier, =embark-dwim= does not cover this case).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other Embark commands such as =embark-act-all=, =embark-become=, =embark-collect=, and =embark-export= can be run through =embark-act= as actions bound to =A=, =B=, =S= (for &quot;snapshot&quot;), and =E= respectively, and thus don&#39;t really need a dedicated key binding, but feel free to bind them directly if you so wish. If you do choose to bind them directly, you&#39;ll probably want to bind them in =minibuffer-local-map=, since they are most useful in the minibuffer (in fact, =embark-become= only works in the minibuffer).&lt;/p&gt; 
&lt;p&gt;The command =embark-dwim= executes the default action at point. Another good keybinding for =embark-dwim= is =M-.= since =embark-dwim= acts like =xref-find-definitions= on the symbol at point. =C-.= can be seen as a right-click context menu at point and =M-.= acts like left-click. The keybindings are mnemonic, both act at the point (=.=).&lt;/p&gt; 
&lt;p&gt;Embark needs to know what your minibuffer completion system considers to be the list of candidates and which one is the current candidate. Embark works out of the box if you use Emacs&#39;s default tab completion, the built-in =icomplete-mode= or =fido-mode=, or the third-party packages [[https://github.com/minad/vertico][Vertico]] or [[https://github.com/abo-abo/swiper][Ivy]].&lt;/p&gt; 
&lt;p&gt;If you are a [[https://emacs-helm.github.io/helm/][Helm]] or [[https://github.com/abo-abo/swiper][Ivy]] user you are unlikely to want Embark since those packages include comprehensive functionality for acting on minibuffer completion candidates. (Embark does come with Ivy integration despite this.)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Advanced configuration ** Showing information about available targets and actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, if you run =embark-act= and do not immediately select an action, after a short delay Embark will pop up a buffer called =&lt;em&gt;Embark Actions&lt;/em&gt;= containing a list of available actions with their key bindings. You can scroll that buffer with the mouse of with the usual commands =scroll-other-window= and =scroll-other-window-down= (bound by default to =C-M-v= and =C-M-S-v=).&lt;/p&gt; 
&lt;p&gt;That functionality is provided by the =embark-mixed-indicator=, but Embark has other indicators that can provide information about the target and its type, what other targets you can cycle to, and which actions have key bindings in the action map for the current type of target. Any number of indicators can be active at once and the user option =embark-indicators= should be set to a list of the desired indicators.&lt;/p&gt; 
&lt;p&gt;Embark comes with the following indicators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=embark-minimal-indicator=: shows a messages in the echo area or minibuffer prompt showing the current target and the types of all targets starting with the current one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark-highlight-indicator=: highlights the target at point; on by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark-verbose-indicator=: displays a table of actions and their key bindings in a buffer; this is not on by default, in favor of the mixed indicator described next.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark-mixed-indicator=: starts out by behaving as the minimal indicator but after a short delay acts as the verbose indicator; this is on by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark-isearch-highlight-indicator=: this only does something when the current target is the symbol at point, in which case it lazily highlights all occurrences of that symbol in the current buffer, like isearch; also on by default.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users of the popular [[https://github.com/justbur/emacs-which-key][which-key]] package may prefer to use the =embark-which-key-indicator= from the [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][Embark wiki]]. Just copy its definition from the wiki into your configuration and customize the =embark-indicators= user option to exclude the mixed and verbose indicators and to include =embark-which-key-indicator=.&lt;/p&gt; 
&lt;p&gt;If you use [[https://github.com/minad/vertico][Vertico]], there is an even easier way to get a =which-key=-like display that also lets you use completion to narrow down the list of alternatives, described at the end of the next section.&lt;/p&gt; 
&lt;p&gt;** Selecting commands via completions instead of key bindings&lt;/p&gt; 
&lt;p&gt;As an alternative to reading the list of actions in the verbose or mixed indicators (see the previous section for a description of these), you can press the =embark-help-key=, which is =C-h= by default (but you may prefer =?= to free up =C-h= for use as a prefix) after running =embark-act=. Pressing the help key will prompt you for the name of an action with completion (but feel free to enter a command that is not among the offered candidates!), and will also remind you of the key bindings. You can press =embark-keymap-prompter-key=, which is =@= by default, at the prompt and then one of the key bindings to enter the name of the corresponding action.&lt;/p&gt; 
&lt;p&gt;You may think that with the =&lt;em&gt;Embark Actions&lt;/em&gt;= buffer popping up to remind you of the key bindings you&#39;d never want to use completion to select an action by name, but personally I find that typing a small portion of the action name to narrow down the list of candidates feels significantly faster than visually scanning the entire list of actions.&lt;/p&gt; 
&lt;p&gt;If you find you prefer selecting actions that way, you can configure embark to always prompt you for actions by setting the variable =embark-prompter= to =embark-completing-read-prompter=.&lt;/p&gt; 
&lt;p&gt;On the other hand, you may wish to continue using key bindings for the actions you perform most often, and to use completion only to explore what further actions are available or when you&#39;ve forgotten a key binding. In that case, you may prefer to use the minimal indicator, which does not pop-up an =&lt;em&gt;Embark Actions&lt;/em&gt;= buffer at all, and to use the =embark-help-key= whenever you need help. This unobtrusive setup is achieved with the following configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq embark-indicators &#39;(embark-minimal-indicator ; default is embark-mixed-indicator embark-highlight-indicator embark-isearch-highlight-indicator)) #+end_src&lt;/p&gt; 
&lt;p&gt;[[https://github.com/minad/vertico][Vertico]] users may wish to configure a grid display for the actions and key-bindings, reminiscent of the popular package [[https://github.com/justbur/emacs-which-key][which-key]], but, of course, enhanced by the use of completion to narrow the list of commands. In order to get the grid display, put the following in your Vertico configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;vertico-multiform-categories &#39;(embark-keybinding grid)) (vertico-multiform-mode) #+end_src&lt;/p&gt; 
&lt;p&gt;This will make the available keys be shown in a compact grid like in =which-key=. The =vertico-multiform-mode= also enables keys such as =M-V=, =M-G=, =M-B=, and =M-U= for manually switching between layouts in Vertico buffers.&lt;/p&gt; 
&lt;p&gt;*** Selecting commands via completion outside of Embark&lt;/p&gt; 
&lt;p&gt;If you like this completion interface for exploring key bindings for Embark actions, you may want to use it elsewhere in Emacs. You can use Embark&#39;s completion-based command prompter to list:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;key bindings under a prefix,&lt;/li&gt; 
 &lt;li&gt;local key bindings, or&lt;/li&gt; 
 &lt;li&gt;all key bindings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To use it for key bindings under a prefix (you can use this to replace the =which-key= package, for example), use this configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq prefix-help-command #&#39;embark-prefix-help-command) #+end_src&lt;/p&gt; 
&lt;p&gt;Now, when you have started on a prefix sequence such as =C-x= or =C-c=, pressing =C-h= will bring up the Embark version of the built-in =prefix-help-command=, which will list the keys under that prefix and their bindings, and lets you select the one you wanted with completion, or by key binding if you press =embark-keymap-prompter-key=.&lt;/p&gt; 
&lt;p&gt;To list local or global key bindings, use the command =embark-bindings=. You can bind that to =C-h b=, which is the default key binding for the built-in =describe-bindings= command, which this command can replace. By default, =embark-bindings= lists local key bindings, typically those bound in the major mode keymap; to get global bindings as well, call it with a =C-u= prefix argument.&lt;/p&gt; 
&lt;p&gt;** Quitting the minibuffer after an action&lt;/p&gt; 
&lt;p&gt;By default, if you call =embark-act= from the minibuffer it quits the minibuffer after performing the action. You can change this by setting the user option =embark-quit-after-action= to =nil=. Having =embark-act= /not/ quit the minibuffer can be useful to turn commands into little &quot;thing managers&quot;. For example, you can use =find-file= as a little file manager or =describe-package= as a little package manager: you can run those commands, perform a series of actions, and then quit the command.&lt;/p&gt; 
&lt;p&gt;If you want to control the quitting behavior in a fine-grained manner depending on the action, you can set =embark-quit-after-action= to an alist, associating commands to either =t= for quitting or =nil= for not quitting. When using an alist, you can use the special key =t= to specify the default behavior. For example, to specify that by default actions should not quit the minibuffer but that using =kill-buffer= as an action should quit, you can use the following configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq embark-quit-after-action &#39;((kill-buffer . t) (t . nil))) #+end_src&lt;/p&gt; 
&lt;p&gt;The variable =embark-quit-after-action= only specifies a default, that is, it only controls whether or not =embark-act= quits the minibuffer when you call it without a prefix argument, and you can select the opposite behavior to what the variable says by calling =embark-act= with =C-u=. Also note that both the variable =embark-quit-after-action= and =C-u= have no effect when you call =embark-act= outside the minibuffer.&lt;/p&gt; 
&lt;p&gt;If you find yourself using the quitting and non-quitting variants of =embark-act= about equally often, independently of the action, you may prefer to simply have separate commands for them instead of a single command that you call with =C-u= half the time. You could, for example, keep the default exiting behavior of =embark-act= and define a non-quitting version as follows:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun embark-act-noquit () &quot;Run action but don&#39;t quit the minibuffer afterwards.&quot; (interactive) (let ((embark-quit-after-action nil)) (embark-act))) #+end_src&lt;/p&gt; 
&lt;p&gt;** Running some setup after injecting the target&lt;/p&gt; 
&lt;p&gt;You can customize what happens after the target is inserted at the minibuffer prompt of an action. There are =embark-target-injection-hooks=, that are run by default after injecting the target into the minibuffer. The variable =embark-target-injection-hooks= is an alist associating commands to their setup hooks. There are two special keys: if no setup hook is specified for a given action, the hook associated to =t= is run; and the hook associated to =:always= is run regardless of the action. (This variable used to have the less explicit name of =embark-setup-action-hooks=, so please update your configuration.)&lt;/p&gt; 
&lt;p&gt;For example, consider using =shell-command= as an action during file completion. It would be useful to insert a space before the target file name and to leave the point at the beginning, so you can immediately type the shell command to run on that file. That&#39;s why in Embark&#39;s default configuration there is an entry in =embark-target-injection-hooks= associating =shell-command= to a hook that includes =embark--shell-prep=, a simple helper function that quotes all the spaces in the file name, inserts an extra space at the beginning of the line and leaves point to the left of it.&lt;/p&gt; 
&lt;p&gt;Now, the preparation that =embark--shell-prep= does would be useless if Embark did what it normally does after it inserts the target of the action at the minibuffer prompt, which is to &quot;press =RET=&quot; for you, accepting the target as is; if Embark did that for =shell-command= you wouldn&#39;t get a chance to type in the command to execute! That is why in Embark&#39;s default configuration the entry for =shell-command= in =embark-target-injection-hooks= also contains the function =embark--allow-edit=.&lt;/p&gt; 
&lt;p&gt;Embark used to have a dedicated variable =embark-allow-edit-actions= to which you could add commands for which Embark should forgo pressing =RET= for you after inserting the target. Since its effect can also be achieved via the general =embark-target-injection-hooks= mechanism, that variable has been removed to simplify Embark. Be sure to update your configuration; if you had something like:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;embark-allow-edit-actions &#39;my-command) #+end_src&lt;/p&gt; 
&lt;p&gt;you should replace it with:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (push &#39;embark--allow-edit (alist-get &#39;my-command embark-target-injection-hooks)) #+end_src&lt;/p&gt; 
&lt;p&gt;Also note that while you could abuse =embark--allow-edit= so that you have to confirm &quot;dangerous&quot; actions such as =delete-file=, it is better to implement confirmation by adding the =embark--confirm= function to the appropriate entry of a different hook alist, namely, =embark-pre-action-hooks=.&lt;/p&gt; 
&lt;p&gt;Besides =embark--allow-edit=, Embark comes with another function that is of general utility in action setup hooks: =embark--ignore-target=. Use it for commands that do prompt you in the minibuffer but for which inserting the target would be inappropriate. This is not a common situation but does occasionally arise. For example it is used by default for =shell-command-on-region=: that command is used as an action for region targets, and it prompts you for a shell command; you typically do /not/ want the target, that is the contents of the region, to be entered at that prompt!&lt;/p&gt; 
&lt;p&gt;** Running hooks before, after or around an action&lt;/p&gt; 
&lt;p&gt;Embark has three variables, =embark-pre-action-hooks=, =embark-post-action-hooks= and =embark-around-action-hooks=, which are alists associating commands to hooks that should run before or after or as around advice for the command when used as an action. As with =embark-target-injection-hooks=, there are two special keys for the alists: =t= designates the default hook to run when no specific hook is specified for a command; and the hook associated to =:always= runs regardless.&lt;/p&gt; 
&lt;p&gt;The default values of those variables are fairly extensive, adding creature comforts to make running actions a smooth experience. Embark comes with several functions intended to be added to these hooks, and used in the default values of =embark-pre-action-hooks=, =embark-post-action-hooks= and =embark-around-action-hooks=.&lt;/p&gt; 
&lt;p&gt;For pre-action hooks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=embark--confirm= :: Prompt the user for confirmation before executing the action. This is used be default for commands deemed &quot;dangerous&quot;, or, more accurately, hard to undo, such as =delete-file= and =kill-buffer=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--unmark-target= :: Unmark the active region. Use this for commands you want to act on the region contents but without the region being active. The default configuration uses this function as a pre-action hook for =occur= and =query-replace=, for example, so that you can use them as actions with region targets to search the whole buffer for the text contained in the region. Without this pre-action hook using =occur= as an action for a region target would be pointless: it would search for the the region contents /in the region/, (typically, due to the details of regexps) finding only one match!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--beginning-of-target= :: Move to the beginning of the target (for targets that report bounds). This is used by default for backward motion commands such as =backward-sexp=, so that they don&#39;t accidentally leave you on the current target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--end-of-target= :: Move to the end of the target. This is used similarly to the previous function, but also for commands that act on the last s-expression like =eval-last-sexp=. This allow you to act on an s-expression from anywhere inside it and still use =eval-last-sexp= as an action.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--xref-push-markers= :: Push the current location on the xref marker stack. Use this for commands that take you somewhere and for which you&#39;d like to be able to come back to where you were using =xref-pop-marker-stack=. This is used by default for =find-library=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For post-action hooks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=embark--restart= :: Restart the command currently prompting in the minibuffer, so that the list of completion candidates is updated. This is useful as a post action hook for commands that delete or rename a completion candidate; for example the default value of =embark-post-action-hooks= uses it for =delete-file=, =kill-buffer=, =rename-file=, =rename-buffer=, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For around-action hooks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=embark--mark-target= :: Save existing mark and point location, mark the target and run the action. Most targets at point outside the minibuffer report which region of the buffer they correspond to (this is the information used by =embark-highlight-indicator= to know what portion of the buffer to highlight); this function marks that region. It is useful as an around action hook for commands that expect a region to be marked, for example, it is used by default for =indent-region= so that it works on s-expression targets, or for =fill-region= so that it works on paragraph targets.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--cd= :: Run the action with =default-directory= set to the directory associated to the current target. The target should be of type =file=, =buffer=, =bookmark= or =library=, and the associated directory is what you&#39;d expect in each case.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--narrow-to-target= :: Run the action with buffer narrowed to current target. Use this as an around hook to localize the effect of actions that don&#39;t already work on just the region. In the default configuration it is used for =repunctuate-sentences=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=embark--save-excursion= :: Run the action restoring point at the end. The current default configuration doesn&#39;t use this but it is available for users.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Creating your own keymaps&lt;/p&gt; 
&lt;p&gt;All internal keymaps are defined with the standard helper macro =defvar-keymap=. For example a simple version of the file action keymap could be defined as follows:&lt;/p&gt; 
&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar-keymap embark-file-map :doc &quot;Example keymap with a few file actions&quot; :parent embark-general-map &quot;d&quot; #&#39;delete-file &quot;r&quot; #&#39;rename-file &quot;c&quot; #&#39;copy-file) #+END_SRC&lt;/p&gt; 
&lt;p&gt;These action keymaps are perfectly normal Emacs keymaps. You may want to inherit from the =embark-general-map= if you want to access the default Embark actions. Note that =embark-collect= and =embark-export= are also made available via =embark-general-map=.&lt;/p&gt; 
&lt;p&gt;** Defining actions for new categories of targets&lt;/p&gt; 
&lt;p&gt;It is easy to configure Embark to provide actions for new types of targets, either in the minibuffer or outside it. I present below two very detailed examples of how to do this. At several points I&#39;ll explain more than one way to proceed, typically with the easiest option first. I include the alternative options since there will be similar situations where the easiest option is not available.&lt;/p&gt; 
&lt;p&gt;*** New minibuffer target example - tab-bar tabs&lt;/p&gt; 
&lt;p&gt;As an example let us take a look at the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Tab-Bars.html][tab bars]]. I&#39;ll explain how to configure Embark to offer tab-specific actions when you use the tab-bar-mode commands that mention tabs by name. The configuration explained here is now built-in to Embark (and Marginalia), but it&#39;s still a good self-contained example. In order to setup up tab actions you would need to: (1) make sure Embark knows those commands deal with tabs, (2) define a keymap for tab actions and configure Embark so it knows that&#39;s the keymap you want.&lt;/p&gt; 
&lt;p&gt;**** Telling Embark about commands that prompt for tabs by name&lt;/p&gt; 
&lt;p&gt;For step (1), it would be great if the =tab-bar-mode= commands reported the completion category =tab= when asking you for a tab with completion. (All built-in Emacs commands that prompt for file names, for example, do have metadata indicating that they want a =file=.) They do not, unfortunately, and I will describe a couple of ways to deal with this.&lt;/p&gt; 
&lt;p&gt;Maybe the easiest thing is to configure [[https://github.com/minad/marginalia][Marginalia]] to enhance those commands. All of the =tab-bar-*-tab-by-name= commands have the words &quot;tab by name&quot; in the minibuffer prompt, so you can use:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-prompt-categories &#39;(&quot;tab by name&quot; . tab)) #+end_src&lt;/p&gt; 
&lt;p&gt;That&#39;s it! But in case you are ever in a situation where you don&#39;t already have commands that prompt for the targets you want, I&#39;ll describe how writing your own command with appropriate =category= metadata looks:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-select-tab-by-name (tab) (interactive (list (let ((tab-list (or (mapcar (lambda (tab) (cdr (assq &#39;name tab))) (tab-bar-tabs)) (user-error &quot;No tabs found&quot;)))) (completing-read &quot;Tabs: &quot; (lambda (string predicate action) (if (eq action &#39;metadata) &#39;(metadata (category . tab)) (complete-with-action action tab-list string predicate))))))) (tab-bar-select-tab-by-name tab)) #+end_src&lt;/p&gt; 
&lt;p&gt;As you can see, the built-in support for setting the category meta-datum is not very easy to use or pretty to look at. To help with this I recommend the =consult--read= function from the excellent [[https://github.com/minad/consult/][Consult]] package. With that function we can rewrite the command as follows:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-select-tab-by-name (tab) (interactive (list (let ((tab-list (or (mapcar (lambda (tab) (cdr (assq &#39;name tab))) (tab-bar-tabs)) (user-error &quot;No tabs found&quot;)))) (consult--read tab-list :prompt &quot;Tabs: &quot; :category &#39;tab)))) (tab-bar-select-tab-by-name tab)) #+end_src&lt;/p&gt; 
&lt;p&gt;Much nicer! No matter how you define the =my-select-tab-by-name= command, the first approach with Marginalia and prompt detection has the following advantages: you get the =tab= category for all the =tab-bar-*-bar-by-name= commands at once, also, you enhance built-in commands, instead of defining new ones.&lt;/p&gt; 
&lt;p&gt;**** Defining and configuring a keymap for tab actions&lt;/p&gt; 
&lt;p&gt;Let&#39;s say we want to offer select, rename and close actions for tabs (in addition to Embark general actions, such as saving the tab name to the kill-ring, which you get for free). Then this will do:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defvar-keymap embark-tab-actions :doc &quot;Keymap for actions for tab-bar tabs (when mentioned by name).&quot; :parent embark-general-map &quot;s&quot; #&#39;tab-bar-select-tab-by-name &quot;r&quot; #&#39;tab-bar-rename-tab-by-name &quot;k&quot; #&#39;tab-bar-close-tab-by-name)&lt;/p&gt; 
&lt;p&gt;(add-to-list &#39;embark-keymap-alist &#39;(tab . embark-tab-actions)) #+end_src&lt;/p&gt; 
&lt;p&gt;What if after using this for a while you feel closing the tab without confirmation is dangerous? You have a couple of options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can keep using the =tab-bar-close-tab-by-name= command, but have Embark ask you for confirmation: #+begin_src emacs-lisp (push #&#39;embark--confirm (alist-get &#39;tab-bar-close-tab-by-name embark-pre-action-hooks)) #+end_src&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can write your own command that prompts for confirmation and use that instead of =tab-bar-close-tab-by-name= in the above keymap: #+begin_src emacs-lisp (defun my-confirm-close-tab-by-name (tab) (interactive &quot;sTab to close: &quot;) (when (y-or-n-p (format &quot;Close tab &#39;%s&#39;? &quot; tab)) (tab-bar-close-tab-by-name tab))) #+end_src&lt;/p&gt; &lt;p&gt;Notice that this is a command you can also use directly from =M-x= independently of Embark. Using it from =M-x= leaves something to be desired, though, since you don&#39;t get completion for the tab names. You can fix this if you wish as described in the previous section.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;*** New target example in regular buffers - short Wikipedia links&lt;/p&gt; 
&lt;p&gt;Say you want to teach Embark to treat text of the form =wikipedia:Garry_Kasparov= in any regular buffer as a link to Wikipedia, with actions to open the Wikipedia page in eww or an external browser or to save the URL of the page in the kill-ring. We can take advantage of the actions that Embark has preconfigured for URLs, so all we need to do is teach Embark that =wikipedia:Garry_Kasparov= stands for the URL =&lt;a href=&quot;https://en.wikipedia.org/wiki/Garry_Kasparov=&quot;&gt;https://en.wikipedia.org/wiki/Garry_Kasparov=&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can be as fancy as you want with the recognized syntax. Here, to keep the example simple, I&#39;ll assume the link matches the regexp =wikipedia:[[:alnum:]_]+=. We will write a function that looks for a match surrounding point, and returns a dotted list of the form =&#39;(url URL-OF-THE-PAGE START . END)= where =START= and =END= are the buffer positions bounding the target, and are used by Embark to highlight it if you have =embark-highlight-indicator= included in the list =embark-indicators=. (There are a couple of other options for the return value of a target finder: the bounding positions are optional and a single target finder is allowed to return multiple targets; see the documentation for =embark-target-finders= for details.)&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-short-wikipedia-link () &quot;Target a link at point of the form wikipedia:Page_Name.&quot; (save-excursion (let* ((start (progn (skip-chars-backward &quot;[:alnum:]&lt;em&gt;:&quot;) (point))) (end (progn (skip-chars-forward &quot;[:alnum:]&lt;/em&gt;:&quot;) (point))) (str (buffer-substring-no-properties start end))) (save-match-data (when (string-match &quot;wikipedia:\([[:alnum:]_]+\)&quot; str) `(url ,(format &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/%s&quot;&gt;https://en.wikipedia.org/wiki/%s&lt;/a&gt;&quot; (match-string 1 str)) ,start . ,end))))))&lt;/p&gt; 
&lt;p&gt;(add-to-list &#39;embark-target-finders &#39;my-short-wikipedia-link) #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;How does Embark call the actions?&lt;/p&gt; &lt;p&gt;Embark actions are normal Emacs commands, that is, functions with an interactive specification. In order to execute an action, Embark calls the command with =call-interactively=, so the command reads user input exactly as if run directly by the user. For example the command may open a minibuffer and read a string (=read-from-minibuffer=) or open a completion interface (=completing-read=). If this happens, Embark takes the target string and inserts it automatically into the minibuffer, simulating user input this way. After inserting the string, Embark exits the minibuffer, submitting the input. (The immediate minibuffer exit can be disabled for specific actions in order to allow editing the input; this is done by adding the =embark--allow-edit= function to the appropriate entry of =embark-target-injection-hooks=). Embark inserts the target string at the first minibuffer opened by the action command, and if the command happens to prompt the user for input more than once, the user still interacts with the second and further prompts in the normal fashion. Note that if a command does not prompt the user for input in the minibuffer, Embark still allows you to use it as an action, but of course, never inserts the target anywhere. (There are plenty of examples in the default configuration of commands that do not prompt the user bound to keys in the action maps, most of the region actions, for instance.)&lt;/p&gt; &lt;p&gt;This is how Embark manages to reuse normal commands as actions. The mechanism allows you to use as Embark actions commands that were not written with Embark in mind (and indeed almost all actions that are bound by default in Embark&#39;s action keymaps are standard Emacs commands). It also allows you to write new custom actions in such a way that they are useful even without Embark.&lt;/p&gt; &lt;p&gt;Emacs has a variable =y-or-n-p-use-read-key=, which when set to =t= causes =y-or-n-p= to use =read-key= instead of =read-from-minibuffer=. Setting =y-or-n-p-use-read-key= to =t= is recommended for Embark users because it keeps Embark from attempting to insert the target at a =y-or-n-p= prompt, which would almost never be sensible. Also consider this as a warning to structure your own action commands so that if they use =y-or-n-p=, they do so only after the prompting for the target.&lt;/p&gt; &lt;p&gt;Here is a simple example illustrating the various ways of reading input from the user mentioned above. Bind the following commands to the =embark-symbol-map= to be used as actions, then put the point on some symbol and run them with =embark-act=:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (defun example-action-command1 () (interactive) (message &quot;The input was `%s&#39;.&quot; (read-from-minibuffer &quot;Input: &quot;)))&lt;/p&gt; &lt;p&gt;(defun example-action-command2 (arg input1 input2) (interactive &quot;P\nsInput 1: \nsInput 2: &quot;) (message &quot;The first input %swas &lt;code&gt;%s&#39;, and the second was &lt;/code&gt;%s&#39;.&quot; (if arg &quot;truly &quot; &quot;&quot;) input1 input2))&lt;/p&gt; &lt;p&gt;(defun example-action-command3 () (interactive) (message &quot;Your selection was `%s&#39;.&quot; (completing-read &quot;Select: &quot; &#39;(&quot;E&quot; &quot;M&quot; &quot;B&quot; &quot;A&quot; &quot;R&quot; &quot;K&quot;))))&lt;/p&gt; &lt;p&gt;(defun example-action-command4 () (interactive) (message &quot;I don&#39;t prompt you for input and thus ignore the target!&quot;))&lt;/p&gt; &lt;p&gt;(keymap-set embark-symbol-map &quot;X 1&quot; #&#39;example-action-command1) (keymap-set embark-symbol-map &quot;X 2&quot; #&#39;example-action-command2) (keymap-set embark-symbol-map &quot;X 3&quot; #&#39;example-action-command3) (keymap-set embark-symbol-map &quot;X 4&quot; #&#39;example-action-command4) #+end_src&lt;/p&gt; &lt;p&gt;Also note that if you are using the key bindings to call actions, you can pass prefix arguments to actions in the normal way. For example, you can use =C-u X2= with the above demonstration actions to make the message printed by =example-action-command2= more emphatic. This ability to pass prefix arguments to actions is useful for some actions in the default configuration, such as =embark-shell-command-on-buffer=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Non-interactive functions as actions&lt;/p&gt; 
&lt;p&gt;Alternatively, Embark does support one other type of action: a non-interactive function of a single argument. The target is passed as argument to the function. For example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun example-action-function (target) (message &quot;The target was `%s&#39;.&quot; target))&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(keymap-set embark-symbol-map &quot;X 4&quot; #&#39;example-action-function)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;#+end_src&lt;/p&gt; 
&lt;p&gt;Note that normally binding non-interactive functions in a keymap is useless, since when attempting to run them using the key binding you get an error message similar to &quot;Wrong type argument: commandp, example-action-function&quot;. In general it is more flexible to write any new Embark actions as commands, that is, as interactive functions, because that way you can also run them directly, without Embark. But there are a couple of reasons to use non-interactive functions as actions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You may already have the function lying around, and it is convenient to simply reuse it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For command actions the targets can only be simple string, with no text properties. For certain advanced uses you may want the action to receive a string /with/ some text properties, or even a non-string target.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Embark, Marginalia and Consult&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Embark cooperates well with the [[https://github.com/minad/marginalia][Marginalia]] and [[https://github.com/minad/consult][Consult]] packages. Neither of those packages is a dependency of Embark, but both are highly recommended companions to Embark, for opposite reasons: Marginalia greatly enhances Embark&#39;s usefulness, while Embark can help enhance Consult.&lt;/p&gt; 
&lt;p&gt;In the remainder of this section I&#39;ll explain what exactly Marginalia does for Embark, and what Embark can do for Consult.&lt;/p&gt; 
&lt;p&gt;** Marginalia&lt;/p&gt; 
&lt;p&gt;Embark comes with actions for symbols (commands, functions, variables with actions such as finding the definition, looking up the documentation, evaluating, etc.) in the =embark-symbol-map= keymap, and for packages (actions like install, delete, browse url, etc.) in the =embark-package-keymap=.&lt;/p&gt; 
&lt;p&gt;Unfortunately Embark does not automatically offers you these keymaps when relevant, because many built-in Emacs commands don&#39;t report accurate category metadata. For example, a command like =describe-package=, which reads a package name from the minibuffer, does not have metadata indicating this fact.&lt;/p&gt; 
&lt;p&gt;In an earlier Embark version, there were functions to supply this missing metadata, but they have been moved to Marginalia, which augments many Emacs command to report accurate category metadata. Simply activating =marginalia-mode= allows Embark to offer you the package and symbol actions when appropriate again. Candidate annotations in the Embark collect buffer are also provided by the Marginalia package:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you install Marginalia and activate =marginalia-mode=, Embark Collect buffers will use the Marginalia annotations automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you don&#39;t install Marginalia, you will see only the annotations that come with Emacs (such as key bindings in =M-x=, or the unicode characters in =C-x 8 RET=).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Consult&lt;/p&gt; 
&lt;p&gt;The excellent Consult package provides many commands that use minibuffer completion, via the =completing-read= function; plenty of its commands can be considered enhanced versions of built-in Emacs commands, and some are completely new functionality. One common enhancement provided in all commands for which it makes sense is preview functionality, for example =consult-buffer= will show you a quick preview of a buffer before you actually switch to it.&lt;/p&gt; 
&lt;p&gt;If you use both Consult and Embark you should install the =embark-consult= package which provides integration between the two. It provides exporters for several Consult commands and also tweaks the behavior of many Consult commands when used as actions with =embark-act= in subtle ways that you may not even notice, but make for a smoother experience. You need only install it to get these benefits: Embark will automatically load it after Consult if found.&lt;/p&gt; 
&lt;p&gt;The =embark-consult= package provides the following exporters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;You can use =embark-export= from =consult-line=, =consult-outline=, or =consult-mark= to obtain an =occur-mode= buffer. As with the built-in =occur= command you use that buffer to jump to a match and after that, you can then use =next-error= and =previous-error= to navigate to other matches. You can also press =e= to activate =occur-edit-mode= and edit the matches in place!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can export from any of the Consult asynchronous search commands, =consult-grep=, =consult-git-grep=, or =consult-ripgrep= to get a =grep-mode= buffer. Here too you can use =next-error= and =previous-error= to navigate among matches, and, if you install the [[http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el ][wgrep]] package, you can use it to edit the matches in place.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In both cases, pressing =g= will rerun the Consult command you had exported from and re-enter the input you had typed (which is similar to reverting but a little more flexible). You can then proceed to re-export if that&#39;s what you want, but you can also edit the input changing the search terms or simply cancel if you see you are done with that search.&lt;/p&gt; 
&lt;p&gt;The =embark-consult= also contains some candidates collectors that allow you to run =embark-live= to get a live-updating table of contents for your buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=embark-consult-outline-candidates= produces the outline headings of the current buffer, using =consult-outline=.&lt;/li&gt; 
 &lt;li&gt;=embark-consult-imenu-candidates= produces the imenu items of the current buffer, using =consult-imenu=.&lt;/li&gt; 
 &lt;li&gt;=embark-consult-imenu-or-outline-candidates= is a simple combination of the two previous functions: it produces imenu items in buffers deriving from =prog-mode= and otherwise outline headings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The way to configure =embark-live= (or =embark-collect= and =embark-export= for that matter) to use one of these function is to add it at the end of the =embark-candidate-collectors= list. The =embark-consult= package by default adds the last one, which seems to be the most sensible default.&lt;/p&gt; 
&lt;p&gt;Besides those exporters and candidate collectors, the =embark-consult= package provides many subtle tweaks and small integrations between Embark and Consult. Some examples are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When used as actions, the asynchronous search commands will search only the files associated to the targets: if the targets /are/ files, it searches those files; for buffers it will search either the associated file if there is one, else all files in the buffer&#39;s =default-directory=; for bookmarks it will search the file they point to, same for Emacs Lisp libraries. This is particularly powerful when using =embark-act-all= to act on multiple files at once, for example you can use =consult-find= to search among file /names/ and then =embark-act-all= and =consult-grep= to search within the matching files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For all other target types, those that do not have a sensible notion of associated file, a Consult search command (asynchronous or not) will search for the text of the target but leave the minibuffer open so you can interact with the Consult command.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=consult-imenu= will search for the target and take you directly to the location if it matches a unique imenu entry, otherwise it will leave the minibuffer open so you can navigate among the matches.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Related Packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are several packages that offer functionality similar to Embark&#39;s.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Acting on minibuffer completion candidates :: The popular Ivy and Helm packages have support for acting on the completion candidates of commands written using their APIs, and there is an extensive ecosystem of packages meant for Helm and for Ivy (the Ivy ones usually have &quot;counsel&quot; in the name) providing commands and appropriate actions.&lt;/li&gt; 
 &lt;li&gt;Acting on things at point :: The built-in =context-menu-mode= provides a mouse-driven context-sensitive configurable menu. The =do-at-point= package by Philip Kaludercic (available on GNU ELPA), on the other hand is keyboard-driven.&lt;/li&gt; 
 &lt;li&gt;Collecting completion candidates into a buffer :: The Ivy package has the command =ivy-occur= which is similar to =embark-collect=. As with Ivy actions, =ivy-occur= only works for commands written using the Ivy API.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to learn more about how others have used Embark here are some links to read:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark]], a blog post by Karthik Chikmagalur.&lt;/li&gt; 
 &lt;li&gt;[[https://protesilaos.com/dotemacs/][Protesilaos Stavrou&#39;s dotemacs]], look for the section called &quot;Extended minibuffer actions and more (embark.el and prot-embark.el)&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And some videos to watch:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://protesilaos.com/codelog/2021-01-09-emacs-embark-extras/][Embark and my extras]] by Protesilaos Stavrou.&lt;/li&gt; 
 &lt;li&gt;[[https://youtu.be/qpoQiiinCtY][Embark -- Key features and tweaks]] by Raoul Comninos on the Emacs-Elements YouTube channel.&lt;/li&gt; 
 &lt;li&gt;[[https://youtu.be/WsxXr1ncukY][Livestreamed: Adding an Embark context action to send a stream message]] by Sacha Chua.&lt;/li&gt; 
 &lt;li&gt;[[https://youtu.be/qk2Is_sC8Lk][System Crafters Live! - The Many Uses of Embark]] by David Wilson.&lt;/li&gt; 
 &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] by Mike Zamansky.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributions to Embark are very welcome. There is a [[https://github.com/oantolin/embark/issues/95][wish list]] for actions, target finders, candidate collectors and exporters. For other ideas you have for Embark, feel free to open an issue on the [[https://github.com/oantolin/embark/issues][issue tracker]]. Any neat configuration tricks you find might be a good fit for the [[https://github.com/oantolin/embark/wiki][wiki]].&lt;/p&gt; 
&lt;p&gt;Code contributions are very welcome too, but since Embark is now on GNU ELPA, copyright assignment to the FSF is required before you can contribute code.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Acknowledgments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;While I, Omar Antolín Camarena, have written most of the Embark code and remain very stubborn about some of the design decisions, Embark has received substantial help from a number of other people which this document has neglected to mention for far too long. In particular, Daniel Mendler has been absolutely invaluable, implementing several important features, and providing a lot of useful advice.&lt;/p&gt; 
&lt;p&gt;Code contributions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; 
 &lt;li&gt;[[https://codeberg.org/jao/][José Antonio Ortega Ruiz]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/a13][a13]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/mihakam][mihakam]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/leungbk][Brian Leung]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/roshanshariff][Roshan Shariff]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/condy0919][condy0919]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/DamienCassou][Damien Cassou]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/JimDBh][JimDBh]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advice and useful discussions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; 
 &lt;li&gt;[[https://gitlab.com/protesilaos/][Protesilaos Stavrou]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]]&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>renzmann/treesit-auto</title>
      <link>https://github.com/renzmann/treesit-auto</link>
      <description>&lt;p&gt;Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: treesit-auto #+AUTHOR: Robb Enzmann&lt;/p&gt; 
&lt;p&gt;#+html: &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;&lt;img alt=&quot;GNU Emacs&quot; src=&quot;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://melpa.org/#/treesit-auto&quot;&gt;&lt;img alt=&quot;Melpa&quot; src=&quot;https://melpa.org/packages/treesit-auto-badge.svg?raw=true&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://stable.melpa.org/#/treesit-auto&quot;&gt;&lt;img alt=&quot;Melpa&quot; src=&quot;https://stable.melpa.org/packages/treesit-auto-badge.svg?raw=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version can&#39;t be used, fall back to the original major mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Features Each of these behaviors are configurable and documented under the &quot;Configuration&quot; section. By activating =global-treesit-auto-mode=, Emacs will:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatically switch to =
  &lt;name&gt;
   -ts-mode= when the grammar for =
   &lt;name&gt;
    = is installed
   &lt;/name&gt;
  &lt;/name&gt;&lt;/li&gt; 
 &lt;li&gt;Stick with =
  &lt;name&gt;
   -mode= if the grammar isn&#39;t installed
  &lt;/name&gt;&lt;/li&gt; 
 &lt;li&gt;Automatically install a grammar before opening a compatible file&lt;/li&gt; 
 &lt;li&gt;Modify =auto-mode-alist= for tree-sitter modes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There is also a convenience function =M-x treesit-auto-install-all=, which will install all (or a selected subset) of the maintained and compatible grammars. You can add these grammars to your =auto-mode-alist= automatically by invoking the =treesit-auto-add-to-auto-mode-alist= function in your configuration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation &lt;del&gt;treesit-auto&lt;/del&gt; is available from [[https://melpa.org/][MELPA]]. After following [[https://melpa.org/#/getting-started][their setup]], you can use your preferred package manager. If that&#39;s the default =package.el=, simply =M-x package-refresh-contents= and then&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_example M-x package-install RET treesit-auto #+end_example&lt;/p&gt; 
&lt;p&gt;If you want a local clone of the repository, rather than just a copy of the source, you might instead use =package-vc-install=&lt;/p&gt; 
&lt;p&gt;#+begin_src example M-x package-vc-install RET &lt;a href=&quot;https://github.com/renzmann/treesit-auto.git&quot;&gt;https://github.com/renzmann/treesit-auto.git&lt;/a&gt; #+end_src&lt;/p&gt; 
&lt;p&gt;Then, in your Emacs configuration file (=~/.emacs.d/init.el=),&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :config (global-treesit-auto-mode)) #+end_src&lt;/p&gt; 
&lt;p&gt;For most users, this will be enough. There are some nifty things you might want to enable, though, which are covered in the &quot;Configuration&quot; section below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configuration example This is how I configure =treesit-auto= for my own personal use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :custom (treesit-auto-install &#39;prompt) :config (treesit-auto-add-to-auto-mode-alist &#39;all) (global-treesit-auto-mode)) #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;What this package does Emacs 29, while featuring =treesit.el= and a convenient =treesit-install-language-grammar=, [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][will not feature an intelligent way to choose]] between a default mode, such as =python-mode=, and its tree-sitter enhanced version, =python-ts-mode=. This package attempts to remedy that by adjusting the =major-mode-remap-alist= and =treesit-language-source-alist= variables in order to get the following behavior:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;1. If the grammar is installed, then switch to the appropriate tree-sitter mode:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;In this case, assuming we open a Python buffer, and the [[https://github.com/tree-sitter/tree-sitter-python][Python tree-sitter grammar]] is installed, then Emacs will use =python-ts-mode= instead of =python-mode=.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;2. The grammar is NOT installed and treesit-auto-install is non-nil:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;When the grammar is not installed and &lt;del&gt;treesit-auto-install&lt;/del&gt; is t, then upon activating any major mode that has a corresponding tree-sitter mode, the grammar will be downloaded and compiled using &lt;del&gt;treesit-install-language-grammar&lt;/del&gt;. Emacs will then activate the tree-sitter major mode for that buffer.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;prompt&lt;/del&gt; is like t, except a message will be displayed in the echo area asking for a yes/no response before attempting the installation.&lt;/p&gt; 
&lt;p&gt;As an example for both cases: if I visit a Python file and didn&#39;t already have the grammar installed, I wind up with an installed grammar and a buffer using &lt;del&gt;python-ts-mode&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;Otherwise, when &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, it will try to fall back to another major mode as described in the following two rules.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;3. If the grammar is NOT installed, and a fallback is specified&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Most languages will have a fallback mode specified, such as =python-ts-mode= falling back to =python-mode=, if the grammar is not installed. If you ever need to double-check what that fallback will be, you can double check what&#39;s in the recipe for that language like this:&lt;/p&gt; 
&lt;p&gt;#+begin_example (treesit-auto-recipe-remap (alist-get &#39;python treesit-auto-lang-recipe-alist)) ⇒ python-mode #+end_example&lt;/p&gt; 
&lt;p&gt;See &quot;Configuration/Configuring behavior for a specific language&quot; in case you would like to specify different fallback modes than the default.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;4. The grammar is installed, but there is no fallback mode&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can optionally use the =treesit-auto-add-to-auto-mode-alist= function to ensure that your installed tree-sitter languages have their corresponding =...-ts-mode= added to =auto-mode-alist=, so that Emacs opens the buffer in that =...-ts-mode=, rather than the default =Fundamental= mode.&lt;/p&gt; 
&lt;p&gt;Supposing for instance we don&#39;t have =typescript-mode= installed, then even if we /do/ have =typescript-ts-mode= installed along with the typescript grammar compiled in =~/.emacs.d/tree-sitter/=, Emacs still won&#39;t use =typescript-ts-mode= unless you also added =&#39;(&quot;\.ts\&#39;&quot; . typescript-ts-mode)= to =auto-mode-alist=. By calling =(treesit-auto-add-to-auto-mode-alist)= in your configuration, this modification to =auto-mode-alist= is done automatically for you.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;5. All other cases...&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This is the most general case, where the grammar is not installed, &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, and no fallback mode is specified in the language recipe present on =treesit-auto-recipe-list=. In this case, we still gain the benefit of quickly installing grammars through =treesit-install-language-grammar= without having the build the recipe interactively, but =treesit-auto= will make no attempt to switch away from the tree-sitter mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configuration If you have modified =treesit-language-source-alist= through =setq=, then it is recommended to put any configuration of this package AFTER that =setq=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Choose which languages =treesit-auto= should consider&lt;/p&gt; 
&lt;p&gt;You can globally alter the behavior of =treesit-auto= to only consider a specific set of languages by setting the =treesit-auto-langs= list to a set of language symbols. By default, this list includes every possible language that =treesit-auto= supports, so you can use =M-x describe-variable RET treesit-auto-langs= to see what the options are.&lt;/p&gt; 
&lt;p&gt;One way to use this variable is to just set it manually:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq treesit-auto-langs &#39;(python rust go)) #+end_src&lt;/p&gt; 
&lt;p&gt;Now, =treesit-auto= features will only ever affect Python, Rust, and Go files. Running =treesit-auto-install-all= will only install these three grammars, and no automatic prompting/installation will occur when visiting a buffer that is not one of these three, either.&lt;/p&gt; 
&lt;p&gt;Another method is to disable specific languages by just removing them from this list:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (delete &#39;awk treesit-auto-langs) #+end_src&lt;/p&gt; 
&lt;p&gt;Here, =treesit-auto= behaves as it normally would for all languages /except/ AWK.&lt;/p&gt; 
&lt;p&gt;** Automatically install grammars if they are missing The =treesit-auto-install= variable controls whether a grammar should be installed automatically when activating a major mode compatible with tree-sitter.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;=nil=, the default, means =treesit-auto= won&#39;t try to install anything, and will rely on the fallback logic outlined above&lt;/li&gt; 
 &lt;li&gt;=t= means =treesit-auto= should always try to clone and install a grammar when missing&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;prompt&lt;/del&gt; will cause a yes/no prompt to appear in the minibuffer before attempting installation&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq treesit-auto-install &#39;prompt) #+end_src&lt;/p&gt; 
&lt;p&gt;Then, supposing I don&#39;t have =libtree-sitter-python.so= (or its mac/Windows equivalent) under =~/.emacs.d/tree-sitter= (or anywhere else in =treesit-extra-load-path=), visiting a Python file or calling =M-x python-ts-mode= will generate this prompt:&lt;/p&gt; 
&lt;p&gt;#+begin_example Tree-sitter grammar for python is missing. Would you like to install it from &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter-python&quot;&gt;https://github.com/tree-sitter/tree-sitter-python&lt;/a&gt;? (y or n) #+end_example&lt;/p&gt; 
&lt;p&gt;Responding with &quot;yes&quot; will use =treesit-install-language-grammar= to go fetch and compile the missing grammar.&lt;/p&gt; 
&lt;p&gt;The other function that respects this variable is =treesit-auto-install-all=. When =treesit-auto-install= is t, using =M-x treesit-auto-install-all= will skip all prompts. Otherwise, it will ask before attempting the installation.&lt;/p&gt; 
&lt;p&gt;** Configuring behavior for a specific language The variable =treesit-auto-recipe-list= keeps track of all the language &quot;recipes.&quot; These control how =treesit-auto= decides which modes to upgrade/downgrade to/from, where the source code of the language grammar is hosted, and which C/C++ compiler to use. Each recipe can take these arguments:&lt;/p&gt; 
&lt;p&gt;#+begin_example :lang :ts-mode :remap :url :revision :requires :source-dir :cc :c++ #+end_example&lt;/p&gt; 
&lt;p&gt;To create a recipe, use =make-treesit-auto-recipe=:&lt;/p&gt; 
&lt;p&gt;#+begin_src elisp (setq my-js-tsauto-config (make-treesit-auto-recipe :lang &#39;javascript :ts-mode &#39;js-ts-mode :remap &#39;(js2-mode js-mode javascript-mode) :url &quot;&lt;a href=&quot;https://github.com/tree-sitter/tree-sitter-javascript&quot;&gt;https://github.com/tree-sitter/tree-sitter-javascript&lt;/a&gt;&quot; :revision &quot;master&quot; :source-dir &quot;src&quot; :ext &quot;\.js\&#39;&quot;))&lt;/p&gt; 
&lt;p&gt;(add-to-list &#39;treesit-auto-recipe-list my-js-tsauto-config) #+end_src&lt;/p&gt; 
&lt;p&gt;Here, we&#39;ve specified that the tree-sitter compiler will be creating a file named =libtree-sitter-javascript.so= (or =.dylib= or =.dll=), based on the =:lang= field. The corresponding tree-sitter mode in Emacs is called =js-ts-mode=, and all of =js2-mode=, =js-mode=, and =javascript-mode= should attempt switching to the =js-ts-mode=, if possible.&lt;/p&gt; 
&lt;p&gt;Moreover, since =js-2-mode= is first under the =:remap= section, that is the &quot;primary fallback.&quot; Meaning that if the tree-sitter grammar is not available, it will be the first mode tried. If that doesn&#39;t work, it will try =js-mode=, and =javascript-mode=, in that order, until one /does/ work. If only one fallback needs to be specified, a single quoted symbol is also acceptable. For instance, =python-ts-mode= just uses =:remap &#39;python-mode= in this argument position.&lt;/p&gt; 
&lt;p&gt;If a grammar mandates any other grammars be installed as a dependency, the =:requires= keyword can specify a language symbol or list of symbols that should be installed. One example of this is found in the TypeScript recipe, which specifies =:requires &#39;tsx=, since activating =typescript-ts-mode= on some Emacs builds will attempt to load the TSX grammar.&lt;/p&gt; 
&lt;p&gt;The =:url=, =:revision=, =:source-dir=, =:cc=, and =:c++= arguments are all documented under =treesit-language-source-alist=, which is part of base Emacs, not this package.&lt;/p&gt; 
&lt;p&gt;** Keep track of your hooks This package does not modify any of your major mode hooks. That is, if you have functions in =python-mode-hook=, but not in =python-ts-mode-hook=, then your hook from =python-mode= will not be applied, assuming =python-ts-mode= is what gets loaded. For major modes in which this is a concern, the current recommendation is to address this as part of your configuration.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq rust-ts-mode-hook rust-mode-hook) #+end_src&lt;/p&gt; 
&lt;p&gt;Some modes have a shared base, such as =python-ts-mode= and =python-mode= both deriving from =python-base-mode=. For these languages, you can opt to hook into =python-base-mode-hook= instead of explicitly setting the tree-sitter mode&#39;s hook.&lt;/p&gt; 
&lt;p&gt;** Automatically register extensions for =auto-mode-alist= You can register tree-sitter modes to =auto-mode-alist= by calling =treesit-auto-add-to-auto-mode-alist=. Depending on the optional argument =langs=, this function can behave in three different ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;=nil=, the default - Only add tree-sitter modes to =auto-mode-alist= if the tree-sitter mode is available to Emacs /and/ the grammar is installed.&lt;/li&gt; 
 &lt;li&gt;=&#39;all= - For every tree-sitter mode available to Emacs and in =treesit-auto-langs=, add it to =auto-mode-alist= regardless of whether the grammar is installed. This has the beneficial side effect of installing grammars for you when opening files that have a tree-sitter mode that comes with Emacs, but have no fallback mode. Examples of this are =rust-ts-mode=, =go-ts-mode=, and a few others in Emacs 29+.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;A list of language symbols&lt;/em&gt; - behaves like =&#39;all=, but only for the listed languages&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For instance, you might run this function as:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (treesit-auto-add-to-auto-mode-alist &#39;(rust go toml)) #+end_src&lt;/p&gt; 
&lt;p&gt;This registers your tree-sitter modes according to the common file extension for Rust, Go, and TOML, but no other modes. Most users will probably want to use =(treesit-auto-add-to-auto-mode-alist &#39;all)= for the easiest general behavior; always prompting/installing grammars when we can.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A rough vanilla equivalent I find it a good practice to be skeptical of adding any new dependency to my Emacs configuration. So, what would you have to do to get similar behavior in your Emacs configuration without the =treesit-auto= package?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We&#39;ll take two examples: TypeScript and Python.&lt;/p&gt; 
&lt;p&gt;Emacs 29 ships with =typescript-ts-mode= and =tsx-ts-mode=, but no equivalent =typescript-mode= or =tsx-mode=. =python-ts-mode= and =python-mode=, on the other hand, are both available out of the box. If you wanted these grammars to automatically install on launch, and then use the tree-sitter modes instead of the base modes for every file, you&#39;d need the following code in your init file:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq treesit-language-source-alist &#39;((typescript . (&quot;&lt;a href=&quot;https://github.com/tree-sitter/tree-sitter-typescript&quot;&gt;https://github.com/tree-sitter/tree-sitter-typescript&lt;/a&gt;&quot; &quot;master&quot; &quot;typescript/src&quot;)) (tsx . (&quot;&lt;a href=&quot;https://github.com/tree-sitter/tree-sitter-typescript&quot;&gt;https://github.com/tree-sitter/tree-sitter-typescript&lt;/a&gt;&quot; &quot;master&quot; &quot;tsx/src&quot;)) (python . (&quot;&lt;a href=&quot;https://github.com/tree-sitter/tree-sitter-python&quot;&gt;https://github.com/tree-sitter/tree-sitter-python&lt;/a&gt;&quot;))))&lt;/p&gt; 
&lt;p&gt;(dolist (source treesit-language-source-alist) (unless (treesit-ready-p (car source)) (treesit-install-language-grammar (car source))))&lt;/p&gt; 
&lt;p&gt;(add-to-list &#39;auto-mode-alist &#39;(&quot;\.ts\&#39;&quot; . typescript-ts-mode)) (add-to-list &#39;auto-mode-alist &#39;(&quot;\.tsx\&#39;&quot; . tsx-ts-mode)) (add-to-list &#39;major-mode-remap-alist &#39;(python-mode . python-ts-mode))&lt;/p&gt; 
&lt;p&gt;#+end_src&lt;/p&gt; 
&lt;p&gt;There are plenty of reasons why some users would prefer to take this type of hand-tuned approach to their tree-sitter modes. For most Emacs people, though, you can see the natural progression of where a config like the above would go:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need to maintain a library of language symbols (which /must/ match the language&#39;s =grammar.js=), URLs, revisions, and sub-directories for =treesit-language-source-alist=. Additionally, you&#39;d need to know that =typescript-ts-mode= relies on the tree-sitter grammar for =tsx=, which must be installed alongside the grammar for TypeScript. This is probably the main value proposition of this package, since all of this information is stored under the community-contributed =treesit-auto-recipe-list=&lt;/li&gt; 
 &lt;li&gt;You need to be aware of when to use =auto-mode-alist= and =major-mode-remap-alist=, depending on what modes are installed into Emacs&lt;/li&gt; 
 &lt;li&gt;If you want lazy installation of grammars, rather than installing them all up-front in your =init.el=, you&#39;d need to write some hooks or derived modes to check =treesit-ready-p= for the current buffer, and install the language before loading the main tree-sitter mode&lt;/li&gt; 
 &lt;li&gt;After a certain number of langauges, it becomes unweildy to do these =add-to-list= calls for every single one, and it&#39;s better to programmatically operate on a list of selected languages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you were to follow this chain yourself, you&#39;d probably wind up with something in your =init.el= that looks very similar to the code in this package.&lt;/p&gt; 
&lt;p&gt;All in all, this is a small package. Roughly half of it is just maintaining a library of information for =treesit-language-source-alist=, and the other half works through the logic of handling edge cases related to the remaining bullets above.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Caveats This package is, admittedly, a hack. =treesit.el= provides an excellent foundation to incremental source code parsing for Emacs 29, and over time that foundation /will/ expand into an improved core editing experience. With that in mind, I fully expect this package to eventually be obsolesced by the default options in Emacs 30 and beyond. That does not preclude us from adding a few quality of life improvements to Emacs 29, though, and so it still seems prudent to have this plugin available in the meantime.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Known bugs =treesit-auto= doesn&#39;t play super well with Org-babel, since Org has its own methods of hooking into and using languages. In particular, you may need to set =org-src-lang-modes= yourself to get tree-sitter modes working correctly.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Another side behavior you may encounter is when opening an Org document with shell scripts inside and =treesit-auto-install= is non-nil, then =treesit-auto= will prompt to install the Bash grammar, but won&#39;t display the prompt until you interact with Emacs in some way, such as using =next-line= (=C-n= by default) or hovering over Emacs with your mouse.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contributing Bug reports, feature requests, and contributions are most welcome. Even though this is a small project, there is always room for improvement. I also appreciate &quot;nitpicky&quot; contributions, such as formatting, conventions, variable naming, code simplification, and improvements to language in documentation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Issues are tracked on [[https://github.com/renzmann/treesit-auto/issues][GitHub]], which is also where patches and pull requests should be submitted.&lt;/p&gt; 
&lt;p&gt;If you would like to submit a new language recipe to be distributed as part of this package, see [[CONTRIBUTING.org][CONTRIBUTING.org]] for a quick guide on how to write and submit the new recipe.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tumashu/posframe</title>
      <link>https://github.com/tumashu/posframe</link>
      <description>&lt;p&gt;Pop a posframe (just a child-frame) at point, posframe is a **GNU ELPA** package!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Created 2021-06-01 Tue 10:41&lt;/h1&gt; 
&lt;p&gt;#+TITLE: Pop a posframe (just a frame) at point #+AUTHOR: Feng Shu&lt;/p&gt; 
&lt;p&gt;#+html: &lt;a href=&quot;http://elpa.gnu.org/packages/posframe.html&quot;&gt;&lt;img alt=&quot;GNU ELPA&quot; src=&quot;https://elpa.gnu.org/packages/posframe.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;http://elpa.gnu.org/devel/posframe.html&quot;&gt;&lt;img alt=&quot;GNU-devel ELPA&quot; src=&quot;https://elpa.gnu.org/devel/posframe.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://melpa.org/#/posframe&quot;&gt;&lt;img alt=&quot;MELPA&quot; src=&quot;https://melpa.org/packages/posframe-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;What is posframe? Posframe can pop up a frame at point, this &lt;em&gt;posframe&lt;/em&gt; is a child-frame connected to its root window&#39;s buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The main advantages are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;It is fast enough for daily usage :-)&lt;/li&gt; 
 &lt;li&gt;It works well with CJK languages.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;NOTE:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;For MacOS users, posframe needs Emacs version &amp;gt;= 26.0.91&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;GNOME users with GTK3 builds need Emacs 27 or later. See variable `posframe-gtk-resize-child-frames&#39; which auto-detects this configuration.&lt;/p&gt; &lt;p&gt;More details:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;[[https://git.savannah.gnu.org/cgit/emacs.git/commit/?h=emacs-27&amp;amp;id=c49d379f17bcb0ce82604def2eaa04bda00bd5ec][Fix some problems with moving and resizing child frames]]&lt;/li&gt; 
   &lt;li&gt;[[https://lists.gnu.org/archive/html/emacs-devel/2020-01/msg00343.html][Emacs&#39;s set-frame-size can not work well with gnome-shell?]]&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;[[file:./snapshots/posframe-1.png]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_example (require &#39;posframe) #+end_example&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Create a posframe&lt;/p&gt; 
&lt;p&gt;*** Simple way #+begin_example (when (posframe-workable-p) (posframe-show &quot; &lt;em&gt;my-posframe-buffer&lt;/em&gt;&quot; :string &quot;This is a test&quot; :position (point))) #+end_example&lt;/p&gt; 
&lt;p&gt;*** Advanced way #+begin_example (defvar my-posframe-buffer &quot; &lt;em&gt;my-posframe-buffer&lt;/em&gt;&quot;)&lt;/p&gt; 
&lt;p&gt;(with-current-buffer (get-buffer-create my-posframe-buffer) (erase-buffer) (insert &quot;Hello world&quot;))&lt;/p&gt; 
&lt;p&gt;(when (posframe-workable-p) (posframe-show my-posframe-buffer :position (point))) #+end_example&lt;/p&gt; 
&lt;p&gt;*** Arguments&lt;/p&gt; 
&lt;p&gt;#+begin_example C-h f posframe-show #+end_example&lt;/p&gt; 
&lt;p&gt;** Hide a posframe #+begin_example (posframe-hide &quot; &lt;em&gt;my-posframe-buffer&lt;/em&gt;&quot;) #+end_example&lt;/p&gt; 
&lt;p&gt;** Hide all posframes #+begin_example M-x posframe-hide-all #+end_example&lt;/p&gt; 
&lt;p&gt;** Delete a posframe&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Delete posframe and its buffer #+begin_example (posframe-delete &quot; &lt;em&gt;my-posframe-buffer&lt;/em&gt;&quot;) #+end_example&lt;/li&gt; 
 &lt;li&gt;Only delete the frame #+begin_example (posframe-delete-frame &quot; &lt;em&gt;my-posframe-buffer&lt;/em&gt;&quot;) #+end_example ** Delete all posframes #+begin_example M-x posframe-delete-all #+end_example&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: this command will delete all posframe buffers. You probably shouldn&#39;t use it if you are sharing a buffer between posframe and other packages.&lt;/p&gt; 
&lt;p&gt;** posframe-arghandler&lt;/p&gt; 
&lt;p&gt;posframe-arghandler feature has been removed from posframe-1.1, user can use advice feature instead.&lt;/p&gt; 
&lt;p&gt;** Mouse banish Default setting will work well in most case, but for EXWM user, suggest use the below config.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq posframe-mouse-banish-function #&#39;posframe-mouse-banish-simple) #+end_src&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rainstormstudio/nerd-icons.el</title>
      <link>https://github.com/rainstormstudio/nerd-icons.el</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: nerd-icons.el - A Library for Nerd Font icons #+AUTHOR: Hongyu Ding #+LANGUAGE: en&lt;/p&gt; 
&lt;p&gt;[[https://melpa.org/#/nerd-icons][file:https://melpa.org/packages/nerd-icons-badge.svg]]&lt;/p&gt; 
&lt;p&gt;Nerd-icons.el is a library for easily using [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs, an alternative to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].&lt;/p&gt; 
&lt;p&gt;It works on both GUI and terminal! You only need a [[https://www.nerdfonts.com/#home][Nerd Font]] installed on your system.&lt;/p&gt; 
&lt;p&gt;It is inspired by [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], [[https://github.com/seagle0128/icons-in-terminal.el][icons-in-terminal]], [[https://github.com/ryanoasis/vim-devicons][vim-devicons]], and [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]].&lt;/p&gt; 
&lt;p&gt;in GUI: [[file:screenshots/demo.png]]&lt;/p&gt; 
&lt;p&gt;in terminal: [[file:screenshots/demo-terminal.png]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installing Fonts Please go to [[https://www.nerdfonts.com/][Nerd Fonts website]] and get a Nerd font. After installing the font on your machine, you need to set &lt;del&gt;nerd-icons-font-family&lt;/del&gt; to match its font name so that the font can be properly used under GUI. If you want Nerd Fonts to work under a terminal, please change your terminal&#39;s font to a Nerd font.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the Nerd Font you installed does not display correctly (e.g. appear cut off), it is recommended to use =Symbols Nerd Font Mono= (Symbols Nerd Font). You can use &lt;del&gt;M-x nerd-icons-install-fonts&lt;/del&gt; to install &lt;del&gt;Symbols Nerd Font Mono&lt;/del&gt; for you. Note that for &lt;em&gt;Windows&lt;/em&gt; you&#39;ll need to manually install the font after you used this function.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage &lt;del&gt;nerd-icons&lt;/del&gt; is on [[https://melpa.org/#/nerd-icons-completion][Melpa]]. You can install it with built-in &lt;del&gt;M-x package-install&lt;/del&gt; #+begin_src emacs-lisp (require &#39;nerd-icons) #+end_src&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;or using &lt;del&gt;use-package&lt;/del&gt; #+BEGIN_SRC emacs-lisp (use-package nerd-icons ;; :custom ;; The Nerd Font you want to use in GUI ;; &quot;Symbols Nerd Font Mono&quot; is the default and is recommended ;; but you can use any other Nerd Font if you want ;; (nerd-icons-font-family &quot;Symbols Nerd Font Mono&quot;) ) #+END_SRC ** insert icons&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;use icon based on category&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-dir&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-file&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-extension&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-mode&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-url&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-buffer&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-icon-for-file &quot;init.el&quot;)) ;; Inserts an icon for Emacs Lisp #+END_SRC&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;use icon directly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-ipsicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-octicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-pomicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-powerline&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-faicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-wicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-sucicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-devicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-codicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-flicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-mdicon&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-faicon &quot;nf-fa-gitlab&quot;)) ;; Inserts a Gitlab icon #+END_SRC&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;insert icon interactively (&lt;del&gt;M-x&lt;/del&gt; functions)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-ipsicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-octicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-pomicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-powerline&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-faicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-wicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-sucicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-devicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-codicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-flicon&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;nerd-icons-insert-mdicon&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** customize icons You can customize the icons via &lt;del&gt;nerd-icons-extension-icon-alist&lt;/del&gt;, &lt;del&gt;nerd-icons-regexp-icon-alist&lt;/del&gt; and &lt;del&gt;nerd-icons-mode-icon-alist&lt;/del&gt;, etc.&lt;/p&gt; 
&lt;p&gt;For example, #+begin_src emacs-lisp (add-to-list &#39;nerd-icons-extension-icon-alist &#39;(&quot;epub&quot; nerd-icons-faicon &quot;nf-fa-book&quot; :face nerd-icons-green)) #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Glyph Sets | Glyph Set | prefix | Point Range | insert function | |-------------------------+----------------------+--------------------------------------+----------------------| | Seti-UI + Custom | &lt;del&gt;nf-seti-&lt;/del&gt;, &lt;del&gt;nf-custom-&lt;/del&gt; | &lt;del&gt;e5fa&lt;/del&gt; - &lt;del&gt;e631&lt;/del&gt; | &lt;del&gt;nerd-icons-sucicon&lt;/del&gt; | | Devicons | &lt;del&gt;nf-dev-&lt;/del&gt; | &lt;del&gt;e700&lt;/del&gt; - &lt;del&gt;e7c5&lt;/del&gt; | &lt;del&gt;nerd-icons-devicon&lt;/del&gt; | | Font Awesome | &lt;del&gt;nf-fa-&lt;/del&gt; | &lt;del&gt;f000&lt;/del&gt; - &lt;del&gt;f2e0&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Font Awesome Extension | &lt;del&gt;nf-fae-&lt;/del&gt; | &lt;del&gt;e200&lt;/del&gt; - &lt;del&gt;e2a9&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Material Design Icons | &lt;del&gt;nf-md-&lt;/del&gt; | &lt;del&gt;f500&lt;/del&gt; - &lt;del&gt;fd46&lt;/del&gt; | &lt;del&gt;nerd-icons-mdicon&lt;/del&gt; | | Weather | &lt;del&gt;nf-weather-&lt;/del&gt; | &lt;del&gt;e300&lt;/del&gt; - &lt;del&gt;e3eb&lt;/del&gt; | &lt;del&gt;nerd-icons-wicon&lt;/del&gt; | | Octicons | &lt;del&gt;nf-oct-&lt;/del&gt; | &lt;del&gt;f400&lt;/del&gt; - &lt;del&gt;f4a9&lt;/del&gt;, &lt;del&gt;2665&lt;/del&gt;, &lt;del&gt;26A1&lt;/del&gt; | &lt;del&gt;nerd-icons-octicon&lt;/del&gt; | | Powerline Symbols | &lt;del&gt;nf-pl-&lt;/del&gt; | &lt;del&gt;e0a0&lt;/del&gt; - &lt;del&gt;e0a2&lt;/del&gt;, &lt;del&gt;e0b0&lt;/del&gt; - &lt;del&gt;e0b3&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | Powerline Extra Symbols | &lt;del&gt;nf-ple-&lt;/del&gt; | &lt;del&gt;e0a3&lt;/del&gt;, &lt;del&gt;e0b4&lt;/del&gt; - &lt;del&gt;e0c8&lt;/del&gt;, &lt;del&gt;e0ca&lt;/del&gt;, &lt;del&gt;e0cc&lt;/del&gt; - &lt;del&gt;e0d4&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | IEC Power Symbols | &lt;del&gt;nf-iec-&lt;/del&gt; | &lt;del&gt;23fb&lt;/del&gt; - &lt;del&gt;23fe&lt;/del&gt;, &lt;del&gt;2b58&lt;/del&gt; | &lt;del&gt;nerd-icons-ipsicon&lt;/del&gt; | | Font Logos | &lt;del&gt;nf-linux-&lt;/del&gt; | &lt;del&gt;f300&lt;/del&gt; - &lt;del&gt;f32d&lt;/del&gt; | &lt;del&gt;nerd-icons-flicon&lt;/del&gt; | | Pomicons | &lt;del&gt;nf-pom-&lt;/del&gt; | &lt;del&gt;e000&lt;/del&gt; - &lt;del&gt;e00a&lt;/del&gt; | &lt;del&gt;nerd-icons-pomicon&lt;/del&gt; | | Codicons | &lt;del&gt;nf-cod-&lt;/del&gt; | &lt;del&gt;ea60&lt;/del&gt; - &lt;del&gt;ebeb&lt;/del&gt; | &lt;del&gt;nerd-icons-codicon&lt;/del&gt; |&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check [[https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points][Nerd Fonts Glyph Sets and Code Points]] for more information.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Related Packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rainstormstudio/treemacs-nerd-icons][treemacs-nerd-icons]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ivy-rich][nerd-icons-ivy-rich]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/LuigiPiucco/nerd-icons-corfu][nerd-icons-corfu]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/alexluigit/dirvish][dirvish]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/seagle0128/doom-modeline][doom-modeline]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/grolongo/nerd-icons-mode-line][nerd-icons-mode-line]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** use nerd-icons with dirvish sample configuration: #+BEGIN_SRC emacs-lisp (use-package dirvish :init (dirvish-override-dired-mode) :config (setq dirvish-mode-line-format &#39;(:left (sort symlink) :right (omit yank index))) (setq dirvish-mode-line-height 10) (setq dirvish-attributes &#39;(nerd-icons file-time file-size collapse subtree-state vc-state git-msg)) (setq dirvish-subtree-state-style &#39;nerd) (setq delete-by-moving-to-trash t) (setq dirvish-path-separators (list (format &quot; %s &quot; (nerd-icons-codicon &quot;nf-cod-home&quot;)) (format &quot; %s &quot; (nerd-icons-codicon &quot;nf-cod-root_folder&quot;)) (format &quot; %s &quot; (nerd-icons-faicon &quot;nf-fa-angle_right&quot;)))) (setq dired-listing-switches &quot;-l --almost-all --human-readable --group-directories-first --no-group&quot;) (dirvish-peek-mode) ; Preview files in minibuffer (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode&#39; ) #+END_SRC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>karthink/gptel</title>
      <link>https://github.com/karthink/gptel</link>
      <description>&lt;p&gt;A simple LLM client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: gptel: A simple LLM client for Emacs&lt;/p&gt; 
&lt;p&gt;[[https://elpa.nongnu.org/nongnu/gptel.html][file:https://elpa.nongnu.org/nongnu/gptel.svg]] [[https://elpa.nongnu.org/nongnu-devel/gptel.html][file:https://elpa.nongnu.org/nongnu-devel/gptel.svg]] [[https://stable.melpa.org/#/gptel][file:https://stable.melpa.org/packages/gptel-badge.svg]] [[https://melpa.org/#/gptel][file:https://melpa.org/packages/gptel-badge.svg]]&lt;/p&gt; 
&lt;p&gt;gptel is a simple Large Language Model chat client for Emacs, with support for multiple models and backends. It works in the spirit of Emacs, available at any time and uniformly in any buffer.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
  | LLM Backend | Supports | Requires | |----------------------+----------+----------------------------| | ChatGPT | ✓ | [[https://platform.openai.com/account/api-keys][API key]] | | Anthropic (Claude) | ✓ | [[https://www.anthropic.com/api][API key]] | | Gemini | ✓ | [[https://makersuite.google.com/app/apikey][API key]] | | Ollama | ✓ | [[https://ollama.ai/][Ollama running locally]] | | Open WebUI | ✓ | [[https://openwebui.com/][Open WebUI running locally]] | | Llama.cpp | ✓ | [[https://github.com/ggml-org/llama.cpp/tree/master/tools/server#quick-start][Llama.cpp running locally]] | | Llamafile | ✓ | [[https://github.com/Mozilla-Ocho/llamafile#quickstart][Local Llamafile server]] | | GPT4All | ✓ | [[https://gpt4all.io/index.html][GPT4All running locally]] | | Kagi FastGPT | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Kagi Summarizer | ✓ | [[https://kagi.com/settings?p=api][API key]] | | Azure | ✓ | Deployment and API key | | Groq | ✓ | [[https://console.groq.com/keys][API key]] | | Mistral Le Chat | ✓ | [[https://console.mistral.ai/api-keys][API key]] | | Perplexity | ✓ | [[https://docs.perplexity.ai/docs/getting-started][API key]] | | OpenRouter | ✓ | [[https://openrouter.ai/keys][API key]] | | AI/ML API | ✓ | [[https://aimlapi.com/app/?utm_source=gptel&amp;amp;utm_medium=github&amp;amp;utm_campaign=integration][API key]] | | together.ai | ✓ | [[https://api.together.xyz/settings/api-keys][API key]] | | Anyscale | ✓ | [[https://docs.endpoints.anyscale.com/][API key]] | | PrivateGPT | ✓ | [[https://github.com/zylon-ai/private-gpt#-documentation][PrivateGPT running locally]] | | DeepSeek | ✓ | [[https://platform.deepseek.com/api_keys][API key]] | | Sambanova (Deepseek) | ✓ | [[https://cloud.sambanova.ai/apis][API key]] | | Cerebras | ✓ | [[https://cloud.cerebras.ai/][API key]] | | Github Models | ✓ | [[https://github.com/settings/tokens][Token]] | | Novita AI | ✓ | [[https://novita.ai/model-api/product/llm-api?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][Token]] | | xAI | ✓ | [[https://console.x.ai?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][API key]] | | GitHub CopilotChat | ✓ | GitHub account | | Bedrock | ✓ | AWS credentials | | Moonshot (Kimi) | ✓ | API key ([[https://platform.moonshot.cn/console][CN]] or [[https://platform.moonshot.ai/console][Global]]) | #+html: 
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;General usage&lt;/em&gt;: ([[https://www.youtube.com/watch?v=bsRnh_brggM][YouTube Demo]])&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;In-place usage&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&quot;&gt;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Tool use&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&quot;&gt;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&quot;&gt;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;See also [[https://youtu.be/g1VMGhC5gRU][this youtube demo (2 minutes)]] by Armin Darvish.&lt;/p&gt; 
&lt;h1&gt;&lt;em&gt;Media support&lt;/em&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p align=&quot;center&quot;&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&quot;&gt;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&lt;/a&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;em&gt;Multi-LLM support demo&lt;/em&gt;:&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&quot;&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt;gptel is async and fast, streams responses.&lt;/li&gt; 
 &lt;li&gt;Interact with LLMs from anywhere in Emacs (any buffer, shell, minibuffer, wherever).&lt;/li&gt; 
 &lt;li&gt;LLM responses are in Markdown or Org markup.&lt;/li&gt; 
 &lt;li&gt;Supports multiple independent conversations and one-off ad hoc interactions.&lt;/li&gt; 
 &lt;li&gt;Supports tool-use to equip LLMs with agentic capabilities.&lt;/li&gt; 
 &lt;li&gt;Supports Model Context Protocol (MCP) integration using [[https://github.com/lizqwerscott/mcp.el][mcp.el]].&lt;/li&gt; 
 &lt;li&gt;Supports multi-modal input (include images, documents).&lt;/li&gt; 
 &lt;li&gt;Supports &quot;reasoning&quot; content in LLM responses.&lt;/li&gt; 
 &lt;li&gt;Save chats as regular Markdown/Org/Text files and resume them later.&lt;/li&gt; 
 &lt;li&gt;Edit your previous prompts or LLM responses when continuing a conversation. These will be fed back to the model.&lt;/li&gt; 
 &lt;li&gt;Supports introspection, so you can see /exactly/ what will be sent. Inspect and modify queries before sending them.&lt;/li&gt; 
 &lt;li&gt;Pause multi-stage requests at an intermediate stage and resume them later.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t like gptel&#39;s workflow? Use it to create your own for any supported model/backend with a [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][simple API]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;gptel uses Curl if available, but falls back to the built-in url-retrieve to work without external dependencies.&lt;/p&gt; 
&lt;p&gt;** Contents :toc:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#installation][Installation]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#straight][Straight]]&lt;/li&gt; 
   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; 
   &lt;li&gt;[[#doom-emacs][Doom Emacs]]&lt;/li&gt; 
   &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#setup][Setup]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chatgpt][ChatGPT]]&lt;/li&gt; 
   &lt;li&gt;[[#other-llm-backends][Other LLM backends]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#azure][Azure]]&lt;/li&gt; 
     &lt;li&gt;[[#gpt4all][GPT4All]]&lt;/li&gt; 
     &lt;li&gt;[[#ollama][Ollama]]&lt;/li&gt; 
     &lt;li&gt;[[#open-webui][Open WebUI]]&lt;/li&gt; 
     &lt;li&gt;[[#gemini][Gemini]]&lt;/li&gt; 
     &lt;li&gt;[[#llamacpp-or-llamafile][Llama.cpp or Llamafile]]&lt;/li&gt; 
     &lt;li&gt;[[#kagi-fastgpt--summarizer][Kagi (FastGPT &amp;amp; Summarizer)]]&lt;/li&gt; 
     &lt;li&gt;[[#togetherai][together.ai]]&lt;/li&gt; 
     &lt;li&gt;[[#anyscale][Anyscale]]&lt;/li&gt; 
     &lt;li&gt;[[#perplexity][Perplexity]]&lt;/li&gt; 
     &lt;li&gt;[[#anthropic-claude][Anthropic (Claude)]]&lt;/li&gt; 
     &lt;li&gt;[[#groq][Groq]]&lt;/li&gt; 
     &lt;li&gt;[[#mistral-le-chat][Mistral Le Chat]]&lt;/li&gt; 
     &lt;li&gt;[[#openrouter][OpenRouter]]&lt;/li&gt; 
     &lt;li&gt;[[#privategpt][PrivateGPT]]&lt;/li&gt; 
     &lt;li&gt;[[#deepseek][DeepSeek]]&lt;/li&gt; 
     &lt;li&gt;[[#sambanova-deepseek][Sambanova (Deepseek)]]&lt;/li&gt; 
     &lt;li&gt;[[#cerebras][Cerebras]]&lt;/li&gt; 
     &lt;li&gt;[[#github-models][Github Models]]&lt;/li&gt; 
     &lt;li&gt;[[#novita-ai][Novita AI]]&lt;/li&gt; 
     &lt;li&gt;[[#xai][xAI]]&lt;/li&gt; 
     &lt;li&gt;[[#aiml-api][AI/ML API]]&lt;/li&gt; 
     &lt;li&gt;[[#github-copilotchat][GitHub CopilotChat]]&lt;/li&gt; 
     &lt;li&gt;[[#aws-bedrock][AWS Bedrock]]&lt;/li&gt; 
     &lt;li&gt;[[#moonshot-kimi][Moonshot (Kimi)]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#usage][Usage]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#in-any-buffer][In any buffer:]]&lt;/li&gt; 
   &lt;li&gt;[[#in-a-dedicated-chat-buffer][In a dedicated chat buffer:]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#including-media-images-documents-or-plain-text-files-with-requests][Including media (images, documents or plain-text files) with requests]]&lt;/li&gt; 
     &lt;li&gt;[[#save-and-restore-your-chat-sessions][Save and restore your chat sessions]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#setting-options-backend-model-request-parameters-system-prompts-and-more][Setting options (backend, model, request parameters, system prompts and more)]]&lt;/li&gt; 
   &lt;li&gt;[[#include-more-context-with-requests][Include more context with requests]]&lt;/li&gt; 
   &lt;li&gt;[[#handle-reasoning-content][Handle &quot;reasoning&quot; content]]&lt;/li&gt; 
   &lt;li&gt;[[#tool-use][Tool use]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#defining-gptel-tools][Defining gptel tools]]&lt;/li&gt; 
     &lt;li&gt;[[#selecting-tools][Selecting tools]]&lt;/li&gt; 
     &lt;li&gt;[[#model-context-protocol-mcp-integration][Model Context Protocol (MCP) integration]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#rewrite-refactor-or-fill-in-a-region][Rewrite, refactor or fill in a region]]&lt;/li&gt; 
   &lt;li&gt;[[#extra-org-mode-conveniences][Extra Org mode conveniences]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#faq][FAQ]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chat-buffer-ui][Chat buffer UI]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-window-to-scroll-automatically-as-the-response-is-inserted][I want the window to scroll automatically as the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-cursor-to-move-to-the-next-prompt-after-the-response-is-inserted][I want the cursor to move to the next prompt after the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-to-change-the-formatting-of-the-prompt-and-llm-response][I want to change the formatting of the prompt and LLM response]]&lt;/li&gt; 
     &lt;li&gt;[[#how-does-gptel-distinguish-between-user-prompts-and-llm-responses][How does gptel distinguish between user prompts and LLM responses?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#transient-menu-behavior][Transient menu behavior]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-set-gptel-options-but-only-for-this-buffer][I want to set gptel options, but only for this buffer]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-transient-menu-options-to-be-saved-so-i-only-need-to-set-them-once][I want the transient menu options to be saved so I only need to set them once]]&lt;/li&gt; 
     &lt;li&gt;[[#using-the-transient-menu-leaves-behind-extra-windows][Using the transient menu leaves behind extra windows]]&lt;/li&gt; 
     &lt;li&gt;[[#can-i-change-the-transient-menu-key-bindings][Can I change the transient menu key bindings?]]&lt;/li&gt; 
     &lt;li&gt;[[#doom-emacs-sending-a-query-from-the-gptel-menu-fails-because-of-a-key-conflict-with-org-mode][(Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#miscellaneous][Miscellaneous]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-use-gptel-in-a-way-thats-not-supported-by-gptel-send-or-the-options-menu][I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu]]&lt;/li&gt; 
     &lt;li&gt;[[#chatgpt-i-get-the-error-http2-429-you-exceeded-your-current-quota][(ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot;]]&lt;/li&gt; 
     &lt;li&gt;[[#why-another-llm-client][Why another LLM client?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#additional-configuration][Additional Configuration]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#option-presets][Option presets]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#applying-presets-to-requests-automatically][Applying presets to requests automatically]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#alternatives][Alternatives]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#packages-using-gptel][Packages using gptel]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** COMMENT Breaking changes!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=gptel-model= is now expected to be a symbol, not a string. Please update your configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;p&gt;Note: gptel requires Transient 0.7.4 or higher. Transient is a built-in package and Emacs does not update it by default. Ensure that =package-install-upgrade-built-in= is true, or update Transient manually.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Release version&lt;/em&gt;: =M-x package-install= ⏎ =gptel= in Emacs.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Development snapshot&lt;/em&gt;: Add MELPA or NonGNU-devel ELPA to your list of package sources, then install with =M-x package-install= ⏎ =gptel=.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; Install =markdown-mode=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Straight #+html: &lt;/summary&gt; #+begin_src emacs-lisp (straight-use-package &#39;gptel) #+end_src #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Manual #+html: &lt;/summary&gt; Note: gptel requires Transient 0.7.4 or higher. Transient is a built-in package and Emacs does not update it by default. Ensure that =package-install-upgrade-built-in= is true, or update Transient manually.
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Clone or download this repository and run =M-x package-install-file⏎= on the repository directory. #+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Doom Emacs #+html: &lt;/summary&gt; In =packages.el= #+begin_src emacs-lisp (package! gptel :recipe (:nonrecursive t)) #+end_src
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;In =config.el= #+begin_src emacs-lisp (use-package! gptel :config (setq! gptel-api-key &quot;your key&quot;)) #+end_src &quot;your key&quot; can be the API key itself, or (safer) a function that returns the key. Setting =gptel-api-key= is optional, you will be asked for a key if it&#39;s not found.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Spacemacs #+html: &lt;/summary&gt; In your =.spacemacs= file, add =llm-client= to =dotspacemacs-configuration-layers=. #+begin_src emacs-lisp (llm-client :variables llm-client-enable-gptel t) #+end_src #+html: 
&lt;/details&gt; ** Setup *** ChatGPT Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Optional: Set =gptel-api-key= to the key. Alternatively, you may choose a more secure method such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Setting it to a custom function that returns the key.&lt;/li&gt; 
 &lt;li&gt;Leaving it set to the default =gptel-api-key-from-auth-source= function which reads keys from =~/.authinfo=. (See [[#optional-securing-api-keys-with-authinfo][authinfo details]])&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Other LLM backends&lt;/p&gt; 
&lt;p&gt;ChatGPT is configured out of the box. If you want to use other LLM backends (like Ollama, Claude/Anthropic or Gemini) you need to register and configure them first.&lt;/p&gt; 
&lt;p&gt;As an example, registering a backend typically looks like the following: #+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; :stream t :key gptel-api-key) #+end_src Once this backend is registered, you&#39;ll see model names prefixed by &quot;Claude:&quot; appear in gptel&#39;s menu.&lt;/p&gt; 
&lt;p&gt;See below for details on your preferred LLM provider, including local LLMs.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; ***** (Optional) Securing API keys with =authinfo= #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;You can use Emacs&#39; built-in support for =authinfo= to store API keys required by gptel. Add your API keys to =~/.authinfo=, and leave =gptel-api-key= set to its default. By default, the API endpoint DNS name (e.g. &quot;api.openai.com&quot;) is used as HOST and &quot;apikey&quot; as USER. #+begin_src authinfo machine api.openai.com login apikey password sk-secret-openai-api-key-goes-here machine api.anthropic.com login apikey password sk-secret-anthropic-api-key-goes-here #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Azure #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-azure &quot;Azure-1&quot; ;Name, whatever you&#39;d like :protocol &quot;https&quot; ;Optional -- https is the default :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; ;or equivalent :stream t ;Enable streaming responses :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4)) #+end_src Refer to the documentation of =gptel-make-azure= to set more parameters.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel. (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-3.5-turbo gptel-backend (gptel-make-azure &quot;Azure-1&quot; :protocol &quot;https&quot; :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; :stream t :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4))) #+end_src #+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** GPT4All #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-gpt4all &quot;GPT4All&quot; ;Name of your choosing :protocol &quot;http&quot; :host &quot;localhost:4891&quot; ;Where it&#39;s running :models &#39;(mistral-7b-openorca.Q4_0.gguf)) ;Available models #+end_src These are the required parameters, refer to the documentation of =gptel-make-gpt4all= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. Additionally you may want to increase the response token size since GPT4All uses very short (often truncated) responses by default. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-max-tokens 500 gptel-model &#39;mistral-7b-openorca.Q4_0.gguf gptel-backend (gptel-make-gpt4all &quot;GPT4All&quot; :protocol &quot;http&quot; :host &quot;localhost:4891&quot; :models &#39;(mistral-7b-openorca.Q4_0.gguf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Ollama #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-ollama &quot;Ollama&quot; ;Any name of your choosing :host &quot;localhost:11434&quot; ;Where it&#39;s running :stream t ;Stream responses :models &#39;(mistral:latest)) ;List of models #+end_src These are the required parameters, refer to the documentation of =gptel-make-ollama= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral:latest gptel-backend (gptel-make-ollama &quot;Ollama&quot; :host &quot;localhost:11434&quot; :stream t :models &#39;(mistral:latest))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Open WebUI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;[[https://openwebui.com/][Open WebUI]] is an open source, self-hosted system which provides a multi-user web chat interface and an API endpoint for accessing LLMs, especially LLMs running locally on inference servers like Ollama.&lt;/p&gt; 
 &lt;p&gt;Because it presents an OpenAI-compatible endpoint, you use &lt;del&gt;gptel-make-openai&lt;/del&gt; to register it as a backend.&lt;/p&gt; 
 &lt;p&gt;For instance, you can use this form to register a backend for a local instance of Open Web UI served via http on port 3000:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;localhost:3000&quot; :protocol &quot;http&quot; :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;Or if you are running Open Web UI on another host on your local network (&lt;del&gt;box.local&lt;/del&gt;), serving via https with self-signed certificates, this will work:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;box.local&quot; :curl-args &#39;(&quot;--insecure&quot;) ; needed for self-signed certs :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;To find your API key in Open WebUI, click the user name in the bottom left, Settings, Account, and then Show by API Keys section.&lt;/p&gt; 
 &lt;p&gt;Refer to the documentation of =gptel-make-openai= for more configuration options.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &quot;gemma3n:latest&quot; gptel-backend (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;localhost:3000&quot; :protocol &quot;http&quot; :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Gemini #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; :key can be a function that returns the API key. (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t) #+end_src These are the required parameters, refer to the documentation of =gptel-make-gemini= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gemini-2.5-pro-exp-03-25 gptel-backend (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
  #+html: 
 &lt;summary&gt; **** Llama.cpp or Llamafile #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;(If using a llamafile, run a [[https://github.com/Mozilla-Ocho/llamafile#other-example-llamafiles][server llamafile]] instead of a &quot;command-line llamafile&quot;, and a model that supports text generation.)&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Llama.cpp offers an OpenAI compatible API (gptel-make-openai &quot;llama-cpp&quot; ;Any name :stream t ;Stream responses :protocol &quot;http&quot; :host &quot;localhost:8000&quot; ;Llama.cpp server location :models &#39;(test)) ;Any names, doesn&#39;t matter for Llama #+end_src These are the required parameters, refer to the documentation of =gptel-make-openai= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;test gptel-backend (gptel-make-openai &quot;llama-cpp&quot; :stream t :protocol &quot;http&quot; :host &quot;localhost:8000&quot; :models &#39;(test))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Kagi (FastGPT &amp;amp; Summarizer) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Kagi&#39;s FastGPT model and the Universal Summarizer are both supported. A couple of notes:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Universal Summarizer: If there is a URL at point, the summarizer will summarize the contents of the URL. Otherwise the context sent to the model is the same as always: the buffer text upto point, or the contents of the region if the region is active.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Kagi models do not support multi-turn conversations, interactions are &quot;one-shot&quot;. They also do not support streaming responses.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-kagi &quot;Kagi&quot; ;any name :key &quot;YOUR_KAGI_API_KEY&quot;) ;can be a function that returns the key #+end_src These are the required parameters, refer to the documentation of =gptel-make-kagi= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend and the model (fastgpt/summarizer) from the transient menu when using gptel.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;fastgpt gptel-backend (gptel-make-kagi &quot;Kagi&quot; :key &quot;YOUR_KAGI_API_KEY&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;The alternatives to =fastgpt= include =summarize:cecil=, =summarize:agnes=, =summarize:daphne= and =summarize:muriel=. The difference between the summarizer engines is [[https://help.kagi.com/kagi/api/summarizer.html#summarization-engines][documented here]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** together.ai #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Together.ai offers an OpenAI compatible API (gptel-make-openai &quot;TogetherAI&quot; ;Any name you want :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;TogetherAI&quot;&lt;br /&gt; :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot;&lt;br /&gt; :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anyscale #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Anyscale offers an OpenAI compatible API (gptel-make-openai &quot;Anyscale&quot; ;Any name you want :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;Anyscale&quot; :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Perplexity #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-perplexity &quot;Perplexity&quot; ;Any name you want :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t) ;If you want responses to be streamed #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;sonar gptel-backend (gptel-make-perplexity &quot;Perplexity&quot; :key &quot;your-api-key&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anthropic (Claude) #+html: &lt;/summary&gt; Register a backend with #+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; ;Any name you want :stream t ;Streaming responses :key &quot;your-api-key&quot;) #+end_src The =:key= can be a function that returns the key (more secure).
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3-sonnet-20240229 ; &quot;claude-3-opus-20240229&quot; also available gptel-backend (gptel-make-anthropic &quot;Claude&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Interim support for Claude 3.7 Sonnet&lt;/p&gt; 
 &lt;p&gt;To use Claude 3.7 Sonnet model in its &quot;thinking&quot; mode, you can define a second Claude backend and select it via the UI or elisp:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude-thinking&quot; ;Any name you want :key &quot;your-API-key&quot; :stream t :models &#39;(claude-sonnet-4-20250514 claude-3-7-sonnet-20250219) :request-params &#39;(:thinking (:type &quot;enabled&quot; :budget_tokens 2048) :max_tokens 4096)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can set the reasoning budget tokens and max tokens for this usage via the =:budget_tokens= and =:max_tokens= keys here, respectively.&lt;/p&gt; 
 &lt;p&gt;You can control whether/how the reasoning output is shown via gptel&#39;s menu or =gptel-include-reasoning=, see [[#handle-reasoning-content][handling reasoning content]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Groq #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Groq offers an OpenAI compatible API (gptel-make-openai &quot;Groq&quot; ;Any name you want :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]). Note that Groq is fast enough that you could easily set =:stream nil= and still get near-instant responses.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;Groq&quot; :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Mistral Le Chat #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Mistral offers an OpenAI compatible API (gptel-make-openai &quot;MistralLeChat&quot; ;Any name you want :host &quot;api.mistral.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :protocol &quot;https&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(&quot;mistral-small&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral-small gptel-backend (gptel-make-openai &quot;MistralLeChat&quot; ;Any name you want :host &quot;api.mistral.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :protocol &quot;https&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(&quot;mistral-small&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** OpenRouter #+html: &lt;/p&gt;&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; OpenRouter offers an OpenAI compatible API (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** PrivateGPT #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;private-gpt gptel-backend (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** DeepSeek #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-deepseek &quot;DeepSeek&quot; ;Any name you want :stream t ;for streaming responses :key &quot;your-api-key&quot;) ;can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;deepseek-reasoner gptel-backend (gptel-make-deepseek &quot;DeepSeek&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** Sambanova (Deepseek) #+html: &lt;/p&gt;&lt;/summary&gt; Sambanova offers various LLMs through their Samba Nova Cloud offering, with Deepseek-R1 being one of them. The token speed for Deepseek R1 via Sambanova is about 6 times faster than when accessed through deepseek.com
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-openai &quot;Sambanova&quot; ;Any name you want :host &quot;api.sambanova.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;for streaming responses :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(DeepSeek-R1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend The code aboves makes the backend available for selection. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Add these two lines to your configuration: #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;DeepSeek-R1) (setq gptel-backend (gptel-get-backend &quot;Sambanova&quot;)) #+end_src #+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** Cerebras #+html: &lt;/p&gt;&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Cerebras offers an instant OpenAI compatible API (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;optionally nil as Cerebras is instant AI :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama3.1-70b llama3.1-8b)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;llama3.1-8b gptel-backend (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream nil :key &quot;your-api-key&quot; :models &#39;(llama3.1-70b llama3.1-8b))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Github Models #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;NOTE: [[https://docs.github.com/en/github-models/about-github-models][GitHub Models]] is /not/ GitHub Copilot! If you want to use GitHub Copilot chat via gptel, look at the instructions for GitHub CopilotChat below instead.&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Github Models offers an OpenAI compatible API (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will need to create a github [[https://github.com/settings/personal-access-tokens][token]].&lt;/p&gt; 
 &lt;p&gt;For all the available models, check the [[https://github.com/marketplace/models][marketplace]].&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Novita AI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; Novita AI offers an OpenAI compatible API (gptel-make-openai &quot;NovitaAI&quot; ;Any name you want :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; gryphe/mythomax-l2-13b meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gryphe/mythomax-l2-13b gptel-backend (gptel-make-openai &quot;NovitaAI&quot;&lt;br /&gt; :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot;&lt;br /&gt; :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; mistralai/Mixtral-8x7B-Instruct-v0.1 meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** xAI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-xai &quot;xAI&quot; ; Any name you want :stream t :key &quot;your-api-key&quot;) ; can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp (setq gptel-model &#39;grok-3-latest gptel-backend (gptel-make-xai &quot;xAI&quot; ; Any name you want :key &quot;your-api-key&quot; ; can be a function that returns the key :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** AI/ML API #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;AI/ML API provides 300+ AI models including Deepseek, Gemini, ChatGPT. The models run at enterprise-grade rate limits and uptimes.&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp ;; AI/ML API offers an OpenAI compatible API (gptel-make-openai &quot;AI/ML API&quot; ;Any name you want :host &quot;api.aimlapi.com&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(deepseek-chat gemini-pro gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;AI/ML API&quot; :host &quot;api.aimlapi.com&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(deepseek-chat gemini-pro gpt-4o))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** GitHub CopilotChat #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-gh-copilot &quot;Copilot&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will be informed to login into =GitHub= as required. You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3.7-sonnet gptel-backend (gptel-make-gh-copilot &quot;Copilot&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** AWS Bedrock #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-bedrock &quot;AWS&quot; ;; optionally enable streaming :stream t :region &quot;ap-northeast-1&quot; ;; subset of gptel--bedrock-models :models &#39;(claude-sonnet-4-20250514) ;; Model region for cross-region inference profiles. Required for models such ;; as Claude without on-demand throughput support. One of &#39;apac, &#39;eu or &#39;us. ;; &lt;a href=&quot;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&quot;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&lt;/a&gt; :model-region &#39;apac) #+end_src&lt;/p&gt; 
 &lt;p&gt;The Bedrock backend gets your AWS credentials from the environment variables. It expects to find either &lt;del&gt;AWS_ACCESS_KEY_ID&lt;/del&gt;, &lt;del&gt;AWS_SECRET_ACCESS_KEY&lt;/del&gt;, &lt;del&gt;AWS_SESSION_TOKEN&lt;/del&gt; (optional), or if present, can use &lt;del&gt;AWS_PROFILE&lt;/del&gt; to get these directly from the &lt;del&gt;aws&lt;/del&gt; cli.&lt;/p&gt; 
 &lt;p&gt;NOTE: The Bedrock backend needs curl &amp;gt;= 8.5 in order for the sigv4 signing to work properly, &lt;a href=&quot;https://github.com/curl/curl/issues/11794&quot;&gt;https://github.com/curl/curl/issues/11794&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;An error will be signalled if &lt;del&gt;gptel-curl&lt;/del&gt; is &lt;del&gt;NIL&lt;/del&gt;.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. #+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-sonnet-4-20250514 gptel-backend (gptel-make-bedrock &quot;AWS&quot; ;; optionally enable streaming :stream t :region &quot;ap-northeast-1&quot; ;; subset of gptel--bedrock-models :models &#39;(claude-sonnet-4-20250514) ;; Model region for cross-region inference profiles. Required for models such ;; as Claude without on-demand throughput support. One of &#39;apac, &#39;eu or &#39;us. ;; &lt;a href=&quot;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&quot;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&lt;/a&gt; :model-region &#39;apac)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Moonshot (Kimi) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;Moonshot&quot; :host &quot;api.moonshot.cn&quot; ;; or &quot;api.moonshot.ai&quot; for the global site :key &quot;your-api-key&quot; :stream t ;; optionally enable streaming :models &#39;(kimi-latest kimi-k2-0711-preview)) #+end_src&lt;/p&gt; 
 &lt;p&gt;See [[https://platform.moonshot.ai/docs/pricing/chat][Moonshot.ai document]] for a complete list of models.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Use the builtin search tool&lt;/p&gt; 
 &lt;p&gt;Moonshot supports a builtin search tool that does not requires the user to provide the tool implementation. To use that, you first need to define the tool and add to =gptel-tools= (while it does not requires the client to provide the search implementation, it does expects the client to reply a tool call message with its given argument, to be consistent with other tool calls):&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (setq gptel-tools (list (gptel-make-tool :name &quot;$web_search&quot; :function (lambda (&amp;amp;optional search_result) (json-serialize `(:search_result ,search_result))) :description &quot;Moonshot builtin web search. Only usable by moonshot model (kimi), ignore this if you are not.&quot; :args &#39;((:name &quot;search_result&quot; :type object :optional t)) :category &quot;web&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;Then you also need to add the tool declaration via =:request-params= because it needs a special =builtin_function= type:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;Moonshot&quot; :host &quot;api.moonshot.cn&quot; ;; or &quot;api.moonshot.ai&quot; for the global site :key &quot;your-api-key&quot; :stream t ;; optionally enable streaming :models &#39;(kimi-latest kimi-k2-0711-preview) :request-params &#39;(:tools [(:type &quot;builtin_function&quot; :function (:name &quot;$web_search&quot;))])) #+end_src&lt;/p&gt; 
 &lt;p&gt;Now the chat should be able to automatically use search. Try &quot;what&#39;s new today&quot; and you should expect the up-to-date news in response.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Usage&lt;/p&gt; 
&lt;p&gt;gptel provides a few powerful, general purpose and flexible commands. You can dynamically tweak their behavior to the needs of your task with /directives/, redirection options and more. There is a [[https://www.youtube.com/watch?v=bsRnh_brggM][video demo]] showing various uses of gptel -- but =gptel-send= might be all you need.&lt;/p&gt; 
&lt;p&gt;|-------------------+---------------------------------------------------------------------------------------------------| | &lt;em&gt;To send queries&lt;/em&gt; | Description | |-------------------+---------------------------------------------------------------------------------------------------| | =gptel-send= | Send all text up to =(point)=, or the selection if region is active. Works anywhere in Emacs. | | =gptel= | Create a new dedicated chat buffer. Not required to use gptel. | | =gptel-rewrite= | Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying. | |-------------------+---------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------+---------------------------------------------------------------| | &lt;em&gt;To tweak behavior&lt;/em&gt; | | |---------------------+---------------------------------------------------------------| | =C-u= =gptel-send= | Transient menu for preferences, input/output redirection etc. | | =gptel-menu= | /(Same)/ | |---------------------+---------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+--------------------------------------------------------------------------------------------------------| | &lt;em&gt;To add context&lt;/em&gt; | | |------------------+--------------------------------------------------------------------------------------------------------| | =gptel-add= | Add/remove a region or buffer to gptel&#39;s context. In Dired, add/remove marked files. | | =gptel-add-file= | Add a file (text or supported media type) to gptel&#39;s context. Also available from the transient menu. | |------------------+--------------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|----------------------------+-----------------------------------------------------------------------------------------| | &lt;em&gt;Org mode bonuses&lt;/em&gt; | | |----------------------------+-----------------------------------------------------------------------------------------| | =gptel-org-set-topic= | Limit conversation context to an Org heading. (For branching conversations see below.) | | =gptel-org-set-properties= | Write gptel configuration as Org properties, for per-heading chat configuration. | |----------------------------+-----------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+-------------------------------------------------------------------------------------------| | &lt;em&gt;GitHub Copilot&lt;/em&gt; | | |------------------+-------------------------------------------------------------------------------------------| | =gptel-gh-login= | Authenticate with GitHub Copilot. (Automatically handled, but can be forced if required.) | |------------------+-------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;*** In any buffer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= to send the text up to the cursor. The response will be inserted below. Continue the conversation by typing below the response.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a region is selected, the conversation will be limited to its contents.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= with a prefix argument (&lt;del&gt;C-u&lt;/del&gt;)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;to set chat parameters (model, backend, system message etc) for this buffer,&lt;/li&gt; 
   &lt;li&gt;include quick instructions for the next request only,&lt;/li&gt; 
   &lt;li&gt;to add additional context -- regions, buffers or files -- to gptel,&lt;/li&gt; 
   &lt;li&gt;to read the prompt from or redirect the response elsewhere,&lt;/li&gt; 
   &lt;li&gt;or to replace the prompt with the response.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/3562a6e2-7a5c-4f7e-8e57-bf3c11589c73&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can also define a &quot;preset&quot; bundle of options that are applied together, see [[#option-presets][Option presets]] below.&lt;/p&gt; 
&lt;p&gt;*** In a dedicated chat buffer:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: gptel works anywhere in Emacs. The dedicated chat buffer only adds some conveniences.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run =M-x gptel= to start or switch to the chat buffer. It will ask you for the key if you skipped the previous step. Run it with a prefix-arg (=C-u M-x gptel=) to start a new session.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the gptel buffer, send your prompt with =M-x gptel-send=, bound to =C-c RET=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set chat parameters (LLM provider, model, directives etc) for the session by calling =gptel-send= with a prefix argument (=C-u C-c RET=):&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/eb4867e5-30ac-455f-999f-e17123afb810&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;That&#39;s it. You can go back and edit previous prompts and responses if you want.&lt;/p&gt; 
&lt;p&gt;The default mode is =markdown-mode= if available, else =text-mode=. You can set =gptel-default-mode= to =org-mode= if desired.&lt;/p&gt; 
&lt;p&gt;You can also define a &quot;preset&quot; bundle of options that are applied together, see [[#option-presets][Option presets]] below.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Including media (images, documents or plain-text files) with requests #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel supports sending media in Markdown and Org chat buffers, but this feature is disabled by default.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can enable it globally, for all models that support it, by setting =gptel-track-media=.&lt;/li&gt; 
  &lt;li&gt;Or you can set it locally, just for the chat buffer, via the header line:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/91f6aaab-2ea4-4806-9cc9-39b4b46a8e6c&quot; align=&quot;center&quot; alt=&quot;Image showing a gptel chat buffer&#39;s header line with the button to toggle media support&quot; /&gt;&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;There are two ways to include media or plain-text files with requests:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Adding media files to the context with =gptel-add-file=, described further below.&lt;/li&gt; 
  &lt;li&gt;Including links to media in chat buffers, described here:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;To include plain-text files, images or other supported document types with requests in chat buffers, you can include links to them in the chat buffer. Such a link must be &quot;standalone&quot;, i.e. on a line by itself surrounded by whitespace.&lt;/p&gt; 
 &lt;p&gt;In Org mode, for example, the following are all &lt;em&gt;valid&lt;/em&gt; ways of including an image with the request:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file links: #+begin_src In this yaml file, I have some key-remapping configuration:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/remap.yaml]]&lt;/p&gt; 
 &lt;p&gt;Could you explain what it does, and which program might be using it? #+end_src&lt;/p&gt; 
 &lt;p&gt;#+begin_src Describe this picture&lt;/p&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link with description: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png][some picture]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot;, angle file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;a href=&quot;file:/path/to/screenshot.png&quot;&gt;file:/path/to/screenshot.png&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;p&gt;The following links are &lt;em&gt;not valid&lt;/em&gt;, and the text of the link will be sent instead of the file contents:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Inline link: #+begin_src Describe this [[file:/path/to/screenshot.png][picture]].&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Link not &quot;standalone&quot;: #+begin_src Describe this picture: [[file:/path/to/screenshot.png]] Focus specifically on the text content. #+end_src&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Not a valid Org link: #+begin_src Describe the picture&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;file:/path/to/screenshot.png #+end_src&lt;/p&gt; 
 &lt;p&gt;Similar criteria apply to Markdown chat buffers.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Save and restore your chat sessions #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Saving the file will save the state of the conversation as well. To resume the chat, open the file and turn on =gptel-mode= before editing the buffer.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Setting options (backend, model, request parameters, system prompts and more)
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Most gptel options can be set from gptel&#39;s transient menu, available by calling =gptel-send= with a prefix-argument, or via =gptel-menu=. To change their default values in your configuration, see [[#additional-configuration][Additional Configuration]]. Chat buffer-specific options are also available via the header-line in chat buffers.&lt;/p&gt; 
&lt;h1&gt;TODO Remove this when writing the manual.&lt;/h1&gt; 
&lt;p&gt;Selecting a model and backend can be done interactively via the =-m= command of =gptel-menu=. Available registered models are prefixed by the name of their backend with a string like =ChatGPT:gpt-4o-mini=, where =ChatGPT= is the backend name you used to register it and =gpt-4o-mini= is the name of the model.&lt;/p&gt; 
&lt;p&gt;*** Include more context with requests&lt;/p&gt; 
&lt;p&gt;By default, gptel will query the LLM with the active region or the buffer contents up to the cursor. Often it can be helpful to provide the LLM with additional context from outside the current buffer. For example, when you&#39;re in a chat buffer but want to ask questions about a (possibly changing) code buffer and auxiliary project files.&lt;/p&gt; 
&lt;p&gt;You can include additional text regions, buffers or files with gptel&#39;s queries in two ways. The first is via links in chat buffers, as described above (see &quot;Including media with requests&quot;).&lt;/p&gt; 
&lt;p&gt;The second is globally via dedicated context commands: you can add a selected region, buffer or file to gptel&#39;s context from the menu, or call =gptel-add=. To add a file use =gptel-add= in Dired, or use the dedicated =gptel-add-file= command. Directories will have their files added recursively after prompting for confirmation.&lt;/p&gt; 
&lt;p&gt;This additional context is &quot;live&quot; and not a snapshot. Once added, the regions, buffers or files are scanned and included at the time of each query. When using multi-modal models, added files can be of any supported type -- typically images.&lt;/p&gt; 
&lt;p&gt;You can examine the active context from the menu: #+html: &amp;lt;img src=&quot;&lt;a href=&quot;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&quot;&gt;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&lt;/a&gt;&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with the &quot;inspect context&quot; command.&quot;&amp;gt;&lt;/p&gt; 
&lt;p&gt;And then browse through or remove context from the context buffer: #+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/79a5ffe8-3d63-4bf7-9bf6-0457ab61bf2a&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s context buffer.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;*** Handle &quot;reasoning&quot; content&lt;/p&gt; 
&lt;p&gt;Some LLMs include in their response a &quot;thinking&quot; or &quot;reasoning&quot; block. This text improves the quality of the LLM’s final output, but may not be interesting to you by itself. You can decide how you would like this &quot;reasoning&quot; content to be handled by gptel by setting the user option =gptel-include-reasoning=. You can include it in the LLM response (the default), omit it entirely, include it in the buffer but ignore it on subsequent conversation turns, or redirect it to another buffer. As with most options, you can specify this behvaior from gptel&#39;s transient menu globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;When included with the response, reasoning content will be delimited by Org blocks or markdown backticks.&lt;/p&gt; 
&lt;p&gt;*** Tool use&lt;/p&gt; 
&lt;p&gt;gptel can provide the LLM with client-side elisp &quot;tools&quot;, or function specifications, along with the request. If the LLM decides to run the tool, it supplies the tool call arguments, which gptel uses to run the tool in your Emacs session. The result is optionally returned to the LLM to complete the task.&lt;/p&gt; 
&lt;p&gt;This exchange can be used to equip the LLM with capabilities or knowledge beyond what is available out of the box -- for instance, you can get the LLM to control your Emacs frame, create or modify files and directories, or look up information relevant to your request via web search or in a local database. Here is a very simple example:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&quot;&gt;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To use tools in gptel, you need&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a model that supports this usage. All the flagship models support tool use, as do many of the smaller open models.&lt;/li&gt; 
 &lt;li&gt;Tool specifications that gptel understands. gptel does not currently include any tools out of the box.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Defining gptel tools #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Defining a gptel tool requires an elisp function and associated metadata. Here are two simple tool definitions:&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To read the contents of an Emacs buffer&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;read_buffer&quot; ; javascript-style snake_case name :function (lambda (buffer) ; the function that will run (unless (buffer-live-p (get-buffer buffer)) (error &quot;error: buffer %s is not live.&quot; buffer)) (with-current-buffer buffer (buffer-substring-no-properties (point-min) (point-max)))) :description &quot;return the contents of an emacs buffer&quot; :args (list &#39;(:name &quot;buffer&quot; :type string ; :type value must be a symbol :description &quot;the name of the buffer whose contents are to be retrieved&quot;)) :category &quot;emacs&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;Besides the function itself, which can be named or anonymous (as above), the tool specification requires a =:name=, =:description= and a list of argument specifications in =:args=. Each argument specification is a plist with atleast the keys =:name=, =:type= and =:description=.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To create a text file&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;create_file&quot; ; javascript-style snake_case name :function (lambda (path filename content) ; the function that runs (let ((full-path (expand-file-name filename path))) (with-temp-buffer (insert content) (write-file full-path)) (format &quot;Created file %s in %s&quot; filename path))) :description &quot;Create a new file with the specified content&quot; :args (list &#39;(:name &quot;path&quot; ; a list of argument specifications :type string :description &quot;The directory where to create the file&quot;) &#39;(:name &quot;filename&quot; :type string :description &quot;The name of the file to create&quot;) &#39;(:name &quot;content&quot; :type string :description &quot;The content to write to the file&quot;)) :category &quot;filesystem&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;With some prompting, you can get an LLM to write these tools for you.&lt;/p&gt; 
 &lt;p&gt;Tools can also be asynchronous, use optional arguments and arguments with more structure (enums, arrays, objects etc). See =gptel-make-tool= for details.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Selecting tools #+html: &lt;/summary&gt; Once defined, tools can be selected (globally, buffer-locally or for the next request only) from gptel&#39;s transient menu:
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fd878596-b313-4385-b675-3d6546909d8b&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s tool selection menu.&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;From here you can also require confirmation for all tool calls, and decide if tool call results should be included in the LLM response. See [[#additional-configuration][Additional Configuration]] for doing these things via elisp.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Model Context Protocol (MCP) integration #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;The [[https://modelcontextprotocol.io/introduction][Model Context Protocol]] (MCP) is a protocol for providing resources and tools to LLMs, and [[https://github.com/appcypher/awesome-mcp-servers][many MCP servers exist]] that provide LLM tools for file access, database connections, API integrations etc. The [[mcp.el]] package for Emacs can act as an MCP client and manage these tool calls for gptel.&lt;/p&gt; 
 &lt;p&gt;To use MCP servers with gptel, you thus need three pieces:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The [[https://github.com/lizqwerscott/mcp.el][mcp.el]] package for Emacs, [[https://melpa.org/#/mcp][available on MELPA]].&lt;/li&gt; 
  &lt;li&gt;MCP servers configured for and running via mcp.el.&lt;/li&gt; 
  &lt;li&gt;gptel and access to an LLM&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;gptel includes =gptel-integrations=, a small library to make this more convenient. This library is not automatically loaded by gptel, so if you would like to use it you have to require it:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (require &#39;gptel-integrations) #+end_src&lt;/p&gt; 
 &lt;p&gt;Once loaded, you can run the =gptel-mcp-connect= and =gptel-mcp-disconnect= commands to register and unregister MCP-provided tools in gptel. These will also show up in the tools menu in gptel, accessed via =M-x gptel-menu= or =M-x gptel-tools=:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/2cbbf8a0-49c7-49a5-ba24-514ad7e08799&quot; align=&quot;center&quot; alt=&quot;Image showing MCP tool registration commands in gptel&#39;s tool selection menu.&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;MCP-provided tools can be used as normal with gptel. Here is a screencast of the process. (In this example the &quot;github&quot; MCP server is installed separately using npm.)&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/f3ea7ac0-a322-4a59-b5b2-b3f592554f8a&quot;&gt;https://github.com/user-attachments/assets/f3ea7ac0-a322-4a59-b5b2-b3f592554f8a&lt;/a&gt; #+html: &lt;/p&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Here&#39;s an example of using these tools:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/b48a6a24-a130-4da7-a2ee-6ea568e10c85&quot;&gt;https://github.com/user-attachments/assets/b48a6a24-a130-4da7-a2ee-6ea568e10c85&lt;/a&gt; #+html: &lt;/p&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Rewrite, refactor or fill in a region&lt;/p&gt; 
&lt;p&gt;In any buffer: with a region selected, you can modify text, rewrite prose or refactor code with =gptel-rewrite=. Example with prose:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&quot;&gt;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;The result is previewed over the original text. By default, the buffer is not modified.&lt;/p&gt; 
&lt;p&gt;Pressing =RET= or clicking in the rewritten region should give you a list of options: you can &lt;em&gt;iterate&lt;/em&gt; on, &lt;em&gt;diff&lt;/em&gt;, &lt;em&gt;ediff&lt;/em&gt;, &lt;em&gt;merge&lt;/em&gt; or &lt;em&gt;accept&lt;/em&gt; the replacement. Example with code:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&quot;&gt;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Acting on the LLM response&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;If you would like one of these things to happen automatically, you can customize =gptel-rewrite-default-action=.&lt;/p&gt; 
&lt;p&gt;These options are also available from =gptel-rewrite=:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/589785b9-aa3f-414a-98dd-d26b7509de08&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;And you can call them directly when the cursor is in the rewritten region:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f5b3ca47-e146-45fe-8584-f11035fa4dbc&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;*** Extra Org mode conveniences&lt;/p&gt; 
&lt;p&gt;gptel offers a few extra conveniences in Org mode.&lt;/p&gt; 
&lt;p&gt;***** Limit conversation context to an Org heading&lt;/p&gt; 
&lt;p&gt;You can limit the conversation context to an Org heading with the command =gptel-org-set-topic=.&lt;/p&gt; 
&lt;p&gt;(This sets an Org property (=GPTEL_TOPIC=) under the heading. You can also add this property manually instead.)&lt;/p&gt; 
&lt;p&gt;***** Use branching context in Org mode (tree of conversations)&lt;/p&gt; 
&lt;p&gt;You can have branching conversations in Org mode, where each hierarchical outline path through the document is a separate conversation branch. This is also useful for limiting the context size of each query. See the variable =gptel-org-branching-context=.&lt;/p&gt; 
&lt;p&gt;If this variable is non-nil, you should probably edit =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist= so that the prefix strings for org-mode are not Org headings, e.g.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setf (alist-get &#39;org-mode gptel-prompt-prefix-alist) &quot;@user\n&quot;) (setf (alist-get &#39;org-mode gptel-response-prefix-alist) &quot;@assistant\n&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Otherwise, the default prompt prefix will make successive prompts sibling headings, and therefore on different conversation branches, which probably isn&#39;t what you want.&lt;/p&gt; 
&lt;p&gt;Note: using this option requires Org 9.7 or higher to be available. The [[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]] package uses gptel to provide this branching conversation behavior for older versions of Org.&lt;/p&gt; 
&lt;p&gt;***** Save gptel parameters to Org headings (reproducible chats)&lt;/p&gt; 
&lt;p&gt;You can declare the gptel model, backend, temperature, system message and other parameters as Org properties with the command =gptel-org-set-properties=. gptel queries under the corresponding heading will always use these settings, allowing you to create mostly reproducible LLM chat notebooks, and to have simultaneous chats with different models, model settings and directives under different Org headings.&lt;/p&gt; 
&lt;p&gt;** FAQ *** Chat buffer UI #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** I want the window to scroll automatically as the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to enable auto-scrolling.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-stream-hook &#39;gptel-auto-scroll) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the cursor to move to the next prompt after the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to move the cursor:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-response-functions &#39;gptel-end-of-response) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can also call =gptel-end-of-response= as a command at any time.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to change the formatting of the prompt and LLM response #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;For dedicated chat buffers: customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. You can set a different pair for each major-mode.&lt;/p&gt; 
 &lt;p&gt;Anywhere in Emacs: Use =gptel-pre-response-hook= and =gptel-post-response-functions=, which see.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** How does gptel distinguish between user prompts and LLM responses? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel uses [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html][text-properties]] to watermark LLM responses. Thus this text is interpreted as a response even if you copy it into another buffer. In regular buffers (buffers without =gptel-mode= enabled), you can turn off this tracking by unsetting =gptel-track-response=.&lt;/p&gt; 
 &lt;p&gt;When restoring a chat state from a file on disk, gptel will apply these properties from saved metadata in the file when you turn on =gptel-mode=.&lt;/p&gt; 
 &lt;p&gt;gptel does /not/ use any prefix or semantic/syntax element in the buffer (such as headings) to separate prompts and responses. The reason for this is that gptel aims to integrate as seamlessly as possible into your regular Emacs usage: LLM interaction is not the objective, it&#39;s just another tool at your disposal. So requiring a bunch of &quot;user&quot; and &quot;assistant&quot; tags in the buffer is noisy and restrictive. If you want these demarcations, you can customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. Note that these prefixes are for your readability only and purely cosmetic.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Transient menu behavior #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to set gptel options, but only for this buffer :PROPERTIES: :ID: 748cbc00-0c92-4705-8839-619b2c80e566 :END: #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;In every menu used to set options, gptel provides a &quot;scope&quot; option, bound to the &lt;del&gt;=&lt;/del&gt; key:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f9904134-2905-4b1d-ad37-b64c777af8ac&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/c0950035-bf65-43ae-b649-8e3b651ce3f1&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fa3b1246-e00f-4c5e-88c7-46557b3507ef&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;You can flip this switch before setting the option to =buffer= or =oneshot=. You only need to flip this switch once, it&#39;s a persistent setting. =buffer= sets the option buffer-locally, =oneshot= will set it for the next gptel request only. The default scope is global.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the transient menu options to be saved so I only need to set them once #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Any model options you set are saved according to the scope (see previous question). But the redirection options in the menu are set for the next query only:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;You can make them persistent across this Emacs session by pressing &lt;del&gt;C-x C-s&lt;/del&gt;:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;(You can also cycle through presets you&#39;ve saved with &lt;del&gt;C-x p&lt;/del&gt; and &lt;del&gt;C-x n&lt;/del&gt;.)&lt;/p&gt; 
 &lt;p&gt;Now these will be enabled whenever you send a query from the transient menu. If you want to use these saved options without invoking the transient menu, you can use a keyboard macro:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Replace with your key to invoke the transient menu: (keymap-global-set &quot;
  &lt;f6&gt;
   &quot; &quot;C-u C-c 
   &lt;return&gt; 
    &lt;return&gt;
     &quot;) #+end_src
    &lt;/return&gt;
   &lt;/return&gt;
  &lt;/f6&gt;&lt;/p&gt; 
 &lt;p&gt;Or see this [[https://github.com/karthink/gptel/wiki/Commonly-requested-features#save-transient-flags][wiki entry]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Using the transient menu leaves behind extra windows #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;If using gptel&#39;s transient menus causes new/extra window splits to be created, check your value of =transient-display-buffer-action=. [[https://github.com/magit/transient/discussions/358][See this discussion]] for more context.&lt;/p&gt; 
 &lt;p&gt;If you are using Helm, see [[https://github.com/magit/transient/discussions/361][Transient#361]].&lt;/p&gt; 
 &lt;p&gt;In general, do not customize this Transient option unless you know what you&#39;re doing!&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Can I change the transient menu key bindings? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Yes, see =transient-suffix-put=. This changes the key to select a backend/model from &quot;-m&quot; to &quot;M&quot; in gptel&#39;s menu: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;-m&quot;) :key &quot;M&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Doom binds &lt;del&gt;RET&lt;/del&gt; in Org mode to =+org/dwim-at-point=, which appears to conflict with gptel&#39;s transient menu bindings for some reason.&lt;/p&gt; 
 &lt;p&gt;Two solutions:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Press &lt;del&gt;C-m&lt;/del&gt; instead of the return key.&lt;/li&gt; 
  &lt;li&gt;Change the send key from return to a key of your choice: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;RET&quot;) :key &quot;
   &lt;f8&gt;
    &quot;) #+end_src
   &lt;/f8&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Miscellaneous #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel&#39;s default usage pattern is simple, and will stay this way: Read input in any buffer and insert the response below it. Some custom behavior is possible with the transient menu (=C-u M-x gptel-send=).&lt;/p&gt; 
 &lt;p&gt;For more programmable usage, gptel provides a general =gptel-request= function that accepts a custom prompt and a callback to act on the response. You can use this to build custom workflows not supported by =gptel-send=. See the documentation of =gptel-request=, and the [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]] for examples.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot; #+html:&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_quote (HTTP/2 429) You exceeded your current quota, please check your plan and billing details. #+end_quote&lt;/p&gt; 
 &lt;p&gt;Using the ChatGPT (or any OpenAI) API requires [[https://platform.openai.com/account/billing/overview][adding credit to your account]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Why another LLM client? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Other Emacs clients for LLMs prescribe the format of the interaction (a comint shell, org-babel blocks, etc). I wanted:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Something that is as free-form as possible: query the model using any text in any buffer, and redirect the response as required. Using a dedicated =gptel= buffer just adds some visual flair to the interaction.&lt;/li&gt; 
  &lt;li&gt;Integration with org-mode, not using a walled-off org-babel block, but as regular text. This way the model can generate code blocks that I can run.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Additional Configuration :PROPERTIES: :ID: f885adac-58a3-4eba-a6b7-91e9e7a17829 :END: #+html: &lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :exports none :results list (let ((all)) (mapatoms (lambda (sym) (when (and (string-match-p &quot;^gptel-[^-]&quot; (symbol-name sym)) (get sym &#39;variable-documentation)) (push sym all)))) all) #+end_src&lt;/p&gt; 
&lt;p&gt;|-------------------------+--------------------------------------------------------------------| | &lt;em&gt;Connection options&lt;/em&gt; | | |-------------------------+--------------------------------------------------------------------| | =gptel-use-curl= | Use Curl? (default), fallback to Emacs&#39; built-in =url=. | | | You can also specify the Curl path here. | | =gptel-proxy= | Proxy server for requests, passed to curl via =--proxy=. | | =gptel-curl-extra-args= | Extra arguments passed to Curl. | | =gptel-api-key= | Variable/function that returns the API key for the active backend. | |-------------------------+--------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-----------------------+---------------------------------------------------------| | &lt;em&gt;LLM request options&lt;/em&gt; | /(Note: not supported uniformly across LLMs)/ | |-----------------------+---------------------------------------------------------| | =gptel-backend= | Default LLM Backend. | | =gptel-model= | Default model to use, depends on the backend. | | =gptel-stream= | Enable streaming responses, if the backend supports it. | | =gptel-directives= | Alist of system directives, can switch on the fly. | | =gptel-max-tokens= | Maximum token count (in query + response). | | =gptel-temperature= | Randomness in response text, 0 to 2. | | =gptel-cache= | Cache prompts, system message or tools (Anthropic only) | | =gptel-use-context= | How/whether to include additional context | | =gptel-use-tools= | Disable, allow or force LLM tool-use | | =gptel-tools= | List of tools to include with requests | |-----------------------+---------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+----------------------------------------------------------------| | &lt;em&gt;Chat UI options&lt;/em&gt; | | |-------------------------------+----------------------------------------------------------------| | =gptel-default-mode= | Major mode for dedicated chat buffers. | | =gptel-prompt-prefix-alist= | Text inserted before queries. | | =gptel-response-prefix-alist= | Text inserted before responses. | | =gptel-track-response= | Distinguish between user messages and LLM responses? | | =gptel-track-media= | Send text, images or other media from links? | | =gptel-confirm-tool-calls= | Confirm all tool calls? | | =gptel-include-tool-results= | Include tool results in the LLM response? | | =gptel-use-header-line= | Display status messages in header-line (default) or minibuffer | | =gptel-display-buffer-action= | Placement of the gptel chat buffer. | |-------------------------------+----------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+-------------------------------------------------------| | &lt;em&gt;Org mode UI options&lt;/em&gt; | | |-------------------------------+-------------------------------------------------------| | =gptel-org-branching-context= | Make each outline path a separate conversation branch | | =gptel-org-ignore-elements= | Ignore parts of the buffer when sending a query | |-------------------------------+-------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------------------------+-------------------------------------------------------------| | &lt;em&gt;Hooks for customization&lt;/em&gt; | | |------------------------------------+-------------------------------------------------------------| | =gptel-save-state-hook= | Runs before saving the chat state to a file on disk | | =gptel-prompt-transform-functions= | Runs in a temp buffer to transform text before sending | | =gptel-post-request-hook= | Runs immediately after dispatching a =gptel-request=. | | =gptel-pre-response-hook= | Runs before inserting the LLM response into the buffer | | =gptel-post-response-functions= | Runs after inserting the full LLM response into the buffer | | =gptel-post-stream-hook= | Runs after each streaming insertion | | =gptel-context-wrap-function= | To include additional context formatted your way | | =gptel-rewrite-default-action= | Automatically diff, ediff, merge or replace refactored text | | =gptel-post-rewrite-functions= | Runs after a =gptel-rewrite= request succeeds | |------------------------------------+-------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt; 
&lt;p&gt;*** Option presets&lt;/p&gt; 
&lt;p&gt;If you use several LLMs for different tasks with accompanying system prompts (instructions) and tool configurations, manually adjusting =gptel= settings each time can become tedious. Presets are a bundle of gptel settings -- such as the model, backend, system message, and enabled tools -- that you can switch to at once.&lt;/p&gt; 
&lt;p&gt;Once defined, presets can be applied from gptel&#39;s transient menu:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/e0cf6a32-d999-4138-8369-23512f5e9311&quot; align=&quot;center&quot; /&gt; #+html: &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;To define a preset, use the =gptel-make-preset= function, which takes a name and keyword-value pairs of settings.&lt;/p&gt; 
&lt;p&gt;Presets can be used to set individual options. Here is an example of a preset to set the system message (and do nothing else): #+begin_src emacs-lisp (gptel-make-preset &#39;explain :system &quot;Explain what this code does to a novice programmer.&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;More generally, you can specify a bundle of options: #+begin_src emacs-lisp (gptel-make-preset &#39;gpt4coding ;preset name, a symbol :description &quot;A preset optimized for coding tasks&quot; ;for your reference :backend &quot;Claude&quot; ;gptel backend or backend name :model &#39;claude-3-7-sonnet-20250219.1 :system &quot;You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations.&quot; :tools &#39;(&quot;read_buffer&quot; &quot;modify_buffer&quot;)) ;gptel tools or tool names #+end_src&lt;/p&gt; 
&lt;p&gt;Besides a couple of special keys (=:description=, =:parents= to inherit other presets), there is no predefined list of keys. Instead, the key =:foo= corresponds to setting =gptel-foo= (preferred) or =gptel--foo=. So the preset can include the value of any gptel option. For example, the following preset sets =gptel-temperature= and =gptel-use-context=:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (gptel-make-preset &#39;proofreader :description &quot;Preset for proofreading tasks&quot; :backend &quot;ChatGPT&quot; :model &#39;gpt-4.1-mini :tools &#39;(&quot;read_buffer&quot; &quot;spell_check&quot; &quot;grammar_check&quot;) :temperature 0.7 ;sets gptel-temperature :use-context &#39;system) ;sets gptel-use-context #+end_src&lt;/p&gt; 
&lt;p&gt;Switching to a preset applies the specified settings without affecting other settings. Depending on the scope option (&lt;del&gt;=&lt;/del&gt; in gptel&#39;s transient menu), presets can be applied globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;**** Applying presets to requests automatically&lt;/p&gt; 
&lt;p&gt;You can apply a preset to a /single/ query by including =@preset-name= in the prompt, where =preset-name= is the name of the preset. (The =oneshot= scope option in gptel&#39;s transient menus is another way to do this, [[id:748cbc00-0c92-4705-8839-619b2c80e566][see the FAQ.]])&lt;/p&gt; 
&lt;p&gt;For example, if you have a preset named =websearch= defined which includes tools for web access and search: #+begin_src emacs-lisp (gptel-make-preset &#39;websearch :description &quot;Haiku with basic web search capability.&quot; :backend &quot;Claude&quot; :model &#39;claude-3-5-haiku-20241022 :tools &#39;(&quot;search_web&quot; &quot;read_url&quot; &quot;get_youtube_meta&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;The following query is sent with this preset applied:&lt;/p&gt; 
&lt;p&gt;#+begin_quote @websearch Are there any 13&quot; e-ink monitors on the market? Create a table comparing them, sourcing specs and reviews from online sources. Also do the same for &quot;transreflective-LCD&quot; displays -- I&#39;m not sure what exactly they&#39;re called but they&#39;re comparable to e-ink. #+end_quote&lt;/p&gt; 
&lt;p&gt;This =@preset-name= cookie only applies to the final user turn of the coversation that is sent. So the presence of the cookie in past messages/turns is not significant.&lt;/p&gt; 
&lt;p&gt;The =@preset-name= cookie can be anywhere in the prompt. For example: #+begin_quote 
 &lt;long piece of text&gt;&lt;/long&gt;&lt;/p&gt; 
&lt;p&gt;What do you make of the above description, @proofreader? #+end_quote&lt;/p&gt; 
&lt;p&gt;In chat buffers this prefix will be offered as a completion and fontified, making it easy to use and spot.&lt;/p&gt; 
&lt;p&gt;** Alternatives&lt;/p&gt; 
&lt;p&gt;Other Emacs clients for LLMs include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/ahyatt/llm][llm]]: llm provides a uniform API across language model providers for building LLM clients in Emacs, and is intended as a library for use by package authors. For similar scripting purposes, gptel provides the command =gptel-request=, which see.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/s-kostyaev/ellama][Ellama]]: A full-fledged LLM client built on llm, that supports many LLM providers (Ollama, Open AI, Vertex, GPT4All and more). Its usage differs from gptel in that it provides separate commands for dozens of common tasks, like general chat, summarizing code/text, refactoring code, improving grammar, translation and so on.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: comint-shell based interaction with ChatGPT. Also supports DALL-E, executable code blocks in the responses, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rksm/org-ai][org-ai]]: Interaction through special =#+begin_ai ... #+end_ai= Org-mode blocks. Also supports DALL-E, querying ChatGPT with the contents of project files, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/milanglacier/minuet-ai.el][Minuet]]: Code-completion using LLM. Supports fill-in-the-middle (FIM) completion for compatible models such as DeepSeek and Codestral.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are several more: [[https://github.com/iwahbe/chat.el][chat.el]], [[https://github.com/stuhlmueller/gpt.el][gpt.el]], [[https://github.com/AnselmC/le-gpt.el][le-gpt]], [[https://github.com/stevemolitor/robby][robby]].&lt;/p&gt; 
&lt;p&gt;*** Packages using gptel&lt;/p&gt; 
&lt;p&gt;gptel is a general-purpose package for chat and ad-hoc LLM interaction. The following packages use gptel to provide additional or specialized functionality:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/karthink/gptel-quick][gptel-quick]]: Quickly look up the region or text at point.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jwiegley/gptel-prompts][gptel-prompts]]: System prompt manager for gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/dolmens/gptel-aibo/][gptel-aibo]]: A writing assistant system built on top of gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/kmontag/macher][Macher]]: Project-aware multi-file LLM editing for Emacs, based on gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog/evedel][Evedel]]: Instructed LLM Programmer/Assistant.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lanceberge/elysium][Elysium]]: Automatically apply AI-generated changes as you code.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jwiegley/ob-gptel][ob-gptel]]: Org-babel backend for running gptel queries.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/JDNdeveloper/gptel-autocomplete][gptel-autocomplete]]: Inline completions using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/kamushadenes/ai-blog.el][ai-blog.el]]: Streamline generation of blog posts in Hugo.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lakkiy/gptel-commit][gptel-commit]]: Generate commit messages using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/douo/magit-gptcommit][magit-gptcommit]]: Generate commit messages within magit-status Buffer using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ragnard/gptel-magit/][gptel-magit]]: Generate commit messages for magit using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/armindarvish/consult-omni][consult-omni]]: Versatile multi-source search package. It includes gptel as one of its many sources.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]]: Provides branching conversations in Org buffers using gptel. (Note that gptel includes this feature as well (see =gptel-org-branching-context=), but requires a recent version of Org mode 9.7 or later to be installed.)&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rob137/Corsair][Corsair]]: Helps gather text to populate LLM prompts for gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** COMMENT Older Breaking Changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-post-response-hook= has been renamed to =gptel-post-response-functions=, and functions in this hook are now called with two arguments: the start and end buffer positions of the response. This should make it easy to act on the response text without having to locate it first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Possible breakage, see #120: If streaming responses stop working for you after upgrading to v0.5, try reinstalling gptel and deleting its native comp eln cache in =native-comp-eln-load-path=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The user option =gptel-host= is deprecated. If the defaults don&#39;t work for you, use =gptel-make-openai= (which see) to customize server settings.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-api-key-from-auth-source= now searches for the API key using the host address for the active LLM backend, /i.e./ &quot;api.openai.com&quot; when using ChatGPT. You may need to update your =~/.authinfo=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Acknowledgments&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/felipeochoa][Felipe Ochoa]] and [[https://github.com/akssri][akssri]] for adding AWS Bedrock support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jwiegley][John Wiegley]] for the design of gptel&#39;s presets and gptel-request&#39;s async pipeline, but also for loads of general feedback and advice.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/pabl0][Henrik Ahlgren]] for a keen eye to detail and polish applied to gptel&#39;s UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/psionic-k][psionic-k]] for extensive testing of the tool use feature and the design of gptel&#39;s in-buffer tool use records.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]] for feedback and code assistance with gptel-menu&#39;s redesign&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/meain][Abin Simon]] for extensive feedback on improving gptel&#39;s directives and UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/algal][Alexis Gallagher]] and [[https://github.com/d1egoaz][Diego Alvarez]] for fixing a nasty multi-byte bug with =url-retrieve=.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/tarsius][Jonas Bernoulli]] for the Transient library.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog][daedsidog]] for adding context support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/Aquan1412][Aquan1412]] for adding PrivateGPT support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/r0man][r0man]] for improving gptel&#39;s Curl integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Local Variables:&lt;/h1&gt; 
&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; 
&lt;h1&gt;eval: (and (fboundp &#39;toc-org-mode) (toc-org-mode 1))&lt;/h1&gt; 
&lt;h1&gt;End:&lt;/h1&gt;</description>
    </item>
    
  </channel>
</rss>

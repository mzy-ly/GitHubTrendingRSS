<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Swift Monthly Trending</title>
    <description>Monthly Trending of Swift in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:59:28 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>MonitorControl/MonitorControl</title>
      <link>https://github.com/MonitorControl/MonitorControl</link>
      <description>&lt;p&gt;🖥 Control your display&#39;s brightness &amp; volume on your Mac as if it was a native Apple Display. Use Apple Keyboard keys or custom shortcuts. Shows the native macOS OSDs.&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/Icon-cropped.png&quot; width=&quot;200&quot; alt=&quot;App icon&quot; align=&quot;left&quot; /&gt; 
&lt;div&gt; 
 &lt;h3&gt;MonitorControl&lt;/h3&gt; 
 &lt;p&gt;Controls your external display brightness and volume and shows native OSD. Use menubar extra sliders or the keyboard, including native Apple keys!&lt;/p&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/macos_badge_noborder.png&quot; width=&quot;175&quot; alt=&quot;Download for macOS&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/MonitorControl/MonitorControl/total.svg?style=flat&quot; alt=&quot;downloads&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release-pre/MonitorControl/MonitorControl.svg?style=flat&quot; alt=&quot;latest version&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/raw/master/License.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/MonitorControl/MonitorControl.svg?style=flat&quot; alt=&quot;license&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/platform-macOS-blue.svg?style=flat&quot; alt=&quot;platform&quot; /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/screenshot.png&quot; width=&quot;824&quot; alt=&quot;Screenshot&quot; /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] MonitorControl v4.2.0 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/issues/1663&quot;&gt;may crash&lt;/a&gt; on certain configurations running macOS 15 Sequoia. Additionally, this version will not automatically update to the &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;latest app version&lt;/a&gt;. To resolve the issue and ensure future updates, please upgrade manually.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;Releases&lt;/a&gt; and download the latest &lt;code&gt;.dmg&lt;/code&gt;, or you can install via Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install --cask monitorcontrol
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Major features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Control your display&#39;s brightness, volume and contrast!&lt;/li&gt; 
 &lt;li&gt;Shows native OSD for brightness and volume.&lt;/li&gt; 
 &lt;li&gt;Supports multiple protocols to adjust brightness: DDC for external displays (brightness, contrast, volume), native Apple protocol for Apple and built-in displays, Gamma table control for software dimming, shade control for AirPlay, Sidecar and Display Link devices and other virtual screens.&lt;/li&gt; 
 &lt;li&gt;Supports smooth brightness transitions.&lt;/li&gt; 
 &lt;li&gt;Seamlessly combined hardware and software dimming extends dimming beyond the minimum brightness available on your display.&lt;/li&gt; 
 &lt;li&gt;Synchronize brightness from built-in and Apple screens - replicate Ambient light sensor and touch bar induced changes to a non-Apple external display!&lt;/li&gt; 
 &lt;li&gt;Sync up all your displays using a single slider or keyboard shortcuts.&lt;/li&gt; 
 &lt;li&gt;Allows dimming to full black.&lt;/li&gt; 
 &lt;li&gt;Support for custom keyboard shortcuts as well as standard brightness and media keys on Apple keyboards.&lt;/li&gt; 
 &lt;li&gt;Dozens of customization options to tweak the inner workings of the app to suit your hardware and needs (don&#39;t forget to enable &lt;code&gt;Show advanced settings&lt;/code&gt; in app Settings).&lt;/li&gt; 
 &lt;li&gt;Simple, unobtrusive UI to blend in to the general aesthetics of macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One of the best app of its kind, completely FREE.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For additional features, more advanced brightness control with XDR/HDR brightness upscaling and support for more Mac models and displays, check out &lt;a href=&quot;https://github.com/waydabber/BetterDisplay#readme&quot;&gt;BetterDisplay&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;Screenshots (Settings)&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_1.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_2.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_3.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_4.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;How to install and use the app&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;Download the app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Copy the MonitorControl app file from the .dmg file to your Applications folder&lt;/li&gt; 
 &lt;li&gt;Click on the &lt;code&gt;MonitorControl&lt;/code&gt; app&lt;/li&gt; 
 &lt;li&gt;Add the app to &lt;code&gt;Accessibility&lt;/code&gt; under &lt;code&gt;System Settings&lt;/code&gt; » &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; as prompted (this is required only if you wish to use the native Apple keyboard brightness and media keys - if this is not the case, you can safely skip this step).&lt;/li&gt; 
 &lt;li&gt;Use your keyboard or the sliders in the app menu (a brightness symbol in the macOS menubar as shown on the screenshot above) to control your displays.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;Settings…&lt;/code&gt; for customization options (enable &lt;code&gt;Show advanced settings&lt;/code&gt; for even more options).&lt;/li&gt; 
 &lt;li&gt;You can set up custom keyboard shortcuts under the &lt;code&gt;Keyboard&lt;/code&gt; in Settings (the app uses Apple media keys by default).&lt;/li&gt; 
 &lt;li&gt;If you have any questions, go to &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/discussions&quot;&gt;Discussions&lt;/a&gt;!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS compatibility&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;MonitorControl version&lt;/th&gt; 
   &lt;th&gt;macOS version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v4.0.0&lt;/td&gt; 
   &lt;td&gt;Catalina 10.15*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v3.1.1&lt;/td&gt; 
   &lt;td&gt;Mojave 10.14&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v2.1.0&lt;/td&gt; 
   &lt;td&gt;Sierra 10.12&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;* With some limitations - full functionality available on macOS 11 Big Sur or newer.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For macOS Sequoia compatibility &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;v4.3.2 or newer&lt;/a&gt; is required!&lt;/p&gt; 
&lt;h3&gt;Supported displays&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Most modern LCD displays from all major manufacturers supported implemented DDC/CI protocol via USB-C, DisplayPort, HDMI, DVI or VGA to allow for hardware backlight and volume control.&lt;/li&gt; 
 &lt;li&gt;Apple displays and built-in displays are supported using native protocols.&lt;/li&gt; 
 &lt;li&gt;LCD and LED Televisions usually do not implement DDC, these are supported using software alternatives to dim the image.&lt;/li&gt; 
 &lt;li&gt;DisplayLink, Airplay, Sidecar and other virtual screens are supported via shade (overlay) control.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Notable exceptions for hardware control compatibility:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;DDC control using the built-in HDMI port of the 2018 Intel Mac mini, the built-in HDMI port of all M1 Macs (MacBook Pro 14&quot; and 16&quot;, Mac Mini, Mac Studio) and the built-in HDMI port of the entry level M2 Mac mini are not supported. Use USB-C instead or get &lt;a href=&quot;https://betterdisplay.pro&quot;&gt;BetterDisplay&lt;/a&gt; for full DDC control over HDMI with these Macs as well for free. Software-only dimming is still available for these connections.&lt;/li&gt; 
 &lt;li&gt;Some displays (notably EIZO) use MCCS over USB or an entirely custom protocol for control. These displays are supported with software dimming only.&lt;/li&gt; 
 &lt;li&gt;DisplayLink docks and dongles do not allow for DDC control on Macs, only software dimming is available for these connections.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compatibility with&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;f.lux users: please activate &lt;code&gt;Avoid gamma table manipulation&lt;/code&gt; under &lt;code&gt;Settings&lt;/code&gt; » &lt;code&gt;Displays&lt;/code&gt;! This step is not needed if you use Night Shift.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterdisplay.pro/&quot;&gt;BetterDisplay&lt;/a&gt; users: either activate &lt;code&gt;Avoid gamma table manipulation&lt;/code&gt; in MonitorControl or turn off &lt;code&gt;Allow color table adjustments&lt;/code&gt; in BetterDisplay (under Settings/Displays/Overview). You might want to disable native keyboard control either in MonitorControl or BetterDisplay, depending on which app you want to use for brightness control and dimming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing to the project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can help out &lt;a href=&quot;https://opencollective.com/monitorcontrol&quot;&gt;by contributiong to the project with your one-time donation or by being a regular Sponsor&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;If you want, you can fork the code, make improvements and submit a pull request to improve the app. Accepting a PR is solely in the hands of the maintainer - before making fundamental changes expecting it to be accepted, please consult the maintainer of the project!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to build&lt;/h2&gt; 
&lt;h3&gt;Required&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;Swiftlint&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Flinesoft/BartyCrouch&quot;&gt;BartyCrouch&lt;/a&gt; (for updating localizations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build steps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project via this Terminal command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/MonitorControl/MonitorControl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you want to clone one of the branches, add &lt;code&gt;--single-branch --branch [branchname]&lt;/code&gt; after the &lt;code&gt;clone&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;You&#39;re all set! Now open the &lt;code&gt;MonitorControl.xcodeproj&lt;/code&gt; with Xcode! The dependencies will automatically get downloaded once you open the project. If they don&#39;t: &lt;code&gt;File &amp;gt; Packages &amp;gt; Resolve Package Versions&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Third party dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MonitorControl/MediaKeyTap&quot;&gt;MediaKeyTap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/Settings&quot;&gt;Settings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rnine/SimplyCoreAudio&quot;&gt;SimplyCoreAudio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/KeyboardShortcuts&quot;&gt;KeyboardShortcuts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Hall of Honor&lt;/h2&gt; 
&lt;h3&gt;Current maintainer of the project&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/waydabber&quot;&gt;@waydabber&lt;/a&gt;, developer of &lt;a href=&quot;https://github.com/waydabber/BetterDisplay#readme&quot;&gt;BetterDisplay&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Former maintainers, special contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/the0neyouseek&quot;&gt;@the0neyouseek&lt;/a&gt; - previous (now honorary) maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JoniVR&quot;&gt;@JoniVR&lt;/a&gt; - previous (now honorary) maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alin23&quot;&gt;@alin23&lt;/a&gt; (generally spearheaded M1 DDC support and figured out a many of the caveats)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mathew-kurian/&quot;&gt;@mathew-kurian&lt;/a&gt; (original developer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Tyilo/&quot;&gt;@Tyilo&lt;/a&gt; (fork)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bensge/&quot;&gt;@Bensge&lt;/a&gt; - (used some code from his project &lt;a href=&quot;https://github.com/Bensge/NativeDisplayBrightness&quot;&gt;NativeDisplayBrightness&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nhurden/&quot;&gt;@nhurden&lt;/a&gt; (for the original MediaKeyTap)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kfix/ddcctl&quot;&gt;@kfix&lt;/a&gt; (for ddcctl)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reitermarkus&quot;&gt;@reitermarkus&lt;/a&gt; (for Intel DDC support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.deviantart.com/javierocasio&quot;&gt;javierocasio&lt;/a&gt; (app icon background)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LoopKit/Loop</title>
      <link>https://github.com/LoopKit/Loop</link>
      <description>&lt;p&gt;An automated insulin delivery app for iOS, built on LoopKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Loop for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Loop/DerivedAssetsBase.xcassets/AppIcon.appiconset/Icon-Small-40%402x.png?raw=true&quot; alt=&quot;App Icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/LoopKit/Loop&quot;&gt;&lt;img src=&quot;https://travis-ci.org/LoopKit/Loop.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://loop.zulipchat.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&quot; alt=&quot;Join the chat at https://loop.zulipchat.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.&lt;/p&gt; 
&lt;p&gt;Loop is built on top of &lt;a href=&quot;https://github.com/LoopKit/LoopKit&quot;&gt;LoopKit&lt;/a&gt;. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.&lt;/p&gt; 
&lt;p&gt;Please understand that this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is highly experimental&lt;/li&gt; 
 &lt;li&gt;Is not approved for therapy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png?raw=true&quot; alt=&quot;Screenshot of status screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png?raw=true&quot; alt=&quot;Screenshot of battery change notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png?raw=true&quot; alt=&quot;Screenshot of loop failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png?raw=true&quot; alt=&quot;Screenshot of glucose complication on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png?raw=true&quot; alt=&quot;Screenshot of carb entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png?raw=true&quot; alt=&quot;Screenshot of the app menu on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Please visit the &lt;a href=&quot;https://loopkit.github.io/loopdocs/&quot;&gt;Loop Docs&lt;/a&gt; for installation, algorithm, and other details.&lt;/p&gt; 
&lt;p&gt;For FAQs, how to contribute to open source aspects of Loop and other tips, refer to the &lt;a href=&quot;https://github.com/LoopKit/Loop/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;(Note: there is also a tab for the Wiki at the top of this page)&lt;/p&gt; 
&lt;h1&gt;License and Code of Conduct&lt;/h1&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/LICENSE.md&quot;&gt;LICENSE&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>airbnb/lottie-ios</title>
      <link>https://github.com/airbnb/lottie-ios</link>
      <description>&lt;p&gt;An iOS library to natively render After Effects vector animations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&quot; alt=&quot;SwiftPM&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Versions&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;View documentation, FAQ, help, examples, and more at &lt;a href=&quot;https://airbnb.io/lottie/&quot;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Lottie is a cross-platform library for iOS, macOS, tvOS, visionOS, &lt;a href=&quot;https://github.com/airbnb/lottie-android&quot;&gt;Android&lt;/a&gt;, and &lt;a href=&quot;https://github.com/airbnb/lottie-web&quot;&gt;Web&lt;/a&gt; that natively renders vector-based animations and art in realtime with minimal code.&lt;/p&gt; 
&lt;p&gt;Lottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with &lt;a href=&quot;https://github.com/bodymovin/bodymovin&quot;&gt;bodymovin&lt;/a&gt;, Sketch with &lt;a href=&quot;https://github.com/buba447/Lottie-Sketch-Export&quot;&gt;Lottie Sketch Export&lt;/a&gt;, and from &lt;a href=&quot;https://www.haikuanimator.com&quot;&gt;Haiku&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating them by hand. Since the animations are backed by JSON, they are extremely small in size but can be large in complexity! Animations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed. Lottie can play or loop just a portion of the animation as well, the possibilities are endless! Animations can even be &lt;em&gt;&lt;strong&gt;changed at runtime&lt;/strong&gt;&lt;/em&gt; in various ways! Change the color, position, or any keyframable value!&lt;/p&gt; 
&lt;p&gt;Here is just a small sampling of the power of Lottie&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples1.gif&quot; alt=&quot;Example1&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples2.gif&quot; alt=&quot;Example2&quot; /&gt;&lt;/p&gt; 
&lt;img src=&quot;_Gifs/Community 2_3.gif&quot; /&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples3.gif&quot; alt=&quot;Example3&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples4.gif&quot; alt=&quot;Abcs&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installing Lottie&lt;/h2&gt; 
&lt;p&gt;Lottie supports &lt;a href=&quot;https://www.swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; (Both dynamic and static).&lt;/p&gt; 
&lt;h3&gt;Github Repo&lt;/h3&gt; 
&lt;p&gt;You can pull the &lt;a href=&quot;https://github.com/airbnb/lottie-ios/&quot;&gt;Lottie Github Repo&lt;/a&gt; and include the &lt;code&gt;Lottie.xcodeproj&lt;/code&gt; to build a dynamic or static library.&lt;/p&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;To install Lottie using &lt;a href=&quot;https://github.com/swiftlang/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt; you can follow the &lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&quot;&gt;tutorial published by Apple&lt;/a&gt; using the URL for the Lottie repo with the current version:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Xcode, select “File” → “Add Packages...”&lt;/li&gt; 
 &lt;li&gt;Enter &lt;a href=&quot;https://github.com/airbnb/lottie-spm.git&quot;&gt;https://github.com/airbnb/lottie-spm.git&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;or you can add the following dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/airbnb/lottie-spm.git&quot;, from: &quot;4.5.2&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Swift Package Manager we recommend using the &lt;a href=&quot;https://github.com/airbnb/lottie-spm&quot;&gt;lottie-spm&lt;/a&gt; repo instead of the main lottie-ios repo. The main git repository for &lt;a href=&quot;https://github.com/airbnb/lottie-ios&quot;&gt;lottie-ios&lt;/a&gt; is somewhat large (300+ MB), and Swift Package Manager always downloads the full repository with all git history. The &lt;a href=&quot;https://github.com/airbnb/lottie-spm&quot;&gt;lottie-spm&lt;/a&gt; repo is much smaller (less than 500kb), so can be downloaded much more quickly.&lt;/p&gt; 
&lt;p&gt;Instead of downloading the full git history of Lottie and building it from source, the lottie-spm repo just contains a pointer to the precompiled XCFramework included in the &lt;a href=&quot;https://github.com/airbnb/lottie-ios/releases/latest&quot;&gt;latest lottie-ios release&lt;/a&gt; (typically ~8MB). If you prefer to include Lottie source directly your project, you can directly depend on the main lottie-ios repo by referencing &lt;code&gt;https://github.com/airbnb/lottie-ios.git&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;Add the pod to your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;lottie-ios&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After installing the cocoapod into your project import Lottie with&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Lottie
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;Add Lottie to your Cartfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;airbnb/lottie-ios&quot; &quot;master&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that &lt;code&gt;carthage update&lt;/code&gt; produced.&lt;/p&gt; 
&lt;h2&gt;Swift Version Support&lt;/h2&gt; 
&lt;p&gt;Lottie supports Swift / Xcode versions back to the minimum version that is permitted by Apple for submissions to the App Store. You can see the most up-to-date information for which Swift versions Lottie supports on &lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;Swift Package Index&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/airbnb/lottie-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Versions&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;Lottie does not collect any data. We provide this notice to help you fill out &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;App Privacy Details&lt;/a&gt;. We additionally provide a &lt;a href=&quot;https://github.com/airbnb/lottie-ios/raw/master/Sources/PrivacyInfo.xcprivacy&quot;&gt;privacy manifest&lt;/a&gt; which can be included in your app.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;We distribute XCFramework bundles for each release on &lt;a href=&quot;https://github.com/airbnb/lottie-ios/releases/latest&quot;&gt;GitHub&lt;/a&gt;. In Lottie 4.4.0 and later, these XCFramework bundles include a &lt;a href=&quot;https://developer.apple.com/documentation/xcode/verifying-the-origin-of-your-xcframeworks&quot;&gt;code signature&lt;/a&gt;. These bundles are self-signed under the name &quot;Lottie iOS&quot; and have the following fingerprint:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;89 2F 1B 43 04 7B 50 53 8F 2F 46 EA D9 29 00 DD 3D 48 11 F358 21 78 C0 61 A5 FB 20 F1 11 CB 26
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Xcode you can verify this by selecting &lt;code&gt;Lottie.xcframework&lt;/code&gt; and confirming that it shows the following information:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/code_signature.png&quot; alt=&quot;Code Signature in Xcode&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We always appreciate contributions from the community. To make changes to the project, you can clone the repo and open &lt;code&gt;Lottie.xcworkspace&lt;/code&gt;. This workspace includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the Lottie framework (for iOS, macOS, and tvOS)&lt;/li&gt; 
 &lt;li&gt;unit tests and snapshot tests (for iOS, must be run on an iPhone 8 simulator)&lt;/li&gt; 
 &lt;li&gt;an Example iOS app that lets you browse and test over 100 sample animations included in the repo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All pull requests with new features or bug fixes that affect how animations render should include snapshot test cases that validate the included changes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To add a new sample animation to the snapshot testing suite, you can add the &lt;code&gt;.json&lt;/code&gt; file to &lt;code&gt;Tests/Samples&lt;/code&gt;. Re-run the snapshot tests to generate the new snapshot image files.&lt;/li&gt; 
 &lt;li&gt;To update existing snapshots after making changes, you can set &lt;code&gt;isRecording = true&lt;/code&gt; in &lt;code&gt;SnapshotTests.swift&lt;/code&gt; &lt;code&gt;setUp()&lt;/code&gt; method and then re-run the snapshot tests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The project also includes several helpful commands defined in our &lt;a href=&quot;https://github.com/airbnb/lottie-ios/raw/master/Rakefile&quot;&gt;Rakefile&lt;/a&gt;. To use these, you need to install &lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo gem install bundle
$ bundle install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, all Swift code should be formatted according to the &lt;a href=&quot;https://github.com/airbnb/swift&quot;&gt;Airbnb Swift Style Guide&lt;/a&gt;. After making changes, you can reformat the code automatically using &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt; and &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; by running &lt;code&gt;bundle exec rake format:swift&lt;/code&gt;. Other helpful commands include:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bundle exec rake build:all # builds all targets for all platforms
$ bundle exec rake build&lt;span&gt;📦&lt;/span&gt;iOS # builds the Lottie package for iOS
$ bundle exec rake test:package # tests the Lottie package
$ bundle exec rake format:swift # reformat Swift code based on the Airbnb Swift Style Guide
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>lwouis/alt-tab-macos</title>
      <link>https://github.com/lwouis/alt-tab-macos</link>
      <description>&lt;p&gt;Windows alt-tab on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltTab&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lwouis/alt-tab-macos/master/docs/public/demo/frontpage.jpg&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lwouis/alt-tab-macos/master/docs/public/demo/frontpage.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AltTab&lt;/strong&gt; brings the power of Windows alt-tab to macOS&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://alt-tab-macos.netlify.app/&quot;&gt;Find out more on the official website&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MrKai77/Loop</title>
      <link>https://github.com/MrKai77/Loop</link>
      <description>&lt;p&gt;Window management made elegant.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img width=&quot;225&quot; height=&quot;225&quot; src=&quot;https://raw.githubusercontent.com/MrKai77/Loop/develop/assets/graphics/Classic.png&quot; alt=&quot;Logo&quot; /&gt; 
 &lt;h1&gt;&lt;b&gt;Loop&lt;/b&gt;&lt;/h1&gt; 
 &lt;p&gt;Window management made elegant.&lt;br /&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop#features&quot;&gt;&lt;strong&gt;Explore Loop »&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop/releases/latest/download/Loop.zip&quot;&gt;Download for macOS&lt;/a&gt;&lt;br /&gt; &lt;i&gt;~ Compatible with macOS 13 and later. ~&lt;/i&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Loop is a macOS app that simplifies window management for you. You can effortlessly choose your window direction using a radial menu triggered by a simple key press, and customize it according to your preferences with personalized colors and settings. You can easily move, resize, and arrange your windows with just a few clicks, saving you valuable time and energy.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Loop is constantly evolving, with new features and improvements added regularly to enhance your window management experience on macOS.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h6 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/MrKai77/Loop/develop/assets/graphics/loop_demo.gif&quot; alt=&quot;Loop Demo&quot; /&gt; &lt;br /&gt;&lt;br /&gt; &lt;a href=&quot;https://discord.gg/2CZ2N6PKjq&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Discord-join%20us-7289DA?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge&amp;amp;labelColor=23272A&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop/raw/main/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/MrKai77/Loop?label=License&amp;amp;color=5865F2&amp;amp;style=for-the-badge&amp;amp;labelColor=23272A&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop/stargazers&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/stars/MrKai77/Loop?label=Stars&amp;amp;color=57F287&amp;amp;style=for-the-badge&amp;amp;labelColor=23272A&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop/network/members&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/forks/MrKai77/Loop?label=Forks&amp;amp;color=ED4245&amp;amp;style=for-the-badge&amp;amp;labelColor=23272A&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/MrKai77/Loop/issues&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/issues/MrKai77/Loop?label=Issues&amp;amp;color=FEE75C&amp;amp;style=for-the-badge&amp;amp;labelColor=23272A&quot; /&gt; &lt;/a&gt; &lt;br /&gt; &lt;/h6&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Radial Menu&lt;/h3&gt; 
&lt;p&gt;The Radial Menu allows you to manipulate windows using your mouse/trackpad. Hold down the trigger key and move your cursor in the desired direction to move and resize the window.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/658f7043-79a1-4690-83b6-a714fe6245c8&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h3&gt;Preview&lt;/h3&gt; 
&lt;p&gt;The preview window enables you to see the resize action &lt;em&gt;before&lt;/em&gt; committing to it.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/5ecb3ae8-f295-406f-b968-31e539f4a098&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h3&gt;Keyboard Shortcuts&lt;/h3&gt; 
&lt;p&gt;Loop allows you to assign any key in tandem with the trigger key to initiate a window manipulation action.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/d865329f-0533-4eeb-829d-9aa6159f454b&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h3&gt;Cycles&lt;/h3&gt; 
&lt;p&gt;Loop can become very powerful when paired with cycles. These enable you to perform multiple window manipulations in quick succession by pressing the same key combination repeatedly, or by left-clicking repeatedly!&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/1adb1325-775d-4687-9085-71c7f775d65d&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h3&gt;Stash&lt;/h3&gt; 
&lt;p&gt;Hide windows at the screen edge to declutter your workspace. Hover near the edge or use a keybind to access them whenever you need.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/080ba2fb-41b3-4b39-9000-a76f2fc794ed&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h3&gt;Theming&lt;/h3&gt; 
&lt;h4&gt;Radial Menu&lt;/h4&gt; 
&lt;p&gt;The radial menu is fully customizable in terms of width, shape, and color. It is also completely optional and can be disabled. Both the cursor interaction and the radial menu itself are independently toggleable.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/b2d3f6c8-dd68-4ac2-a30a-19f36a8fd94d&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h4&gt;Preview&lt;/h4&gt; 
&lt;p&gt;Adjust the padding, corner radius, border color, and border width of the optional preview window.&lt;/p&gt; 
&lt;div&gt;
 &lt;video controls src=&quot;https://github.com/user-attachments/assets/fc107861-8125-42c2-b987-2fff554078d5&quot; muted=&quot;false&quot;&gt;&lt;/video&gt;
&lt;/div&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install loop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Manual Download&lt;/h4&gt; 
&lt;p&gt;Navigate to the &lt;a href=&quot;https://github.com/MrKai77/Loop/releases/latest&quot;&gt;release page&lt;/a&gt; and download the latest &lt;code&gt;.zip&lt;/code&gt; file located at the bottom, or &lt;a href=&quot;https://github.com/MrKai77/Loop/releases/latest/download/Loop.zip&quot;&gt;click me&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Triggering&lt;/h3&gt; 
&lt;p&gt;Loop uses a trigger key to function. This key must be held down or pressed to activate certain features within Loop. To access the radial menu, hold down the trigger key and move the cursor in the desired direction. Users who prefer keyboard shortcuts can assign a key to work with the trigger key, activating specific actions. The trigger key can be set in the &quot;Behavior&quot; tab of the &quot;Settings&quot; section. The trigger key can consist of one or multiple keys.&lt;/p&gt; 
&lt;p&gt;To set Caps Lock as your trigger key, you have two options:&lt;/p&gt; 
&lt;h4&gt;a. Change System Settings&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to System Settings → Keyboard → &quot;Keyboard Shortcuts...&quot;.&lt;/li&gt; 
 &lt;li&gt;In the &quot;Modifier Keys&quot; tab, remap &lt;code&gt;Caps Lock (⇪) key&lt;/code&gt; to &lt;code&gt;(^) Control&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Repeat this remapping process for every connected keyboard.&lt;/li&gt; 
 &lt;li&gt;In Loop, select the &lt;code&gt;Right Control&lt;/code&gt; key as your trigger.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;b. Use an external App&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hyperkey.app/&quot;&gt;Hyperkey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner Elements&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;c. Shell/AppleScript&lt;/h4&gt; 
&lt;p&gt;Loop can be controlled via shell commands or AppleScript using its URL scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Shell examples
open &quot;loop://direction/right&quot;     # Move window to right half
open &quot;loop://action/maximize&quot;     # Maximize window
open &quot;loop://screen/next&quot;         # Move to next screen

# AppleScript examples
osascript -e &#39;tell application &quot;Loop&quot; to activate&#39;
osascript -e &#39;open location &quot;loop://direction/left&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create custom scripts to chain multiple actions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
# Example: Move window right and then maximize
open &quot;loop://direction/right&quot;
sleep 0.5
open &quot;loop://action/maximize&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a complete list of available commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;open &quot;loop://list/all&quot;           # List all commands
open &quot;loop://list/actions&quot;       # List window actions
open &quot;loop://list/keybinds&quot;      # List custom keybinds
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keyboard Shortcuts&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Category&lt;/th&gt; 
   &lt;th&gt;Actions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Fullscreen, Maximize, Almost Maximize, Centre, MacOS Centre, Minimize, Hide&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Halves&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Top Half, Bottom Half, Left Half, Right Half&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Quarters&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Top Left Quarter, Top Right Quarter, Bottom Left Quarter, Bottom Right Quarter&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Horizontal Thirds&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Right Third, Right Two Thirds, Horizontal Center Third, Left Two Thirds, Left Third&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Vertical Thirds&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Top Third, Top Two Thirds, Vertical Center Third, Bottom Two Thirds, Bottom Third&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Screen Switching&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Next Screen, Previous Screen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Window Manipulation&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Larger, Smaller, Shrink Top, Shrink Bottom, Shrink Right, Shrink Left, Grow Top, Grow Bottom, Grow Right, Grow Left, Move Up, Move Down, Move Right, Move Left&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;More&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Initial Frame, Undo, Custom, Cycle&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;To see all the contributors who have played a significant role in developing Loop, visit our &lt;a href=&quot;https://raw.githubusercontent.com/MrKai77/Loop/develop/CONTRIBUTORS.md&quot;&gt;Contributors&lt;/a&gt; page.&lt;/p&gt; 
&lt;h3&gt;How to Contribute&lt;/h3&gt; 
&lt;p&gt;For an extensive guide on how to contribute, check out the &lt;a href=&quot;https://raw.githubusercontent.com/MrKai77/Loop/develop/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Comparison&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt;
   &lt;th&gt;App Name &lt;/th&gt;
   &lt;th&gt;Loop&lt;/th&gt;
   &lt;th&gt;Rectangle  Pro&lt;/th&gt;
   &lt;th&gt;Hammerspoon&lt;/th&gt;
   &lt;th&gt;1Piece&lt;/th&gt;
   &lt;th&gt;BetterTouchTool&lt;/th&gt;
   &lt;th&gt;Swish&lt;/th&gt;
   &lt;th&gt;Rectangle&lt;/th&gt;
   &lt;th&gt;Multitouch&lt;/th&gt;
   &lt;th&gt;Emmetapp&lt;/th&gt;
   &lt;th&gt;Amethyst&lt;/th&gt;
   &lt;th&gt;Window  Fusion&lt;/th&gt;
   &lt;th&gt;Tiles&lt;/th&gt;
   &lt;th&gt;Magnet&lt;/th&gt;
   &lt;th&gt;Moom&lt;/th&gt;
   &lt;th&gt; Wins &lt;/th&gt;
   &lt;th&gt;Yabai&lt;/th&gt;
   &lt;th&gt;MacOS  15&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Price &lt;/td&gt;
   &lt;td&gt;Free&lt;/td&gt;
   &lt;td&gt; $9.99 &lt;/td&gt;
   &lt;td&gt; Free &lt;/td&gt;
   &lt;td&gt; Free &lt;/td&gt;
   &lt;td&gt; $22 &lt;/td&gt;
   &lt;td&gt; $16 &lt;/td&gt;
   &lt;td&gt; Free &lt;/td&gt;
   &lt;td&gt; $15.99 &lt;/td&gt;
   &lt;td&gt; $19 &lt;/td&gt;
   &lt;td&gt; Free &lt;/td&gt;
   &lt;td&gt; $12 &lt;/td&gt;
   &lt;td&gt;Free &lt;/td&gt;
   &lt;td&gt; $4.99&lt;/td&gt;
   &lt;td&gt; $10&lt;/td&gt;
   &lt;td&gt;$13.99&lt;/td&gt;
   &lt;td&gt; Free&lt;/td&gt;
   &lt;td&gt; Free &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Preview &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Restore Size &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Open Source &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Edge Snapping &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Set Custom Size &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Save Workspace &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Percentage Units &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Modifier + Mouse &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Modifier + Arrows &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Maximize Window &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Multi-Screen Move &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Touchpad Gestures &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Modifier + Touchpad &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Margin / Grid Padding &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Pin/Unpin window on top &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Resize Adjacent Windows &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Open  Window  On  Set  Screen&lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
   &lt;td&gt; ✅ &lt;/td&gt;
   &lt;td&gt; ❌ &lt;/td&gt;
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This project is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/MrKai77/Loop/develop/LICENSE&quot;&gt;GNU GPLv3 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beingpax/VoiceInk</title>
      <link>https://github.com/Beingpax/VoiceInk</link>
      <description>&lt;p&gt;Voice-to-text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/VoiceInk/Assets.xcassets/AppIcon.appiconset/256-mac.png&quot; width=&quot;180&quot; height=&quot;180&quot; /&gt; 
 &lt;h1&gt;VoiceInk&lt;/h1&gt; 
 &lt;p&gt;Voice to text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/platform-macOS%2014.0%2B-brightgreen&quot; alt=&quot;Platform&quot; /&gt; &lt;a href=&quot;https://github.com/Beingpax/VoiceInk/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/Beingpax/VoiceInk&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/Beingpax/VoiceInk/total&quot; alt=&quot;GitHub all releases&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/stars/Beingpax/VoiceInk?style=social&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://www.youtube.com/@tryvoiceink&quot;&gt;YouTube&lt;/a&gt; &lt;/p&gt; 
 &lt;a href=&quot;https://tryvoiceink.com&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Download%20Now-Latest%20Version-blue?style=for-the-badge&amp;amp;logo=apple&quot; alt=&quot;Download VoiceInk&quot; width=&quot;250&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;VoiceInk is a native macOS application that transcribes what you say to text almost instantly. You can find all the information and download the app from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/12367379-83e7-48a6-b52c-4488a6a04bba&quot; alt=&quot;VoiceInk Mac App&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After dedicating the past 5 months to developing this app, I&#39;ve decided to open source it for the greater good.&lt;/p&gt; 
&lt;p&gt;My goal is to make it &lt;strong&gt;the most efficient and privacy-focused voice-to-text solution for macOS&lt;/strong&gt; that is a joy to use. While the source code is now open for experienced developers to build and contribute, purchasing a license helps support continued development and gives you access to automatic updates, priority support, and upcoming features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎙️ &lt;strong&gt;Accurate Transcription&lt;/strong&gt;: Local AI models that transcribe your voice to text with 99% accuracy, almost instantly&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Privacy First&lt;/strong&gt;: 100% offline processing ensures your data never leaves your device&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Power Mode&lt;/strong&gt;: Intelligent app detection automatically applies your perfect pre-configured settings based on the app/ URL you&#39;re on&lt;/li&gt; 
 &lt;li&gt;🧠 &lt;strong&gt;Context Aware&lt;/strong&gt;: Smart AI that understands your screen content and adapts to the context&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Global Shortcuts&lt;/strong&gt;: Configurable keyboard shortcuts for quick recording and push-to-talk functionality&lt;/li&gt; 
 &lt;li&gt;📝 &lt;strong&gt;Personal Dictionary&lt;/strong&gt;: Train the AI to understand your unique terminology with custom words, industry terms, and smart text replacements&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Smart Modes&lt;/strong&gt;: Instantly switch between AI-powered modes optimized for different writing styles and contexts&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;AI Assistant&lt;/strong&gt;: Built-in voice assistant mode for a quick chatGPT like conversational assistant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h3&gt;Download&lt;/h3&gt; 
&lt;p&gt;Get the latest version with a free trial from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;tryvoiceink.com&lt;/a&gt;. Your purchase helps me work on VoiceInk full-time and continuously improve it with new features and updates.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can install VoiceInk via &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install --cask voiceink
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;p&gt;As an open-source project, you can build VoiceInk yourself by following the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;. However, the compiled version includes additional benefits like automatic updates, priority support via Discord and email, and helps fund ongoing development.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 14.0 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building from Source&lt;/a&gt; - Detailed instructions for building the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt; - How to contribute to VoiceInk&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; - Our community standards&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! However, please note that all contributions should align with the project&#39;s goals and vision. Before starting work on any feature or fix:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open an issue to discuss your proposed changes&lt;/li&gt; 
 &lt;li&gt;Wait for maintainer feedback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For build instructions, see our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues or have questions, please:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the existing issues in the GitHub repository&lt;/li&gt; 
 &lt;li&gt;Create a new issue if your problem isn&#39;t already reported&lt;/li&gt; 
 &lt;li&gt;Provide as much detail as possible about your environment and the problem&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;h3&gt;Core Technology&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggerganov/whisper.cpp&quot;&gt;whisper.cpp&lt;/a&gt; - High-performance inference of OpenAI&#39;s Whisper model&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FluidInference/FluidAudio&quot;&gt;FluidAudio&lt;/a&gt; - Used for Parakeet model implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Essential Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt; - Keeping VoiceInk up to date&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/KeyboardShortcuts&quot;&gt;KeyboardShortcuts&lt;/a&gt; - User-customizable keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/LaunchAtLogin&quot;&gt;LaunchAtLogin&lt;/a&gt; - Launch at login functionality&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ejbills/mediaremote-adapter&quot;&gt;MediaRemoteAdapter&lt;/a&gt; - Media playback control during recording&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marmelroy/Zip&quot;&gt;Zip&lt;/a&gt; - File compression and decompression utilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Pax&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mrousavy/react-native-vision-camera</title>
      <link>https://github.com/mrousavy/react-native-vision-camera</link>
      <description>&lt;p&gt;📸 A powerful, high-performance React Native Camera library.&lt;/p&gt;&lt;hr&gt;&lt;a href=&quot;https://margelo.com&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./docs/static/img/banner-dark.png&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./docs/static/img/banner-light.png&quot; /&gt; 
  &lt;img alt=&quot;VisionCamera&quot; src=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/banner-light.png&quot; /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;img align=&quot;right&quot; width=&quot;35%&quot; src=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/example.png&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;p&gt;VisionCamera is a powerful, high-performance Camera library for React Native. It features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;📸 Photo and Video capture&lt;/li&gt; 
 &lt;li&gt;👁️ QR/Barcode scanner&lt;/li&gt; 
 &lt;li&gt;📱 Customizable devices and multi-cameras (&quot;fish-eye&quot; zoom)&lt;/li&gt; 
 &lt;li&gt;🎞️ Customizable resolutions and aspect-ratios (4k/8k images)&lt;/li&gt; 
 &lt;li&gt;⏱️ Customizable FPS (30..240 FPS)&lt;/li&gt; 
 &lt;li&gt;🧩 &lt;a href=&quot;https://react-native-vision-camera.com/docs/guides/frame-processors&quot;&gt;Frame Processors&lt;/a&gt; (JS worklets to run facial recognition, AI object detection, realtime video chats, ...)&lt;/li&gt; 
 &lt;li&gt;🎨 Drawing shapes, text, filters or shaders onto the Camera&lt;/li&gt; 
 &lt;li&gt;🔍 Smooth zooming (Reanimated)&lt;/li&gt; 
 &lt;li&gt;⏯️ Fast pause and resume&lt;/li&gt; 
 &lt;li&gt;🌓 HDR &amp;amp; Night modes&lt;/li&gt; 
 &lt;li&gt;⚡ Custom C++/GPU accelerated video pipeline (OpenGL)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Install VisionCamera from npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm i react-native-vision-camera
cd ios &amp;amp;&amp;amp; pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;..and get started by &lt;a href=&quot;https://react-native-vision-camera.com/docs/guides&quot;&gt;setting up permissions&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-native-vision-camera.com/docs/guides&quot;&gt;Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-native-vision-camera.com/docs/api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&quot;&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-native-vision-camera.com/docs/guides/frame-processor-plugins-community&quot;&gt;Frame Processor Plugins&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ShadowLens&lt;/h3&gt; 
&lt;p&gt;To see VisionCamera in action, check out &lt;a href=&quot;https://mrousavy.com/projects/shadowlens&quot;&gt;ShadowLens&lt;/a&gt;!&lt;/p&gt; 
&lt;div&gt; 
 &lt;a href=&quot;https://apps.apple.com/app/shadowlens/id6471849004&quot;&gt; &lt;img height=&quot;40&quot; src=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/appstore.svg?sanitize=true&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mrousavy.shadowlens&quot;&gt; &lt;img height=&quot;40&quot; src=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/googleplay.svg?sanitize=true&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;function App() {
  const device = useCameraDevice(&#39;back&#39;)

  if (device == null) return &amp;lt;NoCameraErrorView /&amp;gt;
  return (
    &amp;lt;Camera
      style={StyleSheet.absoluteFill}
      device={device}
      isActive={true}
    /&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&quot;&gt;example&lt;/a&gt; app&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Adopting at scale&lt;/h3&gt; 
&lt;a href=&quot;https://github.com/sponsors/mrousavy&quot;&gt; &lt;img align=&quot;right&quot; width=&quot;160&quot; alt=&quot;This library helped you? Consider sponsoring!&quot; src=&quot;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/.github/funding-octocat.svg?sanitize=true&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;VisionCamera is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; 
&lt;p&gt;If you&#39;re integrating VisionCamera in a production app, consider &lt;a href=&quot;https://github.com/sponsors/mrousavy&quot;&gt;funding this project&lt;/a&gt; and &lt;a href=&quot;mailto:me@mrousavy.com?subject=Adopting VisionCamera at scale&quot;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating VisionCamera and/or Frame Processors, and more.&lt;/p&gt; 
&lt;h3&gt;Socials&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐦 &lt;a href=&quot;https://twitter.com/mrousavy&quot;&gt;&lt;strong&gt;Follow me on Twitter&lt;/strong&gt;&lt;/a&gt; for updates&lt;/li&gt; 
 &lt;li&gt;📝 &lt;a href=&quot;https://mrousavy.com/blog&quot;&gt;&lt;strong&gt;Check out my blog&lt;/strong&gt;&lt;/a&gt; for examples and experiments&lt;/li&gt; 
 &lt;li&gt;💬 &lt;a href=&quot;https://margelo.com/discord&quot;&gt;&lt;strong&gt;Join the Margelo Community Discord&lt;/strong&gt;&lt;/a&gt; for chatting about VisionCamera&lt;/li&gt; 
 &lt;li&gt;💖 &lt;a href=&quot;https://github.com/sponsors/mrousavy&quot;&gt;&lt;strong&gt;Sponsor me on GitHub&lt;/strong&gt;&lt;/a&gt; to support my work&lt;/li&gt; 
 &lt;li&gt;🍪 &lt;a href=&quot;https://ko-fi.com/mrousavy&quot;&gt;&lt;strong&gt;Buy me a Ko-Fi&lt;/strong&gt;&lt;/a&gt; to support my work&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-composable-architecture</title>
      <link>https://github.com/pointfreeco/swift-composable-architecture</link>
      <description>&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&quot;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&quot;&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&quot;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; 
&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br /&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br /&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br /&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br /&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br /&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring advanced programming topics in the Swift language, hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can watch all of the episodes &lt;a href=&quot;https://www.pointfree.co/collections/composable-architecture&quot;&gt;here&lt;/a&gt;, as well as a dedicated, &lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt;multipart tour&lt;/a&gt; of the architecture from scratch.&lt;/p&gt; 
&lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg&quot; width=&quot;600&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;&lt;img src=&quot;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&quot; alt=&quot;Screen shots of example applications&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&quot;&gt;Case Studies&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Getting started&lt;/li&gt; 
   &lt;li&gt;Effects&lt;/li&gt; 
   &lt;li&gt;Navigation&lt;/li&gt; 
   &lt;li&gt;Higher-order reducers&lt;/li&gt; 
   &lt;li&gt;Reusable components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&quot;&gt;Location manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&quot;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&quot;&gt;Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&quot;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SyncUps&quot;&gt;SyncUps app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&quot;&gt;Todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&quot;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&quot;https://github.com/pointfreeco/isowords&quot;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For a step-by-step interactive tutorial, be sure to check out &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture&quot;&gt;Meet the Composable Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; 
&lt;p&gt;As a basic example, consider a UI that shows a number along with &quot;+&quot; and &quot;−&quot; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.&lt;/p&gt; 
&lt;p&gt;To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the &lt;code&gt;@Reducer&lt;/code&gt; macro:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@Reducer
struct Feature {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In here we need to define a type for the feature&#39;s state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] We&#39;ve applied the &lt;code&gt;@ObservableState&lt;/code&gt; macro to &lt;code&gt;State&lt;/code&gt; in order to take advantage of the observation tools in the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We also need to define a type for the feature&#39;s actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we implement the &lt;code&gt;body&lt;/code&gt; property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the &lt;code&gt;Reduce&lt;/code&gt; reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer&amp;lt;State, Action&amp;gt; {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: &quot;http://numbersapi.com/\(count)/trivia&quot;)!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;StoreOf&amp;lt;Feature&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct FeatureView: View {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  var body: some View {
    Form {
      Section {
        Text(&quot;\(store.count)&quot;)
        Button(&quot;Decrement&quot;) { store.send(.decrementButtonTapped) }
        Button(&quot;Increment&quot;) { store.send(.incrementButtonTapped) }
      }

      Section {
        Button(&quot;Number fact&quot;) { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in &lt;code&gt;viewDidLoad&lt;/code&gt;, and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand!&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class FeatureViewController: UIViewController {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  init(store: StoreOf&amp;lt;Feature&amp;gt;) {
    self.store = store
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder: NSCoder) {
    fatalError(&quot;init(coder:) has not been implemented&quot;)
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    let countLabel = UILabel()
    let decrementButton = UIButton()
    let incrementButton = UIButton()
    let factLabel = UILabel()
    
    // Omitted: Add subviews and set up constraints...
    
    observe { [weak self] in
      guard let self 
      else { return }
      
      countLabel.text = &quot;\(self.store.count)&quot;
      factLabel.text = self.store.numberFact
    }
  }

  @objc private func incrementButtonTapped() {
    self.store.send(.incrementButtonTapped)
  }
  @objc private func decrementButtonTapped() {
    self.store.send(.decrementButtonTapped)
  }
  @objc private func factButtonTapped() {
    self.store.send(.numberFactButtonTapped)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Once we are ready to display this view, for example in the app&#39;s entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on testing, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;testing&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test use a &lt;code&gt;TestStore&lt;/code&gt;, which can be created with the same information as the &lt;code&gt;Store&lt;/code&gt;, but it does extra work to allow you to assert how your feature evolves as actions are sent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the &lt;code&gt;numberFact&lt;/code&gt; state to be populated:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, how do we know what fact is going to be sent back to us?&lt;/p&gt; 
&lt;p&gt;Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.&lt;/p&gt; 
&lt;p&gt;It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the &lt;code&gt;Feature&lt;/code&gt; reducer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  let numberFact: (Int) async throws -&amp;gt; String
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then we can use it in the &lt;code&gt;reduce&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { &quot;\($0) is a good number Brent&quot; })
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = &quot;0 is a good number Brent&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also improve the ergonomics of using the &lt;code&gt;numberFact&lt;/code&gt; dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to &lt;code&gt;numberFact&lt;/code&gt;, and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on dependency management, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;dependencies&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can start by wrapping the number fact functionality in a new type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct NumberFactClient {
  var fetch: (Int) async throws -&amp;gt; String
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then registering that type with the dependency management system by conforming the client to the &lt;code&gt;DependencyKey&lt;/code&gt; protocol, which requires you to specify the live value to use when running the application in simulators or devices:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the &lt;code&gt;@Dependency&lt;/code&gt; property wrapper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt; @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -&amp;gt; String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature&#39;s reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.&lt;/p&gt; 
&lt;p&gt;This means the entry point to the application no longer needs to construct dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { &quot;\($0) is a good number Brent&quot; }
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/&quot;&gt;1.17.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; Other versions &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/&quot;&gt;1.16.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/&quot;&gt;1.15.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/&quot;&gt;1.14.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/&quot;&gt;1.13.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/&quot;&gt;1.12.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/&quot;&gt;1.11.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/&quot;&gt;1.10.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/&quot;&gt;1.9.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/&quot;&gt;1.8.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/&quot;&gt;1.7.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/&quot;&gt;1.6.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/&quot;&gt;1.5.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/&quot;&gt;1.4.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/&quot;&gt;1.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/&quot;&gt;1.2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/&quot;&gt;1.1.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/&quot;&gt;1.0.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/&quot;&gt;0.59.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/&quot;&gt;0.58.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/&quot;&gt;0.57.0&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation&quot;&gt;Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate&quot;&gt;Sharing state&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings&quot;&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have a &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq&quot;&gt;dedicated article&lt;/a&gt; for all of the most frequently asked questions and comments people have concerning the library.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href=&quot;http://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/discussions&quot;&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;Point-Free Community slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Package Dependencies...&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter &quot;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture&quot;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&quot; into the package repository URL text field&lt;/li&gt; 
 &lt;li&gt;Depending on how your project is structured: 
  &lt;ul&gt; 
   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; 
   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Companion libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ryu0118/swift-composable-architecture-extras&quot;&gt;Composable Architecture Extras&lt;/a&gt;: A companion library to the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mentalflux/tca-composer&quot;&gt;TCAComposer&lt;/a&gt;: A macro framework for generating boiler-plate code in the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johnpatrickmorgan/TCACoordinators&quot;&gt;TCACoordinators&lt;/a&gt;: The coordinator pattern in the Composable Architecture.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a library, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to it!&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&quot;&gt;Arabic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&quot;&gt;French&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d&quot;&gt;Hindi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&quot;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&quot;&gt;Italian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038&quot;&gt;Korean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54&quot;&gt;Polish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8&quot;&gt;Portuguese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&quot;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942&quot;&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gokhanamal/93001244ef0c1cec58abeb1afc0de37c&quot;&gt;Turkish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8&quot;&gt;Ukrainian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&quot;https://gist.github.com&quot;&gt;Gist&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits and thanks&lt;/h2&gt; 
&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; 
&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/liscio&quot;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; 
&lt;p&gt;And thanks to &lt;a href=&quot;https://github.com/freak4pc&quot;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&quot;https://github.com/CombineCommunity/CombineExt/&quot;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; 
&lt;h2&gt;Other libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uber/RIBs&quot;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/Loop&quot;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReSwift/ReSwift&quot;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/square/workflow&quot;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactorKit/ReactorKit&quot;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/NoTests/RxFeedback.swift&quot;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/spotify/mobius.swift&quot;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;And more&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/FluxorOrg/Fluxor&quot;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/RPallas92/PromisedArchitectureKit&quot;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nicklockwood/SwiftFormat</title>
      <link>https://github.com/nicklockwood/SwiftFormat</link>
      <description>&lt;p&gt;A command-line tool and Xcode Extension for formatting Swift code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/EditorExtension/Application/Assets.xcassets/AppIcon.appiconset/icon_256x256.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=9ZGWNK5FEZFF6&amp;amp;source=url&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-blue.svg?sanitize=true&quot; alt=&quot;PayPal&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/nicklockwood/SwiftFormat/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/nicklockwood/SwiftFormat&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/nicklockwood/SwiftFormat/graphs/badge.svg?sanitize=true&quot; alt=&quot;Codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/nicklockwood/swiftformat&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fnicklockwood%2FSwiftFormat%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@nicklockwood&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/mastodon-@nicklockwood@mastodon.social-636dff.svg?sanitize=true&quot; alt=&quot;Mastodon&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#what-is-this&quot;&gt;What?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#why-would-i-want-to-do-that&quot;&gt;Why?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#how-do-i-install-it&quot;&gt;How?&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#command-line-tool&quot;&gt;Command-line tool&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;Xcode source editor extension&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-build-phase&quot;&gt;Xcode build phase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#swift-package-manager-plugin&quot;&gt;Swift Package Manager plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#via-applescript&quot;&gt;Via Applescript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#vscode-plugin&quot;&gt;VSCode plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#sublime-text-plugin&quot;&gt;Sublime Text plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/nova-plugin&quot;&gt;Nova plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#git-pre-commit-hook&quot;&gt;Git pre-commit hook&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#github-actions&quot;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#on-ci-using-danger&quot;&gt;On CI using Danger&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#bazel-build&quot;&gt;Bazel build&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#prerelease-builds&quot;&gt;Prerelease Builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;Rules&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#swift-version&quot;&gt;Swift version&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;Config file&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#globs&quot;&gt;Globs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;Linting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#error-codes&quot;&gt;Error codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#cache&quot;&gt;Cache&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#file-headers&quot;&gt;File headers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#markdown-formatting&quot;&gt;Markdown formatting&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#known-issues&quot;&gt;Known issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#tip-jar&quot;&gt;Tip Jar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is a code library and command-line tool for reformatting Swift code on macOS, Linux or Windows.&lt;/p&gt; 
&lt;p&gt;SwiftFormat goes above and beyond what you might expect from a code formatter. In addition to adjusting white space it can insert or remove implicit &lt;code&gt;self&lt;/code&gt;, remove redundant parentheses, and correct many other deviations from the standard Swift idioms.&lt;/p&gt; 
&lt;h2&gt;Why would I want to do that?&lt;/h2&gt; 
&lt;p&gt;Many programmers have a preferred style for formatting their code, and others seem entirely blind to the existing formatting conventions of a project (to the enragement of their colleagues).&lt;/p&gt; 
&lt;p&gt;When collaborating on a project, it can be helpful to agree on a common coding style, but enforcing that manually is tedious and error-prone, and can lead to arguments if some participants take it more seriously than others.&lt;/p&gt; 
&lt;p&gt;Having a tool to automatically enforce a common style eliminates those issues, and lets you focus on the behavior of the code, not its presentation.&lt;/p&gt; 
&lt;h2&gt;How do I install it?&lt;/h2&gt; 
&lt;p&gt;That depends - There are several ways you can use SwiftFormat:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;As a command-line tool that you run manually, or as part of some other toolchain&lt;/li&gt; 
 &lt;li&gt;As a Source Editor Extension that you can invoke via the Editor &amp;gt; SwiftFormat menu within Xcode&lt;/li&gt; 
 &lt;li&gt;As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or&lt;/li&gt; 
 &lt;li&gt;As a Git pre-commit hook, so that it runs on any files you&#39;ve changed before you check them in&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Command-line tool&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can install the &lt;code&gt;swiftformat&lt;/code&gt; command-line tool on macOS or Linux using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, just type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To update to the latest version once installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew upgrade swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can install the tool on macOS or Linux by using &lt;a href=&quot;https://github.com/yonaskolb/Mint&quot;&gt;Mint&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mint install nicklockwood/SwiftFormat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you prefer, you can check out and build SwiftFormat manually on macOS, Linux or Windows as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone https://github.com/nicklockwood/SwiftFormat
$ cd SwiftFormat
$ swift build -c release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are installing SwiftFormat into your project directory, you can use &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; on macOS to automatically install the swiftformat binary along with your other pods - see the Xcode build phase instructions below for details.&lt;/p&gt; 
&lt;p&gt;Another option is to include the binary artifactbundle in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.binaryTarget(
    name: &quot;swiftformat&quot;,
    url: &quot;https://github.com/nicklockwood/SwiftFormat/releases/download/0.55.0/swiftformat-macos.artifactbundle.zip&quot;,
    checksum: &quot;CHECKSUM&quot;
),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would prefer not to use a package manager, you can build the command-line app manually:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;open &lt;code&gt;SwiftFormat.xcodeproj&lt;/code&gt; and build the &lt;code&gt;SwiftFormat (Application)&lt;/code&gt; scheme.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the &lt;code&gt;swiftformat&lt;/code&gt; binary into &lt;code&gt;/usr/local/bin/&lt;/code&gt; (this is a hidden folder, but you can use the Finder&#39;s &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu to open it).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open &lt;code&gt;~/.bash_profile&lt;/code&gt; in your favorite text editor (this is a hidden file, but you can type &lt;code&gt;open ~/.bash_profile&lt;/code&gt; in the terminal to open it).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following line to the file: &lt;code&gt;alias swiftformat=&quot;/usr/local/bin/swiftformat --indent 4&quot;&lt;/code&gt; (you can omit the &lt;code&gt;--indent 4&lt;/code&gt;, or replace it with something else. Run &lt;code&gt;swiftformat --help&lt;/code&gt; to see the available options).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Save the &lt;code&gt;.bash_profile&lt;/code&gt; file and run the command &lt;code&gt;source ~/.bash_profile&lt;/code&gt; for the changes to take effect.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you followed the installation instructions above, you can now just type&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(that&#39;s a space and then a period after the command) in the terminal to format any Swift files in the current directory. In place of the &lt;code&gt;.&lt;/code&gt;, you can instead type an absolute or relative path to the file or directory that you want to format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; &lt;code&gt;swiftformat .&lt;/code&gt; will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive.&lt;/p&gt; 
&lt;p&gt;To use it safely, do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Choose a file or directory that you want to apply the changes to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that you have committed all your changes to that code safely in git (or whatever source control system you use).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(Optional) In Terminal, type &lt;code&gt;swiftformat --infer-options &quot;/path/to/your/code/&quot;&lt;/code&gt;. This will suggest a set of formatting options to use that match your existing project style (but you are free to ignore these and use the defaults, or your own settings if you prefer).&lt;/p&gt; &lt;p&gt;The path can point to either a single Swift file or a directory of files. It can be either be absolute, or relative to the current directory. The &lt;code&gt;&quot;&quot;&lt;/code&gt; quotes around the path are optional, but if the path contains spaces then you either need to use quotes, or escape each space with &lt;code&gt;\&lt;/code&gt;. You may include multiple paths separated by spaces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In Terminal, type &lt;code&gt;swiftformat &quot;/path/to/your/code/&quot;&lt;/code&gt;. The same rules apply as above with respect to paths, and multiple space-delimited paths are allowed.&lt;/p&gt; &lt;p&gt;If you used &lt;code&gt;--infer-options&lt;/code&gt; to generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files.&lt;/p&gt; &lt;p&gt;If you have created a &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;config file&lt;/a&gt;, you can specify its path using &lt;code&gt;--config &quot;/path/to/your/config-file/&quot;&lt;/code&gt;. Alternatively, if you name the file &lt;code&gt;.swiftformat&lt;/code&gt; and place it inside the project you are formatting, it will be picked up automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press enter to begin formatting. Once the formatting is complete, use your source control system to check the changes, and verify that no undesirable changes have been introduced. If they have, revert the changes, tweak the options and try again.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(Optional) commit the changes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Following these instructions &lt;em&gt;should&lt;/em&gt; ensure that you avoid catastrophic data loss, but in the unlikely event that it wipes your hard drive, &lt;strong&gt;please note that I accept no responsibility&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using Standard Input/Output:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you prefer, you can use unix pipes to include SwiftFormat as part of a command chain. For example, this is an alternative way to format a file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat --output /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Omitting the &lt;code&gt;--output /path/to/file.swift&lt;/code&gt; will print the formatted file to Standard Output (stdout). You can also pass &quot;stdout&quot; explicitly as the output path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat --output stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use &lt;code&gt;&amp;gt;&lt;/code&gt; to specify the output path as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat &amp;gt; /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not supply an input file, SwiftFormat will automatically take its input from Standard Input (stdin), but will time-out if no input is received immediately and display the help screen. To make it explicit, pass &quot;stdin&quot; as the input path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat stdin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using stdin, SwiftFormat does not have access to the file path of the input, so features that rely on the file location (such as inserting the creation date into header comments, or detecting &lt;code&gt;.swiftformat&lt;/code&gt; configuration files in the file path) will not work. To solve this, you can provide the file path using the &lt;code&gt;--stdin-path&lt;/code&gt; argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat stdin --stdinpath /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Xcode source editor extension&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Like the command-line tool, you can install the SwiftFormat for Xcode extension application via &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install --cask swiftformat-for-xcode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will install SwiftFormat for Xcode in your Applications folder. Double-click the app to launch it, and then follow the on-screen instructions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The app should be correctly signed, but if you get a Gatekeeper warning when trying to open it you can bypass this by right-clicking (or control-clicking) the app and selecting &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To update to the latest version once installed use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew upgrade --cask swiftformat-for-xcode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you prefer not to use Homebrew, you&#39;ll find the latest version of the SwiftFormat for Xcode application on the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/releases&quot;&gt;GitHub Releases&lt;/a&gt; page. Download and unpack the zip archive, then drag &lt;code&gt;SwiftFormat for Xcode.app&lt;/code&gt; into your &lt;code&gt;Applications&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Once you have launched the app and restarted Xcode, you&#39;ll find a SwiftFormat option under Xcode&#39;s Editor menu. If the SwiftFormat menu does not appear &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;this thread&lt;/a&gt; may help.&lt;/p&gt; 
&lt;p&gt;You can configure the formatting &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;rules&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;options&lt;/a&gt; using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects.&lt;/p&gt; 
&lt;p&gt;The format of the configuration file is described in the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;Config section&lt;/a&gt; below.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the &lt;code&gt;.swiftformat&lt;/code&gt; file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration.&lt;/p&gt; 
&lt;h2&gt;Xcode build phase&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app.&lt;/p&gt; 
&lt;p&gt;Alternatively, you might want to consider running SwiftFormat in &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;lint&lt;/a&gt; mode as part of your normal build, and then running a formatting pass manually, or as part of a less-frequent build target (such as the tests).&lt;/p&gt; 
&lt;h3&gt;Using Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;To set up SwiftFormat as an Xcode build phase, do the following:&lt;/p&gt; 
&lt;h4&gt;1) Create a BuildTools folder and Package.swift&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a folder called &lt;code&gt;BuildTools&lt;/code&gt; in the same folder as your xcodeproj file&lt;/li&gt; 
 &lt;li&gt;In this folder, create a file called &lt;code&gt;Package.swift&lt;/code&gt;, with the following contents:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:5.1
import PackageDescription

let package = Package(
    name: &quot;BuildTools&quot;,
    platforms: [.macOS(.v10_11)],
    dependencies: [
        .package(url: &quot;https://github.com/nicklockwood/SwiftFormat&quot;, from: &quot;0.55.0&quot;),
    ],
    targets: [.target(name: &quot;BuildTools&quot;, path: &quot;&quot;)]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;If you are running Xcode 11.4 or later, in the &lt;code&gt;BuildTools&lt;/code&gt; folder create a file called &lt;code&gt;Empty.swift&lt;/code&gt; with nothing in it. This is to satisfy a change in Swift Package Manager.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;2) Add a Build phase to your app target&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Uncheck the &lt;code&gt;Based on dependency analysis&lt;/code&gt; checkbox&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd BuildTools
SDKROOT=(xcrun --sdk macosx --show-sdk-path)
#swift package update #Uncomment this line temporarily to update the version used to the latest matching your BuildTools/Package.swift file
swift run -c release swiftformat &quot;$SRCROOT&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can also use &lt;code&gt;swift run -c release --package-path BuildTools swiftformat &quot;$SRCROOT&quot;&lt;/code&gt; if you need a more complex script and &lt;code&gt;cd BuildTools&lt;/code&gt; breaks stuff.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: &lt;code&gt;BuildTools/.build&lt;/code&gt; and &lt;code&gt;BuildTools/.swiftpm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; If you are using Xcode 15 or later, make sure that the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; (aka &quot;User Script Sandboxing&quot;) option is set to NO, otherwise SwiftFormat won&#39;t be able to run correctly.&lt;/p&gt; 
&lt;h3&gt;Using CocoaPods&lt;/h3&gt; 
&lt;h4&gt;1) Add the SwiftFormat CLI to your Podfile&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory via &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, by adding the following line to your Podfile then running &lt;code&gt;pod install&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftFormat/CLI&#39;, &#39;~&amp;gt; 0.55&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will only install the pre-built command-line app, not the source code for the SwiftFormat framework.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting &quot;Open&quot;.&lt;/p&gt; 
&lt;h4&gt;2) Add a Build phase to your app target&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Uncheck the &lt;code&gt;Based on dependency analysis&lt;/code&gt; checkbox&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&quot;${PODS_ROOT}/SwiftFormat/CommandLineTool/swiftformat&quot; &quot;$SRCROOT&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Alternative: Locally installed SwiftFormat&lt;/h3&gt; 
&lt;p&gt;Alternatively, you could use a locally installed swiftformat command-line tool instead by putting the following in your Run Script build phase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if which swiftformat &amp;gt;/dev/null; then
  swiftformat .
else
  echo &quot;warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not recommended for shared projects however, as different team members using different versions of SwiftFormat may result in noise in the commit history as code gets reformatted inconsistently.&lt;/p&gt; 
&lt;p&gt;If you installed SwiftFormat via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;warning: SwiftFormat not installed, download from &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;https://github.com/nicklockwood/SwiftFormat&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftFormat, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ &quot;$(uname -m)&quot; == arm64 ]]; then
    export PATH=&quot;/opt/homebrew/bin:$PATH&quot;
fi

if which swiftformat &amp;gt; /dev/null; then
  swiftformat .
else
  echo &quot;warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ln -s /opt/homebrew/bin/swiftformat /usr/local/bin/swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Swift Package Manager plugin&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;SwiftFormat&lt;/code&gt; as a SwiftPM command plugin.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Swift 5.6 or higher is required. Add the package to your dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    // ...
    .package(url: &quot;https://github.com/nicklockwood/SwiftFormat&quot;, from: &quot;0.55.0&quot;),
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The plugin will find an existing &lt;code&gt;.swiftformat&lt;/code&gt; in your package root folder and honor it automatically.&lt;/p&gt; 
&lt;h3&gt;Trigger Plugin From Command-Line&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift package plugin --allow-writing-to-package-directory swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can limit the formatting to a particular target with &lt;code&gt;--target&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;You can also specify &lt;code&gt;SwiftFormat&lt;/code&gt; arguments, e.g. &lt;code&gt;--swift-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift package plugin --allow-writing-to-package-directory swiftformat --target MyLibrary --swift-version 5.6 --verbose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Trigger Plugin From Xcode&lt;/h3&gt; 
&lt;p&gt;In Xcode 14 you can trigger the command plugin execution for a Swift package or an Xcode project.&lt;/p&gt; 
&lt;p&gt;For an Xcode project the project&#39;s main directory will be processed and the &lt;code&gt;--target&lt;/code&gt; option will be ignored.&lt;/p&gt; 
&lt;p&gt;You can also specify &lt;code&gt;SwiftFormat&lt;/code&gt; arguments, e.g. &lt;code&gt;--swift-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif&quot; alt=&quot;Run plugin in Xcode 14&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Via AppleScript&lt;/h2&gt; 
&lt;p&gt;To run SwiftFormat on the frontmost Xcode document (project or workspace) you can use the following AppleScript:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-applescript&quot;&gt;tell application &quot;Xcode&quot;
    set frontWindow to the first window
    set myPath to path of document of frontWindow
    do shell script &quot;cd &quot; &amp;amp; myPath &amp;amp; &quot;;cd ..; /usr/local/bin/swiftformat .&quot;
end tell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some Apps you can trigger this from are &lt;a href=&quot;https://folivora.ai&quot;&gt;BetterTouchTool&lt;/a&gt;, &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;Alfred&lt;/a&gt; or &lt;a href=&quot;https://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Maestro&lt;/a&gt;. Another option is to define a QuickAction for Xcode via Automator and then assign a keyboard shortcut for it in the System Preferences.&lt;/p&gt; 
&lt;h2&gt;VSCode plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use Microsoft&#39;s &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VSCode&lt;/a&gt; editor for writing Swift, &lt;a href=&quot;https://github.com/vknabel&quot;&gt;Valentin Knabel&lt;/a&gt; has created a &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftformat&quot;&gt;VSCode plugin&lt;/a&gt; for SwiftFormat.&lt;/p&gt; 
&lt;h2&gt;Sublime Text plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use the &lt;a href=&quot;https://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt; editor, try the &lt;a href=&quot;https://github.com/aerobounce/Sublime-Swift-Format&quot;&gt;Sublime-Swift-Format plugin&lt;/a&gt; by &lt;a href=&quot;https://github.com/aerobounce&quot;&gt;Aerobounce&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Nova plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use the &lt;a href=&quot;https://panic.com/nova&quot;&gt;Nova&lt;/a&gt; editor, try the &lt;a href=&quot;https://extensions.panic.com/extensions/org.padraig/org.padraig.SwiftFormat/&quot;&gt;SwiftFormat extension&lt;/a&gt; by &lt;a href=&quot;https://mastodon.social/@PadraigOCinneide&quot;&gt;Pádraig Ó Cinnéide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Git pre-commit hook&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the instructions for installing the SwiftFormat command-line tool.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href=&quot;https://github.com/hallettj/git-format-staged&quot;&gt;git-format-staged&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit or create a &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; file in your project folder. The .git folder is hidden but should already exist if you are using Git with your project, so open it with the terminal, or the Finder&#39;s &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following line in the pre-commit file. The &lt;code&gt;{}&lt;/code&gt; will be replaced automatically by the path to the Swift file being formatted:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
git-format-staged --formatter &quot;swiftformat stdin --stdin-path &#39;{}&#39;&quot; &quot;*.swift&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Note that this example uses your locally installed version of SwiftFormat, not a separate copy in your project repository. You can replace &lt;code&gt;swiftformat&lt;/code&gt; with the path to a copy inside your project if you prefer.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;enable the hook by typing &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; in the terminal.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The pre-commit hook will now run whenever you run &lt;code&gt;git commit&lt;/code&gt;. Running &lt;code&gt;git commit --no-verify&lt;/code&gt; will skip the pre-commit hook.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are using Git via a GUI client such as &lt;a href=&quot;https://www.git-tower.com&quot;&gt;Tower&lt;/a&gt;, &lt;a href=&quot;https://www.git-tower.com/help/mac/faq-and-tips/faq/hook-scripts&quot;&gt;additional steps&lt;/a&gt; may be needed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; Unlike the Xcode build phase approach, git pre-commit hook won&#39;t be checked in to source control, and there&#39;s no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a &lt;em&gt;post&lt;/em&gt;-commit hook instead, which would run on your continuous integration server.&lt;/p&gt; 
&lt;h2&gt;GitHub Actions&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;SwiftFormat comes preinstalled on all macOS GitHub-hosted runners. If you are self hosting you will need to ensure SwiftFormat is installed on your runner.&lt;/li&gt; 
 &lt;li&gt;Create a GitHub Actions workflow using SwiftFormat, passing the &lt;code&gt;--reporter github-actions-log&lt;/code&gt; command line option. The following example action lints pull requests using SwiftFormat, reporting warnings using the GitHub Actions log.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Lint.yml
name: Lint
on: pull_request

jobs:
  Lint:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: SwiftFormat
        run: swiftformat --lint . --reporter github-actions-log
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;On CI using Danger&lt;/h2&gt; 
&lt;p&gt;To setup SwiftFormat to be used by your continuous integration system using &lt;a href=&quot;http://danger.systems/ruby/&quot;&gt;Danger&lt;/a&gt;, do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the &lt;a href=&quot;http://danger.systems/guides/getting_started.html&quot;&gt;&lt;code&gt;instructions&lt;/code&gt;&lt;/a&gt; to setup Danger.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;a href=&quot;https://github.com/garriguv/danger-ruby-swiftformat&quot;&gt;&lt;code&gt;danger-swiftformat&lt;/code&gt;&lt;/a&gt; plugin to your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Dangerfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;swiftformat.binary_path = &quot;/path/to/swiftformat&quot; # optional
swiftformat.additional_args = &quot;--indent tab --self insert&quot; # optional
swiftformat.check_format(fail_on_error: true)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is recommended to add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory to ensure the same version is used each time (see the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-build-phase&quot;&gt;Xcode build phase&lt;/a&gt; instructions above).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bazel Build&lt;/h2&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://bazel.build/&quot;&gt;Bazel&lt;/a&gt; to build your Swift projects and want to ensure that only properly formatted code is merged to your main branch, try &lt;a href=&quot;https://github.com/cgrindel/rules_swiftformat&quot;&gt;rules_swiftformat&lt;/a&gt;. The repository contains Bazel rules and macros that format Swift source files using SwiftFormat, test that the formatted files exist in the workspace directory, and copy the formatted files to the workspace directory.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;SwiftFormat publishes releases into &lt;a href=&quot;https://github.com/features/packages&quot;&gt;GitHub Packages&lt;/a&gt; Docker registry. To pull the image call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker pull ghcr.io/nicklockwood/swiftformat:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the container runs &lt;code&gt;swiftformat .&lt;/code&gt; Therefore, you need to provide a path either via an argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or by changing the working dir:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work -w /work ghcr.io/nicklockwood/swiftformat:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To check the installed SwiftFormat version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm ghcr.io/nicklockwood/swiftformat:latest --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Linting example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work --lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prerelease Builds&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Prerelease builds are subject to breaking changes.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;New rules, options, and fixes are merged to the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/commits/develop/&quot;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; branch before being incorporated into an official release. You may want to use a prerelease version of SwiftFormat that includes the latest unreleased changes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Homebrew:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; &lt;code&gt;--HEAD&lt;/code&gt; option downloads, builds, and installs the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;You can install a prerelease build via Homebrew by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install swiftformat --HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Nightly Builds:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nightly builds of the &lt;code&gt;develop&lt;/code&gt; branch are available in the &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly&quot;&gt;calda/SwiftFormat-nightly&lt;/a&gt; repo. A new release is published every day, unless there have been no changes to &lt;code&gt;develop&lt;/code&gt; since the last release. You can download executables for the latest nightly release &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly/releases/latest&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Commit SHAs on &lt;code&gt;develop&lt;/code&gt; are unstable since that branch is occasionally rebased, but artifact URLs and tags in &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly&quot;&gt;calda/SwiftFormat-nightly&lt;/a&gt; are stable references that can be used from other repos or tools.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;SwiftFormat&#39;s configuration is split between &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;options&lt;/strong&gt;. Rules are functions in the SwiftFormat library that apply changes to the code. Options are settings that control the behavior of the rules.&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;The options available in SwiftFormat can be displayed using the &lt;code&gt;--options&lt;/code&gt; command-line argument. The default value for each option is indicated in the help text.&lt;/p&gt; 
&lt;p&gt;Rules are configured by adding &lt;code&gt;--[option_name] [value]&lt;/code&gt; to your command-line arguments, or by creating a &lt;code&gt;.swiftformat&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;config file&lt;/a&gt; and placing it in your project directory.&lt;/p&gt; 
&lt;p&gt;A given option may affect multiple rules. Use &lt;code&gt;--rule-info [rule_name]&lt;/code&gt; command for details about which options affect a given rule, or see the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/raw/main/Rules.md&quot;&gt;Rules.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;You can configure options for specific files or code ranges by using &lt;code&gt;swiftformat:options&lt;/code&gt; directive in comments inside your Swift file. To temporarily set one or more options inside a source file, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:options --indent 2 --allman true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To apply an options override only to a particular line, use the &lt;code&gt;:this&lt;/code&gt;, &lt;code&gt;:next&lt;/code&gt; or &lt;code&gt;:previous&lt;/code&gt; modifiers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let indexUrl: URL // swiftformat:options:this --preserve-acronyms url 

// swiftformat:options:next --semicolons inline
doTheThing(); print(&quot;Did the thing&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;p&gt;SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/raw/main/Rules.md&quot;&gt;Rules.md&lt;/a&gt; along with documentation for how they are used.&lt;/p&gt; 
&lt;p&gt;The list of available rules can be displayed within the command-line app using the &lt;code&gt;--rules&lt;/code&gt; argument. Rules can be either enabled or disabled. Most are enabled by default. Disabled rules are marked with &quot;(disabled)&quot; when displayed using &lt;code&gt;--rules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;--rule-info [rule_name]&lt;/code&gt; command to get information about a specific rule. Pass a comma-delimited list of rule names to get information for multiple rules at once, or use &lt;code&gt;--rule-info&lt;/code&gt; with no argument for info on all rules.&lt;/p&gt; 
&lt;p&gt;You can disable rules individually using &lt;code&gt;--disable&lt;/code&gt; followed by a list of one or more comma-delimited rule names, or enable opt-in rules using &lt;code&gt;--enable&lt;/code&gt; followed by the rule names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable redundantSelf,trailingClosures
--enable isEmpty
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer, you can use multiple &lt;code&gt;--enable&lt;/code&gt;/&lt;code&gt;--disable&lt;/code&gt; arguments instead of using commas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable indent
--disable linebreaks
--disable redundantSelf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can use the line continuation character &lt;code&gt;\&lt;/code&gt; to wrap a single argument over multiple line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable          \
    indent,        \
    linebreaks,    \
    redundantSelf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid automatically opting-in to new rules when SwiftFormat is updated, you can disable all rules using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then individually enable just the rules you want. Alternatively, use the&lt;code&gt;--rules&lt;/code&gt; argument to &lt;em&gt;only&lt;/em&gt; enable the rules you specify:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--rules indent,linebreaks
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As above, you may include multiple &lt;code&gt;--rules&lt;/code&gt; arguments, or use the line continuation character &lt;code&gt;\&lt;/code&gt; to wrap the rules onto separate lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--rules redundantSelf
--rules         \
    indent,     \
    linebreaks
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see exactly which rules were applied to a given file, you can use the &lt;code&gt;--verbose&lt;/code&gt; command-line option to force SwiftFormat to print a more detailed log as it applies the formatting. &lt;strong&gt;NOTE:&lt;/strong&gt; running in verbose mode is slower than the default mode.&lt;/p&gt; 
&lt;p&gt;You can disable rules for specific files or code ranges by using &lt;code&gt;swiftformat:&lt;/code&gt; directives in comments inside your Swift file. To temporarily disable one or more rules inside a source file, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable the rule(s) again, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable all rules use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to enable them all again, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:enable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To temporarily prevent one or more rules being applied to just the next line, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable:next &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
let foo = bar // rule(s) will be disabled for this line
let bar = baz // rule(s) will be re-enabled for this line
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; directives.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;swiftformat:enable&lt;/code&gt; directive only serves to counter a previous &lt;code&gt;swiftformat:disable&lt;/code&gt; directive in the same file. It is not possible to use &lt;code&gt;swiftformat:enable&lt;/code&gt; to enable a rule that was not already enabled when formatting started.&lt;/p&gt; 
&lt;h2&gt;Swift version&lt;/h2&gt; 
&lt;p&gt;Most SwiftFormat rules are version-agnostic, but some are applicable only to newer Swift versions. These rules will be disabled automatically if the Swift version is not specified, so to make sure that the full functionality is available you should specify the version of Swift that is used by your project.&lt;/p&gt; 
&lt;p&gt;You can specify the Swift compiler version in one of two ways:&lt;/p&gt; 
&lt;p&gt;You can specify your project&#39;s Swift compiler version using the &lt;code&gt;--swift-version&lt;/code&gt; command line argument. You can also add the &lt;code&gt;--swift-version&lt;/code&gt; option to your &lt;code&gt;.swiftformat&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;Another option is to add a &lt;code&gt;.swift-version&lt;/code&gt; file to your project directory. This is a text file that should contain the minimum Swift version supported by your project, and is also supported by some other tools. The &lt;code&gt;--swift-version&lt;/code&gt; argument takes precedence over any &lt;code&gt;.swift-version&lt;/code&gt; files.&lt;/p&gt; 
&lt;p&gt;Both the &lt;code&gt;.swift-version&lt;/code&gt; file and the &lt;code&gt;--swift-version&lt;/code&gt; option in a &lt;code&gt;.swiftformat&lt;/code&gt; file are applied hierarchically; If you have submodules in your project that use a different Swift version, you can add separate swift version configurations for those directories.&lt;/p&gt; 
&lt;h2&gt;Swift language mode&lt;/h2&gt; 
&lt;p&gt;SwiftFormat also allows you to specify the Swift &lt;em&gt;language mode&lt;/em&gt; used by your project. This is distinct from the Swift compiler version. For example, you can use the Swift 6.0 compiler with either the Swift 5 language mode or the Swift 6 language mode. Some SwiftFormat rules will behave differently under different Swift language modes.&lt;/p&gt; 
&lt;p&gt;You can specify your project&#39;s Swift language mode using the &lt;code&gt;--language-mode&lt;/code&gt; command line argument. You can also add the &lt;code&gt;--language-mode&lt;/code&gt; option to your &lt;code&gt;.swiftformat&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;If not specified, SwiftFormat uses the default language mode of the specified Swift compiler version. The default language mode in Swift 5.x and Swift 6.x is the Swift 5 language mode. If your project uses the Swift 6 language mode, you should specify &lt;code&gt;--language-mode 6&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Config file&lt;/h2&gt; 
&lt;p&gt;Although it is possible to configure SwiftFormat directly by using the command-line &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;options&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;rules&lt;/a&gt; detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers.&lt;/p&gt; 
&lt;p&gt;A SwiftFormat configuration file consists of one or more command-line options, split onto separate lines, e.g:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--allman true
--indent tab
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While formatting, SwiftFormat will automatically check inside each subdirectory for the presence of a &lt;code&gt;.swiftformat&lt;/code&gt; file and will apply any options that it finds there to the files in that directory.&lt;/p&gt; 
&lt;p&gt;This allows you to override certain rules or formatting options just for a particular directory of files. You can also specify excluded files relative to that directory using &lt;code&gt;--exclude&lt;/code&gt;, which may be more convenient than specifying them at the top-level:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--exclude Pods,Generated
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--exclude&lt;/code&gt; option takes a comma-delimited list of file or directory paths to exclude from formatting. Excluded paths are relative to the config file containing the &lt;code&gt;--exclude&lt;/code&gt; command. The excluded paths can include wildcards, specified using Unix &quot;Glob&quot; syntax, as &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#globs&quot;&gt;documented below&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Config files named &quot;.swiftformat&quot; will be processed automatically, however, you can select an additional configuration file to use for formatting using the &lt;code&gt;--config &quot;path/to/config/file&quot;&lt;/code&gt; command-line argument. A configuration file selected using &lt;code&gt;--config&lt;/code&gt; does not need to be named &quot;.swiftformat&quot;, and can be located outside of the project directory.&lt;/p&gt; 
&lt;p&gt;The config file format is designed to be edited by hand. You may include blank lines for readability, and can also add comments using a hash prefix (#), e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# format options
--allman true
--indent tab # tabs FTW!

# file options
--exclude Pods

# rules
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would prefer not to edit the configuration file by hand, you can use the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool&#39;s &lt;code&gt;--inferoptions&lt;/code&gt; command to generate a config file from your existing project, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd /path/to/project
$ swiftformat --infer-options . --output .swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Globs&lt;/h2&gt; 
&lt;p&gt;When excluding files from formatting using the &lt;code&gt;--exclude&lt;/code&gt; option, you may wish to make use of wildcard paths (aka &quot;Globs&quot;) to match all files that match a particular naming convention without having to manually list them all.&lt;/p&gt; 
&lt;p&gt;SwiftFormat&#39;s glob syntax is based on Ruby&#39;s implementation, which varies slightly from the Unix standard. The following patterns are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt; - A single star matches zero or more characters in a filename, but &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**&lt;/code&gt; - A double star will match anything, including one or more &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;?&lt;/code&gt; - A question mark will match any single character except &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;[abc]&lt;/code&gt; - Matches any single character inside the brackets.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;[a-z]&lt;/code&gt; - Matches a single character in the specified range in the brackets.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;{foo,bar}&lt;/code&gt; - Matches any one of the comma-delimited strings inside the braces.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;foo.swift&lt;/code&gt; - Matches the file &quot;foo.swift&quot; in the same directory as the config file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*.swift&lt;/code&gt; - Matches any Swift file in the same directory as the config file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;foo/bar.swift&lt;/code&gt; - Matches the file &quot;bar.swift&quot; in the directory &quot;foo&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/foo.swift&lt;/code&gt; - Matches any file named &quot;foo.swift&quot; in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/*.swift&lt;/code&gt; - Matches any Swift file in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/Generated&lt;/code&gt; - Matches any folder called &lt;code&gt;Generated&lt;/code&gt; in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/*_generated.swift&lt;/code&gt; - Matches any Swift file with the suffix &quot;_generated&quot; in the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Linting&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is primarily designed as a formatter rather than a linter, i.e. it is designed to fix your code rather than tell you what&#39;s wrong with it. However, sometimes it can be useful to verify that code has been formatted in a context where it is not desirable to actually change it.&lt;/p&gt; 
&lt;p&gt;A typical example would be as part of a CI (Continuous Integration) process, where you may wish to have an automated script that checks committed code for style violations. While you can use a separate tool such as &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for this, it makes sense to be able to validate the formatting against the exact same rules as you are using to apply it.&lt;/p&gt; 
&lt;p&gt;In order to run SwiftFormat as a linter, you can use the &lt;code&gt;--lint&lt;/code&gt; command-line option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat --lint path/to/project
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified. Instead, SwiftFormat will format each file in memory and then compare the result against the input and report the lines that required changes.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;--lint&lt;/code&gt; option is similar to &lt;code&gt;--dry-run&lt;/code&gt;, but &lt;code&gt;--lint&lt;/code&gt; returns warnings for every line that required changes, and will return a nonzero error code (see &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#error-codes&quot;&gt;Error codes&lt;/a&gt; below) if any changes are detected, which is useful if you want it to fail a build step on your CI server.&lt;/p&gt; 
&lt;p&gt;If you would prefer &lt;code&gt;--lint&lt;/code&gt; not to fail your build, you can use the &lt;code&gt;--lenient&lt;/code&gt; option to force SwiftFormat to return success in &lt;code&gt;--lint&lt;/code&gt; mode even when formatting issues were detected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat --lint --lenient path/to/project
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, &lt;code&gt;--lint&lt;/code&gt; will only report lines that require formatting, but you can use the additional &lt;code&gt;--verbose&lt;/code&gt; flag to display additional info about which files were checked, even if there were no changes needed.&lt;/p&gt; 
&lt;p&gt;If you would prefer not to see a warning for each and every formatting change, you can use the &lt;code&gt;--quiet&lt;/code&gt; flag to suppress all output except errors.&lt;/p&gt; 
&lt;p&gt;Sometimes you may wish to autoformat some rules, but only lint others. To do that, use the &lt;code&gt;--lintonly&lt;/code&gt; option in your config file to specify rules that should only be applied in &lt;code&gt;--lint&lt;/code&gt; mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--rules braces,indent
--lint-only trailingClosures,unusedArguments
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Error codes&lt;/h2&gt; 
&lt;p&gt;The swiftformat command-line tool will always exit with one of the following codes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0 - Success. This code will be returned in the event of a successful formatting run or if &lt;code&gt;--lint&lt;/code&gt; detects no violations.&lt;/li&gt; 
 &lt;li&gt;1 - Lint failure. This code will be returned when running in &lt;code&gt;--lint&lt;/code&gt; mode, or when autocorrecting in &lt;code&gt;--strict&lt;/code&gt; mode, if the input requires formatting.&lt;/li&gt; 
 &lt;li&gt;70 - Program error. This code will be returned if there is a problem with the input or configuration arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cache&lt;/h2&gt; 
&lt;p&gt;SwiftFormat uses a cache file to avoid reformatting files that haven&#39;t changed. For a large project, this can significantly reduce processing time.&lt;/p&gt; 
&lt;p&gt;By default, the cache is stored in &lt;code&gt;~/Library/Caches/com.charcoaldesign.swiftformat&lt;/code&gt; on macOS, or &lt;code&gt;/var/tmp/com.charcoaldesign.swiftformat&lt;/code&gt; on Linux. Use the command-line option &lt;code&gt;--cache ignore&lt;/code&gt; to ignore the cached version and re-apply formatting to all files. Alternatively, you can use &lt;code&gt;--cache clear&lt;/code&gt; to delete the cache (or you can just manually delete the cache file).&lt;/p&gt; 
&lt;p&gt;The cache is shared between all projects. The file is fairly small, as it only stores the path and size for each file, not the contents. If you do start experiencing slowdown due to the cache growing too large, you might want to consider using a separate cache file for each project.&lt;/p&gt; 
&lt;p&gt;You can specify a custom cache file location by passing a path as the &lt;code&gt;--cache&lt;/code&gt; option value. For example, you might want to store the cache file inside your project directory. It is fine to check in the cache file if you want to share it between different users of your project, as the paths stored in the cache are relative to the location of the formatted files.&lt;/p&gt; 
&lt;h2&gt;File headers&lt;/h2&gt; 
&lt;p&gt;SwiftFormat can be configured to strip or replace the header comments in every file with a template. The &quot;header comment&quot; is defined as a comment block that begins on the first nonblank line in the file, and is followed by at least one blank line. This may consist of a single comment body, or multiple comments on consecutive lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// This is a header comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// This is a regular comment
func foo(bar: Int) -&amp;gt; Void { ... }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The header template is a string that you provide using the &lt;code&gt;--header&lt;/code&gt; command-line option. Passing a value of &lt;code&gt;ignore&lt;/code&gt; (the default) will leave the header comments unmodified. Passing &lt;code&gt;strip&lt;/code&gt; or an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; will remove them. If you wish to provide a custom header template, the format is as follows:&lt;/p&gt; 
&lt;p&gt;For a single-line template: &lt;code&gt;--header &quot;Copyright (c) 2017 Foobar Industries&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For a multiline comment, mark linebreaks with &lt;code&gt;\n&lt;/code&gt;: &lt;code&gt;--header &quot;First line\nSecond line&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can optionally include Swift comment markup in the template if you wish: &lt;code&gt;--header &quot;/*--- Header comment ---*/&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you do not include comment markup, each line in the template will be prepended with &lt;code&gt;//&lt;/code&gt; and a single space.&lt;/p&gt; 
&lt;p&gt;It is common practice to include the file name, creation date and/or the current year in a comment header copyright notice. To do that, you can use the following placeholders:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{file}&lt;/code&gt; - the name of the file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{year}&lt;/code&gt; - the current year&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{created}&lt;/code&gt; - the date on which the file was created&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{created.year}&lt;/code&gt; - the year in which the file was created&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{author.name}&lt;/code&gt; - the name of the user who first committed the file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{author.email}&lt;/code&gt; - the email of the user who first committed the file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, a header template of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--header &quot;{file}\nCopyright (c) {year} Foobar Industries\nCreated by John Smith on {created}.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will be formatted as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SomeFile.swift
// Copyright (c) 2019 Foobar Industries
// Created by John Smith on 01/02/2016.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;{year}&lt;/code&gt; value and &lt;code&gt;{created}&lt;/code&gt; date format are determined from the current locale and timezone of the machine running the script. &lt;code&gt;{author.name}&lt;/code&gt; and &lt;code&gt;{author.email}&lt;/code&gt; requires the project to be version controlled by git.&lt;/p&gt; 
&lt;h2&gt;Markdown formatting&lt;/h2&gt; 
&lt;p&gt;SwiftFormat can format Swift code blocks inside Markdown files (&lt;code&gt;.md&lt;/code&gt;). This is useful for keeping code examples in documentation, README files, and other markdown content properly formatted.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;  ### Sample README
  
  This is a nice project with lots of cool APIs to know about, including:
  
  ```swift
  func foo(
- bar: Bar,
- baaz: Baaz
+     bar: Bar,
+     baaz: Baaz
  ) -&amp;gt; Foo { ... }
  ```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To format Swift code blocks in markdown files, use the &lt;code&gt;--markdown-files&lt;/code&gt; option with either &lt;code&gt;format-strict&lt;/code&gt; or &lt;code&gt;format-lenient&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat . --markdown-files format-strict
$ swiftformat . --markdown-files format-lenient
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add it to your &lt;code&gt;.swiftformat&lt;/code&gt; config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--markdown-files format-strict
--markdown-files format-lenient
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Formatting modes:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;SwiftFormat supports two modes for handling markdown files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;format-lenient&lt;/code&gt; (default): Ignores parsing errors in code blocks and continues formatting&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;format-strict&lt;/code&gt;: Fails if any code blocks contain parsing errors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;SwiftFormat&#39;s tokenizer is more permissive than the Swift compiler and typically only emits errors when encountering unbalanced scope tokens like &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Code block options:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can specify options for options for individual code blocks by adding them after the opening delimiter. For example, you can use &lt;code&gt;no-format&lt;/code&gt; to prevent a code block from being parsed or formatted:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;```swift no-format
func example()
{
    doSomething()
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify SwiftFormat command line options to configure the behavior of individual rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;```swift --indent 2
func example() {
  doSomething()
}
```

```swift --disable redundantSelf
func example() {
    self.doSomething()
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Q. How is this different from SwiftLint?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftLint is primarily designed to find and report code smells and style violations in your code. SwiftFormat is designed to fix them. While SwiftLint can autocorrect some issues, and SwiftFormat has some support for &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;linting&lt;/a&gt;, their primary functions are different.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can SwiftFormat and SwiftLint be used together?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Absolutely! The style rules encouraged by both tools are quite similar, and SwiftFormat even fixes some style violations that SwiftLint warns about but can&#39;t currently autocorrect.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. What platforms does SwiftFormat support?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftFormat works on macOS 10.13 (High Sierra) and above, and also runs on Ubuntu Linux and Windows.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. What versions of Swift are supported?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the &lt;code&gt;--swift-version&lt;/code&gt; argument to enable additional rules specific to later Swift versions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. SwiftFormat made changes I didn&#39;t want it to. How can I find out which rules to disable?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. If you run SwiftFormat using the &lt;code&gt;--verbose&lt;/code&gt; option, it will tell you which rules were applied to each file. You can then selectively disable certain rules using the &lt;code&gt;--disable&lt;/code&gt; argument (see below).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;*Q. People on my team have different SwiftFormat versions installed. How can we ensure consistent formatting?&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can specify a &lt;code&gt;--min-version&lt;/code&gt; argument in your project&#39;s .swiftformat` file to fail the build if developers attempt to use an older SwiftFormat version.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How can I modify the formatting rules?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Many configuration options are exposed in the command-line interface or &lt;code&gt;.swiftformat&lt;/code&gt; configuration file. You can either set these manually, or use the &lt;code&gt;--infer-options&lt;/code&gt; argument to automatically generate the configuration from your existing project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If there is a rule that you don&#39;t like, and which cannot be configured to your liking via the command-line options, you can disable one or more rules by using the &lt;code&gt;--disable&lt;/code&gt; argument, followed by the name of the rules, separated by commas. You can display a list of all supported rules using the &lt;code&gt;--rules&lt;/code&gt; argument, and their behaviors are documented above this section in the README.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you are using the Xcode source editor extension, rules and options can be configured using the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; host application. Unfortunately, due to limitation of the Extensions API, there is no way to configure these on a per-project basis.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If the options you want aren&#39;t exposed, and disabling the rule doesn&#39;t solve the problem, the rules are implemented in the file &lt;code&gt;Rules.swift&lt;/code&gt;, so you can modify them and build a new version of the command-line tool. If you think your changes might be generally useful, make a pull request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Q. I don&#39;t want to be surprised by new rules added when I upgrade SwiftFormat. How can I prevent this?&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can use the &lt;code&gt;--rules&lt;/code&gt; argument to specify an exclusive list of rules to run. If new rules are added, they won&#39;t be enabled if you have specified a &lt;code&gt;--rules&lt;/code&gt; list in your SwiftFormat configuration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Why can&#39;t I set the indent width or choose between tabs/spaces in the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; options?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Indent width and tabs/spaces can be configured in Xcode on a per project-basis. You&#39;ll find the option under &quot;Text Settings&quot; in the Files inspector of the right-hand sidebar.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. After applying SwiftFormat, my code won&#39;t compile. Is that a bug?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftFormat should ideally never break your code. Check the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#known-issues&quot;&gt;known issues&lt;/a&gt;, and if it&#39;s not already listed there, or the suggested workaround doesn&#39;t solve your problem, please &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues&quot;&gt;open an issue on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can I use SwiftFormat to lint my code without changing it?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Yes, see the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;linting&lt;/a&gt; section above for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can I use the &lt;code&gt;SwiftFormat.framework&lt;/code&gt; inside another app?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Yes, the SwiftFormat framework can be included in an app or test target, and used for many kinds of parsing and processing of Swift source code besides formatting. The SwiftFormat framework is available as a &lt;a href=&quot;https://cocoapods.org/pods/SwiftFormat&quot;&gt;CocoaPod&lt;/a&gt; for easy integration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How to create own rule?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. 1) Open &lt;code&gt;SwiftFormat.xcodeproj&lt;/code&gt;; 2) Add a rule in &lt;code&gt;Sources/Rules/..&lt;/code&gt;; 3) Add a test in &lt;code&gt;Tests/Rules/..&lt;/code&gt;; 4) Add an example in &lt;code&gt;Sources/Examples.swift&lt;/code&gt;; 5) Run all tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How do I run and debug the command line tool in Xcode while developing a new rule?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can run the &lt;code&gt;swiftformat&lt;/code&gt; command line tool via the &lt;code&gt;Swift Format (Command Line Tool)&lt;/code&gt; scheme, and you can pass in arguments like &lt;code&gt;/path/to/my/code --config /path/to/my/config&lt;/code&gt; as the &lt;code&gt;Arguments Passed On Launch&lt;/code&gt; in Xcode&#39;s scheme editor. More instructions are available &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/pull/1804#issuecomment-2263079432&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Known issues&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When using the Xcode Source Editor Extension, the SwiftFormat menu sometimes disappears from Xcode. If this happens, try moving or renaming Xcode temporarily and then changing it back. Failing that, the suggestions in &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;this thread&lt;/a&gt; may help.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;enumNamespaces&lt;/code&gt; rule replaces classes that have only static members with an &lt;code&gt;enum&lt;/code&gt;. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a &lt;code&gt;// swiftformat:disable:next enumNamespaces&lt;/code&gt; comment directive above the class declaration, or you can add &lt;code&gt;--enum-namespaces structs-only&lt;/code&gt; to prevent the rule being applied to classes, or you can just disable the &lt;code&gt;enumNamespaces&lt;/code&gt; rule completely.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;redundantVoidReturnType&lt;/code&gt; rule can inadvertently alter the type signature for closures, for example in cases where the closure calls a &lt;code&gt;@discardableResult&lt;/code&gt; function. To solve this you can either fix it on a per-case basis by adding a &lt;code&gt;// swiftformat:disable:next redundantVoidReturnType&lt;/code&gt; comment directive to disable the rule for a specific call site, or you can add &lt;code&gt;--closure-void preserve&lt;/code&gt; to your &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#configuration&quot;&gt;configuration&lt;/a&gt; to disable the rule completely for closures (regular functions or methods aren&#39;t affected).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;redundantType&lt;/code&gt; rule can introduce ambiguous code in certain cases when using the default mode of &lt;code&gt;--redundant-type inferred&lt;/code&gt;. This can be worked around by by using &lt;code&gt;--redundant-type explicit&lt;/code&gt;, or by manually removing the redundant type reference on the affected line, or by using the &lt;code&gt;// swiftformat:disable:next redundantType&lt;/code&gt; comment directive to disable the rule at the call site (or just disable the &lt;code&gt;redundantType&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a type initializer or factory method returns an implicitly unwrapped optional value then the &lt;code&gt;redundantType&lt;/code&gt; rule may remove the explicit type in a situation where it&#39;s actually required. To work around this you can either use &lt;code&gt;--redundant-type explicit&lt;/code&gt;, or use the &lt;code&gt;// swiftformat:disable:next redundantType&lt;/code&gt; comment directive to disable the rule at the call site (or just disable the &lt;code&gt;redundantType&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;initCoderUnavailable&lt;/code&gt; rule, if an &lt;code&gt;init&lt;/code&gt; that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn&#39;t affect the program behavior if the init was really unused) or use the &lt;code&gt;// swiftformat:disable:next initCoderUnavailable&lt;/code&gt; comment directive to disable the rule for the overridden init (or just disable the &lt;code&gt;initCoderUnavailable&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;extensionAccessControl&lt;/code&gt; rule with the &lt;code&gt;--extension-acl on-extension&lt;/code&gt; option, if you have public methods defined on an internal type defined in another file, the resultant public extension will no longer compile. The recommended solution is to manually remove the &lt;code&gt;public&lt;/code&gt; modifier (this won&#39;t change the program behavior) or disable the &lt;code&gt;extensionAccessControl&lt;/code&gt; rule.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;preferKeyPath&lt;/code&gt; rule, conversion of &lt;code&gt;compactMap { $0.foo }&lt;/code&gt; to &lt;code&gt;compactMap(\.foo)&lt;/code&gt; or &lt;code&gt;flatMap { $0.foo }&lt;/code&gt; to &lt;code&gt;flatMap(\.foo)&lt;/code&gt; will result in code that fails to compile if &lt;code&gt;foo&lt;/code&gt; is not an &lt;code&gt;Optional&lt;/code&gt; property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed &lt;a href=&quot;https://bugs.swift.org/browse/SR-13347&quot;&gt;here&lt;/a&gt;. The recommended workaround is to replace &lt;code&gt;compactMap()&lt;/code&gt; or &lt;code&gt;flatMap()&lt;/code&gt; with &lt;code&gt;map()&lt;/code&gt; in these cases, which will not change the behavior of the code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;--self remove&lt;/code&gt; option, the &lt;code&gt;redundantSelf&lt;/code&gt; rule will remove references to &lt;code&gt;self&lt;/code&gt; in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the &lt;code&gt;--self-required&lt;/code&gt; option to provide a comma-delimited list of methods to be excluded from the rule. The &lt;code&gt;expect()&lt;/code&gt; function from the popular &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt; unit testing framework is already excluded by default. If you are using the &lt;code&gt;--self insert&lt;/code&gt; option then this is not an issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you assign &lt;code&gt;SomeClass.self&lt;/code&gt; to a variable and then instantiate an instance of the class using that variable, Swift requires that you use an explicit &lt;code&gt;.init()&lt;/code&gt;, however, the &lt;code&gt;redundantInit&lt;/code&gt; rule is not currently capable of detecting this situation in all cases, and may remove the &lt;code&gt;.init&lt;/code&gt;. To work around this issue, use the &lt;code&gt;// swiftformat:disable:next redundantInit&lt;/code&gt; comment directive to disable the rule for any affected lines of code (or just disable the &lt;code&gt;redundantInit&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;--self insert&lt;/code&gt; option can only recognize locally declared member variables, not ones inherited from superclasses or extensions in other files, so it cannot insert missing &lt;code&gt;self&lt;/code&gt; references for those. Note that the reverse is not true: &lt;code&gt;--self remove&lt;/code&gt; should remove &lt;em&gt;all&lt;/em&gt; redundant &lt;code&gt;self&lt;/code&gt; references.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;trailingClosures&lt;/code&gt; rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the &lt;code&gt;--trailing-closures&lt;/code&gt; and &lt;code&gt;--never-trailing&lt;/code&gt; arguments to explicitly opt in or out of trailing closure support for specific functions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;isEmpty&lt;/code&gt; rule will convert &lt;code&gt;count == 0&lt;/code&gt; to &lt;code&gt;isEmpty&lt;/code&gt; even for types that do not have an &lt;code&gt;isEmpty&lt;/code&gt; method, such as &lt;code&gt;NSArray&lt;/code&gt;/&lt;code&gt;NSDictionary&lt;/code&gt;/etc. Use of Foundation collections in Swift code is pretty rare, but just in case, the rule is disabled by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;preferForLoop&lt;/code&gt; rule will convert &lt;code&gt;foo.forEach&lt;/code&gt; to &lt;code&gt;for item in foo&lt;/code&gt; even for types that do not conform to the &lt;code&gt;Sequence&lt;/code&gt; protocol and cannot be used with a &lt;code&gt;for ... in&lt;/code&gt; loop. There are no such types built in, but custom types may have this issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a file begins with a comment, the &lt;code&gt;stripHeaders&lt;/code&gt; rule will remove it if it is followed by a blank line. To avoid this, make sure that the first comment is directly followed by a line of code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error &quot;dyld: Library not loaded: @rpath/libswiftCore.dylib&quot;. To fix this, you need to install the &lt;a href=&quot;https://support.apple.com/kb/DL1998&quot;&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;. These tools are included by default in macOS 10.14.4 and later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you have a generic typealias that defines a closure (e.g. &lt;code&gt;typealias ResultCompletion&amp;lt;T&amp;gt; = (Result&amp;lt;T, Error&amp;gt;) -&amp;gt; Void&lt;/code&gt;) and use this closure as an argument in a generic function (e.g. &lt;code&gt;func handle&amp;lt;T: Decodable&amp;gt;(_ completion: ResultCompletion&amp;lt;T&amp;gt;)&lt;/code&gt;), the &lt;code&gt;opaqueGenericParameters&lt;/code&gt; rule may update the function definition to use &lt;code&gt;some&lt;/code&gt; syntax (e.g. &lt;code&gt;func handle(_ completion: ResultCompletion&amp;lt;some Decodable&amp;gt;)&lt;/code&gt;). &lt;code&gt;some&lt;/code&gt; syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a &lt;code&gt;typealias&lt;/code&gt;) or disabling the &lt;code&gt;opaqueGenericParameters&lt;/code&gt; rule (e.g. with &lt;code&gt;// swiftformat:disable:next opaqueGenericParameters&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with &lt;code&gt;--swift-version 5.7&lt;/code&gt;, the &lt;code&gt;genericExtensions&lt;/code&gt; rule may cause a build failure by updating extensions of the format &lt;code&gt;extension Collection where Element == Foo&lt;/code&gt; to &lt;code&gt;extension Collection&amp;lt;Foo&amp;gt;&lt;/code&gt;. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode &lt;a href=&quot;https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171&quot;&gt;does not include&lt;/a&gt; the Swift 5.7 standard library. Workarounds include using &lt;code&gt;--swift-version 5.6&lt;/code&gt; instead, updating to Xcode 14.1+, or disabling the &lt;code&gt;genericExtensions&lt;/code&gt; rule (e.g. with &lt;code&gt;// swiftformat:disable:next genericExtensions&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with &lt;code&gt;--preserve-symbols propertyName,otherPropertyName,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases where the property&#39;s type is a protocol / existential like &lt;code&gt;let shapeStyle: ShapeStyle = .myShapeStyle&lt;/code&gt;, and the value used on the right-hand side is defined in an extension like &lt;code&gt;extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }&lt;/code&gt;. As a workaround you can use the existential &lt;code&gt;any&lt;/code&gt; syntax (&lt;code&gt;let shapeStyle: any ShapeStyle = .myShapeStyle&lt;/code&gt;), which the rule will preserve as-is, or exclude the type name and/or property name with &lt;code&gt;--preserve-symbols ShapeStyle,myShapeStyle,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases like &lt;code&gt;let foo = Foo.bar&lt;/code&gt; where the value is a static member that doesn&#39;t return the same time. For example, &lt;code&gt;let foo: Foo = .bar&lt;/code&gt; would be invalid if the &lt;code&gt;bar&lt;/code&gt; property was defined as &lt;code&gt;static var bar: Bar&lt;/code&gt;. As a workaround you can write the name of the type explicitly, like &lt;code&gt;let foo: Bar = Foo.bar&lt;/code&gt;, or exclude the type name and/or property name with &lt;code&gt;--preserve-symbols Bar,bar,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tip Jar&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is not a commercially-funded product, it&#39;s a labor of love given freely to the community. If you find it useful, please consider making a donation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=9ZGWNK5FEZFF6&amp;amp;source=url&quot;&gt;&lt;img src=&quot;https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif&quot; alt=&quot;Donate via PayPal&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/calda&quot;&gt;Cal Stephens&lt;/a&gt; - Numerous new formatting rules, options and bug fixes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tonyarnold&quot;&gt;Tony Arnold&lt;/a&gt; - SwiftFormat for Xcode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vinceburn&quot;&gt;Vincent Bernier&lt;/a&gt; - SwiftFormat for Xcode settings UI&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/markiv&quot;&gt;Vikram Kriplaney&lt;/a&gt; - SwiftFormat for Xcode icon and search feature&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hyperphonic0&quot;&gt;Hyperphonic&lt;/a&gt; - Xcode 12 compatibility for SwiftFormat&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bourvill&quot;&gt;Maxime Marinel&lt;/a&gt; - Git pre-commit hook script&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/palleas&quot;&gt;Romain Pouclet&lt;/a&gt; - Homebrew formula&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aerobounce&quot;&gt;Aerobounce&lt;/a&gt; - Homebrew cask and Sublime Text plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facumenzella&quot;&gt;Facundo Menzella&lt;/a&gt; - Several new formatting rules and options&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aliak00&quot;&gt;Ali Akhtarzada&lt;/a&gt; - Several path-related CLI enhancements&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yonaskolb&quot;&gt;Yonas Kolb&lt;/a&gt; - Swift Package Manager integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Lutzifer&quot;&gt;Wolfgang Lutz&lt;/a&gt; - AppleScript integration instructions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/balitm&quot;&gt;Balázs Kilvády&lt;/a&gt; - Xcode lint warning integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AnthonyMDev&quot;&gt;Anthony Miller&lt;/a&gt; - Improvements to wrap/indent logic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zizi4n5&quot;&gt;Shingo Takagi&lt;/a&gt; - Several brace-related bug fixes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cyberbeni&quot;&gt;Benedek Kozma&lt;/a&gt; - Lint-only rules option&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/juri&quot;&gt;Juri Pakaste&lt;/a&gt; - Filelist feature&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/puls&quot;&gt;Jim Puls&lt;/a&gt; - Big Sur icon update&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danyf90&quot;&gt;Daniele Formichelli&lt;/a&gt; - JSON reporter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bobergj&quot;&gt;Jonas Boberg&lt;/a&gt; - Github actions log reporter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/inket&quot;&gt;Mahdi Bchatnia&lt;/a&gt; - Linux build workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/compnerd&quot;&gt;Saleem Abdulrasool&lt;/a&gt; - Windows build workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vox-humana&quot;&gt;Arthur Semenyutin&lt;/a&gt; - Docker image&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoEidinger&quot;&gt;Marco Eidinger&lt;/a&gt; - Swift Package Manager plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hampustagerud&quot;&gt;Hampus Tågerud&lt;/a&gt; - Git integration for fileHeader rule&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood&quot;&gt;Nick Lockwood&lt;/a&gt; - Everything else&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/graphs/contributors&quot;&gt;Full list of contributors&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/CopilotForXcode</title>
      <link>https://github.com/github/CopilotForXcode</link>
      <description>&lt;p&gt;Xcode extension for GitHub Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;center&quot; height=&quot;70&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/AppIcon.png&quot; /&gt; GitHub Copilot for Xcode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; is an AI pair programmer tool that helps you write code faster and smarter. Copilot for Xcode is an Xcode extension that provides inline coding suggestions as you type and a chat assistant to answer your coding questions.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Chat provides suggestions to your specific coding tasks via chat. &lt;img alt=&quot;Chat of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/chat_dark.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Agent Mode&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Agent Mode provides AI-powered assistance that can understand and modify your codebase directly. With Agent Mode, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get intelligent code edits applied directly to your files&lt;/li&gt; 
 &lt;li&gt;Run terminal commands and view their output without leaving the interface&lt;/li&gt; 
 &lt;li&gt;Search through your codebase to find relevant files and code snippets&lt;/li&gt; 
 &lt;li&gt;Create new files and directories as needed for your project&lt;/li&gt; 
 &lt;li&gt;Get assistance with enhanced context awareness across multiple files and folders&lt;/li&gt; 
 &lt;li&gt;Run Model Context Protocol (MCP) tools you configured to extend the capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Agent Mode integrates with Xcode&#39;s environment, creating a seamless development experience where Copilot can help implement features, fix bugs, and refactor code with comprehensive understanding of your project.&lt;/p&gt; 
&lt;h2&gt;Code Completion&lt;/h2&gt; 
&lt;p&gt;You can receive auto-complete type suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do. &lt;img alt=&quot;Code Completion of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/demo.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12+&lt;/li&gt; 
 &lt;li&gt;Xcode 8+&lt;/li&gt; 
 &lt;li&gt;A GitHub Copilot subscription. To learn more, visit &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;https://github.com/features/copilot&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask github-copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or download the &lt;code&gt;dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/github/CopilotForXcode/releases/latest/download/GitHubCopilotForXcode.dmg&quot;&gt;the latest release&lt;/a&gt;. Drag &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; into the &lt;code&gt;Applications&lt;/code&gt; folder:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of opened dmg&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/dmg-open.png&quot; width=&quot;512&quot; /&gt; &lt;/p&gt; &lt;p&gt;Updates can be downloaded and installed by the app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application (from the &lt;code&gt;Applications&lt;/code&gt; folder). Accept the security warning.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of MacOS download permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/macos-download-open-confirm.png&quot; width=&quot;350&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A background item will be added to enable the GitHub Copilot for Xcode extension app to connect to the host app. This permission is usually automatically added when first launching the app.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of background item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/background-item.png&quot; width=&quot;370&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Three permissions are required for GitHub Copilot for Xcode to function properly: &lt;code&gt;Background&lt;/code&gt;, &lt;code&gt;Accessibility&lt;/code&gt;, and &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt;. For more details on why these permissions are required see &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/TROUBLESHOOTING.md&quot;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The first time the application is run the &lt;code&gt;Accessibility&lt;/code&gt; permission should be requested:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of accessibility permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/accessibility-permission-request.png&quot; width=&quot;529&quot; /&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt; permission needs to be enabled manually. Click &lt;code&gt;Extension Permission&lt;/code&gt; from the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application settings to open the System Preferences to the &lt;code&gt;Extensions&lt;/code&gt; panel. Select &lt;code&gt;Xcode Source Editor&lt;/code&gt; and enable &lt;code&gt;GitHub Copilot&lt;/code&gt;:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of extension permission&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/extension-permission.png&quot; width=&quot;582&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After granting the extension permission, open Xcode. Verify that the &lt;code&gt;Github Copilot&lt;/code&gt; menu is available and enabled under the Xcode &lt;code&gt;Editor&lt;/code&gt; menu. &lt;br /&gt;&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; &lt;p&gt;Keyboard shortcuts can be set for all menu items in the &lt;code&gt;Key Bindings&lt;/code&gt; section of Xcode preferences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To sign into GitHub Copilot, click the &lt;code&gt;Sign in&lt;/code&gt; button in the settings application. This will open a browser window and copy a code to the clipboard. Paste the code into the GitHub login page and authorize the application.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of sign-in popup&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/device-code.png&quot; width=&quot;372&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install updates, click &lt;code&gt;Check for Updates&lt;/code&gt; from the menu item or in the settings application.&lt;/p&gt; &lt;p&gt;After installing a new version, Xcode must be restarted to use the new version correctly.&lt;/p&gt; &lt;p&gt;New versions can also be installed from &lt;code&gt;dmg&lt;/code&gt; files downloaded from the releases page. When installing a new version via &lt;code&gt;dmg&lt;/code&gt;, the application must be run manually the first time to accept the downloaded from the internet warning.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To avoid confusion, we recommend disabling &lt;code&gt;Predictive code completion&lt;/code&gt; under &lt;code&gt;Xcode&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Text Editing&lt;/code&gt; &amp;gt; &lt;code&gt;Editing&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to use Chat&lt;/h2&gt; 
&lt;p&gt;Open Copilot Chat in GitHub Copilot.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via the Xcode menu &lt;code&gt;Xcode -&amp;gt; Editor -&amp;gt; GitHub Copilot -&amp;gt; Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/xcode-menu_dark.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via GitHub Copilot app menu &lt;code&gt;Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/copilot-menu_dark.png&quot; width=&quot;244&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;How to use Code Completion&lt;/h2&gt; 
&lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for the full terms.&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;We follow responsible practices in accordance with our &lt;a href=&quot;https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get the latest security fixes, please use the latest version of the GitHub Copilot for Xcode.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;We’d love to get your help in making GitHub Copilot better! If you have feedback or encounter any problems, please reach out on our &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Feedback forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thank you to @intitni for creating the original project that this is based on.&lt;/p&gt; 
&lt;p&gt;Attributions can be found under About when running the app or in &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Copilot%20for%20Xcode/Credits.rtf&quot;&gt;Credits.rtf&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>farzaa/freewrite</title>
      <link>https://github.com/farzaa/freewrite</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hi, this is freewrite&lt;/h1&gt; 
&lt;p&gt;a simple, open-source mac app to freewrite.&lt;/p&gt; 
&lt;p&gt;download latest version &lt;a href=&quot;https://www.freewrite.io/&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2ucbtff.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;if you wanna make an addition + pr, or just wanna remix the app for yourself go for it.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;clone repo.&lt;/li&gt; 
 &lt;li&gt;open in xcode.&lt;/li&gt; 
 &lt;li&gt;click build.&lt;/li&gt; 
 &lt;li&gt;done -- you&#39;re up and running.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;make changes on a pr and i&#39;ll run on my end and then build a new version :).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/facebook-ios-sdk</title>
      <link>https://github.com/facebook/facebook-ios-sdk</link>
      <description>&lt;p&gt;Used to integrate the Facebook Platform with your iOS &amp; tvOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Facebook SDK for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/FBSDKCoreKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/FBSDKCoreKit.svg?sanitize=true&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main.svg?style=shield&quot; alt=&quot;circleci&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/FBSDKCoreKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/FBSDKCoreKit.svg?sanitize=true&quot; alt=&quot;CocoaPods&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This open-source library allows you to integrate Facebook into your iOS app.&lt;/p&gt; 
&lt;p&gt;Learn more about the provided samples, documentation, integrating the SDK into your app, accessing source code, and more at &lt;a href=&quot;https://developers.facebook.com/docs/ios&quot;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please take a moment and &lt;a href=&quot;https://docs.github.com/en/enterprise/2.15/user/articles/watching-and-unwatching-repositories&quot;&gt;subscribe to releases&lt;/a&gt; so that you can be notified about new features, deprecations, and critical fixes. To see information about the latest release, consult our &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;span&gt;⚠&lt;/span&gt; Be Advised &lt;span&gt;⚠&lt;/span&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;p&gt;We have begun rewriting the iOS SDK in Swift in order to modernize the code base.&lt;/p&gt;&lt;p&gt;Please monitor the changelog for updates to existing interfaces but keep in mind that some interfaces will be unstable during this process. As such, updating to a minor version may introduce compilation issues related to language interoperability. Using symbols now defined in Swift may require using &lt;code&gt;@import&lt;/code&gt; syntax from Objective-C and using C++ will likely require workarounds like creating wrappers in Objective-C.&lt;/p&gt;Please bear with us as we work towards providing an improved experience for integrating with the Facebook platform.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;TRY IT OUT&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;In Xcode, select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency.&lt;/li&gt; 
 &lt;li&gt;Follow the prompts using the URL for this repository&lt;/li&gt; 
 &lt;li&gt;Select the &lt;code&gt;Facebook&lt;/code&gt;-prefixed libraries you want to use&lt;/li&gt; 
 &lt;li&gt;Check-out the tutorials available online at: &lt;a href=&quot;https://developers.facebook.com/docs/ios/getting-started&quot;&gt;https://developers.facebook.com/docs/ios/getting-started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Start coding! Visit &lt;a href=&quot;https://developers.facebook.com/docs/ios&quot;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt; for tutorials and reference documentation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;iOS 14 CHANGES&lt;/h2&gt; 
&lt;h3&gt;Data Disclosure&lt;/h3&gt; 
&lt;p&gt;Due to the release of iOS 14, tracking events that your app collects and sends to Facebook may require you to disclosed these data types in the App Store Connect questionnaire. It is your responsibility to ensure this is reflected in your application’s privacy policy. Visit our blogpost for information on affected Facebook SDKs, APIs, and products and the Apple App Store Privacy Details article to learn more about the data types you will need to disclose.&lt;/p&gt; 
&lt;p&gt;link to FB blogpost &lt;a href=&quot;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&quot;&gt;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;apple store details &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;https://developer.apple.com/app-store/app-privacy-details/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FEATURES&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Login - &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login&quot;&gt;https://developers.facebook.com/docs/facebook-login&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Sharing - &lt;a href=&quot;https://developers.facebook.com/docs/sharing&quot;&gt;https://developers.facebook.com/docs/sharing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;App Links - &lt;a href=&quot;https://developers.facebook.com/docs/applinks&quot;&gt;https://developers.facebook.com/docs/applinks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Graph API - &lt;a href=&quot;https://developers.facebook.com/docs/ios/graph&quot;&gt;https://developers.facebook.com/docs/ios/graph&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Analytics - &lt;a href=&quot;https://developers.facebook.com/docs/analytics&quot;&gt;https://developers.facebook.com/docs/analytics&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;GIVE FEEDBACK&lt;/h2&gt; 
&lt;p&gt;Please report bugs or issues to our designated developer support team -- &lt;a href=&quot;https://developers.facebook.com/support/bugs/&quot;&gt;https://developers.facebook.com/support/bugs/&lt;/a&gt; -- as this will help us resolve them more quickly.&lt;/p&gt; 
&lt;p&gt;You can also visit our &lt;a href=&quot;https://developers.facebook.com/community/&quot;&gt;Facebook Developer Community Forum&lt;/a&gt;, join the &lt;a href=&quot;https://www.facebook.com/groups/fbdevelopers/&quot;&gt;Facebook Developers Group on Facebook&lt;/a&gt;, ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/facebook-ios-sdk&quot;&gt;Stack Overflow&lt;/a&gt;, or open an issue in this repository.&lt;/p&gt; 
&lt;h2&gt;CONTRIBUTE&lt;/h2&gt; 
&lt;p&gt;Facebook welcomes contributions to our SDKs. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Copyright © Meta Platforms, Inc&lt;/p&gt; 
&lt;h2&gt;SECURITY POLICY&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/SECURITY.md&quot;&gt;SECURITY POLICY&lt;/a&gt; for more info on our bug bounty program.&lt;/p&gt; 
&lt;h2&gt;DEVELOPER TERMS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;By enabling Facebook integrations, including through this SDK, you can share information with Facebook, including information about people’s use of your app. Facebook will use information received in accordance with our &lt;a href=&quot;https://www.facebook.com/about/privacy/&quot;&gt;Data Use Policy&lt;/a&gt;, including to provide you with insights about the effectiveness of your ads and the use of your app. These integrations also enable us and our partners to serve ads on and off Facebook.&lt;/li&gt; 
 &lt;li&gt;You may limit your sharing of information with us by updating the Insights control in the developer tool &lt;code&gt;https://developers.facebook.com/apps/{app_id}/settings/advanced&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you use a Facebook integration, including to share information with us, you agree and confirm that you have provided appropriate and sufficiently prominent notice to and obtained the appropriate consent from your users regarding such collection, use, and disclosure (including, at a minimum, through your privacy policy). You further agree that you will not share information with us about children under the age of 13.&lt;/li&gt; 
 &lt;li&gt;You agree to comply with all applicable laws and regulations and also agree to our Terms &lt;a href=&quot;https://www.facebook.com/policies/&quot;&gt;https://www.facebook.com/policies/&lt;/a&gt;, including our Platform Policies &lt;a href=&quot;https://developers.facebook.com/policy/&quot;&gt;https://developers.facebook.com/policy/&lt;/a&gt; and Advertising Guidelines, as applicable &lt;a href=&quot;https://www.facebook.com/ad_guidelines.php&quot;&gt;https://www.facebook.com/ad_guidelines.php&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By using the Facebook SDK for iOS you agree to these terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>exelban/stats</title>
      <link>https://github.com/exelban/stats</link>
      <description>&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://github.com/exelban/stats/raw/master/Stats/Supporting%20Files/Assets.xcassets/AppIcon.appiconset/icon_256x256.png&quot; width=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/menus%3Fv2.3.2.png?v1&quot; alt=&quot;Stats&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/exelban/stats/releases&quot;&gt;&lt;img src=&quot;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/popups%3Fv2.3.2.png?v3&quot; alt=&quot;Stats&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You can download the latest version &lt;a href=&quot;https://github.com/exelban/stats/releases/latest/download/Stats.dmg&quot;&gt;here&lt;/a&gt;. This will download a file called &lt;code&gt;Stats.dmg&lt;/code&gt;. Open it and move the app to the application folder.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;To install it using Homebrew, open the Terminal app and type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install stats
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Legacy version&lt;/h3&gt; 
&lt;p&gt;Legacy version for older systems could be found &lt;a href=&quot;https://mac-stats.com/downloads&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Stats is supported on the released macOS version starting from macOS 10.15 (Catalina).&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Stats is an application that allows you to monitor your macOS system.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU utilization&lt;/li&gt; 
 &lt;li&gt;GPU utilization&lt;/li&gt; 
 &lt;li&gt;Memory usage&lt;/li&gt; 
 &lt;li&gt;Disk utilization&lt;/li&gt; 
 &lt;li&gt;Network usage&lt;/li&gt; 
 &lt;li&gt;Battery level&lt;/li&gt; 
 &lt;li&gt;Fan&#39;s control (not maintained)&lt;/li&gt; 
 &lt;li&gt;Sensors information (Temperature/Voltage/Power)&lt;/li&gt; 
 &lt;li&gt;Bluetooth devices&lt;/li&gt; 
 &lt;li&gt;Multiple time zone clock&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;h3&gt;How do you change the order of the menu bar icons?&lt;/h3&gt; 
&lt;p&gt;macOS decides the order of the menu bar items not &lt;code&gt;Stats&lt;/code&gt; - it may change after the first reboot after installing Stats.&lt;/p&gt; 
&lt;p&gt;To change the order of any menu bar icon - macOS Mojave (version 10.14) and up.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Hold down ⌘ (command key).&lt;/li&gt; 
 &lt;li&gt;Drag the icon to the desired position on the menu bar.&lt;/li&gt; 
 &lt;li&gt;Release ⌘ (command key)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How to reduce energy impact or CPU usage of Stats?&lt;/h3&gt; 
&lt;p&gt;Stats tries to be efficient as it&#39;s possible. But reading some data periodically is not a cheap task. Each module has its own &quot;price&quot;. So, if you want to reduce energy impact from the Stats you need to disable some Stats modules. The most inefficient modules are Sensors and Bluetooth. Disabling these modules could reduce CPU usage and power efficiency by up to 50% in some cases.&lt;/p&gt; 
&lt;h3&gt;Fan control&lt;/h3&gt; 
&lt;p&gt;Fan control is in legacy mode. It does not receive any updates or fixes. It&#39;s not dropped from the app just because in the old Macs it works pretty acceptable. I&#39;m open to accepting fixed or improvements (via PR) for this feature in case someone would like to help with that. But have no option and time to provide support for this feature.&lt;/p&gt; 
&lt;h3&gt;Sensors show incorrect CPU/GPU core count&lt;/h3&gt; 
&lt;p&gt;CPU/GPU sensors are simply thermal zones (sensors) on the CPU/GPU. They have no relation to the number of cores or specific cores. For example, a CPU is typically divided into two clusters: efficiency and performance. Each cluster contains multiple temperature sensors, and Stats simply displays these sensors. However, &quot;CPU Efficient Core 1&quot; does not represent the temperature of a single efficient core—it only indicates one of the temperature sensors within the efficiency core cluster. Additionally, with each new SoC, Apple changes the sensor keys. As a result, it takes time to determine which SMC values correspond to the appropriate sensors. If anyone knows how to accurately match the sensors for Apple Silicon, please contact me.&lt;/p&gt; 
&lt;h3&gt;App crash – what to do?&lt;/h3&gt; 
&lt;p&gt;First, ensure that you are using the latest version of Stats. There is a high chance that a fix preventing the crash has already been released. If you are already running the latest version, check the open issues. Only if none of the existing issues address your problem should you open a new issue.&lt;/p&gt; 
&lt;h3&gt;Why my issue was closed without any response?&lt;/h3&gt; 
&lt;p&gt;Most probably because it&#39;s a duplicated issue and there is an answer to the question, report, or proposition. Please use a search by closed issues to get an answer. So, if your issue was closed without any response, most probably it already has a response.&lt;/p&gt; 
&lt;h3&gt;External API&lt;/h3&gt; 
&lt;p&gt;Stats uses some external APIs, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.mac-stats.com&quot;&gt;https://api.mac-stats.com&lt;/a&gt; – For update checks and retrieving the public IP address&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.github.com&quot;&gt;https://api.github.com&lt;/a&gt; – Fallback for update checks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both of these APIs are used to check for updates. Additionally, an external request is required to obtain the public IP address. I do not want to use any third-party providers for retrieving the public IP address, so I use my own server for this purpose.&lt;/p&gt; 
&lt;p&gt;If you have concerns about these requests, you have a few options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;propose a PR that allows these features to work without an external server&lt;/li&gt; 
 &lt;li&gt;block both of these servers using any network filtering app (if you&#39;re reading this, you&#39;re likely using something like Little Snitch, so you can easily do this). In this case do not expect to receive any updates or see your public IP in the network module.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Polski&lt;/li&gt; 
 &lt;li&gt;Українська&lt;/li&gt; 
 &lt;li&gt;Русский&lt;/li&gt; 
 &lt;li&gt;中文 (简体) (thanks to &lt;a href=&quot;https://github.com/chenguokai&quot;&gt;chenguokai&lt;/a&gt;, &lt;a href=&quot;https://github.com/Tai-Zhou&quot;&gt;Tai-Zhou&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Jerry23011&quot;&gt;Jerry&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Türkçe (thanks to &lt;a href=&quot;https://github.com/yusufozgul&quot;&gt;yusufozgul&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;한국어 (thanks to &lt;a href=&quot;https://github.com/escapeanaemia&quot;&gt;escapeanaemia&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamhslee&quot;&gt;iamhslee&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;German (thanks to &lt;a href=&quot;https://github.com/natterstefan&quot;&gt;natterstefan&lt;/a&gt; and &lt;a href=&quot;https://github.com/aneitel&quot;&gt;aneitel&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;中文 (繁體) (thanks to &lt;a href=&quot;https://github.com/iamch15542&quot;&gt;iamch15542&lt;/a&gt; and &lt;a href=&quot;https://github.com/jrthsr700tmax&quot;&gt;jrthsr700tmax&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Spanish (thanks to &lt;a href=&quot;https://github.com/jcconca&quot;&gt;jcconca&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Vietnamese (thanks to &lt;a href=&quot;https://github.com/xuandung38&quot;&gt;HXD.VN&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;French (thanks to &lt;a href=&quot;https://github.com/RomainLt&quot;&gt;RomainLt&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Italian (thanks to &lt;a href=&quot;https://github.com/gmcinalli&quot;&gt;gmcinalli&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Portuguese (Brazil) (thanks to &lt;a href=&quot;https://github.com/marcelochaves95&quot;&gt;marcelochaves95&lt;/a&gt; and &lt;a href=&quot;https://github.com/pedroserigatto&quot;&gt;pedroserigatto&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Norwegian Bokmål (thanks to &lt;a href=&quot;https://github.com/rubjo&quot;&gt;rubjo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;日本語 (thanks to &lt;a href=&quot;https://github.com/treastrain&quot;&gt;treastrain&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Portuguese (Portugal) (thanks to &lt;a href=&quot;https://github.com/AdamModus&quot;&gt;AdamModus&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Czech (thanks to &lt;a href=&quot;https://github.com/mpl75&quot;&gt;mpl75&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Magyar (thanks to &lt;a href=&quot;https://github.com/moriczr&quot;&gt;moriczr&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Bulgarian (thanks to &lt;a href=&quot;https://github.com/zbrox&quot;&gt;zbrox&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Romanian (thanks to &lt;a href=&quot;https://github.com/razluta&quot;&gt;razluta&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Dutch (thanks to &lt;a href=&quot;https://github.com/ngohungphuc&quot;&gt;ngohungphuc&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hrvatski (thanks to &lt;a href=&quot;https://github.com/milotype&quot;&gt;milotype&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Danish (thanks to &lt;a href=&quot;https://github.com/casperes1996&quot;&gt;casperes1996&lt;/a&gt; and &lt;a href=&quot;https://github.com/aleksanderbl29&quot;&gt;aleksanderbl29&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Catalan (thanks to &lt;a href=&quot;https://github.com/davidalonso&quot;&gt;davidalonso&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Indonesian (thanks to &lt;a href=&quot;https://github.com/yooody&quot;&gt;yooody&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hebrew (thanks to &lt;a href=&quot;https://github.com/BadSugar&quot;&gt;BadSugar&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Slovenian (thanks to &lt;a href=&quot;https://github.com/zigapovhe&quot;&gt;zigapovhe&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Greek (thanks to &lt;a href=&quot;https://github.com/sudoxcess&quot;&gt;sudoxcess&lt;/a&gt; and &lt;a href=&quot;https://github.com/vaionicle&quot;&gt;vaionicle&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Persian (thanks to &lt;a href=&quot;https://github.com/ShawnAlisson&quot;&gt;ShawnAlisson&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Slovenský (thanks to &lt;a href=&quot;https://github.com/martinbernat&quot;&gt;martinbernat&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Thai (thanks to &lt;a href=&quot;https://github.com/apiphoomchu&quot;&gt;apiphoomchu&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Estonian (thanks to &lt;a href=&quot;https://github.com/postylem&quot;&gt;postylem&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Hindi (thanks to &lt;a href=&quot;https://github.com/patiljignesh&quot;&gt;patiljignesh&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Finnish (thanks to &lt;a href=&quot;https://github.com/eightscrow&quot;&gt;eightscrow&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can help by adding a new language or improving the existing translation.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/exelban/stats/raw/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SnapKit/SnapKit</title>
      <link>https://github.com/SnapKit/SnapKit</link>
      <description>&lt;p&gt;A Swift Autolayout DSL for iOS &amp; OS X&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://snapkit.github.io/SnapKit/images/banner.jpg&quot; alt=&quot;&quot; /&gt; 
&lt;p&gt;SnapKit is a DSL to make Auto Layout easy on both iOS and OS X.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/SnapKit/SnapKit&quot;&gt;&lt;img src=&quot;https://travis-ci.org/SnapKit/SnapKit.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/SnapKit/SnapKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/SnapKit.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/SnapKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/SnapKit.svg?sanitize=true&quot; alt=&quot;Cocoapods Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 4.x please ensure you are using &amp;gt;= 4.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; 
&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 5.x please ensure you are using &amp;gt;= 5.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#communication&quot;&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 12.0+ / Mac OS X 10.13+ / tvOS 10.0+&lt;/li&gt; 
 &lt;li&gt;Xcode 10.0+&lt;/li&gt; 
 &lt;li&gt;Swift 4.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration Guides&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/Documentation/SnapKit%203.0%20Migration%20Guide.md&quot;&gt;SnapKit 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/snapkit&quot;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;snapkit&#39;)&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/snapkit&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install cocoapods
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;CocoaPods 1.1.0+ is required to build SnapKit 4.0.0+.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To integrate SnapKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;12.0&#39;
use_frameworks!

target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do
    pod &#39;SnapKit&#39;, &#39;~&amp;gt; 5.7.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; 
&lt;p&gt;You can install Carthage with &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew update
$ brew install carthage
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To integrate SnapKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;SnapKit/SnapKit&quot; ~&amp;gt; 5.0.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;SnapKit.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It’s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Xcode 11+ is required to build SnapKit using Swift Package Manager.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To integrate SnapKit into your Xcode project using Swift Package Manager, add it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/SnapKit/SnapKit.git&quot;, .upToNextMajor(from: &quot;5.0.1&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;p&gt;If you prefer not to use either of the aforementioned dependency managers, you can integrate SnapKit into your project manually.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SnapKit

class MyViewController: UIViewController {

    lazy var box = UIView()

    override func viewDidLoad() {
        super.viewDidLoad()

        self.view.addSubview(box)
        box.backgroundColor = .green
        box.snp.makeConstraints { (make) -&amp;gt; Void in
           make.width.height.equalTo(50)
           make.center.equalTo(self.view)
        }
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Playground&lt;/h3&gt; 
&lt;p&gt;You can try SnapKit in Playground.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To try SnapKit in playground, open &lt;code&gt;SnapKit.xcworkspace&lt;/code&gt; and build SnapKit.framework for any simulator first.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://snapkit.github.io/SnapKit/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://snapkit.github.io/SnapKit/faq/&quot;&gt;F.A.Q.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Robert Payne (&lt;a href=&quot;https://twitter.com/robertjpayne&quot;&gt;@robertjpayne&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Many other contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SnapKit is released under the MIT license. See LICENSE for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p0deje/Maccy</title>
      <link>https://github.com/p0deje/Maccy</link>
      <description>&lt;p&gt;Lightweight clipboard manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img width=&quot;128px&quot; src=&quot;https://maccy.app/img/maccy/Logo.png&quot; alt=&quot;Logo&quot; align=&quot;left&quot; /&gt; 
&lt;h1&gt;&lt;a href=&quot;https://maccy.app&quot;&gt;Maccy&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/p0deje/Maccy/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/p0deje/Maccy/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.bitrise.io/app/716921b669780314&quot;&gt;&lt;img src=&quot;https://img.shields.io/bitrise/716921b669780314/master?token=3pMiCb5dpFzlO-7jTYtO3Q&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Maccy is a lightweight clipboard manager for macOS. It keeps the history of what you copy and lets you quickly navigate, search, and use previous clipboard contents.&lt;/p&gt; 
&lt;p&gt;Maccy works on macOS Sonoma 14 or higher.&lt;/p&gt; 
&lt;!-- vim-markdown-toc GFM --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#advanced&quot;&gt;Advanced&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-copied-items&quot;&gt;Ignore Copied Items&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-custom-copy-types&quot;&gt;Ignore Custom Copy Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#speed-up-clipboard-check-interval&quot;&gt;Speed up Clipboard Check Interval&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#faq&quot;&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#why-doesnt-it-paste-when-i-select-an-item-in-history&quot;&gt;Why doesn&#39;t it paste when I select an item in history?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#when-assigning-a-hotkey-to-open-maccy-it-says-that-this-hotkey-is-already-used-in-some-system-setting&quot;&gt;When assigning a hotkey to open Maccy, it says that this hotkey is already used in some system setting.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#how-to-restore-hidden-footer&quot;&gt;How to restore hidden footer?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#how-to-ignore-copies-from-universal-clipboard&quot;&gt;How to ignore copies from Universal Clipboard?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#my-keyboard-shortcut-stopped-working-in-password-fields-how-do-i-fix-this&quot;&gt;My keyboard shortcut stopped working in password fields. How do I fix this?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim-markdown-toc --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightweight and fast&lt;/li&gt; 
 &lt;li&gt;Keyboard-first&lt;/li&gt; 
 &lt;li&gt;Secure and private&lt;/li&gt; 
 &lt;li&gt;Native UI&lt;/li&gt; 
 &lt;li&gt;Open source and free&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Download the latest version from the &lt;a href=&quot;https://github.com/p0deje/Maccy/releases/latest&quot;&gt;releases&lt;/a&gt; page, or use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install maccy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to popup Maccy or click on its icon in the menu bar.&lt;/li&gt; 
 &lt;li&gt;Type what you want to find.&lt;/li&gt; 
 &lt;li&gt;To select the history item you wish to copy, press &lt;kbd&gt;ENTER&lt;/kbd&gt;, or click the item, or use &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To choose the history item and paste, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To choose the history item and paste without formatting, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To delete the history item, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;To see the full text of the history item, wait a couple of seconds for tooltip.&lt;/li&gt; 
 &lt;li&gt;To pin the history item so that it remains on top of the list, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt;. The item will be moved to the top with a random but permanent keyboard shortcut. To unpin it, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; again.&lt;/li&gt; 
 &lt;li&gt;To clear all unpinned items, select &lt;em&gt;Clear&lt;/em&gt; in the menu, or press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;. To clear all items including pinned, select &lt;em&gt;Clear&lt;/em&gt; in the menu with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed, or press &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;To disable Maccy and ignore new copies, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed.&lt;/li&gt; 
 &lt;li&gt;To ignore only the next copy, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/li&gt; 
 &lt;li&gt;To customize the behavior, check &quot;Preferences…&quot; window, or press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Advanced&lt;/h2&gt; 
&lt;h3&gt;Ignore Copied Items&lt;/h3&gt; 
&lt;p&gt;You can tell Maccy to ignore all copied items:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy ignoreEvents true # default is false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is useful if you have some workflow for copying sensitive data. You can set &lt;code&gt;ignoreEvents&lt;/code&gt; to true, copy the data and set &lt;code&gt;ignoreEvents&lt;/code&gt; back to false.&lt;/p&gt; 
&lt;p&gt;You can also click the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed. To ignore only the next copy, click with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/p&gt; 
&lt;h3&gt;Ignore Custom Copy Types&lt;/h3&gt; 
&lt;p&gt;By default Maccy will ignore certain copy types that are considered to be confidential or temporary. The default list always include the following types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.TransientType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.ConcealedType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.AutoGeneratedType&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Also, default configuration includes the following types but they can be removed or overwritten:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;com.agilebits.onepassword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;com.typeit4me.clipping&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;de.petermaurer.TransientPasteboardType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Pasteboard generator type&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;net.antelle.keeweb&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can add additional custom types using settings. To find what custom types are used by an application, you can use free application &lt;a href=&quot;https://github.com/sindresorhus/Pasteboard-Viewer&quot;&gt;Pasteboard-Viewer&lt;/a&gt;. Simply download the application, open it, copy something from the application you want to ignore and look for any custom types in the left sidebar. &lt;a href=&quot;https://github.com/p0deje/Maccy/issues/125&quot;&gt;Here is an example of using this approach to ignore Adobe InDesign&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Speed up Clipboard Check Interval&lt;/h3&gt; 
&lt;p&gt;By default, Maccy checks clipboard every 500 ms, which should be enough for most users. If you want to speed it up, you can change it with &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy clipboardCheckInterval 0.1 # 100 ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Why doesn&#39;t it paste when I select an item in history?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure you have &quot;Paste automatically&quot; enabled in Preferences.&lt;/li&gt; 
 &lt;li&gt;Make sure &quot;Maccy&quot; is added to System Settings -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Accessibility.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;When assigning a hotkey to open Maccy, it says that this hotkey is already used in some system setting.&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open System settings -&amp;gt; Keyboard -&amp;gt; Keyboard Shortcuts.&lt;/li&gt; 
 &lt;li&gt;Find where that hotkey is used. For example, &quot;Convert text to simplified Chinese&quot; is under Services -&amp;gt; Text.&lt;/li&gt; 
 &lt;li&gt;Disable that hotkey or remove assigned combination (&lt;a href=&quot;https://github.com/p0deje/Maccy/assets/576152/446719e6-c3e5-4eb0-95fb-5a811066487f&quot;&gt;screenshot&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Restart Maccy.&lt;/li&gt; 
 &lt;li&gt;Assign hotkey in Maccy settings.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How to restore hidden footer?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Maccy window.&lt;/li&gt; 
 &lt;li&gt;Press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt; to open preferences.&lt;/li&gt; 
 &lt;li&gt;Enable footer in Appearance section.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If for some reason it doesn&#39;t work, run the following command in Terminal.app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy showFooter 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How to ignore copies from &lt;a href=&quot;https://support.apple.com/en-us/102430&quot;&gt;Universal Clipboard&lt;/a&gt;?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Preferences -&amp;gt; Ignore -&amp;gt; Pasteboard Types.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;com.apple.is-remote-clipboard&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;My keyboard shortcut stopped working in password fields. How do I fix this?&lt;/h3&gt; 
&lt;p&gt;If your shortcut produces a character (like &lt;code&gt;Option+C&lt;/code&gt; → &quot;ç&quot;), macOS security may block it in password fields. Use &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner-Elements&lt;/a&gt; to remap your shortcut to a different combination like &lt;code&gt;Cmd+Shift+C&lt;/code&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/docs/keyboard-shortcut-password-fields.md&quot;&gt;See detailed solution&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The translations are hosted in &lt;a href=&quot;https://hosted.weblate.org/engage/maccy/&quot;&gt;Weblate&lt;/a&gt;. You can use it to suggest changes in translations and localize the application to a new language.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hosted.weblate.org/engage/maccy/&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widget/maccy/multi-auto.svg?sanitize=true&quot; alt=&quot;Translation status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;There are dozens of similar applications out there, so why build another? Over the past years since I moved from Linux to macOS, I struggled to find a clipboard manager that is as free and simple as &lt;a href=&quot;http://parcellite.sourceforge.net&quot;&gt;Parcellite&lt;/a&gt;, but I couldn&#39;t. So I&#39;ve decided to build one.&lt;/p&gt; 
&lt;p&gt;Also, I wanted to learn Swift and get acquainted with macOS application development.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>whoeevee/EeveeSpotify</title>
      <link>https://github.com/whoeevee/EeveeSpotify</link>
      <description>&lt;p&gt;A tweak to get Spotify Premium for free, just like Spotilife&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/banner.png?&quot; alt=&quot;Banner&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;EeveeSpotify&lt;/h1&gt; 
&lt;p&gt;This tweak makes Spotify think you have a Premium subscription, granting free listening, just like Spotilife, and provides some additional features like custom lyrics.&lt;/p&gt; 
&lt;h2&gt;The History&lt;/h2&gt; 
&lt;p&gt;In January 2024, Spotilife, the only tweak to get Spotify Premium, stopped working on new Spotify versions. I decompiled Spotilife, reverse-engineered Spotify, intercepted requests, etc., and created this tweak.&lt;/p&gt; 
&lt;h2&gt;Repositories&lt;/h2&gt; 
&lt;p&gt;You can add an official EeveeSpotify repository to your signing app to always stay up to date. See &lt;a href=&quot;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Repositories&quot;&gt;Repositories&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Restrictions&lt;/h2&gt; 
&lt;p&gt;Please refrain from opening issues about the following features, as they are server-sided and will &lt;strong&gt;NEVER&lt;/strong&gt; work:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Very High audio quality&lt;/li&gt; 
 &lt;li&gt;Native playlist downloading (you can download podcast episodes though)&lt;/li&gt; 
 &lt;li&gt;Jam (hosting a Spotify Jam and joining it remotely requires Premium; only joining in-person works)&lt;/li&gt; 
 &lt;li&gt;AI DJ/Playlist&lt;/li&gt; 
 &lt;li&gt;Spotify Connect (When using Spotify Connect, the device will act as a remote control and stream directly to the connected device. This is a server-sided limitation and is beyond the control of EeveeSpotify, so it will behave as if you have a Free subscription while using this feature.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It&#39;s possible to implement downloading locally, but it will never be included in EeveeSpotify (unless someone opens a pull request).&lt;/p&gt; 
&lt;h2&gt;Lyrics Support&lt;/h2&gt; 
&lt;p&gt;EeveeSpotify replaces Spotify monthly limited lyrics with one of the following four lyrics providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Genius: Offers the best quality lyrics, provides the most songs, and updates lyrics the fastest. Does not and will never be time-synced.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;LRCLIB: The most open service, offering time-synced lyrics. However, it lacks lyrics for many songs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Musixmatch: The service Spotify uses. Provides time-synced lyrics for many songs, but you&#39;ll need a user token to use this source. To obtain the token, download Musixmatch from the App Store, sign up, then go to Settings &amp;gt; Get help &amp;gt; Copy debug info, and paste it into EeveeSpotify alert. You can also extract the token using MITM.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PetitLyrics: Offers plenty of time-synced Japanese and some international lyrics.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the tweak is unable to find a song or process the lyrics, you&#39;ll see a &quot;Couldn&#39;t load the lyrics for this song&quot; message. The lyrics might be wrong for some songs when using Genius due to how the tweak searches songs. While I&#39;ve made it work in most cases, kindly refrain from opening issues about it.&lt;/p&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Starting with version 4.0, EeveeSpotify intercepts Spotify requests to load user data, deserializes it, and modifies the parameters in real-time. This method is the best so far and works incredibly stable, so the below explanation is no longer valid for v4.0 and later.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Upon login, Spotify fetches user data and caches it in the &lt;code&gt;offline.bnk&lt;/code&gt; file in the &lt;code&gt;/Library/Application Support/PersistentCache&lt;/code&gt; directory. It uses its proprietary binary format to store data, incorporating a length byte before each value, among other conventions. Certain keys, such as &lt;code&gt;player-license&lt;/code&gt;, &lt;code&gt;financial-product&lt;/code&gt;, &lt;code&gt;streaming-rules&lt;/code&gt;, and others, determine the user abilities.&lt;/p&gt; 
&lt;p&gt;The tweak patches this file while initializing; Spotify loads it and assumes you have Premium. To be honest, it doesn&#39;t really patch due to challenges with dynamic length and varied bytes. The tweak extracts the username from the current &lt;code&gt;offline.bnk&lt;/code&gt; file and inserts it into &lt;code&gt;premiumblank.bnk&lt;/code&gt; (a file containing all premium values preset), replacing &lt;code&gt;offline.bnk&lt;/code&gt;. Spotify may reload user data, and you&#39;ll be switched to the Free plan. When this happens, you&#39;ll see a popup with quick restart app and reset data actions.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/hex.png&quot; alt=&quot;Hex&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Tweak also sets &lt;code&gt;trackRowsEnabled&lt;/code&gt; in &lt;code&gt;SPTFreeTierArtistHubRemoteURLResolver&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, so Spotify loads not just track names on the artist page, and adds a liked tracks row to the artist view models, allowing you to see the liked tracks row just like with Premium.&lt;/p&gt; 
&lt;p&gt;To open Spotify links in sideloaded app, use &lt;a href=&quot;https://github.com/BillyCurtis/OpenSpotifySafariExtension&quot;&gt;OpenSpotifySafariExtension&lt;/a&gt;. Remember to activate it and allow access in Settings &amp;gt; Safari &amp;gt; Extensions.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;EeveeSpotify has always been free and open-source project. However, I started accepting crypto donations if you&#39;d like to support me. I really appreciate it:&lt;/p&gt; 
&lt;p&gt;USDT (TRC-20): &lt;code&gt;TK4AZZLEWrahYUkKDG8r8Pr5BmkoFjs5zU&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;ETH/USDC/USDT: &lt;code&gt;0x4eFf79BdfCa9d3BC01a1d145eF343871bb0a3CdF&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;BTC: &lt;code&gt;bc1qspsnjenfq6wgj9a7pmm2xe3up4622wqxlem0g5&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;TON: &lt;code&gt;UQCgt8EfLdT3QOmnC11vsndUBHryi2suTcTOVCQqBgMdmg4l&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;LTC: &lt;code&gt;ltc1qup3v46fm05sxd278r63957wh4qf2esehevpy76&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Donors&lt;/h3&gt; 
&lt;p&gt;Thanks to the following donors for supporting the project and funding the automatic release workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/randy-420&quot;&gt;Randy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hamzaharoon1314&quot;&gt;HAMO&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>siteline/swiftui-introspect</title>
      <link>https://github.com/siteline/swiftui-introspect</link>
      <description>&lt;p&gt;Introspect underlying UIKit/AppKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Introspect&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI Status Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Version Compatibility Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Platform Compatibility Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;SwiftUI Introspect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; 
&lt;p&gt;For instance, with SwiftUI Introspect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;SwiftUI Introspect works by adding an invisible &lt;code&gt;IntrospectionView&lt;/code&gt; on top of the selected view, and an invisible &quot;anchor&quot; view underneath it, then looking through the UIKit/AppKit view hierarchy between the two to find the relevant view.&lt;/p&gt; 
&lt;p&gt;For instance, when introspecting a &lt;code&gt;ScrollView&lt;/code&gt;...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
    Text(&quot;Item 1&quot;)
}
.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
    // do something with UIScrollView
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... it will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add marker views in front and behind &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Traverse through all subviews between both marker views until a &lt;code&gt;UIScrollView&lt;/code&gt; instance (if any) is found.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Although this introspection method is very solid and unlikely to break in itself, future OS releases require explicit opt-in for introspection (&lt;code&gt;.iOS(.vXYZ)&lt;/code&gt;), given potential differences in underlying UIKit/AppKit view types between major OS versions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;By default, the &lt;code&gt;.introspect&lt;/code&gt; modifier acts directly on its &lt;em&gt;receiver&lt;/em&gt;. This means calling &lt;code&gt;.introspect&lt;/code&gt; from inside the view you&#39;re trying to introspect won&#39;t have any effect. However, there are times when this is not possible or simply too inflexible, in which case you &lt;strong&gt;can&lt;/strong&gt; introspect an &lt;em&gt;ancestor&lt;/em&gt;, but you must opt into this explicitly by overriding the introspection &lt;code&gt;scope&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
    Text(&quot;Item 1&quot;)
        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26), scope: .ancestor) { scrollView in
            // do something with UIScrollView
        }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage in production&lt;/h3&gt; 
&lt;p&gt;SwiftUI Introspect is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit/AppKit classes, and the &lt;code&gt;.introspect&lt;/code&gt; modifier is simply ignored if UIKit/AppKit views cannot be found.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;h4&gt;Xcode&lt;/h4&gt; 
&lt;img width=&quot;656&quot; src=&quot;https://github.com/siteline/swiftui-introspect/assets/2538074/d19c1dd3-9aa4-4e4f-a5a5-b2d6a5b9b927&quot; /&gt; 
&lt;h4&gt;Package.swift&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
    dependencies: [
        .package(url: &quot;https://github.com/siteline/swiftui-introspect&quot;, from: &quot;1.0.0&quot;),
    ],
    targets: [
        .target(name: &amp;lt;#Target Name#&amp;gt;, dependencies: [
            .product(name: &quot;SwiftUIIntrospect&quot;, package: &quot;swiftui-introspect&quot;),
        ]),
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftUIIntrospect&#39;, &#39;~&amp;gt; 1.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Introspection&lt;/h2&gt; 
&lt;h3&gt;Implemented&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/buttontype&quot;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/colorpickertype&quot;&gt;&lt;code&gt;ColorPicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickertype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithcompactstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.compact&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithfieldstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.field&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithgraphicalstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.graphical&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithstepperfieldstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.stepperField&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithwheelstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formtype&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formwithgroupedstyletype&quot;&gt;&lt;code&gt;Form&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/fullScreenCovertype&quot;&gt;&lt;code&gt;.fullScreenCover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listtype&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithborderedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.bordered&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithgroupedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetgroupedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.insetGrouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.inset&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithsidebarstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.sidebar&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listcelltype&quot;&gt;&lt;code&gt;ListCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/maptype&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationsplitviewtype&quot;&gt;&lt;code&gt;NavigationSplitView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationstacktype&quot;&gt;&lt;code&gt;NavigationStack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithColumnsStyleType&quot;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.columns&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithStackStyleType&quot;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.stack&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pagecontroltype&quot;&gt;&lt;code&gt;PageControl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithmenustyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.menu&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithsegmentedstyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.segmented&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithwheelstyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/popovertype&quot;&gt;&lt;code&gt;.popover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithcircularstyletype&quot;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.circular&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithlinearstyletype&quot;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.linear&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/scrollviewtype&quot;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/searchfieldtype&quot;&gt;&lt;code&gt;.searchable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/securefieldtype&quot;&gt;&lt;code&gt;SecureField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/sheettype&quot;&gt;&lt;code&gt;.sheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/slidertype&quot;&gt;&lt;code&gt;Slider&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/steppertype&quot;&gt;&lt;code&gt;Stepper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabletype&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabviewtype&quot;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TabViewWithPageStyleType&quot;&gt;&lt;code&gt;TabView&lt;/code&gt; with &lt;code&gt;.page&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/texteditortype&quot;&gt;&lt;code&gt;TextEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/textfieldtype&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TextFieldWithVerticalAxisType&quot;&gt;&lt;code&gt;TextField&lt;/code&gt; with &lt;code&gt;.vertical&lt;/code&gt; axis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/toggletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithbuttonstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;button&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithcheckboxstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;checkbox&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithswitchstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;switch&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/videoplayertype&quot;&gt;&lt;code&gt;VideoPlayer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewtype&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewcontrollertype&quot;&gt;&lt;code&gt;ViewController&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/windowtype&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&quot;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&quot;&gt;start a discussion&lt;/a&gt;. As a temporary solution, you can &lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-introspectable-type&quot;&gt;implement your own introspectable view type&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Cannot implement&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;SwiftUI&lt;/th&gt; 
   &lt;th&gt;Affected Frameworks&lt;/th&gt; 
   &lt;th&gt;Why&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Text&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Image&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Button&lt;/td&gt; 
   &lt;td&gt;UIKit&lt;/td&gt; 
   &lt;td&gt;Not a UIButton&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;List&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;List {
    Text(&quot;Item&quot;)
}
.introspect(.list, on: .iOS(.v13, .v14, .v15)) { tableView in
    tableView.backgroundView = UIView()
    tableView.backgroundColor = .cyan
}
.introspect(.list, on: .iOS(.v16, .v17, .v18, .v26)) { collectionView in
    collectionView.backgroundView = UIView()
    collectionView.subviews.dropFirst(1).first?.backgroundColor = .cyan
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ScrollView&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
    Text(&quot;Item&quot;)
}
.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
    scrollView.backgroundColor = .red
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NavigationView&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;NavigationView {
    Text(&quot;Item&quot;)
}
.navigationViewStyle(.stack)
.introspect(.navigationView(style: .stack), on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { navigationController in
    navigationController.navigationBar.backgroundColor = .cyan
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;TextField&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;TextField(&quot;Text Field&quot;, text: &amp;lt;#Binding&amp;lt;String&amp;gt;#&amp;gt;)
    .introspect(.textField, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { textField in
        textField.backgroundColor = .red
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Advanced usage&lt;/h2&gt; 
&lt;h3&gt;Implement your own introspectable type&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&quot;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&quot;&gt;start a discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In case SwiftUI Introspect (unlikely) doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own introspectable type.&lt;/p&gt; 
&lt;p&gt;For example, here&#39;s how the library implements the introspectable &lt;code&gt;TextField&lt;/code&gt; type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

public struct TextFieldType: IntrospectableViewType {}

extension IntrospectableViewType where Self == TextFieldType {
    public static var textField: Self { .init() }
}

#if canImport(UIKit)
extension iOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
    public static let v13 = Self(for: .v13)
    public static let v14 = Self(for: .v14)
    public static let v15 = Self(for: .v15)
    public static let v16 = Self(for: .v16)
    public static let v17 = Self(for: .v17)
    public static let v18 = Self(for: .v18)
    public static let v26 = Self(for: .v26)
}

extension tvOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
    public static let v13 = Self(for: .v13)
    public static let v14 = Self(for: .v14)
    public static let v15 = Self(for: .v15)
    public static let v16 = Self(for: .v16)
    public static let v17 = Self(for: .v17)
    public static let v18 = Self(for: .v18)
    public static let v26 = Self(for: .v26)
}

extension visionOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
    public static let v1 = Self(for: .v1)
    public static let v2 = Self(for: .v2)
    public static let v26 = Self(for: .v26)
}
#elseif canImport(AppKit)
extension macOSViewVersion&amp;lt;TextFieldType, NSTextField&amp;gt; {
    public static let v10_15 = Self(for: .v10_15)
    public static let v11 = Self(for: .v11)
    public static let v12 = Self(for: .v12)
    public static let v13 = Self(for: .v13)
    public static let v14 = Self(for: .v14)
    public static let v15 = Self(for: .v15)
    public static let v26 = Self(for: .v26)
}
#endif
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Introspect on future platform versions&lt;/h3&gt; 
&lt;p&gt;By default, introspection applies per specific platform version. This is a sensible default for maximum predictability in regularly maintained codebases, but it&#39;s not always a good fit for e.g. library developers who may want to cover as many future platform versions as possible in order to provide the best chance for long-term future functionality of their library without regular maintenance.&lt;/p&gt; 
&lt;p&gt;For such cases, SwiftUI Introspect offers range-based platform version predicates behind the Advanced SPI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

struct ContentView: View {
    var body: some View {
        ScrollView {
            // ...
        }
        .introspect(.scrollView, on: .iOS(.v13...)) { scrollView in
            // ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bear in mind this should be used cautiously, and with full knowledge that any future OS version might break the expected introspection types unless explicitly available. For instance, if in the example above hypothetically iOS 19 stops using UIScrollView under the hood, the customization closure will never be called on said platform.&lt;/p&gt; 
&lt;h3&gt;Keep instances outside the customize closure&lt;/h3&gt; 
&lt;p&gt;Sometimes, you might need to keep your introspected instance around for longer than the customization closure lifetime. In such cases, &lt;code&gt;@State&lt;/code&gt; is not a good option because it produces retain cycles. Instead, SwiftUI Introspect offers a &lt;code&gt;@Weak&lt;/code&gt; property wrapper behind the Advanced SPI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

struct ContentView: View {
    @Weak var scrollView: UIScrollView?

    var body: some View {
        ScrollView {
            // ...
        }
        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
            self.scrollView = scrollView
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a list of open source libraries powered by the SwiftUI Introspect library:&lt;/p&gt; 
&lt;a href=&quot;https://github.com/paescebu/CustomKeyboardKit&quot;&gt; &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=paescebu&amp;amp;repo=CustomKeyboardKit&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/davdroman/swiftui-navigation-transitions&quot;&gt; &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=davdroman&amp;amp;repo=swiftui-navigation-transitions&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;If you&#39;re working on a library built on SwiftUI Introspect or know of one, feel free to submit a PR adding it to the list.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nikitabobko/AeroSpace</title>
      <link>https://github.com/nikitabobko/AeroSpace</link>
      <description>&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AeroSpace Beta &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml/badge.svg?branch=main&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/resources/Assets.xcassets/AppIcon.appiconset/icon.png&quot; width=&quot;40%&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt; 
&lt;p&gt;Videos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UOl7ErqWbrk&quot;&gt;YouTube 91 sec Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-FoWClVHG5g&quot;&gt;YouTube Guide by Josean Martinez&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Docs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide&quot;&gt;AeroSpace Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/commands&quot;&gt;AeroSpace Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/goodies&quot;&gt;AeroSpace Goodies&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project status&lt;/h2&gt; 
&lt;p&gt;Public Beta. AeroSpace can be used as a daily driver, but expect breaking changes until 1.0 is reached.&lt;/p&gt; 
&lt;p&gt;What stops us from 1.0 release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/131&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/131&lt;/a&gt; Performance. Implement thread-per-application to circumvent macOS blocking AX API.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/1215&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/1215&lt;/a&gt; &lt;em&gt;Big refactoring&lt;/em&gt;. Rewrite mutable double-linked core tree data structure to immutable single-linked persistent tree. Important for: stability and potential performance 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/1216&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/1216&lt;/a&gt; The big refactoring will help us to fix stability issue that windows may randomly jump to the focused workspace&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/68&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/68&lt;/a&gt; The big refactoring will help us to support macOS native tabs&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/278&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/278&lt;/a&gt; Implement shell-like combinators. Ignore a lot of crazy fuss in the issue, We are most probably going with the minimal approach to only introduce common shell-combinators: &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; command to send multiple commands in one go.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/1012&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/1012&lt;/a&gt; Investigate a possibility to use &lt;code&gt;CGEvent.tapCreate&lt;/code&gt; API for global hotkeys 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/28&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/28&lt;/a&gt; Maybe it will allow to distinguish left and right modifiers. Maybe not&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Big and important issues which will go after 1.0 release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/2&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/2&lt;/a&gt; sticky windows&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/issues/260&quot;&gt;https://github.com/nikitabobko/AeroSpace/issues/260&lt;/a&gt; Dynamic TWM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Key features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tiling window manager based on a &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#tree&quot;&gt;tree paradigm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://i3wm.org/&quot;&gt;i3&lt;/a&gt; inspired&lt;/li&gt; 
 &lt;li&gt;Fast workspaces switching without animations and without the necessity to disable SIP&lt;/li&gt; 
 &lt;li&gt;AeroSpace employs its &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&quot;&gt;own emulation of virtual workspaces&lt;/a&gt; instead of relying on native macOS Spaces due to &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&quot;&gt;their considerable limitations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Plain text configuration (dotfiles friendly). See: &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#default-config&quot;&gt;default-config.toml&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CLI first (manpages and shell completion included)&lt;/li&gt; 
 &lt;li&gt;Doesn&#39;t require disabling SIP (System Integrity Protection)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#multiple-monitors&quot;&gt;Proper multi-monitor support&lt;/a&gt; (i3-like paradigm)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; to get autoupdates (Preferred)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install --cask nikitabobko/tap/aerospace
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In multi-monitor setup please make sure that monitors &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#proper-monitor-arrangement&quot;&gt;are properly arranged&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other installation options: &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#installation&quot;&gt;https://nikitabobko.github.io/AeroSpace/guide#installation&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] By using AeroSpace, you acknowledge that it&#39;s not &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution&quot;&gt;notarized&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Notarization is a &quot;security&quot; feature by Apple. You send binaries to Apple, and they either approve them or not. In reality, notarization is about building binaries the way Apple likes it.&lt;/p&gt; 
 &lt;p&gt;I don&#39;t have anything against notarization as a concept. I specifically don&#39;t like the way Apple does notarization. I don&#39;t have time to deal with Apple.&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/nikitabobko/homebrew-tap/raw/main/Casks/aerospace.rb&quot;&gt;Homebrew installation script&lt;/a&gt; is configured to automatically delete &lt;code&gt;com.apple.quarantine&lt;/code&gt; attribute, that&#39;s why the app should work out of the box, without any warnings that &quot;Apple cannot check AeroSpace for malicious software&quot;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Community, discussions, issues&lt;/h2&gt; 
&lt;p&gt;AeroSpace project doesn&#39;t accept Issues directly - we ask you to create a &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions&quot;&gt;Discussion&lt;/a&gt; first. Please read &lt;a href=&quot;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Community discussions happen at GitHub Discussions. There you can discuss bugs, propose new features, ask your questions, show off your setup, or just chat.&lt;/p&gt; 
&lt;p&gt;There are 7 channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions&quot;&gt;#all&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions.atom?discussions_q=sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;. Feed with all discussions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/announcements&quot;&gt;#announcements&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/announcements.atom?discussions_q=category%3Aannouncements+sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;. Only maintainers can post here. Highly moderated traffic.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/announcements-releases&quot;&gt;#announcements-releases&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/announcements-releases.atom?discussions_q=category%3Aannouncements-releases+sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;. Announcements about non-patch releases. Only maintainers can post here.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/feature-ideas&quot;&gt;#feature-ideas&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/feature-ideas.atom?discussions_q=category%3Afeature-ideas+sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/general&quot;&gt;#general&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/general.atom?discussions_q=sort%3Adate_created+category%3Ageneral&quot;&gt;RSS&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/potential-bugs&quot;&gt;#potential-bugs&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/potential-bugs.atom?discussions_q=category%3Apotential-bugs+sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;. If you think that you have encountered a bug, you can discuss your bugs here.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/questions-and-answers&quot;&gt;#questions-and-answers&lt;/a&gt;. &lt;a href=&quot;https://github.com/nikitabobko/AeroSpace/discussions/categories/questions-and-answers.atom?discussions_q=category%3Aquestions-and-answers+sort%3Adate_created&quot;&gt;RSS&lt;/a&gt;. Everyone is welcome to ask questions. Everyone is encouraged to answer other people&#39;s questions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;A notes on how to setup the project, build it, how to run the tests, etc. can be found here: &lt;a href=&quot;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/dev-docs/development.md&quot;&gt;dev-docs/development.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Project values&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AeroSpace is targeted at advanced users and developers&lt;/li&gt; 
 &lt;li&gt;Keyboard centric&lt;/li&gt; 
 &lt;li&gt;Breaking changes (configuration files, CLI, behavior) are avoided as much as possible, but it must not let the software stagnate. Thus breaking changes can happen, but with careful considerations and helpful message. &lt;a href=&quot;https://semver.org/&quot;&gt;Semver&lt;/a&gt; major version is bumped in case of a breaking change (It&#39;s all guaranteed once AeroSpace reaches 1.0 version, until then breaking changes just happen)&lt;/li&gt; 
 &lt;li&gt;AeroSpace doesn&#39;t use GUI, unless necessarily 
  &lt;ul&gt; 
   &lt;li&gt;AeroSpace will never provide a GUI for configuration. For advanced users, it&#39;s easier to edit a configuration file in text editor rather than navigating through checkboxes in GUI.&lt;/li&gt; 
   &lt;li&gt;Status menu icon is ok, because visual feedback is needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Provide &lt;em&gt;practical&lt;/em&gt; features. Fancy appearance features are not &lt;em&gt;practical&lt;/em&gt; (e.g. window borders, transparency, animations, etc.)&lt;/li&gt; 
 &lt;li&gt;&quot;dark magic&quot; (aka &quot;private APIs&quot;, &quot;code injections&quot;, etc.) must be avoided as much as possible 
  &lt;ul&gt; 
   &lt;li&gt;Right now, AeroSpace uses only a single private API to get window ID of accessibility object &lt;code&gt;_AXUIElementGetWindow&lt;/code&gt;. Everything else is &lt;a href=&quot;https://developer.apple.com/documentation/applicationservices/axuielement_h&quot;&gt;macOS public accessibility API&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;AeroSpace will never require you to disable SIP (System Integrity Protection).&lt;/li&gt; 
   &lt;li&gt;The goal is to make AeroSpace easily maintainable, and resistant to macOS updates.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Non Values&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Play nicely with existing macOS features. If limitations are imposed then AeroSpace won&#39;t play nicely with existing macOS features (For example, AeroSpace doesn&#39;t acknowledge the existence of macOS Spaces, and it uses &lt;a href=&quot;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&quot;&gt;emulation of its own workspaces&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ricing. AeroSpace provides only a very minimal support for ricing - gaps and a few callbacks for integrations with bars. The current maintainer doesn&#39;t care about ricing. Ricing issues are not a priority, and they are mostly ignored. The ricing stance can change only with the appearance of more maintainers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;AeroSpace is developed and maintained in my free time. If you find it useful, &lt;a href=&quot;https://github.com/sponsors/nikitabobko#sponsors&quot;&gt;consider sponsoring&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tip of the day&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;defaults write -g NSWindowShouldDragOnGesture -bool true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, you can move windows by holding &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;cmd&lt;/code&gt; and dragging any part of the window (not necessarily the window title)&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href=&quot;https://www.reddit.com/r/MacOS/comments/k6hiwk/keyboard_modifier_to_simplify_click_drag_of/&quot;&gt;reddit&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ianyh/Amethyst&quot;&gt;Amethyst&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koekeishiya/yabai&quot;&gt;yabai&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iina/iina</title>
      <link>https://github.com/iina/iina</link>
      <description>&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;256&quot; src=&quot;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&quot; /&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;IINA&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://iina.io/&quot;&gt;Website&lt;/a&gt; · &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;Releases&lt;/a&gt; · &lt;a href=&quot;https://t.me/IINAUsers&quot;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://crowdin.com/project/iina&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/iina/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on &lt;a href=&quot;https://github.com/mpv-player/mpv&quot;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; 
 &lt;li&gt;Designed with modern versions of macOS (10.15+) in mind&lt;/li&gt; 
 &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters…and much, much more!&lt;/li&gt; 
 &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; 
 &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; 
 &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; 
 &lt;li&gt;Video thumbnails&lt;/li&gt; 
 &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; 
 &lt;li&gt;Unlimited playback history&lt;/li&gt; 
 &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; 
 &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; 
 &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; 
 &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; 
 &lt;li&gt;In active development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloading&lt;/h2&gt; 
&lt;p&gt;You can get IINA through several sources. For the latest stable and beta releases, visit the &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;GitHub release page&lt;/a&gt; or the &lt;a href=&quot;https://iina.io/&quot;&gt;IINA official website&lt;/a&gt;. If you want to try out the latest features and improvements before they are officially released, you can download the nightly builds from our &lt;a href=&quot;https://iina.io/nightly/&quot;&gt;Nightly Download Page&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Nightly builds are generated by GitHub automatically for every commits, which might be buggy and unusable. If you find a bug, please follow the &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#Contributing&quot;&gt;contributing section&lt;/a&gt; and file an issue.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&quot;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;./other/download_libs.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Change the URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/filelist.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;If you want to build an older IINA version, make sure to download the corresponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/filelist.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Building mpv manually&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;brew tap iina/homebrew-mpv-iina
brew install mpv-iina
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port install mpv +uchardet -bundle -rubberband configure.args=&quot;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Copy the corresponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&quot;https://github.com/mpv-player/mpv/tree/master/libmpv&quot;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;other/change_lib_dependencies.rb &quot;$(brew --prefix)&quot; &quot;$(brew --prefix mpv-iina)/lib/libmpv.dylib&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open &lt;code&gt;iina.xcodeproj&lt;/code&gt; in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Remove all references to &lt;code&gt;.dylib&lt;/code&gt; files from the Frameworks group in the sidebar and add all the &lt;code&gt;.dylib&lt;/code&gt; files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &quot;Add Files to iina...&quot; in the context menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add all the imported &lt;code&gt;.dylib&lt;/code&gt; files into the &quot;Copy Dylibs&quot; phase under &quot;Build Phases&quot; tab of the iina target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the necessary &lt;code&gt;.dylib&lt;/code&gt; files are present in the &quot;Link Binary With Libraries&quot; phase under &quot;Build Phases&quot;. Xcode should have already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&quot;https://github.com/iina/iina/issues&quot;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&quot;https://github.com/iina/iina/issues/new/choose&quot;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; — it has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&quot;https://translate.iina.io/&quot;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating. Please do not send a pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not on the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>open-meteo/open-meteo</title>
      <link>https://github.com/open-meteo/open-meteo</link>
      <description>&lt;p&gt;Free Weather Forecast API for non-commercial use&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌤 Open-Meteo Weather API&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/open-meteo/open-meteo/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/open-meteo/open-meteo/actions/workflows/test.yml/badge.svg?branch=main&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codebeat.co/projects/github-com-open-meteo-open-meteo-main&quot;&gt;&lt;img src=&quot;https://codebeat.co/badges/af28fed6-9cbf-41df-96a1-9bba03ae3c53&quot; alt=&quot;codebeat badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/open-meteo/open-meteo/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/open-meteo/open-meteo&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-CC%20BY%204.0-lightgrey.svg?sanitize=true&quot; alt=&quot;license: CC BY 4.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/open_meteo&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/follow-%40open_meteo-1DA1F2?logo=twitter&amp;amp;style=social&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://fosstodon.org/@openmeteo&quot;&gt;&lt;img src=&quot;https://img.shields.io/mastodon/follow/109320332765909743?domain=https%3A%2F%2Ffosstodon.org&quot; alt=&quot;Mastodon&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.5281/zenodo.7970649&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.7970649.svg?sanitize=true&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Open-Meteo is an open-source weather API and offers free access for non-commercial use. No API key is required. You can use it immediately!&lt;/p&gt; 
&lt;p&gt;Head over to &lt;a href=&quot;https://open-meteo.com&quot;&gt;https://open-meteo.com&lt;/a&gt;! Stay up to date with our blog at &lt;a href=&quot;https://openmeteo.substack.com&quot;&gt;https://openmeteo.substack.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://open-meteo.com/en/docs&quot;&gt;Hourly weather forecast&lt;/a&gt; for up to 16 days&lt;/li&gt; 
 &lt;li&gt;Global weather models with 11 km and regional models up to 1.5 km resolution&lt;/li&gt; 
 &lt;li&gt;Weather model updates every hour for Europe and North America&lt;/li&gt; 
 &lt;li&gt;80 years &lt;a href=&quot;https://open-meteo.com/en/docs/historical-weather-api&quot;&gt;Historical Weather API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Based on the best weather models: &lt;a href=&quot;https://open-meteo.com/en/docs/gfs-api&quot;&gt;NOAA GFS with HRRR&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/dwd-api&quot;&gt;DWD ICON&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/meteofrance-api&quot;&gt;MeteoFrance Arome&amp;amp;Arpege&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/ecmwf-api&quot;&gt;ECMWF IFS&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/jma-api&quot;&gt;JMA&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/gem-api&quot;&gt;GEM HRDPS&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/metno-api&quot;&gt;MET Norway&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://open-meteo.com/en/docs/marine-weather-api&quot;&gt;Marine Forecast API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/air-quality-api&quot;&gt;Air Quality API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/geocoding-api&quot;&gt;Geocoding API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/elevation-api&quot;&gt;Elevation API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/flood-api&quot;&gt;Flood API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lightning fast APIs with response times below 10 ms&lt;/li&gt; 
 &lt;li&gt;Servers located in Europe and North America with GeoDNS for best latency and high-availability&lt;/li&gt; 
 &lt;li&gt;No API key required, CORS supported, no ads, no tracking, not even cookies&lt;/li&gt; 
 &lt;li&gt;Free for non-commercial use with data under Attribution 4.0 International (CC BY 4.0)&lt;/li&gt; 
 &lt;li&gt;Source code available under AGPLv3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How does Open-Meteo work?&lt;/h2&gt; 
&lt;p&gt;Open-Meteo utilizes open-data weather forecasts provided by national weather services. These services offer numerical weather predictions that are free to download. However, working with these models can be challenging, as it requires expertise in binary file formats, grid-systems, projections, and the fundamentals of weather predictions.&lt;/p&gt; 
&lt;p&gt;Like many other weather APIs, Open-Meteo integrates high-resolution local and global weather models. Over 2 TB of data are downloaded and processed daily from multiple national weather services. The collected data is then stored in local files using a customized file format and compression technique to enhance access to time-series data such as a 14-day temperature forecast.&lt;/p&gt; 
&lt;p&gt;In contrast to other weather APIs, Open-Meteo provides complete access to its source code, and all data sources are openly listed, crediting the national weather services for their work. With Docker or prebuilt Ubuntu packages, it is possible to launch your own weather API within minutes. By providing the source code, users can conduct detailed verifications of the weather data processing and even make modifications themselves. Contributions are highly encouraged and welcomed.&lt;/p&gt; 
&lt;p&gt;The API is available for non-commercial use at no cost. Despite being free of charge, the forecast accuracy is top-notch. The API utilizes a vast array of local weather models with rapid updates, ensuring that the most precise forecast is generated for any location globally.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;All API documentation can be found on &lt;a href=&quot;https://open-meteo.com&quot;&gt;https://open-meteo.com&lt;/a&gt;. The source code for the website, documentation and API generator is available here: &lt;a href=&quot;https://github.com/open-meteo/open-meteo-website&quot;&gt;https://github.com/open-meteo/open-meteo-website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The free non-commerical API is hosted at &lt;a href=&quot;https://api.open-meteo.com/v1/forecast?latitude=52.52&amp;amp;longitude=13.41&amp;amp;hourly=temperature_2m&quot;&gt;https://api.open-meteo.com&lt;/a&gt; using to GeoDNS to servers in Europe and North America (HTTPS is optional). The API source code is in this current repository.&lt;/li&gt; 
 &lt;li&gt;The geocoding API source code is available in a separate repository &lt;a href=&quot;https://github.com/open-meteo/geocoding-api&quot;&gt;https://github.com/open-meteo/geocoding-api&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Larger changes are announced in the &lt;a href=&quot;https://openmeteo.substack.com&quot;&gt;Open-Meteo Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/open-meteo/open-data&quot;&gt;Open-Meteo weather database&lt;/a&gt; is redistributed as part of an AWS Open-Data Sponsorship&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is using Open-Meteo?&lt;/h2&gt; 
&lt;p&gt;Apps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/open_meteo/&quot;&gt;Home Assistant&lt;/a&gt; A popular open source smart home platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weather.roessner.tech&quot;&gt;Weather.io&lt;/a&gt; A simple Progressive Web App (PWA) for checking the weather.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weathergraph.app&quot;&gt;WeatherGraph&lt;/a&gt; Apple Watch App&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://slideshow.digital/&quot;&gt;Slideshow&lt;/a&gt; Digital Signage app for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/roe-dl/weewx-DWD&quot;&gt;weewx-DWD&lt;/a&gt; Weather forecasts etc. for WeeWX&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woheller69/omweather&quot;&gt;Cirrus&lt;/a&gt; Android Weather App&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woheller69/solxpect&quot;&gt;solXpect&lt;/a&gt; Android app which forecasts the output of your solar power plant&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/metalfoxdev/Raindrop&quot;&gt;Raindrop&lt;/a&gt; Simple and intuitive weather app for the linux terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weatherian.com/&quot;&gt;Weatherian&lt;/a&gt; Multi-model meteogram (multi-platform)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.kingfu.weatherai&quot;&gt;WeatherAI&lt;/a&gt; WeatherAI offers an intuitive user experience that makes checking the weather a breeze.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GustavLindberg99/AndroidWeather&quot;&gt;Weather&lt;/a&gt; Free, open source, simple and complete weather app for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=xyz.droneweather.app&quot;&gt;DroneWeather&lt;/a&gt; Weather forecasts, satellite count, and KP index for drone pilots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://f-droid.org/packages/co.prestosole.clima/&quot;&gt;Clima&lt;/a&gt; Beautiful, minimal, and fast weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cakephone/skymuse&quot;&gt;SkyMuse&lt;/a&gt; Minimal, privacy-respecting weather app. Built with web technologies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggaidelevicius/weather-please/&quot;&gt;Weather Please&lt;/a&gt; Clean and minimal new tab replacement for browsers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TylerWilliamson/QuickWeather&quot;&gt;QuickWeather&lt;/a&gt; Fast, free, and open source Android app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DarkMooNight/Rain&quot;&gt;Rain&lt;/a&gt; Free, open source, beautiful, minimal and fast weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Isma1306/wetbulb-forecast&quot;&gt;WetBulb&lt;/a&gt; A simple app that shows you the wetbulb temp 24h forecast and tells you if it is dangerous.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Akylas/oss-weather&quot;&gt;OSS Weather&lt;/a&gt; - Multi-model/multi-provider Open Source Android/iOS Weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weather.jamesdinovo.com&quot;&gt;The Weather&lt;/a&gt; A detailed, installable, progressive web application&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rocksdanister.com/weather&quot;&gt;Lively Weather&lt;/a&gt; Windows native weather app powered by DirectX12 animations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hh.guidocioni.it/pointwx/&quot;&gt;PointWx&lt;/a&gt; Dash application with interactive plots (from beginner-friendly to weather-enthusiast level) easily deployable&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yotka.org/meteo-hist&quot;&gt;MeteoHist&lt;/a&gt; A web app to create interactive temperature and precipitation graphs for places around the world&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emojiton.com/weather&quot;&gt;Emojiton Weather&lt;/a&gt; Get the local weather forecast for your location with fun emoji representations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.alpineconditions.com&quot;&gt;Alpine Conditions&lt;/a&gt; Allows a user to compare multiple models at once &amp;amp; create ensemble forecasts for any location&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://SwampCooler.app&quot;&gt;Evaporative Cooler Forecaster&lt;/a&gt; Swamp cooler effectiveness forecast with cost &amp;amp; energy savings, Android/iOS app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.lunalink.de&quot;&gt;LunaLink&lt;/a&gt; A site for hunters, fishermen and nature observers: It provides sun and moon values ​​(including moon brightness) as well as the weather for individual locations in Central Europe.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.truthclimate.com&quot;&gt;truthclimate&lt;/a&gt; Discover how weather and climate changed all around the world.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cburton-godaddy/captain-cold&quot;&gt;Captain Cold&lt;/a&gt; Simple Open-Meteo -&amp;gt; Discord integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tobealive/wthrr-the-weathercrab&quot;&gt;wthrr-the-weathercrab&lt;/a&gt; Weather companion for the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Rayrsn/Weather-Cli&quot;&gt;Weather-Cli&lt;/a&gt; A CLI program written in golang that allows you to get weather information from the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/benphelps/homepage/&quot;&gt;Homepage&lt;/a&gt; A highly customizable homepage (or startpage / application dashboard) with Docker and service API integrations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.spots.guru&quot;&gt;Spots Guru&lt;/a&gt; Weather forecast for lazy, the best wind &amp;amp; wave spots around you.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vnegi10/WeatherReport.jl&quot;&gt;WeatherReport.jl&lt;/a&gt; A simple weather app for the Julia REPL&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AlexeyMal/esp8266-weather-station&quot;&gt;DIY Arduino esp8266 weather station&lt;/a&gt; esp8266 weather station using Open-Meteo API, an embedded C++ implementation example&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SqrtMinusOne/biome&quot;&gt;biome&lt;/a&gt; Bountiful Interface to Open Meteo for Emacs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.raycast.com/koinzhang/menubar-weather&quot;&gt;Menubar Weather&lt;/a&gt; A Raycast extension that displays live weather information in your menu bar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.minipavi.fr/emulminitel/&quot;&gt;MiniPavi&lt;/a&gt; Vintage French Minitel (a kind of BBS) weather forecast service (type &quot;METEO&quot; keyword on welcome Minitel screen)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenKNX/OFM-InternetWeatherModule&quot;&gt;OFM-InternetWeatherModule&lt;/a&gt; An OpenKNX module to provide data of weather services on KNX-bus (configurable via ETS)&lt;/li&gt; 
 &lt;li&gt;Contributions welcome!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Do you use Open-Meteo? Please open a pull request and add your repository or app to the list!&lt;/p&gt; 
&lt;h2&gt;Client SDKs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go &lt;a href=&quot;https://github.com/HectorMalot/omgo&quot;&gt;https://github.com/HectorMalot/omgo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python &lt;a href=&quot;https://github.com/m0rp43us/openmeteopy&quot;&gt;https://github.com/m0rp43us/openmeteopy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kotlin &lt;a href=&quot;https://github.com/open-meteo/open-meteo-api-kotlin&quot;&gt;https://github.com/open-meteo/open-meteo-api-kotlin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;.Net / C# &lt;a href=&quot;https://github.com/AlienDwarf/open-meteo-dotnet&quot;&gt;https://github.com/AlienDwarf/open-meteo-dotnet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;dotnet 8 / C# &lt;a href=&quot;https://github.com/colinnuk/open-meteo-dotnet-client-sdk&quot;&gt;https://github.com/colinnuk/open-meteo-dotnet-client-sdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP Laravel &lt;a href=&quot;https://github.com/michaelnabil230/laravel-weather&quot;&gt;https://github.com/michaelnabil230/laravel-weather&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;R &lt;a href=&quot;https://github.com/tpisel/openmeteo&quot;&gt;https://github.com/tpisel/openmeteo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP Symfony 6.2 &lt;a href=&quot;https://gitlab.com/flibidi67/open-meteo&quot;&gt;https://gitlab.com/flibidi67/open-meteo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP for Geocoding API: &lt;a href=&quot;https://gitlab.com/flibidi67/open-meteo-geocoding&quot;&gt;https://gitlab.com/flibidi67/open-meteo-geocoding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Android library for Geocoding API: &lt;a href=&quot;https://github.com/woheller69/OmGeoDialog&quot;&gt;https://github.com/woheller69/OmGeoDialog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dart / Flutter: &lt;a href=&quot;https://github.com/neursh/open-meteo-dart&quot;&gt;https://github.com/neursh/open-meteo-dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/angelodlfrtr/open-meteo-rs&quot;&gt;https://github.com/angelodlfrtr/open-meteo-rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributions welcome! Writing a SDK for Open-Meteo is more than welcome and a great way to help users.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter bugs while using Open-Meteo APIs, please file a new issue ticket. For general ideas or Q&amp;amp;A please use the &lt;a href=&quot;https://github.com/open-meteo/open-meteo/discussions&quot;&gt;Discussion&lt;/a&gt; section on Github. Thanks!&lt;/p&gt; 
&lt;p&gt;For other enquiries please contact &lt;a href=&quot;mailto:info@open-meteo.com&quot;&gt;info@open-meteo.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Run your own API&lt;/h2&gt; 
&lt;p&gt;Instructions to use Docker to run your own weather API are available in the &lt;a href=&quot;https://raw.githubusercontent.com/open-meteo/open-meteo/main/docs/getting-started.md&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Terms &amp;amp; Privacy&lt;/h2&gt; 
&lt;p&gt;Open-Meteo APIs are free for open-source developer and non-commercial use. We do not restrict access, but ask for fair use.&lt;/p&gt; 
&lt;p&gt;If your application exceeds 10&#39;000 requests per day, please contact us. We reserve the right to block applications and IP addresses that misuse our service.&lt;/p&gt; 
&lt;p&gt;For commercial use of Open-Meteo APIs, please contact us.&lt;/p&gt; 
&lt;p&gt;All data is provided as is without any warranty.&lt;/p&gt; 
&lt;p&gt;We do not collect any personal data. We do not share any personal information. We do not integrate any third party analytics, ads, beacons or plugins.&lt;/p&gt; 
&lt;h2&gt;Data License&lt;/h2&gt; 
&lt;p&gt;API data are offered under Attribution 4.0 International (CC BY 4.0)&lt;/p&gt; 
&lt;p&gt;You are free to share: copy and redistribute the material in any medium or format and adapt: remix, transform, and build upon the material.&lt;/p&gt; 
&lt;p&gt;Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/p&gt; 
&lt;p&gt;You must include a link next to any location, Open-Meteo data are displayed like:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://open-meteo.com/&quot;&gt;Weather data by Open-Meteo.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Source Code License&lt;/h2&gt; 
&lt;p&gt;Open-Meteo is open-source under the GNU Affero General Public License Version 3 (AGPLv3) or any later version. You can &lt;a href=&quot;https://raw.githubusercontent.com/open-meteo/open-meteo/main/LICENSE&quot;&gt;find the license here&lt;/a&gt;. Exceptions are third party source-code with individual licensing in each file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alamofire/Alamofire</title>
      <link>https://github.com/Alamofire/Alamofire</link>
      <description>&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&quot; alt=&quot;Alamofire: Elegant Networking in Swift&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-Orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-orange?style=flat-square&quot; alt=&quot;Swift&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_vision_OS_Linux_Windows_Android-Green?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_visionOS_Linux_Windows_Android-yellowgreen?style=flat-square&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&quot; alt=&quot;CocoaPods Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&quot; alt=&quot;Carthage Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot; alt=&quot;Swift Package Manager&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire/37&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&quot; alt=&quot;Swift Forums&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&quot;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&quot;&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&quot;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&quot;&gt;Making Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&quot;&gt;Response Handling&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&quot;&gt;Response Validation&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&quot;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&quot;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders&quot;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&quot;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&quot;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&quot;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&quot;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&quot;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&quot;&gt;Advanced Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&quot;&gt;Session Manager&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&quot;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&quot;&gt;Request&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&quot;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&quot;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&quot;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&quot;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&quot;&gt;Combine&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&quot;&gt;Security&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&quot;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&quot;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&quot;&gt;Donations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chainable Request / Response Methods&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Combine Support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; URL / JSON Parameter Encoding&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Download File using Request or Resume Data&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; HTTP Response Validation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; cURL Command Output&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Network Reachability&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://alamofire.github.io/Alamofire&quot;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Write Requests Fast!&lt;/h2&gt; 
&lt;p&gt;Alamofire&#39;s compact syntax and extensive feature set allow requests with powerful features like automatic retry to be written in just a few lines of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Automatic String to URL conversion, Swift concurrency support, and automatic retry.
let response = await AF.request(&quot;https://httpbin.org/get&quot;, interceptor: .retryPolicy)
                       // Automatic HTTP Basic Auth.
                       .authenticate(username: &quot;user&quot;, password: &quot;pass&quot;)
                       // Caching customization.
                       .cacheResponse(using: .cache)
                       // Redirect customization.
                       .redirect(using: .follow)
                       // Validate response code and Content-Type.
                       .validate()
                       // Produce a cURL command for the request.
                       .cURLDescription { description in
                         print(description)
                       }
                       // Automatic Decodable support with background parsing.
                       .serializingDecodable(DecodableType.self)
                       // Await the full response with metrics and a parsed body.
                       .response
// Detailed response description for easy debugging.
debugPrint(response)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Component Libraries&lt;/h2&gt; 
&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&quot;https://github.com/Alamofire/Foundation&quot;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireImage&quot;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&quot;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum Swift Version&lt;/th&gt; 
   &lt;th&gt;Installation&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; 
   &lt;td&gt;5.9 / Xcode 15.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&quot;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&quot;&gt;Carthage&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&quot;&gt;Manual&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fully Tested&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; 
&lt;p&gt;Alamofire builds on Linux, Windows, and Android but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; 
 &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; 
 &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;WebSocketRequest&lt;/code&gt; is not available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux, Windows, and Android. Please report any crashes to the &lt;a href=&quot;https://bugs.swift.org&quot;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Migration Guides&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&quot;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&quot;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&quot;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&quot;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/alamofire&quot;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&quot;http://alamofire.github.io/Alamofire/&quot;&gt;our documentation&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url_loading_system&quot;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; 
 &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; 
&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt; or the Package list in Xcode.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, .upToNextMajor(from: &quot;5.10.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Normally you&#39;ll want to depend on the &lt;code&gt;Alamofire&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;Alamofire&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But if you want to force Alamofire to be dynamically linked (do not do this unless you&#39;re sure you need it), you can depend on the &lt;code&gt;AlamofireDynamic&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;AlamofireDynamic&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;Alamofire&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;Alamofire/Alamofire&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; 
&lt;h4&gt;Embedded Framework&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &quot;if&quot; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &quot;Targets&quot; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &quot;General&quot; panel.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &quot;Embedded Binaries&quot; section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Open Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5517037090635776&quot;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resolved Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5010235949318144&quot;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://openradar.appspot.com/radar?id=4942308441063424&quot;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; 
&lt;p&gt;Alamofire is named after the &lt;a href=&quot;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&quot;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&quot;http://alamofire.org&quot;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&quot;https://twitter.com/AlamofireSF&quot;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; 
&lt;h3&gt;Security Disclosure&lt;/h3&gt; 
&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&quot;mailto:security@alamofire.org&quot;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/Alamofire/Foundation#members&quot;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; 
 &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; 
 &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; 
 &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/Alamofire&quot;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Supporters&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://macstadium.com&quot;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&quot; alt=&quot;Powered by MacStadium&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&quot;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

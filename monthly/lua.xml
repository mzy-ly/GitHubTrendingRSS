<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Monthly Trending</title>
    <description>Monthly Trending of Lua in GitHub</description>
    <pubDate>Wed, 13 Aug 2025 01:54:31 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>folke/tokyonight.nvim</title>
      <link>https://github.com/folke/tokyonight.nvim</link>
      <description>&lt;p&gt;üèô A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üèô Tokyo Night&lt;/h1&gt; 
&lt;p&gt;A dark and light &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; theme written in &lt;a href=&quot;https://www.lua.org&quot;&gt;Lua&lt;/a&gt; ported from the &lt;a href=&quot;https://github.com/enkia/tokyo-night-vscode-theme&quot;&gt;Visual Studio Code TokyoNight&lt;/a&gt; theme. Includes &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;.&lt;/p&gt; 
&lt;table width=&quot;100%&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Moon&lt;/th&gt; 
   &lt;th&gt;Storm&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/190951628-10ba28a1-57ff-4479-8eab-47400a402242.png&quot; /&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Night&lt;/th&gt; 
   &lt;th&gt;Day&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&quot; /&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports the latest &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.9.0&quot;&gt;0.9.0&lt;/a&gt; features.&lt;/li&gt; 
 &lt;li&gt;Terminal colors.&lt;/li&gt; 
 &lt;li&gt;Supports all major plugins.&lt;/li&gt; 
 &lt;li&gt;Provides &lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt; for numerous other applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;üé® Supported Plugins&lt;/summary&gt; 
 &lt;!-- plugins:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Plugin&lt;/th&gt; 
    &lt;th&gt;Source&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/aerial.lua&quot;&gt;&lt;code&gt;aerial&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;ale&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/ale.lua&quot;&gt;&lt;code&gt;ale&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/alpha.lua&quot;&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/barbar.lua&quot;&gt;&lt;code&gt;barbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/blink.lua&quot;&gt;&lt;code&gt;blink&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/bufferline.lua&quot;&gt;&lt;code&gt;bufferline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/cmp.lua&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Exafunction/codeium.nvim&quot;&gt;codeium.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/codeium.lua&quot;&gt;&lt;code&gt;codeium&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/copilot.lua&quot;&gt;&lt;code&gt;copilot&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dap.lua&quot;&gt;&lt;code&gt;dap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dashboard.lua&quot;&gt;&lt;code&gt;dashboard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/flash.lua&quot;&gt;&lt;code&gt;flash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/fzf.lua&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitgutter.lua&quot;&gt;&lt;code&gt;gitgutter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitsigns.lua&quot;&gt;&lt;code&gt;gitsigns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lambdalisue/glyph-palette.vim&quot;&gt;glyph-palette.vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/glyph-palette.lua&quot;&gt;&lt;code&gt;glyph-palette&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/grug-far.lua&quot;&gt;&lt;code&gt;grug-far&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/headlines.lua&quot;&gt;&lt;code&gt;headlines&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/hop.lua&quot;&gt;&lt;code&gt;hop&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/illuminate.lua&quot;&gt;&lt;code&gt;illuminate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indent-blankline.lua&quot;&gt;&lt;code&gt;indent-blankline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/indentmini.nvim&quot;&gt;indentmini.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indentmini.lua&quot;&gt;&lt;code&gt;indentmini&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lazy.lua&quot;&gt;&lt;code&gt;lazy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/leap.lua&quot;&gt;&lt;code&gt;leap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lspsaga.lua&quot;&gt;&lt;code&gt;lspsaga&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.animate&quot;&gt;mini.animate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_animate.lua&quot;&gt;&lt;code&gt;mini_animate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.clue&quot;&gt;mini.clue&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_clue.lua&quot;&gt;&lt;code&gt;mini_clue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.completion&quot;&gt;mini.completion&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_completion.lua&quot;&gt;&lt;code&gt;mini_completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.cursorword&quot;&gt;mini.cursorword&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_cursorword.lua&quot;&gt;&lt;code&gt;mini_cursorword&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_deps.lua&quot;&gt;&lt;code&gt;mini_deps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_diff.lua&quot;&gt;&lt;code&gt;mini_diff&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.files&quot;&gt;mini.files&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_files.lua&quot;&gt;&lt;code&gt;mini_files&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.hipatterns&quot;&gt;mini.hipatterns&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_hipatterns.lua&quot;&gt;&lt;code&gt;mini_hipatterns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_icons.lua&quot;&gt;&lt;code&gt;mini_icons&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.indentscope&quot;&gt;mini.indentscope&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_indentscope.lua&quot;&gt;&lt;code&gt;mini_indentscope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.jump&quot;&gt;mini.jump&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_jump.lua&quot;&gt;&lt;code&gt;mini_jump&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.map&quot;&gt;mini.map&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_map.lua&quot;&gt;&lt;code&gt;mini_map&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.notify&quot;&gt;mini.notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_notify.lua&quot;&gt;&lt;code&gt;mini_notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.operators&quot;&gt;mini.operators&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_operators.lua&quot;&gt;&lt;code&gt;mini_operators&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick&quot;&gt;mini.pick&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_pick.lua&quot;&gt;&lt;code&gt;mini_pick&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.starter&quot;&gt;mini.starter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_starter.lua&quot;&gt;&lt;code&gt;mini_starter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.statusline&quot;&gt;mini.statusline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_statusline.lua&quot;&gt;&lt;code&gt;mini_statusline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.surround&quot;&gt;mini.surround&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_surround.lua&quot;&gt;&lt;code&gt;mini_surround&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.tabline&quot;&gt;mini.tabline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_tabline.lua&quot;&gt;&lt;code&gt;mini_tabline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.test&quot;&gt;mini.test&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_test.lua&quot;&gt;&lt;code&gt;mini_test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.trailspace&quot;&gt;mini.trailspace&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_trailspace.lua&quot;&gt;&lt;code&gt;mini_trailspace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;nvim-navic&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/navic.lua&quot;&gt;&lt;code&gt;navic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neo-tree.lua&quot;&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neogit.lua&quot;&gt;&lt;code&gt;neogit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neotest.lua&quot;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/noice.lua&quot;&gt;&lt;code&gt;noice&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/notify.lua&quot;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/nvim-tree.lua&quot;&gt;&lt;code&gt;nvim-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/octo.lua&quot;&gt;&lt;code&gt;octo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/rainbow.lua&quot;&gt;&lt;code&gt;rainbow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/render-markdown.lua&quot;&gt;&lt;code&gt;render-markdown&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/petertriho/nvim-scrollbar&quot;&gt;nvim-scrollbar&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/scrollbar.lua&quot;&gt;&lt;code&gt;scrollbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/snacks.lua&quot;&gt;&lt;code&gt;snacks&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/sneak.lua&quot;&gt;&lt;code&gt;sneak&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/supermaven-inc/supermaven-nvim&quot;&gt;supermaven-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/supermaven.lua&quot;&gt;&lt;code&gt;supermaven&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/telescope.lua&quot;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/treesitter-context.lua&quot;&gt;&lt;code&gt;treesitter-context&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/trouble.lua&quot;&gt;&lt;code&gt;trouble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/vimwiki.lua&quot;&gt;&lt;code&gt;vimwiki&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/which-key.lua&quot;&gt;&lt;code&gt;which-key&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gbprod/yanky.nvim&quot;&gt;yanky.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/yanky.lua&quot;&gt;&lt;code&gt;yanky&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- plugins:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üç≠ Extras&lt;/summary&gt; 
 &lt;!-- extras:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Tool&lt;/th&gt; 
    &lt;th&gt;Extra&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://git.sr.ht/~rjarry/aerc/&quot;&gt;Aerc&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/aerc&quot;&gt;extras/aerc&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/alacritty&quot;&gt;extras/alacritty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;Delta&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/delta&quot;&gt;extras/delta&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://betterdiscord.app/&quot;&gt;(Better-)Discord&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/discord&quot;&gt;extras/discord&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://dunst-project.org/&quot;&gt;Dunst&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/dunst&quot;&gt;extras/dunst&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish&quot;&gt;extras/fish&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/interactive.html#syntax-highlighting&quot;&gt;Fish Themes&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish_themes&quot;&gt;extras/fish_themes&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;Foot&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/foot&quot;&gt;extras/foot&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/fuzzel&quot;&gt;Fuzzel&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fuzzel&quot;&gt;extras/fuzzel&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;Fzf&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fzf&quot;&gt;extras/fzf&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ghostty-org/ghostty&quot;&gt;Ghostty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/ghostty&quot;&gt;extras/ghostty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/extrawurst/gitui&quot;&gt;GitUI&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gitui&quot;&gt;extras/gitui&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-terminal&quot;&gt;GNOME Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gnome_terminal&quot;&gt;extras/gnome_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://helix-editor.com/&quot;&gt;Helix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/helix&quot;&gt;extras/helix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/iterm&quot;&gt;extras/iterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/kitty&quot;&gt;extras/kitty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;Lazygit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lazygit&quot;&gt;extras/lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.lua.org&quot;&gt;Lua Table for testing&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua&quot;&gt;extras/lua&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://prismjs.com&quot;&gt;Prism&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/prism&quot;&gt;extras/prism&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://f1bonacc1.github.io/process-compose/&quot;&gt;process-compose&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/process_compose&quot;&gt;extras/process_compose&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/slack&quot;&gt;extras/slack&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/aome510/spotify-player&quot;&gt;Spotify Player&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/spotify_player&quot;&gt;extras/spotify_player&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/themes&quot;&gt;Sublime Text&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/sublime&quot;&gt;extras/sublime&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gnome-terminator.readthedocs.io/en/latest/config.html&quot;&gt;Terminator&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/terminator&quot;&gt;extras/terminator&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://termux.dev/&quot;&gt;Termux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/termux&quot;&gt;extras/termux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gnunn1/tilix&quot;&gt;Tilix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tilix&quot;&gt;extras/tilix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;Tmux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tmux&quot;&gt;extras/tmux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimhelp.org/&quot;&gt;Vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vim&quot;&gt;extras/vim&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimium.github.io/&quot;&gt;Vimium&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vimium&quot;&gt;extras/vimium&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/wezterm&quot;&gt;extras/wezterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://aka.ms/terminal-documentation&quot;&gt;Windows Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/windows_terminal&quot;&gt;extras/windows_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://docs.xfce.org/apps/terminal/advanced&quot;&gt;Xfce Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xfceterm&quot;&gt;extras/xfceterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/X_resources&quot;&gt;Xresources&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xresources&quot;&gt;extras/xresources&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/sxyazi/yazi&quot;&gt;Yazi&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/yazi&quot;&gt;extras/yazi&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://pwmt.org/projects/zathura/&quot;&gt;Zathura&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zathura&quot;&gt;extras/zathura&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://zellij.dev/&quot;&gt;Zellij&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zellij&quot;&gt;extras/zellij&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- extras:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &amp;gt;= &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.8.0&quot;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Install the theme with your preferred package manager, such as &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/tokyonight.nvim&quot;,
  lazy = false,
  priority = 1000,
  opts = {},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd[[colorscheme tokyonight]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme tokyonight

&quot; There are also colorschemes for the different styles.
colorscheme tokyonight-night
colorscheme tokyonight-storm
colorscheme tokyonight-day
colorscheme tokyonight-moon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some plugins need extra configuration to work with &lt;strong&gt;TokyoNight&lt;/strong&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click here for more details&lt;/summary&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;Barbecue&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;barbecue&#39;).setup {
  -- ... your barbecue config
  theme = &#39;tokyonight&#39;,
  -- ... your barbecue config
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;Lualine&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;lualine&#39;).setup {
  options = {
    -- ... your lualine config
    theme = &#39;tokyonight&#39;
    -- ... your lualine config
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;Lightline&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Vim Script
let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Set the configuration &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The theme offers four styles: &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#storm&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#moon&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#night&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt; style is used when &lt;code&gt;{ style = &quot;day&quot; }&lt;/code&gt; is passed to &lt;code&gt;setup(options)&lt;/code&gt; or when &lt;code&gt;vim.o.background = &quot;light&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; uses the default options, unless &lt;code&gt;setup&lt;/code&gt; is explicitly called.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class tokyonight.Config
---@field on_colors fun(colors: ColorScheme)
---@field on_highlights fun(highlights: tokyonight.Highlights, colors: ColorScheme)
M.defaults = {
  style = &quot;moon&quot;, -- The theme comes in three styles, `storm`, a darker variant `night` and `day`
  light_style = &quot;day&quot;, -- The theme is used when the background is set to light
  transparent = false, -- Enable this to disable setting the background color
  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim
  styles = {
    -- Style to be applied to different syntax groups
    -- Value is any valid attr-list value for `:help nvim_set_hl`
    comments = { italic = true },
    keywords = { italic = true },
    functions = {},
    variables = {},
    -- Background styles. Can be &quot;dark&quot;, &quot;transparent&quot; or &quot;normal&quot;
    sidebars = &quot;dark&quot;, -- style for sidebars, see below
    floats = &quot;dark&quot;, -- style for floating windows
  },
  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
  dim_inactive = false, -- dims inactive windows
  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

  --- You can override specific color groups to use other groups or a hex color
  --- function will be called with a ColorScheme table
  ---@param colors ColorScheme
  on_colors = function(colors) end,

  --- You can override specific highlights to use other groups or a hex color
  --- function will be called with a Highlights and ColorScheme table
  ---@param highlights tokyonight.Highlights
  ---@param colors ColorScheme
  on_highlights = function(highlights, colors) end,

  cache = true, -- When set to true, the theme will be cached for better performance

  ---@type table&amp;lt;string, boolean|{enabled:boolean}&amp;gt;
  plugins = {
    -- enable all plugins when not using lazy.nvim
    -- set to false to manually enable/disable plugins
    all = package.loaded.lazy == nil,
    -- uses your plugin manager to automatically enable needed plugins
    -- currently only lazy.nvim is supported
    auto = true,
    -- add any plugins here that you want to enable
    -- for all possible plugins, see:
    --   * https://github.com/folke/tokyonight.nvim/tree/main/lua/tokyonight/groups
    -- telescope = true,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;ü™ì Overriding Colors &amp;amp; Highlight Groups&lt;/h2&gt; 
&lt;p&gt;How the highlight groups are calculated:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; are determined based on your configuration, with the ability to override them using &lt;code&gt;config.on_colors(colors)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;These &lt;code&gt;colors&lt;/code&gt; are utilized to generate the highlight groups.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config.on_highlights(highlights, colors)&lt;/code&gt; can be used to override highlight groups.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For default values of &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;highlights&lt;/code&gt;, please consult the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_storm.lua&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_moon.lua&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_night.lua&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_day.lua&quot;&gt;day&lt;/a&gt; themes.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Settings &amp;amp; Changing Colors&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  -- use the night style
  style = &quot;night&quot;,
  -- disable italic for functions
  styles = {
    functions = {}
  },
  -- Change the &quot;hint&quot; color to the &quot;orange&quot; color, and make the &quot;error&quot; color bright red
  on_colors = function(colors)
    colors.hint = colors.orange
    colors.error = &quot;#ff0000&quot;
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Borderless Telescope&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  on_highlights = function(hl, c)
    local prompt = &quot;#2d3149&quot;
    hl.TelescopeNormal = {
      bg = c.bg_dark,
      fg = c.fg_dark,
    }
    hl.TelescopeBorder = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopePromptNormal = {
      bg = prompt,
    }
    hl.TelescopePromptBorder = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePromptTitle = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePreviewTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopeResultsTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fix &lt;code&gt;undercurls&lt;/code&gt; in Tmux&lt;/summary&gt; 
 &lt;p&gt;To have undercurls show up and in color, add the following to your &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;Tmux&lt;/a&gt; configuration file:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Undercurl
set -g default-terminal &quot;${TERM}&quot;
set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support
set -as terminal-overrides &#39;,*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;üç≠ Extras&lt;/h2&gt; 
&lt;p&gt;Extra color configs for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;, &lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;foot&lt;/a&gt; can be found in &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&quot;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can easily use the color palette for other plugins inside your &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local colors = require(&quot;tokyonight.colors&quot;).setup() -- pass in any of the config options as explained above
local util = require(&quot;tokyonight.util&quot;)

aplugin.background = colors.bg_dark
aplugin.my_error = util.lighten(colors.red1, 0.3) -- number between 0 and 1. 0 results in white, 1 results in red1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üî• Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests are welcome.&lt;/p&gt; 
&lt;p&gt;For the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; 
&lt;p&gt;How to add a new extra template:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the following command to generate new &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes from the tokyonight plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./scripts/build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Check the newly created themes in the &lt;code&gt;extra/&lt;/code&gt; directory. Please &lt;strong&gt;DO NOT&lt;/strong&gt; commit them, as they are already automatically built by the CI.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot; /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;üí§ lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üî• Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;üí§ Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üöÄ Blazingly fast&lt;/li&gt; 
 &lt;li&gt;üßπ Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;üì¶ Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;üìÇ File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
‚îú‚îÄ‚îÄ lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ config
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ autocmds.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ keymaps.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ lazy.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ options.lua
‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ plugins
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ spec1.lua
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ **
‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ spec2.lua
‚îî‚îÄ‚îÄ init.lua
&lt;/pre&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/snacks.nvim</title>
      <link>https://github.com/folke/snacks.nvim</link>
      <description>&lt;p&gt;üçø A collection of QoL plugins for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçø &lt;code&gt;snacks.nvim&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;A collection of small QoL plugins for Neovim.&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;!-- toc:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Snack&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Setup&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/animate.md&quot;&gt;animate&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Efficient animations including over 45 easing functions &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bigfile.md&quot;&gt;bigfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Deal with big files&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bufdelete.md&quot;&gt;bufdelete&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Delete buffers without disrupting window layout&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dashboard.md&quot;&gt;dashboard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Beautiful declarative dashboards&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/debug.md&quot;&gt;debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty inspect &amp;amp; backtraces for debugging&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dim.md&quot;&gt;dim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Focus on the active scope by dimming the rest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/explorer.md&quot;&gt;explorer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A file explorer (picker in disguise)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/git.md&quot;&gt;git&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Git utilities&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/gitbrowse.md&quot;&gt;gitbrowse&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open the current file, branch, commit, or repo in a browser (e.g. GitHub, GitLab, Bitbucket)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;image&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Image viewer using Kitty Graphics Protocol, supported by &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;wezterm&lt;/code&gt; and &lt;code&gt;ghostty&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/indent.md&quot;&gt;indent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Indent guides and scopes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/input.md&quot;&gt;input&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Better &lt;code&gt;vim.ui.input&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/layout.md&quot;&gt;layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Window layouts&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/lazygit.md&quot;&gt;lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open LazyGit in a float, auto-configure colorscheme and integration with Neovim&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notifier.md&quot;&gt;notifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notify.md&quot;&gt;notify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions to work with Neovim&#39;s &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md&quot;&gt;picker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Picker for selecting items&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/profiler.md&quot;&gt;profiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Neovim lua profiler&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/quickfile.md&quot;&gt;quickfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When doing &lt;code&gt;nvim somefile.txt&lt;/code&gt;, it will render the file as quickly as possible, before loading your plugins.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&quot;&gt;rename&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;LSP-integrated file renaming with support for plugins like &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/echasnovski/mini.files&quot;&gt;mini.files&lt;/a&gt;.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scope.md&quot;&gt;scope&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scope detection, text objects and jumping based on treesitter or indent&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scratch.md&quot;&gt;scratch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scratch buffers with a persistent file&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scroll.md&quot;&gt;scroll&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Smooth scrolling&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/statuscolumn.md&quot;&gt;statuscolumn&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty status column&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/terminal.md&quot;&gt;terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and toggle floating/split terminals&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/toggle.md&quot;&gt;toggle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle keymaps integrated with which-key icons / colors&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/util.md&quot;&gt;util&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions for Snacks &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/win.md&quot;&gt;win&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and manage floating windows or splits&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/words.md&quot;&gt;words&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Auto-show LSP references and quickly navigate between them&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/zen.md&quot;&gt;zen&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Zen mode ‚Ä¢ distraction-free coding&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- toc:end --&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] A couple of plugins &lt;strong&gt;require&lt;/strong&gt; &lt;code&gt;snacks.nvim&lt;/code&gt; to be set-up early. Setup creates some autocmds and does not load any plugins. Check the &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/lua/snacks/init.lua&quot;&gt;code&lt;/a&gt; to see what it does.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!caution] You need to explicitly pass options for a plugin or set &lt;code&gt;enabled = true&lt;/code&gt; to enable it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] It&#39;s a good idea to run &lt;code&gt;:checkhealth snacks&lt;/code&gt; to see if everything is set up correctly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an in-depth setup of &lt;code&gt;snacks.nvim&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, check the &lt;a href=&quot;https://github.com/folke/snacks.nvim?tab=readme-ov-file#-usage&quot;&gt;example&lt;/a&gt; below.&lt;/p&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;p&gt;Please refer to the readme of each plugin for their specific configuration.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class snacks.Config
---@field animate? snacks.animate.Config
---@field bigfile? snacks.bigfile.Config
---@field dashboard? snacks.dashboard.Config
---@field dim? snacks.dim.Config
---@field explorer? snacks.explorer.Config
---@field gitbrowse? snacks.gitbrowse.Config
---@field image? snacks.image.Config
---@field indent? snacks.indent.Config
---@field input? snacks.input.Config
---@field layout? snacks.layout.Config
---@field lazygit? snacks.lazygit.Config
---@field notifier? snacks.notifier.Config
---@field picker? snacks.picker.Config
---@field profiler? snacks.profiler.Config
---@field quickfile? snacks.quickfile.Config
---@field scope? snacks.scope.Config
---@field scratch? snacks.scratch.Config
---@field scroll? snacks.scroll.Config
---@field statuscolumn? snacks.statuscolumn.Config
---@field terminal? snacks.terminal.Config
---@field toggle? snacks.toggle.Config
---@field win? snacks.win.Config
---@field words? snacks.words.Config
---@field zen? snacks.zen.Config
---@field styles? table&amp;lt;string, snacks.win.Config&amp;gt;
---@field image? snacks.image.Config|{}
{
  image = {
    -- define these here, so that we don&#39;t need to load the image module
    formats = {
      &quot;png&quot;,
      &quot;jpg&quot;,
      &quot;jpeg&quot;,
      &quot;gif&quot;,
      &quot;bmp&quot;,
      &quot;webp&quot;,
      &quot;tiff&quot;,
      &quot;heic&quot;,
      &quot;avif&quot;,
      &quot;mp4&quot;,
      &quot;mov&quot;,
      &quot;avi&quot;,
      &quot;mkv&quot;,
      &quot;webm&quot;,
      &quot;pdf&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;p&gt;Some plugins have examples in their documentation. You can include them in your config like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  dashboard = { example = &quot;github&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to customize options for a plugin after they have been resolved, you can use the &lt;code&gt;config&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  gitbrowse = {
    config = function(opts, defaults)
      table.insert(opts.remote_patterns, { &quot;my&quot;, &quot;custom pattern&quot; })
    end
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;p&gt;See the example below for how to configure &lt;code&gt;snacks.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- example:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    notifier = {
      enabled = true,
      timeout = 3000,
    },
    picker = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    styles = {
      notification = {
        -- wo = { wrap = true } -- Wrap notifications
      }
    }
  },
  keys = {
    -- Top Pickers &amp;amp; Explorer
    { &quot;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&quot;, function() Snacks.picker.smart() end, desc = &quot;Smart Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;,&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;/&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;:&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;, function() Snacks.picker.notifications() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;e&quot;, function() Snacks.explorer() end, desc = &quot;File Explorer&quot; },
    -- find
    { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;fc&quot;, function() Snacks.picker.files({ cwd = vim.fn.stdpath(&quot;config&quot;) }) end, desc = &quot;Find Config File&quot; },
    { &quot;&amp;lt;leader&amp;gt;ff&quot;, function() Snacks.picker.files() end, desc = &quot;Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fg&quot;, function() Snacks.picker.git_files() end, desc = &quot;Find Git Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fp&quot;, function() Snacks.picker.projects() end, desc = &quot;Projects&quot; },
    { &quot;&amp;lt;leader&amp;gt;fr&quot;, function() Snacks.picker.recent() end, desc = &quot;Recent&quot; },
    -- git
    { &quot;&amp;lt;leader&amp;gt;gb&quot;, function() Snacks.picker.git_branches() end, desc = &quot;Git Branches&quot; },
    { &quot;&amp;lt;leader&amp;gt;gl&quot;, function() Snacks.picker.git_log() end, desc = &quot;Git Log&quot; },
    { &quot;&amp;lt;leader&amp;gt;gL&quot;, function() Snacks.picker.git_log_line() end, desc = &quot;Git Log Line&quot; },
    { &quot;&amp;lt;leader&amp;gt;gs&quot;, function() Snacks.picker.git_status() end, desc = &quot;Git Status&quot; },
    { &quot;&amp;lt;leader&amp;gt;gS&quot;, function() Snacks.picker.git_stash() end, desc = &quot;Git Stash&quot; },
    { &quot;&amp;lt;leader&amp;gt;gd&quot;, function() Snacks.picker.git_diff() end, desc = &quot;Git Diff (Hunks)&quot; },
    { &quot;&amp;lt;leader&amp;gt;gf&quot;, function() Snacks.picker.git_log_file() end, desc = &quot;Git Log File&quot; },
    -- Grep
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sB&quot;, function() Snacks.picker.grep_buffers() end, desc = &quot;Grep Open Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;sg&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;sw&quot;, function() Snacks.picker.grep_word() end, desc = &quot;Visual selection or word&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
    -- search
    { &#39;&amp;lt;leader&amp;gt;s&quot;&#39;, function() Snacks.picker.registers() end, desc = &quot;Registers&quot; },
    { &#39;&amp;lt;leader&amp;gt;s/&#39;, function() Snacks.picker.search_history() end, desc = &quot;Search History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sa&quot;, function() Snacks.picker.autocmds() end, desc = &quot;Autocmds&quot; },
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sc&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sC&quot;, function() Snacks.picker.commands() end, desc = &quot;Commands&quot; },
    { &quot;&amp;lt;leader&amp;gt;sd&quot;, function() Snacks.picker.diagnostics() end, desc = &quot;Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sD&quot;, function() Snacks.picker.diagnostics_buffer() end, desc = &quot;Buffer Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sh&quot;, function() Snacks.picker.help() end, desc = &quot;Help Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sH&quot;, function() Snacks.picker.highlights() end, desc = &quot;Highlights&quot; },
    { &quot;&amp;lt;leader&amp;gt;si&quot;, function() Snacks.picker.icons() end, desc = &quot;Icons&quot; },
    { &quot;&amp;lt;leader&amp;gt;sj&quot;, function() Snacks.picker.jumps() end, desc = &quot;Jumps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sk&quot;, function() Snacks.picker.keymaps() end, desc = &quot;Keymaps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sl&quot;, function() Snacks.picker.loclist() end, desc = &quot;Location List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sm&quot;, function() Snacks.picker.marks() end, desc = &quot;Marks&quot; },
    { &quot;&amp;lt;leader&amp;gt;sM&quot;, function() Snacks.picker.man() end, desc = &quot;Man Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sp&quot;, function() Snacks.picker.lazy() end, desc = &quot;Search for Plugin Spec&quot; },
    { &quot;&amp;lt;leader&amp;gt;sq&quot;, function() Snacks.picker.qflist() end, desc = &quot;Quickfix List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sR&quot;, function() Snacks.picker.resume() end, desc = &quot;Resume&quot; },
    { &quot;&amp;lt;leader&amp;gt;su&quot;, function() Snacks.picker.undo() end, desc = &quot;Undo History&quot; },
    { &quot;&amp;lt;leader&amp;gt;uC&quot;, function() Snacks.picker.colorschemes() end, desc = &quot;Colorschemes&quot; },
    -- LSP
    { &quot;gd&quot;, function() Snacks.picker.lsp_definitions() end, desc = &quot;Goto Definition&quot; },
    { &quot;gD&quot;, function() Snacks.picker.lsp_declarations() end, desc = &quot;Goto Declaration&quot; },
    { &quot;gr&quot;, function() Snacks.picker.lsp_references() end, nowait = true, desc = &quot;References&quot; },
    { &quot;gI&quot;, function() Snacks.picker.lsp_implementations() end, desc = &quot;Goto Implementation&quot; },
    { &quot;gy&quot;, function() Snacks.picker.lsp_type_definitions() end, desc = &quot;Goto T[y]pe Definition&quot; },
    { &quot;&amp;lt;leader&amp;gt;ss&quot;, function() Snacks.picker.lsp_symbols() end, desc = &quot;LSP Symbols&quot; },
    { &quot;&amp;lt;leader&amp;gt;sS&quot;, function() Snacks.picker.lsp_workspace_symbols() end, desc = &quot;LSP Workspace Symbols&quot; },
    -- Other
    { &quot;&amp;lt;leader&amp;gt;z&quot;,  function() Snacks.zen() end, desc = &quot;Toggle Zen Mode&quot; },
    { &quot;&amp;lt;leader&amp;gt;Z&quot;,  function() Snacks.zen.zoom() end, desc = &quot;Toggle Zoom&quot; },
    { &quot;&amp;lt;leader&amp;gt;.&quot;,  function() Snacks.scratch() end, desc = &quot;Toggle Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;S&quot;,  function() Snacks.scratch.select() end, desc = &quot;Select Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;,  function() Snacks.notifier.show_history() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;bd&quot;, function() Snacks.bufdelete() end, desc = &quot;Delete Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;cR&quot;, function() Snacks.rename.rename_file() end, desc = &quot;Rename File&quot; },
    { &quot;&amp;lt;leader&amp;gt;gB&quot;, function() Snacks.gitbrowse() end, desc = &quot;Git Browse&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
    { &quot;&amp;lt;leader&amp;gt;gg&quot;, function() Snacks.lazygit() end, desc = &quot;Lazygit&quot; },
    { &quot;&amp;lt;leader&amp;gt;un&quot;, function() Snacks.notifier.hide() end, desc = &quot;Dismiss All Notifications&quot; },
    { &quot;&amp;lt;c-/&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;Toggle Terminal&quot; },
    { &quot;&amp;lt;c-_&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;which_key_ignore&quot; },
    { &quot;]]&quot;,         function() Snacks.words.jump(vim.v.count1) end, desc = &quot;Next Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    { &quot;[[&quot;,         function() Snacks.words.jump(-vim.v.count1) end, desc = &quot;Prev Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    {
      &quot;&amp;lt;leader&amp;gt;N&quot;,
      desc = &quot;Neovim News&quot;,
      function()
        Snacks.win({
          file = vim.api.nvim_get_runtime_file(&quot;doc/news.txt&quot;, false)[1],
          width = 0.6,
          height = 0.6,
          wo = {
            spell = false,
            wrap = false,
            signcolumn = &quot;yes&quot;,
            statuscolumn = &quot; &quot;,
            conceallevel = 3,
          },
        })
      end,
    }
  },
  init = function()
    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;VeryLazy&quot;,
      callback = function()
        -- Setup some globals for debugging (lazy-loaded)
        _G.dd = function(...)
          Snacks.debug.inspect(...)
        end
        _G.bt = function()
          Snacks.debug.backtrace()
        end
        vim.print = _G.dd -- Override print to use snacks for `:=` command

        -- Create some toggle mappings
        Snacks.toggle.option(&quot;spell&quot;, { name = &quot;Spelling&quot; }):map(&quot;&amp;lt;leader&amp;gt;us&quot;)
        Snacks.toggle.option(&quot;wrap&quot;, { name = &quot;Wrap&quot; }):map(&quot;&amp;lt;leader&amp;gt;uw&quot;)
        Snacks.toggle.option(&quot;relativenumber&quot;, { name = &quot;Relative Number&quot; }):map(&quot;&amp;lt;leader&amp;gt;uL&quot;)
        Snacks.toggle.diagnostics():map(&quot;&amp;lt;leader&amp;gt;ud&quot;)
        Snacks.toggle.line_number():map(&quot;&amp;lt;leader&amp;gt;ul&quot;)
        Snacks.toggle.option(&quot;conceallevel&quot;, { off = 0, on = vim.o.conceallevel &amp;gt; 0 and vim.o.conceallevel or 2 }):map(&quot;&amp;lt;leader&amp;gt;uc&quot;)
        Snacks.toggle.treesitter():map(&quot;&amp;lt;leader&amp;gt;uT&quot;)
        Snacks.toggle.option(&quot;background&quot;, { off = &quot;light&quot;, on = &quot;dark&quot;, name = &quot;Dark Background&quot; }):map(&quot;&amp;lt;leader&amp;gt;ub&quot;)
        Snacks.toggle.inlay_hints():map(&quot;&amp;lt;leader&amp;gt;uh&quot;)
        Snacks.toggle.indent():map(&quot;&amp;lt;leader&amp;gt;ug&quot;)
        Snacks.toggle.dim():map(&quot;&amp;lt;leader&amp;gt;uD&quot;)
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- example:end --&gt; 
&lt;h2&gt;üåà Highlight Groups&lt;/h2&gt; 
&lt;p&gt;Snacks defines &lt;strong&gt;a lot&lt;/strong&gt; of highlight groups and it&#39;s impossible to document them all.&lt;/p&gt; 
&lt;p&gt;Instead, you can use the picker to see all the highlight groups.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;Snacks.picker.highlights({pattern = &quot;hl_group:^Snacks&quot;})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>greggh/claude-code.nvim</title>
      <link>https://github.com/greggh/claude-code.nvim</link>
      <description>&lt;p&gt;Seamless integration between Claude Code AI assistant and Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Neovim Plugin&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/greggh/claude-code.nvim/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.7%2B-blueviolet?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Tests-44%20passing-success?style=flat-square&amp;amp;logo=github-actions&quot; alt=&quot;Tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/releases/tag/v0.4.2&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Version-0.4.2-blue?style=flat-square&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/greggh/claude-code.nvim?style=flat-square&amp;amp;logo=github&quot; alt=&quot;Discussions&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;A seamless integration between &lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; AI assistant and Neovim&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#features&quot;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#usage&quot;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#contributing&quot;&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/greggh/claude-code.nvim/raw/main/assets/claude-code.png?raw=true&quot; alt=&quot;Claude Code in Neovim&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This plugin was built entirely with Claude Code in a Neovim terminal, and then inside itself using Claude Code for everything!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ Toggle Claude Code in a terminal window with a single key press&lt;/li&gt; 
 &lt;li&gt;üß† Support for command-line arguments like &lt;code&gt;--continue&lt;/code&gt; and custom variants&lt;/li&gt; 
 &lt;li&gt;üîÑ Automatically detect and reload files modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;‚ö° Real-time buffer updates when files are changed externally&lt;/li&gt; 
 &lt;li&gt;üì± Customizable window position and size (including floating windows)&lt;/li&gt; 
 &lt;li&gt;ü§ñ Integration with which-key (if available)&lt;/li&gt; 
 &lt;li&gt;üìÇ Automatically uses git project root as working directory (when available)&lt;/li&gt; 
 &lt;li&gt;üß© Modular and maintainable code structure&lt;/li&gt; 
 &lt;li&gt;üìã Type annotations with LuaCATS for better IDE support&lt;/li&gt; 
 &lt;li&gt;‚úÖ Configuration validation to prevent errors&lt;/li&gt; 
 &lt;li&gt;üß™ Testing framework for reliability (44 comprehensive tests)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim 0.7.0 or later&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code CLI&lt;/a&gt; tool installed and available in your PATH&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt; (dependency for git operations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt; for version history and updates.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;greggh/claude-code.nvim&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;, -- Required for git operations
  },
  config = function()
    require(&quot;claude-code&quot;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;greggh/claude-code.nvim&#39;,
  requires = {
    &#39;nvim-lua/plenary.nvim&#39;, -- Required for git operations
  },
  config = function()
    require(&#39;claude-code&#39;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;greggh/claude-code.nvim&#39;
&quot; After installing, add this to your init.vim:
&quot; lua require(&#39;claude-code&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The plugin can be configured by passing a table to the &lt;code&gt;setup&lt;/code&gt; function. Here&#39;s the default configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  -- Terminal window settings
  window = {
    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)
    position = &quot;botright&quot;,  -- Position of the window: &quot;botright&quot;, &quot;topleft&quot;, &quot;vertical&quot;, &quot;float&quot;, etc.
    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code
    hide_numbers = true,    -- Hide line numbers in the terminal window
    hide_signcolumn = true, -- Hide the sign column in the terminal window
    
    -- Floating window configuration (only applies when position = &quot;float&quot;)
    float = {
      width = &quot;80%&quot;,        -- Width: number of columns or percentage string
      height = &quot;80%&quot;,       -- Height: number of rows or percentage string
      row = &quot;center&quot;,       -- Row position: number, &quot;center&quot;, or percentage string
      col = &quot;center&quot;,       -- Column position: number, &quot;center&quot;, or percentage string
      relative = &quot;editor&quot;,  -- Relative to: &quot;editor&quot; or &quot;cursor&quot;
      border = &quot;rounded&quot;,   -- Border style: &quot;none&quot;, &quot;single&quot;, &quot;double&quot;, &quot;rounded&quot;, &quot;solid&quot;, &quot;shadow&quot;
    },
  },
  -- File refresh settings
  refresh = {
    enable = true,           -- Enable file change detection
    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)
    timer_interval = 1000,   -- How often to check for file changes (milliseconds)
    show_notifications = true, -- Show notification when files are reloaded
  },
  -- Git project settings
  git = {
    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)
  },
  -- Shell-specific settings
  shell = {
    separator = &#39;&amp;amp;&amp;amp;&#39;,        -- Command separator used in shell commands
    pushd_cmd = &#39;pushd&#39;,     -- Command to push directory onto stack (e.g., &#39;pushd&#39; for bash/zsh, &#39;enter&#39; for nushell)
    popd_cmd = &#39;popd&#39;,       -- Command to pop directory from stack (e.g., &#39;popd&#39; for bash/zsh, &#39;exit&#39; for nushell)
  },
  -- Command settings
  command = &quot;claude&quot;,        -- Command used to launch Claude Code
  -- Command variants
  command_variants = {
    -- Conversation management
    continue = &quot;--continue&quot;, -- Resume the most recent conversation
    resume = &quot;--resume&quot;,     -- Display an interactive conversation picker

    -- Output options
    verbose = &quot;--verbose&quot;,   -- Enable verbose logging with full turn-by-turn output
  },
  -- Keymaps
  keymaps = {
    toggle = {
      normal = &quot;&amp;lt;C-,&amp;gt;&quot;,       -- Normal mode keymap for toggling Claude Code, false to disable
      terminal = &quot;&amp;lt;C-,&amp;gt;&quot;,     -- Terminal mode keymap for toggling Claude Code, false to disable
      variants = {
        continue = &quot;&amp;lt;leader&amp;gt;cC&quot;, -- Normal mode keymap for Claude Code with continue flag
        verbose = &quot;&amp;lt;leader&amp;gt;cV&quot;,  -- Normal mode keymap for Claude Code with verbose flag
      },
    },
    window_navigation = true, -- Enable window navigation keymaps (&amp;lt;C-h/j/k/l&amp;gt;)
    scrolling = true,         -- Enable scrolling keymaps (&amp;lt;C-f/b&amp;gt;) for page up/down
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; In your Vim/Neovim commands or init file:
:ClaudeCode
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Or from Lua:
vim.cmd[[ClaudeCode]]

-- Or map to a key:
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cc&#39;, &#39;&amp;lt;cmd&amp;gt;ClaudeCode&amp;lt;CR&amp;gt;&#39;, { desc = &#39;Toggle Claude Code&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;Basic command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCode&lt;/code&gt; - Toggle the Claude Code terminal window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conversation management commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeContinue&lt;/code&gt; - Resume the most recent conversation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeResume&lt;/code&gt; - Display an interactive conversation picker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Output options command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeVerbose&lt;/code&gt; - Enable verbose logging with full turn-by-turn output&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Commands are automatically generated for each entry in your &lt;code&gt;command_variants&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;h3&gt;Key Mappings&lt;/h3&gt; 
&lt;p&gt;Default key mappings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ac&lt;/code&gt; - Toggle Claude Code terminal window (normal mode)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-,&amp;gt;&lt;/code&gt; - Toggle Claude Code terminal window (both normal and terminal modes)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Variant mode mappings (if configured):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cC&lt;/code&gt; - Toggle Claude Code with --continue flag&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cV&lt;/code&gt; - Toggle Claude Code with --verbose flag&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally, when in the Claude Code terminal:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt; - Move to the window on the left&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; - Move to the window below&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; - Move to the window above&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; - Move to the window on the right&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; - Scroll full-page down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; - Scroll full-page up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: After scrolling with &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, you&#39;ll need to press the &lt;code&gt;i&lt;/code&gt; key to re-enter insert mode so you can continue typing to Claude Code.&lt;/p&gt; 
&lt;p&gt;When Claude Code modifies files that are open in Neovim, they&#39;ll be automatically reloaded.&lt;/p&gt; 
&lt;h3&gt;Floating Window Example&lt;/h3&gt; 
&lt;p&gt;To use Claude Code in a floating window:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  window = {
    position = &quot;float&quot;,
    float = {
      width = &quot;90%&quot;,      -- Take up 90% of the editor width
      height = &quot;90%&quot;,     -- Take up 90% of the editor height
      row = &quot;center&quot;,     -- Center vertically
      col = &quot;center&quot;,     -- Center horizontally
      relative = &quot;editor&quot;,
      border = &quot;double&quot;,  -- Use double border style
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How it Works&lt;/h2&gt; 
&lt;p&gt;This plugin:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Creates a terminal buffer running the Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;Sets up autocommands to detect file changes on disk&lt;/li&gt; 
 &lt;li&gt;Automatically reloads files when they&#39;re modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;Provides convenient keymaps and commands for toggling the terminal&lt;/li&gt; 
 &lt;li&gt;Automatically detects git repositories and sets working directory to the git root&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please check out our &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; for details on how to get started.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License - See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;For a complete guide on setting up a development environment, installing all required tools, and understanding the project structure, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;p&gt;The project includes comprehensive setup for development:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Complete installation instructions for all platforms in &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pre-commit hooks for code quality&lt;/li&gt; 
 &lt;li&gt;Testing framework with 44 comprehensive tests&lt;/li&gt; 
 &lt;li&gt;Linting and formatting tools&lt;/li&gt; 
 &lt;li&gt;Weekly dependency updates workflow for Claude CLI and actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run tests
make test

# Check code quality
make lint

# Set up pre-commit hooks
scripts/setup-hooks.sh

# Format code
make format
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; - Get help, share ideas, and connect with other users&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;GitHub Issues&lt;/a&gt; - Report bugs or suggest features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/pulls&quot;&gt;GitHub Pull Requests&lt;/a&gt; - Contribute to the project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; by Anthropic - This plugin was entirely built using Claude Code. Development cost: $5.42 with 17m 12.9s of API time&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;Plenary.nvim&lt;/a&gt; - Core dependency for testing framework and Git operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; - Versioning standard used in this project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt; - Code of Conduct standard&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://keepachangelog.com/&quot;&gt;Keep a Changelog&lt;/a&gt; - Changelog format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luals.github.io/wiki/annotations/&quot;&gt;LuaCATS&lt;/a&gt; - Type annotations for better IDE support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JohnnyMorganz/StyLua&quot;&gt;StyLua&lt;/a&gt; - Lua code formatter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lunarmodules/luacheck&quot;&gt;Luacheck&lt;/a&gt; - Lua static analyzer and linter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href=&quot;https://github.com/greggh&quot;&gt;Gregg Housh&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/starter</title>
      <link>https://github.com/LazyVim/starter</link>
      <description>&lt;p&gt;Starter template for LazyVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí§ LazyVim&lt;/h1&gt; 
&lt;p&gt;A starter template for &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt;LazyVim&lt;/a&gt;. Refer to the &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/flash.nvim</title>
      <link>https://github.com/folke/flash.nvim</link>
      <description>&lt;p&gt;Navigate your code with search labels, enhanced character motions and Treesitter integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚ö°flash.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;flash.nvim&lt;/code&gt; lets you navigate your code with search labels, enhanced character motions, and Treesitter integration.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Search Integration&lt;/th&gt; 
   &lt;th&gt;Standalone Jump&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/e0ac4cbc-fa54-4505-8261-43ec0505518d&quot; /&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/90af85e3-3f22-4c51-af4b-2a2488c9560b&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;Treesitter&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/379cb2de-8ec3-4acf-8811-d3590a5854b6&quot; /&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src=&quot;https://github.com/folke/flash.nvim/assets/292349/b963b05e-3d28-45ff-b43a-928a06e5f92a&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üîç &lt;strong&gt;Search Integration&lt;/strong&gt;: integrate &lt;strong&gt;flash.nvim&lt;/strong&gt; with your regular search using &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt;. Labels appear next to the matches, allowing you to quickly jump to any location. Labels are guaranteed not to exist as a continuation of the search pattern.&lt;/li&gt; 
 &lt;li&gt;‚å®Ô∏è &lt;strong&gt;type as many characters as you want&lt;/strong&gt; before using a jump label.&lt;/li&gt; 
 &lt;li&gt;‚ö° &lt;strong&gt;Enhanced &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; motions&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;üå≥ &lt;strong&gt;Treesitter Integration&lt;/strong&gt;: all parents of the Treesitter node under your cursor are highlighted with a label for quick selection of a specific Treesitter node.&lt;/li&gt; 
 &lt;li&gt;üéØ &lt;strong&gt;Jump Mode&lt;/strong&gt;: a standalone jumping mode similar to search&lt;/li&gt; 
 &lt;li&gt;üîé &lt;strong&gt;Search Modes&lt;/strong&gt;: &lt;code&gt;exact&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt; (regex), and &lt;code&gt;fuzzy&lt;/code&gt; search modes&lt;/li&gt; 
 &lt;li&gt;ü™ü &lt;strong&gt;Multi Window&lt;/strong&gt; jumping&lt;/li&gt; 
 &lt;li&gt;üåê &lt;strong&gt;Remote Actions&lt;/strong&gt;: perform motions in remote locations&lt;/li&gt; 
 &lt;li&gt;‚ö´ &lt;strong&gt;dot-repeatable&lt;/strong&gt; jumps&lt;/li&gt; 
 &lt;li&gt;üì° &lt;strong&gt;highly extensible&lt;/strong&gt;: check the &lt;a href=&quot;https://github.com/folke/flash.nvim#-examples&quot;&gt;examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìã Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;!-- setup:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/flash.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  ---@type Flash.Config
  opts = {},
  -- stylua: ignore
  keys = {
    { &quot;s&quot;, mode = { &quot;n&quot;, &quot;x&quot;, &quot;o&quot; }, function() require(&quot;flash&quot;).jump() end, desc = &quot;Flash&quot; },
    { &quot;S&quot;, mode = { &quot;n&quot;, &quot;x&quot;, &quot;o&quot; }, function() require(&quot;flash&quot;).treesitter() end, desc = &quot;Flash Treesitter&quot; },
    { &quot;r&quot;, mode = &quot;o&quot;, function() require(&quot;flash&quot;).remote() end, desc = &quot;Remote Flash&quot; },
    { &quot;R&quot;, mode = { &quot;o&quot;, &quot;x&quot; }, function() require(&quot;flash&quot;).treesitter_search() end, desc = &quot;Treesitter Search&quot; },
    { &quot;&amp;lt;c-s&amp;gt;&quot;, mode = { &quot;c&quot; }, function() require(&quot;flash&quot;).toggle() end, desc = &quot;Toggle Flash Search&quot; },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- setup:end --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏è When creating the keymaps manually either use a lua function like &lt;code&gt;function() require(&quot;flash&quot;).jump() end&lt;/code&gt; as the &lt;strong&gt;rhs&lt;/strong&gt;, or a string like &lt;code&gt;&amp;lt;cmd&amp;gt;lua require(&quot;flash&quot;).jump()&amp;lt;cr&amp;gt;&lt;/code&gt;. &lt;strong&gt;DO NOT&lt;/strong&gt; use &lt;code&gt;:lua&lt;/code&gt;, since that will break &lt;strong&gt;&lt;em&gt;dot-repeat&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;flash.nvim&lt;/strong&gt; is highly configurable. Please refer to the default settings below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Settings&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- labels = &quot;abcdefghijklmnopqrstuvwxyz&quot;,
  labels = &quot;asdfghjklqwertyuiopzxcvbnm&quot;,
  search = {
    -- search/jump in all windows
    multi_window = true,
    -- search direction
    forward = true,
    -- when `false`, find only matches in the given direction
    wrap = true,
    ---@type Flash.Pattern.Mode
    -- Each mode will take ignorecase and smartcase into account.
    -- * exact: exact match
    -- * search: regular search
    -- * fuzzy: fuzzy search
    -- * fun(str): custom function that returns a pattern
    --   For example, to only match at the beginning of a word:
    --   mode = function(str)
    --     return &quot;\\&amp;lt;&quot; .. str
    --   end,
    mode = &quot;exact&quot;,
    -- behave like `incsearch`
    incremental = false,
    -- Excluded filetypes and custom window filters
    ---@type (string|fun(win:window))[]
    exclude = {
      &quot;notify&quot;,
      &quot;cmp_menu&quot;,
      &quot;noice&quot;,
      &quot;flash_prompt&quot;,
      function(win)
        -- exclude non-focusable windows
        return not vim.api.nvim_win_get_config(win).focusable
      end,
    },
    -- Optional trigger character that needs to be typed before
    -- a jump label can be used. It&#39;s NOT recommended to set this,
    -- unless you know what you&#39;re doing
    trigger = &quot;&quot;,
    -- max pattern length. If the pattern length is equal to this
    -- labels will no longer be skipped. When it exceeds this length
    -- it will either end in a jump or terminate the search
    max_length = false, ---@type number|false
  },
  jump = {
    -- save location in the jumplist
    jumplist = true,
    -- jump position
    pos = &quot;start&quot;, ---@type &quot;start&quot; | &quot;end&quot; | &quot;range&quot;
    -- add pattern to search history
    history = false,
    -- add pattern to search register
    register = false,
    -- clear highlight after jump
    nohlsearch = false,
    -- automatically jump when there is only one match
    autojump = false,
    -- You can force inclusive/exclusive jumps by setting the
    -- `inclusive` option. By default it will be automatically
    -- set based on the mode.
    inclusive = nil, ---@type boolean?
    -- jump position offset. Not used for range jumps.
    -- 0: default
    -- 1: when pos == &quot;end&quot; and pos &amp;lt; current position
    offset = nil, ---@type number
  },
  label = {
    -- allow uppercase labels
    uppercase = true,
    -- add any labels with the correct case here, that you want to exclude
    exclude = &quot;&quot;,
    -- add a label for the first match in the current window.
    -- you can always jump to the first match with `&amp;lt;CR&amp;gt;`
    current = true,
    -- show the label after the match
    after = true, ---@type boolean|number[]
    -- show the label before the match
    before = false, ---@type boolean|number[]
    -- position of the label extmark
    style = &quot;overlay&quot;, ---@type &quot;eol&quot; | &quot;overlay&quot; | &quot;right_align&quot; | &quot;inline&quot;
    -- flash tries to re-use labels that were already assigned to a position,
    -- when typing more characters. By default only lower-case labels are re-used.
    reuse = &quot;lowercase&quot;, ---@type &quot;lowercase&quot; | &quot;all&quot; | &quot;none&quot;
    -- for the current window, label targets closer to the cursor first
    distance = true,
    -- minimum pattern length to show labels
    -- Ignored for custom labelers.
    min_pattern_length = 0,
    -- Enable this to use rainbow colors to highlight labels
    -- Can be useful for visualizing Treesitter ranges.
    rainbow = {
      enabled = false,
      -- number between 1 and 9
      shade = 5,
    },
    -- With `format`, you can change how the label is rendered.
    -- Should return a list of `[text, highlight]` tuples.
    ---@class Flash.Format
    ---@field state Flash.State
    ---@field match Flash.Match
    ---@field hl_group string
    ---@field after boolean
    ---@type fun(opts:Flash.Format): string[][]
    format = function(opts)
      return { { opts.match.label, opts.hl_group } }
    end,
  },
  highlight = {
    -- show a backdrop with hl FlashBackdrop
    backdrop = true,
    -- Highlight the search matches
    matches = true,
    -- extmark priority
    priority = 5000,
    groups = {
      match = &quot;FlashMatch&quot;,
      current = &quot;FlashCurrent&quot;,
      backdrop = &quot;FlashBackdrop&quot;,
      label = &quot;FlashLabel&quot;,
    },
  },
  -- action to perform when picking a label.
  -- defaults to the jumping logic depending on the mode.
  ---@type fun(match:Flash.Match, state:Flash.State)|nil
  action = nil,
  -- initial pattern to use when opening flash
  pattern = &quot;&quot;,
  -- When `true`, flash will try to continue the last search
  continue = false,
  -- Set config to a function to dynamically change the config
  config = nil, ---@type fun(opts:Flash.Config)|nil
  -- You can override the default options for a specific mode.
  -- Use it with `require(&quot;flash&quot;).jump({mode = &quot;forward&quot;})`
  ---@type table&amp;lt;string, Flash.Config&amp;gt;
  modes = {
    -- options used when flash is activated through
    -- a regular search with `/` or `?`
    search = {
      -- when `true`, flash will be activated during regular search by default.
      -- You can always toggle when searching with `require(&quot;flash&quot;).toggle()`
      enabled = false,
      highlight = { backdrop = false },
      jump = { history = true, register = true, nohlsearch = true },
      search = {
        -- `forward` will be automatically set to the search direction
        -- `mode` is always set to `search`
        -- `incremental` is set to `true` when `incsearch` is enabled
      },
    },
    -- options used when flash is activated through
    -- `f`, `F`, `t`, `T`, `;` and `,` motions
    char = {
      enabled = true,
      -- dynamic configuration for ftFT motions
      config = function(opts)
        -- autohide flash when in operator-pending mode
        opts.autohide = opts.autohide or (vim.fn.mode(true):find(&quot;no&quot;) and vim.v.operator == &quot;y&quot;)

        -- disable jump labels when not enabled, when using a count,
        -- or when recording/executing registers
        opts.jump_labels = opts.jump_labels
          and vim.v.count == 0
          and vim.fn.reg_executing() == &quot;&quot;
          and vim.fn.reg_recording() == &quot;&quot;

        -- Show jump labels only in operator-pending mode
        -- opts.jump_labels = vim.v.count == 0 and vim.fn.mode(true):find(&quot;o&quot;)
      end,
      -- hide after jump when not using jump labels
      autohide = false,
      -- show jump labels
      jump_labels = false,
      -- set to `false` to use the current line only
      multi_line = true,
      -- When using jump labels, don&#39;t use these keys
      -- This allows using those keys directly after the motion
      label = { exclude = &quot;hjkliardc&quot; },
      -- by default all keymaps are enabled, but you can disable some of them,
      -- by removing them from the list.
      -- If you rather use another key, you can map them
      -- to something else, e.g., { [&quot;;&quot;] = &quot;L&quot;, [&quot;,&quot;] = H }
      keys = { &quot;f&quot;, &quot;F&quot;, &quot;t&quot;, &quot;T&quot;, &quot;;&quot;, &quot;,&quot; },
      ---@alias Flash.CharActions table&amp;lt;string, &quot;next&quot; | &quot;prev&quot; | &quot;right&quot; | &quot;left&quot;&amp;gt;
      -- The direction for `prev` and `next` is determined by the motion.
      -- `left` and `right` are always left and right.
      char_actions = function(motion)
        return {
          [&quot;;&quot;] = &quot;next&quot;, -- set to `right` to always go right
          [&quot;,&quot;] = &quot;prev&quot;, -- set to `left` to always go left
          -- clever-f style
          [motion:lower()] = &quot;next&quot;,
          [motion:upper()] = &quot;prev&quot;,
          -- jump2d style: same case goes next, opposite case goes prev
          -- [motion] = &quot;next&quot;,
          -- [motion:match(&quot;%l&quot;) and motion:upper() or motion:lower()] = &quot;prev&quot;,
        }
      end,
      search = { wrap = false },
      highlight = { backdrop = true },
      jump = {
        register = false,
        -- when using jump labels, set to &#39;true&#39; to automatically jump
        -- or execute a motion when there is only one match
        autojump = false,
      },
    },
    -- options used for treesitter selections
    -- `require(&quot;flash&quot;).treesitter()`
    treesitter = {
      labels = &quot;abcdefghijklmnopqrstuvwxyz&quot;,
      jump = { pos = &quot;range&quot;, autojump = true },
      search = { incremental = false },
      label = { before = true, after = true, style = &quot;inline&quot; },
      highlight = {
        backdrop = false,
        matches = false,
      },
    },
    treesitter_search = {
      jump = { pos = &quot;range&quot; },
      search = { multi_window = true, wrap = true, incremental = false },
      remote_op = { restore = true },
      label = { before = true, after = true, style = &quot;inline&quot; },
    },
    -- options used for remote flash
    remote = {
      remote_op = { restore = true, motion = true },
    },
  },
  -- options for the floating window that shows the prompt,
  -- for regular jumps
  -- `require(&quot;flash&quot;).prompt()` is always available to get the prompt text
  prompt = {
    enabled = true,
    prefix = { { &quot;‚ö°&quot;, &quot;FlashPromptIcon&quot; } },
    win_config = {
      relative = &quot;editor&quot;,
      width = 1, -- when &amp;lt;=1 it&#39;s a percentage of the editor width
      height = 1,
      row = -1, -- when negative it&#39;s an offset from the bottom
      col = 0, -- when negative it&#39;s an offset from the right
      zindex = 1000,
    },
  },
  -- options for remote operator pending mode
  remote_op = {
    -- restore window views and cursor position
    -- after doing a remote operation
    restore = false,
    -- For `jump.pos = &quot;range&quot;`, this setting is ignored.
    -- `true`: always enter a new motion when doing a remote operation
    -- `false`: use the window&#39;s cursor position and jump target
    -- `nil`: act as `true` for remote windows, `false` for the current window
    motion = false,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Treesitter&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).treesitter(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;Treesitter&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;use a jump label, or use &lt;code&gt;;&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; to increase/decrease the selection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;regular search&lt;/strong&gt;: search as you normally do, but enhanced with jump labels. You need to set &lt;code&gt;opts.modes.search.enabled = true&lt;/code&gt;, or toggle it with &lt;code&gt;require(&quot;flash&quot;).toggle()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; motions:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;After typing &lt;code&gt;f{char}&lt;/code&gt; or &lt;code&gt;F{char},&lt;/code&gt; you can repeat the motion with &lt;code&gt;f&lt;/code&gt; or go to the previous match with &lt;code&gt;F&lt;/code&gt; to undo a jump.&lt;/li&gt; 
   &lt;li&gt;Similarly, after typing &lt;code&gt;t{char}&lt;/code&gt; or &lt;code&gt;T{char},&lt;/code&gt; you can repeat the motion with &lt;code&gt;t&lt;/code&gt; or go to the previous match with &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You can also go to the next match with &lt;code&gt;;&lt;/code&gt; or previous match with &lt;code&gt;,&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Any highlights clear automatically when moving, changing buffers, or pressing &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;toggle Search&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).toggle(boolean?)&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;toggles &lt;strong&gt;flash&lt;/strong&gt; on or off while using regular search&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Treesitter Search&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).treesitter_search(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;Treesitter Search&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;combination of &lt;strong&gt;Treesitter&lt;/strong&gt; and &lt;strong&gt;Search&lt;/strong&gt; modes&lt;/li&gt; 
   &lt;li&gt;do something like &lt;code&gt;yR&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;you can now start typing a search pattern.&lt;/li&gt; 
   &lt;li&gt;arround your matches, all the surrounding Treesitter nodes will be labeled.&lt;/li&gt; 
   &lt;li&gt;select a label to perform the operator on the new selection&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;remote&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).remote(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;remote&lt;/strong&gt; mode&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;equivalent to:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  remote_op = {
    restore = true,
    motion = true,
  },
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;this is only useful in operator pending mode.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;For example, press &lt;code&gt;yr&lt;/code&gt; to start yanking and open flash&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;select a label to set the cursor position&lt;/li&gt; 
     &lt;li&gt;perform any motion, like &lt;code&gt;iw&lt;/code&gt; or even start flash Treesitter with &lt;code&gt;S&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;the yank will be performed on the new selection&lt;/li&gt; 
     &lt;li&gt;you&#39;ll be back in the original window / position&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also configure the &lt;code&gt;remote_op&lt;/code&gt; options by default, so that &lt;code&gt;ys&lt;/code&gt;, behaves like &lt;code&gt;yr&lt;/code&gt; for remote operations&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  remote_op = {
    restore = true,
    motion = nil,
  },
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;jump&lt;/strong&gt;: &lt;code&gt;require(&quot;flash&quot;).jump(opts?)&lt;/code&gt; opens &lt;strong&gt;flash&lt;/strong&gt; with the given options&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;type any number of characters before typing a jump label&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt;: some functionality is changed/disabled when running &lt;strong&gt;flash&lt;/strong&gt; in &lt;strong&gt;VS Code&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt; is disabled. You can use &lt;code&gt;require(&quot;flash&quot;).prompt()&lt;/code&gt; to get the prompt text and integrate it into the statusline.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;highlights&lt;/code&gt; are set to different defaults that will actually work in VS Code&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì° API&lt;/h2&gt; 
&lt;p&gt;The options for &lt;code&gt;require(&quot;flash&quot;).jump(opts?)&lt;/code&gt;, are the same as those in the config section, but can additionally have the following fields:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;matcher&lt;/code&gt;: a custom function that generates matches for a given window&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;labeler&lt;/code&gt;: a custom function to label matches&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also add labels in the &lt;code&gt;matcher&lt;/code&gt; function and then set &lt;code&gt;labeler&lt;/code&gt; to an empty function &lt;code&gt;labeler = function() end&lt;/code&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Type Definitions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type FlashMatcher = (win: number, state: FlashState) =&amp;gt; FlashMatch[];
type FlashLabeler = (matches: FlashMatch[], state: FlashState) =&amp;gt; void;

interface FlashMatch {
  win: number;
  pos: [number, number]; // (1,0)-indexed
  end_pos: [number, number]; // (1,0)-indexed
  label?: string | false; // set to false to never show a label for this match
  highlight?: boolean; // override opts.highlight.matches for this match
}

// Check the code for the full definition
// of Flash.State at `lua/flash/state.lua`
type FlashState = {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;üí° Examples&lt;/h2&gt; 
&lt;details&gt;
 &lt;summary&gt;Forward search only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { forward = true, wrap = false, multi_window = false },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Backward search only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { forward = false, wrap = false, multi_window = false },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Show diagnostics at target, without changing cursor position&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  action = function(match, state)
    vim.api.nvim_win_call(match.win, function()
      vim.api.nvim_win_set_cursor(match.win, match.pos)
      vim.diagnostic.open_float()
    end)
    state:restore()
  end,
})

-- More advanced example that also highlights diagnostics:
require(&quot;flash&quot;).jump({
  matcher = function(win)
    ---@param diag Diagnostic
    return vim.tbl_map(function(diag)
      return {
        pos = { diag.lnum + 1, diag.col },
        end_pos = { diag.end_lnum + 1, diag.end_col - 1 },
      }
    end, vim.diagnostic.get(vim.api.nvim_win_get_buf(win)))
  end,
  action = function(match, state)
    vim.api.nvim_win_call(match.win, function()
      vim.api.nvim_win_set_cursor(match.win, match.pos)
      vim.diagnostic.open_float()
    end)
    state:restore()
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Match beginning of words only&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = {
    mode = function(str)
      return &quot;\\&amp;lt;&quot; .. str
    end,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Initialize flash with the word under the cursor&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  pattern = vim.fn.expand(&quot;&amp;lt;cword&amp;gt;&quot;),
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Jump to a line&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  search = { mode = &quot;search&quot;, max_length = 0 },
  label = { after = { 0, 0 } },
  pattern = &quot;^&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Select any word&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({
  pattern = &quot;.&quot;, -- initialize pattern with any char
  search = {
    mode = function(pattern)
      -- remove leading dot
      if pattern:sub(1, 1) == &quot;.&quot; then
        pattern = pattern:sub(2)
      end
      -- return word pattern and proper skip pattern
      return ([[\&amp;lt;%s\w*\&amp;gt;]]):format(pattern), ([[\&amp;lt;%s]]):format(pattern)
    end,
  },
  -- select the range
  jump = { pos = &quot;range&quot; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; with labels&lt;/summary&gt; 
 &lt;p&gt;Use the options below:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  modes = {
    char = {
      jump_labels = true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Telescope integration&lt;/summary&gt; 
 &lt;p&gt;This will allow you to use &lt;code&gt;s&lt;/code&gt; in normal mode and &lt;code&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt; in insert mode, to jump to a label in Telescope results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;nvim-telescope/telescope.nvim&quot;,
    optional = true,
    opts = function(_, opts)
      local function flash(prompt_bufnr)
        require(&quot;flash&quot;).jump({
          pattern = &quot;^&quot;,
          label = { after = { 0, 0 } },
          search = {
            mode = &quot;search&quot;,
            exclude = {
              function(win)
                return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= &quot;TelescopeResults&quot;
              end,
            },
          },
          action = function(match)
            local picker = require(&quot;telescope.actions.state&quot;).get_current_picker(prompt_bufnr)
            picker:set_selection(match.pos[1] - 1)
          end,
        })
      end
      opts.defaults = vim.tbl_deep_extend(&quot;force&quot;, opts.defaults or {}, {
        mappings = {
          n = { s = flash },
          i = { [&quot;&amp;lt;c-s&amp;gt;&quot;] = flash },
        },
      })
    end,
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Snacks Picker integration&lt;/summary&gt; 
 &lt;p&gt;This will allow you to use &lt;code&gt;s&lt;/code&gt; in normal mode and &lt;code&gt;&amp;lt;a-s&amp;gt;&lt;/code&gt; in insert mode, to jump to a label in the picker results.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;folke/snacks.nvim&quot;,
    opts = {
      picker = {
        win = {
          input = {
            keys = {
              [&quot;&amp;lt;a-s&amp;gt;&quot;] = { &quot;flash&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
              [&quot;s&quot;] = { &quot;flash&quot; },
            },
          },
        },
        actions = {
          flash = function(picker)
            require(&quot;flash&quot;).jump({
              pattern = &quot;^&quot;,
              label = { after = { 0, 0 } },
              search = {
                mode = &quot;search&quot;,
                exclude = {
                  function(win)
                    return vim.bo[vim.api.nvim_win_get_buf(win)].filetype ~= &quot;snacks_picker_list&quot;
                  end,
                },
              },
              action = function(match)
                local idx = picker.list:row2idx(match.pos[1])
                picker.list:_move(idx, true, true)
              end,
            })
          end,
        },
      },
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Continue last search&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;flash&quot;).jump({continue = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2-char jump, similar to &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump2d.md&quot;&gt; mini.jump2d &lt;/a&gt; or &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt; HopWord (hop.nvim) &lt;/a&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local Flash = require(&quot;flash&quot;)

---@param opts Flash.Format
local function format(opts)
  -- always show first and second label
  return {
    { opts.match.label1, &quot;FlashMatch&quot; },
    { opts.match.label2, &quot;FlashLabel&quot; },
  }
end

Flash.jump({
  search = { mode = &quot;search&quot; },
  label = { after = false, before = { 0, 0 }, uppercase = false, format = format },
  pattern = [[\&amp;lt;]],
  action = function(match, state)
    state:hide()
    Flash.jump({
      search = { max_length = 0 },
      highlight = { matches = false },
      label = { format = format },
      matcher = function(win)
        -- limit matches to the current label
        return vim.tbl_filter(function(m)
          return m.label == match.label and m.win == win
        end, state.results)
      end,
      labeler = function(matches)
        for _, m in ipairs(matches) do
          m.label = m.label2 -- use the second label
        end
      end,
    })
  end,
  labeler = function(matches, state)
    local labels = state:labels()
    for m, match in ipairs(matches) do
      match.label1 = labels[math.floor((m - 1) / #labels) + 1]
      match.label2 = labels[(m - 1) % #labels + 1]
      match.label = match.label1
    end
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;üåà Highlights&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Group&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashBackdrop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;backdrop&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashMatch&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;search matches&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashCurrent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;IncSearch&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;current match&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashLabel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Substitute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump label&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashPrompt&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;MsgArea&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashPromptIcon&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Special&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;prompt icon&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FlashCursor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;cursor&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;üì¶ Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump.md&quot;&gt;mini.jump&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-jump2d.md&quot;&gt;mini.jump2d&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woosaaahh/sj.nvim&quot;&gt;sj.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-treehopper&quot;&gt;nvim-treehopper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggandor/flit.nvim&quot;&gt;flit.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Kong/kong</title>
      <link>https://github.com/Kong/kong</link>
      <description>&lt;p&gt;ü¶ç The Cloud-Native API Gateway and AI Gateway.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/Kong/kong?style=flat-square&quot; alt=&quot;Stars&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/Kong/kong?style=flat-square&quot; alt=&quot;GitHub commit activity&quot; /&gt; &lt;img src=&quot;https://img.shields.io/docker/pulls/_/kong?style=flat-square&quot; alt=&quot;Docker Pulls&quot; /&gt; &lt;a href=&quot;https://github.com/Kong/kong/actions&quot;&gt;&lt;img src=&quot;https://github.com/Kong/kong/actions/workflows/build_and_test.yml/badge.svg?branch=master&amp;amp;event=push&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/v/release/Kong/kong?color=green&amp;amp;label=Version&amp;amp;style=flat-square&quot; alt=&quot;Version&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square&quot; alt=&quot;License&quot; /&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/thekonginc?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Kong&lt;/strong&gt; or &lt;strong&gt;Kong API Gateway&lt;/strong&gt; is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins. It also provides advanced AI capabilities with multi-LLM support.&lt;/p&gt; 
&lt;p&gt;By providing functionality for proxying, routing, load balancing, health checking, authentication (and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/#features&quot;&gt;more&lt;/a&gt;), Kong serves as the central layer for orchestrating microservices or conventional API traffic with ease.&lt;/p&gt; 
&lt;p&gt;Kong runs natively on Kubernetes thanks to its official &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;Kubernetes Ingress Controller&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;Installation&lt;/a&gt; | &lt;a href=&quot;https://docs.konghq.com&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Discussions&lt;/a&gt; | &lt;a href=&quot;https://discuss.konghq.com&quot;&gt;Forum&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/blog&quot;&gt;Blog&lt;/a&gt; | &lt;a href=&quot;https://hub.docker.com/r/kong/kong/tags&quot;&gt;Builds&lt;/a&gt; | &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Cloud Hosted Kong&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you prefer to use a cloud-hosted Kong, you can &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;sign up for a free trial of Kong Konnect&lt;/a&gt; and get started in minutes. If not, you can follow the instructions below to get started with Kong on your own infrastructure.&lt;/p&gt; 
&lt;p&gt;Let‚Äôs test drive Kong by adding authentication to an API in under 5 minutes.&lt;/p&gt; 
&lt;p&gt;We suggest using the docker-compose distribution via the instructions below, but there is also a &lt;a href=&quot;https://docs.konghq.com/gateway/latest/install/docker/#install-kong-gateway-in-db-less-mode&quot;&gt;docker installation&lt;/a&gt; procedure if you‚Äôd prefer to run the Kong API Gateway in DB-less mode.&lt;/p&gt; 
&lt;p&gt;Whether you‚Äôre running in the cloud, on bare metal, or using containers, you can find every supported distribution on our &lt;a href=&quot;https://konghq.com/install/#kong-community&quot;&gt;official installation&lt;/a&gt; page.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;To start, clone the Docker repository and navigate to the compose folder.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ git clone https://github.com/Kong/docker-kong
  $ cd docker-kong/compose/
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Start the Gateway stack using:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;  $ KONG_DATABASE=postgres docker-compose --profile database up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Gateway is now available on the following ports on localhost:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:8000&lt;/code&gt; - send traffic to your service via Kong&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8001&lt;/code&gt; - configure Kong using Admin API or via &lt;a href=&quot;https://github.com/kong/deck&quot;&gt;decK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:8002&lt;/code&gt; - access Kong&#39;s management Web UI (&lt;a href=&quot;https://github.com/Kong/kong-manager&quot;&gt;Kong Manager&lt;/a&gt;) on &lt;a href=&quot;http://localhost:8002&quot;&gt;localhost:8002&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Next, follow the &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/getting-started/configuring-a-service/&quot;&gt;quick start guide&lt;/a&gt; to tour the Gateway features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;By centralizing common API functionality across all your organization&#39;s services, the Kong API Gateway creates more freedom for engineering teams to focus on the challenges that matter most.&lt;/p&gt; 
&lt;p&gt;The top Kong features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Advanced routing, load balancing, health checking - all configurable via a RESTful admin API or declarative configuration.&lt;/li&gt; 
 &lt;li&gt;Authentication and authorization for APIs using methods like JWT, basic auth, OAuth, ACLs and more.&lt;/li&gt; 
 &lt;li&gt;Proxy, SSL/TLS termination, and connectivity support for L4 or L7 traffic.&lt;/li&gt; 
 &lt;li&gt;Plugins for enforcing traffic controls, rate limiting, req/res transformations, logging, monitoring and including a plugin developer hub.&lt;/li&gt; 
 &lt;li&gt;Plugins for AI traffic to support multi-LLM implementations and no-code AI use cases, with advanced AI prompt engineering, AI observability, AI security and more.&lt;/li&gt; 
 &lt;li&gt;Sophisticated deployment models like Declarative Databaseless Deployment and Hybrid Deployment (control plane/data plane separation) without any vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;Native &lt;a href=&quot;https://github.com/Kong/kubernetes-ingress-controller&quot;&gt;ingress controller&lt;/a&gt; support for serving Kubernetes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://konghq.com/&quot;&gt;&lt;img src=&quot;https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Plugin Hub&lt;/h3&gt; 
&lt;p&gt;Plugins provide advanced functionality that extends the use of the Gateway. Many of the Kong Inc. and community-developed plugins like AWS Lambda, Correlation ID, and Response Transformer are showcased at the &lt;a href=&quot;https://docs.konghq.com/hub/&quot;&gt;Plugin Hub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Contribute to the Plugin Hub and ensure your next innovative idea is published and available to the broader community!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We ‚ù§Ô∏è pull requests, and we‚Äôre continually working hard to make it as easy as possible for developers to contribute. Before beginning development with the Kong API Gateway, please familiarize yourself with the following developer resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Community Pledge (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COMMUNITY_PLEDGE.md&quot;&gt;COMMUNITY_PLEDGE.md&lt;/a&gt;) for our pledge to interact with you, the open source community.&lt;/li&gt; 
 &lt;li&gt;Contributor Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;) to learn about how to contribute to Kong.&lt;/li&gt; 
 &lt;li&gt;Development Guide (&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/DEVELOPER.md&quot;&gt;DEVELOPER.md&lt;/a&gt;): Setting up your development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use the &lt;a href=&quot;https://docs.konghq.com/latest/plugin-development/&quot;&gt;Plugin Development Guide&lt;/a&gt; for building new and creative plugins, or browse the online version of Kong&#39;s source code documentation in the &lt;a href=&quot;https://docs.konghq.com/latest/pdk/&quot;&gt;Plugin Development Kit (PDK) Reference&lt;/a&gt;. Developers can build plugins in &lt;a href=&quot;https://docs.konghq.com/gateway/latest/plugin-development/&quot;&gt;Lua&lt;/a&gt;, &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-go-plugins&quot;&gt;Go&lt;/a&gt; or &lt;a href=&quot;https://docs.konghq.com/gateway-oss/latest/external-plugins/#developing-javascript-plugins&quot;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Kong/kong/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; for more details about a given release. The &lt;a href=&quot;https://semver.org&quot;&gt;SemVer Specification&lt;/a&gt; is followed when versioning Gateway releases.&lt;/p&gt; 
&lt;h2&gt;Join the Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://docs.konghq.com/&quot;&gt;docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the &lt;a href=&quot;https://github.com/Kong/kong/discussions&quot;&gt;Kong discussions forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join the Kong discussions at the Kong Nation forum: &lt;a href=&quot;https://discuss.konghq.com/&quot;&gt;https://discuss.konghq.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href=&quot;http://kongcommunity.slack.com/&quot;&gt;Community Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read up on the latest happenings at our &lt;a href=&quot;https://konghq.com/blog/&quot;&gt;blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href=&quot;https://x.com/thekonginc&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Subscribe to our &lt;a href=&quot;https://www.youtube.com/c/KongInc/videos&quot;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Visit our &lt;a href=&quot;https://konghq.com/&quot;&gt;homepage&lt;/a&gt; to learn more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Konnect Cloud&lt;/h2&gt; 
&lt;p&gt;Kong Inc. offers commercial subscriptions that enhance the Kong API Gateway in a variety of ways. Customers of Kong&#39;s &lt;a href=&quot;https://konghq.com/kong-konnect/&quot;&gt;Konnect Cloud&lt;/a&gt; subscription take advantage of additional gateway functionality, commercial support, and access to Kong&#39;s managed (SaaS) control plane platform. The Konnect Cloud platform features include real-time analytics, a service catalog, developer portals, and so much more! &lt;a href=&quot;https://konghq.com/products/kong-konnect/register?utm_medium=Referral&amp;amp;utm_source=Github&amp;amp;utm_campaign=kong-gateway&amp;amp;utm_content=konnect-promo-in-gateway&amp;amp;utm_term=get-started&quot;&gt;Get started&lt;/a&gt; with Konnect Cloud.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright 2016-2025 Kong Inc.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ÔΩú AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;&lt;a href=&quot;https://apisix.apache.org/ai-gateway/&quot;&gt;AI Gateway&lt;/a&gt;&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents. APISIX also provides the &lt;a href=&quot;https://apisix.apache.org/blog/2025/04/21/host-mcp-server-with-api-gateway/&quot;&gt;&lt;code&gt;mcp-bridge&lt;/code&gt;&lt;/a&gt; plugin to seamlessly convert stdio-based MCP servers to scalable HTTP SSE services.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot; /&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway ‚Äì Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CopilotC-Nvim/CopilotChat.nvim</title>
      <link>https://github.com/CopilotC-Nvim/CopilotChat.nvim</link>
      <description>&lt;p&gt;Chat with GitHub Copilot in Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Copilot Chat for Neovim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CopilotC-Nvim/CopilotChat.nvim?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CopilotC-Nvim/CopilotChat.nvim/ci.yml?logo=github&amp;amp;style=for-the-badge&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://copilotc-nvim.github.io/CopilotChat.nvim/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-up-green.svg?logo=vim&amp;amp;style=for-the-badge&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/#contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/all-contributors/CopilotC-Nvim/CopilotChat.nvim?color=ee8449&amp;amp;logo=github&amp;amp;label=contributors&amp;amp;style=for-the-badge&quot; alt=&quot;Contributors&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vy6hJsTWaZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1200633211236122665?logo=discord&amp;amp;label=discord&amp;amp;style=for-the-badge&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/CopilotC-Nvim/CopilotChat.nvim/shield?style=for-the-badge&quot; alt=&quot;Dotfyle&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/9ee30811-0fb8-4500-91f6-34ea6b26adea&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&quot;&gt;https://github.com/user-attachments/assets/8cad5643-63b2-4641-a5c4-68bc313f20e6&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;CopilotChat.nvim brings GitHub Copilot Chat capabilities directly into Neovim with a focus on transparency and user control.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ü§ñ &lt;strong&gt;Multiple AI Models&lt;/strong&gt; - GitHub Copilot (including GPT-4o, Gemini 2.5 Pro, Claude 4 Sonnet, Claude 3.7 Sonnet, Claude 3.5 Sonnet, o3-mini, o4-mini) + custom providers (Ollama, Mistral.ai). The exact list of available models depends on your &lt;a href=&quot;https://github.com/settings/copilot/features&quot;&gt;GitHub Copilot settings&lt;/a&gt; and the models provided by GitHub&#39;s API.&lt;/li&gt; 
 &lt;li&gt;üîß &lt;strong&gt;Tool Calling&lt;/strong&gt; - LLM can use workspace functions (file reading, git operations, search) with your explicit approval&lt;/li&gt; 
 &lt;li&gt;üîí &lt;strong&gt;Explicit Control&lt;/strong&gt; - Only shares what you specifically request - no background data collection&lt;/li&gt; 
 &lt;li&gt;üìù &lt;strong&gt;Interactive Chat&lt;/strong&gt; - Rich UI with completion, diffs, and quickfix integration&lt;/li&gt; 
 &lt;li&gt;üéØ &lt;strong&gt;Smart Prompts&lt;/strong&gt; - Composable templates and sticky prompts for consistent context&lt;/li&gt; 
 &lt;li&gt;‚ö° &lt;strong&gt;Efficient&lt;/strong&gt; - Smart token usage with tiktoken counting and history management&lt;/li&gt; 
 &lt;li&gt;üîå &lt;strong&gt;Extensible&lt;/strong&gt; - &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/functions&quot;&gt;Custom functions&lt;/a&gt; and &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers&quot;&gt;providers&lt;/a&gt;, plus integrations like &lt;a href=&quot;https://github.com/ravitemer/mcphub.nvim&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim 0.10.0+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;curl 8.0.0+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/settings/copilot&quot;&gt;Copilot chat in the IDE&lt;/a&gt; enabled in GitHub settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] For Neovim &amp;lt; 0.11.0, add &lt;code&gt;noinsert&lt;/code&gt; or &lt;code&gt;noselect&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; otherwise chat autocompletion will not work. For best autocompletion experience, also add &lt;code&gt;popup&lt;/code&gt; to your &lt;code&gt;completeopt&lt;/code&gt; (even on Neovim 0.11.0+).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Optional Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gptlang/lua-tiktoken&quot;&gt;tiktoken_core&lt;/a&gt; - For accurate token counting 
  &lt;ul&gt; 
   &lt;li&gt;Arch Linux: Install &lt;a href=&quot;https://aur.archlinux.org/packages/luajit-tiktoken-bin&quot;&gt;&lt;code&gt;luajit-tiktoken-bin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://aur.archlinux.org/packages/lua51-tiktoken-bin&quot;&gt;&lt;code&gt;lua51-tiktoken-bin&lt;/code&gt;&lt;/a&gt; from AUR&lt;/li&gt; 
   &lt;li&gt;Via luarocks: &lt;code&gt;sudo luarocks install --lua-version 5.1 tiktoken_core&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Manual: Download from &lt;a href=&quot;https://github.com/gptlang/lua-tiktoken/releases&quot;&gt;lua-tiktoken releases&lt;/a&gt; and save as &lt;code&gt;tiktoken_core.so&lt;/code&gt; in your Lua path&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; - For git diff context features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; - For improved search performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lynx.invisible-island.net/&quot;&gt;lynx&lt;/a&gt; - For improved URL context features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integration with pickers&lt;/h2&gt; 
&lt;p&gt;For various plugin pickers to work correctly, you need to replace &lt;code&gt;vim.ui.select&lt;/code&gt; with your desired picker (as the default &lt;code&gt;vim.ui.select&lt;/code&gt; is very basic). Here are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api&quot;&gt;fzf-lua&lt;/a&gt; - call &lt;code&gt;require(&#39;fzf-lua&#39;).register_ui_select()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration&quot;&gt;telescope&lt;/a&gt; - setup &lt;code&gt;telescope-ui-select.nvim&lt;/code&gt; plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md#%EF%B8%8F-config&quot;&gt;snacks.picker&lt;/a&gt; - enable &lt;code&gt;ui_select&lt;/code&gt; config&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick/raw/main/lua/mini/pick.lua#L1229&quot;&gt;mini.pick&lt;/a&gt; - set &lt;code&gt;vim.ui.select = require(&#39;mini.pick&#39;).ui_select&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;CopilotC-Nvim/CopilotChat.nvim&quot;,
    dependencies = {
      { &quot;nvim-lua/plenary.nvim&quot;, branch = &quot;master&quot; },
    },
    build = &quot;make tiktoken&quot;,
    opts = {
      -- See Configuration section for options
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call plug#begin()
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;CopilotC-Nvim/CopilotChat.nvim&#39;
call plug#end()

lua &amp;lt;&amp;lt; EOF
require(&quot;CopilotChat&quot;).setup()
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Core Concepts&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Resources&lt;/strong&gt; (&lt;code&gt;#&amp;lt;name&amp;gt;&lt;/code&gt;) - Add specific content (files, git diffs, URLs) to your prompt&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; (&lt;code&gt;@&amp;lt;name&amp;gt;&lt;/code&gt;) - Give LLM access to functions it can call with your approval&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sticky Prompts&lt;/strong&gt; (&lt;code&gt;&amp;gt; &amp;lt;text&amp;gt;&lt;/code&gt;) - Persist context across single chat session&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt; (&lt;code&gt;$&amp;lt;model&amp;gt;&lt;/code&gt;) - Specify which AI model to use for the chat&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Prompts&lt;/strong&gt; (&lt;code&gt;/PromptName&lt;/code&gt;) - Use predefined prompt templates for common tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Selection&lt;/strong&gt; - Automatically includes current user selection in prompts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Add specific file to context

#file:src/main.lua

# Give LLM access to workspace tools

@copilot What files are in this project?

# Sticky prompt that persists

&amp;gt; #buffer:current
&amp;gt; You are a helpful coding assistant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use &lt;code&gt;@copilot&lt;/code&gt;, the LLM can call functions like &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;gitdiff&lt;/code&gt; etc. You&#39;ll see the proposed function call and can approve/reject it before execution.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat &amp;lt;input&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat with optional input&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatOpen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Open chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatClose&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop current output&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatSave &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatLoad &amp;lt;name&amp;gt;?&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load chat history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatPrompts&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select prompt templates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChatModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;View/select available models&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:CopilotChat&amp;lt;PromptName&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use specific prompt template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Chat Key Mappings&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Insert&lt;/th&gt; 
   &lt;th&gt;Normal&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Trigger/accept completion menu for tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Close the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reset and clear the chat window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Submit the current prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle sticky prompt for line under cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;grx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear all sticky prompts in prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Accept nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Jump to section of nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqa&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all answers from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gqd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add all diffs from chat to quickfix list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yank nearest diff to register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show diff between source and nearest diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show info about current chat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show help message&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Some plugins (e.g. &lt;code&gt;copilot.vim&lt;/code&gt;) may also map common keys like &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; in insert mode.&lt;br /&gt; To avoid conflicts, disable Copilot&#39;s default &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; mapping with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.copilot_no_tab_map = true
vim.keymap.set(&#39;i&#39;, &#39;&amp;lt;S-Tab&amp;gt;&#39;, &#39;copilot#Accept(&quot;\\&amp;lt;S-Tab&amp;gt;&quot;)&#39;, { expr = true, replace_keycodes = false })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also customize CopilotChat keymaps in your config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Predefined Functions&lt;/h2&gt; 
&lt;p&gt;All predefined functions belong to the &lt;code&gt;copilot&lt;/code&gt; group.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Function&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Example Usage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves content from a specific buffer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#buffer&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetches content from multiple buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#buffers:visible&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;diagnostics&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Collects code diagnostics (errors, warnings)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#diagnostics:current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Reads content from a specified file path&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#file:path/to/file&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gitdiff&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves git diff information&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#gitdiff:staged&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gitstatus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Retrieves git status information&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#gitstatus&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Lists filenames matching a pattern in workspace&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#glob:**/*.lua&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Searches for a pattern across files in workspace&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#grep:TODO&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Includes content of files in quickfix list&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#quickfix&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;register&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Provides access to specified Vim register&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#register:+&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetches content from a specified URL&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;#url:https://...&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Predefined Prompts&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prompt&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Explain&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Write detailed explanation of selected code as paragraphs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Review&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Comprehensive code review with line-specific issue reporting&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Fix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Identify problems and rewrite code with fixes and explanation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Improve performance and readability with optimization strategy&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Docs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add documentation comments to selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate tests for selected code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Commit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generate commit message with commitizen convention from staged changes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Configuration&lt;/h1&gt; 
&lt;p&gt;For all available configuration options, see &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/lua/CopilotChat/config.lua&quot;&gt;&lt;code&gt;lua/CopilotChat/config.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Setup&lt;/h2&gt; 
&lt;p&gt;Most users only need to configure a few options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  model = &#39;gpt-4.1&#39;,           -- AI model to use
  temperature = 0.1,           -- Lower = focused, higher = creative
  window = {
    layout = &#39;vertical&#39;,       -- &#39;vertical&#39;, &#39;horizontal&#39;, &#39;float&#39;
    width = 0.5,              -- 50% of screen width
  },
  auto_insert_mode = true,     -- Enter insert mode when opening
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Window &amp;amp; Appearance&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  window = {
    layout = &#39;float&#39;,
    width = 80, -- Fixed width in columns
    height = 20, -- Fixed height in rows
    border = &#39;rounded&#39;, -- &#39;single&#39;, &#39;double&#39;, &#39;rounded&#39;, &#39;solid&#39;
    title = &#39;ü§ñ AI Assistant&#39;,
    zindex = 100, -- Ensure window stays on top
  },

  headers = {
    user = &#39;üë§ You: &#39;,
    assistant = &#39;ü§ñ Copilot: &#39;,
    tool = &#39;üîß Tool: &#39;,
  },
  separator = &#39;‚îÅ‚îÅ&#39;,
  show_folds = false, -- Disable folding for cleaner look
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Buffer Behavior&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Auto-command to customize chat buffer behavior
vim.api.nvim_create_autocmd(&#39;BufEnter&#39;, {
  pattern = &#39;copilot-*&#39;,
  callback = function()
    vim.opt_local.relativenumber = false
    vim.opt_local.number = false
    vim.opt_local.conceallevel = 0
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;p&gt;You can customize colors by setting highlight groups in your config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- In your colorscheme or init.lua
vim.api.nvim_set_hl(0, &#39;CopilotChatHeader&#39;, { fg = &#39;#7C3AED&#39;, bold = true })
vim.api.nvim_set_hl(0, &#39;CopilotChatSeparator&#39;, { fg = &#39;#374151&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Types of copilot highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHeader&lt;/code&gt; - Header highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSeparator&lt;/code&gt; - Separator highlight in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatStatus&lt;/code&gt; - Status and spinner in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatHelp&lt;/code&gt; - Help text in chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatResource&lt;/code&gt; - Resource highlight in chat buffer (e.g. &lt;code&gt;#file&lt;/code&gt;, &lt;code&gt;#gitdiff&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatTool&lt;/code&gt; - Tool call highlight in chat buffer (e.g. &lt;code&gt;@copilot&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatPrompt&lt;/code&gt; - Prompt highlight in chat buffer (e.g. &lt;code&gt;/Explain&lt;/code&gt;, &lt;code&gt;/Review&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatModel&lt;/code&gt; - Model highlight in chat buffer (e.g. &lt;code&gt;$gpt-4.1&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatUri&lt;/code&gt; - URI highlight in chat buffer (e.g. &lt;code&gt;##https://...&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatSelection&lt;/code&gt; - Selection highlight in source buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopilotChatAnnotation&lt;/code&gt; - Annotation highlight in chat buffer (file headers, tool call headers, tool call body)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prompts&lt;/h2&gt; 
&lt;p&gt;Define your own prompts in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  prompts = {
    MyCustomPrompt = {
      prompt = &#39;Explain how it works.&#39;,
      system_prompt = &#39;You are very good at explaining stuff&#39;,
      mapping = &#39;&amp;lt;leader&amp;gt;ccmc&#39;,
      description = &#39;My custom prompt description&#39;,
    },
    Yarrr = {
      system_prompt = &#39;You are fascinated by pirates, so please respond in pirate speak.&#39;,
    },
    NiceInstructions = {
      system_prompt = &#39;You are a nice coding tutor, so please respond in a friendly and helpful manner. {BASE_INSTRUCTIONS}&#39;,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Functions&lt;/h2&gt; 
&lt;p&gt;Define your own functions in the configuration with input handling and schema:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  functions = {
    birthday = {
      description = &quot;Retrieves birthday information for a person&quot;,
      uri = &quot;birthday://{name}&quot;,
      schema = {
        type = &#39;object&#39;,
        required = { &#39;name&#39; },
        properties = {
          name = {
            type = &#39;string&#39;,
            enum = { &#39;Alice&#39;, &#39;Bob&#39;, &#39;Charlie&#39; },
            description = &quot;Person&#39;s name&quot;,
          },
        },
      },
      resolve = function(input)
        return {
          {
            uri = &#39;birthday://&#39; .. input.name,
            mimetype = &#39;text/plain&#39;,
            data = input.name .. &#39; birthday info&#39;,
          }
        }
      end
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Selections&lt;/h2&gt; 
&lt;p&gt;Control what content is automatically included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Use visual selection, fallback to current line
  selection = function(source)
    return require(&#39;CopilotChat.select&#39;).visual(source) or
           require(&#39;CopilotChat.select&#39;).line(source)
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Available selections:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).visual&lt;/code&gt; - Current visual selection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).buffer&lt;/code&gt; - Entire buffer content&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).line&lt;/code&gt; - Current line content&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;CopilotChat.select&#39;).unnamed&lt;/code&gt; - Unnamed register (last deleted/changed/yanked)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Providers&lt;/h2&gt; 
&lt;p&gt;Add custom AI providers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  providers = {
    my_provider = {
      get_url = function(opts) return &quot;https://api.example.com/chat&quot; end,
      get_headers = function() return { [&quot;Authorization&quot;] = &quot;Bearer &quot; .. api_key } end,
      get_models = function() return { { id = &quot;gpt-4.1&quot;, name = &quot;GPT-4.1 model&quot; } } end,
      prepare_input = require(&#39;CopilotChat.config.providers&#39;).copilot.prepare_input,
      prepare_output = require(&#39;CopilotChat.config.providers&#39;).copilot.prepare_output,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Provider Interface:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  -- Optional: Disable provider
  disabled?: boolean,

  -- Optional: Extra info about the provider displayed in info panel
  get_info?(): string[]

  -- Optional: Get extra request headers with optional expiration time
  get_headers?(): table&amp;lt;string,string&amp;gt;, number?,

  -- Optional: Get API endpoint URL
  get_url?(opts: CopilotChat.Provider.options): string,

  -- Optional: Prepare request input
  prepare_input?(inputs: table&amp;lt;CopilotChat.Provider.input&amp;gt;, opts: CopilotChat.Provider.options): table,

  -- Optional: Prepare response output
  prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,

  -- Optional: Get available models
  get_models?(headers: table): table&amp;lt;CopilotChat.Provider.model&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Built-in providers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;copilot&lt;/code&gt; - GitHub Copilot (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github_models&lt;/code&gt; - GitHub Marketplace models (disabled by default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;API Reference&lt;/h1&gt; 
&lt;h2&gt;Core&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local chat = require(&quot;CopilotChat&quot;)

-- Basic Chat Functions
chat.ask(prompt, config)      -- Ask a question with optional config
chat.response()               -- Get the last response text
chat.resolve_prompt()         -- Resolve prompt references
chat.resolve_functions()      -- Resolve functions that are available for automatic use by LLM (WARN: async, requires plenary.async.run)
chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)

-- Window Management
chat.open(config)             -- Open chat window with optional config
chat.close()                  -- Close chat window
chat.toggle(config)           -- Toggle chat window visibility with optional config
chat.reset()                  -- Reset the chat
chat.stop()                   -- Stop current output

-- Source Management
chat.get_source()             -- Get the current source buffer and window
chat.set_source(winnr)        -- Set the source window

-- Selection Management
chat.get_selection()                                   -- Get the current selection
chat.set_selection(bufnr, start_line, end_line, clear) -- Set or clear selection

-- Prompt &amp;amp; Model Management
chat.select_prompt(config)    -- Open prompt selector with optional config
chat.select_model()           -- Open model selector

-- History Management
chat.load(name, history_path) -- Load chat history
chat.save(name, history_path) -- Save chat history

-- Configuration
chat.setup(config)            -- Update configuration
chat.log_level(level)         -- Set log level (debug, info, etc.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chat Window&lt;/h2&gt; 
&lt;p&gt;You can also access the chat window UI methods through the &lt;code&gt;chat.chat&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local window = require(&quot;CopilotChat&quot;).chat

-- Chat UI State
window:visible()             -- Check if chat window is visible
window:focused()             -- Check if chat window is focused

-- Message Management
window:get_message(role, cursor)               -- Get chat message by role, either last or closest to cursor
window:add_message({ role, content }, replace) -- Add or replace a message in chat
window:remove_message(role, cursor)            -- Remove chat message by role, either last or closest to cursor
window:get_block(role, cursor)                 -- Get code block by role, either last or closest to cursor
window:add_sticky(sticky)                      -- Add sticky prompt to chat message

-- Content Management
window:append(text)          -- Append text to chat window
window:clear()               -- Clear chat window content
window:start()               -- Start writing to chat window
window:finish()              -- Finish writing to chat window

-- Navigation
window:follow()              -- Move cursor to end of chat content
window:focus()               -- Focus the chat window

-- Advanced Features
window:overlay(opts)         -- Show overlay with specified options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Open chat, ask a question and handle response
require(&quot;CopilotChat&quot;).open()
require(&quot;CopilotChat&quot;).ask(&quot;#buffer Explain this code&quot;, {
  callback = function(response)
    vim.notify(&quot;Got response: &quot; .. response:sub(1, 50) .. &quot;...&quot;)
    return response
  end,
})

-- Save and load chat history
require(&quot;CopilotChat&quot;).save(&quot;my_debugging_session&quot;)
require(&quot;CopilotChat&quot;).load(&quot;my_debugging_session&quot;)

-- Use custom sticky and model
require(&quot;CopilotChat&quot;).ask(&quot;How can I optimize this?&quot;, {
  model = &quot;gpt-4.1&quot;,
  sticky = {&quot;#buffer&quot;, &quot;#gitdiff:staged&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips&quot;&gt;examples wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;To set up the environment:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
cd CopilotChat.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Install development dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install pre-commit hooks
make install-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create your feature branch&lt;/li&gt; 
 &lt;li&gt;Make your changes&lt;/li&gt; 
 &lt;li&gt;Run tests and lint checks&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/CopilotC-Nvim/CopilotChat.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gptlang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/121417512?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;gptlang&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;gptlang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gptlang&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://productsway.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/870029?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dung Duc Huynh (Kaka)&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jellydn&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qoobes.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58834655?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Haracic&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ahmed Haracic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=qoobes&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://youtube.com/@ziontee113&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/102876811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tr√≠ Thi·ªán Nguy·ªÖn&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tr√≠ Thi·ªán Nguy·ªÖn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ziontee113&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Cassius0924&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62874592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;He Zhizhou&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;He Zhizhou&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Cassius0924&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/guruprakashrajakkannu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9963717?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Guruprakash Rajakkannu&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Guruprakash Rajakkannu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rguruprakash&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kristofka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140354?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kristofka&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kristofka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kristofka&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PostCyberPunk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/134976996?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;PostCyberPunk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;PostCyberPunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PostCyberPunk&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ktns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1302759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Katsuhiko Nishimra&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Katsuhiko Nishimra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ktns&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/errnoh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/373946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Erno Hopearuoho&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Erno Hopearuoho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=errnoh&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shaungarwood&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4156525?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shaun Garwood&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shaun Garwood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=shaungarwood&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neutrinoA4&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/122616073?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;neutrinoA4&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;neutrinoA4&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=neutrinoA4&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/banjocat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3247309?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jack Muratore&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jack Muratore&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=banjocat&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AdrielVelazquez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3443378?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Adriel Velazquez&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Adriel Velazquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AdrielVelazquez&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/deathbeam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5115805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomas Slusny&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tomas Slusny&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=deathbeam&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nisalvd.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30633436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nisal&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nisal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nisalVD&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.gaardhus.dk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46934916?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tobias G√•rdhus&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tobias G√•rdhus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=gaardhus&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.patreon.com/PetrDlouhy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/156755?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Petr Dlouh√Ω&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Petr Dlouh√Ω&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=PetrDlouhy&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.dylanmadisetti.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2689338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dylan Madisetti&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dylan Madisetti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dmadisetti&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aweis89&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5186956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron Weisberg&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron Weisberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=aweis89&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tlacuilose&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65783495?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jose Tlacuilo&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jose Tlacuilo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tlacuilose&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kevintraver.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/196406?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kevin Traver&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kevin Traver&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=kevintraver&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/D7ry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/92609548?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;dTry&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dTry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=D7ry&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.ornew.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19766770?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Arata Furukawa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Arata Furukawa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ornew&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lingjie00&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64540764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ling&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ling&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lingjie00&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/frolvanya&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/59515280?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ivan Frolov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ivan Frolov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=frolvanya&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.folkelemaitre.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/292349?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Folke Lemaitre&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Folke Lemaitre&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=folke&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GitMurf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64155612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;GitMurf&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;GitMurf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=GitMurf&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dimalip.in&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877858?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dmitrii Lipin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dmitrii Lipin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=festeh&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nvimer.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/41784264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;jinzhongjia&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;jinzhongjia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=jinzhongjia&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/guill&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3157454?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;guill&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;guill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=guill&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sjonpaulbrown-cc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81941908?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sjon-Paul Brown&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sjon-Paul Brown&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=sjonpaulbrown-cc&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/renxzen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13023797?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renzo Mondrag√≥n&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Renzo Mondrag√≥n&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=renxzen&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fjchen7&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10106636?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;fjchen7&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;fjchen7&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fjchen7&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/radwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184065?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rados≈Çaw Wo≈∫niak&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rados≈Çaw Wo≈∫niak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=radwo&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JakubPecenka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87969308?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JakubPecenka&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;JakubPecenka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JakubPecenka&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thomastthai&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16532581?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;thomastthai&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;thomastthai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=thomastthai&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lisk.in/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/300342?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tom√°≈° Janou≈°ek&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tom√°≈° Janou≈°ek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=liskin&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Moriango&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43554061?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Toddneal Stallworth&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Toddneal Stallworth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Moriango&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/taketwo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1241736?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sergey Alexandrov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sergey Alexandrov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=taketwo&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lemeb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7331643?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;L√©opold Mebazaa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;L√©opold Mebazaa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=lemeb&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://atko.space&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14937572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;JunKi Jin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;JunKi Jin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=atkodev&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/abdennourzahaf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62243290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;abdennourzahaf&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;abdennourzahaf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=abdennourzahaf&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/josiahdenton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44758384?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Josiah&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Josiah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=josiahdenton&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tku137&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3052212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tony Fischer&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tony Fischer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=tku137&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://qiita.com/program3152019&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/64008205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kohei Wada&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kohei Wada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=Kohei-Wada&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://zags.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79172513?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sebastian Yaghoubi&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sebastian Yaghoubi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=syaghoubi00&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/johncming&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11719334?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;johncming&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;johncming&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=johncming&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzonatan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5166666?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rokas Brazd≈æionis&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rokas Brazd≈æionis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=dzonatan&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unlimitedsola&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3632663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sola&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=unlimitedsola&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThisIsMani&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/84711804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mani Chandra&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mani Chandra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ThisIsMani&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nischalbasuti.github.io/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14853910?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nischal Basuti&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nischal Basuti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=nischalbasuti&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://teoljungberg.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/810650?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Teo Ljungberg&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Teo Ljungberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=teoljungberg&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/JPricey&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4826348?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Joe Price&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joe Price&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=JPricey&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://ouuan.moe/about&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30581822?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Yufan You&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yufan You&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ouuan&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=ouuan&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://m4dd0c.netlify.app&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/77256586?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Manish Kumar&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Manish Kumar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=m4dd0c&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.azdanov.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6123841?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Anton ≈Ωdanov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anton ≈Ωdanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=azdanov&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=azdanov&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://fredrikaverpil.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/994357?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Fredrik Averpil&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fredrik Averpil&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=fredrikaverpil&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://a14n.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/509703?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaron D Borden&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaron D Borden&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=adborden&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AtifChy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42291930?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Md. Iftakhar Awal Chowdhury&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Md. Iftakhar Awal Chowdhury&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AtifChy&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=AtifChy&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/danilohorta&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/214497460?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Danilo Horta&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Danilo Horta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=danilohorta&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://mihamina.rktmb.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/488088?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Mihamina Rakotomandimby&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mihamina Rakotomandimby&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim/commits?author=rakotomandimby&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; 
&lt;h1&gt;Stargazers&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;&lt;img src=&quot;https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive&quot; alt=&quot;Stargazers over time&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>catppuccin/nvim</title>
      <link>https://github.com/catppuccin/nvim</link>
      <description>&lt;p&gt;üç® Soothing pastel theme for (Neo)vim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&quot; width=&quot;100&quot; alt=&quot;Logo&quot; /&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; Catppuccin for &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;(Neo)&lt;/a&gt;&lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213472445-091e54fb-091f-4448-a631-fa6b2ba7d8a5.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; This port of &lt;a href=&quot;https://github.com/catppuccin/&quot;&gt;Catppuccin&lt;/a&gt; is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/v0.1&quot;&gt;v0.1&lt;/a&gt; tag. &lt;/p&gt; 
&lt;h2&gt;Previews&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåª Latte&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473391-603bdc68-68f4-4877-a15a-b469040928b5.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü™¥ Frapp√©&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473368-16931b70-fd84-4a89-a698-1b1bca1f82de.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üå∫ Macchiato&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473285-7bd858be-6947-4d9e-8c01-2573cbc7e76c.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåø Mocha&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213471997-34837219-88cc-4db2-baca-e25813a89789.png&quot; /&gt; 
&lt;/details&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both Vim and Neovim (requires &lt;a href=&quot;https://github.com/neovim/neovim/&quot;&gt;neovim&lt;/a&gt; &amp;gt;= 0.8 or &lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &amp;gt;= 9 compiled with &lt;a href=&quot;https://github.com/lua/lua&quot;&gt;lua&lt;/a&gt; &amp;gt;= 5.1)&lt;/li&gt; 
 &lt;li&gt;Highly configurable with 4 different flavours and &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;the ability to create your own!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim#Compile&quot;&gt;Compiled&lt;/a&gt; configuration for &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/xxfpt3/catppuccinnvim_now_startup_in_1ms/&quot;&gt;fast startup time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrations with lsp, treesitter and &lt;a href=&quot;https://github.com/catppuccin/nvim#integrations&quot;&gt;a bunch of plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://github.com/catppuccin/catppuccin&quot;&gt;many other applications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot;, priority = 1000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add({ source = &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;catppuccin/nvim&quot;, as = &quot;catppuccin&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;catppuccin/nvim&#39;, { &#39;as&#39;: &#39;catppuccin&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme catppuccin &quot; catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    flavour = &quot;auto&quot;, -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = &quot;latte&quot;,
        dark = &quot;mocha&quot;,
    },
    transparent_background = false, -- disables setting the background color.
    float = {
        transparent = false, -- enable transparent floating windows
        solid = false, -- use solid styling for floating windows, see |winborder|
    },
    show_end_of_buffer = false, -- shows the &#39;~&#39; characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
        enabled = false, -- dims the background color of inactive window
        shade = &quot;dark&quot;,
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = { &quot;italic&quot; }, -- Change the style of comments
        conditionals = { &quot;italic&quot; },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
        -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    auto_integrations = false,
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

-- setup must be called before loading
vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Getting colors&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local latte = require(&quot;catppuccin.palettes&quot;).get_palette &quot;latte&quot;
local frappe = require(&quot;catppuccin.palettes&quot;).get_palette &quot;frappe&quot;
local macchiato = require(&quot;catppuccin.palettes&quot;).get_palette &quot;macchiato&quot;
local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a table where the key is the name of the color and the value is the hex code.&lt;/p&gt; 
&lt;h3&gt;Overwriting colors&lt;/h3&gt; 
&lt;p&gt;Colors can be overwritten using &lt;code&gt;color_overrides&lt;/code&gt;, see &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;https://github.com/catppuccin/nvim/discussions/323&lt;/a&gt; for inspiration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    color_overrides = {
        all = {
            text = &quot;#ffffff&quot;,
        },
        latte = {
            base = &quot;#ff0000&quot;,
            mantle = &quot;#242424&quot;,
            crust = &quot;#474747&quot;,
        },
        frappe = {},
        macchiato = {},
        mocha = {},
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Overwriting highlight groups&lt;/h3&gt; 
&lt;p&gt;Global highlight groups can be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    custom_highlights = function(colors)
        return {
            Comment = { fg = colors.flamingo },
            TabLineSel = { bg = colors.pink },
            CmpBorder = { fg = colors.surface2 },
            Pmenu = { bg = colors.none },
        }
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Highlight groups per flavour can also be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    highlight_overrides = {
        all = function(colors)
            return {
                NvimTreeNormal = { fg = colors.none },
                CmpBorder = { fg = &quot;#3e4145&quot; },
            }
        end,
        latte = function(latte)
            return {
                Normal = { fg = latte.base },
            }
        end,
        frappe = function(frappe)
            return {
                [&quot;@comment&quot;] = { fg = frappe.surface2, style = { &quot;italic&quot; } },
            }
        end,
        macchiato = function(macchiato)
            return {
                LineNr = { fg = macchiato.overlay1 },
            }
        end,
        mocha = function(mocha)
            return {
                Comment = { fg = mocha.flamingo },
            }
        end,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;Catppuccin provides theme support for other plugins in the Neovim ecosystem and extended Neovim functionality through &lt;em&gt;integrations&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To enable/disable an integration you just need to set it to true/false, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        treesitter = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some integrations are enabled by default, you can control this behaviour with &lt;code&gt;default_integrations&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    default_integrations = false,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; as your package manager, you can use the &lt;code&gt;auto_integrations&lt;/code&gt; option to let catppuccin automatically detect installed plugins and enable their respective integrations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    auto_integrations = true,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a list of supported plugins and their corresponding integration module.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] If you&#39;d like to see the full list of highlight groups modified by Catppuccin, see the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/groups/integrations&quot;&gt;&lt;code&gt;lua/catppuccin/groups/integrations/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;b&gt;Plugin&lt;/b&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;b&gt;Default&lt;/b&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;aerial = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt; 
  &lt;!-- alpha.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;alpha = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- alpha.nvim --&gt; 
  &lt;!-- barbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbar = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbar.nvim --&gt; 
  &lt;!-- barbecue.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;barbecue.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbecue = {
    dim_dirname = true, -- directory name is dimmed by default
    bold_basename = true,
    dim_context = false,
    alt_background = false,
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;barbecue&quot;).setup {
  theme = &quot;catppuccin&quot;, -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbecue.nvim --&gt; 
  &lt;!-- beacon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/DanilaMihailov/beacon.nvim&quot;&gt;beacon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;beacon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- beacon.nvim --&gt; 
  &lt;!-- blink.cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;blink_cmp = {
    style = &#39;bordered&#39;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- blink.cmp --&gt; 
  &lt;!-- bufferline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your bufferline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!NOTE] bufferline needs to be loaded after setting up Catppuccin or it will highlight incorrectly&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &quot;akinsho/bufferline.nvim&quot; {
  after = &quot;catppuccin&quot;,
  config = function()
    require(&quot;bufferline&quot;).setup {
      highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get()
    }
  end
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Configurations are self-explanatory, see &lt;code&gt;:h bufferline-highlights&lt;/code&gt; for detailed explanations:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
bufferline.setup {
    highlights = require(&quot;catppuccin.groups.integrations.bufferline&quot;).get {
        styles = { &quot;italic&quot;, &quot;bold&quot; },
        custom = {
            all = {
                fill = { bg = &quot;#000000&quot; },
            },
            mocha = {
                background = { fg = mocha.text },
            },
            latte = {
                background = { fg = &quot;#000000&quot; },
            },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- bufferline.nvim --&gt; 
  &lt;!-- buffon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/francescarpi/buffon.nvim&quot;&gt;buffon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;buffon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- buffon.nvim --&gt; 
  &lt;!-- coc.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;coc.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = true,
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Note] coc.nvim by default link to native lsp highlight groups so config from &lt;code&gt;native_lsp&lt;/code&gt; will also apply to coc&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;p&gt;In the nested tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- coc.nvim --&gt; 
  &lt;!-- colorful-winsep.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-zh/colorful-winsep.nvim&quot;&gt;colorful-winsep.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;colorful_winsep = {
    enabled = false,
    color = &quot;red&quot;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- colorful_winsep.nvim --&gt; 
  &lt;!-- dashboard-nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dashboard = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dashboard-nvim --&gt; 
  &lt;!-- diffview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;diffview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- diffview.nvim --&gt; 
  &lt;!-- dropbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Bekaboo/dropbar.nvim&quot;&gt;dropbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dropbar = {
    enabled = false,
    color_mode = false, -- enable color for kind&#39;s texts, not just kind&#39;s icons
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dropbar.nvim --&gt; 
  &lt;!-- feline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/freddiehaddad/feline.nvim/&quot;&gt;feline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;  
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your Feline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)

ctp_feline.setup()

require(&quot;feline&quot;).setup({
    components = ctp_feline.get(),
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Notice that calling &lt;code&gt;setup()&lt;/code&gt; is optional. You may pass a lua table in order to change assets, settings and the colors per vim mode.&lt;/p&gt; 
     &lt;p&gt;Here are the defaults:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local clrs = require(&quot;catppuccin.palettes&quot;).get_palette()
local ctp_feline = require(&#39;catppuccin.groups.integrations.feline&#39;)
local U = require &quot;catppuccin.utils.colors&quot;

ctp_feline.setup({
    assets = {
        left_separator = &quot;ÓÇ∂&quot;,
        right_separator = &quot;ÓÇ¥&quot;,
        mode_icon = &quot;ÔÜÆ&quot;,
        dir = &quot;Û∞âñ&quot;,
        file = &quot;Û∞àô&quot;,
        lsp = {
            server = &quot;Û∞Ö°&quot;,
            error = &quot;ÔÑë&quot;,
            warning = &quot;ÔÑë&quot;,
            info = &quot;ÔÑë&quot;,
            hint = &quot;ÔÑë&quot;,
        },
        git = {
            branch = &quot;Óú•&quot;,
            added = &quot;ÔÅï&quot;,
            changed = &quot;ÔÖÑ&quot;,
            removed = &quot;ÔÅñ&quot;,
        },
    },
    sett = {
        text = U.vary_color({ latte = latte.base }, clrs.surface0),
        bkg = U.vary_color({ latte = latte.crust }, clrs.surface0),
        diffs = clrs.mauve,
        extras = clrs.overlay1,
        curr_file = clrs.maroon,
        curr_dir = clrs.flamingo,
        show_modified = false, -- show if the file has been modified
        show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                  -- need to set checker.enabled = true in lazy.nvim first
                                  -- the icon is set in ui.icons.plugin in lazy.nvim
    },
    mode_colors = {
        [&quot;n&quot;] = { &quot;NORMAL&quot;, clrs.lavender },
        [&quot;no&quot;] = { &quot;N-PENDING&quot;, clrs.lavender },
        [&quot;i&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;ic&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;t&quot;] = { &quot;TERMINAL&quot;, clrs.green },
        [&quot;v&quot;] = { &quot;VISUAL&quot;, clrs.flamingo },
        [&quot;V&quot;] = { &quot;V-LINE&quot;, clrs.flamingo },
        [&quot;&quot;] = { &quot;V-BLOCK&quot;, clrs.flamingo },
        [&quot;R&quot;] = { &quot;REPLACE&quot;, clrs.maroon },
        [&quot;Rv&quot;] = { &quot;V-REPLACE&quot;, clrs.maroon },
        [&quot;s&quot;] = { &quot;SELECT&quot;, clrs.maroon },
        [&quot;S&quot;] = { &quot;S-LINE&quot;, clrs.maroon },
        [&quot;&quot;] = { &quot;S-BLOCK&quot;, clrs.maroon },
        [&quot;c&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;cv&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;ce&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;r&quot;] = { &quot;PROMPT&quot;, clrs.teal },
        [&quot;rm&quot;] = { &quot;MORE&quot;, clrs.teal },
        [&quot;r?&quot;] = { &quot;CONFIRM&quot;, clrs.mauve },
        [&quot;!&quot;] = { &quot;SHELL&quot;, clrs.green },
    },
    view = {
        lsp = {
            progress = true, -- if true the status bar will display an lsp progress indicator
            name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text &quot;Lsp&quot;
            exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
            separator = &quot;|&quot;, -- the separator used when there are multiple lsp servers
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Warning] Currently feline &lt;a href=&quot;https://github.com/feline-nvim/feline.nvim/issues/302&quot;&gt;doesn&#39;t officially support custom themes&lt;/a&gt;. In order for &lt;code&gt;:colorscheme catppuccin-&amp;lt;flavour&amp;gt;&lt;/code&gt; to work you could add this autocmd as a workaround:&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;ColorScheme&quot;, {
    pattern = &quot;*&quot;,
    callback = function()
        package.loaded[&quot;feline&quot;] = nil
        package.loaded[&quot;catppuccin.groups.integrations.feline&quot;] = nil
        require(&quot;feline&quot;).setup {
            components = require(&quot;catppuccin.groups.integrations.feline&quot;).get(),
        }
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- feline.nvim --&gt; 
  &lt;!-- fern.vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lambdalisue/fern.vim&quot;&gt;fern.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fern = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fern.vim --&gt; 
  &lt;!-- fidget.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/j-hui/fidget.nvim&quot;&gt;fidget.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fidget = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; Set `notification.window.winblend` to `0`: 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fidget&quot;).setup {
    notification = {
        window = {
            winblend = 0,
        },
    }
    -- ... the rest of your fidget config
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fidget.nvim --&gt; 
  &lt;!-- flash.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;flash = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- flash.nvim --&gt; 
    &lt;!-- fzf-lua --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fzf-lua --&gt; 
  &lt;!-- gitgraph.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgraph = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitgraph.nvim --&gt; 
    &lt;!-- gitsigns.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = {
  enabled = true,
  -- align with the transparent_background option by default
  transparent = false,
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- gitsigns.nvim --&gt; 
    &lt;!-- grug-far.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;grug_far = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- grug-far.nvim --&gt; 
    &lt;!-- harpoon --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;harpoon&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;harpoon = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- harpoon --&gt; 
    &lt;!-- headlines.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;headlines = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- headlines.nvim --&gt; 
    &lt;!-- hop.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hop = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- hop.nvim --&gt; 
    &lt;!-- indent-blankline.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;indent_blankline = {
    enabled = true,
    scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
    colored_indent_levels = false,
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;&lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors&quot;&gt;here&lt;/a&gt; to set the latter up.&lt;/p&gt; 
    &lt;/details&gt; 
    &lt;!-- indent-blankline.nvim --&gt; 
    &lt;!-- leap.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;leap = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- leap.nvim --&gt; 
    &lt;!-- lightline.vim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lightline.vim --&gt; 
    &lt;!-- lightspeed.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lightspeed = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lightspeed.nvim --&gt; 
    &lt;!-- lir.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lir = {
    enabled = false,
    git_status = false
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lir.nvim --&gt; 
    &lt;!-- lspsaga.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_saga = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;For custom Lsp Kind Icon and Color&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lspsaga&quot;).setup {
    ui = {
        kind = require(&quot;catppuccin.groups.integrations.lsp_saga&quot;).custom_kind(),
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;!-- lspsaga.nvim --&gt; 
  &lt;!-- lualine.nvim --&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
    options = {
        theme = &quot;catppuccin&quot;
        -- ... the rest of your lualine config
    }
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lualine.nvim --&gt; 
    &lt;!-- markdown --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://www.markdownguide.org/&quot;&gt;markdown&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markdown --&gt; 
  &lt;!-- markview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markview.nvim --&gt; 
  &lt;!-- mason.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mason = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mason.nvim --&gt; 
  &lt;!-- mini.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;mini.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mini = {
    enabled = true,
    indentscope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mini.nvim --&gt; 
  &lt;!-- neo-tree.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neo-tree.nvim --&gt; 
  &lt;!-- neogit --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neogit = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neogit --&gt; 
  &lt;!-- neotest --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotest = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neotest --&gt; 
  &lt;!-- noice.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;noice = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- noice.nvim --&gt; 
  &lt;!-- notifier.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vigoux/notifier.nvim&quot;&gt;notifier.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notifier = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- notifier.nvim --&gt; 
  &lt;!-- nvim-cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-cmp --&gt; 
  &lt;!-- nvim-copilot-vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;copilot.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_vim = false,
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-copilot-vim --&gt; 
  &lt;!-- nvim-dap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special &lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local sign = vim.fn.sign_define

sign(&quot;DapBreakpoint&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapBreakpointCondition&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpointCondition&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapLogPoint&quot;, { text = &quot;‚óÜ&quot;, texthl = &quot;DapLogPoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap --&gt; 
  &lt;!-- nvim-dap-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap_ui = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap-ui --&gt; 
  &lt;!-- nvim-lspconfig --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;native_lsp = {
    enabled = true,
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-lspconfig --&gt; 
  &lt;!-- navic --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;navic&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;navic = {
    enabled = false,
    custom_bg = &quot;NONE&quot;, -- &quot;lualine&quot; will set background to mantle
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You NEED to enable highlight in nvim-navic setting or it won&#39;t work
require(&quot;nvim-navic&quot;).setup {
    highlight = true
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- navic --&gt; 
  &lt;!-- nvim-notify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-notify --&gt; 
  &lt;!-- nvim-semantic-tokens --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-semantic-highlight&quot;&gt;nvim-semantic-tokens&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;semantic_tokens = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-semantic-tokens --&gt; 
  &lt;!-- nvim-surround --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;nvim-surround&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvim_surround = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-surround --&gt; 
  &lt;!-- nvim-tree.lua --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvimtree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-tree.lua --&gt; 
  &lt;!-- nvim-treesitter-context --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter_context = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter-context --&gt; 
  &lt;!-- nvim-treesitter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter --&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/nvim-ts-rainbow2&quot;&gt;nvim-ts-rainbow2&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow2 = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt; 
  &lt;!-- nvim-ts-rainbow --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/p00f/nvim-ts-rainbow&quot;&gt;nvim-ts-rainbow&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow --&gt; 
  &lt;!-- nvim-ufo --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ufo = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ufo --&gt; 
  &lt;!-- nvim-window-picker --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;nvim-window-picker&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;window_picker = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- nvim-window-picker --&gt; 
    &lt;!-- octo.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;octo = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- octo.nvim --&gt; 
  &lt;!-- overseer.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;overseer = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- overseer.nvim --&gt; 
  &lt;!-- pounce.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;pounce = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- pounce.nvim --&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rainbow_delimiters = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt; 
  &lt;!-- reactive.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rasulomaroff/reactive.nvim&quot;&gt;reactive.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;There&#39;re 2 available presets (&lt;code&gt;cursor&lt;/code&gt; and &lt;code&gt;cursorline&lt;/code&gt;) for every flavour.&lt;/p&gt; 
     &lt;p&gt;Here is how you can use them.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;reactive&#39;).setup {
  load = { &#39;catppuccin-mocha-cursor&#39;, &#39;catppuccin-mocha-cursorline&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;To use another flavour just replace &lt;code&gt;mocha&lt;/code&gt; with the one you want to use.&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- reactive.nvim --&gt; 
  &lt;!-- render-markdown.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;render_markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- render-markdown.nvim --&gt; 
  &lt;!-- snacks.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;snacks = {
    enabled = false,
    indent_scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- snacks.nvim --&gt; 
  &lt;!-- symbols-outline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/simrat39/symbols-outline.nvim&quot;&gt;symbols-outline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;[!NOTE] This plugin has been archived by the author, consider using &lt;a href=&quot;https://github.com/hedyhli/outline.nvim&quot;&gt;outline.nvim&lt;/a&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;symbols_outline = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- symbols-outline.nvim --&gt; 
  &lt;!-- telekasten.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/renerocksai/telekasten.nvim&quot;&gt;telekasten.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telekasten = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telekasten.nvim --&gt; 
  &lt;!-- telescope.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telescope = {
    enabled = true,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telescope.nvim --&gt; 
  &lt;!-- trouble.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_trouble = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- trouble.nvim --&gt; 
  &lt;!-- vim-airline --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:airline_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-airline --&gt; 
  &lt;!-- vim-clap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:clap_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-clap --&gt; 
  &lt;!-- vim-dadbod-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kristijanhusak/vim-dadbod-ui&quot;&gt;vim-dadbod-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dadbod_ui = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-dadbod-ui --&gt; 
  &lt;!-- vim-gitgutter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgutter = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-gitgutter --&gt; 
  &lt;!-- vim-illuminate --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;illuminate = {
    enabled = true,
    lsp = false
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-illuminate --&gt; 
  &lt;!-- vim-sandwich --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sandwich = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sandwich --&gt; 
  &lt;!-- vim-signify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;signify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-signify --&gt; 
  &lt;!-- vim-sneak --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim_sneak = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sneak --&gt; 
  &lt;!-- vimwiki --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vimwiki = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vimwiki --&gt; 
  &lt;!-- which-key.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;which_key = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- which-key.nvim --&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Compile&lt;/h2&gt; 
&lt;p&gt;Catppuccin is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time. Catppuccin can pre compute the results of your configuration and store the results in a compiled Lua file. We use these pre-cached values to set it&#39;s highlights.&lt;/p&gt; 
&lt;p&gt;By default, Catppuccin writes the compiled results into the system&#39;s cache directory. See below if you&#39;d like to change the cache directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({ -- Note: On windows we replace `/` with `\` by default
    compile_path = vim.fn.stdpath &quot;cache&quot; .. &quot;/catppuccin&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üôã FAQ&lt;/h2&gt; 
&lt;h3&gt;Why do my Treesitter highlights look incorrect?&lt;/h3&gt; 
&lt;p&gt;Please disable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Why aren&#39;t my colors the same as the previews?&lt;/h3&gt; 
&lt;p&gt;Catppuccin requires that your terminal supports true color, meaning that your terminal can display the full range of 16 million colors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported: iterm2 (macOS), kitty, wezterm, alacritty, &lt;a href=&quot;https://github.com/termstandard/colors#truecolor-support-in-output-devices&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Unsupported: Terminal.app (macOS), Terminus, Terminology, &lt;a href=&quot;https://github.com/termstandard/colors#not-supporting-truecolor&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use tmux, make sure to enable &lt;a href=&quot;https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6&quot;&gt;true color support&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722&quot;&gt;italic font support&lt;/a&gt;. This will prevent issues raised in &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/415&quot;&gt;#415&lt;/a&gt; and &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/428&quot;&gt;#428&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üíù Thanks to&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Current Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vollowx&quot;&gt;vollowx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/comfysage&quot;&gt;robin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Previous Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pocco81&quot;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nullchilly&quot;&gt;nullchilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrtnvgr&quot;&gt;mrtnvgr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Copyright ¬© 2021-present &lt;a href=&quot;https://github.com/catppuccin&quot; target=&quot;_blank&quot;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>vague2k/vague.nvim</title>
      <link>https://github.com/vague2k/vague.nvim</link>
      <description>&lt;p&gt;A cool, dark, low contrast colorscheme for Neovim. Pastel yet vivid, like a fleeting memory...&lt;/p&gt;&lt;hr&gt;&lt;img width=&quot;1582&quot; alt=&quot;Screenshot 2025-05-24 at 1 44 17‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/8145d76e-3040-4bee-b6bf-3c65140f4786&quot; /&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;vague2k/vague.nvim&quot;,
  lazy = false, -- make sure we load this during startup if it is your main colorscheme
  priority = 1000, -- make sure to load this before all the other plugins
  config = function()
    -- NOTE: you do not need to call setup if you don&#39;t want to.
    require(&quot;vague&quot;).setup({
      -- optional configuration here
    })
    vim.cmd(&quot;colorscheme vague&quot;)
  end
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using Neovim 0.12 built-in plugin manager &lt;code&gt;vim.pack&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add({
  &quot;https://github.com/vague2k/vague.nvim&quot;,
})

require(&quot;vague&quot;).setup({
    -- optional configuration here
})

vim.cmd(&quot;colorscheme vague&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Default configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;vague&quot;).setup({
  transparent = false, -- don&#39;t set background
  -- disable bold/italic globally in `style`
  bold = true,
  italic = true,
  style = {
    -- &quot;none&quot; is the same thing as default. But &quot;italic&quot; and &quot;bold&quot; are also valid options
    boolean = &quot;bold&quot;,
    number = &quot;none&quot;,
    float = &quot;none&quot;,
    error = &quot;bold&quot;,
    comments = &quot;italic&quot;,
    conditionals = &quot;none&quot;,
    functions = &quot;none&quot;,
    headings = &quot;bold&quot;,
    operators = &quot;none&quot;,
    strings = &quot;italic&quot;,
    variables = &quot;none&quot;,

    -- keywords
    keywords = &quot;none&quot;,
    keyword_return = &quot;italic&quot;,
    keywords_loop = &quot;none&quot;,
    keywords_label = &quot;none&quot;,
    keywords_exception = &quot;none&quot;,

    -- builtin
    builtin_constants = &quot;bold&quot;,
    builtin_functions = &quot;none&quot;,
    builtin_types = &quot;bold&quot;,
    builtin_variables = &quot;none&quot;,
  },
  -- plugin styles where applicable
  -- make an issue/pr if you&#39;d like to see more styling options!
  plugins = {
    cmp = {
      match = &quot;bold&quot;,
      match_fuzzy = &quot;bold&quot;,
    },
    dashboard = {
      footer = &quot;italic&quot;,
    },
    lsp = {
      diagnostic_error = &quot;bold&quot;,
      diagnostic_hint = &quot;none&quot;,
      diagnostic_info = &quot;italic&quot;,
      diagnostic_ok = &quot;none&quot;,
      diagnostic_warn = &quot;bold&quot;,
    },
    neotest = {
      focused = &quot;bold&quot;,
      adapter_name = &quot;bold&quot;,
    },
    telescope = {
      match = &quot;bold&quot;,
    },
  },

  -- Override highlights or add new highlights
  on_highlights = function(highlights, colors) end,

  -- Override colors
  colors = {
    bg = &quot;#141415&quot;,
    fg = &quot;#cdcdcd&quot;,
    floatBorder = &quot;#878787&quot;,
    line = &quot;#252530&quot;,
    comment = &quot;#606079&quot;,
    builtin = &quot;#b4d4cf&quot;,
    func = &quot;#c48282&quot;,
    string = &quot;#e8b589&quot;,
    number = &quot;#e0a363&quot;,
    property = &quot;#c3c3d5&quot;,
    constant = &quot;#aeaed1&quot;,
    parameter = &quot;#bb9dbd&quot;,
    visual = &quot;#333738&quot;,
    error = &quot;#d8647e&quot;,
    warning = &quot;#f3be7c&quot;,
    hint = &quot;#7e98e8&quot;,
    operator = &quot;#90a0b5&quot;,
    keyword = &quot;#6e94b2&quot;,
    type = &quot;#9bb4bc&quot;,
    search = &quot;#405065&quot;,
    plus = &quot;#7fa563&quot;,
    delta = &quot;#f3be7c&quot;,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Explicitly Supported plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;Blink-cmp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;Cmp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvimdev/dashboard-nvim&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;Diffview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;Lualine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;Neotest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;Telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;Treesitter-context&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;Snacks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hiphish/rainbow-delimiters.nvim&quot;&gt;Rainbow delimiters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;Mini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntpeters/vim-better-whitespace&quot;&gt;Vim-better-whitespace&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extras&lt;/h2&gt; 
&lt;p&gt;Extra color configs for other tools can be found in &lt;a href=&quot;https://raw.githubusercontent.com/vague2k/vague.nvim/main/extras/&quot;&gt;extras&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PR&#39;s are welcome and encouraged.&lt;/p&gt; 
&lt;p&gt;If you would like to propose support for a specific plugin, you can make a PR with your modifications to the &lt;code&gt;lua/vague/groups&lt;/code&gt; directory&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>echasnovski/mini.nvim</title>
      <link>https://github.com/echasnovski/mini.nvim</link>
      <description>&lt;p&gt;Library of 40+ independent Lua modules improving overall Neovim (version 0.9 and higher) experience with minimal effort&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/logo.png&quot; alt=&quot;mini.nvim&quot; /&gt; 
&lt;/div&gt; 
&lt;!-- badges: start --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://badgen.net/github/license/echasnovski/mini.nvim&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/tags/&quot;&gt;&lt;img src=&quot;https://badgen.net/github/tag/echasnovski/mini.nvim&quot; alt=&quot;GitHub tag&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/CHANGELOG.md&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Current%20version/development/cyan&quot; alt=&quot;Current version&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- badges: end --&gt; 
&lt;p&gt;Library of 40+ independent Lua modules improving overall &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; (version 0.9 and higher) experience with minimal effort. They all share same configuration approaches and general design principles.&lt;/p&gt; 
&lt;p&gt;Think about this project as &quot;Swiss Army knife&quot; among Neovim plugins: it has many different independent tools (modules) suitable for most common tasks. Each module can be used separately without any startup and usage overhead.&lt;/p&gt; 
&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/CONTRIBUTING.md&quot;&gt;contributing guides&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#general-principles&quot;&gt;General principles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#plugin-colorschemes&quot;&gt;Plugin colorschemes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/#planned-modules&quot;&gt;Planned modules&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are two branches to install from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here are code snippets for some common installation methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Manually with &lt;code&gt;git clone&lt;/code&gt; (compatible with &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Put this at the top of &#39;init.lua&#39;
local path_package = vim.fn.stdpath(&#39;data&#39;) .. &#39;/site&#39;
local mini_path = path_package .. &#39;/pack/deps/start/mini.nvim&#39;
if not vim.loop.fs_stat(mini_path) then
  vim.cmd(&#39;echo &quot;Installing `mini.nvim`&quot; | redraw&#39;)
  local clone_cmd = {
    &#39;git&#39;, &#39;clone&#39;, &#39;--filter=blob:none&#39;,
    -- Uncomment next line to use &#39;stable&#39; branch
    -- &#39;--branch&#39;, &#39;stable&#39;,
    &#39;https://github.com/echasnovski/mini.nvim&#39;, mini_path
  }
  vim.fn.system(clone_cmd)
  vim.cmd(&#39;packadd mini.nvim | helptags ALL&#39;)
  vim.cmd(&#39;echo &quot;Installed `mini.nvim`&quot; | redraw&#39;)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Code snippet&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Main&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;With &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Branch&lt;/th&gt; 
   &lt;th&gt;Code snippet&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Main&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every module is also distributed as a standalone Git repository. Check out module&#39;s information for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call module&#39;s &lt;code&gt;setup()&lt;/code&gt; (if required) to enable its functionality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; 
 &lt;li&gt;Install plugin in other place with shorter path.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;&#39;mini.nvim&#39; contains many modules which is slightly daunting at first. All of them can be used independently, one at a time. For easier exploration, here they are presented in groups based on module&#39;s primary functionality (although some modules can fit in several groups).&lt;/p&gt; 
&lt;h3&gt;Text editing&lt;/h3&gt; 
&lt;p&gt;These modules improve your text editing experience. Start with &#39;mini.ai&#39;, &#39;mini.operators&#39;, and &#39;mini.surround&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.ai&lt;/td&gt; 
   &lt;td&gt;Extend and create &lt;code&gt;a&lt;/code&gt;/&lt;code&gt;i&lt;/code&gt; textobjects&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-ai.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-ai.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.align&lt;/td&gt; 
   &lt;td&gt;Align text interactively&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-align.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-align.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.comment&lt;/td&gt; 
   &lt;td&gt;Comment lines&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-comment.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-comment.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.completion&lt;/td&gt; 
   &lt;td&gt;Completion and signature help&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-completion.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-completion.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.keymap&lt;/td&gt; 
   &lt;td&gt;Special key mappings&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-keymap.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-keymap.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.move&lt;/td&gt; 
   &lt;td&gt;Move any selection in any direction&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-move.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-move.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.operators&lt;/td&gt; 
   &lt;td&gt;Text edit operators&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-operators.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-operators.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.pairs&lt;/td&gt; 
   &lt;td&gt;Autopairs&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-pairs.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-pairs.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.snippets&lt;/td&gt; 
   &lt;td&gt;Manage and expand snippets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-snippets.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-snippets.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.splitjoin&lt;/td&gt; 
   &lt;td&gt;Split and join arguments&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-splitjoin.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-splitjoin.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.surround&lt;/td&gt; 
   &lt;td&gt;Surround actions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-surround.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-surround.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;General workflow&lt;/h3&gt; 
&lt;p&gt;These modules improve your general workflow. Start with &#39;mini.bracketed&#39;, &#39;mini.files&#39;, and &#39;mini.pick&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.basics&lt;/td&gt; 
   &lt;td&gt;Common configuration presets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-basics.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-basics.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.bracketed&lt;/td&gt; 
   &lt;td&gt;Go forward/backward with square brackets&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-bracketed.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-bracketed.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.bufremove&lt;/td&gt; 
   &lt;td&gt;Remove buffers&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-bufremove.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-bufremove.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.clue&lt;/td&gt; 
   &lt;td&gt;Show next key clues&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-clue.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-clue.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.deps&lt;/td&gt; 
   &lt;td&gt;Plugin manager&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-deps.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-deps.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.diff&lt;/td&gt; 
   &lt;td&gt;Work with diff hunks&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-diff.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-diff.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.extra&lt;/td&gt; 
   &lt;td&gt;Extra &#39;mini.nvim&#39; functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-extra.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-extra.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.files&lt;/td&gt; 
   &lt;td&gt;Navigate and manipulate file system&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-files.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-files.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.git&lt;/td&gt; 
   &lt;td&gt;Git integration&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-git.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-git.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.jump&lt;/td&gt; 
   &lt;td&gt;Jump to next/previous single character&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-jump.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-jump.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.jump2d&lt;/td&gt; 
   &lt;td&gt;Jump within visible lines&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-jump2d.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-jump2d.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.misc&lt;/td&gt; 
   &lt;td&gt;Miscellaneous functions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-misc.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-misc.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.pick&lt;/td&gt; 
   &lt;td&gt;Pick anything&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-pick.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-pick.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.sessions&lt;/td&gt; 
   &lt;td&gt;Session management&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-sessions.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-sessions.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.visits&lt;/td&gt; 
   &lt;td&gt;Track and reuse file system visits&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-visits.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-visits.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Appearance&lt;/h3&gt; 
&lt;p&gt;These modules improve your Neovim appearance. Start with &#39;mini.hues&#39;, &#39;mini.icons&#39;, and &#39;mini.statusline&#39;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.animate&lt;/td&gt; 
   &lt;td&gt;Animate common Neovim actions&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-animate.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-animate.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.base16&lt;/td&gt; 
   &lt;td&gt;Base16 colorscheme creation&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-base16.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.colors&lt;/td&gt; 
   &lt;td&gt;Tweak and save any color scheme&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-colors.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-colors.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.cursorword&lt;/td&gt; 
   &lt;td&gt;Autohighlight word under cursor&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-cursorword.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-cursorword.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.hipatterns&lt;/td&gt; 
   &lt;td&gt;Highlight patterns in text&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hipatterns.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-hipatterns.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.hues&lt;/td&gt; 
   &lt;td&gt;Generate configurable color scheme&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-hues.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.icons&lt;/td&gt; 
   &lt;td&gt;Icon provider&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-icons.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-icons.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.indentscope&lt;/td&gt; 
   &lt;td&gt;Visualize and work with indent scope&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-indentscope.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-indentscope.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.map&lt;/td&gt; 
   &lt;td&gt;Window with buffer text overview&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-map.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-map.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.notify&lt;/td&gt; 
   &lt;td&gt;Show notifications&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-notify.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-notify.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.starter&lt;/td&gt; 
   &lt;td&gt;Start screen&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-starter.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-starter.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.statusline&lt;/td&gt; 
   &lt;td&gt;Statusline&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-statusline.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-statusline.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.tabline&lt;/td&gt; 
   &lt;td&gt;Tabline&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-tabline.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-tabline.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.trailspace&lt;/td&gt; 
   &lt;td&gt;Trailspace (highlight and remove)&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-trailspace.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-trailspace.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Other&lt;/h3&gt; 
&lt;p&gt;These modules don&#39;t quite fit in any of the previous categories.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Overview&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.doc&lt;/td&gt; 
   &lt;td&gt;Generate Neovim help files&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-doc.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-doc.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.fuzzy&lt;/td&gt; 
   &lt;td&gt;Fuzzy matching&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-fuzzy.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-fuzzy.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;mini.test&lt;/td&gt; 
   &lt;td&gt;Test Neovim plugins&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-test.md&quot;&gt;README&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/doc/mini-test.txt&quot;&gt;Help file&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;General principles&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Design&lt;/strong&gt;. Each module is designed to solve a particular problem targeting balance between feature-richness (handling as many edge-cases as possible) and simplicity of implementation/support. Granted, not all of them ended up with the same balance, but it is the goal nevertheless.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Independence&lt;/strong&gt;. Modules are independent of each other and can be run without external dependencies. Although some of them may need dependencies for full experience.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structure&lt;/strong&gt;. Each module is a submodule for a placeholder &quot;mini&quot; module. So, for example, &quot;surround&quot; module should be referred to as &quot;mini.surround&quot;. As later will be explained, this plugin can also be referred to as &quot;MiniSurround&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Each module you want to use should be enabled separately with &lt;code&gt;require(&amp;lt;name of module&amp;gt;).setup({})&lt;/code&gt;. Possibly replace &lt;code&gt;{}&lt;/code&gt; with your config table or omit altogether to use defaults. You can supply only parts of config, the rest will be inferred from defaults.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Call to module&#39;s &lt;code&gt;setup()&lt;/code&gt; always creates a global Lua object with coherent camel-case name: &lt;code&gt;require(&#39;mini.surround&#39;).setup()&lt;/code&gt; creates &lt;code&gt;_G.MiniSurround&lt;/code&gt;. This allows for a simpler usage of plugin functionality: instead of &lt;code&gt;require(&#39;mini.surround&#39;)&lt;/code&gt; use &lt;code&gt;MiniSurround&lt;/code&gt; (or manually &lt;code&gt;:lua MiniSurround.*&lt;/code&gt; in command line); available from &lt;code&gt;v:lua&lt;/code&gt; like &lt;code&gt;v:lua.MiniSurround&lt;/code&gt;. Considering this, &quot;module&quot; and &quot;Lua object&quot; names can be used interchangeably: &#39;mini.surround&#39; and &#39;MiniSurround&#39; will mean the same thing.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Each supplied &lt;code&gt;config&lt;/code&gt; table is stored in &lt;code&gt;config&lt;/code&gt; field of global object. Like &lt;code&gt;MiniSurround.config&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Values of &lt;code&gt;config&lt;/code&gt; which affect runtime activity can be changed on the fly to have effect. For example, &lt;code&gt;MiniSurround.config.n_lines&lt;/code&gt; can be changed during runtime; but changing &lt;code&gt;MiniSurround.config.mappings&lt;/code&gt; won&#39;t have any effect (as mappings are created once during &lt;code&gt;setup()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;If module works best with some specific non-default option value, it is set during &lt;code&gt;setup()&lt;/code&gt;. If the value is not essential to module&#39;s functionality, it is done only if user or another plugin hasn&#39;t set it beforehand (no matter the value).&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Buffer local configuration&lt;/strong&gt;. Each module can be additionally configured to use certain runtime config settings locally to buffer. See &lt;code&gt;mini.nvim-buffer-local-config&lt;/code&gt; section in help file for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Buffer names&lt;/strong&gt;. All module-related buffers are named according to the following format: &lt;code&gt;mini&amp;lt;module-name&amp;gt;://&amp;lt;buffer-number&amp;gt;/&amp;lt;useful-info&amp;gt;&lt;/code&gt; (forward slashes are used on any platform; &lt;code&gt;&amp;lt;useful-info&amp;gt;&lt;/code&gt; may be empty). This structure allows creating identifiable, reasonably unique, and useful buffer names. For example, &#39;mini.files&#39; buffers are created per displayed directory/file with names like &lt;code&gt;minifiles://10/path/to/displayed/directory&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disabling&lt;/strong&gt;. Each module&#39;s core functionality can be disabled globally or locally to buffer. See &quot;Disabling&quot; section in module&#39;s help page for more details. See &lt;code&gt;mini.nvim-disabling-recipes&lt;/code&gt; section in main help file for common recipes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silencing&lt;/strong&gt;. Each module providing non-error feedback can be configured to not do that by setting &lt;code&gt;config.silent = true&lt;/code&gt; (either inside &lt;code&gt;setup()&lt;/code&gt; call or on the fly).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highlighting&lt;/strong&gt;. Appearance of module&#39;s output is controlled by certain set of highlight groups (see &lt;code&gt;:h highlight-groups&lt;/code&gt;). By default they usually link to some semantically close built-in highlight group and are ensured to be defined after any color scheme takes effect. Use &lt;code&gt;:highlight&lt;/code&gt; command or &lt;code&gt;vim.api.nvim_set_hl()&lt;/code&gt; Lua function to customize highlighting. To see a more calibrated look, use &#39;mini.hues&#39;, &#39;mini.base16&#39;, or plugin&#39;s color scheme.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability&lt;/strong&gt;. Each module upon release is considered to be relatively stable: both in terms of setup and functionality. Any non-bugfix backward-incompatible change will be released gradually as much as possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Not filetype/language specific&lt;/strong&gt;. Including functionality which needs several filetype/language specific implementations is an explicit no-goal of this project. This is mostly due to the potential increase in maintenance to keep implementation up to date. However, any part which might need filetype/language specific tuning should be designed to allow it by letting user set proper buffer options and/or local configuration.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Plugin color schemes&lt;/h2&gt; 
&lt;p&gt;This plugin comes with several color schemes (all have both dark and light variants). Activate any of them as a regular &lt;code&gt;colorscheme&lt;/code&gt; (like &lt;code&gt;:colorscheme miniwinter&lt;/code&gt; or &lt;code&gt;vim.cmd.colorscheme(&#39;miniwinter&#39;)&lt;/code&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Based on &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md&quot;&gt;&#39;mini.hues&#39;&lt;/a&gt; (recommended):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;miniwinter&lt;/code&gt;: &quot;icy winter&quot; palette with azure background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minispring&lt;/code&gt;: &quot;blooming spring&quot; palette with green background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minisummer&lt;/code&gt;: &quot;hot summer&quot; palette with brown/yellow background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;miniautumn&lt;/code&gt;: &quot;cooling autumn&quot; palette with purple background.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;randomhue&lt;/code&gt;: random background and foreground of the same hue with medium saturation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can see how they look in &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-hues.md#bundled-color-schemes&quot;&gt;&#39;mini.hues&#39; README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Based on &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md&quot;&gt;&#39;mini.base16&#39;&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;minicyan&lt;/code&gt;: cyan and grey main colors with medium contrast and saturation palette.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;minischeme&lt;/code&gt;: blue and yellow main colors with high contrast and saturation palette.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can see how they look in &lt;a href=&quot;https://raw.githubusercontent.com/echasnovski/mini.nvim/main/readmes/mini-base16.md#demo&quot;&gt;&#39;mini.base16&#39; README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Planned modules&lt;/h2&gt; 
&lt;p&gt;This is the list of modules I currently intend to implement eventually (as my free time and dedication will allow), in alphabetical order:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&#39;mini.abbrev&#39; - helper to manage/setup Insert mode abbreviations.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.cmdline&#39; - improved Command line. Possibly with custom &lt;code&gt;vim.ui.input&lt;/code&gt; implementation.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.cycle&#39; - cycle through alternatives with pre-defined rules. Something like &lt;a href=&quot;https://github.com/monaqa/dial.nvim&quot;&gt;monaqa/dial.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/AndrewRadev/switch.vim&quot;&gt;AndrewRadev/switch.vim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&#39;mini.folds&#39; - more capable and user-friendly folds.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.repl&#39; - extendable wrapper for REPLs with built-in support for R, Python, Julia, and maybe (just maybe) some AI tools.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.sendtext&#39; - send text between buffers. In particular between regular and built-in terminal buffers.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.statuscolumn&#39; - customizable &#39;statuscolumn&#39;.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.terminals&#39; - coherently manage interactive terminal buffers. Something like &lt;a href=&quot;https://github.com/kassio/neoterm&quot;&gt;kassio/neoterm&lt;/a&gt;. Might also incorporate functionality to asynchronously run code in shell with post-processed results.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.quickfix&#39; - more capable and user-friendly quickfix list. Possibly with preview and inline editing for search-and-replace workflow.&lt;/li&gt; 
 &lt;li&gt;&#39;mini.windows&#39; - window manager. Interactive picker, layout organizer, and maybe more.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-neo-tree/neo-tree.nvim</title>
      <link>https://github.com/nvim-neo-tree/neo-tree.nvim</link>
      <description>&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; 
&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; 
&lt;p&gt;This screenshot shows Neo-tree opened in the traditional sidebar layout:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&quot; alt=&quot;Neo-tree file system sidebar&quot; /&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; Neo-tree filesystem screenshot, Netrw Style &lt;/summary&gt; 
 &lt;p&gt;The below screenshot shows Neo-tree opened &quot;netrw style&quot; (&lt;code&gt;:Neotree position=current&lt;/code&gt;). When opened in this way, there is more room so the extra detail columns can be shown. This screenshot also shows how the contents can be sorted on any column. In this example, we are sorted on &quot;Size&quot; descending:&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-file-details-and-sort.png&quot; alt=&quot;Neo-tree file system details&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Breaking Changes BAD &lt;span&gt;üí£&lt;/span&gt; &lt;span&gt;üëø&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#what-is-a-breaking-change&quot;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#30&quot;&gt;Changelog 3.0&lt;/a&gt; for breaking changes and deprecations in 3.0.&lt;/p&gt; 
&lt;h3&gt;User Experience GOOD &lt;span&gt;üôÇ&lt;/span&gt; &lt;span&gt;üëç&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; 
 &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; 
 &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file.enabled=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; 
 &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Neo-tree is meant to be smooth, efficient, stable, and intuitive. If you find anything janky, slow, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;This plugin relies upon these two excellent library plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;MunifTanjim/nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;nvim-lua/plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are also some optional plugins that work with Neo-tree:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-tree/nvim-web-devicons&lt;/a&gt; for file icons.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/antosha417/nvim-lsp-file-operations&quot;&gt;antosha417/nvim-lsp-file-operations&lt;/a&gt; for LSP-enhanced renames/etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;folke/snacks.nvim&lt;/a&gt; for image previews, see Preview Mode section. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md#neo-treenvim&quot;&gt;snacks.rename&lt;/a&gt; can also work with Neo-tree&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; for image previews. 
  &lt;ul&gt; 
   &lt;li&gt;If both snacks.nvim and image.nvim are installed. Neo-tree currently will try to preview with snacks.nvim first, then try image.nvim.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;s1n7ax/nvim-window-picker&lt;/a&gt; for &lt;code&gt;_with_window_picker&lt;/code&gt; keymaps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;mini.deps example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add = MiniDeps.add

add({
  source = &#39;nvim-neo-tree/neo-tree.nvim&#39;,
  checkout = &#39;3.x&#39;,
  depends = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;lazy.nvim example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;MunifTanjim/nui.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
    },
    lazy = false, -- neo-tree will lazily load itself
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt; lazy.nvim example with all optional plugins: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;MunifTanjim/nui.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;,
    },
  },
  {
    &quot;antosha417/nvim-lsp-file-operations&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;nvim-neo-tree/neo-tree.nvim&quot;, -- makes sure that this loads after Neo-tree.
    },
    config = function()
      require(&quot;lsp-file-operations&quot;).setup()
    end,
  },
  {
    &quot;s1n7ax/nvim-window-picker&quot;,
    version = &quot;2.*&quot;,
    config = function()
      require(&quot;window-picker&quot;).setup({
        filter_rules = {
          include_current_win = false,
          autoselect_one = true,
          -- filter using buffer options
          bo = {
            -- if the file type is one of following, the window will be ignored
            filetype = { &quot;neo-tree&quot;, &quot;neo-tree-popup&quot;, &quot;notify&quot; },
            -- if the buffer type is one of following, the window will be ignored
            buftype = { &quot;terminal&quot;, &quot;quickfix&quot; },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; Packer.nvim example: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  requires = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; vim.pack example (Neovim v0.12, still in development at time of writing): &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add({
  {
    src = &#39;https://github.com/nvim-neo-tree/neo-tree.nvim&#39;,
    version = vim.version.range(&#39;3&#39;)
  },
  -- dependencies
  &quot;nvim-lua/plenary.nvim&quot;,
  &quot;MunifTanjim/nui.nvim&quot;,
  -- optional, but recommended
  &quot;nvim-tree/nvim-web-devicons&quot;,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Manual installation via &lt;code&gt;:h packages&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/install.sh&quot;&gt;doc/install.sh&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/install.ps1&quot;&gt;doc/install.ps1&lt;/a&gt; for POSIX/Windows respectively.&lt;/p&gt; 
&lt;h2&gt;Post-install: Try it out!&lt;/h2&gt; 
&lt;p&gt;Try &lt;code&gt;:Neotree&lt;/code&gt; to open Neo-tree as a sidebar, and press &lt;code&gt;?&lt;/code&gt; while in Neo-tree to open the keyboard help.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can &lt;code&gt;:checkhealth neo-tree&lt;/code&gt; to ensure you have all the required dependencies. It can also check that your config table looks correct. This is still in its early stages, so please file issues if you&#39;d like to see more checks added or a check isn&#39;t working properly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;neo-tree&#39;).setup({
  -- options go here
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt; üí§ lazy.nvim/Neovim distro users: &lt;/summary&gt; 
 &lt;p&gt;The table passed into &lt;code&gt;setup()&lt;/code&gt; has a type of &lt;code&gt;neotree.Config&lt;/code&gt;. If you&#39;re on a distro using lazy.nvim (e.g. LazyVim) or you just like the syntax, you might want to consider using lazy.nvim&#39;s &lt;code&gt;opts&lt;/code&gt; instead:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  },
  lazy = false, -- neo-tree will lazily load itself
  ---@module &#39;neo-tree&#39;
  ---@type neotree.Config
  opts = {
    -- options go here
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You do not need to call &lt;code&gt;setup()&lt;/code&gt; for Neo-tree and its commands to work. &lt;code&gt;setup()&lt;/code&gt; is only for configuration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt; Example configuration featuring many interesting settings: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;, &quot;&amp;lt;Cmd&amp;gt;Neotree&amp;lt;CR&amp;gt;&quot;)
require(&quot;neo-tree&quot;).setup({
  close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab
  popup_border_style = &quot;NC&quot;, -- or &quot;&quot; to use &#39;winborder&#39; on Neovim v0.11+
  enable_git_status = true,
  enable_diagnostics = true,
  open_files_do_not_replace_types = { &quot;terminal&quot;, &quot;trouble&quot;, &quot;qf&quot; }, -- when opening files, do not use windows containing these filetypes or buftypes
  open_files_using_relative_paths = false,
  sort_case_insensitive = false, -- used when sorting files and directories in the tree
  sort_function = nil, -- use a custom function for sorting files and directories in the tree
  -- sort_function = function (a,b)
  --       if a.type == b.type then
  --           return a.path &amp;gt; b.path
  --       else
  --           return a.type &amp;gt; b.type
  --       end
  --   end , -- this sorts files and directories descendantly
  default_component_configs = {
    container = {
      enable_character_fade = true,
    },
    indent = {
      indent_size = 2,
      padding = 1, -- extra padding on left hand side
      -- indent guides
      with_markers = true,
      indent_marker = &quot;‚îÇ&quot;,
      last_indent_marker = &quot;‚îî&quot;,
      highlight = &quot;NeoTreeIndentMarker&quot;,
      -- expander config, needed for nesting files
      with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders
      expander_collapsed = &quot;Ôë†&quot;,
      expander_expanded = &quot;Ôëº&quot;,
      expander_highlight = &quot;NeoTreeExpander&quot;,
    },
    icon = {
      folder_closed = &quot;Óóø&quot;,
      folder_open = &quot;Óóæ&quot;,
      folder_empty = &quot;Û∞úå&quot;,
      provider = function(icon, node, state) -- default icon provider utilizes nvim-web-devicons if available
        if node.type == &quot;file&quot; or node.type == &quot;terminal&quot; then
          local success, web_devicons = pcall(require, &quot;nvim-web-devicons&quot;)
          local name = node.type == &quot;terminal&quot; and &quot;terminal&quot; or node.name
          if success then
            local devicon, hl = web_devicons.get_icon(name)
            icon.text = devicon or icon.text
            icon.highlight = hl or icon.highlight
          end
        end
      end,
      -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there
      -- then these will never be used.
      default = &quot;*&quot;,
      highlight = &quot;NeoTreeFileIcon&quot;,
    },
    modified = {
      symbol = &quot;[+]&quot;,
      highlight = &quot;NeoTreeModified&quot;,
    },
    name = {
      trailing_slash = false,
      use_git_status_colors = true,
      highlight = &quot;NeoTreeFileName&quot;,
    },
    git_status = {
      symbols = {
        -- Change type
        added = &quot;&quot;, -- or &quot;‚úö&quot;
        modified = &quot;&quot;, -- or &quot;ÔëÑ&quot;
        deleted = &quot;‚úñ&quot;, -- this can only be used in the git_status source
        renamed = &quot;Û∞Åï&quot;, -- this can only be used in the git_status source
        -- Status type
        untracked = &quot;ÔÑ®&quot;,
        ignored = &quot;Ôë¥&quot;,
        unstaged = &quot;Û∞Ñ±&quot;,
        staged = &quot;ÔÅÜ&quot;,
        conflict = &quot;Óúß&quot;,
      },
    },
    -- If you don&#39;t want to use these columns, you can set `enabled = false` for each of them individually
    file_size = {
      enabled = true,
      width = 12, -- width of the column
      required_width = 64, -- min width of window required to show this column
    },
    type = {
      enabled = true,
      width = 10, -- width of the column
      required_width = 122, -- min width of window required to show this column
    },
    last_modified = {
      enabled = true,
      width = 20, -- width of the column
      required_width = 88, -- min width of window required to show this column
    },
    created = {
      enabled = true,
      width = 20, -- width of the column
      required_width = 110, -- min width of window required to show this column
    },
    symlink_target = {
      enabled = false,
    },
  },
  -- A list of functions, each representing a global custom command
  -- that will be available in all sources (if not overridden in `opts[source_name].commands`)
  -- see `:h neo-tree-custom-commands-global`
  commands = {},
  window = {
    position = &quot;left&quot;,
    width = 40,
    mapping_options = {
      noremap = true,
      nowait = true,
    },
    mappings = {
      [&quot;&amp;lt;space&amp;gt;&quot;] = {
        &quot;toggle_node&quot;,
        nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use
      },
      [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;open&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open&quot;,
      [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;cancel&quot;, -- close preview or floating neo-tree window
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = true,
          use_snacks_image = true,
          use_image_nvim = true,
        },
      },
      -- Read `# Preview Mode` for more information
      [&quot;l&quot;] = &quot;focus_preview&quot;,
      [&quot;S&quot;] = &quot;open_split&quot;,
      [&quot;s&quot;] = &quot;open_vsplit&quot;,
      -- [&quot;S&quot;] = &quot;split_with_window_picker&quot;,
      -- [&quot;s&quot;] = &quot;vsplit_with_window_picker&quot;,
      [&quot;t&quot;] = &quot;open_tabnew&quot;,
      -- [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open_drop&quot;,
      -- [&quot;t&quot;] = &quot;open_tab_drop&quot;,
      [&quot;w&quot;] = &quot;open_with_window_picker&quot;,
      --[&quot;P&quot;] = &quot;toggle_preview&quot;, -- enter preview mode, which shows the current node without focusing
      [&quot;C&quot;] = &quot;close_node&quot;,
      -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,
      [&quot;z&quot;] = &quot;close_all_nodes&quot;,
      --[&quot;Z&quot;] = &quot;expand_all_nodes&quot;,
      --[&quot;Z&quot;] = &quot;expand_all_subnodes&quot;,
      [&quot;a&quot;] = {
        &quot;add&quot;,
        -- this command supports BASH style brace expansion (&quot;x{a,b,c}&quot; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details
        -- some commands may take optional config options, see `:h neo-tree-mappings` for details
        config = {
          show_path = &quot;none&quot;, -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
        },
      },
      [&quot;A&quot;] = &quot;add_directory&quot;, -- also accepts the optional config.show_path option like &quot;add&quot;. this also supports BASH style brace expansion.
      [&quot;d&quot;] = &quot;delete&quot;,
      [&quot;r&quot;] = &quot;rename&quot;,
      [&quot;b&quot;] = &quot;rename_basename&quot;,
      [&quot;y&quot;] = &quot;copy_to_clipboard&quot;,
      [&quot;x&quot;] = &quot;cut_to_clipboard&quot;,
      [&quot;p&quot;] = &quot;paste_from_clipboard&quot;,
      [&quot;c&quot;] = &quot;copy&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;:
      -- [&quot;c&quot;] = {
      --  &quot;copy&quot;,
      --  config = {
      --    show_path = &quot;none&quot; -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
      --  }
      --}
      [&quot;m&quot;] = &quot;move&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;.
      [&quot;q&quot;] = &quot;close_window&quot;,
      [&quot;R&quot;] = &quot;refresh&quot;,
      [&quot;?&quot;] = &quot;show_help&quot;,
      [&quot;&amp;lt;&quot;] = &quot;prev_source&quot;,
      [&quot;&amp;gt;&quot;] = &quot;next_source&quot;,
      [&quot;i&quot;] = &quot;show_file_details&quot;,
      -- [&quot;i&quot;] = {
      --   &quot;show_file_details&quot;,
      --   -- format strings of the timestamps shown for date created and last modified (see `:h os.date()`)
      --   -- both options accept a string or a function that takes in the date in seconds and returns a string to display
      --   -- config = {
      --   --   created_format = &quot;%Y-%m-%d %I:%M %p&quot;,
      --   --   modified_format = &quot;relative&quot;, -- equivalent to the line below
      --   --   modified_format = function(seconds) return require(&#39;neo-tree.utils&#39;).relative_date(seconds) end
      --   -- }
      -- },
    },
  },
  nesting_rules = {},
  filesystem = {
    filtered_items = {
      visible = false, -- when true, they will just be displayed differently than normal items
      hide_dotfiles = true,
      hide_gitignored = true,
      hide_hidden = true, -- only works on Windows for hidden files/directories
      hide_by_name = {
        --&quot;node_modules&quot;
      },
      hide_by_pattern = { -- uses glob style patterns
        --&quot;*.meta&quot;,
        --&quot;*/src/*/tsconfig.json&quot;,
      },
      always_show = { -- remains visible even if other settings would normally hide it
        --&quot;.gitignored&quot;,
      },
      always_show_by_pattern = { -- uses glob style patterns
        --&quot;.env*&quot;,
      },
      never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
        --&quot;.DS_Store&quot;,
        --&quot;thumbs.db&quot;
      },
      never_show_by_pattern = { -- uses glob style patterns
        --&quot;.null-ls_*&quot;,
      },
    },
    follow_current_file = {
      enabled = false, -- This will find and focus the file in the active buffer every time
      --               -- the current file is changed while the tree is open.
      leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
    },
    group_empty_dirs = false, -- when true, empty folders will be grouped together
    hijack_netrw_behavior = &quot;open_default&quot;, -- netrw disabled, opening a directory opens neo-tree
    -- in whatever position is specified in window.position
    -- &quot;open_current&quot;,  -- netrw disabled, opening a directory opens within the
    -- window like netrw would, regardless of window.position
    -- &quot;disabled&quot;,    -- netrw left alone, neo-tree does not handle opening dirs
    use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes
    -- instead of relying on nvim autocmd events.
    window = {
      mappings = {
        [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
        [&quot;.&quot;] = &quot;set_root&quot;,
        [&quot;H&quot;] = &quot;toggle_hidden&quot;,
        [&quot;/&quot;] = &quot;fuzzy_finder&quot;,
        [&quot;D&quot;] = &quot;fuzzy_finder_directory&quot;,
        [&quot;#&quot;] = &quot;fuzzy_sorter&quot;, -- fuzzy sorting using the fzy algorithm
        -- [&quot;D&quot;] = &quot;fuzzy_sorter_directory&quot;,
        [&quot;f&quot;] = &quot;filter_on_submit&quot;,
        [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;clear_filter&quot;,
        [&quot;[g&quot;] = &quot;prev_git_modified&quot;,
        [&quot;]g&quot;] = &quot;next_git_modified&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;og&quot;] = { &quot;order_by_git_status&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
        -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state) ... end,
      },
      fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode
        [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
        [&quot;&amp;lt;C-n&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
        [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
        [&quot;&amp;lt;C-p&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
        [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
        [&quot;&amp;lt;S-CR&amp;gt;&quot;] = &quot;close_keep_filter&quot;,
        [&quot;&amp;lt;C-CR&amp;gt;&quot;] = &quot;close_clear_filter&quot;,
        [&quot;&amp;lt;C-w&amp;gt;&quot;] = { &quot;&amp;lt;C-S-w&amp;gt;&quot;, raw = true },
        {
          -- normal mode mappings
          n = {
            [&quot;j&quot;] = &quot;move_cursor_down&quot;,
            [&quot;k&quot;] = &quot;move_cursor_up&quot;,
            [&quot;&amp;lt;S-CR&amp;gt;&quot;] = &quot;close_keep_filter&quot;,
            [&quot;&amp;lt;C-CR&amp;gt;&quot;] = &quot;close_clear_filter&quot;,
            [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
          }
        }
        -- [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;noop&quot;, -- if you want to use normal mode
        -- [&quot;key&quot;] = function(state, scroll_padding) ... end,
      },
    },

    commands = {}, -- Add a custom command or override a global one using the same function name
  },
  buffers = {
    follow_current_file = {
      enabled = true, -- This will find and focus the file in the active buffer every time
      --              -- the current file is changed while the tree is open.
      leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
    },
    group_empty_dirs = true, -- when true, empty folders will be grouped together
    show_unloaded = true,
    window = {
      mappings = {
        [&quot;d&quot;] = &quot;buffer_delete&quot;,
        [&quot;bd&quot;] = &quot;buffer_delete&quot;,
        [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
        [&quot;.&quot;] = &quot;set_root&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
      },
    },
  },
  git_status = {
    window = {
      position = &quot;float&quot;,
      mappings = {
        [&quot;A&quot;] = &quot;git_add_all&quot;,
        [&quot;gu&quot;] = &quot;git_unstage_file&quot;,
        [&quot;gU&quot;] = &quot;git_undo_last_commit&quot;,
        [&quot;ga&quot;] = &quot;git_add_file&quot;,
        [&quot;gr&quot;] = &quot;git_revert_file&quot;,
        [&quot;gc&quot;] = &quot;git_commit&quot;,
        [&quot;gp&quot;] = &quot;git_push&quot;,
        [&quot;gg&quot;] = &quot;git_commit_and_push&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
      },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/neo-tree.txt&quot;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within Neovim.&lt;/p&gt; 
&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&quot;neo-tree&quot;).paste_default_config()
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Diagnostics icons:&lt;/summary&gt; 
 &lt;p&gt;If you want icons for diagnostic errors, you&#39;ll need to define them somewhere. In Neovim v0.10+, you can configure them in vim.diagnostic.config(), like:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.diagnostic.config({
  signs = {
    text = {
      [vim.diagnostic.severity.ERROR] = &#39;ÔÅó&#39;,
      [vim.diagnostic.severity.WARN] = &#39;ÔÅ±&#39;,
      [vim.diagnostic.severity.INFO] = &#39;ÔÅö&#39;,
      [vim.diagnostic.severity.HINT] = &#39;Û∞åµ&#39;,
    },
  }
})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For older versions of Neovim:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.fn.sign_define(&quot;DiagnosticSignError&quot;, { text = &quot;ÔÅó &quot;, texthl = &quot;DiagnosticSignError&quot; })
vim.fn.sign_define(&quot;DiagnosticSignWarn&quot;, { text = &quot;ÔÅ± &quot;, texthl = &quot;DiagnosticSignWarn&quot; })
vim.fn.sign_define(&quot;DiagnosticSignInfo&quot;, { text = &quot;ÔÅö &quot;, texthl = &quot;DiagnosticSignInfo&quot; })
vim.fn.sign_define(&quot;DiagnosticSignHint&quot;, { text = &quot;Û∞åµ&quot;, texthl = &quot;DiagnosticSignHint&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; 
&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &quot;revealing&quot; the currently active file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; 
&lt;h3&gt;Tab Completion&lt;/h3&gt; 
&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Arguments&lt;/h3&gt; 
&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to do. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;focus&lt;/td&gt; 
   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;show&lt;/td&gt; 
   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the window(s) specified. Can be combined with &quot;position&quot; and/or &quot;source&quot; to specify which window(s) to close.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to show. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;git_status&lt;/td&gt; 
   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;last&lt;/td&gt; 
   &lt;td&gt;Equivalent to the last source used&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;left&lt;/td&gt; 
   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;right&lt;/td&gt; 
   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;top&lt;/td&gt; 
   &lt;td&gt;Open as top window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bottom&lt;/td&gt; 
   &lt;td&gt;Open as bottom window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;float&lt;/td&gt; 
   &lt;td&gt;Open as floating window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;current&lt;/td&gt; 
   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path
:Neotree /home/user/relative/path
:Neotree dir=/home/user/relative/path
:Neotree position=current dir=relative/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; 
&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree main
:Neotree v1.0
:Neotree git_base=8fe34be
:Neotree git_base=HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A path to a file to reveal. This supersedes the &quot;reveal&quot; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &quot;dir&quot;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text
:Neotree position=current dir=%:p:h:h reveal_file=%:p
:Neotree current %:p:h:h %:p
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &quot;reveal&quot;, so you do not need to specify both.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;selector&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. When you specifically set this to false (&lt;code&gt;selector=false&lt;/code&gt;) neo-tree will disable the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#source-selector&quot;&gt;source selector&lt;/a&gt; for that neo-tree instance. Otherwise, the source selector will depend on what you specified in the configuration (&lt;code&gt;config.source_selector.{winbar,statusline}&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; 
&lt;h3&gt;File Nesting&lt;/h3&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; 
&lt;h3&gt;Netrw Hijack&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;:edit .
:[v]split .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;&quot;filesystem.window.position&quot;&lt;/code&gt; is set to &lt;code&gt;&quot;current&quot;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &quot;open_current&quot;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; 
&lt;h2&gt;Sources&lt;/h2&gt; 
&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; 
&lt;h3&gt;filesystem&lt;/h3&gt; 
&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; 
&lt;p&gt;This source can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Browse the filesystem&lt;/li&gt; 
 &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; 
 &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; 
 &lt;li&gt;Search the filesystem&lt;/li&gt; 
 &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;buffers&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&quot; alt=&quot;Neo-tree buffers&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;git_status&lt;/h3&gt; 
&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; 
&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&quot; alt=&quot;Neo-tree git_status&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;document_symbols&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/neo-tree-document-symbols.png&quot; alt=&quot;Neo-tree document_symbols&quot; /&gt; The document_symbols source lists the symbols in the current document obtained by the LSP request &quot;textDocument/documentSymbols&quot;. It currently supports the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; UI: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Display all symbols in the current file with symbol kinds&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Symbols nesting&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Configurable kinds&#39; name and icon&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Auto-refresh symbol list 
    &lt;ul&gt; 
     &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Follow cursor&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Jump to symbols, open symbol in split,... (&lt;code&gt;open_split&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Rename symbols (&lt;code&gt;rename&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Preview symbol (&lt;code&gt;preview&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Hover docs&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Call hierarchy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP Support&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP server selection (ignore, allow_only, use first, use all, etc.)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; CoC Support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See #879 for the tracking issue of these features.&lt;/p&gt; 
&lt;p&gt;This source is currently experimental, so in order to use it, you need to first add &lt;code&gt;&quot;document_symbols&quot;&lt;/code&gt; to &lt;code&gt;config.sources&lt;/code&gt; and open it with the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree document_symbols
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;There are more sources available as extensions that are managed outside of this repository. See the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/External-Sources&quot;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Source Selector&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&quot; alt=&quot;Neo-tree source selector&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;    require(&quot;neo-tree&quot;).setup({
        source_selector = {
            winbar = false,
            statusline = false
        }
    })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Preview Mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neo-tree-preview-mode&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Preview mode will temporarily show whatever file the cursor is on without switching focus from the Neo-tree window. By default, files will be previewed in a new floating window. This can also be configured to automatically choose an existing split by configuring the command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neo-tree&quot;).setup({
  window = {
    mappings = {
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = false,
          -- use_image_nvim = true,
          -- use_snacks_image = true,
          -- title = &#39;Neo-tree Preview&#39;,
        },
      },
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Anything that causes Neo-tree to lose focus will end preview mode. When &lt;code&gt;use_float = false&lt;/code&gt;, the window that was taken over by preview mode will revert back to whatever was shown in that window before preview mode began.&lt;/p&gt; 
&lt;p&gt;You can choose a custom title for the floating window by setting the &lt;code&gt;title&lt;/code&gt; option in its config.&lt;/p&gt; 
&lt;p&gt;If you want to work with the floating preview mode window in autocmds or other custom code, the window will have the &lt;code&gt;neo-tree-preview&lt;/code&gt; filetype.&lt;/p&gt; 
&lt;p&gt;When preview mode is not using floats, the window will have the window local variable &lt;code&gt;neo_tree_preview&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; to indicate that it is being used as a preview window. You can refer to this in statusline and winbar configs to mark a window as being used as a preview.&lt;/p&gt; 
&lt;h4&gt;Image Support in Preview Mode&lt;/h4&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;folke/snacks.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; installed, preview mode supports image rendering by default using kitty graphics protocol or ueberzug (&lt;a href=&quot;https://user-images.githubusercontent.com/41065736/277180763-b7152637-f310-43a5-b8c3-4bcba135629d.mp4&quot;&gt;Video&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;However, if you do not want this feature, you can disable it by setting &lt;code&gt;use_snacks_image = false&lt;/code&gt; or &lt;code&gt;use_image_nvim = false&lt;/code&gt; in the mappings config mentioned above.&lt;/p&gt; 
&lt;h2&gt;Configuration and Customization&lt;/h2&gt; 
&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; 
&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; 
&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; 
&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&quot;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&quot;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&quot;file_opened&quot;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;p&gt;There are many tree plugins for (Neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; 
 &lt;li&gt;Stable.&lt;/li&gt; 
 &lt;li&gt;Easy to customize.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; 
&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; 
&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; 
&lt;h3&gt;Stable&lt;/h3&gt; 
&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally makes it into &lt;strong&gt;v3.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no guarantees on that.&lt;/p&gt; 
&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; 
&lt;h3&gt;Easy to Customize&lt;/h3&gt; 
&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; 
&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; 
&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vim commands (&lt;code&gt;:Neotree&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; 
 &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;p&gt;First and foremost, this project is a community endeavor and would not survive without the constant stream of features and bug fixes that comes from that community. There have been many valued contributors, but a few have stepped up to become maintainers that generously donate their time to guide the project, help out others, and manage the issues. The current list of maintainers are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@pynappo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Past maintainers:&lt;/h3&gt; 
&lt;p&gt;(in alphabetical order)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@cseickel&lt;/li&gt; 
 &lt;li&gt;@miversen33&lt;/li&gt; 
 &lt;li&gt;@nhat-vo&lt;/li&gt; 
 &lt;li&gt;@pysan3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Projects&lt;/h3&gt; 
&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim: set textwidth=80 shiftwidth=2: --&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd#installation&quot;&gt;fd-find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>ntop/ntopng</title>
      <link>https://github.com/ntop/ntopng</link>
      <description>&lt;p&gt;Web-based Traffic and Security Network Traffic Monitoring&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ntopng&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ntop/ntopng/actions?query=workflow%3ABuild&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/ntop/ntopng/build.yml?branch=dev&amp;amp;logo=github&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:ntopng&quot;&gt;&lt;img src=&quot;https://oss-fuzz-build-logs.storage.googleapis.com/badges/ntopng.svg?sanitize=true&quot; alt=&quot;Fuzzing Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gurubase.io/g/ntopng&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gurubase-Ask%20ntopng%20Guru-006BFF&quot; alt=&quot;Gurubase&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Introduction&lt;/h3&gt; 
&lt;p&gt;ntopng¬Æ is a web-based network traffic monitoring application released under GPLv3. It is the new incarnation of the original ntop written in 1998, and now revamped in terms of performance, usability, and features.&lt;/p&gt; 
&lt;p&gt;While you can read more about ntopng on the ntop web site (&lt;a href=&quot;http://www.ntop.org&quot;&gt;http://www.ntop.org&lt;/a&gt;), we suggest you to start reading the &lt;a href=&quot;https://github.com/ntop/ntopng/raw/dev/doc/README.md&quot;&gt;doc/README.md&lt;/a&gt; file for learning how to compile and use ntopng.&lt;/p&gt; 
&lt;p&gt;If instead of source code you prefer to use a pre-built package, please go to &lt;a href=&quot;http://packages.ntop.org&quot;&gt;http://packages.ntop.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We build binary packages for the following platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Debian/Ubuntu LTS x64&lt;/li&gt; 
 &lt;li&gt;CentOS/RedHat/RockyLinux/AlmaLinux Linux x64&lt;/li&gt; 
 &lt;li&gt;Windows x64&lt;/li&gt; 
 &lt;li&gt;RaspberryPI/Debian ARM&lt;/li&gt; 
 &lt;li&gt;FreeBSD/OPNsense/pfSense&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Enjoy.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;If you want to learn more about ntopng please visit the &lt;a href=&quot;https://www.ntop.org/guides/ntopng/&quot;&gt;User&#39;s Guide&lt;/a&gt; and the &lt;a href=&quot;https://www.ntop.org/guides/ntopng/api/index.html&quot;&gt;API Documentation&lt;/a&gt; or watch our &lt;a href=&quot;https://www.youtube.com/watch?v=dtLrax-_ZNs&quot;&gt;latest webinar&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Details&lt;/h3&gt; 
&lt;p&gt;For more information about ntopng, please visit &lt;a href=&quot;https://www.ntop.org/products/traffic-analysis/ntop/&quot;&gt;http://ntop.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ntopng is a registered trademark in the US and EU.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/lazy.nvim</title>
      <link>https://github.com/folke/lazy.nvim</link>
      <description>&lt;p&gt;üí§ A modern plugin manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazy.folke.io/installation&quot;&gt;Install&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazy.folke.io/configuration&quot;&gt;Configure&lt;/a&gt; ¬∑ &lt;a href=&quot;https://lazy.folke.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/folke/lazy.nvim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/folke/lazy.nvim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; is a modern plugin manager for Neovim.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üì¶ Manage all your Neovim plugins with a powerful UI&lt;/li&gt; 
 &lt;li&gt;üöÄ Fast startup times thanks to automatic caching and bytecode compilation of Lua modules&lt;/li&gt; 
 &lt;li&gt;üíæ Partial clones instead of shallow clones&lt;/li&gt; 
 &lt;li&gt;üîå Automatic lazy-loading of Lua modules and lazy-loading on events, commands, filetypes, and key mappings&lt;/li&gt; 
 &lt;li&gt;‚è≥ Automatically install missing plugins before starting up Neovim, allowing you to start using it right away&lt;/li&gt; 
 &lt;li&gt;üí™ Async execution for improved performance&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è No need to manually compile plugins&lt;/li&gt; 
 &lt;li&gt;üß™ Correct sequencing of dependencies&lt;/li&gt; 
 &lt;li&gt;üìÅ Configurable in multiple files&lt;/li&gt; 
 &lt;li&gt;üìö Generates helptags of the headings in &lt;code&gt;README.md&lt;/code&gt; files for plugins that don&#39;t have vimdocs&lt;/li&gt; 
 &lt;li&gt;üíª Dev options and patterns for using local plugins&lt;/li&gt; 
 &lt;li&gt;üìä Profiling tools to optimize performance&lt;/li&gt; 
 &lt;li&gt;üîí Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt; to keep track of installed plugins&lt;/li&gt; 
 &lt;li&gt;üîé Automatically check for updates&lt;/li&gt; 
 &lt;li&gt;üìã Commit, branch, tag, version, and full &lt;a href=&quot;https://devhints.io/semver&quot;&gt;Semver&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;üìà Statusline component to see the number of pending updates&lt;/li&gt; 
 &lt;li&gt;üé® Automatically lazy-loads colorschemes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luarocks.org/&quot;&gt;luarocks&lt;/a&gt; to install rockspecs. You can remove &lt;code&gt;rockspec&lt;/code&gt; from &lt;code&gt;opts.pkg.sources&lt;/code&gt; to disable this feature.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;p&gt;Check the &lt;a href=&quot;https://lazy.folke.io/&quot;&gt;documentation website&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a &quot;data only&quot; repo, providing basic, default &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt; configurations for various LSP servers. View &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;all configs&lt;/a&gt; or &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ‚ö†Ô∏è&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The configs live in &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Upgrade to Nvim 0.11+ and use &lt;code&gt;vim.lsp.enable(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to enable a config.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The configs in &lt;code&gt;lua/lspconfig/&lt;/code&gt; are &lt;em&gt;deprecated&lt;/em&gt; and will be removed. 
  &lt;ul&gt; 
   &lt;li&gt;Upgrade to Nvim 0.11+ and use &lt;code&gt;vim.lsp.enable(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to enable a config.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, not the issue tracker.&lt;/li&gt; 
 &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;This repo only provides self-contained &lt;em&gt;configurations&lt;/em&gt;. The &lt;code&gt;require&#39;lspconfig&#39;&lt;/code&gt; &quot;framework&quot; is deprecated and will be removed. 
  &lt;ul&gt; 
   &lt;li&gt;The &quot;framework&quot; parts (&lt;em&gt;not&lt;/em&gt; the configs) of nvim-lspconfig were upstreamed to Nvim core (&lt;code&gt;vim.lsp.config&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.11.3+. 
  &lt;ul&gt; 
   &lt;li&gt;Support for Nvim 0.10 will be removed. Upgrade Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or if you have Nvim 0.12 (nightly), you can use the builtin &lt;code&gt;vim.pack&lt;/code&gt; plugin manager: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add{
  { src = &#39;https://github.com/neovim/nvim-lspconfig&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable its config in your init.lua (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;:help lsp-quickstart&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.enable(&#39;pyright&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;jdtls&#39;, {
  cmd = { &#39;/path/to/jdtls&#39; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets default options and mappings when LSP is active in a buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-defaults&quot;&gt;:help lsp-defaults&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-defaults&quot;&gt;:help diagnostic-defaults&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-attach&quot;&gt;:help lsp-attach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;:help lsp-buf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra settings can be specified for each LSP server. With Nvim 0.11+ you can &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;extend a config&lt;/a&gt; by calling &lt;code&gt;vim.lsp.config(&#39;‚Ä¶&#39;, {‚Ä¶})&lt;/code&gt;. (You can also copy any config directly from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt; and put it in a local &lt;code&gt;lsp/&lt;/code&gt; directory in your &#39;runtimepath&#39;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {
  -- Server-specific settings. See `:help lsp-quickstart`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create a new config&lt;/h2&gt; 
&lt;p&gt;To create a new config you can either (1) use &lt;code&gt;vim.lsp.config&lt;/code&gt; or (2) create a file &lt;code&gt;lsp/&amp;lt;config-name&amp;gt;.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;.&lt;/p&gt; 
&lt;h3&gt;Example: define a new config as code&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.config(&#39;foo&#39;, {cmd={&#39;true&#39;}})&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üòé&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Example: define a new config as a file&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a file &lt;code&gt;lsp/foo.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;. &lt;pre&gt;&lt;code&gt;:exe &#39;edit&#39; stdpath(&#39;config&#39;) .. &#39;/lsp/foo.lua&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add this code to the file (or copy any of the examples from the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/ directory&lt;/a&gt; in this repo): &lt;pre&gt;&lt;code&gt;return {
  cmd = { &#39;true&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Save the file (with &lt;code&gt;++p&lt;/code&gt; to ensure its parent directory is created). &lt;pre&gt;&lt;code&gt;:write ++p
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable the config. &lt;pre&gt;&lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üåà&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Start with &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to troubleshoot. The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in the config from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is a name instead of an absolute path, ensure it is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set filetype?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Not triggering root detection. Some language servers require a &quot;workspace&quot;, which is found by looking for an ancestor directory that contains a &quot;root marker&quot;. The most common root marker is &lt;code&gt;.git/&lt;/code&gt;, but each config defines other &quot;root marker&quot; names. Root markers/directories are listed in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also explicitly set a root instead of relying on automatic detection by enabling &lt;code&gt;&#39;exrc&#39;&lt;/code&gt; and adding an &lt;code&gt;.nvim.lua&lt;/code&gt; at the desired root dir with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;&amp;lt;client name&amp;gt;&#39;, {
  root_dir = vim.fn.fnamemodify(debug.getinfo(1, &#39;S&#39;).source:sub(2), &#39;:p:h&#39;),
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that prior to nvim 0.12 &lt;code&gt;exrc&lt;/code&gt; file is executed only if it&#39;s inside of a cwd where you start &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;. Add this to your init.lua to enable verbose logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, then run &lt;code&gt;:LspLog&lt;/code&gt; to open the log. Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lsp/&amp;lt;server_name&amp;gt;.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/#neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Release process&lt;/h2&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lewis6991/gitsigns.nvim</title>
      <link>https://github.com/lewis6991/gitsigns.nvim</link>
      <description>&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/lewis6991/gitsigns.nvim/actions/workflows/ci.yml/badge.svg?branch=main&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&quot; alt=&quot;License: MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim&quot;&gt;&lt;img src=&quot;https://dotfyle.com/plugins/lewis6991/gitsigns.nvim/shield&quot; alt=&quot;Dotfyle&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Deep buffer integration for Git&lt;/p&gt; 
&lt;h2&gt;üëÄ Preview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Hunk Actions&lt;/th&gt; 
   &lt;th&gt;Line Blame&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&quot; width=&quot;450em&quot; /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&quot; width=&quot;450em&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Signs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Adds signs to the sign column to indicate added, changed, and deleted lines.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/e49ea0bf-c427-41fb-a67f-77c2d413a7cf&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Supports different signs for staged changes.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/28a3e286-96fa-478c-93a3-8028f9bd7123&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Add counts to signs.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d007b924-6811-44ea-b936-d8da4dc00b68&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Hunk Actions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Stage/unstage hunks with &lt;code&gt;:Gitsigns stage_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Reset hunks with &lt;code&gt;:Gitsigns reset_hunk&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Also works on partial hunks in visual mode.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks inline with &lt;code&gt;:Gitsigns preview_hunk_inline&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/60acd664-f4a8-4737-ba65-969f1efa7971&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Preview hunks in popup with &lt;code&gt;:Gitsigns preview_hunk&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d2a9b801-5857-4054-80a8-195d111f4e8c&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Navigate between hunks with &lt;code&gt;:Gitsigns nav_hunk next/prev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Blame&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Show blame of current buffer using &lt;code&gt;:Gitsigns blame&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/7d881e94-6e16-4f98-a526-7e785b11acf9&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in popup with &lt;code&gt;:Gitsigns blame_line&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/03ff7557-b538-4cd1-9478-f893bf7e616e&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show blame information for the current line in virtual text.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/0c79e880-6a6d-4c3f-aa62-33f734725cfd&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ current_line_blame = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_current_line_blame&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Diff&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Change the revision for the signs with &lt;code&gt;:Gitsigns change_base &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show the diff of the current buffer with the index or any revision with &lt;code&gt;:Gitsigns diffthis &amp;lt;REVISION&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Show intra-line word-diff in the buffer.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/409a1f91-5cee-404b-8b12-66b7db3ecac7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Enable with &lt;code&gt;setup({ word_diff = true })&lt;/code&gt;.&lt;/li&gt; 
    &lt;li&gt;Toggle with &lt;code&gt;:Gitsigns toggle_word_diff&lt;/code&gt;.&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show hunks Quickfix/Location List&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Set the quickfix/location list with changes with &lt;code&gt;:Gitsign setqflist/setloclist&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/c17001a5-b9cf-4a00-9891-5b130c0b4745&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; &lt;p&gt;Can show hunks for:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;whole repository (&lt;code&gt;target=all&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;attached buffers (&lt;code&gt;target=attached&lt;/code&gt;)&lt;/li&gt; 
    &lt;li&gt;a specific buffer (&lt;code&gt;target=[integer]&lt;/code&gt;).&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Text Object&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Select hunks as a text object.&lt;/li&gt; 
  &lt;li&gt;Can use &lt;code&gt;vim.keymap.set({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;&amp;lt;Cmd&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Status Line Integration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Show different revisions of buffers&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use &lt;code&gt;:Gitsigns show &amp;lt;REVISION&amp;gt;&lt;/code&gt; to &lt;code&gt;:edit&lt;/code&gt; the current buffer at &lt;code&gt;&amp;lt;REVISION&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;üìã Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.9.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If your version of Neovim is too old, then you can use a past &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim/releases&quot;&gt;release&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Newish version of git. Older versions may not work with some features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üõ†Ô∏è Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;p&gt;Install using your package manager of choice. No setup required.&lt;/p&gt; 
&lt;p&gt;Optional configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup {
  signs = {
    add          = { text = &#39;‚îÉ&#39; },
    change       = { text = &#39;‚îÉ&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‚Äæ&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;‚îÜ&#39; },
  },
  signs_staged = {
    add          = { text = &#39;‚îÉ&#39; },
    change       = { text = &#39;‚îÉ&#39; },
    delete       = { text = &#39;_&#39; },
    topdelete    = { text = &#39;‚Äæ&#39; },
    changedelete = { text = &#39;~&#39; },
    untracked    = { text = &#39;‚îÜ&#39; },
  },
  signs_staged_enable = true,
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  auto_attach = true,
  attach_to_untracked = false,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;
    delay = 1000,
    ignore_whitespace = false,
    virt_text_priority = 100,
    use_focus = true,
  },
  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%R&amp;gt; - &amp;lt;summary&amp;gt;&#39;,
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    style = &#39;minimal&#39;,
    relative = &#39;cursor&#39;,
    row = 0,
    col = 1
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For information on configuring Neovim via lua please see &lt;a href=&quot;https://neovim.io/doc/user/lua-guide.html&quot;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;üéπ Keymaps&lt;/h3&gt; 
&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; 
&lt;p&gt;Here is a suggested example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;gitsigns&#39;).setup{
  ...
  on_attach = function(bufnr)
    local gitsigns = require(&#39;gitsigns&#39;)

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map(&#39;n&#39;, &#39;]c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;]c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;next&#39;)
      end
    end)

    map(&#39;n&#39;, &#39;[c&#39;, function()
      if vim.wo.diff then
        vim.cmd.normal({&#39;[c&#39;, bang = true})
      else
        gitsigns.nav_hunk(&#39;prev&#39;)
      end
    end)

    -- Actions
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, gitsigns.stage_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, gitsigns.reset_hunk)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, function()
      gitsigns.stage_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, function()
      gitsigns.reset_hunk({ vim.fn.line(&#39;.&#39;), vim.fn.line(&#39;v&#39;) })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gitsigns.stage_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gitsigns.reset_buffer)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gitsigns.preview_hunk)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hi&#39;, gitsigns.preview_hunk_inline)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function()
      gitsigns.blame_line({ full = true })
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gitsigns.diffthis)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function()
      gitsigns.diffthis(&#39;~&#39;)
    end)

    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hQ&#39;, function() gitsigns.setqflist(&#39;all&#39;) end)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hq&#39;, gitsigns.setqflist)

    -- Toggles
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gitsigns.toggle_current_line_blame)
    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tw&#39;, gitsigns.toggle_word_diff)

    -- Text object
    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, gitsigns.select_hunk)
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üîó Plugin Integrations&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns setloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; 
&lt;h2&gt;üö´ Non-Goals&lt;/h2&gt; 
&lt;h3&gt;Implement every feature in &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; 
&lt;h3&gt;Support for other VCS&lt;/h3&gt; 
&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; 
&lt;h2&gt;üîå Similar plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neoclide/coc-git&quot;&gt;coc-git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- links --&gt;</description>
    </item>
    
  </channel>
</rss>
